
emg_projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c560  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000444  0800c700  0800c700  0001c700  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cb44  0800cb44  000202fc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cb44  0800cb44  0001cb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cb4c  0800cb4c  000202fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cb4c  0800cb4c  0001cb4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cb50  0800cb50  0001cb50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  0800cb54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ef0  200002fc  0800ce50  000202fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200021ec  0800ce50  000221ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000175ea  00000000  00000000  0002032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c1f  00000000  00000000  00037916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a8  00000000  00000000  0003b538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  0003c8e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bc13  00000000  00000000  0003dab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018dfb  00000000  00000000  000596c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cc8b  00000000  00000000  000724be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010f149  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006248  00000000  00000000  0010f19c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002fc 	.word	0x200002fc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c6e8 	.word	0x0800c6e8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000300 	.word	0x20000300
 80001dc:	0800c6e8 	.word	0x0800c6e8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <FIRFilter_Init>:
#include "FIRFilter.h"

//static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {-0.027313375519213704,-0.02397030968726964,-0.07322923821766152,-0.17458688342254686,-0.23710222197190461,-0.11556723292677823,0.1941226814572781,0.4717067279432907,0.4717067279432907,0.1941226814572781,-0.11556723292677823,-0.23710222197190461,-0.17458688342254686,-0.07322923821766152,-0.02397030968726964,-0.027313375519213704};
static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f , 0.1f , 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};

void FIRFilter_Init(FIRFilter *fir){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	//Clear Filter Buffer
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++){
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e009      	b.n	8000ede <FIRFilter_Init+0x22>
		fir->buf[n] = 0.0f;
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++){
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	3301      	adds	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	2b09      	cmp	r3, #9
 8000ee2:	d9f2      	bls.n	8000eca <FIRFilter_Init+0xe>
	}

	//Clear Buf Index
	fir->bufIndex = 0;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	//Clear Filter Output
	fir->out = 0.0f;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *fir, float inp){
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	ed87 0a00 	vstr	s0, [r7]
	/*Store Latest Sample in buffer */
	fir->buf[fir->bufIndex] = inp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	601a      	str	r2, [r3, #0]

	/*increment buffer index and wrap around if necessary*/
	fir->bufIndex++;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f22:	3301      	adds	r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	if(fir->bufIndex == FIR_FILTER_LENGTH - 1){
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f32:	2b09      	cmp	r3, #9
 8000f34:	d103      	bne.n	8000f3e <FIRFilter_Update+0x3e>
		fir->bufIndex = 0;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}

	/*Compute New Output Sample (Via Convolution)*/
	fir->out = 0.0f;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	62da      	str	r2, [r3, #44]	; 0x2c

	uint8_t sumIndex = fir->bufIndex;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f4c:	73fb      	strb	r3, [r7, #15]

	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++){
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73bb      	strb	r3, [r7, #14]
 8000f52:	e021      	b.n	8000f98 <FIRFilter_Update+0x98>
		/*Decrement Index and Wrap if Necessary*/
		if(sumIndex > 0){
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <FIRFilter_Update+0x62>
			sumIndex--;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e001      	b.n	8000f66 <FIRFilter_Update+0x66>
		}else{
			sumIndex = FIR_FILTER_LENGTH - 1;
 8000f62:	2309      	movs	r3, #9
 8000f64:	73fb      	strb	r3, [r7, #15]
		}

		/*Multiply Impulse Response with Shifted input sample and add to output*/
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000f6c:	7bbb      	ldrb	r3, [r7, #14]
 8000f6e:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <FIRFilter_Update+0xb4>)
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	edd3 6a00 	vldr	s13, [r3]
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	edd3 7a00 	vldr	s15, [r3]
 8000f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++){
 8000f92:	7bbb      	ldrb	r3, [r7, #14]
 8000f94:	3301      	adds	r3, #1
 8000f96:	73bb      	strb	r3, [r7, #14]
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
 8000f9a:	2b09      	cmp	r3, #9
 8000f9c:	d9da      	bls.n	8000f54 <FIRFilter_Update+0x54>
	}

	/*return filtered output*/
	return fir->out;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa2:	ee07 3a90 	vmov	s15, r3
}
 8000fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fca:	4b21      	ldr	r3, [pc, #132]	; (8001050 <MX_ADC1_Init+0x98>)
 8000fcc:	4a21      	ldr	r2, [pc, #132]	; (8001054 <MX_ADC1_Init+0x9c>)
 8000fce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fd0:	4b1f      	ldr	r3, [pc, #124]	; (8001050 <MX_ADC1_Init+0x98>)
 8000fd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <MX_ADC1_Init+0x98>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fde:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <MX_ADC1_Init+0x98>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <MX_ADC1_Init+0x98>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fea:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_ADC1_Init+0x98>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff2:	4b17      	ldr	r3, [pc, #92]	; (8001050 <MX_ADC1_Init+0x98>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff8:	4b15      	ldr	r3, [pc, #84]	; (8001050 <MX_ADC1_Init+0x98>)
 8000ffa:	4a17      	ldr	r2, [pc, #92]	; (8001058 <MX_ADC1_Init+0xa0>)
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffe:	4b14      	ldr	r3, [pc, #80]	; (8001050 <MX_ADC1_Init+0x98>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001004:	4b12      	ldr	r3, [pc, #72]	; (8001050 <MX_ADC1_Init+0x98>)
 8001006:	2201      	movs	r2, #1
 8001008:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800100a:	4b11      	ldr	r3, [pc, #68]	; (8001050 <MX_ADC1_Init+0x98>)
 800100c:	2200      	movs	r2, #0
 800100e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001012:	4b0f      	ldr	r3, [pc, #60]	; (8001050 <MX_ADC1_Init+0x98>)
 8001014:	2201      	movs	r2, #1
 8001016:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <MX_ADC1_Init+0x98>)
 800101a:	f000 fe13 	bl	8001c44 <HAL_ADC_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001024:	f000 faf8 	bl	8001618 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001028:	2301      	movs	r3, #1
 800102a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800102c:	2301      	movs	r3, #1
 800102e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001030:	2300      	movs	r3, #0
 8001032:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_ADC1_Init+0x98>)
 800103a:	f001 f837 	bl	80020ac <HAL_ADC_ConfigChannel>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001044:	f000 fae8 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000318 	.word	0x20000318
 8001054:	40012000 	.word	0x40012000
 8001058:	0f000001 	.word	0x0f000001

0800105c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a1b      	ldr	r2, [pc, #108]	; (80010e8 <HAL_ADC_MspInit+0x8c>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d12f      	bne.n	80010de <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <HAL_ADC_MspInit+0x90>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a19      	ldr	r2, [pc, #100]	; (80010ec <HAL_ADC_MspInit+0x90>)
 8001088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <HAL_ADC_MspInit+0x90>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	60fb      	str	r3, [r7, #12]
 800109e:	4b13      	ldr	r3, [pc, #76]	; (80010ec <HAL_ADC_MspInit+0x90>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a2:	4a12      	ldr	r2, [pc, #72]	; (80010ec <HAL_ADC_MspInit+0x90>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6313      	str	r3, [r2, #48]	; 0x30
 80010aa:	4b10      	ldr	r3, [pc, #64]	; (80010ec <HAL_ADC_MspInit+0x90>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80010b6:	2302      	movs	r3, #2
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ba:	2303      	movs	r3, #3
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	4809      	ldr	r0, [pc, #36]	; (80010f0 <HAL_ADC_MspInit+0x94>)
 80010ca:	f001 fb29 	bl	8002720 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80010ce:	2200      	movs	r2, #0
 80010d0:	2100      	movs	r1, #0
 80010d2:	2012      	movs	r0, #18
 80010d4:	f001 faed 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80010d8:	2012      	movs	r0, #18
 80010da:	f001 fb06 	bl	80026ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80010de:	bf00      	nop
 80010e0:	3728      	adds	r7, #40	; 0x28
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40012000 	.word	0x40012000
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020000 	.word	0x40020000

080010f4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
 8001108:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	60bb      	str	r3, [r7, #8]
 800110e:	4b20      	ldr	r3, [pc, #128]	; (8001190 <MX_GPIO_Init+0x9c>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <MX_GPIO_Init+0x9c>)
 8001114:	f043 0304 	orr.w	r3, r3, #4
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b1d      	ldr	r3, [pc, #116]	; (8001190 <MX_GPIO_Init+0x9c>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0304 	and.w	r3, r3, #4
 8001122:	60bb      	str	r3, [r7, #8]
 8001124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <MX_GPIO_Init+0x9c>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a18      	ldr	r2, [pc, #96]	; (8001190 <MX_GPIO_Init+0x9c>)
 8001130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_GPIO_Init+0x9c>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
 8001146:	4b12      	ldr	r3, [pc, #72]	; (8001190 <MX_GPIO_Init+0x9c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a11      	ldr	r2, [pc, #68]	; (8001190 <MX_GPIO_Init+0x9c>)
 800114c:	f043 0301 	orr.w	r3, r3, #1
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_GPIO_Init+0x9c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0301 	and.w	r3, r3, #1
 800115a:	603b      	str	r3, [r7, #0]
 800115c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800115e:	2301      	movs	r3, #1
 8001160:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001162:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001166:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001168:	2301      	movs	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116c:	f107 030c 	add.w	r3, r7, #12
 8001170:	4619      	mov	r1, r3
 8001172:	4808      	ldr	r0, [pc, #32]	; (8001194 <MX_GPIO_Init+0xa0>)
 8001174:	f001 fad4 	bl	8002720 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2100      	movs	r1, #0
 800117c:	2006      	movs	r0, #6
 800117e:	f001 fa98 	bl	80026b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001182:	2006      	movs	r0, #6
 8001184:	f001 fab1 	bl	80026ea <HAL_NVIC_EnableIRQ>

}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40023800 	.word	0x40023800
 8001194:	40020000 	.word	0x40020000

08001198 <Signal_Buf_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Signal_Buf_Init(SignalFeature_t *signal){
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	//Clear Filter Buffer
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 80011a0:	2300      	movs	r3, #0
 80011a2:	73fb      	strb	r3, [r7, #15]
 80011a4:	e009      	b.n	80011ba <Signal_Buf_Init+0x22>
		signal->buf[n] = 0.0f;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	4413      	add	r3, r2
 80011ae:	f04f 0200 	mov.w	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	3301      	adds	r3, #1
 80011b8:	73fb      	strb	r3, [r7, #15]
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	2b63      	cmp	r3, #99	; 0x63
 80011be:	d9f2      	bls.n	80011a6 <Signal_Buf_Init+0xe>
	}

	//Clear Buf Index
	signal->bufIndex = 0;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2200      	movs	r2, #0
 80011c4:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190

	//Clear Filter Output
	signal->energy = 0.0f;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
}
 80011d2:	bf00      	nop
 80011d4:	3714      	adds	r7, #20
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr

080011de <Signal_Buf_Update>:

void Signal_Buf_Update(SignalFeature_t *signal, float inp){
 80011de:	b480      	push	{r7}
 80011e0:	b083      	sub	sp, #12
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
 80011e6:	ed87 0a00 	vstr	s0, [r7]
	/*Store Latest Sample in buffer */
	signal->buf[signal->bufIndex] = inp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 80011f0:	687a      	ldr	r2, [r7, #4]
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	4413      	add	r3, r2
 80011f6:	683a      	ldr	r2, [r7, #0]
 80011f8:	601a      	str	r2, [r3, #0]

	/*increment buffer index and wrap around if necessary*/
	signal->bufIndex++;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8001200:	3301      	adds	r3, #1
 8001202:	b2da      	uxtb	r2, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190

	if(signal->bufIndex == SIGNAL_SAMPLES_LENGTH){
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8001210:	2b64      	cmp	r3, #100	; 0x64
 8001212:	d103      	bne.n	800121c <Signal_Buf_Update+0x3e>
		signal->bufIndex = 0;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2200      	movs	r2, #0
 8001218:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
	}
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr

08001228 <Signal_Energy_Calculate>:

float Signal_Energy_Calculate(SignalFeature_t *signal){
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	signal->energy = 0.0f;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	f04f 0200 	mov.w	r2, #0
 8001236:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

	uint8_t sumIndex = signal->bufIndex;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8001240:	73fb      	strb	r3, [r7, #15]
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 8001242:	2300      	movs	r3, #0
 8001244:	73bb      	strb	r3, [r7, #14]
 8001246:	e021      	b.n	800128c <Signal_Energy_Calculate+0x64>
		/*Decrement Index and Wrap if Necessary*/
		if(sumIndex < SIGNAL_SAMPLES_LENGTH -1){
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	2b62      	cmp	r3, #98	; 0x62
 800124c:	d803      	bhi.n	8001256 <Signal_Energy_Calculate+0x2e>
			sumIndex++;
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	3301      	adds	r3, #1
 8001252:	73fb      	strb	r3, [r7, #15]
 8001254:	e001      	b.n	800125a <Signal_Energy_Calculate+0x32>
		}else{
			sumIndex = 0;
 8001256:	2300      	movs	r3, #0
 8001258:	73fb      	strb	r3, [r7, #15]
		}

		/*Multiply Impulse Response with Shifted input sample and add to output*/
		signal->energy += (signal->buf[n] * signal->buf[n]);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	ed93 7a65 	vldr	s14, [r3, #404]	; 0x194
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	edd3 6a00 	vldr	s13, [r3]
 800126c:	7bbb      	ldrb	r3, [r7, #14]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	edd3 7a00 	vldr	s15, [r3]
 8001278:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800127c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	edc3 7a65 	vstr	s15, [r3, #404]	; 0x194
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 8001286:	7bbb      	ldrb	r3, [r7, #14]
 8001288:	3301      	adds	r3, #1
 800128a:	73bb      	strb	r3, [r7, #14]
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	2b63      	cmp	r3, #99	; 0x63
 8001290:	d9da      	bls.n	8001248 <Signal_Energy_Calculate+0x20>
	}
	return signal->energy;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8001298:	ee07 3a90 	vmov	s15, r3
}
 800129c:	eeb0 0a67 	vmov.f32	s0, s15
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b0:	f000 fc32 	bl	8001b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012b4:	f000 f832 	bl	800131c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012b8:	f7ff ff1c 	bl	80010f4 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80012bc:	f007 fde4 	bl	8008e88 <MX_USB_DEVICE_Init>
  MX_TIM10_Init();
 80012c0:	f000 fb64 	bl	800198c <MX_TIM10_Init>
  MX_ADC1_Init();
 80012c4:	f7ff fe78 	bl	8000fb8 <MX_ADC1_Init>
  MX_TIM9_Init();
 80012c8:	f000 fafc 	bl	80018c4 <MX_TIM9_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 80012cc:	480e      	ldr	r0, [pc, #56]	; (8001308 <main+0x5c>)
 80012ce:	f003 fac1 	bl	8004854 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80012d2:	2100      	movs	r1, #0
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <main+0x60>)
 80012d6:	f003 fb79 	bl	80049cc <HAL_TIM_PWM_Start>

  FIRFilter_Init(&mav);
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <main+0x64>)
 80012dc:	f7ff fdee 	bl	8000ebc <FIRFilter_Init>
  Signal_Buf_Init(&sig);
 80012e0:	480c      	ldr	r0, [pc, #48]	; (8001314 <main+0x68>)
 80012e2:	f7ff ff59 	bl	8001198 <Signal_Buf_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(arm_state == 1){
 80012e6:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <main+0x6c>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d105      	bne.n	80012fa <main+0x4e>
		  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 2000);
 80012ee:	4b07      	ldr	r3, [pc, #28]	; (800130c <main+0x60>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80012f6:	635a      	str	r2, [r3, #52]	; 0x34
 80012f8:	e7f5      	b.n	80012e6 <main+0x3a>
	  }else{
		  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 1500);
 80012fa:	4b04      	ldr	r3, [pc, #16]	; (800130c <main+0x60>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001302:	635a      	str	r2, [r3, #52]	; 0x34
	  if(arm_state == 1){
 8001304:	e7ef      	b.n	80012e6 <main+0x3a>
 8001306:	bf00      	nop
 8001308:	20000584 	.word	0x20000584
 800130c:	2000053c 	.word	0x2000053c
 8001310:	20000370 	.word	0x20000370
 8001314:	200003a0 	.word	0x200003a0
 8001318:	20000362 	.word	0x20000362

0800131c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b094      	sub	sp, #80	; 0x50
 8001320:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001322:	f107 0320 	add.w	r3, r7, #32
 8001326:	2230      	movs	r2, #48	; 0x30
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f008 faf0 	bl	8009910 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001330:	f107 030c 	add.w	r3, r7, #12
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001340:	2300      	movs	r3, #0
 8001342:	60bb      	str	r3, [r7, #8]
 8001344:	4b29      	ldr	r3, [pc, #164]	; (80013ec <SystemClock_Config+0xd0>)
 8001346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001348:	4a28      	ldr	r2, [pc, #160]	; (80013ec <SystemClock_Config+0xd0>)
 800134a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800134e:	6413      	str	r3, [r2, #64]	; 0x40
 8001350:	4b26      	ldr	r3, [pc, #152]	; (80013ec <SystemClock_Config+0xd0>)
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001358:	60bb      	str	r3, [r7, #8]
 800135a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800135c:	2300      	movs	r3, #0
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <SystemClock_Config+0xd4>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001368:	4a21      	ldr	r2, [pc, #132]	; (80013f0 <SystemClock_Config+0xd4>)
 800136a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800136e:	6013      	str	r3, [r2, #0]
 8001370:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <SystemClock_Config+0xd4>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001378:	607b      	str	r3, [r7, #4]
 800137a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800137c:	2301      	movs	r3, #1
 800137e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001380:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001384:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001386:	2302      	movs	r3, #2
 8001388:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800138a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800138e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001390:	2319      	movs	r3, #25
 8001392:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001394:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001398:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800139a:	2304      	movs	r3, #4
 800139c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800139e:	2307      	movs	r3, #7
 80013a0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a2:	f107 0320 	add.w	r3, r7, #32
 80013a6:	4618      	mov	r0, r3
 80013a8:	f002 fdd4 	bl	8003f54 <HAL_RCC_OscConfig>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80013b2:	f000 f931 	bl	8001618 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b6:	230f      	movs	r3, #15
 80013b8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013ba:	2302      	movs	r3, #2
 80013bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013be:	2300      	movs	r3, #0
 80013c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	2102      	movs	r1, #2
 80013d2:	4618      	mov	r0, r3
 80013d4:	f003 f836 	bl	8004444 <HAL_RCC_ClockConfig>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80013de:	f000 f91b 	bl	8001618 <Error_Handler>
  }
}
 80013e2:	bf00      	nop
 80013e4:	3750      	adds	r7, #80	; 0x50
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40007000 	.word	0x40007000

080013f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 80013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013f6:	f2ad 4d1c 	subw	sp, sp, #1052	; 0x41c
 80013fa:	af04      	add	r7, sp, #16
 80013fc:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001400:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001404:	6018      	str	r0, [r3, #0]
	if(htim->Instance == TIM10){
 8001406:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800140a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a5e      	ldr	r2, [pc, #376]	; (800158c <HAL_TIM_PeriodElapsedCallback+0x198>)
 8001414:	4293      	cmp	r3, r2
 8001416:	f040 80b3 	bne.w	8001580 <HAL_TIM_PeriodElapsedCallback+0x18c>
		HAL_ADC_Start_IT(&hadc1);
 800141a:	485d      	ldr	r0, [pc, #372]	; (8001590 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 800141c:	f000 fc56 	bl	8001ccc <HAL_ADC_Start_IT>
		char logbuf[1024];
		FIRFilter_Update(&mav, emg_raw);
 8001420:	4b5c      	ldr	r3, [pc, #368]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001422:	881b      	ldrh	r3, [r3, #0]
 8001424:	ee07 3a90 	vmov	s15, r3
 8001428:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800142c:	eeb0 0a67 	vmov.f32	s0, s15
 8001430:	4859      	ldr	r0, [pc, #356]	; (8001598 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8001432:	f7ff fd65 	bl	8000f00 <FIRFilter_Update>

//		emg_rawdiff = mav.out - emg_rawbfr;
		emg_rawdiff = emg_raw - emg_rawbfr;
 8001436:	4b57      	ldr	r3, [pc, #348]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	ee07 3a90 	vmov	s15, r3
 800143e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001442:	4b56      	ldr	r3, [pc, #344]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8001444:	edd3 7a00 	vldr	s15, [r3]
 8001448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144c:	4b54      	ldr	r3, [pc, #336]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800144e:	edc3 7a00 	vstr	s15, [r3]
//		emg_rawdiff = abs(emg_rawdiff);
		if(emg_rawdiff < 0){
 8001452:	4b53      	ldr	r3, [pc, #332]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	d507      	bpl.n	8001472 <HAL_TIM_PeriodElapsedCallback+0x7e>
			emg_rawdiff = emg_rawdiff * -1;
 8001462:	4b4f      	ldr	r3, [pc, #316]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	eef1 7a67 	vneg.f32	s15, s15
 800146c:	4b4c      	ldr	r3, [pc, #304]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800146e:	edc3 7a00 	vstr	s15, [r3]
		}
		Signal_Buf_Update(&sig, emg_rawdiff);
 8001472:	4b4b      	ldr	r3, [pc, #300]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001474:	edd3 7a00 	vldr	s15, [r3]
 8001478:	eeb0 0a67 	vmov.f32	s0, s15
 800147c:	4849      	ldr	r0, [pc, #292]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800147e:	f7ff feae 	bl	80011de <Signal_Buf_Update>
		Signal_Energy_Calculate(&sig);
 8001482:	4848      	ldr	r0, [pc, #288]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001484:	f7ff fed0 	bl	8001228 <Signal_Energy_Calculate>

		if(sig.energy > arm_condition_thresh){
 8001488:	4b46      	ldr	r3, [pc, #280]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 800148a:	ed93 7a65 	vldr	s14, [r3, #404]	; 0x194
 800148e:	4b46      	ldr	r3, [pc, #280]	; (80015a8 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	ee07 3a90 	vmov	s15, r3
 8001496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800149a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800149e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014a2:	dd1c      	ble.n	80014de <HAL_TIM_PeriodElapsedCallback+0xea>
			if(prosthetic_statebfr == true){
 80014a4:	4b41      	ldr	r3, [pc, #260]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d014      	beq.n	80014d6 <HAL_TIM_PeriodElapsedCallback+0xe2>
				truth_counter_thresh++;
 80014ac:	4b40      	ldr	r3, [pc, #256]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	3301      	adds	r3, #1
 80014b2:	b2da      	uxtb	r2, r3
 80014b4:	4b3e      	ldr	r3, [pc, #248]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80014b6:	701a      	strb	r2, [r3, #0]
				if(truth_counter_thresh >= truth_counter_maxval){
 80014b8:	4b3d      	ldr	r3, [pc, #244]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80014ba:	781a      	ldrb	r2, [r3, #0]
 80014bc:	4b3d      	ldr	r3, [pc, #244]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d308      	bcc.n	80014d6 <HAL_TIM_PeriodElapsedCallback+0xe2>
					prosthetic_state = true;
 80014c4:	4b3c      	ldr	r3, [pc, #240]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	701a      	strb	r2, [r3, #0]
					arm_state = 1;
 80014ca:	4b3c      	ldr	r3, [pc, #240]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 80014cc:	2201      	movs	r2, #1
 80014ce:	701a      	strb	r2, [r3, #0]
					truth_counter_thresh = 0;
 80014d0:	4b37      	ldr	r3, [pc, #220]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	701a      	strb	r2, [r3, #0]
				}
			}
			prosthetic_statebfr = true;
 80014d6:	4b35      	ldr	r3, [pc, #212]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80014d8:	2201      	movs	r2, #1
 80014da:	701a      	strb	r2, [r3, #0]
 80014dc:	e01e      	b.n	800151c <HAL_TIM_PeriodElapsedCallback+0x128>
		}else{
			if(prosthetic_statebfr == false){
 80014de:	4b33      	ldr	r3, [pc, #204]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	f083 0301 	eor.w	r3, r3, #1
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d014      	beq.n	8001516 <HAL_TIM_PeriodElapsedCallback+0x122>
				truth_counter_thresh++;
 80014ec:	4b30      	ldr	r3, [pc, #192]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	3301      	adds	r3, #1
 80014f2:	b2da      	uxtb	r2, r3
 80014f4:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80014f6:	701a      	strb	r2, [r3, #0]
				if(truth_counter_thresh >= truth_counter_maxval){
 80014f8:	4b2d      	ldr	r3, [pc, #180]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 80014fa:	781a      	ldrb	r2, [r3, #0]
 80014fc:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	429a      	cmp	r2, r3
 8001502:	d308      	bcc.n	8001516 <HAL_TIM_PeriodElapsedCallback+0x122>
					prosthetic_state = false;
 8001504:	4b2c      	ldr	r3, [pc, #176]	; (80015b8 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001506:	2200      	movs	r2, #0
 8001508:	701a      	strb	r2, [r3, #0]
					arm_state = 0;
 800150a:	4b2c      	ldr	r3, [pc, #176]	; (80015bc <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800150c:	2200      	movs	r2, #0
 800150e:	701a      	strb	r2, [r3, #0]
					truth_counter_thresh = 0;
 8001510:	4b27      	ldr	r3, [pc, #156]	; (80015b0 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
				}
			}
			prosthetic_statebfr = false;
 8001516:	4b25      	ldr	r3, [pc, #148]	; (80015ac <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001518:	2200      	movs	r2, #0
 800151a:	701a      	strb	r2, [r3, #0]
		}

		sprintf(logbuf, "%d,%.2f,%.2f\r\n", emg_raw, emg_rawdiff, sig.energy);
 800151c:	4b1d      	ldr	r3, [pc, #116]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 800151e:	881b      	ldrh	r3, [r3, #0]
 8001520:	461e      	mov	r6, r3
 8001522:	4b1f      	ldr	r3, [pc, #124]	; (80015a0 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff f816 	bl	8000558 <__aeabi_f2d>
 800152c:	4604      	mov	r4, r0
 800152e:	460d      	mov	r5, r1
 8001530:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8001532:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8001536:	4618      	mov	r0, r3
 8001538:	f7ff f80e 	bl	8000558 <__aeabi_f2d>
 800153c:	4602      	mov	r2, r0
 800153e:	460b      	mov	r3, r1
 8001540:	f107 0008 	add.w	r0, r7, #8
 8001544:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001548:	e9cd 4500 	strd	r4, r5, [sp]
 800154c:	4632      	mov	r2, r6
 800154e:	491c      	ldr	r1, [pc, #112]	; (80015c0 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001550:	f008 fe50 	bl	800a1f4 <siprintf>
		CDC_Transmit_FS((uint8_t*)logbuf, strlen(logbuf));
 8001554:	f107 0308 	add.w	r3, r7, #8
 8001558:	4618      	mov	r0, r3
 800155a:	f7fe fe41 	bl	80001e0 <strlen>
 800155e:	4603      	mov	r3, r0
 8001560:	b29a      	uxth	r2, r3
 8001562:	f107 0308 	add.w	r3, r7, #8
 8001566:	4611      	mov	r1, r2
 8001568:	4618      	mov	r0, r3
 800156a:	f007 fd4b 	bl	8009004 <CDC_Transmit_FS>

//		emg_rawbfr = mav.out;
		emg_rawbfr = emg_raw;
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8001570:	881b      	ldrh	r3, [r3, #0]
 8001572:	ee07 3a90 	vmov	s15, r3
 8001576:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800157a:	4b08      	ldr	r3, [pc, #32]	; (800159c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 800157c:	edc3 7a00 	vstr	s15, [r3]
	}
}
 8001580:	bf00      	nop
 8001582:	f207 470c 	addw	r7, r7, #1036	; 0x40c
 8001586:	46bd      	mov	sp, r7
 8001588:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800158a:	bf00      	nop
 800158c:	40014400 	.word	0x40014400
 8001590:	20000318 	.word	0x20000318
 8001594:	20000360 	.word	0x20000360
 8001598:	20000370 	.word	0x20000370
 800159c:	20000364 	.word	0x20000364
 80015a0:	20000368 	.word	0x20000368
 80015a4:	200003a0 	.word	0x200003a0
 80015a8:	2000002c 	.word	0x2000002c
 80015ac:	2000036e 	.word	0x2000036e
 80015b0:	2000036c 	.word	0x2000036c
 80015b4:	20000028 	.word	0x20000028
 80015b8:	2000036d 	.word	0x2000036d
 80015bc:	20000362 	.word	0x20000362
 80015c0:	0800c700 	.word	0x0800c700

080015c4 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
	emg_raw = HAL_ADC_GetValue(&hadc1);
 80015cc:	4805      	ldr	r0, [pc, #20]	; (80015e4 <HAL_ADC_ConvCpltCallback+0x20>)
 80015ce:	f000 fd4b 	bl	8002068 <HAL_ADC_GetValue>
 80015d2:	4603      	mov	r3, r0
 80015d4:	b29a      	uxth	r2, r3
 80015d6:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <HAL_ADC_ConvCpltCallback+0x24>)
 80015d8:	801a      	strh	r2, [r3, #0]
}
 80015da:	bf00      	nop
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000318 	.word	0x20000318
 80015e8:	20000360 	.word	0x20000360

080015ec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d105      	bne.n	8001608 <HAL_GPIO_EXTI_Callback+0x1c>
		calibration_counter++;
 80015fc:	4b05      	ldr	r3, [pc, #20]	; (8001614 <HAL_GPIO_EXTI_Callback+0x28>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	3301      	adds	r3, #1
 8001602:	b2da      	uxtb	r2, r3
 8001604:	4b03      	ldr	r3, [pc, #12]	; (8001614 <HAL_GPIO_EXTI_Callback+0x28>)
 8001606:	701a      	strb	r2, [r3, #0]
	}
}
 8001608:	bf00      	nop
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr
 8001614:	20000363 	.word	0x20000363

08001618 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800161c:	b672      	cpsid	i
}
 800161e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001620:	e7fe      	b.n	8001620 <Error_Handler+0x8>
	...

08001624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	607b      	str	r3, [r7, #4]
 800162e:	4b10      	ldr	r3, [pc, #64]	; (8001670 <HAL_MspInit+0x4c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <HAL_MspInit+0x4c>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001638:	6453      	str	r3, [r2, #68]	; 0x44
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <HAL_MspInit+0x4c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001642:	607b      	str	r3, [r7, #4]
 8001644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	4b09      	ldr	r3, [pc, #36]	; (8001670 <HAL_MspInit+0x4c>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a08      	ldr	r2, [pc, #32]	; (8001670 <HAL_MspInit+0x4c>)
 8001650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_MspInit+0x4c>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001662:	bf00      	nop
 8001664:	370c      	adds	r7, #12
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800

08001674 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001678:	e7fe      	b.n	8001678 <NMI_Handler+0x4>

0800167a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167a:	b480      	push	{r7}
 800167c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167e:	e7fe      	b.n	800167e <HardFault_Handler+0x4>

08001680 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001684:	e7fe      	b.n	8001684 <MemManage_Handler+0x4>

08001686 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168a:	e7fe      	b.n	800168a <BusFault_Handler+0x4>

0800168c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800168c:	b480      	push	{r7}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001690:	e7fe      	b.n	8001690 <UsageFault_Handler+0x4>

08001692 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a4:	bf00      	nop
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr

080016ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b2:	bf00      	nop
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c0:	f000 fa7c 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c4:	bf00      	nop
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80016cc:	2001      	movs	r0, #1
 80016ce:	f001 f9ab 	bl	8002a28 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
	...

080016d8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80016dc:	4802      	ldr	r0, [pc, #8]	; (80016e8 <ADC_IRQHandler+0x10>)
 80016de:	f000 fbb3 	bl	8001e48 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20000318 	.word	0x20000318

080016ec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 80016f0:	4802      	ldr	r0, [pc, #8]	; (80016fc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80016f2:	f003 fa1b 	bl	8004b2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	20000584 	.word	0x20000584

08001700 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001704:	4802      	ldr	r0, [pc, #8]	; (8001710 <OTG_FS_IRQHandler+0x10>)
 8001706:	f001 faf7 	bl	8002cf8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800170a:	bf00      	nop
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20001ab0 	.word	0x20001ab0

08001714 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
	return 1;
 8001718:	2301      	movs	r3, #1
}
 800171a:	4618      	mov	r0, r3
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <_kill>:

int _kill(int pid, int sig)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800172e:	f008 f8c5 	bl	80098bc <__errno>
 8001732:	4603      	mov	r3, r0
 8001734:	2216      	movs	r2, #22
 8001736:	601a      	str	r2, [r3, #0]
	return -1;
 8001738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800173c:	4618      	mov	r0, r3
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <_exit>:

void _exit (int status)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800174c:	f04f 31ff 	mov.w	r1, #4294967295
 8001750:	6878      	ldr	r0, [r7, #4]
 8001752:	f7ff ffe7 	bl	8001724 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001756:	e7fe      	b.n	8001756 <_exit+0x12>

08001758 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b086      	sub	sp, #24
 800175c:	af00      	add	r7, sp, #0
 800175e:	60f8      	str	r0, [r7, #12]
 8001760:	60b9      	str	r1, [r7, #8]
 8001762:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	e00a      	b.n	8001780 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800176a:	f3af 8000 	nop.w
 800176e:	4601      	mov	r1, r0
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	60ba      	str	r2, [r7, #8]
 8001776:	b2ca      	uxtb	r2, r1
 8001778:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
 8001780:	697a      	ldr	r2, [r7, #20]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	429a      	cmp	r2, r3
 8001786:	dbf0      	blt.n	800176a <_read+0x12>
	}

return len;
 8001788:	687b      	ldr	r3, [r7, #4]
}
 800178a:	4618      	mov	r0, r3
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b086      	sub	sp, #24
 8001796:	af00      	add	r7, sp, #0
 8001798:	60f8      	str	r0, [r7, #12]
 800179a:	60b9      	str	r1, [r7, #8]
 800179c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
 80017a2:	e009      	b.n	80017b8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80017a4:	68bb      	ldr	r3, [r7, #8]
 80017a6:	1c5a      	adds	r2, r3, #1
 80017a8:	60ba      	str	r2, [r7, #8]
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3301      	adds	r3, #1
 80017b6:	617b      	str	r3, [r7, #20]
 80017b8:	697a      	ldr	r2, [r7, #20]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	429a      	cmp	r2, r3
 80017be:	dbf1      	blt.n	80017a4 <_write+0x12>
	}
	return len;
 80017c0:	687b      	ldr	r3, [r7, #4]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3718      	adds	r7, #24
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}

080017ca <_close>:

int _close(int file)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
	return -1;
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017f2:	605a      	str	r2, [r3, #4]
	return 0;
 80017f4:	2300      	movs	r3, #0
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <_isatty>:

int _isatty(int file)
{
 8001802:	b480      	push	{r7}
 8001804:	b083      	sub	sp, #12
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
	return 1;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr

08001818 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
	return 0;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
	...

08001834 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800183c:	4a14      	ldr	r2, [pc, #80]	; (8001890 <_sbrk+0x5c>)
 800183e:	4b15      	ldr	r3, [pc, #84]	; (8001894 <_sbrk+0x60>)
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001848:	4b13      	ldr	r3, [pc, #76]	; (8001898 <_sbrk+0x64>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001850:	4b11      	ldr	r3, [pc, #68]	; (8001898 <_sbrk+0x64>)
 8001852:	4a12      	ldr	r2, [pc, #72]	; (800189c <_sbrk+0x68>)
 8001854:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001856:	4b10      	ldr	r3, [pc, #64]	; (8001898 <_sbrk+0x64>)
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4413      	add	r3, r2
 800185e:	693a      	ldr	r2, [r7, #16]
 8001860:	429a      	cmp	r2, r3
 8001862:	d207      	bcs.n	8001874 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001864:	f008 f82a 	bl	80098bc <__errno>
 8001868:	4603      	mov	r3, r0
 800186a:	220c      	movs	r2, #12
 800186c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	e009      	b.n	8001888 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001874:	4b08      	ldr	r3, [pc, #32]	; (8001898 <_sbrk+0x64>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800187a:	4b07      	ldr	r3, [pc, #28]	; (8001898 <_sbrk+0x64>)
 800187c:	681a      	ldr	r2, [r3, #0]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	4a05      	ldr	r2, [pc, #20]	; (8001898 <_sbrk+0x64>)
 8001884:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001886:	68fb      	ldr	r3, [r7, #12]
}
 8001888:	4618      	mov	r0, r3
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}
 8001890:	20018000 	.word	0x20018000
 8001894:	00000400 	.word	0x00000400
 8001898:	20000538 	.word	0x20000538
 800189c:	200021f0 	.word	0x200021f0

080018a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <SystemInit+0x20>)
 80018a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018aa:	4a05      	ldr	r2, [pc, #20]	; (80018c0 <SystemInit+0x20>)
 80018ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <MX_TIM9_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM9 init function */
void MX_TIM9_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b08c      	sub	sp, #48	; 0x30
 80018c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018ca:	f107 0320 	add.w	r3, r7, #32
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018d8:	1d3b      	adds	r3, r7, #4
 80018da:	2200      	movs	r2, #0
 80018dc:	601a      	str	r2, [r3, #0]
 80018de:	605a      	str	r2, [r3, #4]
 80018e0:	609a      	str	r2, [r3, #8]
 80018e2:	60da      	str	r2, [r3, #12]
 80018e4:	611a      	str	r2, [r3, #16]
 80018e6:	615a      	str	r2, [r3, #20]
 80018e8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80018ea:	4b26      	ldr	r3, [pc, #152]	; (8001984 <MX_TIM9_Init+0xc0>)
 80018ec:	4a26      	ldr	r2, [pc, #152]	; (8001988 <MX_TIM9_Init+0xc4>)
 80018ee:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 80018f0:	4b24      	ldr	r3, [pc, #144]	; (8001984 <MX_TIM9_Init+0xc0>)
 80018f2:	2253      	movs	r2, #83	; 0x53
 80018f4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018f6:	4b23      	ldr	r3, [pc, #140]	; (8001984 <MX_TIM9_Init+0xc0>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 80018fc:	4b21      	ldr	r3, [pc, #132]	; (8001984 <MX_TIM9_Init+0xc0>)
 80018fe:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001902:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001904:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <MX_TIM9_Init+0xc0>)
 8001906:	2200      	movs	r2, #0
 8001908:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800190a:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <MX_TIM9_Init+0xc0>)
 800190c:	2200      	movs	r2, #0
 800190e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001910:	481c      	ldr	r0, [pc, #112]	; (8001984 <MX_TIM9_Init+0xc0>)
 8001912:	f002 ff4f 	bl	80047b4 <HAL_TIM_Base_Init>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800191c:	f7ff fe7c 	bl	8001618 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001924:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001926:	f107 0320 	add.w	r3, r7, #32
 800192a:	4619      	mov	r1, r3
 800192c:	4815      	ldr	r0, [pc, #84]	; (8001984 <MX_TIM9_Init+0xc0>)
 800192e:	f003 fac7 	bl	8004ec0 <HAL_TIM_ConfigClockSource>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001938:	f7ff fe6e 	bl	8001618 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800193c:	4811      	ldr	r0, [pc, #68]	; (8001984 <MX_TIM9_Init+0xc0>)
 800193e:	f002 ffeb 	bl	8004918 <HAL_TIM_PWM_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001948:	f7ff fe66 	bl	8001618 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800194c:	2360      	movs	r3, #96	; 0x60
 800194e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8001950:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001954:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001956:	2300      	movs	r3, #0
 8001958:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800195e:	1d3b      	adds	r3, r7, #4
 8001960:	2200      	movs	r2, #0
 8001962:	4619      	mov	r1, r3
 8001964:	4807      	ldr	r0, [pc, #28]	; (8001984 <MX_TIM9_Init+0xc0>)
 8001966:	f003 f9e9 	bl	8004d3c <HAL_TIM_PWM_ConfigChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8001970:	f7ff fe52 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001974:	4803      	ldr	r0, [pc, #12]	; (8001984 <MX_TIM9_Init+0xc0>)
 8001976:	f000 f86b 	bl	8001a50 <HAL_TIM_MspPostInit>

}
 800197a:	bf00      	nop
 800197c:	3730      	adds	r7, #48	; 0x30
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	2000053c 	.word	0x2000053c
 8001988:	40014000 	.word	0x40014000

0800198c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001990:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <MX_TIM10_Init+0x40>)
 8001992:	4a0f      	ldr	r2, [pc, #60]	; (80019d0 <MX_TIM10_Init+0x44>)
 8001994:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 8001996:	4b0d      	ldr	r3, [pc, #52]	; (80019cc <MX_TIM10_Init+0x40>)
 8001998:	2253      	movs	r2, #83	; 0x53
 800199a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800199c:	4b0b      	ldr	r3, [pc, #44]	; (80019cc <MX_TIM10_Init+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 500-1;
 80019a2:	4b0a      	ldr	r3, [pc, #40]	; (80019cc <MX_TIM10_Init+0x40>)
 80019a4:	f240 12f3 	movw	r2, #499	; 0x1f3
 80019a8:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019aa:	4b08      	ldr	r3, [pc, #32]	; (80019cc <MX_TIM10_Init+0x40>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <MX_TIM10_Init+0x40>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <MX_TIM10_Init+0x40>)
 80019b8:	f002 fefc 	bl	80047b4 <HAL_TIM_Base_Init>
 80019bc:	4603      	mov	r3, r0
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d001      	beq.n	80019c6 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 80019c2:	f7ff fe29 	bl	8001618 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	20000584 	.word	0x20000584
 80019d0:	40014400 	.word	0x40014400

080019d4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a18      	ldr	r2, [pc, #96]	; (8001a44 <HAL_TIM_Base_MspInit+0x70>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d10e      	bne.n	8001a04 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	4b17      	ldr	r3, [pc, #92]	; (8001a48 <HAL_TIM_Base_MspInit+0x74>)
 80019ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ee:	4a16      	ldr	r2, [pc, #88]	; (8001a48 <HAL_TIM_Base_MspInit+0x74>)
 80019f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f4:	6453      	str	r3, [r2, #68]	; 0x44
 80019f6:	4b14      	ldr	r3, [pc, #80]	; (8001a48 <HAL_TIM_Base_MspInit+0x74>)
 80019f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001a02:	e01a      	b.n	8001a3a <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a10      	ldr	r2, [pc, #64]	; (8001a4c <HAL_TIM_Base_MspInit+0x78>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d115      	bne.n	8001a3a <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	4b0d      	ldr	r3, [pc, #52]	; (8001a48 <HAL_TIM_Base_MspInit+0x74>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	4a0c      	ldr	r2, [pc, #48]	; (8001a48 <HAL_TIM_Base_MspInit+0x74>)
 8001a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_TIM_Base_MspInit+0x74>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2019      	movs	r0, #25
 8001a30:	f000 fe3f 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001a34:	2019      	movs	r0, #25
 8001a36:	f000 fe58 	bl	80026ea <HAL_NVIC_EnableIRQ>
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40014000 	.word	0x40014000
 8001a48:	40023800 	.word	0x40023800
 8001a4c:	40014400 	.word	0x40014400

08001a50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b088      	sub	sp, #32
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a58:	f107 030c 	add.w	r3, r7, #12
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
 8001a60:	605a      	str	r2, [r3, #4]
 8001a62:	609a      	str	r2, [r3, #8]
 8001a64:	60da      	str	r2, [r3, #12]
 8001a66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a12      	ldr	r2, [pc, #72]	; (8001ab8 <HAL_TIM_MspPostInit+0x68>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d11d      	bne.n	8001aae <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	4b11      	ldr	r3, [pc, #68]	; (8001abc <HAL_TIM_MspPostInit+0x6c>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7a:	4a10      	ldr	r2, [pc, #64]	; (8001abc <HAL_TIM_MspPostInit+0x6c>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6313      	str	r3, [r2, #48]	; 0x30
 8001a82:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <HAL_TIM_MspPostInit+0x6c>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PA2     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a92:	2302      	movs	r3, #2
 8001a94:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 030c 	add.w	r3, r7, #12
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4805      	ldr	r0, [pc, #20]	; (8001ac0 <HAL_TIM_MspPostInit+0x70>)
 8001aaa:	f000 fe39 	bl	8002720 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001aae:	bf00      	nop
 8001ab0:	3720      	adds	r7, #32
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	40014000 	.word	0x40014000
 8001abc:	40023800 	.word	0x40023800
 8001ac0:	40020000 	.word	0x40020000

08001ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001afc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac8:	480d      	ldr	r0, [pc, #52]	; (8001b00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aca:	490e      	ldr	r1, [pc, #56]	; (8001b04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001acc:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad0:	e002      	b.n	8001ad8 <LoopCopyDataInit>

08001ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad6:	3304      	adds	r3, #4

08001ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001adc:	d3f9      	bcc.n	8001ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ae0:	4c0b      	ldr	r4, [pc, #44]	; (8001b10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae4:	e001      	b.n	8001aea <LoopFillZerobss>

08001ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae8:	3204      	adds	r2, #4

08001aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aec:	d3fb      	bcc.n	8001ae6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aee:	f7ff fed7 	bl	80018a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001af2:	f007 fee9 	bl	80098c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af6:	f7ff fbd9 	bl	80012ac <main>
  bx  lr    
 8001afa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001afc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b04:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8001b08:	0800cb54 	.word	0x0800cb54
  ldr r2, =_sbss
 8001b0c:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8001b10:	200021ec 	.word	0x200021ec

08001b14 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b14:	e7fe      	b.n	8001b14 <DMA1_Stream0_IRQHandler>
	...

08001b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <HAL_Init+0x40>)
 8001b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_Init+0x40>)
 8001b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <HAL_Init+0x40>)
 8001b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b40:	2003      	movs	r0, #3
 8001b42:	f000 fdab 	bl	800269c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b46:	200f      	movs	r0, #15
 8001b48:	f000 f808 	bl	8001b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4c:	f7ff fd6a 	bl	8001624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x54>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_InitTick+0x58>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 fdc3 	bl	8002706 <HAL_SYSTICK_Config>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00e      	b.n	8001ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d80a      	bhi.n	8001ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f000 fd8b 	bl	80026b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_InitTick+0x5c>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000030 	.word	0x20000030
 8001bb4:	20000038 	.word	0x20000038
 8001bb8:	20000034 	.word	0x20000034

08001bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x20>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_IncTick+0x24>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_IncTick+0x24>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000038 	.word	0x20000038
 8001be0:	200005cc 	.word	0x200005cc

08001be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_GetTick+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	200005cc 	.word	0x200005cc

08001bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff ffee 	bl	8001be4 <HAL_GetTick>
 8001c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d005      	beq.n	8001c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_Delay+0x44>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c22:	bf00      	nop
 8001c24:	f7ff ffde 	bl	8001be4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d8f7      	bhi.n	8001c24 <HAL_Delay+0x28>
  {
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000038 	.word	0x20000038

08001c44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e033      	b.n	8001cc2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d109      	bne.n	8001c76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff f9fa 	bl	800105c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d118      	bne.n	8001cb4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c8a:	f023 0302 	bic.w	r3, r3, #2
 8001c8e:	f043 0202 	orr.w	r2, r3, #2
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 fb2a 	bl	80022f0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f023 0303 	bic.w	r3, r3, #3
 8001caa:	f043 0201 	orr.w	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
 8001cb2:	e001      	b.n	8001cb8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_Start_IT+0x1a>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e0a1      	b.n	8001e2a <HAL_ADC_Start_IT+0x15e>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d018      	beq.n	8001d2e <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d0c:	4b4a      	ldr	r3, [pc, #296]	; (8001e38 <HAL_ADC_Start_IT+0x16c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a4a      	ldr	r2, [pc, #296]	; (8001e3c <HAL_ADC_Start_IT+0x170>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	0c9a      	lsrs	r2, r3, #18
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d20:	e002      	b.n	8001d28 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f9      	bne.n	8001d22 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d169      	bne.n	8001e10 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d7a:	d106      	bne.n	8001d8a <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d80:	f023 0206 	bic.w	r2, r3, #6
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	645a      	str	r2, [r3, #68]	; 0x44
 8001d88:	e002      	b.n	8001d90 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d98:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <HAL_ADC_Start_IT+0x174>)
 8001d9a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001da4:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001db4:	f043 0320 	orr.w	r3, r3, #32
 8001db8:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f003 031f 	and.w	r3, r3, #31
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10f      	bne.n	8001de6 <HAL_ADC_Start_IT+0x11a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d129      	bne.n	8001e28 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	e020      	b.n	8001e28 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a16      	ldr	r2, [pc, #88]	; (8001e44 <HAL_ADC_Start_IT+0x178>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d11b      	bne.n	8001e28 <HAL_ADC_Start_IT+0x15c>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d114      	bne.n	8001e28 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689a      	ldr	r2, [r3, #8]
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	e00b      	b.n	8001e28 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e14:	f043 0210 	orr.w	r2, r3, #16
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e20:	f043 0201 	orr.w	r2, r3, #1
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e28:	2300      	movs	r3, #0
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3714      	adds	r7, #20
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000030 	.word	0x20000030
 8001e3c:	431bde83 	.word	0x431bde83
 8001e40:	40012300 	.word	0x40012300
 8001e44:	40012000 	.word	0x40012000

08001e48 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	617b      	str	r3, [r7, #20]
 8001e54:	2300      	movs	r3, #0
 8001e56:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f003 0302 	and.w	r3, r3, #2
 8001e6e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	f003 0320 	and.w	r3, r3, #32
 8001e76:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d049      	beq.n	8001f12 <HAL_ADC_IRQHandler+0xca>
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d046      	beq.n	8001f12 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e88:	f003 0310 	and.w	r3, r3, #16
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d105      	bne.n	8001e9c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e94:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d12b      	bne.n	8001f02 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d127      	bne.n	8001f02 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d006      	beq.n	8001ece <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d119      	bne.n	8001f02 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 0220 	bic.w	r2, r2, #32
 8001edc:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d105      	bne.n	8001f02 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	f043 0201 	orr.w	r2, r3, #1
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff fb5e 	bl	80015c4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0212 	mvn.w	r2, #18
 8001f10:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f003 0304 	and.w	r3, r3, #4
 8001f18:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f20:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d057      	beq.n	8001fd8 <HAL_ADC_IRQHandler+0x190>
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d054      	beq.n	8001fd8 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d105      	bne.n	8001f46 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d139      	bne.n	8001fc8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f5a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d006      	beq.n	8001f70 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d12b      	bne.n	8001fc8 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d124      	bne.n	8001fc8 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d11d      	bne.n	8001fc8 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d119      	bne.n	8001fc8 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	685a      	ldr	r2, [r3, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fa2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d105      	bne.n	8001fc8 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fa8d 	bl	80024e8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f06f 020c 	mvn.w	r2, #12
 8001fd6:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fe6:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d017      	beq.n	800201e <HAL_ADC_IRQHandler+0x1d6>
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d014      	beq.n	800201e <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d10d      	bne.n	800201e <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002006:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f837 	bl	8002082 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0201 	mvn.w	r2, #1
 800201c:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	f003 0320 	and.w	r3, r3, #32
 8002024:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800202c:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d015      	beq.n	8002060 <HAL_ADC_IRQHandler+0x218>
 8002034:	693b      	ldr	r3, [r7, #16]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d012      	beq.n	8002060 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	f043 0202 	orr.w	r2, r3, #2
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f06f 0220 	mvn.w	r2, #32
 800204e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f000 f820 	bl	8002096 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f06f 0220 	mvn.w	r2, #32
 800205e:	601a      	str	r2, [r3, #0]
  }
}
 8002060:	bf00      	nop
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800208a:	bf00      	nop
 800208c:	370c      	adds	r7, #12
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr

08002096 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002096:	b480      	push	{r7}
 8002098:	b083      	sub	sp, #12
 800209a:	af00      	add	r7, sp, #0
 800209c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800209e:	bf00      	nop
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b085      	sub	sp, #20
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80020b6:	2300      	movs	r3, #0
 80020b8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d101      	bne.n	80020c8 <HAL_ADC_ConfigChannel+0x1c>
 80020c4:	2302      	movs	r3, #2
 80020c6:	e105      	b.n	80022d4 <HAL_ADC_ConfigChannel+0x228>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2201      	movs	r2, #1
 80020cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2b09      	cmp	r3, #9
 80020d6:	d925      	bls.n	8002124 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68d9      	ldr	r1, [r3, #12]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	4613      	mov	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	4413      	add	r3, r2
 80020ec:	3b1e      	subs	r3, #30
 80020ee:	2207      	movs	r2, #7
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43da      	mvns	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	400a      	ands	r2, r1
 80020fc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68d9      	ldr	r1, [r3, #12]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	b29b      	uxth	r3, r3
 800210e:	4618      	mov	r0, r3
 8002110:	4603      	mov	r3, r0
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	4403      	add	r3, r0
 8002116:	3b1e      	subs	r3, #30
 8002118:	409a      	lsls	r2, r3
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	60da      	str	r2, [r3, #12]
 8002122:	e022      	b.n	800216a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6919      	ldr	r1, [r3, #16]
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	461a      	mov	r2, r3
 8002132:	4613      	mov	r3, r2
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	4413      	add	r3, r2
 8002138:	2207      	movs	r2, #7
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	43da      	mvns	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	400a      	ands	r2, r1
 8002146:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	6919      	ldr	r1, [r3, #16]
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	b29b      	uxth	r3, r3
 8002158:	4618      	mov	r0, r3
 800215a:	4603      	mov	r3, r0
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	4403      	add	r3, r0
 8002160:	409a      	lsls	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	430a      	orrs	r2, r1
 8002168:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b06      	cmp	r3, #6
 8002170:	d824      	bhi.n	80021bc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685a      	ldr	r2, [r3, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	3b05      	subs	r3, #5
 8002184:	221f      	movs	r2, #31
 8002186:	fa02 f303 	lsl.w	r3, r2, r3
 800218a:	43da      	mvns	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	400a      	ands	r2, r1
 8002192:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	4618      	mov	r0, r3
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	3b05      	subs	r3, #5
 80021ae:	fa00 f203 	lsl.w	r2, r0, r3
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	430a      	orrs	r2, r1
 80021b8:	635a      	str	r2, [r3, #52]	; 0x34
 80021ba:	e04c      	b.n	8002256 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80021bc:	683b      	ldr	r3, [r7, #0]
 80021be:	685b      	ldr	r3, [r3, #4]
 80021c0:	2b0c      	cmp	r3, #12
 80021c2:	d824      	bhi.n	800220e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685a      	ldr	r2, [r3, #4]
 80021ce:	4613      	mov	r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	4413      	add	r3, r2
 80021d4:	3b23      	subs	r3, #35	; 0x23
 80021d6:	221f      	movs	r2, #31
 80021d8:	fa02 f303 	lsl.w	r3, r2, r3
 80021dc:	43da      	mvns	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	400a      	ands	r2, r1
 80021e4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	4618      	mov	r0, r3
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	4413      	add	r3, r2
 80021fe:	3b23      	subs	r3, #35	; 0x23
 8002200:	fa00 f203 	lsl.w	r2, r0, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	430a      	orrs	r2, r1
 800220a:	631a      	str	r2, [r3, #48]	; 0x30
 800220c:	e023      	b.n	8002256 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685a      	ldr	r2, [r3, #4]
 8002218:	4613      	mov	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	4413      	add	r3, r2
 800221e:	3b41      	subs	r3, #65	; 0x41
 8002220:	221f      	movs	r2, #31
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	400a      	ands	r2, r1
 800222e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	b29b      	uxth	r3, r3
 800223c:	4618      	mov	r0, r3
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	685a      	ldr	r2, [r3, #4]
 8002242:	4613      	mov	r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	4413      	add	r3, r2
 8002248:	3b41      	subs	r3, #65	; 0x41
 800224a:	fa00 f203 	lsl.w	r2, r0, r3
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	430a      	orrs	r2, r1
 8002254:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002256:	4b22      	ldr	r3, [pc, #136]	; (80022e0 <HAL_ADC_ConfigChannel+0x234>)
 8002258:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a21      	ldr	r2, [pc, #132]	; (80022e4 <HAL_ADC_ConfigChannel+0x238>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d109      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x1cc>
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	2b12      	cmp	r3, #18
 800226a:	d105      	bne.n	8002278 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <HAL_ADC_ConfigChannel+0x238>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d123      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x21e>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	2b10      	cmp	r3, #16
 8002288:	d003      	beq.n	8002292 <HAL_ADC_ConfigChannel+0x1e6>
 800228a:	683b      	ldr	r3, [r7, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2b11      	cmp	r3, #17
 8002290:	d11b      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2b10      	cmp	r3, #16
 80022a4:	d111      	bne.n	80022ca <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80022a6:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <HAL_ADC_ConfigChannel+0x23c>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a10      	ldr	r2, [pc, #64]	; (80022ec <HAL_ADC_ConfigChannel+0x240>)
 80022ac:	fba2 2303 	umull	r2, r3, r2, r3
 80022b0:	0c9a      	lsrs	r2, r3, #18
 80022b2:	4613      	mov	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	4413      	add	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022bc:	e002      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	3b01      	subs	r3, #1
 80022c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1f9      	bne.n	80022be <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	40012300 	.word	0x40012300
 80022e4:	40012000 	.word	0x40012000
 80022e8:	20000030 	.word	0x20000030
 80022ec:	431bde83 	.word	0x431bde83

080022f0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022f8:	4b79      	ldr	r3, [pc, #484]	; (80024e0 <ADC_Init+0x1f0>)
 80022fa:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	431a      	orrs	r2, r3
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	685a      	ldr	r2, [r3, #4]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002324:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6859      	ldr	r1, [r3, #4]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	691b      	ldr	r3, [r3, #16]
 8002330:	021a      	lsls	r2, r3, #8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	430a      	orrs	r2, r1
 8002338:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	685a      	ldr	r2, [r3, #4]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002348:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6859      	ldr	r1, [r3, #4]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	430a      	orrs	r2, r1
 800235a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	689a      	ldr	r2, [r3, #8]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800236a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6899      	ldr	r1, [r3, #8]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68da      	ldr	r2, [r3, #12]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002382:	4a58      	ldr	r2, [pc, #352]	; (80024e4 <ADC_Init+0x1f4>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d022      	beq.n	80023ce <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	689a      	ldr	r2, [r3, #8]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002396:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	6899      	ldr	r1, [r3, #8]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	430a      	orrs	r2, r1
 80023a8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	689a      	ldr	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	6899      	ldr	r1, [r3, #8]
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	430a      	orrs	r2, r1
 80023ca:	609a      	str	r2, [r3, #8]
 80023cc:	e00f      	b.n	80023ee <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023dc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689a      	ldr	r2, [r3, #8]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023ec:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f022 0202 	bic.w	r2, r2, #2
 80023fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6899      	ldr	r1, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	7e1b      	ldrb	r3, [r3, #24]
 8002408:	005a      	lsls	r2, r3, #1
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	430a      	orrs	r2, r1
 8002410:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d01b      	beq.n	8002454 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	685a      	ldr	r2, [r3, #4]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800242a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	685a      	ldr	r2, [r3, #4]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800243a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	6859      	ldr	r1, [r3, #4]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002446:	3b01      	subs	r3, #1
 8002448:	035a      	lsls	r2, r3, #13
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	430a      	orrs	r2, r1
 8002450:	605a      	str	r2, [r3, #4]
 8002452:	e007      	b.n	8002464 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002462:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002472:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69db      	ldr	r3, [r3, #28]
 800247e:	3b01      	subs	r3, #1
 8002480:	051a      	lsls	r2, r3, #20
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	430a      	orrs	r2, r1
 8002488:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	689a      	ldr	r2, [r3, #8]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002498:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	6899      	ldr	r1, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024a6:	025a      	lsls	r2, r3, #9
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	430a      	orrs	r2, r1
 80024ae:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6899      	ldr	r1, [r3, #8]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	695b      	ldr	r3, [r3, #20]
 80024ca:	029a      	lsls	r2, r3, #10
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	609a      	str	r2, [r3, #8]
}
 80024d4:	bf00      	nop
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	40012300 	.word	0x40012300
 80024e4:	0f000001 	.word	0x0f000001

080024e8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80024f0:	bf00      	nop
 80024f2:	370c      	adds	r7, #12
 80024f4:	46bd      	mov	sp, r7
 80024f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fa:	4770      	bx	lr

080024fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800250c:	4b0c      	ldr	r3, [pc, #48]	; (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002512:	68ba      	ldr	r2, [r7, #8]
 8002514:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002518:	4013      	ands	r3, r2
 800251a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002524:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002528:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800252c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800252e:	4a04      	ldr	r2, [pc, #16]	; (8002540 <__NVIC_SetPriorityGrouping+0x44>)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	60d3      	str	r3, [r2, #12]
}
 8002534:	bf00      	nop
 8002536:	3714      	adds	r7, #20
 8002538:	46bd      	mov	sp, r7
 800253a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253e:	4770      	bx	lr
 8002540:	e000ed00 	.word	0xe000ed00

08002544 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002548:	4b04      	ldr	r3, [pc, #16]	; (800255c <__NVIC_GetPriorityGrouping+0x18>)
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	0a1b      	lsrs	r3, r3, #8
 800254e:	f003 0307 	and.w	r3, r3, #7
}
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	4603      	mov	r3, r0
 8002568:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800256a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800256e:	2b00      	cmp	r3, #0
 8002570:	db0b      	blt.n	800258a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002572:	79fb      	ldrb	r3, [r7, #7]
 8002574:	f003 021f 	and.w	r2, r3, #31
 8002578:	4907      	ldr	r1, [pc, #28]	; (8002598 <__NVIC_EnableIRQ+0x38>)
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	095b      	lsrs	r3, r3, #5
 8002580:	2001      	movs	r0, #1
 8002582:	fa00 f202 	lsl.w	r2, r0, r2
 8002586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800258a:	bf00      	nop
 800258c:	370c      	adds	r7, #12
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	e000e100 	.word	0xe000e100

0800259c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	4603      	mov	r3, r0
 80025a4:	6039      	str	r1, [r7, #0]
 80025a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	db0a      	blt.n	80025c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	b2da      	uxtb	r2, r3
 80025b4:	490c      	ldr	r1, [pc, #48]	; (80025e8 <__NVIC_SetPriority+0x4c>)
 80025b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ba:	0112      	lsls	r2, r2, #4
 80025bc:	b2d2      	uxtb	r2, r2
 80025be:	440b      	add	r3, r1
 80025c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025c4:	e00a      	b.n	80025dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	b2da      	uxtb	r2, r3
 80025ca:	4908      	ldr	r1, [pc, #32]	; (80025ec <__NVIC_SetPriority+0x50>)
 80025cc:	79fb      	ldrb	r3, [r7, #7]
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	3b04      	subs	r3, #4
 80025d4:	0112      	lsls	r2, r2, #4
 80025d6:	b2d2      	uxtb	r2, r2
 80025d8:	440b      	add	r3, r1
 80025da:	761a      	strb	r2, [r3, #24]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr
 80025e8:	e000e100 	.word	0xe000e100
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025f0:	b480      	push	{r7}
 80025f2:	b089      	sub	sp, #36	; 0x24
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f003 0307 	and.w	r3, r3, #7
 8002602:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f1c3 0307 	rsb	r3, r3, #7
 800260a:	2b04      	cmp	r3, #4
 800260c:	bf28      	it	cs
 800260e:	2304      	movcs	r3, #4
 8002610:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3304      	adds	r3, #4
 8002616:	2b06      	cmp	r3, #6
 8002618:	d902      	bls.n	8002620 <NVIC_EncodePriority+0x30>
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3b03      	subs	r3, #3
 800261e:	e000      	b.n	8002622 <NVIC_EncodePriority+0x32>
 8002620:	2300      	movs	r3, #0
 8002622:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002624:	f04f 32ff 	mov.w	r2, #4294967295
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	fa02 f303 	lsl.w	r3, r2, r3
 800262e:	43da      	mvns	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	401a      	ands	r2, r3
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002638:	f04f 31ff 	mov.w	r1, #4294967295
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	fa01 f303 	lsl.w	r3, r1, r3
 8002642:	43d9      	mvns	r1, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	4313      	orrs	r3, r2
         );
}
 800264a:	4618      	mov	r0, r3
 800264c:	3724      	adds	r7, #36	; 0x24
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
	...

08002658 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	3b01      	subs	r3, #1
 8002664:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002668:	d301      	bcc.n	800266e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800266a:	2301      	movs	r3, #1
 800266c:	e00f      	b.n	800268e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800266e:	4a0a      	ldr	r2, [pc, #40]	; (8002698 <SysTick_Config+0x40>)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3b01      	subs	r3, #1
 8002674:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002676:	210f      	movs	r1, #15
 8002678:	f04f 30ff 	mov.w	r0, #4294967295
 800267c:	f7ff ff8e 	bl	800259c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002680:	4b05      	ldr	r3, [pc, #20]	; (8002698 <SysTick_Config+0x40>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002686:	4b04      	ldr	r3, [pc, #16]	; (8002698 <SysTick_Config+0x40>)
 8002688:	2207      	movs	r2, #7
 800268a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	e000e010 	.word	0xe000e010

0800269c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b082      	sub	sp, #8
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f7ff ff29 	bl	80024fc <__NVIC_SetPriorityGrouping>
}
 80026aa:	bf00      	nop
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}

080026b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026b2:	b580      	push	{r7, lr}
 80026b4:	b086      	sub	sp, #24
 80026b6:	af00      	add	r7, sp, #0
 80026b8:	4603      	mov	r3, r0
 80026ba:	60b9      	str	r1, [r7, #8]
 80026bc:	607a      	str	r2, [r7, #4]
 80026be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026c0:	2300      	movs	r3, #0
 80026c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026c4:	f7ff ff3e 	bl	8002544 <__NVIC_GetPriorityGrouping>
 80026c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	68b9      	ldr	r1, [r7, #8]
 80026ce:	6978      	ldr	r0, [r7, #20]
 80026d0:	f7ff ff8e 	bl	80025f0 <NVIC_EncodePriority>
 80026d4:	4602      	mov	r2, r0
 80026d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7ff ff5d 	bl	800259c <__NVIC_SetPriority>
}
 80026e2:	bf00      	nop
 80026e4:	3718      	adds	r7, #24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	4603      	mov	r3, r0
 80026f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80026f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff31 	bl	8002560 <__NVIC_EnableIRQ>
}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f7ff ffa2 	bl	8002658 <SysTick_Config>
 8002714:	4603      	mov	r3, r0
}
 8002716:	4618      	mov	r0, r3
 8002718:	3708      	adds	r7, #8
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}
	...

08002720 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002720:	b480      	push	{r7}
 8002722:	b089      	sub	sp, #36	; 0x24
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
 8002728:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800272a:	2300      	movs	r3, #0
 800272c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800272e:	2300      	movs	r3, #0
 8002730:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002732:	2300      	movs	r3, #0
 8002734:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002736:	2300      	movs	r3, #0
 8002738:	61fb      	str	r3, [r7, #28]
 800273a:	e159      	b.n	80029f0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800273c:	2201      	movs	r2, #1
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	fa02 f303 	lsl.w	r3, r2, r3
 8002744:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	4013      	ands	r3, r2
 800274e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	429a      	cmp	r2, r3
 8002756:	f040 8148 	bne.w	80029ea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	2b01      	cmp	r3, #1
 8002764:	d005      	beq.n	8002772 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276e:	2b02      	cmp	r3, #2
 8002770:	d130      	bne.n	80027d4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	005b      	lsls	r3, r3, #1
 800277c:	2203      	movs	r2, #3
 800277e:	fa02 f303 	lsl.w	r3, r2, r3
 8002782:	43db      	mvns	r3, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4013      	ands	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	68da      	ldr	r2, [r3, #12]
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4313      	orrs	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	69ba      	ldr	r2, [r7, #24]
 80027a0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	685b      	ldr	r3, [r3, #4]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027a8:	2201      	movs	r2, #1
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	091b      	lsrs	r3, r3, #4
 80027be:	f003 0201 	and.w	r2, r3, #1
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f003 0303 	and.w	r3, r3, #3
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d017      	beq.n	8002810 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	005b      	lsls	r3, r3, #1
 80027ea:	2203      	movs	r2, #3
 80027ec:	fa02 f303 	lsl.w	r3, r2, r3
 80027f0:	43db      	mvns	r3, r3
 80027f2:	69ba      	ldr	r2, [r7, #24]
 80027f4:	4013      	ands	r3, r2
 80027f6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0303 	and.w	r3, r3, #3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d123      	bne.n	8002864 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800281c:	69fb      	ldr	r3, [r7, #28]
 800281e:	08da      	lsrs	r2, r3, #3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	3208      	adds	r2, #8
 8002824:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002828:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	f003 0307 	and.w	r3, r3, #7
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	220f      	movs	r2, #15
 8002834:	fa02 f303 	lsl.w	r3, r2, r3
 8002838:	43db      	mvns	r3, r3
 800283a:	69ba      	ldr	r2, [r7, #24]
 800283c:	4013      	ands	r3, r2
 800283e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	f003 0307 	and.w	r3, r3, #7
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4313      	orrs	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	08da      	lsrs	r2, r3, #3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	3208      	adds	r2, #8
 800285e:	69b9      	ldr	r1, [r7, #24]
 8002860:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	2203      	movs	r2, #3
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f003 0203 	and.w	r2, r3, #3
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	005b      	lsls	r3, r3, #1
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 80a2 	beq.w	80029ea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b57      	ldr	r3, [pc, #348]	; (8002a08 <HAL_GPIO_Init+0x2e8>)
 80028ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ae:	4a56      	ldr	r2, [pc, #344]	; (8002a08 <HAL_GPIO_Init+0x2e8>)
 80028b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b4:	6453      	str	r3, [r2, #68]	; 0x44
 80028b6:	4b54      	ldr	r3, [pc, #336]	; (8002a08 <HAL_GPIO_Init+0x2e8>)
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028c2:	4a52      	ldr	r2, [pc, #328]	; (8002a0c <HAL_GPIO_Init+0x2ec>)
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	089b      	lsrs	r3, r3, #2
 80028c8:	3302      	adds	r3, #2
 80028ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	f003 0303 	and.w	r3, r3, #3
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	220f      	movs	r2, #15
 80028da:	fa02 f303 	lsl.w	r3, r2, r3
 80028de:	43db      	mvns	r3, r3
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	4013      	ands	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a49      	ldr	r2, [pc, #292]	; (8002a10 <HAL_GPIO_Init+0x2f0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d019      	beq.n	8002922 <HAL_GPIO_Init+0x202>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a48      	ldr	r2, [pc, #288]	; (8002a14 <HAL_GPIO_Init+0x2f4>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <HAL_GPIO_Init+0x1fe>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a47      	ldr	r2, [pc, #284]	; (8002a18 <HAL_GPIO_Init+0x2f8>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00d      	beq.n	800291a <HAL_GPIO_Init+0x1fa>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a46      	ldr	r2, [pc, #280]	; (8002a1c <HAL_GPIO_Init+0x2fc>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d007      	beq.n	8002916 <HAL_GPIO_Init+0x1f6>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a45      	ldr	r2, [pc, #276]	; (8002a20 <HAL_GPIO_Init+0x300>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d101      	bne.n	8002912 <HAL_GPIO_Init+0x1f2>
 800290e:	2304      	movs	r3, #4
 8002910:	e008      	b.n	8002924 <HAL_GPIO_Init+0x204>
 8002912:	2307      	movs	r3, #7
 8002914:	e006      	b.n	8002924 <HAL_GPIO_Init+0x204>
 8002916:	2303      	movs	r3, #3
 8002918:	e004      	b.n	8002924 <HAL_GPIO_Init+0x204>
 800291a:	2302      	movs	r3, #2
 800291c:	e002      	b.n	8002924 <HAL_GPIO_Init+0x204>
 800291e:	2301      	movs	r3, #1
 8002920:	e000      	b.n	8002924 <HAL_GPIO_Init+0x204>
 8002922:	2300      	movs	r3, #0
 8002924:	69fa      	ldr	r2, [r7, #28]
 8002926:	f002 0203 	and.w	r2, r2, #3
 800292a:	0092      	lsls	r2, r2, #2
 800292c:	4093      	lsls	r3, r2
 800292e:	69ba      	ldr	r2, [r7, #24]
 8002930:	4313      	orrs	r3, r2
 8002932:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002934:	4935      	ldr	r1, [pc, #212]	; (8002a0c <HAL_GPIO_Init+0x2ec>)
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	089b      	lsrs	r3, r3, #2
 800293a:	3302      	adds	r3, #2
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002942:	4b38      	ldr	r3, [pc, #224]	; (8002a24 <HAL_GPIO_Init+0x304>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	43db      	mvns	r3, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4013      	ands	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d003      	beq.n	8002966 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	4313      	orrs	r3, r2
 8002964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002966:	4a2f      	ldr	r2, [pc, #188]	; (8002a24 <HAL_GPIO_Init+0x304>)
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800296c:	4b2d      	ldr	r3, [pc, #180]	; (8002a24 <HAL_GPIO_Init+0x304>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	43db      	mvns	r3, r3
 8002976:	69ba      	ldr	r2, [r7, #24]
 8002978:	4013      	ands	r3, r2
 800297a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d003      	beq.n	8002990 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	4313      	orrs	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002990:	4a24      	ldr	r2, [pc, #144]	; (8002a24 <HAL_GPIO_Init+0x304>)
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002996:	4b23      	ldr	r3, [pc, #140]	; (8002a24 <HAL_GPIO_Init+0x304>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	43db      	mvns	r3, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4013      	ands	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029ba:	4a1a      	ldr	r2, [pc, #104]	; (8002a24 <HAL_GPIO_Init+0x304>)
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029c0:	4b18      	ldr	r3, [pc, #96]	; (8002a24 <HAL_GPIO_Init+0x304>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	43db      	mvns	r3, r3
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	4013      	ands	r3, r2
 80029ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	4313      	orrs	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029e4:	4a0f      	ldr	r2, [pc, #60]	; (8002a24 <HAL_GPIO_Init+0x304>)
 80029e6:	69bb      	ldr	r3, [r7, #24]
 80029e8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	3301      	adds	r3, #1
 80029ee:	61fb      	str	r3, [r7, #28]
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	2b0f      	cmp	r3, #15
 80029f4:	f67f aea2 	bls.w	800273c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80029f8:	bf00      	nop
 80029fa:	bf00      	nop
 80029fc:	3724      	adds	r7, #36	; 0x24
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40013800 	.word	0x40013800
 8002a10:	40020000 	.word	0x40020000
 8002a14:	40020400 	.word	0x40020400
 8002a18:	40020800 	.word	0x40020800
 8002a1c:	40020c00 	.word	0x40020c00
 8002a20:	40021000 	.word	0x40021000
 8002a24:	40013c00 	.word	0x40013c00

08002a28 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b082      	sub	sp, #8
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	4603      	mov	r3, r0
 8002a30:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002a32:	4b08      	ldr	r3, [pc, #32]	; (8002a54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a34:	695a      	ldr	r2, [r3, #20]
 8002a36:	88fb      	ldrh	r3, [r7, #6]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d006      	beq.n	8002a4c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002a3e:	4a05      	ldr	r2, [pc, #20]	; (8002a54 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002a40:	88fb      	ldrh	r3, [r7, #6]
 8002a42:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002a44:	88fb      	ldrh	r3, [r7, #6]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f7fe fdd0 	bl	80015ec <HAL_GPIO_EXTI_Callback>
  }
}
 8002a4c:	bf00      	nop
 8002a4e:	3708      	adds	r7, #8
 8002a50:	46bd      	mov	sp, r7
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40013c00 	.word	0x40013c00

08002a58 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5a:	b08f      	sub	sp, #60	; 0x3c
 8002a5c:	af0a      	add	r7, sp, #40	; 0x28
 8002a5e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e10f      	b.n	8002c8a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d106      	bne.n	8002a8a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f006 fc05 	bl	8009294 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d102      	bne.n	8002aa4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f002 feec 	bl	8005886 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	603b      	str	r3, [r7, #0]
 8002ab4:	687e      	ldr	r6, [r7, #4]
 8002ab6:	466d      	mov	r5, sp
 8002ab8:	f106 0410 	add.w	r4, r6, #16
 8002abc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002abe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002ac2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002ac4:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ac8:	e885 0003 	stmia.w	r5, {r0, r1}
 8002acc:	1d33      	adds	r3, r6, #4
 8002ace:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ad0:	6838      	ldr	r0, [r7, #0]
 8002ad2:	f002 fdc4 	bl	800565e <USB_CoreInit>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2202      	movs	r2, #2
 8002ae0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e0d0      	b.n	8002c8a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2100      	movs	r1, #0
 8002aee:	4618      	mov	r0, r3
 8002af0:	f002 feda 	bl	80058a8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002af4:	2300      	movs	r3, #0
 8002af6:	73fb      	strb	r3, [r7, #15]
 8002af8:	e04a      	b.n	8002b90 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002afa:	7bfa      	ldrb	r2, [r7, #15]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	333d      	adds	r3, #61	; 0x3d
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002b0e:	7bfa      	ldrb	r2, [r7, #15]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4413      	add	r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	333c      	adds	r3, #60	; 0x3c
 8002b1e:	7bfa      	ldrb	r2, [r7, #15]
 8002b20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002b22:	7bfa      	ldrb	r2, [r7, #15]
 8002b24:	7bfb      	ldrb	r3, [r7, #15]
 8002b26:	b298      	uxth	r0, r3
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	00db      	lsls	r3, r3, #3
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	3344      	adds	r3, #68	; 0x44
 8002b36:	4602      	mov	r2, r0
 8002b38:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	3340      	adds	r3, #64	; 0x40
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002b4e:	7bfa      	ldrb	r2, [r7, #15]
 8002b50:	6879      	ldr	r1, [r7, #4]
 8002b52:	4613      	mov	r3, r2
 8002b54:	00db      	lsls	r3, r3, #3
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	440b      	add	r3, r1
 8002b5c:	3348      	adds	r3, #72	; 0x48
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002b62:	7bfa      	ldrb	r2, [r7, #15]
 8002b64:	6879      	ldr	r1, [r7, #4]
 8002b66:	4613      	mov	r3, r2
 8002b68:	00db      	lsls	r3, r3, #3
 8002b6a:	4413      	add	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	440b      	add	r3, r1
 8002b70:	334c      	adds	r3, #76	; 0x4c
 8002b72:	2200      	movs	r2, #0
 8002b74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002b76:	7bfa      	ldrb	r2, [r7, #15]
 8002b78:	6879      	ldr	r1, [r7, #4]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	00db      	lsls	r3, r3, #3
 8002b7e:	4413      	add	r3, r2
 8002b80:	009b      	lsls	r3, r3, #2
 8002b82:	440b      	add	r3, r1
 8002b84:	3354      	adds	r3, #84	; 0x54
 8002b86:	2200      	movs	r2, #0
 8002b88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	73fb      	strb	r3, [r7, #15]
 8002b90:	7bfa      	ldrb	r2, [r7, #15]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d3af      	bcc.n	8002afa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	73fb      	strb	r3, [r7, #15]
 8002b9e:	e044      	b.n	8002c2a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002ba0:	7bfa      	ldrb	r2, [r7, #15]
 8002ba2:	6879      	ldr	r1, [r7, #4]
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	440b      	add	r3, r1
 8002bae:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002bb6:	7bfa      	ldrb	r2, [r7, #15]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	00db      	lsls	r3, r3, #3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002bc8:	7bfa      	ldrb	r2, [r7, #15]
 8002bca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002bcc:	7bfa      	ldrb	r2, [r7, #15]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	4413      	add	r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bde:	2200      	movs	r2, #0
 8002be0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002be2:	7bfa      	ldrb	r2, [r7, #15]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	00db      	lsls	r3, r3, #3
 8002bea:	4413      	add	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002bf8:	7bfa      	ldrb	r2, [r7, #15]
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	4613      	mov	r3, r2
 8002bfe:	00db      	lsls	r3, r3, #3
 8002c00:	4413      	add	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	440b      	add	r3, r1
 8002c06:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002c0e:	7bfa      	ldrb	r2, [r7, #15]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	00db      	lsls	r3, r3, #3
 8002c16:	4413      	add	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c20:	2200      	movs	r2, #0
 8002c22:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002c24:	7bfb      	ldrb	r3, [r7, #15]
 8002c26:	3301      	adds	r3, #1
 8002c28:	73fb      	strb	r3, [r7, #15]
 8002c2a:	7bfa      	ldrb	r2, [r7, #15]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d3b5      	bcc.n	8002ba0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	603b      	str	r3, [r7, #0]
 8002c3a:	687e      	ldr	r6, [r7, #4]
 8002c3c:	466d      	mov	r5, sp
 8002c3e:	f106 0410 	add.w	r4, r6, #16
 8002c42:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c44:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c46:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c48:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c4a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002c4e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002c52:	1d33      	adds	r3, r6, #4
 8002c54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c56:	6838      	ldr	r0, [r7, #0]
 8002c58:	f002 fe72 	bl	8005940 <USB_DevInit>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d005      	beq.n	8002c6e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2202      	movs	r2, #2
 8002c66:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e00d      	b.n	8002c8a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f003 ffc1 	bl	8006c0a <USB_DevDisconnect>

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c92 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b084      	sub	sp, #16
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d101      	bne.n	8002cae <HAL_PCD_Start+0x1c>
 8002caa:	2302      	movs	r3, #2
 8002cac:	e020      	b.n	8002cf0 <HAL_PCD_Start+0x5e>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d109      	bne.n	8002cd2 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d005      	beq.n	8002cd2 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cca:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f002 fdc4 	bl	8005864 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f003 ff71 	bl	8006bc8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002cf8:	b590      	push	{r4, r7, lr}
 8002cfa:	b08d      	sub	sp, #52	; 0x34
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d06:	6a3b      	ldr	r3, [r7, #32]
 8002d08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f004 f82f 	bl	8006d72 <USB_GetMode>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	f040 848a 	bne.w	8003630 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f003 ff93 	bl	8006c4c <USB_ReadInterrupts>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f000 8480 	beq.w	800362e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	0a1b      	lsrs	r3, r3, #8
 8002d38:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f003 ff80 	bl	8006c4c <USB_ReadInterrupts>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	f003 0302 	and.w	r3, r3, #2
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d107      	bne.n	8002d66 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f002 0202 	and.w	r2, r2, #2
 8002d64:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f003 ff6e 	bl	8006c4c <USB_ReadInterrupts>
 8002d70:	4603      	mov	r3, r0
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d161      	bne.n	8002e3e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	699a      	ldr	r2, [r3, #24]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f022 0210 	bic.w	r2, r2, #16
 8002d88:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002d8a:	6a3b      	ldr	r3, [r7, #32]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002d90:	69bb      	ldr	r3, [r7, #24]
 8002d92:	f003 020f 	and.w	r2, r3, #15
 8002d96:	4613      	mov	r3, r2
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	4413      	add	r3, r2
 8002da6:	3304      	adds	r3, #4
 8002da8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	0c5b      	lsrs	r3, r3, #17
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	2b02      	cmp	r3, #2
 8002db4:	d124      	bne.n	8002e00 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002db6:	69ba      	ldr	r2, [r7, #24]
 8002db8:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d035      	beq.n	8002e2e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002dc6:	69bb      	ldr	r3, [r7, #24]
 8002dc8:	091b      	lsrs	r3, r3, #4
 8002dca:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002dcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	6a38      	ldr	r0, [r7, #32]
 8002dd6:	f003 fda5 	bl	8006924 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	691a      	ldr	r2, [r3, #16]
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002de6:	441a      	add	r2, r3
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	6a1a      	ldr	r2, [r3, #32]
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	091b      	lsrs	r3, r3, #4
 8002df4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002df8:	441a      	add	r2, r3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	621a      	str	r2, [r3, #32]
 8002dfe:	e016      	b.n	8002e2e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	0c5b      	lsrs	r3, r3, #17
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	2b06      	cmp	r3, #6
 8002e0a:	d110      	bne.n	8002e2e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e12:	2208      	movs	r2, #8
 8002e14:	4619      	mov	r1, r3
 8002e16:	6a38      	ldr	r0, [r7, #32]
 8002e18:	f003 fd84 	bl	8006924 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	6a1a      	ldr	r2, [r3, #32]
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	091b      	lsrs	r3, r3, #4
 8002e24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002e28:	441a      	add	r2, r3
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	699a      	ldr	r2, [r3, #24]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f042 0210 	orr.w	r2, r2, #16
 8002e3c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4618      	mov	r0, r3
 8002e44:	f003 ff02 	bl	8006c4c <USB_ReadInterrupts>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e4e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002e52:	f040 80a7 	bne.w	8002fa4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f003 ff07 	bl	8006c72 <USB_ReadDevAllOutEpInterrupt>
 8002e64:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002e66:	e099      	b.n	8002f9c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	f000 808e 	beq.w	8002f90 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f003 ff2b 	bl	8006cda <USB_ReadDevOutEPInterrupt>
 8002e84:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00c      	beq.n	8002eaa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002ea2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	f000 fec3 	bl	8003c30 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00c      	beq.n	8002ece <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	69fb      	ldr	r3, [r7, #28]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002ec6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 ff99 	bl	8003e00 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	f003 0310 	and.w	r3, r3, #16
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d008      	beq.n	8002eea <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	4413      	add	r3, r2
 8002ee0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	2310      	movs	r3, #16
 8002ee8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d030      	beq.n	8002f56 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ef4:	6a3b      	ldr	r3, [r7, #32]
 8002ef6:	695b      	ldr	r3, [r3, #20]
 8002ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002efc:	2b80      	cmp	r3, #128	; 0x80
 8002efe:	d109      	bne.n	8002f14 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	69fa      	ldr	r2, [r7, #28]
 8002f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f12:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002f14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f16:	4613      	mov	r3, r2
 8002f18:	00db      	lsls	r3, r3, #3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	009b      	lsls	r3, r3, #2
 8002f1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	3304      	adds	r3, #4
 8002f28:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	78db      	ldrb	r3, [r3, #3]
 8002f2e:	2b01      	cmp	r3, #1
 8002f30:	d108      	bne.n	8002f44 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2200      	movs	r2, #0
 8002f36:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f3a:	b2db      	uxtb	r3, r3
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f006 faae 	bl	80094a0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f50:	461a      	mov	r2, r3
 8002f52:	2302      	movs	r3, #2
 8002f54:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	f003 0320 	and.w	r3, r3, #32
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d008      	beq.n	8002f72 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f62:	015a      	lsls	r2, r3, #5
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	4413      	add	r3, r2
 8002f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f6c:	461a      	mov	r2, r3
 8002f6e:	2320      	movs	r3, #32
 8002f70:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d009      	beq.n	8002f90 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	015a      	lsls	r2, r3, #5
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	4413      	add	r3, r2
 8002f84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f88:	461a      	mov	r2, r3
 8002f8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002f8e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f92:	3301      	adds	r3, #1
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f98:	085b      	lsrs	r3, r3, #1
 8002f9a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f47f af62 	bne.w	8002e68 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f003 fe4f 	bl	8006c4c <USB_ReadInterrupts>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fb4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002fb8:	f040 80db 	bne.w	8003172 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f003 fe70 	bl	8006ca6 <USB_ReadDevAllInEpInterrupt>
 8002fc6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002fcc:	e0cd      	b.n	800316a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 80c2 	beq.w	800315e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	4611      	mov	r1, r2
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f003 fe96 	bl	8006d16 <USB_ReadDevInEPInterrupt>
 8002fea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	f003 0301 	and.w	r3, r3, #1
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d057      	beq.n	80030a6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ff8:	f003 030f 	and.w	r3, r3, #15
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	43db      	mvns	r3, r3
 8003010:	69f9      	ldr	r1, [r7, #28]
 8003012:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003016:	4013      	ands	r3, r2
 8003018:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301c:	015a      	lsls	r2, r3, #5
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	4413      	add	r3, r2
 8003022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003026:	461a      	mov	r2, r3
 8003028:	2301      	movs	r3, #1
 800302a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d132      	bne.n	800309a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003034:	6879      	ldr	r1, [r7, #4]
 8003036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003038:	4613      	mov	r3, r2
 800303a:	00db      	lsls	r3, r3, #3
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	334c      	adds	r3, #76	; 0x4c
 8003044:	6819      	ldr	r1, [r3, #0]
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800304a:	4613      	mov	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	4413      	add	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4403      	add	r3, r0
 8003054:	3348      	adds	r3, #72	; 0x48
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4419      	add	r1, r3
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800305e:	4613      	mov	r3, r2
 8003060:	00db      	lsls	r3, r3, #3
 8003062:	4413      	add	r3, r2
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	4403      	add	r3, r0
 8003068:	334c      	adds	r3, #76	; 0x4c
 800306a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800306c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306e:	2b00      	cmp	r3, #0
 8003070:	d113      	bne.n	800309a <HAL_PCD_IRQHandler+0x3a2>
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	3354      	adds	r3, #84	; 0x54
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d108      	bne.n	800309a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6818      	ldr	r0, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003092:	461a      	mov	r2, r3
 8003094:	2101      	movs	r1, #1
 8003096:	f003 fe9d 	bl	8006dd4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	b2db      	uxtb	r3, r3
 800309e:	4619      	mov	r1, r3
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f006 f978 	bl	8009396 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	f003 0308 	and.w	r3, r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d008      	beq.n	80030c2 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80030b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b2:	015a      	lsls	r2, r3, #5
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	4413      	add	r3, r2
 80030b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030bc:	461a      	mov	r2, r3
 80030be:	2308      	movs	r3, #8
 80030c0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	f003 0310 	and.w	r3, r3, #16
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d008      	beq.n	80030de <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80030cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030d8:	461a      	mov	r2, r3
 80030da:	2310      	movs	r3, #16
 80030dc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d008      	beq.n	80030fa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80030e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ea:	015a      	lsls	r2, r3, #5
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	4413      	add	r3, r2
 80030f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f4:	461a      	mov	r2, r3
 80030f6:	2340      	movs	r3, #64	; 0x40
 80030f8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d023      	beq.n	800314c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003104:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003106:	6a38      	ldr	r0, [r7, #32]
 8003108:	f002 fd7e 	bl	8005c08 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800310c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310e:	4613      	mov	r3, r2
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4413      	add	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	3338      	adds	r3, #56	; 0x38
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	4413      	add	r3, r2
 800311c:	3304      	adds	r3, #4
 800311e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	78db      	ldrb	r3, [r3, #3]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d108      	bne.n	800313a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	2200      	movs	r2, #0
 800312c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800312e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003130:	b2db      	uxtb	r3, r3
 8003132:	4619      	mov	r1, r3
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f006 f9c5 	bl	80094c4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800313a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	4413      	add	r3, r2
 8003142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003146:	461a      	mov	r2, r3
 8003148:	2302      	movs	r3, #2
 800314a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003152:	2b00      	cmp	r3, #0
 8003154:	d003      	beq.n	800315e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003156:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f000 fcdb 	bl	8003b14 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	3301      	adds	r3, #1
 8003162:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003166:	085b      	lsrs	r3, r3, #1
 8003168:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	2b00      	cmp	r3, #0
 800316e:	f47f af2e 	bne.w	8002fce <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4618      	mov	r0, r3
 8003178:	f003 fd68 	bl	8006c4c <USB_ReadInterrupts>
 800317c:	4603      	mov	r3, r0
 800317e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003182:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003186:	d122      	bne.n	80031ce <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	69fa      	ldr	r2, [r7, #28]
 8003192:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003196:	f023 0301 	bic.w	r3, r3, #1
 800319a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d108      	bne.n	80031b8 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80031ae:	2100      	movs	r1, #0
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	f000 fec3 	bl	8003f3c <HAL_PCDEx_LPM_Callback>
 80031b6:	e002      	b.n	80031be <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f006 f963 	bl	8009484 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80031cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f003 fd3a 	bl	8006c4c <USB_ReadInterrupts>
 80031d8:	4603      	mov	r3, r0
 80031da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80031de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80031e2:	d112      	bne.n	800320a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	f003 0301 	and.w	r3, r3, #1
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d102      	bne.n	80031fa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f006 f91f 	bl	8009438 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	695a      	ldr	r2, [r3, #20]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003208:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f003 fd1c 	bl	8006c4c <USB_ReadInterrupts>
 8003214:	4603      	mov	r3, r0
 8003216:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800321a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321e:	f040 80b7 	bne.w	8003390 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	69fa      	ldr	r2, [r7, #28]
 800322c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003230:	f023 0301 	bic.w	r3, r3, #1
 8003234:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2110      	movs	r1, #16
 800323c:	4618      	mov	r0, r3
 800323e:	f002 fce3 	bl	8005c08 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003242:	2300      	movs	r3, #0
 8003244:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003246:	e046      	b.n	80032d6 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800324a:	015a      	lsls	r2, r3, #5
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	4413      	add	r3, r2
 8003250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003254:	461a      	mov	r2, r3
 8003256:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800325a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800325c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800325e:	015a      	lsls	r2, r3, #5
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	4413      	add	r3, r2
 8003264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800326c:	0151      	lsls	r1, r2, #5
 800326e:	69fa      	ldr	r2, [r7, #28]
 8003270:	440a      	add	r2, r1
 8003272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003276:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800327a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800327e:	015a      	lsls	r2, r3, #5
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	4413      	add	r3, r2
 8003284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003288:	461a      	mov	r2, r3
 800328a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800328e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003292:	015a      	lsls	r2, r3, #5
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	4413      	add	r3, r2
 8003298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032a0:	0151      	lsls	r1, r2, #5
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	440a      	add	r2, r1
 80032a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032aa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80032ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80032b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b2:	015a      	lsls	r2, r3, #5
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	4413      	add	r3, r2
 80032b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032c0:	0151      	lsls	r1, r2, #5
 80032c2:	69fa      	ldr	r2, [r7, #28]
 80032c4:	440a      	add	r2, r1
 80032c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80032ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80032ce:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80032d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032d2:	3301      	adds	r3, #1
 80032d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80032dc:	429a      	cmp	r2, r3
 80032de:	d3b3      	bcc.n	8003248 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80032e6:	69db      	ldr	r3, [r3, #28]
 80032e8:	69fa      	ldr	r2, [r7, #28]
 80032ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80032ee:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80032f2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d016      	beq.n	800332a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003302:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003306:	69fa      	ldr	r2, [r7, #28]
 8003308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800330c:	f043 030b 	orr.w	r3, r3, #11
 8003310:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003314:	69fb      	ldr	r3, [r7, #28]
 8003316:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800331a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331c:	69fa      	ldr	r2, [r7, #28]
 800331e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003322:	f043 030b 	orr.w	r3, r3, #11
 8003326:	6453      	str	r3, [r2, #68]	; 0x44
 8003328:	e015      	b.n	8003356 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	69fa      	ldr	r2, [r7, #28]
 8003334:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003338:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800333c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003340:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003348:	691b      	ldr	r3, [r3, #16]
 800334a:	69fa      	ldr	r2, [r7, #28]
 800334c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003350:	f043 030b 	orr.w	r3, r3, #11
 8003354:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	69fa      	ldr	r2, [r7, #28]
 8003360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003364:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003368:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800337a:	461a      	mov	r2, r3
 800337c:	f003 fd2a 	bl	8006dd4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800338e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f003 fc59 	bl	8006c4c <USB_ReadInterrupts>
 800339a:	4603      	mov	r3, r0
 800339c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80033a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80033a4:	d124      	bne.n	80033f0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4618      	mov	r0, r3
 80033ac:	f003 fcef 	bl	8006d8e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4618      	mov	r0, r3
 80033b6:	f002 fca4 	bl	8005d02 <USB_GetDevSpeed>
 80033ba:	4603      	mov	r3, r0
 80033bc:	461a      	mov	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681c      	ldr	r4, [r3, #0]
 80033c6:	f001 f9e9 	bl	800479c <HAL_RCC_GetHCLKFreq>
 80033ca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	461a      	mov	r2, r3
 80033d4:	4620      	mov	r0, r4
 80033d6:	f002 f9a3 	bl	8005720 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f006 f803 	bl	80093e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695a      	ldr	r2, [r3, #20]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80033ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4618      	mov	r0, r3
 80033f6:	f003 fc29 	bl	8006c4c <USB_ReadInterrupts>
 80033fa:	4603      	mov	r3, r0
 80033fc:	f003 0308 	and.w	r3, r3, #8
 8003400:	2b08      	cmp	r3, #8
 8003402:	d10a      	bne.n	800341a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f005 ffe0 	bl	80093ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	695a      	ldr	r2, [r3, #20]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f002 0208 	and.w	r2, r2, #8
 8003418:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4618      	mov	r0, r3
 8003420:	f003 fc14 	bl	8006c4c <USB_ReadInterrupts>
 8003424:	4603      	mov	r3, r0
 8003426:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342a:	2b80      	cmp	r3, #128	; 0x80
 800342c:	d122      	bne.n	8003474 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800342e:	6a3b      	ldr	r3, [r7, #32]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800343a:	2301      	movs	r3, #1
 800343c:	627b      	str	r3, [r7, #36]	; 0x24
 800343e:	e014      	b.n	800346a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003440:	6879      	ldr	r1, [r7, #4]
 8003442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003444:	4613      	mov	r3, r2
 8003446:	00db      	lsls	r3, r3, #3
 8003448:	4413      	add	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	440b      	add	r3, r1
 800344e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003452:	781b      	ldrb	r3, [r3, #0]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d105      	bne.n	8003464 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800345a:	b2db      	uxtb	r3, r3
 800345c:	4619      	mov	r1, r3
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 fb27 	bl	8003ab2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	3301      	adds	r3, #1
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003470:	429a      	cmp	r2, r3
 8003472:	d3e5      	bcc.n	8003440 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4618      	mov	r0, r3
 800347a:	f003 fbe7 	bl	8006c4c <USB_ReadInterrupts>
 800347e:	4603      	mov	r3, r0
 8003480:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003484:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003488:	d13b      	bne.n	8003502 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800348a:	2301      	movs	r3, #1
 800348c:	627b      	str	r3, [r7, #36]	; 0x24
 800348e:	e02b      	b.n	80034e8 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	015a      	lsls	r2, r3, #5
 8003494:	69fb      	ldr	r3, [r7, #28]
 8003496:	4413      	add	r3, r2
 8003498:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034a0:	6879      	ldr	r1, [r7, #4]
 80034a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	3340      	adds	r3, #64	; 0x40
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d115      	bne.n	80034e2 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80034b6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	da12      	bge.n	80034e2 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80034bc:	6879      	ldr	r1, [r7, #4]
 80034be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034c0:	4613      	mov	r3, r2
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	333f      	adds	r3, #63	; 0x3f
 80034cc:	2201      	movs	r2, #1
 80034ce:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80034d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d2:	b2db      	uxtb	r3, r3
 80034d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	4619      	mov	r1, r3
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fae8 	bl	8003ab2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80034e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e4:	3301      	adds	r3, #1
 80034e6:	627b      	str	r3, [r7, #36]	; 0x24
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d3ce      	bcc.n	8003490 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695a      	ldr	r2, [r3, #20]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003500:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f003 fba0 	bl	8006c4c <USB_ReadInterrupts>
 800350c:	4603      	mov	r3, r0
 800350e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003512:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003516:	d155      	bne.n	80035c4 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003518:	2301      	movs	r3, #1
 800351a:	627b      	str	r3, [r7, #36]	; 0x24
 800351c:	e045      	b.n	80035aa <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	015a      	lsls	r2, r3, #5
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	4413      	add	r3, r2
 8003526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003532:	4613      	mov	r3, r2
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4413      	add	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	440b      	add	r3, r1
 800353c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	2b01      	cmp	r3, #1
 8003544:	d12e      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003546:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003548:	2b00      	cmp	r3, #0
 800354a:	da2b      	bge.n	80035a4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003558:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800355c:	429a      	cmp	r2, r3
 800355e:	d121      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003564:	4613      	mov	r3, r2
 8003566:	00db      	lsls	r3, r3, #3
 8003568:	4413      	add	r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003576:	6a3b      	ldr	r3, [r7, #32]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800357e:	6a3b      	ldr	r3, [r7, #32]
 8003580:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003582:	6a3b      	ldr	r3, [r7, #32]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10a      	bne.n	80035a4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	69fa      	ldr	r2, [r7, #28]
 8003598:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800359c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035a0:	6053      	str	r3, [r2, #4]
            break;
 80035a2:	e007      	b.n	80035b4 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80035a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a6:	3301      	adds	r3, #1
 80035a8:	627b      	str	r3, [r7, #36]	; 0x24
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035b0:	429a      	cmp	r2, r3
 80035b2:	d3b4      	bcc.n	800351e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	695a      	ldr	r2, [r3, #20]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80035c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f003 fb3f 	bl	8006c4c <USB_ReadInterrupts>
 80035ce:	4603      	mov	r3, r0
 80035d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80035d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d8:	d10a      	bne.n	80035f0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80035da:	6878      	ldr	r0, [r7, #4]
 80035dc:	f005 ff84 	bl	80094e8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	695a      	ldr	r2, [r3, #20]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80035ee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f003 fb29 	bl	8006c4c <USB_ReadInterrupts>
 80035fa:	4603      	mov	r3, r0
 80035fc:	f003 0304 	and.w	r3, r3, #4
 8003600:	2b04      	cmp	r3, #4
 8003602:	d115      	bne.n	8003630 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	f003 0304 	and.w	r3, r3, #4
 8003612:	2b00      	cmp	r3, #0
 8003614:	d002      	beq.n	800361c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003616:	6878      	ldr	r0, [r7, #4]
 8003618:	f005 ff74 	bl	8009504 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6859      	ldr	r1, [r3, #4]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	430a      	orrs	r2, r1
 800362a:	605a      	str	r2, [r3, #4]
 800362c:	e000      	b.n	8003630 <HAL_PCD_IRQHandler+0x938>
      return;
 800362e:	bf00      	nop
    }
  }
}
 8003630:	3734      	adds	r7, #52	; 0x34
 8003632:	46bd      	mov	sp, r7
 8003634:	bd90      	pop	{r4, r7, pc}

08003636 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003636:	b580      	push	{r7, lr}
 8003638:	b082      	sub	sp, #8
 800363a:	af00      	add	r7, sp, #0
 800363c:	6078      	str	r0, [r7, #4]
 800363e:	460b      	mov	r3, r1
 8003640:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003648:	2b01      	cmp	r3, #1
 800364a:	d101      	bne.n	8003650 <HAL_PCD_SetAddress+0x1a>
 800364c:	2302      	movs	r3, #2
 800364e:	e013      	b.n	8003678 <HAL_PCD_SetAddress+0x42>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	78fa      	ldrb	r2, [r7, #3]
 800365c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	4611      	mov	r1, r2
 8003668:	4618      	mov	r0, r3
 800366a:	f003 fa87 	bl	8006b7c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003676:	2300      	movs	r3, #0
}
 8003678:	4618      	mov	r0, r3
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	4608      	mov	r0, r1
 800368a:	4611      	mov	r1, r2
 800368c:	461a      	mov	r2, r3
 800368e:	4603      	mov	r3, r0
 8003690:	70fb      	strb	r3, [r7, #3]
 8003692:	460b      	mov	r3, r1
 8003694:	803b      	strh	r3, [r7, #0]
 8003696:	4613      	mov	r3, r2
 8003698:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800369e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	da0f      	bge.n	80036c6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036a6:	78fb      	ldrb	r3, [r7, #3]
 80036a8:	f003 020f 	and.w	r2, r3, #15
 80036ac:	4613      	mov	r3, r2
 80036ae:	00db      	lsls	r3, r3, #3
 80036b0:	4413      	add	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	3338      	adds	r3, #56	; 0x38
 80036b6:	687a      	ldr	r2, [r7, #4]
 80036b8:	4413      	add	r3, r2
 80036ba:	3304      	adds	r3, #4
 80036bc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2201      	movs	r2, #1
 80036c2:	705a      	strb	r2, [r3, #1]
 80036c4:	e00f      	b.n	80036e6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036c6:	78fb      	ldrb	r3, [r7, #3]
 80036c8:	f003 020f 	and.w	r2, r3, #15
 80036cc:	4613      	mov	r3, r2
 80036ce:	00db      	lsls	r3, r3, #3
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	4413      	add	r3, r2
 80036dc:	3304      	adds	r3, #4
 80036de:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2200      	movs	r2, #0
 80036e4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80036e6:	78fb      	ldrb	r3, [r7, #3]
 80036e8:	f003 030f 	and.w	r3, r3, #15
 80036ec:	b2da      	uxtb	r2, r3
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80036f2:	883a      	ldrh	r2, [r7, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	78ba      	ldrb	r2, [r7, #2]
 80036fc:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	785b      	ldrb	r3, [r3, #1]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d004      	beq.n	8003710 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	781b      	ldrb	r3, [r3, #0]
 800370a:	b29a      	uxth	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003710:	78bb      	ldrb	r3, [r7, #2]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d102      	bne.n	800371c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003722:	2b01      	cmp	r3, #1
 8003724:	d101      	bne.n	800372a <HAL_PCD_EP_Open+0xaa>
 8003726:	2302      	movs	r3, #2
 8003728:	e00e      	b.n	8003748 <HAL_PCD_EP_Open+0xc8>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2201      	movs	r2, #1
 800372e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68f9      	ldr	r1, [r7, #12]
 8003738:	4618      	mov	r0, r3
 800373a:	f002 fb07 	bl	8005d4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003746:	7afb      	ldrb	r3, [r7, #11]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800375c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003760:	2b00      	cmp	r3, #0
 8003762:	da0f      	bge.n	8003784 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003764:	78fb      	ldrb	r3, [r7, #3]
 8003766:	f003 020f 	and.w	r2, r3, #15
 800376a:	4613      	mov	r3, r2
 800376c:	00db      	lsls	r3, r3, #3
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	3338      	adds	r3, #56	; 0x38
 8003774:	687a      	ldr	r2, [r7, #4]
 8003776:	4413      	add	r3, r2
 8003778:	3304      	adds	r3, #4
 800377a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	705a      	strb	r2, [r3, #1]
 8003782:	e00f      	b.n	80037a4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	f003 020f 	and.w	r2, r3, #15
 800378a:	4613      	mov	r3, r2
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	4413      	add	r3, r2
 800379a:	3304      	adds	r3, #4
 800379c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80037a4:	78fb      	ldrb	r3, [r7, #3]
 80037a6:	f003 030f 	and.w	r3, r3, #15
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d101      	bne.n	80037be <HAL_PCD_EP_Close+0x6e>
 80037ba:	2302      	movs	r3, #2
 80037bc:	e00e      	b.n	80037dc <HAL_PCD_EP_Close+0x8c>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68f9      	ldr	r1, [r7, #12]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f002 fb45 	bl	8005e5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3710      	adds	r7, #16
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b086      	sub	sp, #24
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	607a      	str	r2, [r7, #4]
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	460b      	mov	r3, r1
 80037f2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037f4:	7afb      	ldrb	r3, [r7, #11]
 80037f6:	f003 020f 	and.w	r2, r3, #15
 80037fa:	4613      	mov	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003806:	68fa      	ldr	r2, [r7, #12]
 8003808:	4413      	add	r3, r2
 800380a:	3304      	adds	r3, #4
 800380c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003814:	697b      	ldr	r3, [r7, #20]
 8003816:	683a      	ldr	r2, [r7, #0]
 8003818:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800381a:	697b      	ldr	r3, [r7, #20]
 800381c:	2200      	movs	r2, #0
 800381e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	2200      	movs	r2, #0
 8003824:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003826:	7afb      	ldrb	r3, [r7, #11]
 8003828:	f003 030f 	and.w	r3, r3, #15
 800382c:	b2da      	uxtb	r2, r3
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d102      	bne.n	8003840 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003840:	7afb      	ldrb	r3, [r7, #11]
 8003842:	f003 030f 	and.w	r3, r3, #15
 8003846:	2b00      	cmp	r3, #0
 8003848:	d109      	bne.n	800385e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6818      	ldr	r0, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	b2db      	uxtb	r3, r3
 8003854:	461a      	mov	r2, r3
 8003856:	6979      	ldr	r1, [r7, #20]
 8003858:	f002 fe24 	bl	80064a4 <USB_EP0StartXfer>
 800385c:	e008      	b.n	8003870 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	6818      	ldr	r0, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	691b      	ldr	r3, [r3, #16]
 8003866:	b2db      	uxtb	r3, r3
 8003868:	461a      	mov	r2, r3
 800386a:	6979      	ldr	r1, [r7, #20]
 800386c:	f002 fbd2 	bl	8006014 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3718      	adds	r7, #24
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800387a:	b480      	push	{r7}
 800387c:	b083      	sub	sp, #12
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	460b      	mov	r3, r1
 8003884:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003886:	78fb      	ldrb	r3, [r7, #3]
 8003888:	f003 020f 	and.w	r2, r3, #15
 800388c:	6879      	ldr	r1, [r7, #4]
 800388e:	4613      	mov	r3, r2
 8003890:	00db      	lsls	r3, r3, #3
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800389c:	681b      	ldr	r3, [r3, #0]
}
 800389e:	4618      	mov	r0, r3
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr

080038aa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b086      	sub	sp, #24
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	60f8      	str	r0, [r7, #12]
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	603b      	str	r3, [r7, #0]
 80038b6:	460b      	mov	r3, r1
 80038b8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038ba:	7afb      	ldrb	r3, [r7, #11]
 80038bc:	f003 020f 	and.w	r2, r3, #15
 80038c0:	4613      	mov	r3, r2
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	4413      	add	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	3338      	adds	r3, #56	; 0x38
 80038ca:	68fa      	ldr	r2, [r7, #12]
 80038cc:	4413      	add	r3, r2
 80038ce:	3304      	adds	r3, #4
 80038d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	683a      	ldr	r2, [r7, #0]
 80038dc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2200      	movs	r2, #0
 80038e2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2201      	movs	r2, #1
 80038e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80038ea:	7afb      	ldrb	r3, [r7, #11]
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d102      	bne.n	8003904 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003904:	7afb      	ldrb	r3, [r7, #11]
 8003906:	f003 030f 	and.w	r3, r3, #15
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	691b      	ldr	r3, [r3, #16]
 8003916:	b2db      	uxtb	r3, r3
 8003918:	461a      	mov	r2, r3
 800391a:	6979      	ldr	r1, [r7, #20]
 800391c:	f002 fdc2 	bl	80064a4 <USB_EP0StartXfer>
 8003920:	e008      	b.n	8003934 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6818      	ldr	r0, [r3, #0]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	691b      	ldr	r3, [r3, #16]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	461a      	mov	r2, r3
 800392e:	6979      	ldr	r1, [r7, #20]
 8003930:	f002 fb70 	bl	8006014 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
 8003946:	460b      	mov	r3, r1
 8003948:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800394a:	78fb      	ldrb	r3, [r7, #3]
 800394c:	f003 020f 	and.w	r2, r3, #15
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	429a      	cmp	r2, r3
 8003956:	d901      	bls.n	800395c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e050      	b.n	80039fe <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800395c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003960:	2b00      	cmp	r3, #0
 8003962:	da0f      	bge.n	8003984 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003964:	78fb      	ldrb	r3, [r7, #3]
 8003966:	f003 020f 	and.w	r2, r3, #15
 800396a:	4613      	mov	r3, r2
 800396c:	00db      	lsls	r3, r3, #3
 800396e:	4413      	add	r3, r2
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	3338      	adds	r3, #56	; 0x38
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	4413      	add	r3, r2
 8003978:	3304      	adds	r3, #4
 800397a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	705a      	strb	r2, [r3, #1]
 8003982:	e00d      	b.n	80039a0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003984:	78fa      	ldrb	r2, [r7, #3]
 8003986:	4613      	mov	r3, r2
 8003988:	00db      	lsls	r3, r3, #3
 800398a:	4413      	add	r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003992:	687a      	ldr	r2, [r7, #4]
 8003994:	4413      	add	r3, r2
 8003996:	3304      	adds	r3, #4
 8003998:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	2200      	movs	r2, #0
 800399e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2201      	movs	r2, #1
 80039a4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80039a6:	78fb      	ldrb	r3, [r7, #3]
 80039a8:	f003 030f 	and.w	r3, r3, #15
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_PCD_EP_SetStall+0x82>
 80039bc:	2302      	movs	r3, #2
 80039be:	e01e      	b.n	80039fe <HAL_PCD_EP_SetStall+0xc0>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68f9      	ldr	r1, [r7, #12]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f003 f800 	bl	80069d4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	f003 030f 	and.w	r3, r3, #15
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d10a      	bne.n	80039f4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	691b      	ldr	r3, [r3, #16]
 80039e6:	b2d9      	uxtb	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039ee:	461a      	mov	r2, r3
 80039f0:	f003 f9f0 	bl	8006dd4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80039fc:	2300      	movs	r3, #0
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b084      	sub	sp, #16
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	460b      	mov	r3, r1
 8003a10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003a12:	78fb      	ldrb	r3, [r7, #3]
 8003a14:	f003 020f 	and.w	r2, r3, #15
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d901      	bls.n	8003a24 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e042      	b.n	8003aaa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003a24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	da0f      	bge.n	8003a4c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003a2c:	78fb      	ldrb	r3, [r7, #3]
 8003a2e:	f003 020f 	and.w	r2, r3, #15
 8003a32:	4613      	mov	r3, r2
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4413      	add	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	3338      	adds	r3, #56	; 0x38
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	4413      	add	r3, r2
 8003a40:	3304      	adds	r3, #4
 8003a42:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2201      	movs	r2, #1
 8003a48:	705a      	strb	r2, [r3, #1]
 8003a4a:	e00f      	b.n	8003a6c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a4c:	78fb      	ldrb	r3, [r7, #3]
 8003a4e:	f003 020f 	and.w	r2, r3, #15
 8003a52:	4613      	mov	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	4413      	add	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	4413      	add	r3, r2
 8003a62:	3304      	adds	r3, #4
 8003a64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	f003 030f 	and.w	r3, r3, #15
 8003a78:	b2da      	uxtb	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d101      	bne.n	8003a8c <HAL_PCD_EP_ClrStall+0x86>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	e00e      	b.n	8003aaa <HAL_PCD_EP_ClrStall+0xa4>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68f9      	ldr	r1, [r7, #12]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f003 f808 	bl	8006ab0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
 8003aba:	460b      	mov	r3, r1
 8003abc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003abe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	da0c      	bge.n	8003ae0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ac6:	78fb      	ldrb	r3, [r7, #3]
 8003ac8:	f003 020f 	and.w	r2, r3, #15
 8003acc:	4613      	mov	r3, r2
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	4413      	add	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	3338      	adds	r3, #56	; 0x38
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	4413      	add	r3, r2
 8003ada:	3304      	adds	r3, #4
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	e00c      	b.n	8003afa <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	f003 020f 	and.w	r2, r3, #15
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	00db      	lsls	r3, r3, #3
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	4413      	add	r3, r2
 8003af6:	3304      	adds	r3, #4
 8003af8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	68f9      	ldr	r1, [r7, #12]
 8003b00:	4618      	mov	r0, r3
 8003b02:	f002 fe27 	bl	8006754 <USB_EPStopXfer>
 8003b06:	4603      	mov	r3, r0
 8003b08:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003b0a:	7afb      	ldrb	r3, [r7, #11]
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08a      	sub	sp, #40	; 0x28
 8003b18:	af02      	add	r7, sp, #8
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	3338      	adds	r3, #56	; 0x38
 8003b34:	687a      	ldr	r2, [r7, #4]
 8003b36:	4413      	add	r3, r2
 8003b38:	3304      	adds	r3, #4
 8003b3a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a1a      	ldr	r2, [r3, #32]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d901      	bls.n	8003b4c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e06c      	b.n	8003c26 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	699a      	ldr	r2, [r3, #24]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	1ad3      	subs	r3, r2, r3
 8003b56:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	69fa      	ldr	r2, [r7, #28]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d902      	bls.n	8003b68 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	3303      	adds	r3, #3
 8003b6c:	089b      	lsrs	r3, r3, #2
 8003b6e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003b70:	e02b      	b.n	8003bca <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	699a      	ldr	r2, [r3, #24]
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	68db      	ldr	r3, [r3, #12]
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d902      	bls.n	8003b8e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003b8e:	69fb      	ldr	r3, [r7, #28]
 8003b90:	3303      	adds	r3, #3
 8003b92:	089b      	lsrs	r3, r3, #2
 8003b94:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6919      	ldr	r1, [r3, #16]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	b2da      	uxtb	r2, r3
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003ba6:	b2db      	uxtb	r3, r3
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	4603      	mov	r3, r0
 8003bac:	6978      	ldr	r0, [r7, #20]
 8003bae:	f002 fe7b 	bl	80068a8 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	691a      	ldr	r2, [r3, #16]
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	441a      	add	r2, r3
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a1a      	ldr	r2, [r3, #32]
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	441a      	add	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	015a      	lsls	r2, r3, #5
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	4413      	add	r3, r2
 8003bd2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	69ba      	ldr	r2, [r7, #24]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d809      	bhi.n	8003bf4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a1a      	ldr	r2, [r3, #32]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d203      	bcs.n	8003bf4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	699b      	ldr	r3, [r3, #24]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1be      	bne.n	8003b72 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	699a      	ldr	r2, [r3, #24]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a1b      	ldr	r3, [r3, #32]
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d811      	bhi.n	8003c24 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	f003 030f 	and.w	r3, r3, #15
 8003c06:	2201      	movs	r2, #1
 8003c08:	fa02 f303 	lsl.w	r3, r2, r3
 8003c0c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c14:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	6939      	ldr	r1, [r7, #16]
 8003c1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c20:	4013      	ands	r3, r2
 8003c22:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	333c      	adds	r3, #60	; 0x3c
 8003c48:	3304      	adds	r3, #4
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5a:	689b      	ldr	r3, [r3, #8]
 8003c5c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d17b      	bne.n	8003d5e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d015      	beq.n	8003c9c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	4a61      	ldr	r2, [pc, #388]	; (8003df8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	f240 80b9 	bls.w	8003dec <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	f000 80b3 	beq.w	8003dec <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c92:	461a      	mov	r2, r3
 8003c94:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c98:	6093      	str	r3, [r2, #8]
 8003c9a:	e0a7      	b.n	8003dec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	f003 0320 	and.w	r3, r3, #32
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d009      	beq.n	8003cba <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	015a      	lsls	r2, r3, #5
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	4413      	add	r3, r2
 8003cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	2320      	movs	r3, #32
 8003cb6:	6093      	str	r3, [r2, #8]
 8003cb8:	e098      	b.n	8003dec <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f040 8093 	bne.w	8003dec <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	4a4b      	ldr	r2, [pc, #300]	; (8003df8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d90f      	bls.n	8003cee <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00a      	beq.n	8003cee <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	015a      	lsls	r2, r3, #5
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	4413      	add	r3, r2
 8003ce0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cea:	6093      	str	r3, [r2, #8]
 8003cec:	e07e      	b.n	8003dec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003cee:	683a      	ldr	r2, [r7, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	4413      	add	r3, r2
 8003d00:	3304      	adds	r3, #4
 8003d02:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	0159      	lsls	r1, r3, #5
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	440b      	add	r3, r1
 8003d10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d1a:	1ad2      	subs	r2, r2, r3
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d114      	bne.n	8003d50 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d109      	bne.n	8003d42 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6818      	ldr	r0, [r3, #0]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d38:	461a      	mov	r2, r3
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	f003 f84a 	bl	8006dd4 <USB_EP0_OutStart>
 8003d40:	e006      	b.n	8003d50 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	691a      	ldr	r2, [r3, #16]
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	6a1b      	ldr	r3, [r3, #32]
 8003d4a:	441a      	add	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	4619      	mov	r1, r3
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f005 fb02 	bl	8009360 <HAL_PCD_DataOutStageCallback>
 8003d5c:	e046      	b.n	8003dec <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	4a26      	ldr	r2, [pc, #152]	; (8003dfc <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d124      	bne.n	8003db0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d82:	6093      	str	r3, [r2, #8]
 8003d84:	e032      	b.n	8003dec <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	f003 0320 	and.w	r3, r3, #32
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d008      	beq.n	8003da2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	015a      	lsls	r2, r3, #5
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	4413      	add	r3, r2
 8003d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	2320      	movs	r3, #32
 8003da0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	4619      	mov	r1, r3
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f005 fad9 	bl	8009360 <HAL_PCD_DataOutStageCallback>
 8003dae:	e01d      	b.n	8003dec <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d114      	bne.n	8003de0 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	683a      	ldr	r2, [r7, #0]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	00db      	lsls	r3, r3, #3
 8003dbe:	4413      	add	r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d108      	bne.n	8003de0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6818      	ldr	r0, [r3, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003dd8:	461a      	mov	r2, r3
 8003dda:	2100      	movs	r1, #0
 8003ddc:	f002 fffa 	bl	8006dd4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	b2db      	uxtb	r3, r3
 8003de4:	4619      	mov	r1, r3
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f005 faba 	bl	8009360 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003dec:	2300      	movs	r3, #0
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3720      	adds	r7, #32
 8003df2:	46bd      	mov	sp, r7
 8003df4:	bd80      	pop	{r7, pc}
 8003df6:	bf00      	nop
 8003df8:	4f54300a 	.word	0x4f54300a
 8003dfc:	4f54310a 	.word	0x4f54310a

08003e00 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b086      	sub	sp, #24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	333c      	adds	r3, #60	; 0x3c
 8003e18:	3304      	adds	r3, #4
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	4a15      	ldr	r2, [pc, #84]	; (8003e88 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d90e      	bls.n	8003e54 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	015a      	lsls	r2, r3, #5
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4413      	add	r3, r2
 8003e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e52:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f005 fa71 	bl	800933c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	4a0a      	ldr	r2, [pc, #40]	; (8003e88 <PCD_EP_OutSetupPacket_int+0x88>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d90c      	bls.n	8003e7c <PCD_EP_OutSetupPacket_int+0x7c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	691b      	ldr	r3, [r3, #16]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d108      	bne.n	8003e7c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003e74:	461a      	mov	r2, r3
 8003e76:	2101      	movs	r1, #1
 8003e78:	f002 ffac 	bl	8006dd4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3718      	adds	r7, #24
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	4f54300a 	.word	0x4f54300a

08003e8c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b085      	sub	sp, #20
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	460b      	mov	r3, r1
 8003e96:	70fb      	strb	r3, [r7, #3]
 8003e98:	4613      	mov	r3, r2
 8003e9a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ea2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d107      	bne.n	8003eba <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003eaa:	883b      	ldrh	r3, [r7, #0]
 8003eac:	0419      	lsls	r1, r3, #16
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68ba      	ldr	r2, [r7, #8]
 8003eb4:	430a      	orrs	r2, r1
 8003eb6:	629a      	str	r2, [r3, #40]	; 0x28
 8003eb8:	e028      	b.n	8003f0c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ec0:	0c1b      	lsrs	r3, r3, #16
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ec8:	2300      	movs	r3, #0
 8003eca:	73fb      	strb	r3, [r7, #15]
 8003ecc:	e00d      	b.n	8003eea <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	7bfb      	ldrb	r3, [r7, #15]
 8003ed4:	3340      	adds	r3, #64	; 0x40
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	0c1b      	lsrs	r3, r3, #16
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	73fb      	strb	r3, [r7, #15]
 8003eea:	7bfa      	ldrb	r2, [r7, #15]
 8003eec:	78fb      	ldrb	r3, [r7, #3]
 8003eee:	3b01      	subs	r3, #1
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d3ec      	bcc.n	8003ece <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ef4:	883b      	ldrh	r3, [r7, #0]
 8003ef6:	0418      	lsls	r0, r3, #16
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6819      	ldr	r1, [r3, #0]
 8003efc:	78fb      	ldrb	r3, [r7, #3]
 8003efe:	3b01      	subs	r3, #1
 8003f00:	68ba      	ldr	r2, [r7, #8]
 8003f02:	4302      	orrs	r2, r0
 8003f04:	3340      	adds	r3, #64	; 0x40
 8003f06:	009b      	lsls	r3, r3, #2
 8003f08:	440b      	add	r3, r1
 8003f0a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003f0c:	2300      	movs	r3, #0
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3714      	adds	r7, #20
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	460b      	mov	r3, r1
 8003f24:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	887a      	ldrh	r2, [r7, #2]
 8003f2c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003f2e:	2300      	movs	r3, #0
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	370c      	adds	r7, #12
 8003f34:	46bd      	mov	sp, r7
 8003f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3a:	4770      	bx	lr

08003f3c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
 8003f44:	460b      	mov	r3, r1
 8003f46:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003f48:	bf00      	nop
 8003f4a:	370c      	adds	r7, #12
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f52:	4770      	bx	lr

08003f54 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b086      	sub	sp, #24
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d101      	bne.n	8003f66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e267      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0301 	and.w	r3, r3, #1
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d075      	beq.n	800405e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f72:	4b88      	ldr	r3, [pc, #544]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d00c      	beq.n	8003f98 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7e:	4b85      	ldr	r3, [pc, #532]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d112      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f8a:	4b82      	ldr	r3, [pc, #520]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f96:	d10b      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f98:	4b7e      	ldr	r3, [pc, #504]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d05b      	beq.n	800405c <HAL_RCC_OscConfig+0x108>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d157      	bne.n	800405c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e242      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fb8:	d106      	bne.n	8003fc8 <HAL_RCC_OscConfig+0x74>
 8003fba:	4b76      	ldr	r3, [pc, #472]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a75      	ldr	r2, [pc, #468]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e01d      	b.n	8004004 <HAL_RCC_OscConfig+0xb0>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fd0:	d10c      	bne.n	8003fec <HAL_RCC_OscConfig+0x98>
 8003fd2:	4b70      	ldr	r3, [pc, #448]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a6f      	ldr	r2, [pc, #444]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	4b6d      	ldr	r3, [pc, #436]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a6c      	ldr	r2, [pc, #432]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe8:	6013      	str	r3, [r2, #0]
 8003fea:	e00b      	b.n	8004004 <HAL_RCC_OscConfig+0xb0>
 8003fec:	4b69      	ldr	r3, [pc, #420]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a68      	ldr	r2, [pc, #416]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003ff2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ff6:	6013      	str	r3, [r2, #0]
 8003ff8:	4b66      	ldr	r3, [pc, #408]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a65      	ldr	r2, [pc, #404]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8003ffe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004002:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d013      	beq.n	8004034 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800400c:	f7fd fdea 	bl	8001be4 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004014:	f7fd fde6 	bl	8001be4 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b64      	cmp	r3, #100	; 0x64
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e207      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	4b5b      	ldr	r3, [pc, #364]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0f0      	beq.n	8004014 <HAL_RCC_OscConfig+0xc0>
 8004032:	e014      	b.n	800405e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004034:	f7fd fdd6 	bl	8001be4 <HAL_GetTick>
 8004038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800403a:	e008      	b.n	800404e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800403c:	f7fd fdd2 	bl	8001be4 <HAL_GetTick>
 8004040:	4602      	mov	r2, r0
 8004042:	693b      	ldr	r3, [r7, #16]
 8004044:	1ad3      	subs	r3, r2, r3
 8004046:	2b64      	cmp	r3, #100	; 0x64
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e1f3      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800404e:	4b51      	ldr	r3, [pc, #324]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f0      	bne.n	800403c <HAL_RCC_OscConfig+0xe8>
 800405a:	e000      	b.n	800405e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800405c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f003 0302 	and.w	r3, r3, #2
 8004066:	2b00      	cmp	r3, #0
 8004068:	d063      	beq.n	8004132 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800406a:	4b4a      	ldr	r3, [pc, #296]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00b      	beq.n	800408e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004076:	4b47      	ldr	r3, [pc, #284]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800407e:	2b08      	cmp	r3, #8
 8004080:	d11c      	bne.n	80040bc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004082:	4b44      	ldr	r3, [pc, #272]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800408a:	2b00      	cmp	r3, #0
 800408c:	d116      	bne.n	80040bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800408e:	4b41      	ldr	r3, [pc, #260]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d005      	beq.n	80040a6 <HAL_RCC_OscConfig+0x152>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d001      	beq.n	80040a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e1c7      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040a6:	4b3b      	ldr	r3, [pc, #236]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	691b      	ldr	r3, [r3, #16]
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	4937      	ldr	r1, [pc, #220]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 80040b6:	4313      	orrs	r3, r2
 80040b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ba:	e03a      	b.n	8004132 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d020      	beq.n	8004106 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040c4:	4b34      	ldr	r3, [pc, #208]	; (8004198 <HAL_RCC_OscConfig+0x244>)
 80040c6:	2201      	movs	r2, #1
 80040c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ca:	f7fd fd8b 	bl	8001be4 <HAL_GetTick>
 80040ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d0:	e008      	b.n	80040e4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040d2:	f7fd fd87 	bl	8001be4 <HAL_GetTick>
 80040d6:	4602      	mov	r2, r0
 80040d8:	693b      	ldr	r3, [r7, #16]
 80040da:	1ad3      	subs	r3, r2, r3
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d901      	bls.n	80040e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040e0:	2303      	movs	r3, #3
 80040e2:	e1a8      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040e4:	4b2b      	ldr	r3, [pc, #172]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f003 0302 	and.w	r3, r3, #2
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d0f0      	beq.n	80040d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f0:	4b28      	ldr	r3, [pc, #160]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	4925      	ldr	r1, [pc, #148]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004100:	4313      	orrs	r3, r2
 8004102:	600b      	str	r3, [r1, #0]
 8004104:	e015      	b.n	8004132 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004106:	4b24      	ldr	r3, [pc, #144]	; (8004198 <HAL_RCC_OscConfig+0x244>)
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800410c:	f7fd fd6a 	bl	8001be4 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004112:	e008      	b.n	8004126 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004114:	f7fd fd66 	bl	8001be4 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	2b02      	cmp	r3, #2
 8004120:	d901      	bls.n	8004126 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004122:	2303      	movs	r3, #3
 8004124:	e187      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004126:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0302 	and.w	r3, r3, #2
 800412e:	2b00      	cmp	r3, #0
 8004130:	d1f0      	bne.n	8004114 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d036      	beq.n	80041ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d016      	beq.n	8004174 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004146:	4b15      	ldr	r3, [pc, #84]	; (800419c <HAL_RCC_OscConfig+0x248>)
 8004148:	2201      	movs	r2, #1
 800414a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800414c:	f7fd fd4a 	bl	8001be4 <HAL_GetTick>
 8004150:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004152:	e008      	b.n	8004166 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004154:	f7fd fd46 	bl	8001be4 <HAL_GetTick>
 8004158:	4602      	mov	r2, r0
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	1ad3      	subs	r3, r2, r3
 800415e:	2b02      	cmp	r3, #2
 8004160:	d901      	bls.n	8004166 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004162:	2303      	movs	r3, #3
 8004164:	e167      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004166:	4b0b      	ldr	r3, [pc, #44]	; (8004194 <HAL_RCC_OscConfig+0x240>)
 8004168:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d0f0      	beq.n	8004154 <HAL_RCC_OscConfig+0x200>
 8004172:	e01b      	b.n	80041ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004174:	4b09      	ldr	r3, [pc, #36]	; (800419c <HAL_RCC_OscConfig+0x248>)
 8004176:	2200      	movs	r2, #0
 8004178:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417a:	f7fd fd33 	bl	8001be4 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004180:	e00e      	b.n	80041a0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004182:	f7fd fd2f 	bl	8001be4 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d907      	bls.n	80041a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e150      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
 8004194:	40023800 	.word	0x40023800
 8004198:	42470000 	.word	0x42470000
 800419c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a0:	4b88      	ldr	r3, [pc, #544]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d1ea      	bne.n	8004182 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0304 	and.w	r3, r3, #4
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 8097 	beq.w	80042e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ba:	2300      	movs	r3, #0
 80041bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041be:	4b81      	ldr	r3, [pc, #516]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d10f      	bne.n	80041ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ca:	2300      	movs	r3, #0
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	4b7d      	ldr	r3, [pc, #500]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	4a7c      	ldr	r2, [pc, #496]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041d8:	6413      	str	r3, [r2, #64]	; 0x40
 80041da:	4b7a      	ldr	r3, [pc, #488]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80041dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e2:	60bb      	str	r3, [r7, #8]
 80041e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041e6:	2301      	movs	r3, #1
 80041e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ea:	4b77      	ldr	r3, [pc, #476]	; (80043c8 <HAL_RCC_OscConfig+0x474>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d118      	bne.n	8004228 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041f6:	4b74      	ldr	r3, [pc, #464]	; (80043c8 <HAL_RCC_OscConfig+0x474>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a73      	ldr	r2, [pc, #460]	; (80043c8 <HAL_RCC_OscConfig+0x474>)
 80041fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004200:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004202:	f7fd fcef 	bl	8001be4 <HAL_GetTick>
 8004206:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004208:	e008      	b.n	800421c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800420a:	f7fd fceb 	bl	8001be4 <HAL_GetTick>
 800420e:	4602      	mov	r2, r0
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	1ad3      	subs	r3, r2, r3
 8004214:	2b02      	cmp	r3, #2
 8004216:	d901      	bls.n	800421c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004218:	2303      	movs	r3, #3
 800421a:	e10c      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800421c:	4b6a      	ldr	r3, [pc, #424]	; (80043c8 <HAL_RCC_OscConfig+0x474>)
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004224:	2b00      	cmp	r3, #0
 8004226:	d0f0      	beq.n	800420a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2b01      	cmp	r3, #1
 800422e:	d106      	bne.n	800423e <HAL_RCC_OscConfig+0x2ea>
 8004230:	4b64      	ldr	r3, [pc, #400]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004232:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004234:	4a63      	ldr	r2, [pc, #396]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004236:	f043 0301 	orr.w	r3, r3, #1
 800423a:	6713      	str	r3, [r2, #112]	; 0x70
 800423c:	e01c      	b.n	8004278 <HAL_RCC_OscConfig+0x324>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	2b05      	cmp	r3, #5
 8004244:	d10c      	bne.n	8004260 <HAL_RCC_OscConfig+0x30c>
 8004246:	4b5f      	ldr	r3, [pc, #380]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	4a5e      	ldr	r2, [pc, #376]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 800424c:	f043 0304 	orr.w	r3, r3, #4
 8004250:	6713      	str	r3, [r2, #112]	; 0x70
 8004252:	4b5c      	ldr	r3, [pc, #368]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004256:	4a5b      	ldr	r2, [pc, #364]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004258:	f043 0301 	orr.w	r3, r3, #1
 800425c:	6713      	str	r3, [r2, #112]	; 0x70
 800425e:	e00b      	b.n	8004278 <HAL_RCC_OscConfig+0x324>
 8004260:	4b58      	ldr	r3, [pc, #352]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	4a57      	ldr	r2, [pc, #348]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004266:	f023 0301 	bic.w	r3, r3, #1
 800426a:	6713      	str	r3, [r2, #112]	; 0x70
 800426c:	4b55      	ldr	r3, [pc, #340]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 800426e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004270:	4a54      	ldr	r2, [pc, #336]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004272:	f023 0304 	bic.w	r3, r3, #4
 8004276:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d015      	beq.n	80042ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004280:	f7fd fcb0 	bl	8001be4 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004286:	e00a      	b.n	800429e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004288:	f7fd fcac 	bl	8001be4 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	f241 3288 	movw	r2, #5000	; 0x1388
 8004296:	4293      	cmp	r3, r2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e0cb      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800429e:	4b49      	ldr	r3, [pc, #292]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d0ee      	beq.n	8004288 <HAL_RCC_OscConfig+0x334>
 80042aa:	e014      	b.n	80042d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ac:	f7fd fc9a 	bl	8001be4 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b4:	f7fd fc96 	bl	8001be4 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0b5      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ca:	4b3e      	ldr	r3, [pc, #248]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d1ee      	bne.n	80042b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042d6:	7dfb      	ldrb	r3, [r7, #23]
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d105      	bne.n	80042e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042dc:	4b39      	ldr	r3, [pc, #228]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e0:	4a38      	ldr	r2, [pc, #224]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	f000 80a1 	beq.w	8004434 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042f2:	4b34      	ldr	r3, [pc, #208]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f003 030c 	and.w	r3, r3, #12
 80042fa:	2b08      	cmp	r3, #8
 80042fc:	d05c      	beq.n	80043b8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d141      	bne.n	800438a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004306:	4b31      	ldr	r3, [pc, #196]	; (80043cc <HAL_RCC_OscConfig+0x478>)
 8004308:	2200      	movs	r2, #0
 800430a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430c:	f7fd fc6a 	bl	8001be4 <HAL_GetTick>
 8004310:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004312:	e008      	b.n	8004326 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004314:	f7fd fc66 	bl	8001be4 <HAL_GetTick>
 8004318:	4602      	mov	r2, r0
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	1ad3      	subs	r3, r2, r3
 800431e:	2b02      	cmp	r3, #2
 8004320:	d901      	bls.n	8004326 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e087      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004326:	4b27      	ldr	r3, [pc, #156]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d1f0      	bne.n	8004314 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	69da      	ldr	r2, [r3, #28]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a1b      	ldr	r3, [r3, #32]
 800433a:	431a      	orrs	r2, r3
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004340:	019b      	lsls	r3, r3, #6
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004348:	085b      	lsrs	r3, r3, #1
 800434a:	3b01      	subs	r3, #1
 800434c:	041b      	lsls	r3, r3, #16
 800434e:	431a      	orrs	r2, r3
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004354:	061b      	lsls	r3, r3, #24
 8004356:	491b      	ldr	r1, [pc, #108]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 8004358:	4313      	orrs	r3, r2
 800435a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800435c:	4b1b      	ldr	r3, [pc, #108]	; (80043cc <HAL_RCC_OscConfig+0x478>)
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004362:	f7fd fc3f 	bl	8001be4 <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800436a:	f7fd fc3b 	bl	8001be4 <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e05c      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800437c:	4b11      	ldr	r3, [pc, #68]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_OscConfig+0x416>
 8004388:	e054      	b.n	8004434 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800438a:	4b10      	ldr	r3, [pc, #64]	; (80043cc <HAL_RCC_OscConfig+0x478>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004390:	f7fd fc28 	bl	8001be4 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004398:	f7fd fc24 	bl	8001be4 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e045      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043aa:	4b06      	ldr	r3, [pc, #24]	; (80043c4 <HAL_RCC_OscConfig+0x470>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1f0      	bne.n	8004398 <HAL_RCC_OscConfig+0x444>
 80043b6:	e03d      	b.n	8004434 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d107      	bne.n	80043d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e038      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
 80043c4:	40023800 	.word	0x40023800
 80043c8:	40007000 	.word	0x40007000
 80043cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043d0:	4b1b      	ldr	r3, [pc, #108]	; (8004440 <HAL_RCC_OscConfig+0x4ec>)
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d028      	beq.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d121      	bne.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d11a      	bne.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043fa:	68fa      	ldr	r2, [r7, #12]
 80043fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004400:	4013      	ands	r3, r2
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004406:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004408:	4293      	cmp	r3, r2
 800440a:	d111      	bne.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004416:	085b      	lsrs	r3, r3, #1
 8004418:	3b01      	subs	r3, #1
 800441a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800441c:	429a      	cmp	r2, r3
 800441e:	d107      	bne.n	8004430 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800442c:	429a      	cmp	r2, r3
 800442e:	d001      	beq.n	8004434 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004434:	2300      	movs	r3, #0
}
 8004436:	4618      	mov	r0, r3
 8004438:	3718      	adds	r7, #24
 800443a:	46bd      	mov	sp, r7
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	40023800 	.word	0x40023800

08004444 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b084      	sub	sp, #16
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	e0cc      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004458:	4b68      	ldr	r3, [pc, #416]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	429a      	cmp	r2, r3
 8004464:	d90c      	bls.n	8004480 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004466:	4b65      	ldr	r3, [pc, #404]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004468:	683a      	ldr	r2, [r7, #0]
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800446e:	4b63      	ldr	r3, [pc, #396]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f003 0307 	and.w	r3, r3, #7
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	429a      	cmp	r2, r3
 800447a:	d001      	beq.n	8004480 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e0b8      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0302 	and.w	r3, r3, #2
 8004488:	2b00      	cmp	r3, #0
 800448a:	d020      	beq.n	80044ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f003 0304 	and.w	r3, r3, #4
 8004494:	2b00      	cmp	r3, #0
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004498:	4b59      	ldr	r3, [pc, #356]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	4a58      	ldr	r2, [pc, #352]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044a2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0308 	and.w	r3, r3, #8
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d005      	beq.n	80044bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044b0:	4b53      	ldr	r3, [pc, #332]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	4a52      	ldr	r2, [pc, #328]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044bc:	4b50      	ldr	r3, [pc, #320]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	494d      	ldr	r1, [pc, #308]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d044      	beq.n	8004564 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d107      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044e2:	4b47      	ldr	r3, [pc, #284]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d119      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e07f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d003      	beq.n	8004502 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044fe:	2b03      	cmp	r3, #3
 8004500:	d107      	bne.n	8004512 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004502:	4b3f      	ldr	r3, [pc, #252]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d109      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e06f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004512:	4b3b      	ldr	r3, [pc, #236]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0302 	and.w	r3, r3, #2
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e067      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004522:	4b37      	ldr	r3, [pc, #220]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f023 0203 	bic.w	r2, r3, #3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	4934      	ldr	r1, [pc, #208]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	4313      	orrs	r3, r2
 8004532:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004534:	f7fd fb56 	bl	8001be4 <HAL_GetTick>
 8004538:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800453a:	e00a      	b.n	8004552 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800453c:	f7fd fb52 	bl	8001be4 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	f241 3288 	movw	r2, #5000	; 0x1388
 800454a:	4293      	cmp	r3, r2
 800454c:	d901      	bls.n	8004552 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e04f      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004552:	4b2b      	ldr	r3, [pc, #172]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 020c 	and.w	r2, r3, #12
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	429a      	cmp	r2, r3
 8004562:	d1eb      	bne.n	800453c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004564:	4b25      	ldr	r3, [pc, #148]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0307 	and.w	r3, r3, #7
 800456c:	683a      	ldr	r2, [r7, #0]
 800456e:	429a      	cmp	r2, r3
 8004570:	d20c      	bcs.n	800458c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004572:	4b22      	ldr	r3, [pc, #136]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	b2d2      	uxtb	r2, r2
 8004578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800457a:	4b20      	ldr	r3, [pc, #128]	; (80045fc <HAL_RCC_ClockConfig+0x1b8>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0307 	and.w	r3, r3, #7
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	429a      	cmp	r2, r3
 8004586:	d001      	beq.n	800458c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e032      	b.n	80045f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004598:	4b19      	ldr	r3, [pc, #100]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	4916      	ldr	r1, [pc, #88]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f003 0308 	and.w	r3, r3, #8
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d009      	beq.n	80045ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045b6:	4b12      	ldr	r3, [pc, #72]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	00db      	lsls	r3, r3, #3
 80045c4:	490e      	ldr	r1, [pc, #56]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ca:	f000 f821 	bl	8004610 <HAL_RCC_GetSysClockFreq>
 80045ce:	4602      	mov	r2, r0
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	091b      	lsrs	r3, r3, #4
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	490a      	ldr	r1, [pc, #40]	; (8004604 <HAL_RCC_ClockConfig+0x1c0>)
 80045dc:	5ccb      	ldrb	r3, [r1, r3]
 80045de:	fa22 f303 	lsr.w	r3, r2, r3
 80045e2:	4a09      	ldr	r2, [pc, #36]	; (8004608 <HAL_RCC_ClockConfig+0x1c4>)
 80045e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045e6:	4b09      	ldr	r3, [pc, #36]	; (800460c <HAL_RCC_ClockConfig+0x1c8>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4618      	mov	r0, r3
 80045ec:	f7fd fab6 	bl	8001b5c <HAL_InitTick>

  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3710      	adds	r7, #16
 80045f6:	46bd      	mov	sp, r7
 80045f8:	bd80      	pop	{r7, pc}
 80045fa:	bf00      	nop
 80045fc:	40023c00 	.word	0x40023c00
 8004600:	40023800 	.word	0x40023800
 8004604:	0800c758 	.word	0x0800c758
 8004608:	20000030 	.word	0x20000030
 800460c:	20000034 	.word	0x20000034

08004610 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004610:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004614:	b090      	sub	sp, #64	; 0x40
 8004616:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	637b      	str	r3, [r7, #52]	; 0x34
 800461c:	2300      	movs	r3, #0
 800461e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004620:	2300      	movs	r3, #0
 8004622:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004624:	2300      	movs	r3, #0
 8004626:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004628:	4b59      	ldr	r3, [pc, #356]	; (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 030c 	and.w	r3, r3, #12
 8004630:	2b08      	cmp	r3, #8
 8004632:	d00d      	beq.n	8004650 <HAL_RCC_GetSysClockFreq+0x40>
 8004634:	2b08      	cmp	r3, #8
 8004636:	f200 80a1 	bhi.w	800477c <HAL_RCC_GetSysClockFreq+0x16c>
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0x34>
 800463e:	2b04      	cmp	r3, #4
 8004640:	d003      	beq.n	800464a <HAL_RCC_GetSysClockFreq+0x3a>
 8004642:	e09b      	b.n	800477c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004644:	4b53      	ldr	r3, [pc, #332]	; (8004794 <HAL_RCC_GetSysClockFreq+0x184>)
 8004646:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004648:	e09b      	b.n	8004782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800464a:	4b53      	ldr	r3, [pc, #332]	; (8004798 <HAL_RCC_GetSysClockFreq+0x188>)
 800464c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800464e:	e098      	b.n	8004782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004650:	4b4f      	ldr	r3, [pc, #316]	; (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004658:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800465a:	4b4d      	ldr	r3, [pc, #308]	; (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d028      	beq.n	80046b8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004666:	4b4a      	ldr	r3, [pc, #296]	; (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	099b      	lsrs	r3, r3, #6
 800466c:	2200      	movs	r2, #0
 800466e:	623b      	str	r3, [r7, #32]
 8004670:	627a      	str	r2, [r7, #36]	; 0x24
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004678:	2100      	movs	r1, #0
 800467a:	4b47      	ldr	r3, [pc, #284]	; (8004798 <HAL_RCC_GetSysClockFreq+0x188>)
 800467c:	fb03 f201 	mul.w	r2, r3, r1
 8004680:	2300      	movs	r3, #0
 8004682:	fb00 f303 	mul.w	r3, r0, r3
 8004686:	4413      	add	r3, r2
 8004688:	4a43      	ldr	r2, [pc, #268]	; (8004798 <HAL_RCC_GetSysClockFreq+0x188>)
 800468a:	fba0 1202 	umull	r1, r2, r0, r2
 800468e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004690:	460a      	mov	r2, r1
 8004692:	62ba      	str	r2, [r7, #40]	; 0x28
 8004694:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004696:	4413      	add	r3, r2
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800469a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800469c:	2200      	movs	r2, #0
 800469e:	61bb      	str	r3, [r7, #24]
 80046a0:	61fa      	str	r2, [r7, #28]
 80046a2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046a6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80046aa:	f7fc fa85 	bl	8000bb8 <__aeabi_uldivmod>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4613      	mov	r3, r2
 80046b4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80046b6:	e053      	b.n	8004760 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046b8:	4b35      	ldr	r3, [pc, #212]	; (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	099b      	lsrs	r3, r3, #6
 80046be:	2200      	movs	r2, #0
 80046c0:	613b      	str	r3, [r7, #16]
 80046c2:	617a      	str	r2, [r7, #20]
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80046ca:	f04f 0b00 	mov.w	fp, #0
 80046ce:	4652      	mov	r2, sl
 80046d0:	465b      	mov	r3, fp
 80046d2:	f04f 0000 	mov.w	r0, #0
 80046d6:	f04f 0100 	mov.w	r1, #0
 80046da:	0159      	lsls	r1, r3, #5
 80046dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046e0:	0150      	lsls	r0, r2, #5
 80046e2:	4602      	mov	r2, r0
 80046e4:	460b      	mov	r3, r1
 80046e6:	ebb2 080a 	subs.w	r8, r2, sl
 80046ea:	eb63 090b 	sbc.w	r9, r3, fp
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80046fa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80046fe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004702:	ebb2 0408 	subs.w	r4, r2, r8
 8004706:	eb63 0509 	sbc.w	r5, r3, r9
 800470a:	f04f 0200 	mov.w	r2, #0
 800470e:	f04f 0300 	mov.w	r3, #0
 8004712:	00eb      	lsls	r3, r5, #3
 8004714:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004718:	00e2      	lsls	r2, r4, #3
 800471a:	4614      	mov	r4, r2
 800471c:	461d      	mov	r5, r3
 800471e:	eb14 030a 	adds.w	r3, r4, sl
 8004722:	603b      	str	r3, [r7, #0]
 8004724:	eb45 030b 	adc.w	r3, r5, fp
 8004728:	607b      	str	r3, [r7, #4]
 800472a:	f04f 0200 	mov.w	r2, #0
 800472e:	f04f 0300 	mov.w	r3, #0
 8004732:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004736:	4629      	mov	r1, r5
 8004738:	028b      	lsls	r3, r1, #10
 800473a:	4621      	mov	r1, r4
 800473c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004740:	4621      	mov	r1, r4
 8004742:	028a      	lsls	r2, r1, #10
 8004744:	4610      	mov	r0, r2
 8004746:	4619      	mov	r1, r3
 8004748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800474a:	2200      	movs	r2, #0
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	60fa      	str	r2, [r7, #12]
 8004750:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004754:	f7fc fa30 	bl	8000bb8 <__aeabi_uldivmod>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4613      	mov	r3, r2
 800475e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004760:	4b0b      	ldr	r3, [pc, #44]	; (8004790 <HAL_RCC_GetSysClockFreq+0x180>)
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	0c1b      	lsrs	r3, r3, #16
 8004766:	f003 0303 	and.w	r3, r3, #3
 800476a:	3301      	adds	r3, #1
 800476c:	005b      	lsls	r3, r3, #1
 800476e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004770:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004774:	fbb2 f3f3 	udiv	r3, r2, r3
 8004778:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800477a:	e002      	b.n	8004782 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800477c:	4b05      	ldr	r3, [pc, #20]	; (8004794 <HAL_RCC_GetSysClockFreq+0x184>)
 800477e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004780:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004784:	4618      	mov	r0, r3
 8004786:	3740      	adds	r7, #64	; 0x40
 8004788:	46bd      	mov	sp, r7
 800478a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800478e:	bf00      	nop
 8004790:	40023800 	.word	0x40023800
 8004794:	00f42400 	.word	0x00f42400
 8004798:	017d7840 	.word	0x017d7840

0800479c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80047a0:	4b03      	ldr	r3, [pc, #12]	; (80047b0 <HAL_RCC_GetHCLKFreq+0x14>)
 80047a2:	681b      	ldr	r3, [r3, #0]
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr
 80047ae:	bf00      	nop
 80047b0:	20000030 	.word	0x20000030

080047b4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d101      	bne.n	80047c6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e041      	b.n	800484a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d106      	bne.n	80047e0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7fd f8fa 	bl	80019d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681a      	ldr	r2, [r3, #0]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	3304      	adds	r3, #4
 80047f0:	4619      	mov	r1, r3
 80047f2:	4610      	mov	r0, r2
 80047f4:	f000 fc54 	bl	80050a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004862:	b2db      	uxtb	r3, r3
 8004864:	2b01      	cmp	r3, #1
 8004866:	d001      	beq.n	800486c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004868:	2301      	movs	r3, #1
 800486a:	e044      	b.n	80048f6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2202      	movs	r2, #2
 8004870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f042 0201 	orr.w	r2, r2, #1
 8004882:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a1e      	ldr	r2, [pc, #120]	; (8004904 <HAL_TIM_Base_Start_IT+0xb0>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d018      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x6c>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004896:	d013      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x6c>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a1a      	ldr	r2, [pc, #104]	; (8004908 <HAL_TIM_Base_Start_IT+0xb4>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d00e      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x6c>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a19      	ldr	r2, [pc, #100]	; (800490c <HAL_TIM_Base_Start_IT+0xb8>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d009      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x6c>
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a17      	ldr	r2, [pc, #92]	; (8004910 <HAL_TIM_Base_Start_IT+0xbc>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d004      	beq.n	80048c0 <HAL_TIM_Base_Start_IT+0x6c>
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4a16      	ldr	r2, [pc, #88]	; (8004914 <HAL_TIM_Base_Start_IT+0xc0>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	d111      	bne.n	80048e4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2b06      	cmp	r3, #6
 80048d0:	d010      	beq.n	80048f4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681a      	ldr	r2, [r3, #0]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f042 0201 	orr.w	r2, r2, #1
 80048e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048e2:	e007      	b.n	80048f4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f042 0201 	orr.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	40010000 	.word	0x40010000
 8004908:	40000400 	.word	0x40000400
 800490c:	40000800 	.word	0x40000800
 8004910:	40000c00 	.word	0x40000c00
 8004914:	40014000 	.word	0x40014000

08004918 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d101      	bne.n	800492a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004926:	2301      	movs	r3, #1
 8004928:	e041      	b.n	80049ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d106      	bne.n	8004944 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f839 	bl	80049b6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2202      	movs	r2, #2
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3304      	adds	r3, #4
 8004954:	4619      	mov	r1, r3
 8004956:	4610      	mov	r0, r2
 8004958:	f000 fba2 	bl	80050a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2201      	movs	r2, #1
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80049b6:	b480      	push	{r7}
 80049b8:	b083      	sub	sp, #12
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80049be:	bf00      	nop
 80049c0:	370c      	adds	r7, #12
 80049c2:	46bd      	mov	sp, r7
 80049c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c8:	4770      	bx	lr
	...

080049cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
 80049d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d109      	bne.n	80049f0 <HAL_TIM_PWM_Start+0x24>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	bf14      	ite	ne
 80049e8:	2301      	movne	r3, #1
 80049ea:	2300      	moveq	r3, #0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	e022      	b.n	8004a36 <HAL_TIM_PWM_Start+0x6a>
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	d109      	bne.n	8004a0a <HAL_TIM_PWM_Start+0x3e>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	bf14      	ite	ne
 8004a02:	2301      	movne	r3, #1
 8004a04:	2300      	moveq	r3, #0
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	e015      	b.n	8004a36 <HAL_TIM_PWM_Start+0x6a>
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	2b08      	cmp	r3, #8
 8004a0e:	d109      	bne.n	8004a24 <HAL_TIM_PWM_Start+0x58>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	bf14      	ite	ne
 8004a1c:	2301      	movne	r3, #1
 8004a1e:	2300      	moveq	r3, #0
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	e008      	b.n	8004a36 <HAL_TIM_PWM_Start+0x6a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	2b01      	cmp	r3, #1
 8004a2e:	bf14      	ite	ne
 8004a30:	2301      	movne	r3, #1
 8004a32:	2300      	moveq	r3, #0
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	e068      	b.n	8004b10 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d104      	bne.n	8004a4e <HAL_TIM_PWM_Start+0x82>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a4c:	e013      	b.n	8004a76 <HAL_TIM_PWM_Start+0xaa>
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d104      	bne.n	8004a5e <HAL_TIM_PWM_Start+0x92>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a5c:	e00b      	b.n	8004a76 <HAL_TIM_PWM_Start+0xaa>
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	2b08      	cmp	r3, #8
 8004a62:	d104      	bne.n	8004a6e <HAL_TIM_PWM_Start+0xa2>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2202      	movs	r2, #2
 8004a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a6c:	e003      	b.n	8004a76 <HAL_TIM_PWM_Start+0xaa>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2202      	movs	r2, #2
 8004a72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	6839      	ldr	r1, [r7, #0]
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f000 fdb4 	bl	80055ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	4a23      	ldr	r2, [pc, #140]	; (8004b18 <HAL_TIM_PWM_Start+0x14c>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d107      	bne.n	8004a9e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004a9c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a1d      	ldr	r2, [pc, #116]	; (8004b18 <HAL_TIM_PWM_Start+0x14c>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d018      	beq.n	8004ada <HAL_TIM_PWM_Start+0x10e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab0:	d013      	beq.n	8004ada <HAL_TIM_PWM_Start+0x10e>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a19      	ldr	r2, [pc, #100]	; (8004b1c <HAL_TIM_PWM_Start+0x150>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d00e      	beq.n	8004ada <HAL_TIM_PWM_Start+0x10e>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a17      	ldr	r2, [pc, #92]	; (8004b20 <HAL_TIM_PWM_Start+0x154>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d009      	beq.n	8004ada <HAL_TIM_PWM_Start+0x10e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a16      	ldr	r2, [pc, #88]	; (8004b24 <HAL_TIM_PWM_Start+0x158>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d004      	beq.n	8004ada <HAL_TIM_PWM_Start+0x10e>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a14      	ldr	r2, [pc, #80]	; (8004b28 <HAL_TIM_PWM_Start+0x15c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d111      	bne.n	8004afe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 0307 	and.w	r3, r3, #7
 8004ae4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2b06      	cmp	r3, #6
 8004aea:	d010      	beq.n	8004b0e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f042 0201 	orr.w	r2, r2, #1
 8004afa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004afc:	e007      	b.n	8004b0e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f042 0201 	orr.w	r2, r2, #1
 8004b0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004b0e:	2300      	movs	r3, #0
}
 8004b10:	4618      	mov	r0, r3
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	40010000 	.word	0x40010000
 8004b1c:	40000400 	.word	0x40000400
 8004b20:	40000800 	.word	0x40000800
 8004b24:	40000c00 	.word	0x40000c00
 8004b28:	40014000 	.word	0x40014000

08004b2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b082      	sub	sp, #8
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d122      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d11b      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0202 	mvn.w	r2, #2
 8004b58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699b      	ldr	r3, [r3, #24]
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 fa77 	bl	8005062 <HAL_TIM_IC_CaptureCallback>
 8004b74:	e005      	b.n	8004b82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 fa69 	bl	800504e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 fa7a 	bl	8005076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0304 	and.w	r3, r3, #4
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d122      	bne.n	8004bdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d11b      	bne.n	8004bdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0204 	mvn.w	r2, #4
 8004bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa4d 	bl	8005062 <HAL_TIM_IC_CaptureCallback>
 8004bc8:	e005      	b.n	8004bd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 fa3f 	bl	800504e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 fa50 	bl	8005076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0308 	and.w	r3, r3, #8
 8004be6:	2b08      	cmp	r3, #8
 8004be8:	d122      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f003 0308 	and.w	r3, r3, #8
 8004bf4:	2b08      	cmp	r3, #8
 8004bf6:	d11b      	bne.n	8004c30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0208 	mvn.w	r2, #8
 8004c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2204      	movs	r2, #4
 8004c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	69db      	ldr	r3, [r3, #28]
 8004c0e:	f003 0303 	and.w	r3, r3, #3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d003      	beq.n	8004c1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f000 fa23 	bl	8005062 <HAL_TIM_IC_CaptureCallback>
 8004c1c:	e005      	b.n	8004c2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f000 fa15 	bl	800504e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 fa26 	bl	8005076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	2b10      	cmp	r3, #16
 8004c3c:	d122      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	68db      	ldr	r3, [r3, #12]
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	2b10      	cmp	r3, #16
 8004c4a:	d11b      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f06f 0210 	mvn.w	r2, #16
 8004c54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2208      	movs	r2, #8
 8004c5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	69db      	ldr	r3, [r3, #28]
 8004c62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d003      	beq.n	8004c72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 f9f9 	bl	8005062 <HAL_TIM_IC_CaptureCallback>
 8004c70:	e005      	b.n	8004c7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f9eb 	bl	800504e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f000 f9fc 	bl	8005076 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2200      	movs	r2, #0
 8004c82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	f003 0301 	and.w	r3, r3, #1
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d10e      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d107      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f06f 0201 	mvn.w	r2, #1
 8004ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f7fc fba2 	bl	80013f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cba:	2b80      	cmp	r3, #128	; 0x80
 8004cbc:	d10e      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cc8:	2b80      	cmp	r3, #128	; 0x80
 8004cca:	d107      	bne.n	8004cdc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fcb7 	bl	800564a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ce6:	2b40      	cmp	r3, #64	; 0x40
 8004ce8:	d10e      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf4:	2b40      	cmp	r3, #64	; 0x40
 8004cf6:	d107      	bne.n	8004d08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f9c1 	bl	800508a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	691b      	ldr	r3, [r3, #16]
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b20      	cmp	r3, #32
 8004d14:	d10e      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68db      	ldr	r3, [r3, #12]
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b20      	cmp	r3, #32
 8004d22:	d107      	bne.n	8004d34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f06f 0220 	mvn.w	r2, #32
 8004d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d2e:	6878      	ldr	r0, [r7, #4]
 8004d30:	f000 fc81 	bl	8005636 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d34:	bf00      	nop
 8004d36:	3708      	adds	r7, #8
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e0ae      	b.n	8004eb8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2b0c      	cmp	r3, #12
 8004d66:	f200 809f 	bhi.w	8004ea8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004d6a:	a201      	add	r2, pc, #4	; (adr r2, 8004d70 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d70:	08004da5 	.word	0x08004da5
 8004d74:	08004ea9 	.word	0x08004ea9
 8004d78:	08004ea9 	.word	0x08004ea9
 8004d7c:	08004ea9 	.word	0x08004ea9
 8004d80:	08004de5 	.word	0x08004de5
 8004d84:	08004ea9 	.word	0x08004ea9
 8004d88:	08004ea9 	.word	0x08004ea9
 8004d8c:	08004ea9 	.word	0x08004ea9
 8004d90:	08004e27 	.word	0x08004e27
 8004d94:	08004ea9 	.word	0x08004ea9
 8004d98:	08004ea9 	.word	0x08004ea9
 8004d9c:	08004ea9 	.word	0x08004ea9
 8004da0:	08004e67 	.word	0x08004e67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	68b9      	ldr	r1, [r7, #8]
 8004daa:	4618      	mov	r0, r3
 8004dac:	f000 f9f8 	bl	80051a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	699a      	ldr	r2, [r3, #24]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f042 0208 	orr.w	r2, r2, #8
 8004dbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0204 	bic.w	r2, r2, #4
 8004dce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6999      	ldr	r1, [r3, #24]
 8004dd6:	68bb      	ldr	r3, [r7, #8]
 8004dd8:	691a      	ldr	r2, [r3, #16]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	430a      	orrs	r2, r1
 8004de0:	619a      	str	r2, [r3, #24]
      break;
 8004de2:	e064      	b.n	8004eae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	68b9      	ldr	r1, [r7, #8]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fa3e 	bl	800526c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	699a      	ldr	r2, [r3, #24]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dfe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	699a      	ldr	r2, [r3, #24]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6999      	ldr	r1, [r3, #24]
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	691b      	ldr	r3, [r3, #16]
 8004e1a:	021a      	lsls	r2, r3, #8
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	619a      	str	r2, [r3, #24]
      break;
 8004e24:	e043      	b.n	8004eae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68b9      	ldr	r1, [r7, #8]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f000 fa89 	bl	8005344 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	69da      	ldr	r2, [r3, #28]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f042 0208 	orr.w	r2, r2, #8
 8004e40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69da      	ldr	r2, [r3, #28]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f022 0204 	bic.w	r2, r2, #4
 8004e50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69d9      	ldr	r1, [r3, #28]
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	691a      	ldr	r2, [r3, #16]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	430a      	orrs	r2, r1
 8004e62:	61da      	str	r2, [r3, #28]
      break;
 8004e64:	e023      	b.n	8004eae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68b9      	ldr	r1, [r7, #8]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f000 fad3 	bl	8005418 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69da      	ldr	r2, [r3, #28]
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	69da      	ldr	r2, [r3, #28]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	69d9      	ldr	r1, [r3, #28]
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	021a      	lsls	r2, r3, #8
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	430a      	orrs	r2, r1
 8004ea4:	61da      	str	r2, [r3, #28]
      break;
 8004ea6:	e002      	b.n	8004eae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004ea8:	2301      	movs	r3, #1
 8004eaa:	75fb      	strb	r3, [r7, #23]
      break;
 8004eac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004eb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3718      	adds	r7, #24
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d101      	bne.n	8004edc <HAL_TIM_ConfigClockSource+0x1c>
 8004ed8:	2302      	movs	r3, #2
 8004eda:	e0b4      	b.n	8005046 <HAL_TIM_ConfigClockSource+0x186>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004efa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	68ba      	ldr	r2, [r7, #8]
 8004f0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f14:	d03e      	beq.n	8004f94 <HAL_TIM_ConfigClockSource+0xd4>
 8004f16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f1a:	f200 8087 	bhi.w	800502c <HAL_TIM_ConfigClockSource+0x16c>
 8004f1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f22:	f000 8086 	beq.w	8005032 <HAL_TIM_ConfigClockSource+0x172>
 8004f26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f2a:	d87f      	bhi.n	800502c <HAL_TIM_ConfigClockSource+0x16c>
 8004f2c:	2b70      	cmp	r3, #112	; 0x70
 8004f2e:	d01a      	beq.n	8004f66 <HAL_TIM_ConfigClockSource+0xa6>
 8004f30:	2b70      	cmp	r3, #112	; 0x70
 8004f32:	d87b      	bhi.n	800502c <HAL_TIM_ConfigClockSource+0x16c>
 8004f34:	2b60      	cmp	r3, #96	; 0x60
 8004f36:	d050      	beq.n	8004fda <HAL_TIM_ConfigClockSource+0x11a>
 8004f38:	2b60      	cmp	r3, #96	; 0x60
 8004f3a:	d877      	bhi.n	800502c <HAL_TIM_ConfigClockSource+0x16c>
 8004f3c:	2b50      	cmp	r3, #80	; 0x50
 8004f3e:	d03c      	beq.n	8004fba <HAL_TIM_ConfigClockSource+0xfa>
 8004f40:	2b50      	cmp	r3, #80	; 0x50
 8004f42:	d873      	bhi.n	800502c <HAL_TIM_ConfigClockSource+0x16c>
 8004f44:	2b40      	cmp	r3, #64	; 0x40
 8004f46:	d058      	beq.n	8004ffa <HAL_TIM_ConfigClockSource+0x13a>
 8004f48:	2b40      	cmp	r3, #64	; 0x40
 8004f4a:	d86f      	bhi.n	800502c <HAL_TIM_ConfigClockSource+0x16c>
 8004f4c:	2b30      	cmp	r3, #48	; 0x30
 8004f4e:	d064      	beq.n	800501a <HAL_TIM_ConfigClockSource+0x15a>
 8004f50:	2b30      	cmp	r3, #48	; 0x30
 8004f52:	d86b      	bhi.n	800502c <HAL_TIM_ConfigClockSource+0x16c>
 8004f54:	2b20      	cmp	r3, #32
 8004f56:	d060      	beq.n	800501a <HAL_TIM_ConfigClockSource+0x15a>
 8004f58:	2b20      	cmp	r3, #32
 8004f5a:	d867      	bhi.n	800502c <HAL_TIM_ConfigClockSource+0x16c>
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d05c      	beq.n	800501a <HAL_TIM_ConfigClockSource+0x15a>
 8004f60:	2b10      	cmp	r3, #16
 8004f62:	d05a      	beq.n	800501a <HAL_TIM_ConfigClockSource+0x15a>
 8004f64:	e062      	b.n	800502c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	6899      	ldr	r1, [r3, #8]
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f000 fb19 	bl	80055ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	609a      	str	r2, [r3, #8]
      break;
 8004f92:	e04f      	b.n	8005034 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6818      	ldr	r0, [r3, #0]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	6899      	ldr	r1, [r3, #8]
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	685a      	ldr	r2, [r3, #4]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	68db      	ldr	r3, [r3, #12]
 8004fa4:	f000 fb02 	bl	80055ac <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	689a      	ldr	r2, [r3, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004fb6:	609a      	str	r2, [r3, #8]
      break;
 8004fb8:	e03c      	b.n	8005034 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6818      	ldr	r0, [r3, #0]
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	6859      	ldr	r1, [r3, #4]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	f000 fa76 	bl	80054b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2150      	movs	r1, #80	; 0x50
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f000 facf 	bl	8005576 <TIM_ITRx_SetConfig>
      break;
 8004fd8:	e02c      	b.n	8005034 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6818      	ldr	r0, [r3, #0]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	6859      	ldr	r1, [r3, #4]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	f000 fa95 	bl	8005516 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2160      	movs	r1, #96	; 0x60
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f000 fabf 	bl	8005576 <TIM_ITRx_SetConfig>
      break;
 8004ff8:	e01c      	b.n	8005034 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6818      	ldr	r0, [r3, #0]
 8004ffe:	683b      	ldr	r3, [r7, #0]
 8005000:	6859      	ldr	r1, [r3, #4]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	461a      	mov	r2, r3
 8005008:	f000 fa56 	bl	80054b8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	2140      	movs	r1, #64	; 0x40
 8005012:	4618      	mov	r0, r3
 8005014:	f000 faaf 	bl	8005576 <TIM_ITRx_SetConfig>
      break;
 8005018:	e00c      	b.n	8005034 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4619      	mov	r1, r3
 8005024:	4610      	mov	r0, r2
 8005026:	f000 faa6 	bl	8005576 <TIM_ITRx_SetConfig>
      break;
 800502a:	e003      	b.n	8005034 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	73fb      	strb	r3, [r7, #15]
      break;
 8005030:	e000      	b.n	8005034 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005032:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005044:	7bfb      	ldrb	r3, [r7, #15]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800504e:	b480      	push	{r7}
 8005050:	b083      	sub	sp, #12
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005056:	bf00      	nop
 8005058:	370c      	adds	r7, #12
 800505a:	46bd      	mov	sp, r7
 800505c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005060:	4770      	bx	lr

08005062 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005062:	b480      	push	{r7}
 8005064:	b083      	sub	sp, #12
 8005066:	af00      	add	r7, sp, #0
 8005068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr

08005076 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005076:	b480      	push	{r7}
 8005078:	b083      	sub	sp, #12
 800507a:	af00      	add	r7, sp, #0
 800507c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800507e:	bf00      	nop
 8005080:	370c      	adds	r7, #12
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr

0800508a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800508a:	b480      	push	{r7}
 800508c:	b083      	sub	sp, #12
 800508e:	af00      	add	r7, sp, #0
 8005090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005092:	bf00      	nop
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
	...

080050a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a34      	ldr	r2, [pc, #208]	; (8005184 <TIM_Base_SetConfig+0xe4>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d00f      	beq.n	80050d8 <TIM_Base_SetConfig+0x38>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050be:	d00b      	beq.n	80050d8 <TIM_Base_SetConfig+0x38>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a31      	ldr	r2, [pc, #196]	; (8005188 <TIM_Base_SetConfig+0xe8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d007      	beq.n	80050d8 <TIM_Base_SetConfig+0x38>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a30      	ldr	r2, [pc, #192]	; (800518c <TIM_Base_SetConfig+0xec>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d003      	beq.n	80050d8 <TIM_Base_SetConfig+0x38>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	4a2f      	ldr	r2, [pc, #188]	; (8005190 <TIM_Base_SetConfig+0xf0>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d108      	bne.n	80050ea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	4a25      	ldr	r2, [pc, #148]	; (8005184 <TIM_Base_SetConfig+0xe4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d01b      	beq.n	800512a <TIM_Base_SetConfig+0x8a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f8:	d017      	beq.n	800512a <TIM_Base_SetConfig+0x8a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a22      	ldr	r2, [pc, #136]	; (8005188 <TIM_Base_SetConfig+0xe8>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d013      	beq.n	800512a <TIM_Base_SetConfig+0x8a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a21      	ldr	r2, [pc, #132]	; (800518c <TIM_Base_SetConfig+0xec>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d00f      	beq.n	800512a <TIM_Base_SetConfig+0x8a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a20      	ldr	r2, [pc, #128]	; (8005190 <TIM_Base_SetConfig+0xf0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d00b      	beq.n	800512a <TIM_Base_SetConfig+0x8a>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a1f      	ldr	r2, [pc, #124]	; (8005194 <TIM_Base_SetConfig+0xf4>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d007      	beq.n	800512a <TIM_Base_SetConfig+0x8a>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a1e      	ldr	r2, [pc, #120]	; (8005198 <TIM_Base_SetConfig+0xf8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d003      	beq.n	800512a <TIM_Base_SetConfig+0x8a>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a1d      	ldr	r2, [pc, #116]	; (800519c <TIM_Base_SetConfig+0xfc>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d108      	bne.n	800513c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005130:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	4313      	orrs	r3, r2
 800513a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	4313      	orrs	r3, r2
 8005148:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	689a      	ldr	r2, [r3, #8]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a08      	ldr	r2, [pc, #32]	; (8005184 <TIM_Base_SetConfig+0xe4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d103      	bne.n	8005170 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	615a      	str	r2, [r3, #20]
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40010000 	.word	0x40010000
 8005188:	40000400 	.word	0x40000400
 800518c:	40000800 	.word	0x40000800
 8005190:	40000c00 	.word	0x40000c00
 8005194:	40014000 	.word	0x40014000
 8005198:	40014400 	.word	0x40014400
 800519c:	40014800 	.word	0x40014800

080051a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	f023 0201 	bic.w	r2, r3, #1
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	685b      	ldr	r3, [r3, #4]
 80051c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f023 0303 	bic.w	r3, r3, #3
 80051d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	68fa      	ldr	r2, [r7, #12]
 80051de:	4313      	orrs	r3, r2
 80051e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	f023 0302 	bic.w	r3, r3, #2
 80051e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a1c      	ldr	r2, [pc, #112]	; (8005268 <TIM_OC1_SetConfig+0xc8>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d10c      	bne.n	8005216 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f023 0308 	bic.w	r3, r3, #8
 8005202:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	68db      	ldr	r3, [r3, #12]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	4313      	orrs	r3, r2
 800520c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f023 0304 	bic.w	r3, r3, #4
 8005214:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	4a13      	ldr	r2, [pc, #76]	; (8005268 <TIM_OC1_SetConfig+0xc8>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d111      	bne.n	8005242 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800521e:	693b      	ldr	r3, [r7, #16]
 8005220:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005224:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800522c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	4313      	orrs	r3, r2
 8005236:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	4313      	orrs	r3, r2
 8005240:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	693a      	ldr	r2, [r7, #16]
 8005246:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685a      	ldr	r2, [r3, #4]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	621a      	str	r2, [r3, #32]
}
 800525c:	bf00      	nop
 800525e:	371c      	adds	r7, #28
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	40010000 	.word	0x40010000

0800526c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800526c:	b480      	push	{r7}
 800526e:	b087      	sub	sp, #28
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
 8005274:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a1b      	ldr	r3, [r3, #32]
 800527a:	f023 0210 	bic.w	r2, r3, #16
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a1b      	ldr	r3, [r3, #32]
 8005286:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800529a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	021b      	lsls	r3, r3, #8
 80052aa:	68fa      	ldr	r2, [r7, #12]
 80052ac:	4313      	orrs	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f023 0320 	bic.w	r3, r3, #32
 80052b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	011b      	lsls	r3, r3, #4
 80052be:	697a      	ldr	r2, [r7, #20]
 80052c0:	4313      	orrs	r3, r2
 80052c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a1e      	ldr	r2, [pc, #120]	; (8005340 <TIM_OC2_SetConfig+0xd4>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d10d      	bne.n	80052e8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	697a      	ldr	r2, [r7, #20]
 80052dc:	4313      	orrs	r3, r2
 80052de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80052e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a15      	ldr	r2, [pc, #84]	; (8005340 <TIM_OC2_SetConfig+0xd4>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d113      	bne.n	8005318 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052f6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052fe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	009b      	lsls	r3, r3, #2
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	4313      	orrs	r3, r2
 800530a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	009b      	lsls	r3, r3, #2
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685a      	ldr	r2, [r3, #4]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	621a      	str	r2, [r3, #32]
}
 8005332:	bf00      	nop
 8005334:	371c      	adds	r7, #28
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40010000 	.word	0x40010000

08005344 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f023 0303 	bic.w	r3, r3, #3
 800537a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	4313      	orrs	r3, r2
 8005384:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800538c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	021b      	lsls	r3, r3, #8
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	4313      	orrs	r3, r2
 8005398:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	4a1d      	ldr	r2, [pc, #116]	; (8005414 <TIM_OC3_SetConfig+0xd0>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d10d      	bne.n	80053be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80053a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	68db      	ldr	r3, [r3, #12]
 80053ae:	021b      	lsls	r3, r3, #8
 80053b0:	697a      	ldr	r2, [r7, #20]
 80053b2:	4313      	orrs	r3, r2
 80053b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80053bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a14      	ldr	r2, [pc, #80]	; (8005414 <TIM_OC3_SetConfig+0xd0>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d113      	bne.n	80053ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	011b      	lsls	r3, r3, #4
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	699b      	ldr	r3, [r3, #24]
 80053e6:	011b      	lsls	r3, r3, #4
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	693a      	ldr	r2, [r7, #16]
 80053f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	685a      	ldr	r2, [r3, #4]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	621a      	str	r2, [r3, #32]
}
 8005408:	bf00      	nop
 800540a:	371c      	adds	r7, #28
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	40010000 	.word	0x40010000

08005418 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b480      	push	{r7}
 800541a:	b087      	sub	sp, #28
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	69db      	ldr	r3, [r3, #28]
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800544e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	021b      	lsls	r3, r3, #8
 8005456:	68fa      	ldr	r2, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005462:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	031b      	lsls	r3, r3, #12
 800546a:	693a      	ldr	r2, [r7, #16]
 800546c:	4313      	orrs	r3, r2
 800546e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a10      	ldr	r2, [pc, #64]	; (80054b4 <TIM_OC4_SetConfig+0x9c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d109      	bne.n	800548c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800547e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	695b      	ldr	r3, [r3, #20]
 8005484:	019b      	lsls	r3, r3, #6
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	4313      	orrs	r3, r2
 800548a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	693a      	ldr	r2, [r7, #16]
 80054a4:	621a      	str	r2, [r3, #32]
}
 80054a6:	bf00      	nop
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr
 80054b2:	bf00      	nop
 80054b4:	40010000 	.word	0x40010000

080054b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	6a1b      	ldr	r3, [r3, #32]
 80054c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	f023 0201 	bic.w	r2, r3, #1
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	699b      	ldr	r3, [r3, #24]
 80054da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	f023 030a 	bic.w	r3, r3, #10
 80054f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	4313      	orrs	r3, r2
 80054fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	621a      	str	r2, [r3, #32]
}
 800550a:	bf00      	nop
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005516:	b480      	push	{r7}
 8005518:	b087      	sub	sp, #28
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	6a1b      	ldr	r3, [r3, #32]
 8005526:	f023 0210 	bic.w	r2, r3, #16
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	699b      	ldr	r3, [r3, #24]
 8005532:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005540:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	031b      	lsls	r3, r3, #12
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005552:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	4313      	orrs	r3, r2
 800555c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	697a      	ldr	r2, [r7, #20]
 8005562:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	621a      	str	r2, [r3, #32]
}
 800556a:	bf00      	nop
 800556c:	371c      	adds	r7, #28
 800556e:	46bd      	mov	sp, r7
 8005570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005574:	4770      	bx	lr

08005576 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005576:	b480      	push	{r7}
 8005578:	b085      	sub	sp, #20
 800557a:	af00      	add	r7, sp, #0
 800557c:	6078      	str	r0, [r7, #4]
 800557e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	689b      	ldr	r3, [r3, #8]
 8005584:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800558c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	4313      	orrs	r3, r2
 8005594:	f043 0307 	orr.w	r3, r3, #7
 8005598:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	68fa      	ldr	r2, [r7, #12]
 800559e:	609a      	str	r2, [r3, #8]
}
 80055a0:	bf00      	nop
 80055a2:	3714      	adds	r7, #20
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	021a      	lsls	r2, r3, #8
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	431a      	orrs	r2, r3
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	697a      	ldr	r2, [r7, #20]
 80055de:	609a      	str	r2, [r3, #8]
}
 80055e0:	bf00      	nop
 80055e2:	371c      	adds	r7, #28
 80055e4:	46bd      	mov	sp, r7
 80055e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ea:	4770      	bx	lr

080055ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	60f8      	str	r0, [r7, #12]
 80055f4:	60b9      	str	r1, [r7, #8]
 80055f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	f003 031f 	and.w	r3, r3, #31
 80055fe:	2201      	movs	r2, #1
 8005600:	fa02 f303 	lsl.w	r3, r2, r3
 8005604:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a1a      	ldr	r2, [r3, #32]
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	43db      	mvns	r3, r3
 800560e:	401a      	ands	r2, r3
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a1a      	ldr	r2, [r3, #32]
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	f003 031f 	and.w	r3, r3, #31
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	fa01 f303 	lsl.w	r3, r1, r3
 8005624:	431a      	orrs	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	621a      	str	r2, [r3, #32]
}
 800562a:	bf00      	nop
 800562c:	371c      	adds	r7, #28
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr

08005636 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005636:	b480      	push	{r7}
 8005638:	b083      	sub	sp, #12
 800563a:	af00      	add	r7, sp, #0
 800563c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800563e:	bf00      	nop
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr

0800564a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800564a:	b480      	push	{r7}
 800564c:	b083      	sub	sp, #12
 800564e:	af00      	add	r7, sp, #0
 8005650:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800565e:	b084      	sub	sp, #16
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	f107 001c 	add.w	r0, r7, #28
 800566c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005672:	2b01      	cmp	r3, #1
 8005674:	d122      	bne.n	80056bc <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800568a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800568e:	687a      	ldr	r2, [r7, #4]
 8005690:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800569e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d105      	bne.n	80056b0 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	68db      	ldr	r3, [r3, #12]
 80056a8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f001 fbed 	bl	8006e90 <USB_CoreReset>
 80056b6:	4603      	mov	r3, r0
 80056b8:	73fb      	strb	r3, [r7, #15]
 80056ba:	e01a      	b.n	80056f2 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f001 fbe1 	bl	8006e90 <USB_CoreReset>
 80056ce:	4603      	mov	r3, r0
 80056d0:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80056d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d106      	bne.n	80056e6 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	639a      	str	r2, [r3, #56]	; 0x38
 80056e4:	e005      	b.n	80056f2 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	2b01      	cmp	r3, #1
 80056f6:	d10b      	bne.n	8005710 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f043 0206 	orr.w	r2, r3, #6
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	f043 0220 	orr.w	r2, r3, #32
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005710:	7bfb      	ldrb	r3, [r7, #15]
}
 8005712:	4618      	mov	r0, r3
 8005714:	3710      	adds	r7, #16
 8005716:	46bd      	mov	sp, r7
 8005718:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800571c:	b004      	add	sp, #16
 800571e:	4770      	bx	lr

08005720 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005720:	b480      	push	{r7}
 8005722:	b087      	sub	sp, #28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	4613      	mov	r3, r2
 800572c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	2b02      	cmp	r3, #2
 8005732:	d165      	bne.n	8005800 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	4a41      	ldr	r2, [pc, #260]	; (800583c <USB_SetTurnaroundTime+0x11c>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d906      	bls.n	800574a <USB_SetTurnaroundTime+0x2a>
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	4a40      	ldr	r2, [pc, #256]	; (8005840 <USB_SetTurnaroundTime+0x120>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d202      	bcs.n	800574a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005744:	230f      	movs	r3, #15
 8005746:	617b      	str	r3, [r7, #20]
 8005748:	e062      	b.n	8005810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	4a3c      	ldr	r2, [pc, #240]	; (8005840 <USB_SetTurnaroundTime+0x120>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d306      	bcc.n	8005760 <USB_SetTurnaroundTime+0x40>
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	4a3b      	ldr	r2, [pc, #236]	; (8005844 <USB_SetTurnaroundTime+0x124>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d202      	bcs.n	8005760 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800575a:	230e      	movs	r3, #14
 800575c:	617b      	str	r3, [r7, #20]
 800575e:	e057      	b.n	8005810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4a38      	ldr	r2, [pc, #224]	; (8005844 <USB_SetTurnaroundTime+0x124>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d306      	bcc.n	8005776 <USB_SetTurnaroundTime+0x56>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4a37      	ldr	r2, [pc, #220]	; (8005848 <USB_SetTurnaroundTime+0x128>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d202      	bcs.n	8005776 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8005770:	230d      	movs	r3, #13
 8005772:	617b      	str	r3, [r7, #20]
 8005774:	e04c      	b.n	8005810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005776:	68bb      	ldr	r3, [r7, #8]
 8005778:	4a33      	ldr	r2, [pc, #204]	; (8005848 <USB_SetTurnaroundTime+0x128>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d306      	bcc.n	800578c <USB_SetTurnaroundTime+0x6c>
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	4a32      	ldr	r2, [pc, #200]	; (800584c <USB_SetTurnaroundTime+0x12c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d802      	bhi.n	800578c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8005786:	230c      	movs	r3, #12
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	e041      	b.n	8005810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	4a2f      	ldr	r2, [pc, #188]	; (800584c <USB_SetTurnaroundTime+0x12c>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d906      	bls.n	80057a2 <USB_SetTurnaroundTime+0x82>
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	4a2e      	ldr	r2, [pc, #184]	; (8005850 <USB_SetTurnaroundTime+0x130>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d802      	bhi.n	80057a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800579c:	230b      	movs	r3, #11
 800579e:	617b      	str	r3, [r7, #20]
 80057a0:	e036      	b.n	8005810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	4a2a      	ldr	r2, [pc, #168]	; (8005850 <USB_SetTurnaroundTime+0x130>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d906      	bls.n	80057b8 <USB_SetTurnaroundTime+0x98>
 80057aa:	68bb      	ldr	r3, [r7, #8]
 80057ac:	4a29      	ldr	r2, [pc, #164]	; (8005854 <USB_SetTurnaroundTime+0x134>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d802      	bhi.n	80057b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80057b2:	230a      	movs	r3, #10
 80057b4:	617b      	str	r3, [r7, #20]
 80057b6:	e02b      	b.n	8005810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80057b8:	68bb      	ldr	r3, [r7, #8]
 80057ba:	4a26      	ldr	r2, [pc, #152]	; (8005854 <USB_SetTurnaroundTime+0x134>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d906      	bls.n	80057ce <USB_SetTurnaroundTime+0xae>
 80057c0:	68bb      	ldr	r3, [r7, #8]
 80057c2:	4a25      	ldr	r2, [pc, #148]	; (8005858 <USB_SetTurnaroundTime+0x138>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d202      	bcs.n	80057ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80057c8:	2309      	movs	r3, #9
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	e020      	b.n	8005810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	4a21      	ldr	r2, [pc, #132]	; (8005858 <USB_SetTurnaroundTime+0x138>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d306      	bcc.n	80057e4 <USB_SetTurnaroundTime+0xc4>
 80057d6:	68bb      	ldr	r3, [r7, #8]
 80057d8:	4a20      	ldr	r2, [pc, #128]	; (800585c <USB_SetTurnaroundTime+0x13c>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d802      	bhi.n	80057e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80057de:	2308      	movs	r3, #8
 80057e0:	617b      	str	r3, [r7, #20]
 80057e2:	e015      	b.n	8005810 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4a1d      	ldr	r2, [pc, #116]	; (800585c <USB_SetTurnaroundTime+0x13c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d906      	bls.n	80057fa <USB_SetTurnaroundTime+0xda>
 80057ec:	68bb      	ldr	r3, [r7, #8]
 80057ee:	4a1c      	ldr	r2, [pc, #112]	; (8005860 <USB_SetTurnaroundTime+0x140>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d202      	bcs.n	80057fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80057f4:	2307      	movs	r3, #7
 80057f6:	617b      	str	r3, [r7, #20]
 80057f8:	e00a      	b.n	8005810 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80057fa:	2306      	movs	r3, #6
 80057fc:	617b      	str	r3, [r7, #20]
 80057fe:	e007      	b.n	8005810 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d102      	bne.n	800580c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005806:	2309      	movs	r3, #9
 8005808:	617b      	str	r3, [r7, #20]
 800580a:	e001      	b.n	8005810 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800580c:	2309      	movs	r3, #9
 800580e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	68da      	ldr	r2, [r3, #12]
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	029b      	lsls	r3, r3, #10
 8005824:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005828:	431a      	orrs	r2, r3
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	371c      	adds	r7, #28
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr
 800583c:	00d8acbf 	.word	0x00d8acbf
 8005840:	00e4e1c0 	.word	0x00e4e1c0
 8005844:	00f42400 	.word	0x00f42400
 8005848:	01067380 	.word	0x01067380
 800584c:	011a499f 	.word	0x011a499f
 8005850:	01312cff 	.word	0x01312cff
 8005854:	014ca43f 	.word	0x014ca43f
 8005858:	016e3600 	.word	0x016e3600
 800585c:	01a6ab1f 	.word	0x01a6ab1f
 8005860:	01e84800 	.word	0x01e84800

08005864 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f043 0201 	orr.w	r2, r3, #1
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr

08005886 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005886:	b480      	push	{r7}
 8005888:	b083      	sub	sp, #12
 800588a:	af00      	add	r7, sp, #0
 800588c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f023 0201 	bic.w	r2, r3, #1
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800589a:	2300      	movs	r3, #0
}
 800589c:	4618      	mov	r0, r3
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr

080058a8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80058c4:	78fb      	ldrb	r3, [r7, #3]
 80058c6:	2b01      	cmp	r3, #1
 80058c8:	d115      	bne.n	80058f6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68db      	ldr	r3, [r3, #12]
 80058ce:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80058d6:	2001      	movs	r0, #1
 80058d8:	f7fc f990 	bl	8001bfc <HAL_Delay>
      ms++;
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	3301      	adds	r3, #1
 80058e0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f001 fa45 	bl	8006d72 <USB_GetMode>
 80058e8:	4603      	mov	r3, r0
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d01e      	beq.n	800592c <USB_SetCurrentMode+0x84>
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b31      	cmp	r3, #49	; 0x31
 80058f2:	d9f0      	bls.n	80058d6 <USB_SetCurrentMode+0x2e>
 80058f4:	e01a      	b.n	800592c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80058f6:	78fb      	ldrb	r3, [r7, #3]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d115      	bne.n	8005928 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	68db      	ldr	r3, [r3, #12]
 8005900:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005908:	2001      	movs	r0, #1
 800590a:	f7fc f977 	bl	8001bfc <HAL_Delay>
      ms++;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	3301      	adds	r3, #1
 8005912:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f001 fa2c 	bl	8006d72 <USB_GetMode>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d005      	beq.n	800592c <USB_SetCurrentMode+0x84>
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2b31      	cmp	r3, #49	; 0x31
 8005924:	d9f0      	bls.n	8005908 <USB_SetCurrentMode+0x60>
 8005926:	e001      	b.n	800592c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005928:	2301      	movs	r3, #1
 800592a:	e005      	b.n	8005938 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2b32      	cmp	r3, #50	; 0x32
 8005930:	d101      	bne.n	8005936 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3710      	adds	r7, #16
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005940:	b084      	sub	sp, #16
 8005942:	b580      	push	{r7, lr}
 8005944:	b086      	sub	sp, #24
 8005946:	af00      	add	r7, sp, #0
 8005948:	6078      	str	r0, [r7, #4]
 800594a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800594e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005952:	2300      	movs	r3, #0
 8005954:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800595a:	2300      	movs	r3, #0
 800595c:	613b      	str	r3, [r7, #16]
 800595e:	e009      	b.n	8005974 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	3340      	adds	r3, #64	; 0x40
 8005966:	009b      	lsls	r3, r3, #2
 8005968:	4413      	add	r3, r2
 800596a:	2200      	movs	r2, #0
 800596c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	3301      	adds	r3, #1
 8005972:	613b      	str	r3, [r7, #16]
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	2b0e      	cmp	r3, #14
 8005978:	d9f2      	bls.n	8005960 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800597a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800597c:	2b00      	cmp	r3, #0
 800597e:	d11c      	bne.n	80059ba <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800598e:	f043 0302 	orr.w	r3, r3, #2
 8005992:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005998:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	639a      	str	r2, [r3, #56]	; 0x38
 80059b8:	e00b      	b.n	80059d2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059be:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ca:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80059d8:	461a      	mov	r2, r3
 80059da:	2300      	movs	r3, #0
 80059dc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059e4:	4619      	mov	r1, r3
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059ec:	461a      	mov	r2, r3
 80059ee:	680b      	ldr	r3, [r1, #0]
 80059f0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80059f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f4:	2b01      	cmp	r3, #1
 80059f6:	d10c      	bne.n	8005a12 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80059f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d104      	bne.n	8005a08 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80059fe:	2100      	movs	r1, #0
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 f965 	bl	8005cd0 <USB_SetDevSpeed>
 8005a06:	e008      	b.n	8005a1a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005a08:	2101      	movs	r1, #1
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 f960 	bl	8005cd0 <USB_SetDevSpeed>
 8005a10:	e003      	b.n	8005a1a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005a12:	2103      	movs	r1, #3
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f95b 	bl	8005cd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005a1a:	2110      	movs	r1, #16
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 f8f3 	bl	8005c08 <USB_FlushTxFifo>
 8005a22:	4603      	mov	r3, r0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d001      	beq.n	8005a2c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005a28:	2301      	movs	r3, #1
 8005a2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 f91f 	bl	8005c70 <USB_FlushRxFifo>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a42:	461a      	mov	r2, r3
 8005a44:	2300      	movs	r3, #0
 8005a46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4e:	461a      	mov	r2, r3
 8005a50:	2300      	movs	r3, #0
 8005a52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a60:	2300      	movs	r3, #0
 8005a62:	613b      	str	r3, [r7, #16]
 8005a64:	e043      	b.n	8005aee <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	015a      	lsls	r2, r3, #5
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	4413      	add	r3, r2
 8005a6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a7c:	d118      	bne.n	8005ab0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d10a      	bne.n	8005a9a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	015a      	lsls	r2, r3, #5
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a90:	461a      	mov	r2, r3
 8005a92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005a96:	6013      	str	r3, [r2, #0]
 8005a98:	e013      	b.n	8005ac2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005a9a:	693b      	ldr	r3, [r7, #16]
 8005a9c:	015a      	lsls	r2, r3, #5
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005aac:	6013      	str	r3, [r2, #0]
 8005aae:	e008      	b.n	8005ac2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005ab0:	693b      	ldr	r3, [r7, #16]
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005abc:	461a      	mov	r2, r3
 8005abe:	2300      	movs	r3, #0
 8005ac0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	015a      	lsls	r2, r3, #5
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	4413      	add	r3, r2
 8005aca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ace:	461a      	mov	r2, r3
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005ae6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005ae8:	693b      	ldr	r3, [r7, #16]
 8005aea:	3301      	adds	r3, #1
 8005aec:	613b      	str	r3, [r7, #16]
 8005aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af0:	693a      	ldr	r2, [r7, #16]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d3b7      	bcc.n	8005a66 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005af6:	2300      	movs	r3, #0
 8005af8:	613b      	str	r3, [r7, #16]
 8005afa:	e043      	b.n	8005b84 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	015a      	lsls	r2, r3, #5
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4413      	add	r3, r2
 8005b04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b12:	d118      	bne.n	8005b46 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005b14:	693b      	ldr	r3, [r7, #16]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d10a      	bne.n	8005b30 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	015a      	lsls	r2, r3, #5
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b26:	461a      	mov	r2, r3
 8005b28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005b2c:	6013      	str	r3, [r2, #0]
 8005b2e:	e013      	b.n	8005b58 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005b30:	693b      	ldr	r3, [r7, #16]
 8005b32:	015a      	lsls	r2, r3, #5
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	4413      	add	r3, r2
 8005b38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b3c:	461a      	mov	r2, r3
 8005b3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005b42:	6013      	str	r3, [r2, #0]
 8005b44:	e008      	b.n	8005b58 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b52:	461a      	mov	r2, r3
 8005b54:	2300      	movs	r3, #0
 8005b56:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b64:	461a      	mov	r2, r3
 8005b66:	2300      	movs	r3, #0
 8005b68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	015a      	lsls	r2, r3, #5
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	4413      	add	r3, r2
 8005b72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b76:	461a      	mov	r2, r3
 8005b78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	3301      	adds	r3, #1
 8005b82:	613b      	str	r3, [r7, #16]
 8005b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d3b7      	bcc.n	8005afc <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b92:	691b      	ldr	r3, [r3, #16]
 8005b94:	68fa      	ldr	r2, [r7, #12]
 8005b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b9e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005bac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d105      	bne.n	8005bc0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	699b      	ldr	r3, [r3, #24]
 8005bb8:	f043 0210 	orr.w	r2, r3, #16
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	699a      	ldr	r2, [r3, #24]
 8005bc4:	4b0f      	ldr	r3, [pc, #60]	; (8005c04 <USB_DevInit+0x2c4>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005bcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d005      	beq.n	8005bde <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	699b      	ldr	r3, [r3, #24]
 8005bd6:	f043 0208 	orr.w	r2, r3, #8
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005bde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d107      	bne.n	8005bf4 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005bec:	f043 0304 	orr.w	r3, r3, #4
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3718      	adds	r7, #24
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c00:	b004      	add	sp, #16
 8005c02:	4770      	bx	lr
 8005c04:	803c3800 	.word	0x803c3800

08005c08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005c12:	2300      	movs	r3, #0
 8005c14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3301      	adds	r3, #1
 8005c1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4a13      	ldr	r2, [pc, #76]	; (8005c6c <USB_FlushTxFifo+0x64>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d901      	bls.n	8005c28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005c24:	2303      	movs	r3, #3
 8005c26:	e01b      	b.n	8005c60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	daf2      	bge.n	8005c16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005c30:	2300      	movs	r3, #0
 8005c32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	019b      	lsls	r3, r3, #6
 8005c38:	f043 0220 	orr.w	r2, r3, #32
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	3301      	adds	r3, #1
 8005c44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	4a08      	ldr	r2, [pc, #32]	; (8005c6c <USB_FlushTxFifo+0x64>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d901      	bls.n	8005c52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005c4e:	2303      	movs	r3, #3
 8005c50:	e006      	b.n	8005c60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b20      	cmp	r3, #32
 8005c5c:	d0f0      	beq.n	8005c40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	00030d40 	.word	0x00030d40

08005c70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b085      	sub	sp, #20
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	4a11      	ldr	r2, [pc, #68]	; (8005ccc <USB_FlushRxFifo+0x5c>)
 8005c86:	4293      	cmp	r3, r2
 8005c88:	d901      	bls.n	8005c8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	e018      	b.n	8005cc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	691b      	ldr	r3, [r3, #16]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	daf2      	bge.n	8005c7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2210      	movs	r2, #16
 8005c9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	4a08      	ldr	r2, [pc, #32]	; (8005ccc <USB_FlushRxFifo+0x5c>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d901      	bls.n	8005cb2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e006      	b.n	8005cc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	691b      	ldr	r3, [r3, #16]
 8005cb6:	f003 0310 	and.w	r3, r3, #16
 8005cba:	2b10      	cmp	r3, #16
 8005cbc:	d0f0      	beq.n	8005ca0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005cbe:	2300      	movs	r3, #0
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	3714      	adds	r7, #20
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	00030d40 	.word	0x00030d40

08005cd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005cd0:	b480      	push	{r7}
 8005cd2:	b085      	sub	sp, #20
 8005cd4:	af00      	add	r7, sp, #0
 8005cd6:	6078      	str	r0, [r7, #4]
 8005cd8:	460b      	mov	r3, r1
 8005cda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ce6:	681a      	ldr	r2, [r3, #0]
 8005ce8:	78fb      	ldrb	r3, [r7, #3]
 8005cea:	68f9      	ldr	r1, [r7, #12]
 8005cec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	3714      	adds	r7, #20
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b087      	sub	sp, #28
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d14:	689b      	ldr	r3, [r3, #8]
 8005d16:	f003 0306 	and.w	r3, r3, #6
 8005d1a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d102      	bne.n	8005d28 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005d22:	2300      	movs	r3, #0
 8005d24:	75fb      	strb	r3, [r7, #23]
 8005d26:	e00a      	b.n	8005d3e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2b02      	cmp	r3, #2
 8005d2c:	d002      	beq.n	8005d34 <USB_GetDevSpeed+0x32>
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2b06      	cmp	r3, #6
 8005d32:	d102      	bne.n	8005d3a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005d34:	2302      	movs	r3, #2
 8005d36:	75fb      	strb	r3, [r7, #23]
 8005d38:	e001      	b.n	8005d3e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005d3a:	230f      	movs	r3, #15
 8005d3c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005d3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	371c      	adds	r7, #28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b085      	sub	sp, #20
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
 8005d54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005d5a:	683b      	ldr	r3, [r7, #0]
 8005d5c:	781b      	ldrb	r3, [r3, #0]
 8005d5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	785b      	ldrb	r3, [r3, #1]
 8005d64:	2b01      	cmp	r3, #1
 8005d66:	d13a      	bne.n	8005dde <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6e:	69da      	ldr	r2, [r3, #28]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	781b      	ldrb	r3, [r3, #0]
 8005d74:	f003 030f 	and.w	r3, r3, #15
 8005d78:	2101      	movs	r1, #1
 8005d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	68f9      	ldr	r1, [r7, #12]
 8005d82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d86:	4313      	orrs	r3, r2
 8005d88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	015a      	lsls	r2, r3, #5
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4413      	add	r3, r2
 8005d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d155      	bne.n	8005e4c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	015a      	lsls	r2, r3, #5
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	791b      	ldrb	r3, [r3, #4]
 8005dba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005dbc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	059b      	lsls	r3, r3, #22
 8005dc2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	68ba      	ldr	r2, [r7, #8]
 8005dc8:	0151      	lsls	r1, r2, #5
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	440a      	add	r2, r1
 8005dce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005dda:	6013      	str	r3, [r2, #0]
 8005ddc:	e036      	b.n	8005e4c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de4:	69da      	ldr	r2, [r3, #28]
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	781b      	ldrb	r3, [r3, #0]
 8005dea:	f003 030f 	and.w	r3, r3, #15
 8005dee:	2101      	movs	r1, #1
 8005df0:	fa01 f303 	lsl.w	r3, r1, r3
 8005df4:	041b      	lsls	r3, r3, #16
 8005df6:	68f9      	ldr	r1, [r7, #12]
 8005df8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	015a      	lsls	r2, r3, #5
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4413      	add	r3, r2
 8005e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d11a      	bne.n	8005e4c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	015a      	lsls	r2, r3, #5
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	791b      	ldrb	r3, [r3, #4]
 8005e30:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005e32:	430b      	orrs	r3, r1
 8005e34:	4313      	orrs	r3, r2
 8005e36:	68ba      	ldr	r2, [r7, #8]
 8005e38:	0151      	lsls	r1, r2, #5
 8005e3a:	68fa      	ldr	r2, [r7, #12]
 8005e3c:	440a      	add	r2, r1
 8005e3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005e4a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005e4c:	2300      	movs	r3, #0
}
 8005e4e:	4618      	mov	r0, r3
 8005e50:	3714      	adds	r7, #20
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr
	...

08005e5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e5c:	b480      	push	{r7}
 8005e5e:	b085      	sub	sp, #20
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
 8005e64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	781b      	ldrb	r3, [r3, #0]
 8005e6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	785b      	ldrb	r3, [r3, #1]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d161      	bne.n	8005f3c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	015a      	lsls	r2, r3, #5
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	4413      	add	r3, r2
 8005e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e8e:	d11f      	bne.n	8005ed0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	015a      	lsls	r2, r3, #5
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4413      	add	r3, r2
 8005e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	68ba      	ldr	r2, [r7, #8]
 8005ea0:	0151      	lsls	r1, r2, #5
 8005ea2:	68fa      	ldr	r2, [r7, #12]
 8005ea4:	440a      	add	r2, r1
 8005ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eaa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005eae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	015a      	lsls	r2, r3, #5
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	4413      	add	r3, r2
 8005eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	0151      	lsls	r1, r2, #5
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	440a      	add	r2, r1
 8005ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ece:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ed6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	f003 030f 	and.w	r3, r3, #15
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee6:	b29b      	uxth	r3, r3
 8005ee8:	43db      	mvns	r3, r3
 8005eea:	68f9      	ldr	r1, [r7, #12]
 8005eec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ef0:	4013      	ands	r3, r2
 8005ef2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005efa:	69da      	ldr	r2, [r3, #28]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	f003 030f 	and.w	r3, r3, #15
 8005f04:	2101      	movs	r1, #1
 8005f06:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0a:	b29b      	uxth	r3, r3
 8005f0c:	43db      	mvns	r3, r3
 8005f0e:	68f9      	ldr	r1, [r7, #12]
 8005f10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f14:	4013      	ands	r3, r2
 8005f16:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	015a      	lsls	r2, r3, #5
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	4413      	add	r3, r2
 8005f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	0159      	lsls	r1, r3, #5
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	440b      	add	r3, r1
 8005f2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f32:	4619      	mov	r1, r3
 8005f34:	4b35      	ldr	r3, [pc, #212]	; (800600c <USB_DeactivateEndpoint+0x1b0>)
 8005f36:	4013      	ands	r3, r2
 8005f38:	600b      	str	r3, [r1, #0]
 8005f3a:	e060      	b.n	8005ffe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f52:	d11f      	bne.n	8005f94 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	015a      	lsls	r2, r3, #5
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	68ba      	ldr	r2, [r7, #8]
 8005f64:	0151      	lsls	r1, r2, #5
 8005f66:	68fa      	ldr	r2, [r7, #12]
 8005f68:	440a      	add	r2, r1
 8005f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f72:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	015a      	lsls	r2, r3, #5
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68ba      	ldr	r2, [r7, #8]
 8005f84:	0151      	lsls	r1, r2, #5
 8005f86:	68fa      	ldr	r2, [r7, #12]
 8005f88:	440a      	add	r2, r1
 8005f8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	781b      	ldrb	r3, [r3, #0]
 8005fa0:	f003 030f 	and.w	r3, r3, #15
 8005fa4:	2101      	movs	r1, #1
 8005fa6:	fa01 f303 	lsl.w	r3, r1, r3
 8005faa:	041b      	lsls	r3, r3, #16
 8005fac:	43db      	mvns	r3, r3
 8005fae:	68f9      	ldr	r1, [r7, #12]
 8005fb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	781b      	ldrb	r3, [r3, #0]
 8005fc4:	f003 030f 	and.w	r3, r3, #15
 8005fc8:	2101      	movs	r1, #1
 8005fca:	fa01 f303 	lsl.w	r3, r1, r3
 8005fce:	041b      	lsls	r3, r3, #16
 8005fd0:	43db      	mvns	r3, r3
 8005fd2:	68f9      	ldr	r1, [r7, #12]
 8005fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fd8:	4013      	ands	r3, r2
 8005fda:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	015a      	lsls	r2, r3, #5
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	0159      	lsls	r1, r3, #5
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	440b      	add	r3, r1
 8005ff2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	4b05      	ldr	r3, [pc, #20]	; (8006010 <USB_DeactivateEndpoint+0x1b4>)
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3714      	adds	r7, #20
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr
 800600c:	ec337800 	.word	0xec337800
 8006010:	eff37800 	.word	0xeff37800

08006014 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b08a      	sub	sp, #40	; 0x28
 8006018:	af02      	add	r7, sp, #8
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	4613      	mov	r3, r2
 8006020:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006026:	68bb      	ldr	r3, [r7, #8]
 8006028:	781b      	ldrb	r3, [r3, #0]
 800602a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	785b      	ldrb	r3, [r3, #1]
 8006030:	2b01      	cmp	r3, #1
 8006032:	f040 815c 	bne.w	80062ee <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	699b      	ldr	r3, [r3, #24]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d132      	bne.n	80060a4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	015a      	lsls	r2, r3, #5
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	4413      	add	r3, r2
 8006046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	69ba      	ldr	r2, [r7, #24]
 800604e:	0151      	lsls	r1, r2, #5
 8006050:	69fa      	ldr	r2, [r7, #28]
 8006052:	440a      	add	r2, r1
 8006054:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006058:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800605c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006060:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	015a      	lsls	r2, r3, #5
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	4413      	add	r3, r2
 800606a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800606e:	691b      	ldr	r3, [r3, #16]
 8006070:	69ba      	ldr	r2, [r7, #24]
 8006072:	0151      	lsls	r1, r2, #5
 8006074:	69fa      	ldr	r2, [r7, #28]
 8006076:	440a      	add	r2, r1
 8006078:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800607c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006080:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	015a      	lsls	r2, r3, #5
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	4413      	add	r3, r2
 800608a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800608e:	691b      	ldr	r3, [r3, #16]
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	0151      	lsls	r1, r2, #5
 8006094:	69fa      	ldr	r2, [r7, #28]
 8006096:	440a      	add	r2, r1
 8006098:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800609c:	0cdb      	lsrs	r3, r3, #19
 800609e:	04db      	lsls	r3, r3, #19
 80060a0:	6113      	str	r3, [r2, #16]
 80060a2:	e074      	b.n	800618e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	015a      	lsls	r2, r3, #5
 80060a8:	69fb      	ldr	r3, [r7, #28]
 80060aa:	4413      	add	r3, r2
 80060ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	69ba      	ldr	r2, [r7, #24]
 80060b4:	0151      	lsls	r1, r2, #5
 80060b6:	69fa      	ldr	r2, [r7, #28]
 80060b8:	440a      	add	r2, r1
 80060ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060be:	0cdb      	lsrs	r3, r3, #19
 80060c0:	04db      	lsls	r3, r3, #19
 80060c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80060c4:	69bb      	ldr	r3, [r7, #24]
 80060c6:	015a      	lsls	r2, r3, #5
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	4413      	add	r3, r2
 80060cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	0151      	lsls	r1, r2, #5
 80060d6:	69fa      	ldr	r2, [r7, #28]
 80060d8:	440a      	add	r2, r1
 80060da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80060de:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80060e2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80060e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80060e8:	69bb      	ldr	r3, [r7, #24]
 80060ea:	015a      	lsls	r2, r3, #5
 80060ec:	69fb      	ldr	r3, [r7, #28]
 80060ee:	4413      	add	r3, r2
 80060f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80060f4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	6999      	ldr	r1, [r3, #24]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	68db      	ldr	r3, [r3, #12]
 80060fe:	440b      	add	r3, r1
 8006100:	1e59      	subs	r1, r3, #1
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	fbb1 f3f3 	udiv	r3, r1, r3
 800610a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800610c:	4b9d      	ldr	r3, [pc, #628]	; (8006384 <USB_EPStartXfer+0x370>)
 800610e:	400b      	ands	r3, r1
 8006110:	69b9      	ldr	r1, [r7, #24]
 8006112:	0148      	lsls	r0, r1, #5
 8006114:	69f9      	ldr	r1, [r7, #28]
 8006116:	4401      	add	r1, r0
 8006118:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800611c:	4313      	orrs	r3, r2
 800611e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	015a      	lsls	r2, r3, #5
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	4413      	add	r3, r2
 8006128:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800612c:	691a      	ldr	r2, [r3, #16]
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	699b      	ldr	r3, [r3, #24]
 8006132:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006136:	69b9      	ldr	r1, [r7, #24]
 8006138:	0148      	lsls	r0, r1, #5
 800613a:	69f9      	ldr	r1, [r7, #28]
 800613c:	4401      	add	r1, r0
 800613e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006142:	4313      	orrs	r3, r2
 8006144:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	791b      	ldrb	r3, [r3, #4]
 800614a:	2b01      	cmp	r3, #1
 800614c:	d11f      	bne.n	800618e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800614e:	69bb      	ldr	r3, [r7, #24]
 8006150:	015a      	lsls	r2, r3, #5
 8006152:	69fb      	ldr	r3, [r7, #28]
 8006154:	4413      	add	r3, r2
 8006156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800615a:	691b      	ldr	r3, [r3, #16]
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	0151      	lsls	r1, r2, #5
 8006160:	69fa      	ldr	r2, [r7, #28]
 8006162:	440a      	add	r2, r1
 8006164:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006168:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800616c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	015a      	lsls	r2, r3, #5
 8006172:	69fb      	ldr	r3, [r7, #28]
 8006174:	4413      	add	r3, r2
 8006176:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	0151      	lsls	r1, r2, #5
 8006180:	69fa      	ldr	r2, [r7, #28]
 8006182:	440a      	add	r2, r1
 8006184:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006188:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800618c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800618e:	79fb      	ldrb	r3, [r7, #7]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d14b      	bne.n	800622c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	695b      	ldr	r3, [r3, #20]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d009      	beq.n	80061b0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	015a      	lsls	r2, r3, #5
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	4413      	add	r3, r2
 80061a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061a8:	461a      	mov	r2, r3
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	695b      	ldr	r3, [r3, #20]
 80061ae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	791b      	ldrb	r3, [r3, #4]
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d128      	bne.n	800620a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d110      	bne.n	80061ea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	015a      	lsls	r2, r3, #5
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	4413      	add	r3, r2
 80061d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	0151      	lsls	r1, r2, #5
 80061da:	69fa      	ldr	r2, [r7, #28]
 80061dc:	440a      	add	r2, r1
 80061de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80061e6:	6013      	str	r3, [r2, #0]
 80061e8:	e00f      	b.n	800620a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80061ea:	69bb      	ldr	r3, [r7, #24]
 80061ec:	015a      	lsls	r2, r3, #5
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	4413      	add	r3, r2
 80061f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	69ba      	ldr	r2, [r7, #24]
 80061fa:	0151      	lsls	r1, r2, #5
 80061fc:	69fa      	ldr	r2, [r7, #28]
 80061fe:	440a      	add	r2, r1
 8006200:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006208:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	015a      	lsls	r2, r3, #5
 800620e:	69fb      	ldr	r3, [r7, #28]
 8006210:	4413      	add	r3, r2
 8006212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	0151      	lsls	r1, r2, #5
 800621c:	69fa      	ldr	r2, [r7, #28]
 800621e:	440a      	add	r2, r1
 8006220:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006224:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006228:	6013      	str	r3, [r2, #0]
 800622a:	e133      	b.n	8006494 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800622c:	69bb      	ldr	r3, [r7, #24]
 800622e:	015a      	lsls	r2, r3, #5
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	4413      	add	r3, r2
 8006234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69ba      	ldr	r2, [r7, #24]
 800623c:	0151      	lsls	r1, r2, #5
 800623e:	69fa      	ldr	r2, [r7, #28]
 8006240:	440a      	add	r2, r1
 8006242:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006246:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800624a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	791b      	ldrb	r3, [r3, #4]
 8006250:	2b01      	cmp	r3, #1
 8006252:	d015      	beq.n	8006280 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	699b      	ldr	r3, [r3, #24]
 8006258:	2b00      	cmp	r3, #0
 800625a:	f000 811b 	beq.w	8006494 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006264:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	f003 030f 	and.w	r3, r3, #15
 800626e:	2101      	movs	r1, #1
 8006270:	fa01 f303 	lsl.w	r3, r1, r3
 8006274:	69f9      	ldr	r1, [r7, #28]
 8006276:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800627a:	4313      	orrs	r3, r2
 800627c:	634b      	str	r3, [r1, #52]	; 0x34
 800627e:	e109      	b.n	8006494 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628c:	2b00      	cmp	r3, #0
 800628e:	d110      	bne.n	80062b2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	015a      	lsls	r2, r3, #5
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	4413      	add	r3, r2
 8006298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69ba      	ldr	r2, [r7, #24]
 80062a0:	0151      	lsls	r1, r2, #5
 80062a2:	69fa      	ldr	r2, [r7, #28]
 80062a4:	440a      	add	r2, r1
 80062a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062ae:	6013      	str	r3, [r2, #0]
 80062b0:	e00f      	b.n	80062d2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80062b2:	69bb      	ldr	r3, [r7, #24]
 80062b4:	015a      	lsls	r2, r3, #5
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	4413      	add	r3, r2
 80062ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	69ba      	ldr	r2, [r7, #24]
 80062c2:	0151      	lsls	r1, r2, #5
 80062c4:	69fa      	ldr	r2, [r7, #28]
 80062c6:	440a      	add	r2, r1
 80062c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80062d0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	6919      	ldr	r1, [r3, #16]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	781a      	ldrb	r2, [r3, #0]
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	699b      	ldr	r3, [r3, #24]
 80062de:	b298      	uxth	r0, r3
 80062e0:	79fb      	ldrb	r3, [r7, #7]
 80062e2:	9300      	str	r3, [sp, #0]
 80062e4:	4603      	mov	r3, r0
 80062e6:	68f8      	ldr	r0, [r7, #12]
 80062e8:	f000 fade 	bl	80068a8 <USB_WritePacket>
 80062ec:	e0d2      	b.n	8006494 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80062ee:	69bb      	ldr	r3, [r7, #24]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062fa:	691b      	ldr	r3, [r3, #16]
 80062fc:	69ba      	ldr	r2, [r7, #24]
 80062fe:	0151      	lsls	r1, r2, #5
 8006300:	69fa      	ldr	r2, [r7, #28]
 8006302:	440a      	add	r2, r1
 8006304:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006308:	0cdb      	lsrs	r3, r3, #19
 800630a:	04db      	lsls	r3, r3, #19
 800630c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	015a      	lsls	r2, r3, #5
 8006312:	69fb      	ldr	r3, [r7, #28]
 8006314:	4413      	add	r3, r2
 8006316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800631a:	691b      	ldr	r3, [r3, #16]
 800631c:	69ba      	ldr	r2, [r7, #24]
 800631e:	0151      	lsls	r1, r2, #5
 8006320:	69fa      	ldr	r2, [r7, #28]
 8006322:	440a      	add	r2, r1
 8006324:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006328:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800632c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006330:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	699b      	ldr	r3, [r3, #24]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d126      	bne.n	8006388 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800633a:	69bb      	ldr	r3, [r7, #24]
 800633c:	015a      	lsls	r2, r3, #5
 800633e:	69fb      	ldr	r3, [r7, #28]
 8006340:	4413      	add	r3, r2
 8006342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006346:	691a      	ldr	r2, [r3, #16]
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006350:	69b9      	ldr	r1, [r7, #24]
 8006352:	0148      	lsls	r0, r1, #5
 8006354:	69f9      	ldr	r1, [r7, #28]
 8006356:	4401      	add	r1, r0
 8006358:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800635c:	4313      	orrs	r3, r2
 800635e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	015a      	lsls	r2, r3, #5
 8006364:	69fb      	ldr	r3, [r7, #28]
 8006366:	4413      	add	r3, r2
 8006368:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	0151      	lsls	r1, r2, #5
 8006372:	69fa      	ldr	r2, [r7, #28]
 8006374:	440a      	add	r2, r1
 8006376:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800637a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800637e:	6113      	str	r3, [r2, #16]
 8006380:	e03a      	b.n	80063f8 <USB_EPStartXfer+0x3e4>
 8006382:	bf00      	nop
 8006384:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	699a      	ldr	r2, [r3, #24]
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	4413      	add	r3, r2
 8006392:	1e5a      	subs	r2, r3, #1
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	68db      	ldr	r3, [r3, #12]
 8006398:	fbb2 f3f3 	udiv	r3, r2, r3
 800639c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	8afa      	ldrh	r2, [r7, #22]
 80063a4:	fb03 f202 	mul.w	r2, r3, r2
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b8:	691a      	ldr	r2, [r3, #16]
 80063ba:	8afb      	ldrh	r3, [r7, #22]
 80063bc:	04d9      	lsls	r1, r3, #19
 80063be:	4b38      	ldr	r3, [pc, #224]	; (80064a0 <USB_EPStartXfer+0x48c>)
 80063c0:	400b      	ands	r3, r1
 80063c2:	69b9      	ldr	r1, [r7, #24]
 80063c4:	0148      	lsls	r0, r1, #5
 80063c6:	69f9      	ldr	r1, [r7, #28]
 80063c8:	4401      	add	r1, r0
 80063ca:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063ce:	4313      	orrs	r3, r2
 80063d0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80063d2:	69bb      	ldr	r3, [r7, #24]
 80063d4:	015a      	lsls	r2, r3, #5
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	4413      	add	r3, r2
 80063da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063de:	691a      	ldr	r2, [r3, #16]
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063e8:	69b9      	ldr	r1, [r7, #24]
 80063ea:	0148      	lsls	r0, r1, #5
 80063ec:	69f9      	ldr	r1, [r7, #28]
 80063ee:	4401      	add	r1, r0
 80063f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80063f4:	4313      	orrs	r3, r2
 80063f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80063f8:	79fb      	ldrb	r3, [r7, #7]
 80063fa:	2b01      	cmp	r3, #1
 80063fc:	d10d      	bne.n	800641a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d009      	beq.n	800641a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006406:	68bb      	ldr	r3, [r7, #8]
 8006408:	6919      	ldr	r1, [r3, #16]
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006416:	460a      	mov	r2, r1
 8006418:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	791b      	ldrb	r3, [r3, #4]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d128      	bne.n	8006474 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006428:	689b      	ldr	r3, [r3, #8]
 800642a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800642e:	2b00      	cmp	r3, #0
 8006430:	d110      	bne.n	8006454 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	015a      	lsls	r2, r3, #5
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	4413      	add	r3, r2
 800643a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	69ba      	ldr	r2, [r7, #24]
 8006442:	0151      	lsls	r1, r2, #5
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	440a      	add	r2, r1
 8006448:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800644c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006450:	6013      	str	r3, [r2, #0]
 8006452:	e00f      	b.n	8006474 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	4413      	add	r3, r2
 800645c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	0151      	lsls	r1, r2, #5
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	440a      	add	r2, r1
 800646a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800646e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006472:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	4413      	add	r3, r2
 800647c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	69fa      	ldr	r2, [r7, #28]
 8006488:	440a      	add	r2, r1
 800648a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800648e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006492:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006494:	2300      	movs	r3, #0
}
 8006496:	4618      	mov	r0, r3
 8006498:	3720      	adds	r7, #32
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	1ff80000 	.word	0x1ff80000

080064a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b087      	sub	sp, #28
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	60f8      	str	r0, [r7, #12]
 80064ac:	60b9      	str	r1, [r7, #8]
 80064ae:	4613      	mov	r3, r2
 80064b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	785b      	ldrb	r3, [r3, #1]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	f040 80ce 	bne.w	8006662 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d132      	bne.n	8006534 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	697b      	ldr	r3, [r7, #20]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	693a      	ldr	r2, [r7, #16]
 80064de:	0151      	lsls	r1, r2, #5
 80064e0:	697a      	ldr	r2, [r7, #20]
 80064e2:	440a      	add	r2, r1
 80064e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064e8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80064ec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80064f0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064fe:	691b      	ldr	r3, [r3, #16]
 8006500:	693a      	ldr	r2, [r7, #16]
 8006502:	0151      	lsls	r1, r2, #5
 8006504:	697a      	ldr	r2, [r7, #20]
 8006506:	440a      	add	r2, r1
 8006508:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800650c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006510:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	0151      	lsls	r1, r2, #5
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	440a      	add	r2, r1
 8006528:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800652c:	0cdb      	lsrs	r3, r3, #19
 800652e:	04db      	lsls	r3, r3, #19
 8006530:	6113      	str	r3, [r2, #16]
 8006532:	e04e      	b.n	80065d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	015a      	lsls	r2, r3, #5
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	4413      	add	r3, r2
 800653c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	0151      	lsls	r1, r2, #5
 8006546:	697a      	ldr	r2, [r7, #20]
 8006548:	440a      	add	r2, r1
 800654a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800654e:	0cdb      	lsrs	r3, r3, #19
 8006550:	04db      	lsls	r3, r3, #19
 8006552:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	0151      	lsls	r1, r2, #5
 8006566:	697a      	ldr	r2, [r7, #20]
 8006568:	440a      	add	r2, r1
 800656a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800656e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006572:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006576:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	699a      	ldr	r2, [r3, #24]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	68db      	ldr	r3, [r3, #12]
 8006580:	429a      	cmp	r2, r3
 8006582:	d903      	bls.n	800658c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	015a      	lsls	r2, r3, #5
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	4413      	add	r3, r2
 8006594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	0151      	lsls	r1, r2, #5
 800659e:	697a      	ldr	r2, [r7, #20]
 80065a0:	440a      	add	r2, r1
 80065a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80065a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	015a      	lsls	r2, r3, #5
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	4413      	add	r3, r2
 80065b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065b8:	691a      	ldr	r2, [r3, #16]
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80065c2:	6939      	ldr	r1, [r7, #16]
 80065c4:	0148      	lsls	r0, r1, #5
 80065c6:	6979      	ldr	r1, [r7, #20]
 80065c8:	4401      	add	r1, r0
 80065ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80065ce:	4313      	orrs	r3, r2
 80065d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80065d2:	79fb      	ldrb	r3, [r7, #7]
 80065d4:	2b01      	cmp	r3, #1
 80065d6:	d11e      	bne.n	8006616 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	695b      	ldr	r3, [r3, #20]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d009      	beq.n	80065f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	015a      	lsls	r2, r3, #5
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	4413      	add	r3, r2
 80065e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065ec:	461a      	mov	r2, r3
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	695b      	ldr	r3, [r3, #20]
 80065f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	015a      	lsls	r2, r3, #5
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	4413      	add	r3, r2
 80065fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	0151      	lsls	r1, r2, #5
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	440a      	add	r2, r1
 800660a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800660e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	e097      	b.n	8006746 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006616:	693b      	ldr	r3, [r7, #16]
 8006618:	015a      	lsls	r2, r3, #5
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	4413      	add	r3, r2
 800661e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	0151      	lsls	r1, r2, #5
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	440a      	add	r2, r1
 800662c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006630:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006634:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006636:	68bb      	ldr	r3, [r7, #8]
 8006638:	699b      	ldr	r3, [r3, #24]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 8083 	beq.w	8006746 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8006640:	697b      	ldr	r3, [r7, #20]
 8006642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006646:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	f003 030f 	and.w	r3, r3, #15
 8006650:	2101      	movs	r1, #1
 8006652:	fa01 f303 	lsl.w	r3, r1, r3
 8006656:	6979      	ldr	r1, [r7, #20]
 8006658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800665c:	4313      	orrs	r3, r2
 800665e:	634b      	str	r3, [r1, #52]	; 0x34
 8006660:	e071      	b.n	8006746 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	015a      	lsls	r2, r3, #5
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	4413      	add	r3, r2
 800666a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	693a      	ldr	r2, [r7, #16]
 8006672:	0151      	lsls	r1, r2, #5
 8006674:	697a      	ldr	r2, [r7, #20]
 8006676:	440a      	add	r2, r1
 8006678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800667c:	0cdb      	lsrs	r3, r3, #19
 800667e:	04db      	lsls	r3, r3, #19
 8006680:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8006682:	693b      	ldr	r3, [r7, #16]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	4413      	add	r3, r2
 800668a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	693a      	ldr	r2, [r7, #16]
 8006692:	0151      	lsls	r1, r2, #5
 8006694:	697a      	ldr	r2, [r7, #20]
 8006696:	440a      	add	r2, r1
 8006698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800669c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066a0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066a4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	699b      	ldr	r3, [r3, #24]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d003      	beq.n	80066b6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	68da      	ldr	r2, [r3, #12]
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80066b6:	68bb      	ldr	r3, [r7, #8]
 80066b8:	68da      	ldr	r2, [r3, #12]
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80066be:	693b      	ldr	r3, [r7, #16]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ca:	691b      	ldr	r3, [r3, #16]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80066d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	015a      	lsls	r2, r3, #5
 80066e2:	697b      	ldr	r3, [r7, #20]
 80066e4:	4413      	add	r3, r2
 80066e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066ea:	691a      	ldr	r2, [r3, #16]
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	69db      	ldr	r3, [r3, #28]
 80066f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066f4:	6939      	ldr	r1, [r7, #16]
 80066f6:	0148      	lsls	r0, r1, #5
 80066f8:	6979      	ldr	r1, [r7, #20]
 80066fa:	4401      	add	r1, r0
 80066fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006700:	4313      	orrs	r3, r2
 8006702:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006704:	79fb      	ldrb	r3, [r7, #7]
 8006706:	2b01      	cmp	r3, #1
 8006708:	d10d      	bne.n	8006726 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d009      	beq.n	8006726 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	6919      	ldr	r1, [r3, #16]
 8006716:	693b      	ldr	r3, [r7, #16]
 8006718:	015a      	lsls	r2, r3, #5
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	4413      	add	r3, r2
 800671e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006722:	460a      	mov	r2, r1
 8006724:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006726:	693b      	ldr	r3, [r7, #16]
 8006728:	015a      	lsls	r2, r3, #5
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	4413      	add	r3, r2
 800672e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	0151      	lsls	r1, r2, #5
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	440a      	add	r2, r1
 800673c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006740:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006744:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	371c      	adds	r7, #28
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8006762:	2300      	movs	r3, #0
 8006764:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	785b      	ldrb	r3, [r3, #1]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d14a      	bne.n	8006808 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	015a      	lsls	r2, r3, #5
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	4413      	add	r3, r2
 800677c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006786:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800678a:	f040 8086 	bne.w	800689a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	015a      	lsls	r2, r3, #5
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	4413      	add	r3, r2
 8006798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	683a      	ldr	r2, [r7, #0]
 80067a0:	7812      	ldrb	r2, [r2, #0]
 80067a2:	0151      	lsls	r1, r2, #5
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	440a      	add	r2, r1
 80067a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80067b0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	015a      	lsls	r2, r3, #5
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	4413      	add	r3, r2
 80067bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	683a      	ldr	r2, [r7, #0]
 80067c4:	7812      	ldrb	r2, [r2, #0]
 80067c6:	0151      	lsls	r1, r2, #5
 80067c8:	693a      	ldr	r2, [r7, #16]
 80067ca:	440a      	add	r2, r1
 80067cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80067d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3301      	adds	r3, #1
 80067da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	f242 7210 	movw	r2, #10000	; 0x2710
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d902      	bls.n	80067ec <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	75fb      	strb	r3, [r7, #23]
          break;
 80067ea:	e056      	b.n	800689a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	015a      	lsls	r2, r3, #5
 80067f2:	693b      	ldr	r3, [r7, #16]
 80067f4:	4413      	add	r3, r2
 80067f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006804:	d0e7      	beq.n	80067d6 <USB_EPStopXfer+0x82>
 8006806:	e048      	b.n	800689a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	4413      	add	r3, r2
 8006812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800681c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006820:	d13b      	bne.n	800689a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006822:	683b      	ldr	r3, [r7, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	015a      	lsls	r2, r3, #5
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	4413      	add	r3, r2
 800682c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	683a      	ldr	r2, [r7, #0]
 8006834:	7812      	ldrb	r2, [r2, #0]
 8006836:	0151      	lsls	r1, r2, #5
 8006838:	693a      	ldr	r2, [r7, #16]
 800683a:	440a      	add	r2, r1
 800683c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006840:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006844:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	015a      	lsls	r2, r3, #5
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	4413      	add	r3, r2
 8006850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	7812      	ldrb	r2, [r2, #0]
 800685a:	0151      	lsls	r1, r2, #5
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	440a      	add	r2, r1
 8006860:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006864:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006868:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	3301      	adds	r3, #1
 800686e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f242 7210 	movw	r2, #10000	; 0x2710
 8006876:	4293      	cmp	r3, r2
 8006878:	d902      	bls.n	8006880 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	75fb      	strb	r3, [r7, #23]
          break;
 800687e:	e00c      	b.n	800689a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	781b      	ldrb	r3, [r3, #0]
 8006884:	015a      	lsls	r2, r3, #5
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	4413      	add	r3, r2
 800688a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006894:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006898:	d0e7      	beq.n	800686a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800689a:	7dfb      	ldrb	r3, [r7, #23]
}
 800689c:	4618      	mov	r0, r3
 800689e:	371c      	adds	r7, #28
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b089      	sub	sp, #36	; 0x24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	4611      	mov	r1, r2
 80068b4:	461a      	mov	r2, r3
 80068b6:	460b      	mov	r3, r1
 80068b8:	71fb      	strb	r3, [r7, #7]
 80068ba:	4613      	mov	r3, r2
 80068bc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80068c2:	68bb      	ldr	r3, [r7, #8]
 80068c4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80068c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d123      	bne.n	8006916 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80068ce:	88bb      	ldrh	r3, [r7, #4]
 80068d0:	3303      	adds	r3, #3
 80068d2:	089b      	lsrs	r3, r3, #2
 80068d4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80068d6:	2300      	movs	r3, #0
 80068d8:	61bb      	str	r3, [r7, #24]
 80068da:	e018      	b.n	800690e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80068dc:	79fb      	ldrb	r3, [r7, #7]
 80068de:	031a      	lsls	r2, r3, #12
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	4413      	add	r3, r2
 80068e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068e8:	461a      	mov	r2, r3
 80068ea:	69fb      	ldr	r3, [r7, #28]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6013      	str	r3, [r2, #0]
      pSrc++;
 80068f0:	69fb      	ldr	r3, [r7, #28]
 80068f2:	3301      	adds	r3, #1
 80068f4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	3301      	adds	r3, #1
 80068fa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	3301      	adds	r3, #1
 8006900:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006902:	69fb      	ldr	r3, [r7, #28]
 8006904:	3301      	adds	r3, #1
 8006906:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	3301      	adds	r3, #1
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	69ba      	ldr	r2, [r7, #24]
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	429a      	cmp	r2, r3
 8006914:	d3e2      	bcc.n	80068dc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006916:	2300      	movs	r3, #0
}
 8006918:	4618      	mov	r0, r3
 800691a:	3724      	adds	r7, #36	; 0x24
 800691c:	46bd      	mov	sp, r7
 800691e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006922:	4770      	bx	lr

08006924 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006924:	b480      	push	{r7}
 8006926:	b08b      	sub	sp, #44	; 0x2c
 8006928:	af00      	add	r7, sp, #0
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	4613      	mov	r3, r2
 8006930:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800693a:	88fb      	ldrh	r3, [r7, #6]
 800693c:	089b      	lsrs	r3, r3, #2
 800693e:	b29b      	uxth	r3, r3
 8006940:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	f003 0303 	and.w	r3, r3, #3
 8006948:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800694a:	2300      	movs	r3, #0
 800694c:	623b      	str	r3, [r7, #32]
 800694e:	e014      	b.n	800697a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	601a      	str	r2, [r3, #0]
    pDest++;
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	3301      	adds	r3, #1
 8006960:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006964:	3301      	adds	r3, #1
 8006966:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	3301      	adds	r3, #1
 800696c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800696e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006970:	3301      	adds	r3, #1
 8006972:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	3301      	adds	r3, #1
 8006978:	623b      	str	r3, [r7, #32]
 800697a:	6a3a      	ldr	r2, [r7, #32]
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	429a      	cmp	r2, r3
 8006980:	d3e6      	bcc.n	8006950 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006982:	8bfb      	ldrh	r3, [r7, #30]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d01e      	beq.n	80069c6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800698c:	69bb      	ldr	r3, [r7, #24]
 800698e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006992:	461a      	mov	r2, r3
 8006994:	f107 0310 	add.w	r3, r7, #16
 8006998:	6812      	ldr	r2, [r2, #0]
 800699a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	6a3b      	ldr	r3, [r7, #32]
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	fa22 f303 	lsr.w	r3, r2, r3
 80069a8:	b2da      	uxtb	r2, r3
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	701a      	strb	r2, [r3, #0]
      i++;
 80069ae:	6a3b      	ldr	r3, [r7, #32]
 80069b0:	3301      	adds	r3, #1
 80069b2:	623b      	str	r3, [r7, #32]
      pDest++;
 80069b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b6:	3301      	adds	r3, #1
 80069b8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80069ba:	8bfb      	ldrh	r3, [r7, #30]
 80069bc:	3b01      	subs	r3, #1
 80069be:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80069c0:	8bfb      	ldrh	r3, [r7, #30]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1ea      	bne.n	800699c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80069c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	372c      	adds	r7, #44	; 0x2c
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr

080069d4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b085      	sub	sp, #20
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	785b      	ldrb	r3, [r3, #1]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d12c      	bne.n	8006a4a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	015a      	lsls	r2, r3, #5
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4413      	add	r3, r2
 80069f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	db12      	blt.n	8006a28 <USB_EPSetStall+0x54>
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00f      	beq.n	8006a28 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	015a      	lsls	r2, r3, #5
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	68ba      	ldr	r2, [r7, #8]
 8006a18:	0151      	lsls	r1, r2, #5
 8006a1a:	68fa      	ldr	r2, [r7, #12]
 8006a1c:	440a      	add	r2, r1
 8006a1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a26:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	0151      	lsls	r1, r2, #5
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	440a      	add	r2, r1
 8006a3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006a42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a46:	6013      	str	r3, [r2, #0]
 8006a48:	e02b      	b.n	8006aa2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	015a      	lsls	r2, r3, #5
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	db12      	blt.n	8006a82 <USB_EPSetStall+0xae>
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00f      	beq.n	8006a82 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	015a      	lsls	r2, r3, #5
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	0151      	lsls	r1, r2, #5
 8006a74:	68fa      	ldr	r2, [r7, #12]
 8006a76:	440a      	add	r2, r1
 8006a78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a7c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006a80:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	015a      	lsls	r2, r3, #5
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	4413      	add	r3, r2
 8006a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	0151      	lsls	r1, r2, #5
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	440a      	add	r2, r1
 8006a98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006a9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006aa0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006aa2:	2300      	movs	r3, #0
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3714      	adds	r7, #20
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr

08006ab0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006ab0:	b480      	push	{r7}
 8006ab2:	b085      	sub	sp, #20
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
 8006ab8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	785b      	ldrb	r3, [r3, #1]
 8006ac8:	2b01      	cmp	r3, #1
 8006aca:	d128      	bne.n	8006b1e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006acc:	68bb      	ldr	r3, [r7, #8]
 8006ace:	015a      	lsls	r2, r3, #5
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	4413      	add	r3, r2
 8006ad4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	68ba      	ldr	r2, [r7, #8]
 8006adc:	0151      	lsls	r1, r2, #5
 8006ade:	68fa      	ldr	r2, [r7, #12]
 8006ae0:	440a      	add	r2, r1
 8006ae2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ae6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006aea:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	791b      	ldrb	r3, [r3, #4]
 8006af0:	2b03      	cmp	r3, #3
 8006af2:	d003      	beq.n	8006afc <USB_EPClearStall+0x4c>
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	791b      	ldrb	r3, [r3, #4]
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d138      	bne.n	8006b6e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	68ba      	ldr	r2, [r7, #8]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	68fa      	ldr	r2, [r7, #12]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b1a:	6013      	str	r3, [r2, #0]
 8006b1c:	e027      	b.n	8006b6e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	0151      	lsls	r1, r2, #5
 8006b30:	68fa      	ldr	r2, [r7, #12]
 8006b32:	440a      	add	r2, r1
 8006b34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b38:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b3c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	791b      	ldrb	r3, [r3, #4]
 8006b42:	2b03      	cmp	r3, #3
 8006b44:	d003      	beq.n	8006b4e <USB_EPClearStall+0x9e>
 8006b46:	683b      	ldr	r3, [r7, #0]
 8006b48:	791b      	ldrb	r3, [r3, #4]
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d10f      	bne.n	8006b6e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	015a      	lsls	r2, r3, #5
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4413      	add	r3, r2
 8006b56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68ba      	ldr	r2, [r7, #8]
 8006b5e:	0151      	lsls	r1, r2, #5
 8006b60:	68fa      	ldr	r2, [r7, #12]
 8006b62:	440a      	add	r2, r1
 8006b64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b6c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006b6e:	2300      	movs	r3, #0
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3714      	adds	r7, #20
 8006b74:	46bd      	mov	sp, r7
 8006b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7a:	4770      	bx	lr

08006b7c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	b085      	sub	sp, #20
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	460b      	mov	r3, r1
 8006b86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68fa      	ldr	r2, [r7, #12]
 8006b96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b9a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006b9e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ba6:	681a      	ldr	r2, [r3, #0]
 8006ba8:	78fb      	ldrb	r3, [r7, #3]
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006bb0:	68f9      	ldr	r1, [r7, #12]
 8006bb2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006bb6:	4313      	orrs	r3, r2
 8006bb8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3714      	adds	r7, #20
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b085      	sub	sp, #20
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	68fa      	ldr	r2, [r7, #12]
 8006bde:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006be2:	f023 0303 	bic.w	r3, r3, #3
 8006be6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006bf6:	f023 0302 	bic.w	r3, r3, #2
 8006bfa:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006bfc:	2300      	movs	r3, #0
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3714      	adds	r7, #20
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr

08006c0a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006c0a:	b480      	push	{r7}
 8006c0c:	b085      	sub	sp, #20
 8006c0e:	af00      	add	r7, sp, #0
 8006c10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68fa      	ldr	r2, [r7, #12]
 8006c20:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c24:	f023 0303 	bic.w	r3, r3, #3
 8006c28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c38:	f043 0302 	orr.w	r3, r3, #2
 8006c3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006c3e:	2300      	movs	r3, #0
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3714      	adds	r7, #20
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b085      	sub	sp, #20
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	68fa      	ldr	r2, [r7, #12]
 8006c60:	4013      	ands	r3, r2
 8006c62:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006c64:	68fb      	ldr	r3, [r7, #12]
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3714      	adds	r7, #20
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c70:	4770      	bx	lr

08006c72 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c72:	b480      	push	{r7}
 8006c74:	b085      	sub	sp, #20
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8e:	69db      	ldr	r3, [r3, #28]
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	4013      	ands	r3, r2
 8006c94:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	0c1b      	lsrs	r3, r3, #16
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3714      	adds	r7, #20
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr

08006ca6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca6:	b480      	push	{r7}
 8006ca8:	b085      	sub	sp, #20
 8006caa:	af00      	add	r7, sp, #0
 8006cac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc2:	69db      	ldr	r3, [r3, #28]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	b29b      	uxth	r3, r3
}
 8006cce:	4618      	mov	r0, r3
 8006cd0:	3714      	adds	r7, #20
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b085      	sub	sp, #20
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006cea:	78fb      	ldrb	r3, [r7, #3]
 8006cec:	015a      	lsls	r2, r3, #5
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d00:	695b      	ldr	r3, [r3, #20]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	4013      	ands	r3, r2
 8006d06:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d08:	68bb      	ldr	r3, [r7, #8]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b087      	sub	sp, #28
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d2c:	691b      	ldr	r3, [r3, #16]
 8006d2e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d38:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006d3a:	78fb      	ldrb	r3, [r7, #3]
 8006d3c:	f003 030f 	and.w	r3, r3, #15
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	fa22 f303 	lsr.w	r3, r2, r3
 8006d46:	01db      	lsls	r3, r3, #7
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006d50:	78fb      	ldrb	r3, [r7, #3]
 8006d52:	015a      	lsls	r2, r3, #5
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	4413      	add	r3, r2
 8006d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4013      	ands	r3, r2
 8006d62:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006d64:	68bb      	ldr	r3, [r7, #8]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	371c      	adds	r7, #28
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d70:	4770      	bx	lr

08006d72 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	695b      	ldr	r3, [r3, #20]
 8006d7e:	f003 0301 	and.w	r3, r3, #1
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	370c      	adds	r7, #12
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b085      	sub	sp, #20
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006da8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006dac:	f023 0307 	bic.w	r3, r3, #7
 8006db0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006db8:	685b      	ldr	r3, [r3, #4]
 8006dba:	68fa      	ldr	r2, [r7, #12]
 8006dbc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006dc4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006dc6:	2300      	movs	r3, #0
}
 8006dc8:	4618      	mov	r0, r3
 8006dca:	3714      	adds	r7, #20
 8006dcc:	46bd      	mov	sp, r7
 8006dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd2:	4770      	bx	lr

08006dd4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b087      	sub	sp, #28
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	60f8      	str	r0, [r7, #12]
 8006ddc:	460b      	mov	r3, r1
 8006dde:	607a      	str	r2, [r7, #4]
 8006de0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	333c      	adds	r3, #60	; 0x3c
 8006dea:	3304      	adds	r3, #4
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	4a26      	ldr	r2, [pc, #152]	; (8006e8c <USB_EP0_OutStart+0xb8>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d90a      	bls.n	8006e0e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e08:	d101      	bne.n	8006e0e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	e037      	b.n	8006e7e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e14:	461a      	mov	r2, r3
 8006e16:	2300      	movs	r3, #0
 8006e18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006e1a:	697b      	ldr	r3, [r7, #20]
 8006e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e20:	691b      	ldr	r3, [r3, #16]
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006e2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e3c:	f043 0318 	orr.w	r3, r3, #24
 8006e40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006e54:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006e56:	7afb      	ldrb	r3, [r7, #11]
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d10f      	bne.n	8006e7c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e62:	461a      	mov	r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006e68:	697b      	ldr	r3, [r7, #20]
 8006e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	697a      	ldr	r2, [r7, #20]
 8006e72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006e76:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006e7a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	371c      	adds	r7, #28
 8006e82:	46bd      	mov	sp, r7
 8006e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e88:	4770      	bx	lr
 8006e8a:	bf00      	nop
 8006e8c:	4f54300a 	.word	0x4f54300a

08006e90 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e90:	b480      	push	{r7}
 8006e92:	b085      	sub	sp, #20
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e98:	2300      	movs	r3, #0
 8006e9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	4a13      	ldr	r2, [pc, #76]	; (8006ef4 <USB_CoreReset+0x64>)
 8006ea6:	4293      	cmp	r3, r2
 8006ea8:	d901      	bls.n	8006eae <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e01b      	b.n	8006ee6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	daf2      	bge.n	8006e9c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006eb6:	2300      	movs	r3, #0
 8006eb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	f043 0201 	orr.w	r2, r3, #1
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	4a09      	ldr	r2, [pc, #36]	; (8006ef4 <USB_CoreReset+0x64>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d901      	bls.n	8006ed8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	e006      	b.n	8006ee6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	f003 0301 	and.w	r3, r3, #1
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d0f0      	beq.n	8006ec6 <USB_CoreReset+0x36>

  return HAL_OK;
 8006ee4:	2300      	movs	r3, #0
}
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	3714      	adds	r7, #20
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	00030d40 	.word	0x00030d40

08006ef8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b084      	sub	sp, #16
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	460b      	mov	r3, r1
 8006f02:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8006f04:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8006f08:	f002 fc94 	bl	8009834 <USBD_static_malloc>
 8006f0c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d109      	bne.n	8006f28 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	32b0      	adds	r2, #176	; 0xb0
 8006f1e:	2100      	movs	r1, #0
 8006f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8006f24:	2302      	movs	r3, #2
 8006f26:	e0d4      	b.n	80070d2 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8006f28:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8006f2c:	2100      	movs	r1, #0
 8006f2e:	68f8      	ldr	r0, [r7, #12]
 8006f30:	f002 fcee 	bl	8009910 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	32b0      	adds	r2, #176	; 0xb0
 8006f3e:	68f9      	ldr	r1, [r7, #12]
 8006f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	32b0      	adds	r2, #176	; 0xb0
 8006f4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	7c1b      	ldrb	r3, [r3, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d138      	bne.n	8006fd2 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006f60:	4b5e      	ldr	r3, [pc, #376]	; (80070dc <USBD_CDC_Init+0x1e4>)
 8006f62:	7819      	ldrb	r1, [r3, #0]
 8006f64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f68:	2202      	movs	r2, #2
 8006f6a:	6878      	ldr	r0, [r7, #4]
 8006f6c:	f002 fb3f 	bl	80095ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006f70:	4b5a      	ldr	r3, [pc, #360]	; (80070dc <USBD_CDC_Init+0x1e4>)
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	f003 020f 	and.w	r2, r3, #15
 8006f78:	6879      	ldr	r1, [r7, #4]
 8006f7a:	4613      	mov	r3, r2
 8006f7c:	009b      	lsls	r3, r3, #2
 8006f7e:	4413      	add	r3, r2
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	440b      	add	r3, r1
 8006f84:	3324      	adds	r3, #36	; 0x24
 8006f86:	2201      	movs	r2, #1
 8006f88:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006f8a:	4b55      	ldr	r3, [pc, #340]	; (80070e0 <USBD_CDC_Init+0x1e8>)
 8006f8c:	7819      	ldrb	r1, [r3, #0]
 8006f8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f92:	2202      	movs	r2, #2
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f002 fb2a 	bl	80095ee <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8006f9a:	4b51      	ldr	r3, [pc, #324]	; (80070e0 <USBD_CDC_Init+0x1e8>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	f003 020f 	and.w	r2, r3, #15
 8006fa2:	6879      	ldr	r1, [r7, #4]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	440b      	add	r3, r1
 8006fae:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8006fb6:	4b4b      	ldr	r3, [pc, #300]	; (80070e4 <USBD_CDC_Init+0x1ec>)
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	f003 020f 	and.w	r2, r3, #15
 8006fbe:	6879      	ldr	r1, [r7, #4]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	009b      	lsls	r3, r3, #2
 8006fc8:	440b      	add	r3, r1
 8006fca:	3326      	adds	r3, #38	; 0x26
 8006fcc:	2210      	movs	r2, #16
 8006fce:	801a      	strh	r2, [r3, #0]
 8006fd0:	e035      	b.n	800703e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8006fd2:	4b42      	ldr	r3, [pc, #264]	; (80070dc <USBD_CDC_Init+0x1e4>)
 8006fd4:	7819      	ldrb	r1, [r3, #0]
 8006fd6:	2340      	movs	r3, #64	; 0x40
 8006fd8:	2202      	movs	r2, #2
 8006fda:	6878      	ldr	r0, [r7, #4]
 8006fdc:	f002 fb07 	bl	80095ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8006fe0:	4b3e      	ldr	r3, [pc, #248]	; (80070dc <USBD_CDC_Init+0x1e4>)
 8006fe2:	781b      	ldrb	r3, [r3, #0]
 8006fe4:	f003 020f 	and.w	r2, r3, #15
 8006fe8:	6879      	ldr	r1, [r7, #4]
 8006fea:	4613      	mov	r3, r2
 8006fec:	009b      	lsls	r3, r3, #2
 8006fee:	4413      	add	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	440b      	add	r3, r1
 8006ff4:	3324      	adds	r3, #36	; 0x24
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8006ffa:	4b39      	ldr	r3, [pc, #228]	; (80070e0 <USBD_CDC_Init+0x1e8>)
 8006ffc:	7819      	ldrb	r1, [r3, #0]
 8006ffe:	2340      	movs	r3, #64	; 0x40
 8007000:	2202      	movs	r2, #2
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f002 faf3 	bl	80095ee <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007008:	4b35      	ldr	r3, [pc, #212]	; (80070e0 <USBD_CDC_Init+0x1e8>)
 800700a:	781b      	ldrb	r3, [r3, #0]
 800700c:	f003 020f 	and.w	r2, r3, #15
 8007010:	6879      	ldr	r1, [r7, #4]
 8007012:	4613      	mov	r3, r2
 8007014:	009b      	lsls	r3, r3, #2
 8007016:	4413      	add	r3, r2
 8007018:	009b      	lsls	r3, r3, #2
 800701a:	440b      	add	r3, r1
 800701c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007020:	2201      	movs	r2, #1
 8007022:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007024:	4b2f      	ldr	r3, [pc, #188]	; (80070e4 <USBD_CDC_Init+0x1ec>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	f003 020f 	and.w	r2, r3, #15
 800702c:	6879      	ldr	r1, [r7, #4]
 800702e:	4613      	mov	r3, r2
 8007030:	009b      	lsls	r3, r3, #2
 8007032:	4413      	add	r3, r2
 8007034:	009b      	lsls	r3, r3, #2
 8007036:	440b      	add	r3, r1
 8007038:	3326      	adds	r3, #38	; 0x26
 800703a:	2210      	movs	r2, #16
 800703c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800703e:	4b29      	ldr	r3, [pc, #164]	; (80070e4 <USBD_CDC_Init+0x1ec>)
 8007040:	7819      	ldrb	r1, [r3, #0]
 8007042:	2308      	movs	r3, #8
 8007044:	2203      	movs	r2, #3
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f002 fad1 	bl	80095ee <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800704c:	4b25      	ldr	r3, [pc, #148]	; (80070e4 <USBD_CDC_Init+0x1ec>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	f003 020f 	and.w	r2, r3, #15
 8007054:	6879      	ldr	r1, [r7, #4]
 8007056:	4613      	mov	r3, r2
 8007058:	009b      	lsls	r3, r3, #2
 800705a:	4413      	add	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	440b      	add	r3, r1
 8007060:	3324      	adds	r3, #36	; 0x24
 8007062:	2201      	movs	r2, #1
 8007064:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007074:	687a      	ldr	r2, [r7, #4]
 8007076:	33b0      	adds	r3, #176	; 0xb0
 8007078:	009b      	lsls	r3, r3, #2
 800707a:	4413      	add	r3, r2
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8007098:	2b00      	cmp	r3, #0
 800709a:	d101      	bne.n	80070a0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800709c:	2302      	movs	r3, #2
 800709e:	e018      	b.n	80070d2 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	7c1b      	ldrb	r3, [r3, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10a      	bne.n	80070be <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070a8:	4b0d      	ldr	r3, [pc, #52]	; (80070e0 <USBD_CDC_Init+0x1e8>)
 80070aa:	7819      	ldrb	r1, [r3, #0]
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f002 fb88 	bl	80097cc <USBD_LL_PrepareReceive>
 80070bc:	e008      	b.n	80070d0 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80070be:	4b08      	ldr	r3, [pc, #32]	; (80070e0 <USBD_CDC_Init+0x1e8>)
 80070c0:	7819      	ldrb	r1, [r3, #0]
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070c8:	2340      	movs	r3, #64	; 0x40
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f002 fb7e 	bl	80097cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80070d0:	2300      	movs	r3, #0
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3710      	adds	r7, #16
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}
 80070da:	bf00      	nop
 80070dc:	200000c3 	.word	0x200000c3
 80070e0:	200000c4 	.word	0x200000c4
 80070e4:	200000c5 	.word	0x200000c5

080070e8 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	460b      	mov	r3, r1
 80070f2:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80070f4:	4b3a      	ldr	r3, [pc, #232]	; (80071e0 <USBD_CDC_DeInit+0xf8>)
 80070f6:	781b      	ldrb	r3, [r3, #0]
 80070f8:	4619      	mov	r1, r3
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f002 fa9d 	bl	800963a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007100:	4b37      	ldr	r3, [pc, #220]	; (80071e0 <USBD_CDC_DeInit+0xf8>)
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	f003 020f 	and.w	r2, r3, #15
 8007108:	6879      	ldr	r1, [r7, #4]
 800710a:	4613      	mov	r3, r2
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	4413      	add	r3, r2
 8007110:	009b      	lsls	r3, r3, #2
 8007112:	440b      	add	r3, r1
 8007114:	3324      	adds	r3, #36	; 0x24
 8007116:	2200      	movs	r2, #0
 8007118:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800711a:	4b32      	ldr	r3, [pc, #200]	; (80071e4 <USBD_CDC_DeInit+0xfc>)
 800711c:	781b      	ldrb	r3, [r3, #0]
 800711e:	4619      	mov	r1, r3
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f002 fa8a 	bl	800963a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007126:	4b2f      	ldr	r3, [pc, #188]	; (80071e4 <USBD_CDC_DeInit+0xfc>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	f003 020f 	and.w	r2, r3, #15
 800712e:	6879      	ldr	r1, [r7, #4]
 8007130:	4613      	mov	r3, r2
 8007132:	009b      	lsls	r3, r3, #2
 8007134:	4413      	add	r3, r2
 8007136:	009b      	lsls	r3, r3, #2
 8007138:	440b      	add	r3, r1
 800713a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800713e:	2200      	movs	r2, #0
 8007140:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8007142:	4b29      	ldr	r3, [pc, #164]	; (80071e8 <USBD_CDC_DeInit+0x100>)
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f002 fa76 	bl	800963a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800714e:	4b26      	ldr	r3, [pc, #152]	; (80071e8 <USBD_CDC_DeInit+0x100>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	f003 020f 	and.w	r2, r3, #15
 8007156:	6879      	ldr	r1, [r7, #4]
 8007158:	4613      	mov	r3, r2
 800715a:	009b      	lsls	r3, r3, #2
 800715c:	4413      	add	r3, r2
 800715e:	009b      	lsls	r3, r3, #2
 8007160:	440b      	add	r3, r1
 8007162:	3324      	adds	r3, #36	; 0x24
 8007164:	2200      	movs	r2, #0
 8007166:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8007168:	4b1f      	ldr	r3, [pc, #124]	; (80071e8 <USBD_CDC_DeInit+0x100>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	f003 020f 	and.w	r2, r3, #15
 8007170:	6879      	ldr	r1, [r7, #4]
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	440b      	add	r3, r1
 800717c:	3326      	adds	r3, #38	; 0x26
 800717e:	2200      	movs	r2, #0
 8007180:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	32b0      	adds	r2, #176	; 0xb0
 800718c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d01f      	beq.n	80071d4 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	33b0      	adds	r3, #176	; 0xb0
 800719e:	009b      	lsls	r3, r3, #2
 80071a0:	4413      	add	r3, r2
 80071a2:	685b      	ldr	r3, [r3, #4]
 80071a4:	685b      	ldr	r3, [r3, #4]
 80071a6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	32b0      	adds	r2, #176	; 0xb0
 80071b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071b6:	4618      	mov	r0, r3
 80071b8:	f002 fb4a 	bl	8009850 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	32b0      	adds	r2, #176	; 0xb0
 80071c6:	2100      	movs	r1, #0
 80071c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	200000c3 	.word	0x200000c3
 80071e4:	200000c4 	.word	0x200000c4
 80071e8:	200000c5 	.word	0x200000c5

080071ec <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b086      	sub	sp, #24
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	32b0      	adds	r2, #176	; 0xb0
 8007200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007204:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800720a:	2300      	movs	r3, #0
 800720c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d101      	bne.n	800721c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007218:	2303      	movs	r3, #3
 800721a:	e0bf      	b.n	800739c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800721c:	683b      	ldr	r3, [r7, #0]
 800721e:	781b      	ldrb	r3, [r3, #0]
 8007220:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007224:	2b00      	cmp	r3, #0
 8007226:	d050      	beq.n	80072ca <USBD_CDC_Setup+0xde>
 8007228:	2b20      	cmp	r3, #32
 800722a:	f040 80af 	bne.w	800738c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	88db      	ldrh	r3, [r3, #6]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d03a      	beq.n	80072ac <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	b25b      	sxtb	r3, r3
 800723c:	2b00      	cmp	r3, #0
 800723e:	da1b      	bge.n	8007278 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	33b0      	adds	r3, #176	; 0xb0
 800724a:	009b      	lsls	r3, r3, #2
 800724c:	4413      	add	r3, r2
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8007256:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	88d2      	ldrh	r2, [r2, #6]
 800725c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	88db      	ldrh	r3, [r3, #6]
 8007262:	2b07      	cmp	r3, #7
 8007264:	bf28      	it	cs
 8007266:	2307      	movcs	r3, #7
 8007268:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	89fa      	ldrh	r2, [r7, #14]
 800726e:	4619      	mov	r1, r3
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 fd89 	bl	8008d88 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8007276:	e090      	b.n	800739a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8007278:	683b      	ldr	r3, [r7, #0]
 800727a:	785a      	ldrb	r2, [r3, #1]
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	88db      	ldrh	r3, [r3, #6]
 8007286:	2b3f      	cmp	r3, #63	; 0x3f
 8007288:	d803      	bhi.n	8007292 <USBD_CDC_Setup+0xa6>
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	88db      	ldrh	r3, [r3, #6]
 800728e:	b2da      	uxtb	r2, r3
 8007290:	e000      	b.n	8007294 <USBD_CDC_Setup+0xa8>
 8007292:	2240      	movs	r2, #64	; 0x40
 8007294:	693b      	ldr	r3, [r7, #16]
 8007296:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800729a:	6939      	ldr	r1, [r7, #16]
 800729c:	693b      	ldr	r3, [r7, #16]
 800729e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80072a2:	461a      	mov	r2, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f001 fd9b 	bl	8008de0 <USBD_CtlPrepareRx>
      break;
 80072aa:	e076      	b.n	800739a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072b2:	687a      	ldr	r2, [r7, #4]
 80072b4:	33b0      	adds	r3, #176	; 0xb0
 80072b6:	009b      	lsls	r3, r3, #2
 80072b8:	4413      	add	r3, r2
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	683a      	ldr	r2, [r7, #0]
 80072c0:	7850      	ldrb	r0, [r2, #1]
 80072c2:	2200      	movs	r2, #0
 80072c4:	6839      	ldr	r1, [r7, #0]
 80072c6:	4798      	blx	r3
      break;
 80072c8:	e067      	b.n	800739a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	785b      	ldrb	r3, [r3, #1]
 80072ce:	2b0b      	cmp	r3, #11
 80072d0:	d851      	bhi.n	8007376 <USBD_CDC_Setup+0x18a>
 80072d2:	a201      	add	r2, pc, #4	; (adr r2, 80072d8 <USBD_CDC_Setup+0xec>)
 80072d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d8:	08007309 	.word	0x08007309
 80072dc:	08007385 	.word	0x08007385
 80072e0:	08007377 	.word	0x08007377
 80072e4:	08007377 	.word	0x08007377
 80072e8:	08007377 	.word	0x08007377
 80072ec:	08007377 	.word	0x08007377
 80072f0:	08007377 	.word	0x08007377
 80072f4:	08007377 	.word	0x08007377
 80072f8:	08007377 	.word	0x08007377
 80072fc:	08007377 	.word	0x08007377
 8007300:	08007333 	.word	0x08007333
 8007304:	0800735d 	.word	0x0800735d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800730e:	b2db      	uxtb	r3, r3
 8007310:	2b03      	cmp	r3, #3
 8007312:	d107      	bne.n	8007324 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007314:	f107 030a 	add.w	r3, r7, #10
 8007318:	2202      	movs	r2, #2
 800731a:	4619      	mov	r1, r3
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 fd33 	bl	8008d88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007322:	e032      	b.n	800738a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007324:	6839      	ldr	r1, [r7, #0]
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f001 fcbd 	bl	8008ca6 <USBD_CtlError>
            ret = USBD_FAIL;
 800732c:	2303      	movs	r3, #3
 800732e:	75fb      	strb	r3, [r7, #23]
          break;
 8007330:	e02b      	b.n	800738a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007338:	b2db      	uxtb	r3, r3
 800733a:	2b03      	cmp	r3, #3
 800733c:	d107      	bne.n	800734e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800733e:	f107 030d 	add.w	r3, r7, #13
 8007342:	2201      	movs	r2, #1
 8007344:	4619      	mov	r1, r3
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f001 fd1e 	bl	8008d88 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800734c:	e01d      	b.n	800738a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f001 fca8 	bl	8008ca6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007356:	2303      	movs	r3, #3
 8007358:	75fb      	strb	r3, [r7, #23]
          break;
 800735a:	e016      	b.n	800738a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b03      	cmp	r3, #3
 8007366:	d00f      	beq.n	8007388 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8007368:	6839      	ldr	r1, [r7, #0]
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f001 fc9b 	bl	8008ca6 <USBD_CtlError>
            ret = USBD_FAIL;
 8007370:	2303      	movs	r3, #3
 8007372:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8007374:	e008      	b.n	8007388 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8007376:	6839      	ldr	r1, [r7, #0]
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f001 fc94 	bl	8008ca6 <USBD_CtlError>
          ret = USBD_FAIL;
 800737e:	2303      	movs	r3, #3
 8007380:	75fb      	strb	r3, [r7, #23]
          break;
 8007382:	e002      	b.n	800738a <USBD_CDC_Setup+0x19e>
          break;
 8007384:	bf00      	nop
 8007386:	e008      	b.n	800739a <USBD_CDC_Setup+0x1ae>
          break;
 8007388:	bf00      	nop
      }
      break;
 800738a:	e006      	b.n	800739a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800738c:	6839      	ldr	r1, [r7, #0]
 800738e:	6878      	ldr	r0, [r7, #4]
 8007390:	f001 fc89 	bl	8008ca6 <USBD_CtlError>
      ret = USBD_FAIL;
 8007394:	2303      	movs	r3, #3
 8007396:	75fb      	strb	r3, [r7, #23]
      break;
 8007398:	bf00      	nop
  }

  return (uint8_t)ret;
 800739a:	7dfb      	ldrb	r3, [r7, #23]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3718      	adds	r7, #24
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}

080073a4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80073b6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	32b0      	adds	r2, #176	; 0xb0
 80073c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d101      	bne.n	80073ce <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80073ca:	2303      	movs	r3, #3
 80073cc:	e065      	b.n	800749a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	32b0      	adds	r2, #176	; 0xb0
 80073d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80073dc:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80073de:	78fb      	ldrb	r3, [r7, #3]
 80073e0:	f003 020f 	and.w	r2, r3, #15
 80073e4:	6879      	ldr	r1, [r7, #4]
 80073e6:	4613      	mov	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4413      	add	r3, r2
 80073ec:	009b      	lsls	r3, r3, #2
 80073ee:	440b      	add	r3, r1
 80073f0:	3318      	adds	r3, #24
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d02f      	beq.n	8007458 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80073f8:	78fb      	ldrb	r3, [r7, #3]
 80073fa:	f003 020f 	and.w	r2, r3, #15
 80073fe:	6879      	ldr	r1, [r7, #4]
 8007400:	4613      	mov	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	009b      	lsls	r3, r3, #2
 8007408:	440b      	add	r3, r1
 800740a:	3318      	adds	r3, #24
 800740c:	681a      	ldr	r2, [r3, #0]
 800740e:	78fb      	ldrb	r3, [r7, #3]
 8007410:	f003 010f 	and.w	r1, r3, #15
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	460b      	mov	r3, r1
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	440b      	add	r3, r1
 800741c:	009b      	lsls	r3, r3, #2
 800741e:	4403      	add	r3, r0
 8007420:	3348      	adds	r3, #72	; 0x48
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	fbb2 f1f3 	udiv	r1, r2, r3
 8007428:	fb01 f303 	mul.w	r3, r1, r3
 800742c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800742e:	2b00      	cmp	r3, #0
 8007430:	d112      	bne.n	8007458 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007432:	78fb      	ldrb	r3, [r7, #3]
 8007434:	f003 020f 	and.w	r2, r3, #15
 8007438:	6879      	ldr	r1, [r7, #4]
 800743a:	4613      	mov	r3, r2
 800743c:	009b      	lsls	r3, r3, #2
 800743e:	4413      	add	r3, r2
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	440b      	add	r3, r1
 8007444:	3318      	adds	r3, #24
 8007446:	2200      	movs	r2, #0
 8007448:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800744a:	78f9      	ldrb	r1, [r7, #3]
 800744c:	2300      	movs	r3, #0
 800744e:	2200      	movs	r2, #0
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f002 f99a 	bl	800978a <USBD_LL_Transmit>
 8007456:	e01f      	b.n	8007498 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	2200      	movs	r2, #0
 800745c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	33b0      	adds	r3, #176	; 0xb0
 800746a:	009b      	lsls	r3, r3, #2
 800746c:	4413      	add	r3, r2
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	691b      	ldr	r3, [r3, #16]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d010      	beq.n	8007498 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	33b0      	adds	r3, #176	; 0xb0
 8007480:	009b      	lsls	r3, r3, #2
 8007482:	4413      	add	r3, r2
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	68ba      	ldr	r2, [r7, #8]
 800748a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800748e:	68ba      	ldr	r2, [r7, #8]
 8007490:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8007494:	78fa      	ldrb	r2, [r7, #3]
 8007496:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3710      	adds	r7, #16
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b084      	sub	sp, #16
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	6078      	str	r0, [r7, #4]
 80074aa:	460b      	mov	r3, r1
 80074ac:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	32b0      	adds	r2, #176	; 0xb0
 80074b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074bc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	32b0      	adds	r2, #176	; 0xb0
 80074c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d101      	bne.n	80074d4 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80074d0:	2303      	movs	r3, #3
 80074d2:	e01a      	b.n	800750a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80074d4:	78fb      	ldrb	r3, [r7, #3]
 80074d6:	4619      	mov	r1, r3
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f002 f998 	bl	800980e <USBD_LL_GetRxDataSize>
 80074de:	4602      	mov	r2, r0
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	33b0      	adds	r3, #176	; 0xb0
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	4413      	add	r3, r2
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	68fa      	ldr	r2, [r7, #12]
 80074fa:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007504:	4611      	mov	r1, r2
 8007506:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b084      	sub	sp, #16
 8007516:	af00      	add	r7, sp, #0
 8007518:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	32b0      	adds	r2, #176	; 0xb0
 8007524:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007528:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d101      	bne.n	8007534 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007530:	2303      	movs	r3, #3
 8007532:	e025      	b.n	8007580 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	33b0      	adds	r3, #176	; 0xb0
 800753e:	009b      	lsls	r3, r3, #2
 8007540:	4413      	add	r3, r2
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d01a      	beq.n	800757e <USBD_CDC_EP0_RxReady+0x6c>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800754e:	2bff      	cmp	r3, #255	; 0xff
 8007550:	d015      	beq.n	800757e <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007558:	687a      	ldr	r2, [r7, #4]
 800755a:	33b0      	adds	r3, #176	; 0xb0
 800755c:	009b      	lsls	r3, r3, #2
 800755e:	4413      	add	r3, r2
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800756a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800756c:	68fa      	ldr	r2, [r7, #12]
 800756e:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8007572:	b292      	uxth	r2, r2
 8007574:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	22ff      	movs	r2, #255	; 0xff
 800757a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007588:	b580      	push	{r7, lr}
 800758a:	b086      	sub	sp, #24
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007590:	2182      	movs	r1, #130	; 0x82
 8007592:	4818      	ldr	r0, [pc, #96]	; (80075f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007594:	f000 fd4f 	bl	8008036 <USBD_GetEpDesc>
 8007598:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800759a:	2101      	movs	r1, #1
 800759c:	4815      	ldr	r0, [pc, #84]	; (80075f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800759e:	f000 fd4a 	bl	8008036 <USBD_GetEpDesc>
 80075a2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80075a4:	2181      	movs	r1, #129	; 0x81
 80075a6:	4813      	ldr	r0, [pc, #76]	; (80075f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80075a8:	f000 fd45 	bl	8008036 <USBD_GetEpDesc>
 80075ac:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d002      	beq.n	80075ba <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	2210      	movs	r2, #16
 80075b8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d006      	beq.n	80075ce <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075c8:	711a      	strb	r2, [r3, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d006      	beq.n	80075e2 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80075dc:	711a      	strb	r2, [r3, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2243      	movs	r2, #67	; 0x43
 80075e6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80075e8:	4b02      	ldr	r3, [pc, #8]	; (80075f4 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	3718      	adds	r7, #24
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd80      	pop	{r7, pc}
 80075f2:	bf00      	nop
 80075f4:	20000080 	.word	0x20000080

080075f8 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b086      	sub	sp, #24
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007600:	2182      	movs	r1, #130	; 0x82
 8007602:	4818      	ldr	r0, [pc, #96]	; (8007664 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007604:	f000 fd17 	bl	8008036 <USBD_GetEpDesc>
 8007608:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800760a:	2101      	movs	r1, #1
 800760c:	4815      	ldr	r0, [pc, #84]	; (8007664 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800760e:	f000 fd12 	bl	8008036 <USBD_GetEpDesc>
 8007612:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007614:	2181      	movs	r1, #129	; 0x81
 8007616:	4813      	ldr	r0, [pc, #76]	; (8007664 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007618:	f000 fd0d 	bl	8008036 <USBD_GetEpDesc>
 800761c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d002      	beq.n	800762a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007624:	697b      	ldr	r3, [r7, #20]
 8007626:	2210      	movs	r2, #16
 8007628:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d006      	beq.n	800763e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	2200      	movs	r2, #0
 8007634:	711a      	strb	r2, [r3, #4]
 8007636:	2200      	movs	r2, #0
 8007638:	f042 0202 	orr.w	r2, r2, #2
 800763c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d006      	beq.n	8007652 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2200      	movs	r2, #0
 8007648:	711a      	strb	r2, [r3, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f042 0202 	orr.w	r2, r2, #2
 8007650:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2243      	movs	r2, #67	; 0x43
 8007656:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007658:	4b02      	ldr	r3, [pc, #8]	; (8007664 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800765a:	4618      	mov	r0, r3
 800765c:	3718      	adds	r7, #24
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
 8007662:	bf00      	nop
 8007664:	20000080 	.word	0x20000080

08007668 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007668:	b580      	push	{r7, lr}
 800766a:	b086      	sub	sp, #24
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007670:	2182      	movs	r1, #130	; 0x82
 8007672:	4818      	ldr	r0, [pc, #96]	; (80076d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007674:	f000 fcdf 	bl	8008036 <USBD_GetEpDesc>
 8007678:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800767a:	2101      	movs	r1, #1
 800767c:	4815      	ldr	r0, [pc, #84]	; (80076d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800767e:	f000 fcda 	bl	8008036 <USBD_GetEpDesc>
 8007682:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007684:	2181      	movs	r1, #129	; 0x81
 8007686:	4813      	ldr	r0, [pc, #76]	; (80076d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8007688:	f000 fcd5 	bl	8008036 <USBD_GetEpDesc>
 800768c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d002      	beq.n	800769a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	2210      	movs	r2, #16
 8007698:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d006      	beq.n	80076ae <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	2200      	movs	r2, #0
 80076a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076a8:	711a      	strb	r2, [r3, #4]
 80076aa:	2200      	movs	r2, #0
 80076ac:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d006      	beq.n	80076c2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2200      	movs	r2, #0
 80076b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80076bc:	711a      	strb	r2, [r3, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2243      	movs	r2, #67	; 0x43
 80076c6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80076c8:	4b02      	ldr	r3, [pc, #8]	; (80076d4 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3718      	adds	r7, #24
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}
 80076d2:	bf00      	nop
 80076d4:	20000080 	.word	0x20000080

080076d8 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	220a      	movs	r2, #10
 80076e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80076e6:	4b03      	ldr	r3, [pc, #12]	; (80076f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	370c      	adds	r7, #12
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr
 80076f4:	2000003c 	.word	0x2000003c

080076f8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d101      	bne.n	800770c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007708:	2303      	movs	r3, #3
 800770a:	e009      	b.n	8007720 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	33b0      	adds	r3, #176	; 0xb0
 8007716:	009b      	lsls	r3, r3, #2
 8007718:	4413      	add	r3, r2
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800771e:	2300      	movs	r3, #0
}
 8007720:	4618      	mov	r0, r3
 8007722:	370c      	adds	r7, #12
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800772c:	b480      	push	{r7}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	32b0      	adds	r2, #176	; 0xb0
 8007742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007746:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8007748:	697b      	ldr	r3, [r7, #20]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d101      	bne.n	8007752 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800774e:	2303      	movs	r3, #3
 8007750:	e008      	b.n	8007764 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800775a:	697b      	ldr	r3, [r7, #20]
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	371c      	adds	r7, #28
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	32b0      	adds	r2, #176	; 0xb0
 8007784:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007788:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d101      	bne.n	8007794 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8007790:	2303      	movs	r3, #3
 8007792:	e004      	b.n	800779e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
	...

080077ac <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80077ac:	b580      	push	{r7, lr}
 80077ae:	b084      	sub	sp, #16
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	32b0      	adds	r2, #176	; 0xb0
 80077be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077c2:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80077c4:	2301      	movs	r3, #1
 80077c6:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	32b0      	adds	r2, #176	; 0xb0
 80077d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80077da:	2303      	movs	r3, #3
 80077dc:	e025      	b.n	800782a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 80077de:	68bb      	ldr	r3, [r7, #8]
 80077e0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d11f      	bne.n	8007828 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	2201      	movs	r2, #1
 80077ec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 80077f0:	4b10      	ldr	r3, [pc, #64]	; (8007834 <USBD_CDC_TransmitPacket+0x88>)
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	f003 020f 	and.w	r2, r3, #15
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	4613      	mov	r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	4413      	add	r3, r2
 8007806:	009b      	lsls	r3, r3, #2
 8007808:	4403      	add	r3, r0
 800780a:	3318      	adds	r3, #24
 800780c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800780e:	4b09      	ldr	r3, [pc, #36]	; (8007834 <USBD_CDC_TransmitPacket+0x88>)
 8007810:	7819      	ldrb	r1, [r3, #0]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f001 ffb3 	bl	800978a <USBD_LL_Transmit>

    ret = USBD_OK;
 8007824:	2300      	movs	r3, #0
 8007826:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007828:	7bfb      	ldrb	r3, [r7, #15]
}
 800782a:	4618      	mov	r0, r3
 800782c:	3710      	adds	r7, #16
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	200000c3 	.word	0x200000c3

08007838 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	32b0      	adds	r2, #176	; 0xb0
 800784a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800784e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	32b0      	adds	r2, #176	; 0xb0
 800785a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d101      	bne.n	8007866 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8007862:	2303      	movs	r3, #3
 8007864:	e018      	b.n	8007898 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	7c1b      	ldrb	r3, [r3, #16]
 800786a:	2b00      	cmp	r3, #0
 800786c:	d10a      	bne.n	8007884 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800786e:	4b0c      	ldr	r3, [pc, #48]	; (80078a0 <USBD_CDC_ReceivePacket+0x68>)
 8007870:	7819      	ldrb	r1, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007878:	f44f 7300 	mov.w	r3, #512	; 0x200
 800787c:	6878      	ldr	r0, [r7, #4]
 800787e:	f001 ffa5 	bl	80097cc <USBD_LL_PrepareReceive>
 8007882:	e008      	b.n	8007896 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007884:	4b06      	ldr	r3, [pc, #24]	; (80078a0 <USBD_CDC_ReceivePacket+0x68>)
 8007886:	7819      	ldrb	r1, [r3, #0]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800788e:	2340      	movs	r3, #64	; 0x40
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f001 ff9b 	bl	80097cc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007896:	2300      	movs	r3, #0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3710      	adds	r7, #16
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}
 80078a0:	200000c4 	.word	0x200000c4

080078a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b086      	sub	sp, #24
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	60f8      	str	r0, [r7, #12]
 80078ac:	60b9      	str	r1, [r7, #8]
 80078ae:	4613      	mov	r3, r2
 80078b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d101      	bne.n	80078bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80078b8:	2303      	movs	r3, #3
 80078ba:	e01f      	b.n	80078fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	2200      	movs	r2, #0
 80078c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	2200      	movs	r2, #0
 80078c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	2200      	movs	r2, #0
 80078d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d003      	beq.n	80078e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2201      	movs	r2, #1
 80078e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	79fa      	ldrb	r2, [r7, #7]
 80078ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80078f0:	68f8      	ldr	r0, [r7, #12]
 80078f2:	f001 fe15 	bl	8009520 <USBD_LL_Init>
 80078f6:	4603      	mov	r3, r0
 80078f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80078fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
 800790c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800790e:	2300      	movs	r3, #0
 8007910:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d101      	bne.n	800791c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007918:	2303      	movs	r3, #3
 800791a:	e025      	b.n	8007968 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	32ae      	adds	r2, #174	; 0xae
 800792e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00f      	beq.n	8007958 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	32ae      	adds	r2, #174	; 0xae
 8007942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007946:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007948:	f107 020e 	add.w	r2, r7, #14
 800794c:	4610      	mov	r0, r2
 800794e:	4798      	blx	r3
 8007950:	4602      	mov	r2, r0
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800795e:	1c5a      	adds	r2, r3, #1
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007966:	2300      	movs	r3, #0
}
 8007968:	4618      	mov	r0, r3
 800796a:	3710      	adds	r7, #16
 800796c:	46bd      	mov	sp, r7
 800796e:	bd80      	pop	{r7, pc}

08007970 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007978:	6878      	ldr	r0, [r7, #4]
 800797a:	f001 fe1d 	bl	80095b8 <USBD_LL_Start>
 800797e:	4603      	mov	r3, r0
}
 8007980:	4618      	mov	r0, r3
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007988:	b480      	push	{r7}
 800798a:	b083      	sub	sp, #12
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007990:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007992:	4618      	mov	r0, r3
 8007994:	370c      	adds	r7, #12
 8007996:	46bd      	mov	sp, r7
 8007998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799c:	4770      	bx	lr

0800799e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800799e:	b580      	push	{r7, lr}
 80079a0:	b084      	sub	sp, #16
 80079a2:	af00      	add	r7, sp, #0
 80079a4:	6078      	str	r0, [r7, #4]
 80079a6:	460b      	mov	r3, r1
 80079a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80079aa:	2300      	movs	r3, #0
 80079ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d009      	beq.n	80079cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	78fa      	ldrb	r2, [r7, #3]
 80079c2:	4611      	mov	r1, r2
 80079c4:	6878      	ldr	r0, [r7, #4]
 80079c6:	4798      	blx	r3
 80079c8:	4603      	mov	r3, r0
 80079ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b084      	sub	sp, #16
 80079da:	af00      	add	r7, sp, #0
 80079dc:	6078      	str	r0, [r7, #4]
 80079de:	460b      	mov	r3, r1
 80079e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80079e2:	2300      	movs	r3, #0
 80079e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079ec:	685b      	ldr	r3, [r3, #4]
 80079ee:	78fa      	ldrb	r2, [r7, #3]
 80079f0:	4611      	mov	r1, r2
 80079f2:	6878      	ldr	r0, [r7, #4]
 80079f4:	4798      	blx	r3
 80079f6:	4603      	mov	r3, r0
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d001      	beq.n	8007a00 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80079fc:	2303      	movs	r3, #3
 80079fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007a00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3710      	adds	r7, #16
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b084      	sub	sp, #16
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	6078      	str	r0, [r7, #4]
 8007a12:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a1a:	6839      	ldr	r1, [r7, #0]
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	f001 f908 	bl	8008c32 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007a30:	461a      	mov	r2, r3
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a3e:	f003 031f 	and.w	r3, r3, #31
 8007a42:	2b02      	cmp	r3, #2
 8007a44:	d01a      	beq.n	8007a7c <USBD_LL_SetupStage+0x72>
 8007a46:	2b02      	cmp	r3, #2
 8007a48:	d822      	bhi.n	8007a90 <USBD_LL_SetupStage+0x86>
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d002      	beq.n	8007a54 <USBD_LL_SetupStage+0x4a>
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	d00a      	beq.n	8007a68 <USBD_LL_SetupStage+0x5e>
 8007a52:	e01d      	b.n	8007a90 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a5a:	4619      	mov	r1, r3
 8007a5c:	6878      	ldr	r0, [r7, #4]
 8007a5e:	f000 fb5f 	bl	8008120 <USBD_StdDevReq>
 8007a62:	4603      	mov	r3, r0
 8007a64:	73fb      	strb	r3, [r7, #15]
      break;
 8007a66:	e020      	b.n	8007aaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 fbc7 	bl	8008204 <USBD_StdItfReq>
 8007a76:	4603      	mov	r3, r0
 8007a78:	73fb      	strb	r3, [r7, #15]
      break;
 8007a7a:	e016      	b.n	8007aaa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007a82:	4619      	mov	r1, r3
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fc29 	bl	80082dc <USBD_StdEPReq>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	73fb      	strb	r3, [r7, #15]
      break;
 8007a8e:	e00c      	b.n	8007aaa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007a96:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f001 fdea 	bl	8009678 <USBD_LL_StallEP>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8007aa8:	bf00      	nop
  }

  return ret;
 8007aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3710      	adds	r7, #16
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b086      	sub	sp, #24
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	460b      	mov	r3, r1
 8007abe:	607a      	str	r2, [r7, #4]
 8007ac0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007ac6:	7afb      	ldrb	r3, [r7, #11]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d16e      	bne.n	8007baa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007ad2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	f040 8098 	bne.w	8007c10 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007ae0:	693b      	ldr	r3, [r7, #16]
 8007ae2:	689a      	ldr	r2, [r3, #8]
 8007ae4:	693b      	ldr	r3, [r7, #16]
 8007ae6:	68db      	ldr	r3, [r3, #12]
 8007ae8:	429a      	cmp	r2, r3
 8007aea:	d913      	bls.n	8007b14 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	689a      	ldr	r2, [r3, #8]
 8007af0:	693b      	ldr	r3, [r7, #16]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	1ad2      	subs	r2, r2, r3
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	693b      	ldr	r3, [r7, #16]
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	4293      	cmp	r3, r2
 8007b04:	bf28      	it	cs
 8007b06:	4613      	movcs	r3, r2
 8007b08:	461a      	mov	r2, r3
 8007b0a:	6879      	ldr	r1, [r7, #4]
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f001 f984 	bl	8008e1a <USBD_CtlContinueRx>
 8007b12:	e07d      	b.n	8007c10 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b1a:	f003 031f 	and.w	r3, r3, #31
 8007b1e:	2b02      	cmp	r3, #2
 8007b20:	d014      	beq.n	8007b4c <USBD_LL_DataOutStage+0x98>
 8007b22:	2b02      	cmp	r3, #2
 8007b24:	d81d      	bhi.n	8007b62 <USBD_LL_DataOutStage+0xae>
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <USBD_LL_DataOutStage+0x7c>
 8007b2a:	2b01      	cmp	r3, #1
 8007b2c:	d003      	beq.n	8007b36 <USBD_LL_DataOutStage+0x82>
 8007b2e:	e018      	b.n	8007b62 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	75bb      	strb	r3, [r7, #22]
            break;
 8007b34:	e018      	b.n	8007b68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	4619      	mov	r1, r3
 8007b40:	68f8      	ldr	r0, [r7, #12]
 8007b42:	f000 fa5e 	bl	8008002 <USBD_CoreFindIF>
 8007b46:	4603      	mov	r3, r0
 8007b48:	75bb      	strb	r3, [r7, #22]
            break;
 8007b4a:	e00d      	b.n	8007b68 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	4619      	mov	r1, r3
 8007b56:	68f8      	ldr	r0, [r7, #12]
 8007b58:	f000 fa60 	bl	800801c <USBD_CoreFindEP>
 8007b5c:	4603      	mov	r3, r0
 8007b5e:	75bb      	strb	r3, [r7, #22]
            break;
 8007b60:	e002      	b.n	8007b68 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007b62:	2300      	movs	r3, #0
 8007b64:	75bb      	strb	r3, [r7, #22]
            break;
 8007b66:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007b68:	7dbb      	ldrb	r3, [r7, #22]
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d119      	bne.n	8007ba2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b74:	b2db      	uxtb	r3, r3
 8007b76:	2b03      	cmp	r3, #3
 8007b78:	d113      	bne.n	8007ba2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007b7a:	7dba      	ldrb	r2, [r7, #22]
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	32ae      	adds	r2, #174	; 0xae
 8007b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b84:	691b      	ldr	r3, [r3, #16]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d00b      	beq.n	8007ba2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007b8a:	7dba      	ldrb	r2, [r7, #22]
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007b92:	7dba      	ldrb	r2, [r7, #22]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	32ae      	adds	r2, #174	; 0xae
 8007b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	68f8      	ldr	r0, [r7, #12]
 8007ba0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007ba2:	68f8      	ldr	r0, [r7, #12]
 8007ba4:	f001 f94a 	bl	8008e3c <USBD_CtlSendStatus>
 8007ba8:	e032      	b.n	8007c10 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007baa:	7afb      	ldrb	r3, [r7, #11]
 8007bac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	4619      	mov	r1, r3
 8007bb4:	68f8      	ldr	r0, [r7, #12]
 8007bb6:	f000 fa31 	bl	800801c <USBD_CoreFindEP>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007bbe:	7dbb      	ldrb	r3, [r7, #22]
 8007bc0:	2bff      	cmp	r3, #255	; 0xff
 8007bc2:	d025      	beq.n	8007c10 <USBD_LL_DataOutStage+0x15c>
 8007bc4:	7dbb      	ldrb	r3, [r7, #22]
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d122      	bne.n	8007c10 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007bd0:	b2db      	uxtb	r3, r3
 8007bd2:	2b03      	cmp	r3, #3
 8007bd4:	d117      	bne.n	8007c06 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007bd6:	7dba      	ldrb	r2, [r7, #22]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	32ae      	adds	r2, #174	; 0xae
 8007bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007be0:	699b      	ldr	r3, [r3, #24]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00f      	beq.n	8007c06 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007be6:	7dba      	ldrb	r2, [r7, #22]
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007bee:	7dba      	ldrb	r2, [r7, #22]
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	32ae      	adds	r2, #174	; 0xae
 8007bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bf8:	699b      	ldr	r3, [r3, #24]
 8007bfa:	7afa      	ldrb	r2, [r7, #11]
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	4798      	blx	r3
 8007c02:	4603      	mov	r3, r0
 8007c04:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007c06:	7dfb      	ldrb	r3, [r7, #23]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d001      	beq.n	8007c10 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007c0c:	7dfb      	ldrb	r3, [r7, #23]
 8007c0e:	e000      	b.n	8007c12 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b086      	sub	sp, #24
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	60f8      	str	r0, [r7, #12]
 8007c22:	460b      	mov	r3, r1
 8007c24:	607a      	str	r2, [r7, #4]
 8007c26:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007c28:	7afb      	ldrb	r3, [r7, #11]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d16f      	bne.n	8007d0e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	3314      	adds	r3, #20
 8007c32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c3a:	2b02      	cmp	r3, #2
 8007c3c:	d15a      	bne.n	8007cf4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	689a      	ldr	r2, [r3, #8]
 8007c42:	693b      	ldr	r3, [r7, #16]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d914      	bls.n	8007c74 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	693b      	ldr	r3, [r7, #16]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	1ad2      	subs	r2, r2, r3
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	461a      	mov	r2, r3
 8007c5e:	6879      	ldr	r1, [r7, #4]
 8007c60:	68f8      	ldr	r0, [r7, #12]
 8007c62:	f001 f8ac 	bl	8008dbe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007c66:	2300      	movs	r3, #0
 8007c68:	2200      	movs	r2, #0
 8007c6a:	2100      	movs	r1, #0
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f001 fdad 	bl	80097cc <USBD_LL_PrepareReceive>
 8007c72:	e03f      	b.n	8007cf4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007c74:	693b      	ldr	r3, [r7, #16]
 8007c76:	68da      	ldr	r2, [r3, #12]
 8007c78:	693b      	ldr	r3, [r7, #16]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d11c      	bne.n	8007cba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	685a      	ldr	r2, [r3, #4]
 8007c84:	693b      	ldr	r3, [r7, #16]
 8007c86:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d316      	bcc.n	8007cba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	685a      	ldr	r2, [r3, #4]
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d20f      	bcs.n	8007cba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	2100      	movs	r1, #0
 8007c9e:	68f8      	ldr	r0, [r7, #12]
 8007ca0:	f001 f88d 	bl	8008dbe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007cac:	2300      	movs	r3, #0
 8007cae:	2200      	movs	r2, #0
 8007cb0:	2100      	movs	r1, #0
 8007cb2:	68f8      	ldr	r0, [r7, #12]
 8007cb4:	f001 fd8a 	bl	80097cc <USBD_LL_PrepareReceive>
 8007cb8:	e01c      	b.n	8007cf4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	2b03      	cmp	r3, #3
 8007cc4:	d10f      	bne.n	8007ce6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d009      	beq.n	8007ce6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ce0:	68db      	ldr	r3, [r3, #12]
 8007ce2:	68f8      	ldr	r0, [r7, #12]
 8007ce4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007ce6:	2180      	movs	r1, #128	; 0x80
 8007ce8:	68f8      	ldr	r0, [r7, #12]
 8007cea:	f001 fcc5 	bl	8009678 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007cee:	68f8      	ldr	r0, [r7, #12]
 8007cf0:	f001 f8b7 	bl	8008e62 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d03a      	beq.n	8007d74 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	f7ff fe42 	bl	8007988 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007d0c:	e032      	b.n	8007d74 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007d0e:	7afb      	ldrb	r3, [r7, #11]
 8007d10:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007d14:	b2db      	uxtb	r3, r3
 8007d16:	4619      	mov	r1, r3
 8007d18:	68f8      	ldr	r0, [r7, #12]
 8007d1a:	f000 f97f 	bl	800801c <USBD_CoreFindEP>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d22:	7dfb      	ldrb	r3, [r7, #23]
 8007d24:	2bff      	cmp	r3, #255	; 0xff
 8007d26:	d025      	beq.n	8007d74 <USBD_LL_DataInStage+0x15a>
 8007d28:	7dfb      	ldrb	r3, [r7, #23]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d122      	bne.n	8007d74 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b03      	cmp	r3, #3
 8007d38:	d11c      	bne.n	8007d74 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007d3a:	7dfa      	ldrb	r2, [r7, #23]
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	32ae      	adds	r2, #174	; 0xae
 8007d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d44:	695b      	ldr	r3, [r3, #20]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d014      	beq.n	8007d74 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007d4a:	7dfa      	ldrb	r2, [r7, #23]
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007d52:	7dfa      	ldrb	r2, [r7, #23]
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	32ae      	adds	r2, #174	; 0xae
 8007d58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d5c:	695b      	ldr	r3, [r3, #20]
 8007d5e:	7afa      	ldrb	r2, [r7, #11]
 8007d60:	4611      	mov	r1, r2
 8007d62:	68f8      	ldr	r0, [r7, #12]
 8007d64:	4798      	blx	r3
 8007d66:	4603      	mov	r3, r0
 8007d68:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007d6a:	7dbb      	ldrb	r3, [r7, #22]
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007d70:	7dbb      	ldrb	r3, [r7, #22]
 8007d72:	e000      	b.n	8007d76 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	4618      	mov	r0, r3
 8007d78:	3718      	adds	r7, #24
 8007d7a:	46bd      	mov	sp, r7
 8007d7c:	bd80      	pop	{r7, pc}

08007d7e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007d7e:	b580      	push	{r7, lr}
 8007d80:	b084      	sub	sp, #16
 8007d82:	af00      	add	r7, sp, #0
 8007d84:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007d86:	2300      	movs	r3, #0
 8007d88:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2201      	movs	r2, #1
 8007d8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2200      	movs	r2, #0
 8007d96:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2200      	movs	r2, #0
 8007da4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2200      	movs	r2, #0
 8007dac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d014      	beq.n	8007de4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d00e      	beq.n	8007de4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	687a      	ldr	r2, [r7, #4]
 8007dd0:	6852      	ldr	r2, [r2, #4]
 8007dd2:	b2d2      	uxtb	r2, r2
 8007dd4:	4611      	mov	r1, r2
 8007dd6:	6878      	ldr	r0, [r7, #4]
 8007dd8:	4798      	blx	r3
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d001      	beq.n	8007de4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007de0:	2303      	movs	r3, #3
 8007de2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007de4:	2340      	movs	r3, #64	; 0x40
 8007de6:	2200      	movs	r2, #0
 8007de8:	2100      	movs	r1, #0
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f001 fbff 	bl	80095ee <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	2201      	movs	r2, #1
 8007df4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2240      	movs	r2, #64	; 0x40
 8007dfc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007e00:	2340      	movs	r3, #64	; 0x40
 8007e02:	2200      	movs	r2, #0
 8007e04:	2180      	movs	r1, #128	; 0x80
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f001 fbf1 	bl	80095ee <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2240      	movs	r2, #64	; 0x40
 8007e16:	621a      	str	r2, [r3, #32]

  return ret;
 8007e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3710      	adds	r7, #16
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}

08007e22 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007e22:	b480      	push	{r7}
 8007e24:	b083      	sub	sp, #12
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
 8007e2a:	460b      	mov	r3, r1
 8007e2c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	78fa      	ldrb	r2, [r7, #3]
 8007e32:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007e34:	2300      	movs	r3, #0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2204      	movs	r2, #4
 8007e5c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007e60:	2300      	movs	r3, #0
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	370c      	adds	r7, #12
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr

08007e6e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007e6e:	b480      	push	{r7}
 8007e70:	b083      	sub	sp, #12
 8007e72:	af00      	add	r7, sp, #0
 8007e74:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e7c:	b2db      	uxtb	r3, r3
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	d106      	bne.n	8007e90 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	370c      	adds	r7, #12
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr

08007e9e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007e9e:	b580      	push	{r7, lr}
 8007ea0:	b082      	sub	sp, #8
 8007ea2:	af00      	add	r7, sp, #0
 8007ea4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	2b03      	cmp	r3, #3
 8007eb0:	d110      	bne.n	8007ed4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00b      	beq.n	8007ed4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ec2:	69db      	ldr	r3, [r3, #28]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d005      	beq.n	8007ed4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3708      	adds	r7, #8
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b082      	sub	sp, #8
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
 8007ee6:	460b      	mov	r3, r1
 8007ee8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	32ae      	adds	r2, #174	; 0xae
 8007ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d101      	bne.n	8007f00 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007efc:	2303      	movs	r3, #3
 8007efe:	e01c      	b.n	8007f3a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f06:	b2db      	uxtb	r3, r3
 8007f08:	2b03      	cmp	r3, #3
 8007f0a:	d115      	bne.n	8007f38 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	32ae      	adds	r2, #174	; 0xae
 8007f16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f1a:	6a1b      	ldr	r3, [r3, #32]
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d00b      	beq.n	8007f38 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	32ae      	adds	r2, #174	; 0xae
 8007f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f2e:	6a1b      	ldr	r3, [r3, #32]
 8007f30:	78fa      	ldrb	r2, [r7, #3]
 8007f32:	4611      	mov	r1, r2
 8007f34:	6878      	ldr	r0, [r7, #4]
 8007f36:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3708      	adds	r7, #8
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}

08007f42 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007f42:	b580      	push	{r7, lr}
 8007f44:	b082      	sub	sp, #8
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
 8007f4a:	460b      	mov	r3, r1
 8007f4c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	32ae      	adds	r2, #174	; 0xae
 8007f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d101      	bne.n	8007f64 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007f60:	2303      	movs	r3, #3
 8007f62:	e01c      	b.n	8007f9e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	2b03      	cmp	r3, #3
 8007f6e:	d115      	bne.n	8007f9c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	32ae      	adds	r2, #174	; 0xae
 8007f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d00b      	beq.n	8007f9c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	32ae      	adds	r2, #174	; 0xae
 8007f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f94:	78fa      	ldrb	r2, [r7, #3]
 8007f96:	4611      	mov	r1, r2
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007fa6:	b480      	push	{r7}
 8007fa8:	b083      	sub	sp, #12
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	370c      	adds	r7, #12
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fba:	4770      	bx	lr

08007fbc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b084      	sub	sp, #16
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	2201      	movs	r2, #1
 8007fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00e      	beq.n	8007ff8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	6852      	ldr	r2, [r2, #4]
 8007fe6:	b2d2      	uxtb	r2, r2
 8007fe8:	4611      	mov	r1, r2
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	4798      	blx	r3
 8007fee:	4603      	mov	r3, r0
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d001      	beq.n	8007ff8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007ff8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	3710      	adds	r7, #16
 8007ffe:	46bd      	mov	sp, r7
 8008000:	bd80      	pop	{r7, pc}

08008002 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008002:	b480      	push	{r7}
 8008004:	b083      	sub	sp, #12
 8008006:	af00      	add	r7, sp, #0
 8008008:	6078      	str	r0, [r7, #4]
 800800a:	460b      	mov	r3, r1
 800800c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800800e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008010:	4618      	mov	r0, r3
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
 8008024:	460b      	mov	r3, r1
 8008026:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008028:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800802a:	4618      	mov	r0, r3
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008036:	b580      	push	{r7, lr}
 8008038:	b086      	sub	sp, #24
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	460b      	mov	r3, r1
 8008040:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800804a:	2300      	movs	r3, #0
 800804c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	885b      	ldrh	r3, [r3, #2]
 8008052:	b29a      	uxth	r2, r3
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	781b      	ldrb	r3, [r3, #0]
 8008058:	b29b      	uxth	r3, r3
 800805a:	429a      	cmp	r2, r3
 800805c:	d920      	bls.n	80080a0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	781b      	ldrb	r3, [r3, #0]
 8008062:	b29b      	uxth	r3, r3
 8008064:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008066:	e013      	b.n	8008090 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008068:	f107 030a 	add.w	r3, r7, #10
 800806c:	4619      	mov	r1, r3
 800806e:	6978      	ldr	r0, [r7, #20]
 8008070:	f000 f81b 	bl	80080aa <USBD_GetNextDesc>
 8008074:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	785b      	ldrb	r3, [r3, #1]
 800807a:	2b05      	cmp	r3, #5
 800807c:	d108      	bne.n	8008090 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	789b      	ldrb	r3, [r3, #2]
 8008086:	78fa      	ldrb	r2, [r7, #3]
 8008088:	429a      	cmp	r2, r3
 800808a:	d008      	beq.n	800809e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800808c:	2300      	movs	r3, #0
 800808e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	885b      	ldrh	r3, [r3, #2]
 8008094:	b29a      	uxth	r2, r3
 8008096:	897b      	ldrh	r3, [r7, #10]
 8008098:	429a      	cmp	r2, r3
 800809a:	d8e5      	bhi.n	8008068 <USBD_GetEpDesc+0x32>
 800809c:	e000      	b.n	80080a0 <USBD_GetEpDesc+0x6a>
          break;
 800809e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80080a0:	693b      	ldr	r3, [r7, #16]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}

080080aa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80080aa:	b480      	push	{r7}
 80080ac:	b085      	sub	sp, #20
 80080ae:	af00      	add	r7, sp, #0
 80080b0:	6078      	str	r0, [r7, #4]
 80080b2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	881a      	ldrh	r2, [r3, #0]
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	b29b      	uxth	r3, r3
 80080c2:	4413      	add	r3, r2
 80080c4:	b29a      	uxth	r2, r3
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	781b      	ldrb	r3, [r3, #0]
 80080ce:	461a      	mov	r2, r3
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	4413      	add	r3, r2
 80080d4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80080d6:	68fb      	ldr	r3, [r7, #12]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3714      	adds	r7, #20
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80080e4:	b480      	push	{r7}
 80080e6:	b087      	sub	sp, #28
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	781b      	ldrb	r3, [r3, #0]
 80080f4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	3301      	adds	r3, #1
 80080fa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008102:	8a3b      	ldrh	r3, [r7, #16]
 8008104:	021b      	lsls	r3, r3, #8
 8008106:	b21a      	sxth	r2, r3
 8008108:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800810c:	4313      	orrs	r3, r2
 800810e:	b21b      	sxth	r3, r3
 8008110:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008112:	89fb      	ldrh	r3, [r7, #14]
}
 8008114:	4618      	mov	r0, r3
 8008116:	371c      	adds	r7, #28
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b084      	sub	sp, #16
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800812a:	2300      	movs	r3, #0
 800812c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008136:	2b40      	cmp	r3, #64	; 0x40
 8008138:	d005      	beq.n	8008146 <USBD_StdDevReq+0x26>
 800813a:	2b40      	cmp	r3, #64	; 0x40
 800813c:	d857      	bhi.n	80081ee <USBD_StdDevReq+0xce>
 800813e:	2b00      	cmp	r3, #0
 8008140:	d00f      	beq.n	8008162 <USBD_StdDevReq+0x42>
 8008142:	2b20      	cmp	r3, #32
 8008144:	d153      	bne.n	80081ee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	32ae      	adds	r2, #174	; 0xae
 8008150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	6839      	ldr	r1, [r7, #0]
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	4798      	blx	r3
 800815c:	4603      	mov	r3, r0
 800815e:	73fb      	strb	r3, [r7, #15]
      break;
 8008160:	e04a      	b.n	80081f8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	785b      	ldrb	r3, [r3, #1]
 8008166:	2b09      	cmp	r3, #9
 8008168:	d83b      	bhi.n	80081e2 <USBD_StdDevReq+0xc2>
 800816a:	a201      	add	r2, pc, #4	; (adr r2, 8008170 <USBD_StdDevReq+0x50>)
 800816c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008170:	080081c5 	.word	0x080081c5
 8008174:	080081d9 	.word	0x080081d9
 8008178:	080081e3 	.word	0x080081e3
 800817c:	080081cf 	.word	0x080081cf
 8008180:	080081e3 	.word	0x080081e3
 8008184:	080081a3 	.word	0x080081a3
 8008188:	08008199 	.word	0x08008199
 800818c:	080081e3 	.word	0x080081e3
 8008190:	080081bb 	.word	0x080081bb
 8008194:	080081ad 	.word	0x080081ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008198:	6839      	ldr	r1, [r7, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 fa3c 	bl	8008618 <USBD_GetDescriptor>
          break;
 80081a0:	e024      	b.n	80081ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80081a2:	6839      	ldr	r1, [r7, #0]
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fba1 	bl	80088ec <USBD_SetAddress>
          break;
 80081aa:	e01f      	b.n	80081ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fbe0 	bl	8008974 <USBD_SetConfig>
 80081b4:	4603      	mov	r3, r0
 80081b6:	73fb      	strb	r3, [r7, #15]
          break;
 80081b8:	e018      	b.n	80081ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80081ba:	6839      	ldr	r1, [r7, #0]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fc83 	bl	8008ac8 <USBD_GetConfig>
          break;
 80081c2:	e013      	b.n	80081ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fcb4 	bl	8008b34 <USBD_GetStatus>
          break;
 80081cc:	e00e      	b.n	80081ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80081ce:	6839      	ldr	r1, [r7, #0]
 80081d0:	6878      	ldr	r0, [r7, #4]
 80081d2:	f000 fce3 	bl	8008b9c <USBD_SetFeature>
          break;
 80081d6:	e009      	b.n	80081ec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80081d8:	6839      	ldr	r1, [r7, #0]
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f000 fd07 	bl	8008bee <USBD_ClrFeature>
          break;
 80081e0:	e004      	b.n	80081ec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80081e2:	6839      	ldr	r1, [r7, #0]
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f000 fd5e 	bl	8008ca6 <USBD_CtlError>
          break;
 80081ea:	bf00      	nop
      }
      break;
 80081ec:	e004      	b.n	80081f8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80081ee:	6839      	ldr	r1, [r7, #0]
 80081f0:	6878      	ldr	r0, [r7, #4]
 80081f2:	f000 fd58 	bl	8008ca6 <USBD_CtlError>
      break;
 80081f6:	bf00      	nop
  }

  return ret;
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3710      	adds	r7, #16
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop

08008204 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800820e:	2300      	movs	r3, #0
 8008210:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800821a:	2b40      	cmp	r3, #64	; 0x40
 800821c:	d005      	beq.n	800822a <USBD_StdItfReq+0x26>
 800821e:	2b40      	cmp	r3, #64	; 0x40
 8008220:	d852      	bhi.n	80082c8 <USBD_StdItfReq+0xc4>
 8008222:	2b00      	cmp	r3, #0
 8008224:	d001      	beq.n	800822a <USBD_StdItfReq+0x26>
 8008226:	2b20      	cmp	r3, #32
 8008228:	d14e      	bne.n	80082c8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008230:	b2db      	uxtb	r3, r3
 8008232:	3b01      	subs	r3, #1
 8008234:	2b02      	cmp	r3, #2
 8008236:	d840      	bhi.n	80082ba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	889b      	ldrh	r3, [r3, #4]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	2b01      	cmp	r3, #1
 8008240:	d836      	bhi.n	80082b0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	889b      	ldrh	r3, [r3, #4]
 8008246:	b2db      	uxtb	r3, r3
 8008248:	4619      	mov	r1, r3
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f7ff fed9 	bl	8008002 <USBD_CoreFindIF>
 8008250:	4603      	mov	r3, r0
 8008252:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008254:	7bbb      	ldrb	r3, [r7, #14]
 8008256:	2bff      	cmp	r3, #255	; 0xff
 8008258:	d01d      	beq.n	8008296 <USBD_StdItfReq+0x92>
 800825a:	7bbb      	ldrb	r3, [r7, #14]
 800825c:	2b00      	cmp	r3, #0
 800825e:	d11a      	bne.n	8008296 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8008260:	7bba      	ldrb	r2, [r7, #14]
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	32ae      	adds	r2, #174	; 0xae
 8008266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800826a:	689b      	ldr	r3, [r3, #8]
 800826c:	2b00      	cmp	r3, #0
 800826e:	d00f      	beq.n	8008290 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8008270:	7bba      	ldrb	r2, [r7, #14]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008278:	7bba      	ldrb	r2, [r7, #14]
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	32ae      	adds	r2, #174	; 0xae
 800827e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	6839      	ldr	r1, [r7, #0]
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	4798      	blx	r3
 800828a:	4603      	mov	r3, r0
 800828c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800828e:	e004      	b.n	800829a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8008290:	2303      	movs	r3, #3
 8008292:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8008294:	e001      	b.n	800829a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8008296:	2303      	movs	r3, #3
 8008298:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	88db      	ldrh	r3, [r3, #6]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d110      	bne.n	80082c4 <USBD_StdItfReq+0xc0>
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d10d      	bne.n	80082c4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80082a8:	6878      	ldr	r0, [r7, #4]
 80082aa:	f000 fdc7 	bl	8008e3c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80082ae:	e009      	b.n	80082c4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80082b0:	6839      	ldr	r1, [r7, #0]
 80082b2:	6878      	ldr	r0, [r7, #4]
 80082b4:	f000 fcf7 	bl	8008ca6 <USBD_CtlError>
          break;
 80082b8:	e004      	b.n	80082c4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80082ba:	6839      	ldr	r1, [r7, #0]
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f000 fcf2 	bl	8008ca6 <USBD_CtlError>
          break;
 80082c2:	e000      	b.n	80082c6 <USBD_StdItfReq+0xc2>
          break;
 80082c4:	bf00      	nop
      }
      break;
 80082c6:	e004      	b.n	80082d2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80082c8:	6839      	ldr	r1, [r7, #0]
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fceb 	bl	8008ca6 <USBD_CtlError>
      break;
 80082d0:	bf00      	nop
  }

  return ret;
 80082d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
 80082e4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80082e6:	2300      	movs	r3, #0
 80082e8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	889b      	ldrh	r3, [r3, #4]
 80082ee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80082f8:	2b40      	cmp	r3, #64	; 0x40
 80082fa:	d007      	beq.n	800830c <USBD_StdEPReq+0x30>
 80082fc:	2b40      	cmp	r3, #64	; 0x40
 80082fe:	f200 817f 	bhi.w	8008600 <USBD_StdEPReq+0x324>
 8008302:	2b00      	cmp	r3, #0
 8008304:	d02a      	beq.n	800835c <USBD_StdEPReq+0x80>
 8008306:	2b20      	cmp	r3, #32
 8008308:	f040 817a 	bne.w	8008600 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800830c:	7bbb      	ldrb	r3, [r7, #14]
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f7ff fe83 	bl	800801c <USBD_CoreFindEP>
 8008316:	4603      	mov	r3, r0
 8008318:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800831a:	7b7b      	ldrb	r3, [r7, #13]
 800831c:	2bff      	cmp	r3, #255	; 0xff
 800831e:	f000 8174 	beq.w	800860a <USBD_StdEPReq+0x32e>
 8008322:	7b7b      	ldrb	r3, [r7, #13]
 8008324:	2b00      	cmp	r3, #0
 8008326:	f040 8170 	bne.w	800860a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800832a:	7b7a      	ldrb	r2, [r7, #13]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008332:	7b7a      	ldrb	r2, [r7, #13]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	32ae      	adds	r2, #174	; 0xae
 8008338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800833c:	689b      	ldr	r3, [r3, #8]
 800833e:	2b00      	cmp	r3, #0
 8008340:	f000 8163 	beq.w	800860a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8008344:	7b7a      	ldrb	r2, [r7, #13]
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	32ae      	adds	r2, #174	; 0xae
 800834a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	6839      	ldr	r1, [r7, #0]
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	4798      	blx	r3
 8008356:	4603      	mov	r3, r0
 8008358:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800835a:	e156      	b.n	800860a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800835c:	683b      	ldr	r3, [r7, #0]
 800835e:	785b      	ldrb	r3, [r3, #1]
 8008360:	2b03      	cmp	r3, #3
 8008362:	d008      	beq.n	8008376 <USBD_StdEPReq+0x9a>
 8008364:	2b03      	cmp	r3, #3
 8008366:	f300 8145 	bgt.w	80085f4 <USBD_StdEPReq+0x318>
 800836a:	2b00      	cmp	r3, #0
 800836c:	f000 809b 	beq.w	80084a6 <USBD_StdEPReq+0x1ca>
 8008370:	2b01      	cmp	r3, #1
 8008372:	d03c      	beq.n	80083ee <USBD_StdEPReq+0x112>
 8008374:	e13e      	b.n	80085f4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b02      	cmp	r3, #2
 8008380:	d002      	beq.n	8008388 <USBD_StdEPReq+0xac>
 8008382:	2b03      	cmp	r3, #3
 8008384:	d016      	beq.n	80083b4 <USBD_StdEPReq+0xd8>
 8008386:	e02c      	b.n	80083e2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008388:	7bbb      	ldrb	r3, [r7, #14]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d00d      	beq.n	80083aa <USBD_StdEPReq+0xce>
 800838e:	7bbb      	ldrb	r3, [r7, #14]
 8008390:	2b80      	cmp	r3, #128	; 0x80
 8008392:	d00a      	beq.n	80083aa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008394:	7bbb      	ldrb	r3, [r7, #14]
 8008396:	4619      	mov	r1, r3
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f001 f96d 	bl	8009678 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800839e:	2180      	movs	r1, #128	; 0x80
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f001 f969 	bl	8009678 <USBD_LL_StallEP>
 80083a6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80083a8:	e020      	b.n	80083ec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80083aa:	6839      	ldr	r1, [r7, #0]
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f000 fc7a 	bl	8008ca6 <USBD_CtlError>
              break;
 80083b2:	e01b      	b.n	80083ec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	885b      	ldrh	r3, [r3, #2]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d10e      	bne.n	80083da <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80083bc:	7bbb      	ldrb	r3, [r7, #14]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00b      	beq.n	80083da <USBD_StdEPReq+0xfe>
 80083c2:	7bbb      	ldrb	r3, [r7, #14]
 80083c4:	2b80      	cmp	r3, #128	; 0x80
 80083c6:	d008      	beq.n	80083da <USBD_StdEPReq+0xfe>
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	88db      	ldrh	r3, [r3, #6]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d104      	bne.n	80083da <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80083d0:	7bbb      	ldrb	r3, [r7, #14]
 80083d2:	4619      	mov	r1, r3
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f001 f94f 	bl	8009678 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 fd2e 	bl	8008e3c <USBD_CtlSendStatus>

              break;
 80083e0:	e004      	b.n	80083ec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80083e2:	6839      	ldr	r1, [r7, #0]
 80083e4:	6878      	ldr	r0, [r7, #4]
 80083e6:	f000 fc5e 	bl	8008ca6 <USBD_CtlError>
              break;
 80083ea:	bf00      	nop
          }
          break;
 80083ec:	e107      	b.n	80085fe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b02      	cmp	r3, #2
 80083f8:	d002      	beq.n	8008400 <USBD_StdEPReq+0x124>
 80083fa:	2b03      	cmp	r3, #3
 80083fc:	d016      	beq.n	800842c <USBD_StdEPReq+0x150>
 80083fe:	e04b      	b.n	8008498 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008400:	7bbb      	ldrb	r3, [r7, #14]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d00d      	beq.n	8008422 <USBD_StdEPReq+0x146>
 8008406:	7bbb      	ldrb	r3, [r7, #14]
 8008408:	2b80      	cmp	r3, #128	; 0x80
 800840a:	d00a      	beq.n	8008422 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800840c:	7bbb      	ldrb	r3, [r7, #14]
 800840e:	4619      	mov	r1, r3
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f001 f931 	bl	8009678 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008416:	2180      	movs	r1, #128	; 0x80
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f001 f92d 	bl	8009678 <USBD_LL_StallEP>
 800841e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008420:	e040      	b.n	80084a4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008422:	6839      	ldr	r1, [r7, #0]
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f000 fc3e 	bl	8008ca6 <USBD_CtlError>
              break;
 800842a:	e03b      	b.n	80084a4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800842c:	683b      	ldr	r3, [r7, #0]
 800842e:	885b      	ldrh	r3, [r3, #2]
 8008430:	2b00      	cmp	r3, #0
 8008432:	d136      	bne.n	80084a2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008434:	7bbb      	ldrb	r3, [r7, #14]
 8008436:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800843a:	2b00      	cmp	r3, #0
 800843c:	d004      	beq.n	8008448 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800843e:	7bbb      	ldrb	r3, [r7, #14]
 8008440:	4619      	mov	r1, r3
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f001 f937 	bl	80096b6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008448:	6878      	ldr	r0, [r7, #4]
 800844a:	f000 fcf7 	bl	8008e3c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800844e:	7bbb      	ldrb	r3, [r7, #14]
 8008450:	4619      	mov	r1, r3
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f7ff fde2 	bl	800801c <USBD_CoreFindEP>
 8008458:	4603      	mov	r3, r0
 800845a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800845c:	7b7b      	ldrb	r3, [r7, #13]
 800845e:	2bff      	cmp	r3, #255	; 0xff
 8008460:	d01f      	beq.n	80084a2 <USBD_StdEPReq+0x1c6>
 8008462:	7b7b      	ldrb	r3, [r7, #13]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d11c      	bne.n	80084a2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8008468:	7b7a      	ldrb	r2, [r7, #13]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008470:	7b7a      	ldrb	r2, [r7, #13]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	32ae      	adds	r2, #174	; 0xae
 8008476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d010      	beq.n	80084a2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008480:	7b7a      	ldrb	r2, [r7, #13]
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	32ae      	adds	r2, #174	; 0xae
 8008486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800848a:	689b      	ldr	r3, [r3, #8]
 800848c:	6839      	ldr	r1, [r7, #0]
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	4798      	blx	r3
 8008492:	4603      	mov	r3, r0
 8008494:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8008496:	e004      	b.n	80084a2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8008498:	6839      	ldr	r1, [r7, #0]
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fc03 	bl	8008ca6 <USBD_CtlError>
              break;
 80084a0:	e000      	b.n	80084a4 <USBD_StdEPReq+0x1c8>
              break;
 80084a2:	bf00      	nop
          }
          break;
 80084a4:	e0ab      	b.n	80085fe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084ac:	b2db      	uxtb	r3, r3
 80084ae:	2b02      	cmp	r3, #2
 80084b0:	d002      	beq.n	80084b8 <USBD_StdEPReq+0x1dc>
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d032      	beq.n	800851c <USBD_StdEPReq+0x240>
 80084b6:	e097      	b.n	80085e8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084b8:	7bbb      	ldrb	r3, [r7, #14]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d007      	beq.n	80084ce <USBD_StdEPReq+0x1f2>
 80084be:	7bbb      	ldrb	r3, [r7, #14]
 80084c0:	2b80      	cmp	r3, #128	; 0x80
 80084c2:	d004      	beq.n	80084ce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80084c4:	6839      	ldr	r1, [r7, #0]
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 fbed 	bl	8008ca6 <USBD_CtlError>
                break;
 80084cc:	e091      	b.n	80085f2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	da0b      	bge.n	80084ee <USBD_StdEPReq+0x212>
 80084d6:	7bbb      	ldrb	r3, [r7, #14]
 80084d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084dc:	4613      	mov	r3, r2
 80084de:	009b      	lsls	r3, r3, #2
 80084e0:	4413      	add	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	3310      	adds	r3, #16
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	4413      	add	r3, r2
 80084ea:	3304      	adds	r3, #4
 80084ec:	e00b      	b.n	8008506 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80084f4:	4613      	mov	r3, r2
 80084f6:	009b      	lsls	r3, r3, #2
 80084f8:	4413      	add	r3, r2
 80084fa:	009b      	lsls	r3, r3, #2
 80084fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	4413      	add	r3, r2
 8008504:	3304      	adds	r3, #4
 8008506:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	2200      	movs	r2, #0
 800850c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	2202      	movs	r2, #2
 8008512:	4619      	mov	r1, r3
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f000 fc37 	bl	8008d88 <USBD_CtlSendData>
              break;
 800851a:	e06a      	b.n	80085f2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800851c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008520:	2b00      	cmp	r3, #0
 8008522:	da11      	bge.n	8008548 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008524:	7bbb      	ldrb	r3, [r7, #14]
 8008526:	f003 020f 	and.w	r2, r3, #15
 800852a:	6879      	ldr	r1, [r7, #4]
 800852c:	4613      	mov	r3, r2
 800852e:	009b      	lsls	r3, r3, #2
 8008530:	4413      	add	r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	440b      	add	r3, r1
 8008536:	3324      	adds	r3, #36	; 0x24
 8008538:	881b      	ldrh	r3, [r3, #0]
 800853a:	2b00      	cmp	r3, #0
 800853c:	d117      	bne.n	800856e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800853e:	6839      	ldr	r1, [r7, #0]
 8008540:	6878      	ldr	r0, [r7, #4]
 8008542:	f000 fbb0 	bl	8008ca6 <USBD_CtlError>
                  break;
 8008546:	e054      	b.n	80085f2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008548:	7bbb      	ldrb	r3, [r7, #14]
 800854a:	f003 020f 	and.w	r2, r3, #15
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	4613      	mov	r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4413      	add	r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	440b      	add	r3, r1
 800855a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800855e:	881b      	ldrh	r3, [r3, #0]
 8008560:	2b00      	cmp	r3, #0
 8008562:	d104      	bne.n	800856e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008564:	6839      	ldr	r1, [r7, #0]
 8008566:	6878      	ldr	r0, [r7, #4]
 8008568:	f000 fb9d 	bl	8008ca6 <USBD_CtlError>
                  break;
 800856c:	e041      	b.n	80085f2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800856e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008572:	2b00      	cmp	r3, #0
 8008574:	da0b      	bge.n	800858e <USBD_StdEPReq+0x2b2>
 8008576:	7bbb      	ldrb	r3, [r7, #14]
 8008578:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800857c:	4613      	mov	r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	4413      	add	r3, r2
 8008582:	009b      	lsls	r3, r3, #2
 8008584:	3310      	adds	r3, #16
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	4413      	add	r3, r2
 800858a:	3304      	adds	r3, #4
 800858c:	e00b      	b.n	80085a6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800858e:	7bbb      	ldrb	r3, [r7, #14]
 8008590:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008594:	4613      	mov	r3, r2
 8008596:	009b      	lsls	r3, r3, #2
 8008598:	4413      	add	r3, r2
 800859a:	009b      	lsls	r3, r3, #2
 800859c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80085a0:	687a      	ldr	r2, [r7, #4]
 80085a2:	4413      	add	r3, r2
 80085a4:	3304      	adds	r3, #4
 80085a6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80085a8:	7bbb      	ldrb	r3, [r7, #14]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d002      	beq.n	80085b4 <USBD_StdEPReq+0x2d8>
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	2b80      	cmp	r3, #128	; 0x80
 80085b2:	d103      	bne.n	80085bc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	2200      	movs	r2, #0
 80085b8:	601a      	str	r2, [r3, #0]
 80085ba:	e00e      	b.n	80085da <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80085bc:	7bbb      	ldrb	r3, [r7, #14]
 80085be:	4619      	mov	r1, r3
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f001 f897 	bl	80096f4 <USBD_LL_IsStallEP>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d003      	beq.n	80085d4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	2201      	movs	r2, #1
 80085d0:	601a      	str	r2, [r3, #0]
 80085d2:	e002      	b.n	80085da <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80085d4:	68bb      	ldr	r3, [r7, #8]
 80085d6:	2200      	movs	r2, #0
 80085d8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80085da:	68bb      	ldr	r3, [r7, #8]
 80085dc:	2202      	movs	r2, #2
 80085de:	4619      	mov	r1, r3
 80085e0:	6878      	ldr	r0, [r7, #4]
 80085e2:	f000 fbd1 	bl	8008d88 <USBD_CtlSendData>
              break;
 80085e6:	e004      	b.n	80085f2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80085e8:	6839      	ldr	r1, [r7, #0]
 80085ea:	6878      	ldr	r0, [r7, #4]
 80085ec:	f000 fb5b 	bl	8008ca6 <USBD_CtlError>
              break;
 80085f0:	bf00      	nop
          }
          break;
 80085f2:	e004      	b.n	80085fe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80085f4:	6839      	ldr	r1, [r7, #0]
 80085f6:	6878      	ldr	r0, [r7, #4]
 80085f8:	f000 fb55 	bl	8008ca6 <USBD_CtlError>
          break;
 80085fc:	bf00      	nop
      }
      break;
 80085fe:	e005      	b.n	800860c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008600:	6839      	ldr	r1, [r7, #0]
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f000 fb4f 	bl	8008ca6 <USBD_CtlError>
      break;
 8008608:	e000      	b.n	800860c <USBD_StdEPReq+0x330>
      break;
 800860a:	bf00      	nop
  }

  return ret;
 800860c:	7bfb      	ldrb	r3, [r7, #15]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
	...

08008618 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b084      	sub	sp, #16
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
 8008620:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008622:	2300      	movs	r3, #0
 8008624:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008626:	2300      	movs	r3, #0
 8008628:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800862a:	2300      	movs	r3, #0
 800862c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800862e:	683b      	ldr	r3, [r7, #0]
 8008630:	885b      	ldrh	r3, [r3, #2]
 8008632:	0a1b      	lsrs	r3, r3, #8
 8008634:	b29b      	uxth	r3, r3
 8008636:	3b01      	subs	r3, #1
 8008638:	2b06      	cmp	r3, #6
 800863a:	f200 8128 	bhi.w	800888e <USBD_GetDescriptor+0x276>
 800863e:	a201      	add	r2, pc, #4	; (adr r2, 8008644 <USBD_GetDescriptor+0x2c>)
 8008640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008644:	08008661 	.word	0x08008661
 8008648:	08008679 	.word	0x08008679
 800864c:	080086b9 	.word	0x080086b9
 8008650:	0800888f 	.word	0x0800888f
 8008654:	0800888f 	.word	0x0800888f
 8008658:	0800882f 	.word	0x0800882f
 800865c:	0800885b 	.word	0x0800885b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	7c12      	ldrb	r2, [r2, #16]
 800866c:	f107 0108 	add.w	r1, r7, #8
 8008670:	4610      	mov	r0, r2
 8008672:	4798      	blx	r3
 8008674:	60f8      	str	r0, [r7, #12]
      break;
 8008676:	e112      	b.n	800889e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	7c1b      	ldrb	r3, [r3, #16]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d10d      	bne.n	800869c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008686:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008688:	f107 0208 	add.w	r2, r7, #8
 800868c:	4610      	mov	r0, r2
 800868e:	4798      	blx	r3
 8008690:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	3301      	adds	r3, #1
 8008696:	2202      	movs	r2, #2
 8008698:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800869a:	e100      	b.n	800889e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80086a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086a4:	f107 0208 	add.w	r2, r7, #8
 80086a8:	4610      	mov	r0, r2
 80086aa:	4798      	blx	r3
 80086ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	3301      	adds	r3, #1
 80086b2:	2202      	movs	r2, #2
 80086b4:	701a      	strb	r2, [r3, #0]
      break;
 80086b6:	e0f2      	b.n	800889e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	885b      	ldrh	r3, [r3, #2]
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b05      	cmp	r3, #5
 80086c0:	f200 80ac 	bhi.w	800881c <USBD_GetDescriptor+0x204>
 80086c4:	a201      	add	r2, pc, #4	; (adr r2, 80086cc <USBD_GetDescriptor+0xb4>)
 80086c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ca:	bf00      	nop
 80086cc:	080086e5 	.word	0x080086e5
 80086d0:	08008719 	.word	0x08008719
 80086d4:	0800874d 	.word	0x0800874d
 80086d8:	08008781 	.word	0x08008781
 80086dc:	080087b5 	.word	0x080087b5
 80086e0:	080087e9 	.word	0x080087e9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d00b      	beq.n	8008708 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086f6:	685b      	ldr	r3, [r3, #4]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	7c12      	ldrb	r2, [r2, #16]
 80086fc:	f107 0108 	add.w	r1, r7, #8
 8008700:	4610      	mov	r0, r2
 8008702:	4798      	blx	r3
 8008704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008706:	e091      	b.n	800882c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008708:	6839      	ldr	r1, [r7, #0]
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f000 facb 	bl	8008ca6 <USBD_CtlError>
            err++;
 8008710:	7afb      	ldrb	r3, [r7, #11]
 8008712:	3301      	adds	r3, #1
 8008714:	72fb      	strb	r3, [r7, #11]
          break;
 8008716:	e089      	b.n	800882c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800871e:	689b      	ldr	r3, [r3, #8]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d00b      	beq.n	800873c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	687a      	ldr	r2, [r7, #4]
 800872e:	7c12      	ldrb	r2, [r2, #16]
 8008730:	f107 0108 	add.w	r1, r7, #8
 8008734:	4610      	mov	r0, r2
 8008736:	4798      	blx	r3
 8008738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800873a:	e077      	b.n	800882c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800873c:	6839      	ldr	r1, [r7, #0]
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fab1 	bl	8008ca6 <USBD_CtlError>
            err++;
 8008744:	7afb      	ldrb	r3, [r7, #11]
 8008746:	3301      	adds	r3, #1
 8008748:	72fb      	strb	r3, [r7, #11]
          break;
 800874a:	e06f      	b.n	800882c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008752:	68db      	ldr	r3, [r3, #12]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d00b      	beq.n	8008770 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	7c12      	ldrb	r2, [r2, #16]
 8008764:	f107 0108 	add.w	r1, r7, #8
 8008768:	4610      	mov	r0, r2
 800876a:	4798      	blx	r3
 800876c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800876e:	e05d      	b.n	800882c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008770:	6839      	ldr	r1, [r7, #0]
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fa97 	bl	8008ca6 <USBD_CtlError>
            err++;
 8008778:	7afb      	ldrb	r3, [r7, #11]
 800877a:	3301      	adds	r3, #1
 800877c:	72fb      	strb	r3, [r7, #11]
          break;
 800877e:	e055      	b.n	800882c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008786:	691b      	ldr	r3, [r3, #16]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d00b      	beq.n	80087a4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008792:	691b      	ldr	r3, [r3, #16]
 8008794:	687a      	ldr	r2, [r7, #4]
 8008796:	7c12      	ldrb	r2, [r2, #16]
 8008798:	f107 0108 	add.w	r1, r7, #8
 800879c:	4610      	mov	r0, r2
 800879e:	4798      	blx	r3
 80087a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087a2:	e043      	b.n	800882c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087a4:	6839      	ldr	r1, [r7, #0]
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	f000 fa7d 	bl	8008ca6 <USBD_CtlError>
            err++;
 80087ac:	7afb      	ldrb	r3, [r7, #11]
 80087ae:	3301      	adds	r3, #1
 80087b0:	72fb      	strb	r3, [r7, #11]
          break;
 80087b2:	e03b      	b.n	800882c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ba:	695b      	ldr	r3, [r3, #20]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d00b      	beq.n	80087d8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c6:	695b      	ldr	r3, [r3, #20]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	7c12      	ldrb	r2, [r2, #16]
 80087cc:	f107 0108 	add.w	r1, r7, #8
 80087d0:	4610      	mov	r0, r2
 80087d2:	4798      	blx	r3
 80087d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80087d6:	e029      	b.n	800882c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80087d8:	6839      	ldr	r1, [r7, #0]
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 fa63 	bl	8008ca6 <USBD_CtlError>
            err++;
 80087e0:	7afb      	ldrb	r3, [r7, #11]
 80087e2:	3301      	adds	r3, #1
 80087e4:	72fb      	strb	r3, [r7, #11]
          break;
 80087e6:	e021      	b.n	800882c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087ee:	699b      	ldr	r3, [r3, #24]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00b      	beq.n	800880c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087fa:	699b      	ldr	r3, [r3, #24]
 80087fc:	687a      	ldr	r2, [r7, #4]
 80087fe:	7c12      	ldrb	r2, [r2, #16]
 8008800:	f107 0108 	add.w	r1, r7, #8
 8008804:	4610      	mov	r0, r2
 8008806:	4798      	blx	r3
 8008808:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800880a:	e00f      	b.n	800882c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800880c:	6839      	ldr	r1, [r7, #0]
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f000 fa49 	bl	8008ca6 <USBD_CtlError>
            err++;
 8008814:	7afb      	ldrb	r3, [r7, #11]
 8008816:	3301      	adds	r3, #1
 8008818:	72fb      	strb	r3, [r7, #11]
          break;
 800881a:	e007      	b.n	800882c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800881c:	6839      	ldr	r1, [r7, #0]
 800881e:	6878      	ldr	r0, [r7, #4]
 8008820:	f000 fa41 	bl	8008ca6 <USBD_CtlError>
          err++;
 8008824:	7afb      	ldrb	r3, [r7, #11]
 8008826:	3301      	adds	r3, #1
 8008828:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800882a:	bf00      	nop
      }
      break;
 800882c:	e037      	b.n	800889e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	7c1b      	ldrb	r3, [r3, #16]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d109      	bne.n	800884a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800883c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800883e:	f107 0208 	add.w	r2, r7, #8
 8008842:	4610      	mov	r0, r2
 8008844:	4798      	blx	r3
 8008846:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008848:	e029      	b.n	800889e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800884a:	6839      	ldr	r1, [r7, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f000 fa2a 	bl	8008ca6 <USBD_CtlError>
        err++;
 8008852:	7afb      	ldrb	r3, [r7, #11]
 8008854:	3301      	adds	r3, #1
 8008856:	72fb      	strb	r3, [r7, #11]
      break;
 8008858:	e021      	b.n	800889e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	7c1b      	ldrb	r3, [r3, #16]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d10d      	bne.n	800887e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800886a:	f107 0208 	add.w	r2, r7, #8
 800886e:	4610      	mov	r0, r2
 8008870:	4798      	blx	r3
 8008872:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	3301      	adds	r3, #1
 8008878:	2207      	movs	r2, #7
 800887a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800887c:	e00f      	b.n	800889e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800887e:	6839      	ldr	r1, [r7, #0]
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 fa10 	bl	8008ca6 <USBD_CtlError>
        err++;
 8008886:	7afb      	ldrb	r3, [r7, #11]
 8008888:	3301      	adds	r3, #1
 800888a:	72fb      	strb	r3, [r7, #11]
      break;
 800888c:	e007      	b.n	800889e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800888e:	6839      	ldr	r1, [r7, #0]
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f000 fa08 	bl	8008ca6 <USBD_CtlError>
      err++;
 8008896:	7afb      	ldrb	r3, [r7, #11]
 8008898:	3301      	adds	r3, #1
 800889a:	72fb      	strb	r3, [r7, #11]
      break;
 800889c:	bf00      	nop
  }

  if (err != 0U)
 800889e:	7afb      	ldrb	r3, [r7, #11]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d11e      	bne.n	80088e2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	88db      	ldrh	r3, [r3, #6]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d016      	beq.n	80088da <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80088ac:	893b      	ldrh	r3, [r7, #8]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d00e      	beq.n	80088d0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80088b2:	683b      	ldr	r3, [r7, #0]
 80088b4:	88da      	ldrh	r2, [r3, #6]
 80088b6:	893b      	ldrh	r3, [r7, #8]
 80088b8:	4293      	cmp	r3, r2
 80088ba:	bf28      	it	cs
 80088bc:	4613      	movcs	r3, r2
 80088be:	b29b      	uxth	r3, r3
 80088c0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80088c2:	893b      	ldrh	r3, [r7, #8]
 80088c4:	461a      	mov	r2, r3
 80088c6:	68f9      	ldr	r1, [r7, #12]
 80088c8:	6878      	ldr	r0, [r7, #4]
 80088ca:	f000 fa5d 	bl	8008d88 <USBD_CtlSendData>
 80088ce:	e009      	b.n	80088e4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f9e7 	bl	8008ca6 <USBD_CtlError>
 80088d8:	e004      	b.n	80088e4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f000 faae 	bl	8008e3c <USBD_CtlSendStatus>
 80088e0:	e000      	b.n	80088e4 <USBD_GetDescriptor+0x2cc>
    return;
 80088e2:	bf00      	nop
  }
}
 80088e4:	3710      	adds	r7, #16
 80088e6:	46bd      	mov	sp, r7
 80088e8:	bd80      	pop	{r7, pc}
 80088ea:	bf00      	nop

080088ec <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	889b      	ldrh	r3, [r3, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d131      	bne.n	8008962 <USBD_SetAddress+0x76>
 80088fe:	683b      	ldr	r3, [r7, #0]
 8008900:	88db      	ldrh	r3, [r3, #6]
 8008902:	2b00      	cmp	r3, #0
 8008904:	d12d      	bne.n	8008962 <USBD_SetAddress+0x76>
 8008906:	683b      	ldr	r3, [r7, #0]
 8008908:	885b      	ldrh	r3, [r3, #2]
 800890a:	2b7f      	cmp	r3, #127	; 0x7f
 800890c:	d829      	bhi.n	8008962 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800890e:	683b      	ldr	r3, [r7, #0]
 8008910:	885b      	ldrh	r3, [r3, #2]
 8008912:	b2db      	uxtb	r3, r3
 8008914:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008918:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b03      	cmp	r3, #3
 8008924:	d104      	bne.n	8008930 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008926:	6839      	ldr	r1, [r7, #0]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f000 f9bc 	bl	8008ca6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800892e:	e01d      	b.n	800896c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	7bfa      	ldrb	r2, [r7, #15]
 8008934:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008938:	7bfb      	ldrb	r3, [r7, #15]
 800893a:	4619      	mov	r1, r3
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f000 ff05 	bl	800974c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f000 fa7a 	bl	8008e3c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008948:	7bfb      	ldrb	r3, [r7, #15]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d004      	beq.n	8008958 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	2202      	movs	r2, #2
 8008952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008956:	e009      	b.n	800896c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008960:	e004      	b.n	800896c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008962:	6839      	ldr	r1, [r7, #0]
 8008964:	6878      	ldr	r0, [r7, #4]
 8008966:	f000 f99e 	bl	8008ca6 <USBD_CtlError>
  }
}
 800896a:	bf00      	nop
 800896c:	bf00      	nop
 800896e:	3710      	adds	r7, #16
 8008970:	46bd      	mov	sp, r7
 8008972:	bd80      	pop	{r7, pc}

08008974 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800897e:	2300      	movs	r3, #0
 8008980:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	885b      	ldrh	r3, [r3, #2]
 8008986:	b2da      	uxtb	r2, r3
 8008988:	4b4e      	ldr	r3, [pc, #312]	; (8008ac4 <USBD_SetConfig+0x150>)
 800898a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800898c:	4b4d      	ldr	r3, [pc, #308]	; (8008ac4 <USBD_SetConfig+0x150>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	2b01      	cmp	r3, #1
 8008992:	d905      	bls.n	80089a0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008994:	6839      	ldr	r1, [r7, #0]
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 f985 	bl	8008ca6 <USBD_CtlError>
    return USBD_FAIL;
 800899c:	2303      	movs	r3, #3
 800899e:	e08c      	b.n	8008aba <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b02      	cmp	r3, #2
 80089aa:	d002      	beq.n	80089b2 <USBD_SetConfig+0x3e>
 80089ac:	2b03      	cmp	r3, #3
 80089ae:	d029      	beq.n	8008a04 <USBD_SetConfig+0x90>
 80089b0:	e075      	b.n	8008a9e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80089b2:	4b44      	ldr	r3, [pc, #272]	; (8008ac4 <USBD_SetConfig+0x150>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d020      	beq.n	80089fc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80089ba:	4b42      	ldr	r3, [pc, #264]	; (8008ac4 <USBD_SetConfig+0x150>)
 80089bc:	781b      	ldrb	r3, [r3, #0]
 80089be:	461a      	mov	r2, r3
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80089c4:	4b3f      	ldr	r3, [pc, #252]	; (8008ac4 <USBD_SetConfig+0x150>)
 80089c6:	781b      	ldrb	r3, [r3, #0]
 80089c8:	4619      	mov	r1, r3
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f7fe ffe7 	bl	800799e <USBD_SetClassConfig>
 80089d0:	4603      	mov	r3, r0
 80089d2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80089d4:	7bfb      	ldrb	r3, [r7, #15]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d008      	beq.n	80089ec <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 f962 	bl	8008ca6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	2202      	movs	r2, #2
 80089e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80089ea:	e065      	b.n	8008ab8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80089ec:	6878      	ldr	r0, [r7, #4]
 80089ee:	f000 fa25 	bl	8008e3c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2203      	movs	r2, #3
 80089f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80089fa:	e05d      	b.n	8008ab8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fa1d 	bl	8008e3c <USBD_CtlSendStatus>
      break;
 8008a02:	e059      	b.n	8008ab8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008a04:	4b2f      	ldr	r3, [pc, #188]	; (8008ac4 <USBD_SetConfig+0x150>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d112      	bne.n	8008a32 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	2202      	movs	r2, #2
 8008a10:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008a14:	4b2b      	ldr	r3, [pc, #172]	; (8008ac4 <USBD_SetConfig+0x150>)
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008a1e:	4b29      	ldr	r3, [pc, #164]	; (8008ac4 <USBD_SetConfig+0x150>)
 8008a20:	781b      	ldrb	r3, [r3, #0]
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f7fe ffd6 	bl	80079d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008a2a:	6878      	ldr	r0, [r7, #4]
 8008a2c:	f000 fa06 	bl	8008e3c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008a30:	e042      	b.n	8008ab8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008a32:	4b24      	ldr	r3, [pc, #144]	; (8008ac4 <USBD_SetConfig+0x150>)
 8008a34:	781b      	ldrb	r3, [r3, #0]
 8008a36:	461a      	mov	r2, r3
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d02a      	beq.n	8008a96 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	4619      	mov	r1, r3
 8008a48:	6878      	ldr	r0, [r7, #4]
 8008a4a:	f7fe ffc4 	bl	80079d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008a4e:	4b1d      	ldr	r3, [pc, #116]	; (8008ac4 <USBD_SetConfig+0x150>)
 8008a50:	781b      	ldrb	r3, [r3, #0]
 8008a52:	461a      	mov	r2, r3
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008a58:	4b1a      	ldr	r3, [pc, #104]	; (8008ac4 <USBD_SetConfig+0x150>)
 8008a5a:	781b      	ldrb	r3, [r3, #0]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7fe ff9d 	bl	800799e <USBD_SetClassConfig>
 8008a64:	4603      	mov	r3, r0
 8008a66:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008a68:	7bfb      	ldrb	r3, [r7, #15]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d00f      	beq.n	8008a8e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008a6e:	6839      	ldr	r1, [r7, #0]
 8008a70:	6878      	ldr	r0, [r7, #4]
 8008a72:	f000 f918 	bl	8008ca6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	685b      	ldr	r3, [r3, #4]
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	4619      	mov	r1, r3
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f7fe ffa9 	bl	80079d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2202      	movs	r2, #2
 8008a88:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008a8c:	e014      	b.n	8008ab8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008a8e:	6878      	ldr	r0, [r7, #4]
 8008a90:	f000 f9d4 	bl	8008e3c <USBD_CtlSendStatus>
      break;
 8008a94:	e010      	b.n	8008ab8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f000 f9d0 	bl	8008e3c <USBD_CtlSendStatus>
      break;
 8008a9c:	e00c      	b.n	8008ab8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008a9e:	6839      	ldr	r1, [r7, #0]
 8008aa0:	6878      	ldr	r0, [r7, #4]
 8008aa2:	f000 f900 	bl	8008ca6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008aa6:	4b07      	ldr	r3, [pc, #28]	; (8008ac4 <USBD_SetConfig+0x150>)
 8008aa8:	781b      	ldrb	r3, [r3, #0]
 8008aaa:	4619      	mov	r1, r3
 8008aac:	6878      	ldr	r0, [r7, #4]
 8008aae:	f7fe ff92 	bl	80079d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008ab2:	2303      	movs	r3, #3
 8008ab4:	73fb      	strb	r3, [r7, #15]
      break;
 8008ab6:	bf00      	nop
  }

  return ret;
 8008ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aba:	4618      	mov	r0, r3
 8008abc:	3710      	adds	r7, #16
 8008abe:	46bd      	mov	sp, r7
 8008ac0:	bd80      	pop	{r7, pc}
 8008ac2:	bf00      	nop
 8008ac4:	200005d0 	.word	0x200005d0

08008ac8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b082      	sub	sp, #8
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
 8008ad0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008ad2:	683b      	ldr	r3, [r7, #0]
 8008ad4:	88db      	ldrh	r3, [r3, #6]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d004      	beq.n	8008ae4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008ada:	6839      	ldr	r1, [r7, #0]
 8008adc:	6878      	ldr	r0, [r7, #4]
 8008ade:	f000 f8e2 	bl	8008ca6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008ae2:	e023      	b.n	8008b2c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aea:	b2db      	uxtb	r3, r3
 8008aec:	2b02      	cmp	r3, #2
 8008aee:	dc02      	bgt.n	8008af6 <USBD_GetConfig+0x2e>
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	dc03      	bgt.n	8008afc <USBD_GetConfig+0x34>
 8008af4:	e015      	b.n	8008b22 <USBD_GetConfig+0x5a>
 8008af6:	2b03      	cmp	r3, #3
 8008af8:	d00b      	beq.n	8008b12 <USBD_GetConfig+0x4a>
 8008afa:	e012      	b.n	8008b22 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2200      	movs	r2, #0
 8008b00:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	3308      	adds	r3, #8
 8008b06:	2201      	movs	r2, #1
 8008b08:	4619      	mov	r1, r3
 8008b0a:	6878      	ldr	r0, [r7, #4]
 8008b0c:	f000 f93c 	bl	8008d88 <USBD_CtlSendData>
        break;
 8008b10:	e00c      	b.n	8008b2c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	3304      	adds	r3, #4
 8008b16:	2201      	movs	r2, #1
 8008b18:	4619      	mov	r1, r3
 8008b1a:	6878      	ldr	r0, [r7, #4]
 8008b1c:	f000 f934 	bl	8008d88 <USBD_CtlSendData>
        break;
 8008b20:	e004      	b.n	8008b2c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008b22:	6839      	ldr	r1, [r7, #0]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	f000 f8be 	bl	8008ca6 <USBD_CtlError>
        break;
 8008b2a:	bf00      	nop
}
 8008b2c:	bf00      	nop
 8008b2e:	3708      	adds	r7, #8
 8008b30:	46bd      	mov	sp, r7
 8008b32:	bd80      	pop	{r7, pc}

08008b34 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b082      	sub	sp, #8
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
 8008b3c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b44:	b2db      	uxtb	r3, r3
 8008b46:	3b01      	subs	r3, #1
 8008b48:	2b02      	cmp	r3, #2
 8008b4a:	d81e      	bhi.n	8008b8a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008b4c:	683b      	ldr	r3, [r7, #0]
 8008b4e:	88db      	ldrh	r3, [r3, #6]
 8008b50:	2b02      	cmp	r3, #2
 8008b52:	d004      	beq.n	8008b5e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008b54:	6839      	ldr	r1, [r7, #0]
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f000 f8a5 	bl	8008ca6 <USBD_CtlError>
        break;
 8008b5c:	e01a      	b.n	8008b94 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d005      	beq.n	8008b7a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	68db      	ldr	r3, [r3, #12]
 8008b72:	f043 0202 	orr.w	r2, r3, #2
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	330c      	adds	r3, #12
 8008b7e:	2202      	movs	r2, #2
 8008b80:	4619      	mov	r1, r3
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 f900 	bl	8008d88 <USBD_CtlSendData>
      break;
 8008b88:	e004      	b.n	8008b94 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008b8a:	6839      	ldr	r1, [r7, #0]
 8008b8c:	6878      	ldr	r0, [r7, #4]
 8008b8e:	f000 f88a 	bl	8008ca6 <USBD_CtlError>
      break;
 8008b92:	bf00      	nop
  }
}
 8008b94:	bf00      	nop
 8008b96:	3708      	adds	r7, #8
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	bd80      	pop	{r7, pc}

08008b9c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
 8008ba4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	885b      	ldrh	r3, [r3, #2]
 8008baa:	2b01      	cmp	r3, #1
 8008bac:	d107      	bne.n	8008bbe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2201      	movs	r2, #1
 8008bb2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008bb6:	6878      	ldr	r0, [r7, #4]
 8008bb8:	f000 f940 	bl	8008e3c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008bbc:	e013      	b.n	8008be6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	885b      	ldrh	r3, [r3, #2]
 8008bc2:	2b02      	cmp	r3, #2
 8008bc4:	d10b      	bne.n	8008bde <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	889b      	ldrh	r3, [r3, #4]
 8008bca:	0a1b      	lsrs	r3, r3, #8
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	b2da      	uxtb	r2, r3
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 f930 	bl	8008e3c <USBD_CtlSendStatus>
}
 8008bdc:	e003      	b.n	8008be6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008bde:	6839      	ldr	r1, [r7, #0]
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 f860 	bl	8008ca6 <USBD_CtlError>
}
 8008be6:	bf00      	nop
 8008be8:	3708      	adds	r7, #8
 8008bea:	46bd      	mov	sp, r7
 8008bec:	bd80      	pop	{r7, pc}

08008bee <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008bee:	b580      	push	{r7, lr}
 8008bf0:	b082      	sub	sp, #8
 8008bf2:	af00      	add	r7, sp, #0
 8008bf4:	6078      	str	r0, [r7, #4]
 8008bf6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bfe:	b2db      	uxtb	r3, r3
 8008c00:	3b01      	subs	r3, #1
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d80b      	bhi.n	8008c1e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008c06:	683b      	ldr	r3, [r7, #0]
 8008c08:	885b      	ldrh	r3, [r3, #2]
 8008c0a:	2b01      	cmp	r3, #1
 8008c0c:	d10c      	bne.n	8008c28 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2200      	movs	r2, #0
 8008c12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 f910 	bl	8008e3c <USBD_CtlSendStatus>
      }
      break;
 8008c1c:	e004      	b.n	8008c28 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008c1e:	6839      	ldr	r1, [r7, #0]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f840 	bl	8008ca6 <USBD_CtlError>
      break;
 8008c26:	e000      	b.n	8008c2a <USBD_ClrFeature+0x3c>
      break;
 8008c28:	bf00      	nop
  }
}
 8008c2a:	bf00      	nop
 8008c2c:	3708      	adds	r7, #8
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b084      	sub	sp, #16
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	781a      	ldrb	r2, [r3, #0]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	781a      	ldrb	r2, [r3, #0]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	3301      	adds	r3, #1
 8008c5a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f7ff fa41 	bl	80080e4 <SWAPBYTE>
 8008c62:	4603      	mov	r3, r0
 8008c64:	461a      	mov	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	3301      	adds	r3, #1
 8008c74:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f7ff fa34 	bl	80080e4 <SWAPBYTE>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	461a      	mov	r2, r3
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	3301      	adds	r3, #1
 8008c88:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	3301      	adds	r3, #1
 8008c8e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f7ff fa27 	bl	80080e4 <SWAPBYTE>
 8008c96:	4603      	mov	r3, r0
 8008c98:	461a      	mov	r2, r3
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	80da      	strh	r2, [r3, #6]
}
 8008c9e:	bf00      	nop
 8008ca0:	3710      	adds	r7, #16
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}

08008ca6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ca6:	b580      	push	{r7, lr}
 8008ca8:	b082      	sub	sp, #8
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	6078      	str	r0, [r7, #4]
 8008cae:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008cb0:	2180      	movs	r1, #128	; 0x80
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f000 fce0 	bl	8009678 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008cb8:	2100      	movs	r1, #0
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fcdc 	bl	8009678 <USBD_LL_StallEP>
}
 8008cc0:	bf00      	nop
 8008cc2:	3708      	adds	r7, #8
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	bd80      	pop	{r7, pc}

08008cc8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b086      	sub	sp, #24
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	60f8      	str	r0, [r7, #12]
 8008cd0:	60b9      	str	r1, [r7, #8]
 8008cd2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d036      	beq.n	8008d4c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008ce2:	6938      	ldr	r0, [r7, #16]
 8008ce4:	f000 f836 	bl	8008d54 <USBD_GetLen>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	3301      	adds	r3, #1
 8008cec:	b29b      	uxth	r3, r3
 8008cee:	005b      	lsls	r3, r3, #1
 8008cf0:	b29a      	uxth	r2, r3
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008cf6:	7dfb      	ldrb	r3, [r7, #23]
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	4413      	add	r3, r2
 8008cfc:	687a      	ldr	r2, [r7, #4]
 8008cfe:	7812      	ldrb	r2, [r2, #0]
 8008d00:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d02:	7dfb      	ldrb	r3, [r7, #23]
 8008d04:	3301      	adds	r3, #1
 8008d06:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008d08:	7dfb      	ldrb	r3, [r7, #23]
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	2203      	movs	r2, #3
 8008d10:	701a      	strb	r2, [r3, #0]
  idx++;
 8008d12:	7dfb      	ldrb	r3, [r7, #23]
 8008d14:	3301      	adds	r3, #1
 8008d16:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008d18:	e013      	b.n	8008d42 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008d1a:	7dfb      	ldrb	r3, [r7, #23]
 8008d1c:	68ba      	ldr	r2, [r7, #8]
 8008d1e:	4413      	add	r3, r2
 8008d20:	693a      	ldr	r2, [r7, #16]
 8008d22:	7812      	ldrb	r2, [r2, #0]
 8008d24:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	613b      	str	r3, [r7, #16]
    idx++;
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	3301      	adds	r3, #1
 8008d30:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008d32:	7dfb      	ldrb	r3, [r7, #23]
 8008d34:	68ba      	ldr	r2, [r7, #8]
 8008d36:	4413      	add	r3, r2
 8008d38:	2200      	movs	r2, #0
 8008d3a:	701a      	strb	r2, [r3, #0]
    idx++;
 8008d3c:	7dfb      	ldrb	r3, [r7, #23]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1e7      	bne.n	8008d1a <USBD_GetString+0x52>
 8008d4a:	e000      	b.n	8008d4e <USBD_GetString+0x86>
    return;
 8008d4c:	bf00      	nop
  }
}
 8008d4e:	3718      	adds	r7, #24
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}

08008d54 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008d64:	e005      	b.n	8008d72 <USBD_GetLen+0x1e>
  {
    len++;
 8008d66:	7bfb      	ldrb	r3, [r7, #15]
 8008d68:	3301      	adds	r3, #1
 8008d6a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	3301      	adds	r3, #1
 8008d70:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008d72:	68bb      	ldr	r3, [r7, #8]
 8008d74:	781b      	ldrb	r3, [r3, #0]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d1f5      	bne.n	8008d66 <USBD_GetLen+0x12>
  }

  return len;
 8008d7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3714      	adds	r7, #20
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b084      	sub	sp, #16
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	60f8      	str	r0, [r7, #12]
 8008d90:	60b9      	str	r1, [r7, #8]
 8008d92:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	2202      	movs	r2, #2
 8008d98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	687a      	ldr	r2, [r7, #4]
 8008da6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	68ba      	ldr	r2, [r7, #8]
 8008dac:	2100      	movs	r1, #0
 8008dae:	68f8      	ldr	r0, [r7, #12]
 8008db0:	f000 fceb 	bl	800978a <USBD_LL_Transmit>

  return USBD_OK;
 8008db4:	2300      	movs	r3, #0
}
 8008db6:	4618      	mov	r0, r3
 8008db8:	3710      	adds	r7, #16
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	bd80      	pop	{r7, pc}

08008dbe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008dbe:	b580      	push	{r7, lr}
 8008dc0:	b084      	sub	sp, #16
 8008dc2:	af00      	add	r7, sp, #0
 8008dc4:	60f8      	str	r0, [r7, #12]
 8008dc6:	60b9      	str	r1, [r7, #8]
 8008dc8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68ba      	ldr	r2, [r7, #8]
 8008dce:	2100      	movs	r1, #0
 8008dd0:	68f8      	ldr	r0, [r7, #12]
 8008dd2:	f000 fcda 	bl	800978a <USBD_LL_Transmit>

  return USBD_OK;
 8008dd6:	2300      	movs	r3, #0
}
 8008dd8:	4618      	mov	r0, r3
 8008dda:	3710      	adds	r7, #16
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bd80      	pop	{r7, pc}

08008de0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	2203      	movs	r2, #3
 8008df0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	687a      	ldr	r2, [r7, #4]
 8008e00:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	68ba      	ldr	r2, [r7, #8]
 8008e08:	2100      	movs	r1, #0
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	f000 fcde 	bl	80097cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e10:	2300      	movs	r3, #0
}
 8008e12:	4618      	mov	r0, r3
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b084      	sub	sp, #16
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	60f8      	str	r0, [r7, #12]
 8008e22:	60b9      	str	r1, [r7, #8]
 8008e24:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68ba      	ldr	r2, [r7, #8]
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	68f8      	ldr	r0, [r7, #12]
 8008e2e:	f000 fccd 	bl	80097cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e32:	2300      	movs	r3, #0
}
 8008e34:	4618      	mov	r0, r3
 8008e36:	3710      	adds	r7, #16
 8008e38:	46bd      	mov	sp, r7
 8008e3a:	bd80      	pop	{r7, pc}

08008e3c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b082      	sub	sp, #8
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2204      	movs	r2, #4
 8008e48:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	2200      	movs	r2, #0
 8008e50:	2100      	movs	r1, #0
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 fc99 	bl	800978a <USBD_LL_Transmit>

  return USBD_OK;
 8008e58:	2300      	movs	r3, #0
}
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	3708      	adds	r7, #8
 8008e5e:	46bd      	mov	sp, r7
 8008e60:	bd80      	pop	{r7, pc}

08008e62 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008e62:	b580      	push	{r7, lr}
 8008e64:	b082      	sub	sp, #8
 8008e66:	af00      	add	r7, sp, #0
 8008e68:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	2205      	movs	r2, #5
 8008e6e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e72:	2300      	movs	r3, #0
 8008e74:	2200      	movs	r2, #0
 8008e76:	2100      	movs	r1, #0
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fca7 	bl	80097cc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3708      	adds	r7, #8
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}

08008e88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	4912      	ldr	r1, [pc, #72]	; (8008ed8 <MX_USB_DEVICE_Init+0x50>)
 8008e90:	4812      	ldr	r0, [pc, #72]	; (8008edc <MX_USB_DEVICE_Init+0x54>)
 8008e92:	f7fe fd07 	bl	80078a4 <USBD_Init>
 8008e96:	4603      	mov	r3, r0
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d001      	beq.n	8008ea0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008e9c:	f7f8 fbbc 	bl	8001618 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008ea0:	490f      	ldr	r1, [pc, #60]	; (8008ee0 <MX_USB_DEVICE_Init+0x58>)
 8008ea2:	480e      	ldr	r0, [pc, #56]	; (8008edc <MX_USB_DEVICE_Init+0x54>)
 8008ea4:	f7fe fd2e 	bl	8007904 <USBD_RegisterClass>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008eae:	f7f8 fbb3 	bl	8001618 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8008eb2:	490c      	ldr	r1, [pc, #48]	; (8008ee4 <MX_USB_DEVICE_Init+0x5c>)
 8008eb4:	4809      	ldr	r0, [pc, #36]	; (8008edc <MX_USB_DEVICE_Init+0x54>)
 8008eb6:	f7fe fc1f 	bl	80076f8 <USBD_CDC_RegisterInterface>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008ec0:	f7f8 fbaa 	bl	8001618 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008ec4:	4805      	ldr	r0, [pc, #20]	; (8008edc <MX_USB_DEVICE_Init+0x54>)
 8008ec6:	f7fe fd53 	bl	8007970 <USBD_Start>
 8008eca:	4603      	mov	r3, r0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d001      	beq.n	8008ed4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008ed0:	f7f8 fba2 	bl	8001618 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008ed4:	bf00      	nop
 8008ed6:	bd80      	pop	{r7, pc}
 8008ed8:	200000dc 	.word	0x200000dc
 8008edc:	200005d4 	.word	0x200005d4
 8008ee0:	20000048 	.word	0x20000048
 8008ee4:	200000c8 	.word	0x200000c8

08008ee8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008eec:	2200      	movs	r2, #0
 8008eee:	4905      	ldr	r1, [pc, #20]	; (8008f04 <CDC_Init_FS+0x1c>)
 8008ef0:	4805      	ldr	r0, [pc, #20]	; (8008f08 <CDC_Init_FS+0x20>)
 8008ef2:	f7fe fc1b 	bl	800772c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8008ef6:	4905      	ldr	r1, [pc, #20]	; (8008f0c <CDC_Init_FS+0x24>)
 8008ef8:	4803      	ldr	r0, [pc, #12]	; (8008f08 <CDC_Init_FS+0x20>)
 8008efa:	f7fe fc39 	bl	8007770 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008efe:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	bd80      	pop	{r7, pc}
 8008f04:	200010b0 	.word	0x200010b0
 8008f08:	200005d4 	.word	0x200005d4
 8008f0c:	200008b0 	.word	0x200008b0

08008f10 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008f10:	b480      	push	{r7}
 8008f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8008f14:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	46bd      	mov	sp, r7
 8008f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1e:	4770      	bx	lr

08008f20 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8008f20:	b480      	push	{r7}
 8008f22:	b083      	sub	sp, #12
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	4603      	mov	r3, r0
 8008f28:	6039      	str	r1, [r7, #0]
 8008f2a:	71fb      	strb	r3, [r7, #7]
 8008f2c:	4613      	mov	r3, r2
 8008f2e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8008f30:	79fb      	ldrb	r3, [r7, #7]
 8008f32:	2b23      	cmp	r3, #35	; 0x23
 8008f34:	d84a      	bhi.n	8008fcc <CDC_Control_FS+0xac>
 8008f36:	a201      	add	r2, pc, #4	; (adr r2, 8008f3c <CDC_Control_FS+0x1c>)
 8008f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3c:	08008fcd 	.word	0x08008fcd
 8008f40:	08008fcd 	.word	0x08008fcd
 8008f44:	08008fcd 	.word	0x08008fcd
 8008f48:	08008fcd 	.word	0x08008fcd
 8008f4c:	08008fcd 	.word	0x08008fcd
 8008f50:	08008fcd 	.word	0x08008fcd
 8008f54:	08008fcd 	.word	0x08008fcd
 8008f58:	08008fcd 	.word	0x08008fcd
 8008f5c:	08008fcd 	.word	0x08008fcd
 8008f60:	08008fcd 	.word	0x08008fcd
 8008f64:	08008fcd 	.word	0x08008fcd
 8008f68:	08008fcd 	.word	0x08008fcd
 8008f6c:	08008fcd 	.word	0x08008fcd
 8008f70:	08008fcd 	.word	0x08008fcd
 8008f74:	08008fcd 	.word	0x08008fcd
 8008f78:	08008fcd 	.word	0x08008fcd
 8008f7c:	08008fcd 	.word	0x08008fcd
 8008f80:	08008fcd 	.word	0x08008fcd
 8008f84:	08008fcd 	.word	0x08008fcd
 8008f88:	08008fcd 	.word	0x08008fcd
 8008f8c:	08008fcd 	.word	0x08008fcd
 8008f90:	08008fcd 	.word	0x08008fcd
 8008f94:	08008fcd 	.word	0x08008fcd
 8008f98:	08008fcd 	.word	0x08008fcd
 8008f9c:	08008fcd 	.word	0x08008fcd
 8008fa0:	08008fcd 	.word	0x08008fcd
 8008fa4:	08008fcd 	.word	0x08008fcd
 8008fa8:	08008fcd 	.word	0x08008fcd
 8008fac:	08008fcd 	.word	0x08008fcd
 8008fb0:	08008fcd 	.word	0x08008fcd
 8008fb4:	08008fcd 	.word	0x08008fcd
 8008fb8:	08008fcd 	.word	0x08008fcd
 8008fbc:	08008fcd 	.word	0x08008fcd
 8008fc0:	08008fcd 	.word	0x08008fcd
 8008fc4:	08008fcd 	.word	0x08008fcd
 8008fc8:	08008fcd 	.word	0x08008fcd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008fcc:	bf00      	nop
  }

  return (USBD_OK);
 8008fce:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	370c      	adds	r7, #12
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b082      	sub	sp, #8
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8008fe6:	6879      	ldr	r1, [r7, #4]
 8008fe8:	4805      	ldr	r0, [pc, #20]	; (8009000 <CDC_Receive_FS+0x24>)
 8008fea:	f7fe fbc1 	bl	8007770 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008fee:	4804      	ldr	r0, [pc, #16]	; (8009000 <CDC_Receive_FS+0x24>)
 8008ff0:	f7fe fc22 	bl	8007838 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8008ff4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008ff6:	4618      	mov	r0, r3
 8008ff8:	3708      	adds	r7, #8
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	200005d4 	.word	0x200005d4

08009004 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b084      	sub	sp, #16
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
 800900c:	460b      	mov	r3, r1
 800900e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009010:	2300      	movs	r3, #0
 8009012:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009014:	4b0d      	ldr	r3, [pc, #52]	; (800904c <CDC_Transmit_FS+0x48>)
 8009016:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800901a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009022:	2b00      	cmp	r3, #0
 8009024:	d001      	beq.n	800902a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009026:	2301      	movs	r3, #1
 8009028:	e00b      	b.n	8009042 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800902a:	887b      	ldrh	r3, [r7, #2]
 800902c:	461a      	mov	r2, r3
 800902e:	6879      	ldr	r1, [r7, #4]
 8009030:	4806      	ldr	r0, [pc, #24]	; (800904c <CDC_Transmit_FS+0x48>)
 8009032:	f7fe fb7b 	bl	800772c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009036:	4805      	ldr	r0, [pc, #20]	; (800904c <CDC_Transmit_FS+0x48>)
 8009038:	f7fe fbb8 	bl	80077ac <USBD_CDC_TransmitPacket>
 800903c:	4603      	mov	r3, r0
 800903e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009040:	7bfb      	ldrb	r3, [r7, #15]
}
 8009042:	4618      	mov	r0, r3
 8009044:	3710      	adds	r7, #16
 8009046:	46bd      	mov	sp, r7
 8009048:	bd80      	pop	{r7, pc}
 800904a:	bf00      	nop
 800904c:	200005d4 	.word	0x200005d4

08009050 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009050:	b480      	push	{r7}
 8009052:	b087      	sub	sp, #28
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	4613      	mov	r3, r2
 800905c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800905e:	2300      	movs	r3, #0
 8009060:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009062:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009066:	4618      	mov	r0, r3
 8009068:	371c      	adds	r7, #28
 800906a:	46bd      	mov	sp, r7
 800906c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009070:	4770      	bx	lr
	...

08009074 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009074:	b480      	push	{r7}
 8009076:	b083      	sub	sp, #12
 8009078:	af00      	add	r7, sp, #0
 800907a:	4603      	mov	r3, r0
 800907c:	6039      	str	r1, [r7, #0]
 800907e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	2212      	movs	r2, #18
 8009084:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009086:	4b03      	ldr	r3, [pc, #12]	; (8009094 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009088:	4618      	mov	r0, r3
 800908a:	370c      	adds	r7, #12
 800908c:	46bd      	mov	sp, r7
 800908e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009092:	4770      	bx	lr
 8009094:	200000f8 	.word	0x200000f8

08009098 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009098:	b480      	push	{r7}
 800909a:	b083      	sub	sp, #12
 800909c:	af00      	add	r7, sp, #0
 800909e:	4603      	mov	r3, r0
 80090a0:	6039      	str	r1, [r7, #0]
 80090a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	2204      	movs	r2, #4
 80090a8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80090aa:	4b03      	ldr	r3, [pc, #12]	; (80090b8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	2000010c 	.word	0x2000010c

080090bc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090bc:	b580      	push	{r7, lr}
 80090be:	b082      	sub	sp, #8
 80090c0:	af00      	add	r7, sp, #0
 80090c2:	4603      	mov	r3, r0
 80090c4:	6039      	str	r1, [r7, #0]
 80090c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80090c8:	79fb      	ldrb	r3, [r7, #7]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d105      	bne.n	80090da <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090ce:	683a      	ldr	r2, [r7, #0]
 80090d0:	4907      	ldr	r1, [pc, #28]	; (80090f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80090d2:	4808      	ldr	r0, [pc, #32]	; (80090f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80090d4:	f7ff fdf8 	bl	8008cc8 <USBD_GetString>
 80090d8:	e004      	b.n	80090e4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	4904      	ldr	r1, [pc, #16]	; (80090f0 <USBD_FS_ProductStrDescriptor+0x34>)
 80090de:	4805      	ldr	r0, [pc, #20]	; (80090f4 <USBD_FS_ProductStrDescriptor+0x38>)
 80090e0:	f7ff fdf2 	bl	8008cc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80090e4:	4b02      	ldr	r3, [pc, #8]	; (80090f0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80090e6:	4618      	mov	r0, r3
 80090e8:	3708      	adds	r7, #8
 80090ea:	46bd      	mov	sp, r7
 80090ec:	bd80      	pop	{r7, pc}
 80090ee:	bf00      	nop
 80090f0:	200018b0 	.word	0x200018b0
 80090f4:	0800c710 	.word	0x0800c710

080090f8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	4603      	mov	r3, r0
 8009100:	6039      	str	r1, [r7, #0]
 8009102:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009104:	683a      	ldr	r2, [r7, #0]
 8009106:	4904      	ldr	r1, [pc, #16]	; (8009118 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8009108:	4804      	ldr	r0, [pc, #16]	; (800911c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800910a:	f7ff fddd 	bl	8008cc8 <USBD_GetString>
  return USBD_StrDesc;
 800910e:	4b02      	ldr	r3, [pc, #8]	; (8009118 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8009110:	4618      	mov	r0, r3
 8009112:	3708      	adds	r7, #8
 8009114:	46bd      	mov	sp, r7
 8009116:	bd80      	pop	{r7, pc}
 8009118:	200018b0 	.word	0x200018b0
 800911c:	0800c728 	.word	0x0800c728

08009120 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009120:	b580      	push	{r7, lr}
 8009122:	b082      	sub	sp, #8
 8009124:	af00      	add	r7, sp, #0
 8009126:	4603      	mov	r3, r0
 8009128:	6039      	str	r1, [r7, #0]
 800912a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	221a      	movs	r2, #26
 8009130:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009132:	f000 f843 	bl	80091bc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8009136:	4b02      	ldr	r3, [pc, #8]	; (8009140 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8009138:	4618      	mov	r0, r3
 800913a:	3708      	adds	r7, #8
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	20000110 	.word	0x20000110

08009144 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009144:	b580      	push	{r7, lr}
 8009146:	b082      	sub	sp, #8
 8009148:	af00      	add	r7, sp, #0
 800914a:	4603      	mov	r3, r0
 800914c:	6039      	str	r1, [r7, #0]
 800914e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009150:	79fb      	ldrb	r3, [r7, #7]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d105      	bne.n	8009162 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009156:	683a      	ldr	r2, [r7, #0]
 8009158:	4907      	ldr	r1, [pc, #28]	; (8009178 <USBD_FS_ConfigStrDescriptor+0x34>)
 800915a:	4808      	ldr	r0, [pc, #32]	; (800917c <USBD_FS_ConfigStrDescriptor+0x38>)
 800915c:	f7ff fdb4 	bl	8008cc8 <USBD_GetString>
 8009160:	e004      	b.n	800916c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009162:	683a      	ldr	r2, [r7, #0]
 8009164:	4904      	ldr	r1, [pc, #16]	; (8009178 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009166:	4805      	ldr	r0, [pc, #20]	; (800917c <USBD_FS_ConfigStrDescriptor+0x38>)
 8009168:	f7ff fdae 	bl	8008cc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800916c:	4b02      	ldr	r3, [pc, #8]	; (8009178 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800916e:	4618      	mov	r0, r3
 8009170:	3708      	adds	r7, #8
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	200018b0 	.word	0x200018b0
 800917c:	0800c73c 	.word	0x0800c73c

08009180 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b082      	sub	sp, #8
 8009184:	af00      	add	r7, sp, #0
 8009186:	4603      	mov	r3, r0
 8009188:	6039      	str	r1, [r7, #0]
 800918a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800918c:	79fb      	ldrb	r3, [r7, #7]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d105      	bne.n	800919e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	4907      	ldr	r1, [pc, #28]	; (80091b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009196:	4808      	ldr	r0, [pc, #32]	; (80091b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009198:	f7ff fd96 	bl	8008cc8 <USBD_GetString>
 800919c:	e004      	b.n	80091a8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800919e:	683a      	ldr	r2, [r7, #0]
 80091a0:	4904      	ldr	r1, [pc, #16]	; (80091b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80091a2:	4805      	ldr	r0, [pc, #20]	; (80091b8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80091a4:	f7ff fd90 	bl	8008cc8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80091a8:	4b02      	ldr	r3, [pc, #8]	; (80091b4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3708      	adds	r7, #8
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}
 80091b2:	bf00      	nop
 80091b4:	200018b0 	.word	0x200018b0
 80091b8:	0800c748 	.word	0x0800c748

080091bc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b084      	sub	sp, #16
 80091c0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80091c2:	4b0f      	ldr	r3, [pc, #60]	; (8009200 <Get_SerialNum+0x44>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80091c8:	4b0e      	ldr	r3, [pc, #56]	; (8009204 <Get_SerialNum+0x48>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80091ce:	4b0e      	ldr	r3, [pc, #56]	; (8009208 <Get_SerialNum+0x4c>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80091d4:	68fa      	ldr	r2, [r7, #12]
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4413      	add	r3, r2
 80091da:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d009      	beq.n	80091f6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80091e2:	2208      	movs	r2, #8
 80091e4:	4909      	ldr	r1, [pc, #36]	; (800920c <Get_SerialNum+0x50>)
 80091e6:	68f8      	ldr	r0, [r7, #12]
 80091e8:	f000 f814 	bl	8009214 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80091ec:	2204      	movs	r2, #4
 80091ee:	4908      	ldr	r1, [pc, #32]	; (8009210 <Get_SerialNum+0x54>)
 80091f0:	68b8      	ldr	r0, [r7, #8]
 80091f2:	f000 f80f 	bl	8009214 <IntToUnicode>
  }
}
 80091f6:	bf00      	nop
 80091f8:	3710      	adds	r7, #16
 80091fa:	46bd      	mov	sp, r7
 80091fc:	bd80      	pop	{r7, pc}
 80091fe:	bf00      	nop
 8009200:	1fff7a10 	.word	0x1fff7a10
 8009204:	1fff7a14 	.word	0x1fff7a14
 8009208:	1fff7a18 	.word	0x1fff7a18
 800920c:	20000112 	.word	0x20000112
 8009210:	20000122 	.word	0x20000122

08009214 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009214:	b480      	push	{r7}
 8009216:	b087      	sub	sp, #28
 8009218:	af00      	add	r7, sp, #0
 800921a:	60f8      	str	r0, [r7, #12]
 800921c:	60b9      	str	r1, [r7, #8]
 800921e:	4613      	mov	r3, r2
 8009220:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009222:	2300      	movs	r3, #0
 8009224:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009226:	2300      	movs	r3, #0
 8009228:	75fb      	strb	r3, [r7, #23]
 800922a:	e027      	b.n	800927c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	0f1b      	lsrs	r3, r3, #28
 8009230:	2b09      	cmp	r3, #9
 8009232:	d80b      	bhi.n	800924c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	0f1b      	lsrs	r3, r3, #28
 8009238:	b2da      	uxtb	r2, r3
 800923a:	7dfb      	ldrb	r3, [r7, #23]
 800923c:	005b      	lsls	r3, r3, #1
 800923e:	4619      	mov	r1, r3
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	440b      	add	r3, r1
 8009244:	3230      	adds	r2, #48	; 0x30
 8009246:	b2d2      	uxtb	r2, r2
 8009248:	701a      	strb	r2, [r3, #0]
 800924a:	e00a      	b.n	8009262 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	0f1b      	lsrs	r3, r3, #28
 8009250:	b2da      	uxtb	r2, r3
 8009252:	7dfb      	ldrb	r3, [r7, #23]
 8009254:	005b      	lsls	r3, r3, #1
 8009256:	4619      	mov	r1, r3
 8009258:	68bb      	ldr	r3, [r7, #8]
 800925a:	440b      	add	r3, r1
 800925c:	3237      	adds	r2, #55	; 0x37
 800925e:	b2d2      	uxtb	r2, r2
 8009260:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	011b      	lsls	r3, r3, #4
 8009266:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009268:	7dfb      	ldrb	r3, [r7, #23]
 800926a:	005b      	lsls	r3, r3, #1
 800926c:	3301      	adds	r3, #1
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	4413      	add	r3, r2
 8009272:	2200      	movs	r2, #0
 8009274:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009276:	7dfb      	ldrb	r3, [r7, #23]
 8009278:	3301      	adds	r3, #1
 800927a:	75fb      	strb	r3, [r7, #23]
 800927c:	7dfa      	ldrb	r2, [r7, #23]
 800927e:	79fb      	ldrb	r3, [r7, #7]
 8009280:	429a      	cmp	r2, r3
 8009282:	d3d3      	bcc.n	800922c <IntToUnicode+0x18>
  }
}
 8009284:	bf00      	nop
 8009286:	bf00      	nop
 8009288:	371c      	adds	r7, #28
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
	...

08009294 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b08a      	sub	sp, #40	; 0x28
 8009298:	af00      	add	r7, sp, #0
 800929a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800929c:	f107 0314 	add.w	r3, r7, #20
 80092a0:	2200      	movs	r2, #0
 80092a2:	601a      	str	r2, [r3, #0]
 80092a4:	605a      	str	r2, [r3, #4]
 80092a6:	609a      	str	r2, [r3, #8]
 80092a8:	60da      	str	r2, [r3, #12]
 80092aa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092b4:	d13a      	bne.n	800932c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80092b6:	2300      	movs	r3, #0
 80092b8:	613b      	str	r3, [r7, #16]
 80092ba:	4b1e      	ldr	r3, [pc, #120]	; (8009334 <HAL_PCD_MspInit+0xa0>)
 80092bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092be:	4a1d      	ldr	r2, [pc, #116]	; (8009334 <HAL_PCD_MspInit+0xa0>)
 80092c0:	f043 0301 	orr.w	r3, r3, #1
 80092c4:	6313      	str	r3, [r2, #48]	; 0x30
 80092c6:	4b1b      	ldr	r3, [pc, #108]	; (8009334 <HAL_PCD_MspInit+0xa0>)
 80092c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092ca:	f003 0301 	and.w	r3, r3, #1
 80092ce:	613b      	str	r3, [r7, #16]
 80092d0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80092d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80092d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092d8:	2302      	movs	r3, #2
 80092da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092dc:	2300      	movs	r3, #0
 80092de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092e0:	2303      	movs	r3, #3
 80092e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80092e4:	230a      	movs	r3, #10
 80092e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80092e8:	f107 0314 	add.w	r3, r7, #20
 80092ec:	4619      	mov	r1, r3
 80092ee:	4812      	ldr	r0, [pc, #72]	; (8009338 <HAL_PCD_MspInit+0xa4>)
 80092f0:	f7f9 fa16 	bl	8002720 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80092f4:	4b0f      	ldr	r3, [pc, #60]	; (8009334 <HAL_PCD_MspInit+0xa0>)
 80092f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092f8:	4a0e      	ldr	r2, [pc, #56]	; (8009334 <HAL_PCD_MspInit+0xa0>)
 80092fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80092fe:	6353      	str	r3, [r2, #52]	; 0x34
 8009300:	2300      	movs	r3, #0
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	4b0b      	ldr	r3, [pc, #44]	; (8009334 <HAL_PCD_MspInit+0xa0>)
 8009306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009308:	4a0a      	ldr	r2, [pc, #40]	; (8009334 <HAL_PCD_MspInit+0xa0>)
 800930a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800930e:	6453      	str	r3, [r2, #68]	; 0x44
 8009310:	4b08      	ldr	r3, [pc, #32]	; (8009334 <HAL_PCD_MspInit+0xa0>)
 8009312:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009318:	60fb      	str	r3, [r7, #12]
 800931a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800931c:	2200      	movs	r2, #0
 800931e:	2100      	movs	r1, #0
 8009320:	2043      	movs	r0, #67	; 0x43
 8009322:	f7f9 f9c6 	bl	80026b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8009326:	2043      	movs	r0, #67	; 0x43
 8009328:	f7f9 f9df 	bl	80026ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800932c:	bf00      	nop
 800932e:	3728      	adds	r7, #40	; 0x28
 8009330:	46bd      	mov	sp, r7
 8009332:	bd80      	pop	{r7, pc}
 8009334:	40023800 	.word	0x40023800
 8009338:	40020000 	.word	0x40020000

0800933c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009350:	4619      	mov	r1, r3
 8009352:	4610      	mov	r0, r2
 8009354:	f7fe fb59 	bl	8007a0a <USBD_LL_SetupStage>
}
 8009358:	bf00      	nop
 800935a:	3708      	adds	r7, #8
 800935c:	46bd      	mov	sp, r7
 800935e:	bd80      	pop	{r7, pc}

08009360 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009360:	b580      	push	{r7, lr}
 8009362:	b082      	sub	sp, #8
 8009364:	af00      	add	r7, sp, #0
 8009366:	6078      	str	r0, [r7, #4]
 8009368:	460b      	mov	r3, r1
 800936a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009372:	78fa      	ldrb	r2, [r7, #3]
 8009374:	6879      	ldr	r1, [r7, #4]
 8009376:	4613      	mov	r3, r2
 8009378:	00db      	lsls	r3, r3, #3
 800937a:	4413      	add	r3, r2
 800937c:	009b      	lsls	r3, r3, #2
 800937e:	440b      	add	r3, r1
 8009380:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	78fb      	ldrb	r3, [r7, #3]
 8009388:	4619      	mov	r1, r3
 800938a:	f7fe fb93 	bl	8007ab4 <USBD_LL_DataOutStage>
}
 800938e:	bf00      	nop
 8009390:	3708      	adds	r7, #8
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}

08009396 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009396:	b580      	push	{r7, lr}
 8009398:	b082      	sub	sp, #8
 800939a:	af00      	add	r7, sp, #0
 800939c:	6078      	str	r0, [r7, #4]
 800939e:	460b      	mov	r3, r1
 80093a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80093a8:	78fa      	ldrb	r2, [r7, #3]
 80093aa:	6879      	ldr	r1, [r7, #4]
 80093ac:	4613      	mov	r3, r2
 80093ae:	00db      	lsls	r3, r3, #3
 80093b0:	4413      	add	r3, r2
 80093b2:	009b      	lsls	r3, r3, #2
 80093b4:	440b      	add	r3, r1
 80093b6:	334c      	adds	r3, #76	; 0x4c
 80093b8:	681a      	ldr	r2, [r3, #0]
 80093ba:	78fb      	ldrb	r3, [r7, #3]
 80093bc:	4619      	mov	r1, r3
 80093be:	f7fe fc2c 	bl	8007c1a <USBD_LL_DataInStage>
}
 80093c2:	bf00      	nop
 80093c4:	3708      	adds	r7, #8
 80093c6:	46bd      	mov	sp, r7
 80093c8:	bd80      	pop	{r7, pc}

080093ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093ca:	b580      	push	{r7, lr}
 80093cc:	b082      	sub	sp, #8
 80093ce:	af00      	add	r7, sp, #0
 80093d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80093d8:	4618      	mov	r0, r3
 80093da:	f7fe fd60 	bl	8007e9e <USBD_LL_SOF>
}
 80093de:	bf00      	nop
 80093e0:	3708      	adds	r7, #8
 80093e2:	46bd      	mov	sp, r7
 80093e4:	bd80      	pop	{r7, pc}

080093e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80093e6:	b580      	push	{r7, lr}
 80093e8:	b084      	sub	sp, #16
 80093ea:	af00      	add	r7, sp, #0
 80093ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80093ee:	2301      	movs	r3, #1
 80093f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	68db      	ldr	r3, [r3, #12]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d102      	bne.n	8009400 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80093fa:	2300      	movs	r3, #0
 80093fc:	73fb      	strb	r3, [r7, #15]
 80093fe:	e008      	b.n	8009412 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	2b02      	cmp	r3, #2
 8009406:	d102      	bne.n	800940e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8009408:	2301      	movs	r3, #1
 800940a:	73fb      	strb	r3, [r7, #15]
 800940c:	e001      	b.n	8009412 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800940e:	f7f8 f903 	bl	8001618 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009418:	7bfa      	ldrb	r2, [r7, #15]
 800941a:	4611      	mov	r1, r2
 800941c:	4618      	mov	r0, r3
 800941e:	f7fe fd00 	bl	8007e22 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009428:	4618      	mov	r0, r3
 800942a:	f7fe fca8 	bl	8007d7e <USBD_LL_Reset>
}
 800942e:	bf00      	nop
 8009430:	3710      	adds	r7, #16
 8009432:	46bd      	mov	sp, r7
 8009434:	bd80      	pop	{r7, pc}
	...

08009438 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009446:	4618      	mov	r0, r3
 8009448:	f7fe fcfb 	bl	8007e42 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	687a      	ldr	r2, [r7, #4]
 8009458:	6812      	ldr	r2, [r2, #0]
 800945a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800945e:	f043 0301 	orr.w	r3, r3, #1
 8009462:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	6a1b      	ldr	r3, [r3, #32]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d005      	beq.n	8009478 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800946c:	4b04      	ldr	r3, [pc, #16]	; (8009480 <HAL_PCD_SuspendCallback+0x48>)
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	4a03      	ldr	r2, [pc, #12]	; (8009480 <HAL_PCD_SuspendCallback+0x48>)
 8009472:	f043 0306 	orr.w	r3, r3, #6
 8009476:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009478:	bf00      	nop
 800947a:	3708      	adds	r7, #8
 800947c:	46bd      	mov	sp, r7
 800947e:	bd80      	pop	{r7, pc}
 8009480:	e000ed00 	.word	0xe000ed00

08009484 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009492:	4618      	mov	r0, r3
 8009494:	f7fe fceb 	bl	8007e6e <USBD_LL_Resume>
}
 8009498:	bf00      	nop
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
 80094a8:	460b      	mov	r3, r1
 80094aa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094b2:	78fa      	ldrb	r2, [r7, #3]
 80094b4:	4611      	mov	r1, r2
 80094b6:	4618      	mov	r0, r3
 80094b8:	f7fe fd43 	bl	8007f42 <USBD_LL_IsoOUTIncomplete>
}
 80094bc:	bf00      	nop
 80094be:	3708      	adds	r7, #8
 80094c0:	46bd      	mov	sp, r7
 80094c2:	bd80      	pop	{r7, pc}

080094c4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b082      	sub	sp, #8
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	460b      	mov	r3, r1
 80094ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094d6:	78fa      	ldrb	r2, [r7, #3]
 80094d8:	4611      	mov	r1, r2
 80094da:	4618      	mov	r0, r3
 80094dc:	f7fe fcff 	bl	8007ede <USBD_LL_IsoINIncomplete>
}
 80094e0:	bf00      	nop
 80094e2:	3708      	adds	r7, #8
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}

080094e8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80094f6:	4618      	mov	r0, r3
 80094f8:	f7fe fd55 	bl	8007fa6 <USBD_LL_DevConnected>
}
 80094fc:	bf00      	nop
 80094fe:	3708      	adds	r7, #8
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b082      	sub	sp, #8
 8009508:	af00      	add	r7, sp, #0
 800950a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009512:	4618      	mov	r0, r3
 8009514:	f7fe fd52 	bl	8007fbc <USBD_LL_DevDisconnected>
}
 8009518:	bf00      	nop
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	781b      	ldrb	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d13c      	bne.n	80095aa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8009530:	4a20      	ldr	r2, [pc, #128]	; (80095b4 <USBD_LL_Init+0x94>)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	4a1e      	ldr	r2, [pc, #120]	; (80095b4 <USBD_LL_Init+0x94>)
 800953c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8009540:	4b1c      	ldr	r3, [pc, #112]	; (80095b4 <USBD_LL_Init+0x94>)
 8009542:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8009546:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009548:	4b1a      	ldr	r3, [pc, #104]	; (80095b4 <USBD_LL_Init+0x94>)
 800954a:	2204      	movs	r2, #4
 800954c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800954e:	4b19      	ldr	r3, [pc, #100]	; (80095b4 <USBD_LL_Init+0x94>)
 8009550:	2202      	movs	r2, #2
 8009552:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8009554:	4b17      	ldr	r3, [pc, #92]	; (80095b4 <USBD_LL_Init+0x94>)
 8009556:	2200      	movs	r2, #0
 8009558:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800955a:	4b16      	ldr	r3, [pc, #88]	; (80095b4 <USBD_LL_Init+0x94>)
 800955c:	2202      	movs	r2, #2
 800955e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009560:	4b14      	ldr	r3, [pc, #80]	; (80095b4 <USBD_LL_Init+0x94>)
 8009562:	2200      	movs	r2, #0
 8009564:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8009566:	4b13      	ldr	r3, [pc, #76]	; (80095b4 <USBD_LL_Init+0x94>)
 8009568:	2200      	movs	r2, #0
 800956a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800956c:	4b11      	ldr	r3, [pc, #68]	; (80095b4 <USBD_LL_Init+0x94>)
 800956e:	2200      	movs	r2, #0
 8009570:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8009572:	4b10      	ldr	r3, [pc, #64]	; (80095b4 <USBD_LL_Init+0x94>)
 8009574:	2200      	movs	r2, #0
 8009576:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009578:	4b0e      	ldr	r3, [pc, #56]	; (80095b4 <USBD_LL_Init+0x94>)
 800957a:	2200      	movs	r2, #0
 800957c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800957e:	480d      	ldr	r0, [pc, #52]	; (80095b4 <USBD_LL_Init+0x94>)
 8009580:	f7f9 fa6a 	bl	8002a58 <HAL_PCD_Init>
 8009584:	4603      	mov	r3, r0
 8009586:	2b00      	cmp	r3, #0
 8009588:	d001      	beq.n	800958e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800958a:	f7f8 f845 	bl	8001618 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800958e:	2180      	movs	r1, #128	; 0x80
 8009590:	4808      	ldr	r0, [pc, #32]	; (80095b4 <USBD_LL_Init+0x94>)
 8009592:	f7fa fcc2 	bl	8003f1a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8009596:	2240      	movs	r2, #64	; 0x40
 8009598:	2100      	movs	r1, #0
 800959a:	4806      	ldr	r0, [pc, #24]	; (80095b4 <USBD_LL_Init+0x94>)
 800959c:	f7fa fc76 	bl	8003e8c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80095a0:	2280      	movs	r2, #128	; 0x80
 80095a2:	2101      	movs	r1, #1
 80095a4:	4803      	ldr	r0, [pc, #12]	; (80095b4 <USBD_LL_Init+0x94>)
 80095a6:	f7fa fc71 	bl	8003e8c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80095aa:	2300      	movs	r3, #0
}
 80095ac:	4618      	mov	r0, r3
 80095ae:	3708      	adds	r7, #8
 80095b0:	46bd      	mov	sp, r7
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20001ab0 	.word	0x20001ab0

080095b8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b084      	sub	sp, #16
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80095c0:	2300      	movs	r3, #0
 80095c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80095c4:	2300      	movs	r3, #0
 80095c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7f9 fb5f 	bl	8002c92 <HAL_PCD_Start>
 80095d4:	4603      	mov	r3, r0
 80095d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
 80095da:	4618      	mov	r0, r3
 80095dc:	f000 f942 	bl	8009864 <USBD_Get_USB_Status>
 80095e0:	4603      	mov	r3, r0
 80095e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80095e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b084      	sub	sp, #16
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	4608      	mov	r0, r1
 80095f8:	4611      	mov	r1, r2
 80095fa:	461a      	mov	r2, r3
 80095fc:	4603      	mov	r3, r0
 80095fe:	70fb      	strb	r3, [r7, #3]
 8009600:	460b      	mov	r3, r1
 8009602:	70bb      	strb	r3, [r7, #2]
 8009604:	4613      	mov	r3, r2
 8009606:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009608:	2300      	movs	r3, #0
 800960a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009616:	78bb      	ldrb	r3, [r7, #2]
 8009618:	883a      	ldrh	r2, [r7, #0]
 800961a:	78f9      	ldrb	r1, [r7, #3]
 800961c:	f7fa f830 	bl	8003680 <HAL_PCD_EP_Open>
 8009620:	4603      	mov	r3, r0
 8009622:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	4618      	mov	r0, r3
 8009628:	f000 f91c 	bl	8009864 <USBD_Get_USB_Status>
 800962c:	4603      	mov	r3, r0
 800962e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009630:	7bbb      	ldrb	r3, [r7, #14]
}
 8009632:	4618      	mov	r0, r3
 8009634:	3710      	adds	r7, #16
 8009636:	46bd      	mov	sp, r7
 8009638:	bd80      	pop	{r7, pc}

0800963a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b084      	sub	sp, #16
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	460b      	mov	r3, r1
 8009644:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009646:	2300      	movs	r3, #0
 8009648:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800964a:	2300      	movs	r3, #0
 800964c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009654:	78fa      	ldrb	r2, [r7, #3]
 8009656:	4611      	mov	r1, r2
 8009658:	4618      	mov	r0, r3
 800965a:	f7fa f879 	bl	8003750 <HAL_PCD_EP_Close>
 800965e:	4603      	mov	r3, r0
 8009660:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009662:	7bfb      	ldrb	r3, [r7, #15]
 8009664:	4618      	mov	r0, r3
 8009666:	f000 f8fd 	bl	8009864 <USBD_Get_USB_Status>
 800966a:	4603      	mov	r3, r0
 800966c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800966e:	7bbb      	ldrb	r3, [r7, #14]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3710      	adds	r7, #16
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009678:	b580      	push	{r7, lr}
 800967a:	b084      	sub	sp, #16
 800967c:	af00      	add	r7, sp, #0
 800967e:	6078      	str	r0, [r7, #4]
 8009680:	460b      	mov	r3, r1
 8009682:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009684:	2300      	movs	r3, #0
 8009686:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009688:	2300      	movs	r3, #0
 800968a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009692:	78fa      	ldrb	r2, [r7, #3]
 8009694:	4611      	mov	r1, r2
 8009696:	4618      	mov	r0, r3
 8009698:	f7fa f951 	bl	800393e <HAL_PCD_EP_SetStall>
 800969c:	4603      	mov	r3, r0
 800969e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 f8de 	bl	8009864 <USBD_Get_USB_Status>
 80096a8:	4603      	mov	r3, r0
 80096aa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ac:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3710      	adds	r7, #16
 80096b2:	46bd      	mov	sp, r7
 80096b4:	bd80      	pop	{r7, pc}

080096b6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b084      	sub	sp, #16
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
 80096be:	460b      	mov	r3, r1
 80096c0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80096c2:	2300      	movs	r3, #0
 80096c4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80096c6:	2300      	movs	r3, #0
 80096c8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80096d0:	78fa      	ldrb	r2, [r7, #3]
 80096d2:	4611      	mov	r1, r2
 80096d4:	4618      	mov	r0, r3
 80096d6:	f7fa f996 	bl	8003a06 <HAL_PCD_EP_ClrStall>
 80096da:	4603      	mov	r3, r0
 80096dc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80096de:	7bfb      	ldrb	r3, [r7, #15]
 80096e0:	4618      	mov	r0, r3
 80096e2:	f000 f8bf 	bl	8009864 <USBD_Get_USB_Status>
 80096e6:	4603      	mov	r3, r0
 80096e8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80096ea:	7bbb      	ldrb	r3, [r7, #14]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b085      	sub	sp, #20
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
 80096fc:	460b      	mov	r3, r1
 80096fe:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009706:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8009708:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800970c:	2b00      	cmp	r3, #0
 800970e:	da0b      	bge.n	8009728 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009710:	78fb      	ldrb	r3, [r7, #3]
 8009712:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009716:	68f9      	ldr	r1, [r7, #12]
 8009718:	4613      	mov	r3, r2
 800971a:	00db      	lsls	r3, r3, #3
 800971c:	4413      	add	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	440b      	add	r3, r1
 8009722:	333e      	adds	r3, #62	; 0x3e
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	e00b      	b.n	8009740 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8009728:	78fb      	ldrb	r3, [r7, #3]
 800972a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800972e:	68f9      	ldr	r1, [r7, #12]
 8009730:	4613      	mov	r3, r2
 8009732:	00db      	lsls	r3, r3, #3
 8009734:	4413      	add	r3, r2
 8009736:	009b      	lsls	r3, r3, #2
 8009738:	440b      	add	r3, r1
 800973a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800973e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009740:	4618      	mov	r0, r3
 8009742:	3714      	adds	r7, #20
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800974c:	b580      	push	{r7, lr}
 800974e:	b084      	sub	sp, #16
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
 8009754:	460b      	mov	r3, r1
 8009756:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009758:	2300      	movs	r3, #0
 800975a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800975c:	2300      	movs	r3, #0
 800975e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009766:	78fa      	ldrb	r2, [r7, #3]
 8009768:	4611      	mov	r1, r2
 800976a:	4618      	mov	r0, r3
 800976c:	f7f9 ff63 	bl	8003636 <HAL_PCD_SetAddress>
 8009770:	4603      	mov	r3, r0
 8009772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009774:	7bfb      	ldrb	r3, [r7, #15]
 8009776:	4618      	mov	r0, r3
 8009778:	f000 f874 	bl	8009864 <USBD_Get_USB_Status>
 800977c:	4603      	mov	r3, r0
 800977e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009780:	7bbb      	ldrb	r3, [r7, #14]
}
 8009782:	4618      	mov	r0, r3
 8009784:	3710      	adds	r7, #16
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}

0800978a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800978a:	b580      	push	{r7, lr}
 800978c:	b086      	sub	sp, #24
 800978e:	af00      	add	r7, sp, #0
 8009790:	60f8      	str	r0, [r7, #12]
 8009792:	607a      	str	r2, [r7, #4]
 8009794:	603b      	str	r3, [r7, #0]
 8009796:	460b      	mov	r3, r1
 8009798:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800979a:	2300      	movs	r3, #0
 800979c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800979e:	2300      	movs	r3, #0
 80097a0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80097a8:	7af9      	ldrb	r1, [r7, #11]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	f7fa f87c 	bl	80038aa <HAL_PCD_EP_Transmit>
 80097b2:	4603      	mov	r3, r0
 80097b4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097b6:	7dfb      	ldrb	r3, [r7, #23]
 80097b8:	4618      	mov	r0, r3
 80097ba:	f000 f853 	bl	8009864 <USBD_Get_USB_Status>
 80097be:	4603      	mov	r3, r0
 80097c0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80097c2:	7dbb      	ldrb	r3, [r7, #22]
}
 80097c4:	4618      	mov	r0, r3
 80097c6:	3718      	adds	r7, #24
 80097c8:	46bd      	mov	sp, r7
 80097ca:	bd80      	pop	{r7, pc}

080097cc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	607a      	str	r2, [r7, #4]
 80097d6:	603b      	str	r3, [r7, #0]
 80097d8:	460b      	mov	r3, r1
 80097da:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80097ea:	7af9      	ldrb	r1, [r7, #11]
 80097ec:	683b      	ldr	r3, [r7, #0]
 80097ee:	687a      	ldr	r2, [r7, #4]
 80097f0:	f7f9 fff8 	bl	80037e4 <HAL_PCD_EP_Receive>
 80097f4:	4603      	mov	r3, r0
 80097f6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097f8:	7dfb      	ldrb	r3, [r7, #23]
 80097fa:	4618      	mov	r0, r3
 80097fc:	f000 f832 	bl	8009864 <USBD_Get_USB_Status>
 8009800:	4603      	mov	r3, r0
 8009802:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009804:	7dbb      	ldrb	r3, [r7, #22]
}
 8009806:	4618      	mov	r0, r3
 8009808:	3718      	adds	r7, #24
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b082      	sub	sp, #8
 8009812:	af00      	add	r7, sp, #0
 8009814:	6078      	str	r0, [r7, #4]
 8009816:	460b      	mov	r3, r1
 8009818:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009820:	78fa      	ldrb	r2, [r7, #3]
 8009822:	4611      	mov	r1, r2
 8009824:	4618      	mov	r0, r3
 8009826:	f7fa f828 	bl	800387a <HAL_PCD_EP_GetRxCount>
 800982a:	4603      	mov	r3, r0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}

08009834 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800983c:	4b03      	ldr	r3, [pc, #12]	; (800984c <USBD_static_malloc+0x18>)
}
 800983e:	4618      	mov	r0, r3
 8009840:	370c      	adds	r7, #12
 8009842:	46bd      	mov	sp, r7
 8009844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009848:	4770      	bx	lr
 800984a:	bf00      	nop
 800984c:	20001fbc 	.word	0x20001fbc

08009850 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009850:	b480      	push	{r7}
 8009852:	b083      	sub	sp, #12
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]

}
 8009858:	bf00      	nop
 800985a:	370c      	adds	r7, #12
 800985c:	46bd      	mov	sp, r7
 800985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009862:	4770      	bx	lr

08009864 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009864:	b480      	push	{r7}
 8009866:	b085      	sub	sp, #20
 8009868:	af00      	add	r7, sp, #0
 800986a:	4603      	mov	r3, r0
 800986c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800986e:	2300      	movs	r3, #0
 8009870:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009872:	79fb      	ldrb	r3, [r7, #7]
 8009874:	2b03      	cmp	r3, #3
 8009876:	d817      	bhi.n	80098a8 <USBD_Get_USB_Status+0x44>
 8009878:	a201      	add	r2, pc, #4	; (adr r2, 8009880 <USBD_Get_USB_Status+0x1c>)
 800987a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800987e:	bf00      	nop
 8009880:	08009891 	.word	0x08009891
 8009884:	08009897 	.word	0x08009897
 8009888:	0800989d 	.word	0x0800989d
 800988c:	080098a3 	.word	0x080098a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009890:	2300      	movs	r3, #0
 8009892:	73fb      	strb	r3, [r7, #15]
    break;
 8009894:	e00b      	b.n	80098ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009896:	2303      	movs	r3, #3
 8009898:	73fb      	strb	r3, [r7, #15]
    break;
 800989a:	e008      	b.n	80098ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800989c:	2301      	movs	r3, #1
 800989e:	73fb      	strb	r3, [r7, #15]
    break;
 80098a0:	e005      	b.n	80098ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80098a2:	2303      	movs	r3, #3
 80098a4:	73fb      	strb	r3, [r7, #15]
    break;
 80098a6:	e002      	b.n	80098ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80098a8:	2303      	movs	r3, #3
 80098aa:	73fb      	strb	r3, [r7, #15]
    break;
 80098ac:	bf00      	nop
  }
  return usb_status;
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80098b0:	4618      	mov	r0, r3
 80098b2:	3714      	adds	r7, #20
 80098b4:	46bd      	mov	sp, r7
 80098b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ba:	4770      	bx	lr

080098bc <__errno>:
 80098bc:	4b01      	ldr	r3, [pc, #4]	; (80098c4 <__errno+0x8>)
 80098be:	6818      	ldr	r0, [r3, #0]
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	2000012c 	.word	0x2000012c

080098c8 <__libc_init_array>:
 80098c8:	b570      	push	{r4, r5, r6, lr}
 80098ca:	4d0d      	ldr	r5, [pc, #52]	; (8009900 <__libc_init_array+0x38>)
 80098cc:	4c0d      	ldr	r4, [pc, #52]	; (8009904 <__libc_init_array+0x3c>)
 80098ce:	1b64      	subs	r4, r4, r5
 80098d0:	10a4      	asrs	r4, r4, #2
 80098d2:	2600      	movs	r6, #0
 80098d4:	42a6      	cmp	r6, r4
 80098d6:	d109      	bne.n	80098ec <__libc_init_array+0x24>
 80098d8:	4d0b      	ldr	r5, [pc, #44]	; (8009908 <__libc_init_array+0x40>)
 80098da:	4c0c      	ldr	r4, [pc, #48]	; (800990c <__libc_init_array+0x44>)
 80098dc:	f002 ff04 	bl	800c6e8 <_init>
 80098e0:	1b64      	subs	r4, r4, r5
 80098e2:	10a4      	asrs	r4, r4, #2
 80098e4:	2600      	movs	r6, #0
 80098e6:	42a6      	cmp	r6, r4
 80098e8:	d105      	bne.n	80098f6 <__libc_init_array+0x2e>
 80098ea:	bd70      	pop	{r4, r5, r6, pc}
 80098ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80098f0:	4798      	blx	r3
 80098f2:	3601      	adds	r6, #1
 80098f4:	e7ee      	b.n	80098d4 <__libc_init_array+0xc>
 80098f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80098fa:	4798      	blx	r3
 80098fc:	3601      	adds	r6, #1
 80098fe:	e7f2      	b.n	80098e6 <__libc_init_array+0x1e>
 8009900:	0800cb4c 	.word	0x0800cb4c
 8009904:	0800cb4c 	.word	0x0800cb4c
 8009908:	0800cb4c 	.word	0x0800cb4c
 800990c:	0800cb50 	.word	0x0800cb50

08009910 <memset>:
 8009910:	4402      	add	r2, r0
 8009912:	4603      	mov	r3, r0
 8009914:	4293      	cmp	r3, r2
 8009916:	d100      	bne.n	800991a <memset+0xa>
 8009918:	4770      	bx	lr
 800991a:	f803 1b01 	strb.w	r1, [r3], #1
 800991e:	e7f9      	b.n	8009914 <memset+0x4>

08009920 <__cvt>:
 8009920:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009924:	ec55 4b10 	vmov	r4, r5, d0
 8009928:	2d00      	cmp	r5, #0
 800992a:	460e      	mov	r6, r1
 800992c:	4619      	mov	r1, r3
 800992e:	462b      	mov	r3, r5
 8009930:	bfbb      	ittet	lt
 8009932:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009936:	461d      	movlt	r5, r3
 8009938:	2300      	movge	r3, #0
 800993a:	232d      	movlt	r3, #45	; 0x2d
 800993c:	700b      	strb	r3, [r1, #0]
 800993e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009940:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009944:	4691      	mov	r9, r2
 8009946:	f023 0820 	bic.w	r8, r3, #32
 800994a:	bfbc      	itt	lt
 800994c:	4622      	movlt	r2, r4
 800994e:	4614      	movlt	r4, r2
 8009950:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009954:	d005      	beq.n	8009962 <__cvt+0x42>
 8009956:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800995a:	d100      	bne.n	800995e <__cvt+0x3e>
 800995c:	3601      	adds	r6, #1
 800995e:	2102      	movs	r1, #2
 8009960:	e000      	b.n	8009964 <__cvt+0x44>
 8009962:	2103      	movs	r1, #3
 8009964:	ab03      	add	r3, sp, #12
 8009966:	9301      	str	r3, [sp, #4]
 8009968:	ab02      	add	r3, sp, #8
 800996a:	9300      	str	r3, [sp, #0]
 800996c:	ec45 4b10 	vmov	d0, r4, r5
 8009970:	4653      	mov	r3, sl
 8009972:	4632      	mov	r2, r6
 8009974:	f000 fcec 	bl	800a350 <_dtoa_r>
 8009978:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800997c:	4607      	mov	r7, r0
 800997e:	d102      	bne.n	8009986 <__cvt+0x66>
 8009980:	f019 0f01 	tst.w	r9, #1
 8009984:	d022      	beq.n	80099cc <__cvt+0xac>
 8009986:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800998a:	eb07 0906 	add.w	r9, r7, r6
 800998e:	d110      	bne.n	80099b2 <__cvt+0x92>
 8009990:	783b      	ldrb	r3, [r7, #0]
 8009992:	2b30      	cmp	r3, #48	; 0x30
 8009994:	d10a      	bne.n	80099ac <__cvt+0x8c>
 8009996:	2200      	movs	r2, #0
 8009998:	2300      	movs	r3, #0
 800999a:	4620      	mov	r0, r4
 800999c:	4629      	mov	r1, r5
 800999e:	f7f7 f89b 	bl	8000ad8 <__aeabi_dcmpeq>
 80099a2:	b918      	cbnz	r0, 80099ac <__cvt+0x8c>
 80099a4:	f1c6 0601 	rsb	r6, r6, #1
 80099a8:	f8ca 6000 	str.w	r6, [sl]
 80099ac:	f8da 3000 	ldr.w	r3, [sl]
 80099b0:	4499      	add	r9, r3
 80099b2:	2200      	movs	r2, #0
 80099b4:	2300      	movs	r3, #0
 80099b6:	4620      	mov	r0, r4
 80099b8:	4629      	mov	r1, r5
 80099ba:	f7f7 f88d 	bl	8000ad8 <__aeabi_dcmpeq>
 80099be:	b108      	cbz	r0, 80099c4 <__cvt+0xa4>
 80099c0:	f8cd 900c 	str.w	r9, [sp, #12]
 80099c4:	2230      	movs	r2, #48	; 0x30
 80099c6:	9b03      	ldr	r3, [sp, #12]
 80099c8:	454b      	cmp	r3, r9
 80099ca:	d307      	bcc.n	80099dc <__cvt+0xbc>
 80099cc:	9b03      	ldr	r3, [sp, #12]
 80099ce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80099d0:	1bdb      	subs	r3, r3, r7
 80099d2:	4638      	mov	r0, r7
 80099d4:	6013      	str	r3, [r2, #0]
 80099d6:	b004      	add	sp, #16
 80099d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099dc:	1c59      	adds	r1, r3, #1
 80099de:	9103      	str	r1, [sp, #12]
 80099e0:	701a      	strb	r2, [r3, #0]
 80099e2:	e7f0      	b.n	80099c6 <__cvt+0xa6>

080099e4 <__exponent>:
 80099e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099e6:	4603      	mov	r3, r0
 80099e8:	2900      	cmp	r1, #0
 80099ea:	bfb8      	it	lt
 80099ec:	4249      	neglt	r1, r1
 80099ee:	f803 2b02 	strb.w	r2, [r3], #2
 80099f2:	bfb4      	ite	lt
 80099f4:	222d      	movlt	r2, #45	; 0x2d
 80099f6:	222b      	movge	r2, #43	; 0x2b
 80099f8:	2909      	cmp	r1, #9
 80099fa:	7042      	strb	r2, [r0, #1]
 80099fc:	dd2a      	ble.n	8009a54 <__exponent+0x70>
 80099fe:	f10d 0407 	add.w	r4, sp, #7
 8009a02:	46a4      	mov	ip, r4
 8009a04:	270a      	movs	r7, #10
 8009a06:	46a6      	mov	lr, r4
 8009a08:	460a      	mov	r2, r1
 8009a0a:	fb91 f6f7 	sdiv	r6, r1, r7
 8009a0e:	fb07 1516 	mls	r5, r7, r6, r1
 8009a12:	3530      	adds	r5, #48	; 0x30
 8009a14:	2a63      	cmp	r2, #99	; 0x63
 8009a16:	f104 34ff 	add.w	r4, r4, #4294967295
 8009a1a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009a1e:	4631      	mov	r1, r6
 8009a20:	dcf1      	bgt.n	8009a06 <__exponent+0x22>
 8009a22:	3130      	adds	r1, #48	; 0x30
 8009a24:	f1ae 0502 	sub.w	r5, lr, #2
 8009a28:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009a2c:	1c44      	adds	r4, r0, #1
 8009a2e:	4629      	mov	r1, r5
 8009a30:	4561      	cmp	r1, ip
 8009a32:	d30a      	bcc.n	8009a4a <__exponent+0x66>
 8009a34:	f10d 0209 	add.w	r2, sp, #9
 8009a38:	eba2 020e 	sub.w	r2, r2, lr
 8009a3c:	4565      	cmp	r5, ip
 8009a3e:	bf88      	it	hi
 8009a40:	2200      	movhi	r2, #0
 8009a42:	4413      	add	r3, r2
 8009a44:	1a18      	subs	r0, r3, r0
 8009a46:	b003      	add	sp, #12
 8009a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009a4e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009a52:	e7ed      	b.n	8009a30 <__exponent+0x4c>
 8009a54:	2330      	movs	r3, #48	; 0x30
 8009a56:	3130      	adds	r1, #48	; 0x30
 8009a58:	7083      	strb	r3, [r0, #2]
 8009a5a:	70c1      	strb	r1, [r0, #3]
 8009a5c:	1d03      	adds	r3, r0, #4
 8009a5e:	e7f1      	b.n	8009a44 <__exponent+0x60>

08009a60 <_printf_float>:
 8009a60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a64:	ed2d 8b02 	vpush	{d8}
 8009a68:	b08d      	sub	sp, #52	; 0x34
 8009a6a:	460c      	mov	r4, r1
 8009a6c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009a70:	4616      	mov	r6, r2
 8009a72:	461f      	mov	r7, r3
 8009a74:	4605      	mov	r5, r0
 8009a76:	f001 fa59 	bl	800af2c <_localeconv_r>
 8009a7a:	f8d0 a000 	ldr.w	sl, [r0]
 8009a7e:	4650      	mov	r0, sl
 8009a80:	f7f6 fbae 	bl	80001e0 <strlen>
 8009a84:	2300      	movs	r3, #0
 8009a86:	930a      	str	r3, [sp, #40]	; 0x28
 8009a88:	6823      	ldr	r3, [r4, #0]
 8009a8a:	9305      	str	r3, [sp, #20]
 8009a8c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a90:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009a94:	3307      	adds	r3, #7
 8009a96:	f023 0307 	bic.w	r3, r3, #7
 8009a9a:	f103 0208 	add.w	r2, r3, #8
 8009a9e:	f8c8 2000 	str.w	r2, [r8]
 8009aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aa6:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009aaa:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8009aae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ab2:	9307      	str	r3, [sp, #28]
 8009ab4:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ab8:	ee08 0a10 	vmov	s16, r0
 8009abc:	4b9f      	ldr	r3, [pc, #636]	; (8009d3c <_printf_float+0x2dc>)
 8009abe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ac2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ac6:	f7f7 f839 	bl	8000b3c <__aeabi_dcmpun>
 8009aca:	bb88      	cbnz	r0, 8009b30 <_printf_float+0xd0>
 8009acc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009ad0:	4b9a      	ldr	r3, [pc, #616]	; (8009d3c <_printf_float+0x2dc>)
 8009ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ad6:	f7f7 f813 	bl	8000b00 <__aeabi_dcmple>
 8009ada:	bb48      	cbnz	r0, 8009b30 <_printf_float+0xd0>
 8009adc:	2200      	movs	r2, #0
 8009ade:	2300      	movs	r3, #0
 8009ae0:	4640      	mov	r0, r8
 8009ae2:	4649      	mov	r1, r9
 8009ae4:	f7f7 f802 	bl	8000aec <__aeabi_dcmplt>
 8009ae8:	b110      	cbz	r0, 8009af0 <_printf_float+0x90>
 8009aea:	232d      	movs	r3, #45	; 0x2d
 8009aec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009af0:	4b93      	ldr	r3, [pc, #588]	; (8009d40 <_printf_float+0x2e0>)
 8009af2:	4894      	ldr	r0, [pc, #592]	; (8009d44 <_printf_float+0x2e4>)
 8009af4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009af8:	bf94      	ite	ls
 8009afa:	4698      	movls	r8, r3
 8009afc:	4680      	movhi	r8, r0
 8009afe:	2303      	movs	r3, #3
 8009b00:	6123      	str	r3, [r4, #16]
 8009b02:	9b05      	ldr	r3, [sp, #20]
 8009b04:	f023 0204 	bic.w	r2, r3, #4
 8009b08:	6022      	str	r2, [r4, #0]
 8009b0a:	f04f 0900 	mov.w	r9, #0
 8009b0e:	9700      	str	r7, [sp, #0]
 8009b10:	4633      	mov	r3, r6
 8009b12:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b14:	4621      	mov	r1, r4
 8009b16:	4628      	mov	r0, r5
 8009b18:	f000 f9d8 	bl	8009ecc <_printf_common>
 8009b1c:	3001      	adds	r0, #1
 8009b1e:	f040 8090 	bne.w	8009c42 <_printf_float+0x1e2>
 8009b22:	f04f 30ff 	mov.w	r0, #4294967295
 8009b26:	b00d      	add	sp, #52	; 0x34
 8009b28:	ecbd 8b02 	vpop	{d8}
 8009b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b30:	4642      	mov	r2, r8
 8009b32:	464b      	mov	r3, r9
 8009b34:	4640      	mov	r0, r8
 8009b36:	4649      	mov	r1, r9
 8009b38:	f7f7 f800 	bl	8000b3c <__aeabi_dcmpun>
 8009b3c:	b140      	cbz	r0, 8009b50 <_printf_float+0xf0>
 8009b3e:	464b      	mov	r3, r9
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	bfbc      	itt	lt
 8009b44:	232d      	movlt	r3, #45	; 0x2d
 8009b46:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009b4a:	487f      	ldr	r0, [pc, #508]	; (8009d48 <_printf_float+0x2e8>)
 8009b4c:	4b7f      	ldr	r3, [pc, #508]	; (8009d4c <_printf_float+0x2ec>)
 8009b4e:	e7d1      	b.n	8009af4 <_printf_float+0x94>
 8009b50:	6863      	ldr	r3, [r4, #4]
 8009b52:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009b56:	9206      	str	r2, [sp, #24]
 8009b58:	1c5a      	adds	r2, r3, #1
 8009b5a:	d13f      	bne.n	8009bdc <_printf_float+0x17c>
 8009b5c:	2306      	movs	r3, #6
 8009b5e:	6063      	str	r3, [r4, #4]
 8009b60:	9b05      	ldr	r3, [sp, #20]
 8009b62:	6861      	ldr	r1, [r4, #4]
 8009b64:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009b68:	2300      	movs	r3, #0
 8009b6a:	9303      	str	r3, [sp, #12]
 8009b6c:	ab0a      	add	r3, sp, #40	; 0x28
 8009b6e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009b72:	ab09      	add	r3, sp, #36	; 0x24
 8009b74:	ec49 8b10 	vmov	d0, r8, r9
 8009b78:	9300      	str	r3, [sp, #0]
 8009b7a:	6022      	str	r2, [r4, #0]
 8009b7c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009b80:	4628      	mov	r0, r5
 8009b82:	f7ff fecd 	bl	8009920 <__cvt>
 8009b86:	9b06      	ldr	r3, [sp, #24]
 8009b88:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009b8a:	2b47      	cmp	r3, #71	; 0x47
 8009b8c:	4680      	mov	r8, r0
 8009b8e:	d108      	bne.n	8009ba2 <_printf_float+0x142>
 8009b90:	1cc8      	adds	r0, r1, #3
 8009b92:	db02      	blt.n	8009b9a <_printf_float+0x13a>
 8009b94:	6863      	ldr	r3, [r4, #4]
 8009b96:	4299      	cmp	r1, r3
 8009b98:	dd41      	ble.n	8009c1e <_printf_float+0x1be>
 8009b9a:	f1ab 0b02 	sub.w	fp, fp, #2
 8009b9e:	fa5f fb8b 	uxtb.w	fp, fp
 8009ba2:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ba6:	d820      	bhi.n	8009bea <_printf_float+0x18a>
 8009ba8:	3901      	subs	r1, #1
 8009baa:	465a      	mov	r2, fp
 8009bac:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009bb0:	9109      	str	r1, [sp, #36]	; 0x24
 8009bb2:	f7ff ff17 	bl	80099e4 <__exponent>
 8009bb6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bb8:	1813      	adds	r3, r2, r0
 8009bba:	2a01      	cmp	r2, #1
 8009bbc:	4681      	mov	r9, r0
 8009bbe:	6123      	str	r3, [r4, #16]
 8009bc0:	dc02      	bgt.n	8009bc8 <_printf_float+0x168>
 8009bc2:	6822      	ldr	r2, [r4, #0]
 8009bc4:	07d2      	lsls	r2, r2, #31
 8009bc6:	d501      	bpl.n	8009bcc <_printf_float+0x16c>
 8009bc8:	3301      	adds	r3, #1
 8009bca:	6123      	str	r3, [r4, #16]
 8009bcc:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d09c      	beq.n	8009b0e <_printf_float+0xae>
 8009bd4:	232d      	movs	r3, #45	; 0x2d
 8009bd6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bda:	e798      	b.n	8009b0e <_printf_float+0xae>
 8009bdc:	9a06      	ldr	r2, [sp, #24]
 8009bde:	2a47      	cmp	r2, #71	; 0x47
 8009be0:	d1be      	bne.n	8009b60 <_printf_float+0x100>
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d1bc      	bne.n	8009b60 <_printf_float+0x100>
 8009be6:	2301      	movs	r3, #1
 8009be8:	e7b9      	b.n	8009b5e <_printf_float+0xfe>
 8009bea:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009bee:	d118      	bne.n	8009c22 <_printf_float+0x1c2>
 8009bf0:	2900      	cmp	r1, #0
 8009bf2:	6863      	ldr	r3, [r4, #4]
 8009bf4:	dd0b      	ble.n	8009c0e <_printf_float+0x1ae>
 8009bf6:	6121      	str	r1, [r4, #16]
 8009bf8:	b913      	cbnz	r3, 8009c00 <_printf_float+0x1a0>
 8009bfa:	6822      	ldr	r2, [r4, #0]
 8009bfc:	07d0      	lsls	r0, r2, #31
 8009bfe:	d502      	bpl.n	8009c06 <_printf_float+0x1a6>
 8009c00:	3301      	adds	r3, #1
 8009c02:	440b      	add	r3, r1
 8009c04:	6123      	str	r3, [r4, #16]
 8009c06:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c08:	f04f 0900 	mov.w	r9, #0
 8009c0c:	e7de      	b.n	8009bcc <_printf_float+0x16c>
 8009c0e:	b913      	cbnz	r3, 8009c16 <_printf_float+0x1b6>
 8009c10:	6822      	ldr	r2, [r4, #0]
 8009c12:	07d2      	lsls	r2, r2, #31
 8009c14:	d501      	bpl.n	8009c1a <_printf_float+0x1ba>
 8009c16:	3302      	adds	r3, #2
 8009c18:	e7f4      	b.n	8009c04 <_printf_float+0x1a4>
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e7f2      	b.n	8009c04 <_printf_float+0x1a4>
 8009c1e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c24:	4299      	cmp	r1, r3
 8009c26:	db05      	blt.n	8009c34 <_printf_float+0x1d4>
 8009c28:	6823      	ldr	r3, [r4, #0]
 8009c2a:	6121      	str	r1, [r4, #16]
 8009c2c:	07d8      	lsls	r0, r3, #31
 8009c2e:	d5ea      	bpl.n	8009c06 <_printf_float+0x1a6>
 8009c30:	1c4b      	adds	r3, r1, #1
 8009c32:	e7e7      	b.n	8009c04 <_printf_float+0x1a4>
 8009c34:	2900      	cmp	r1, #0
 8009c36:	bfd4      	ite	le
 8009c38:	f1c1 0202 	rsble	r2, r1, #2
 8009c3c:	2201      	movgt	r2, #1
 8009c3e:	4413      	add	r3, r2
 8009c40:	e7e0      	b.n	8009c04 <_printf_float+0x1a4>
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	055a      	lsls	r2, r3, #21
 8009c46:	d407      	bmi.n	8009c58 <_printf_float+0x1f8>
 8009c48:	6923      	ldr	r3, [r4, #16]
 8009c4a:	4642      	mov	r2, r8
 8009c4c:	4631      	mov	r1, r6
 8009c4e:	4628      	mov	r0, r5
 8009c50:	47b8      	blx	r7
 8009c52:	3001      	adds	r0, #1
 8009c54:	d12c      	bne.n	8009cb0 <_printf_float+0x250>
 8009c56:	e764      	b.n	8009b22 <_printf_float+0xc2>
 8009c58:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c5c:	f240 80e0 	bls.w	8009e20 <_printf_float+0x3c0>
 8009c60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c64:	2200      	movs	r2, #0
 8009c66:	2300      	movs	r3, #0
 8009c68:	f7f6 ff36 	bl	8000ad8 <__aeabi_dcmpeq>
 8009c6c:	2800      	cmp	r0, #0
 8009c6e:	d034      	beq.n	8009cda <_printf_float+0x27a>
 8009c70:	4a37      	ldr	r2, [pc, #220]	; (8009d50 <_printf_float+0x2f0>)
 8009c72:	2301      	movs	r3, #1
 8009c74:	4631      	mov	r1, r6
 8009c76:	4628      	mov	r0, r5
 8009c78:	47b8      	blx	r7
 8009c7a:	3001      	adds	r0, #1
 8009c7c:	f43f af51 	beq.w	8009b22 <_printf_float+0xc2>
 8009c80:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c84:	429a      	cmp	r2, r3
 8009c86:	db02      	blt.n	8009c8e <_printf_float+0x22e>
 8009c88:	6823      	ldr	r3, [r4, #0]
 8009c8a:	07d8      	lsls	r0, r3, #31
 8009c8c:	d510      	bpl.n	8009cb0 <_printf_float+0x250>
 8009c8e:	ee18 3a10 	vmov	r3, s16
 8009c92:	4652      	mov	r2, sl
 8009c94:	4631      	mov	r1, r6
 8009c96:	4628      	mov	r0, r5
 8009c98:	47b8      	blx	r7
 8009c9a:	3001      	adds	r0, #1
 8009c9c:	f43f af41 	beq.w	8009b22 <_printf_float+0xc2>
 8009ca0:	f04f 0800 	mov.w	r8, #0
 8009ca4:	f104 091a 	add.w	r9, r4, #26
 8009ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009caa:	3b01      	subs	r3, #1
 8009cac:	4543      	cmp	r3, r8
 8009cae:	dc09      	bgt.n	8009cc4 <_printf_float+0x264>
 8009cb0:	6823      	ldr	r3, [r4, #0]
 8009cb2:	079b      	lsls	r3, r3, #30
 8009cb4:	f100 8105 	bmi.w	8009ec2 <_printf_float+0x462>
 8009cb8:	68e0      	ldr	r0, [r4, #12]
 8009cba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cbc:	4298      	cmp	r0, r3
 8009cbe:	bfb8      	it	lt
 8009cc0:	4618      	movlt	r0, r3
 8009cc2:	e730      	b.n	8009b26 <_printf_float+0xc6>
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	464a      	mov	r2, r9
 8009cc8:	4631      	mov	r1, r6
 8009cca:	4628      	mov	r0, r5
 8009ccc:	47b8      	blx	r7
 8009cce:	3001      	adds	r0, #1
 8009cd0:	f43f af27 	beq.w	8009b22 <_printf_float+0xc2>
 8009cd4:	f108 0801 	add.w	r8, r8, #1
 8009cd8:	e7e6      	b.n	8009ca8 <_printf_float+0x248>
 8009cda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cdc:	2b00      	cmp	r3, #0
 8009cde:	dc39      	bgt.n	8009d54 <_printf_float+0x2f4>
 8009ce0:	4a1b      	ldr	r2, [pc, #108]	; (8009d50 <_printf_float+0x2f0>)
 8009ce2:	2301      	movs	r3, #1
 8009ce4:	4631      	mov	r1, r6
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	47b8      	blx	r7
 8009cea:	3001      	adds	r0, #1
 8009cec:	f43f af19 	beq.w	8009b22 <_printf_float+0xc2>
 8009cf0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cf4:	4313      	orrs	r3, r2
 8009cf6:	d102      	bne.n	8009cfe <_printf_float+0x29e>
 8009cf8:	6823      	ldr	r3, [r4, #0]
 8009cfa:	07d9      	lsls	r1, r3, #31
 8009cfc:	d5d8      	bpl.n	8009cb0 <_printf_float+0x250>
 8009cfe:	ee18 3a10 	vmov	r3, s16
 8009d02:	4652      	mov	r2, sl
 8009d04:	4631      	mov	r1, r6
 8009d06:	4628      	mov	r0, r5
 8009d08:	47b8      	blx	r7
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	f43f af09 	beq.w	8009b22 <_printf_float+0xc2>
 8009d10:	f04f 0900 	mov.w	r9, #0
 8009d14:	f104 0a1a 	add.w	sl, r4, #26
 8009d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d1a:	425b      	negs	r3, r3
 8009d1c:	454b      	cmp	r3, r9
 8009d1e:	dc01      	bgt.n	8009d24 <_printf_float+0x2c4>
 8009d20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d22:	e792      	b.n	8009c4a <_printf_float+0x1ea>
 8009d24:	2301      	movs	r3, #1
 8009d26:	4652      	mov	r2, sl
 8009d28:	4631      	mov	r1, r6
 8009d2a:	4628      	mov	r0, r5
 8009d2c:	47b8      	blx	r7
 8009d2e:	3001      	adds	r0, #1
 8009d30:	f43f aef7 	beq.w	8009b22 <_printf_float+0xc2>
 8009d34:	f109 0901 	add.w	r9, r9, #1
 8009d38:	e7ee      	b.n	8009d18 <_printf_float+0x2b8>
 8009d3a:	bf00      	nop
 8009d3c:	7fefffff 	.word	0x7fefffff
 8009d40:	0800c76c 	.word	0x0800c76c
 8009d44:	0800c770 	.word	0x0800c770
 8009d48:	0800c778 	.word	0x0800c778
 8009d4c:	0800c774 	.word	0x0800c774
 8009d50:	0800c77c 	.word	0x0800c77c
 8009d54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d56:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d58:	429a      	cmp	r2, r3
 8009d5a:	bfa8      	it	ge
 8009d5c:	461a      	movge	r2, r3
 8009d5e:	2a00      	cmp	r2, #0
 8009d60:	4691      	mov	r9, r2
 8009d62:	dc37      	bgt.n	8009dd4 <_printf_float+0x374>
 8009d64:	f04f 0b00 	mov.w	fp, #0
 8009d68:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d6c:	f104 021a 	add.w	r2, r4, #26
 8009d70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d72:	9305      	str	r3, [sp, #20]
 8009d74:	eba3 0309 	sub.w	r3, r3, r9
 8009d78:	455b      	cmp	r3, fp
 8009d7a:	dc33      	bgt.n	8009de4 <_printf_float+0x384>
 8009d7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009d80:	429a      	cmp	r2, r3
 8009d82:	db3b      	blt.n	8009dfc <_printf_float+0x39c>
 8009d84:	6823      	ldr	r3, [r4, #0]
 8009d86:	07da      	lsls	r2, r3, #31
 8009d88:	d438      	bmi.n	8009dfc <_printf_float+0x39c>
 8009d8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d8c:	9a05      	ldr	r2, [sp, #20]
 8009d8e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d90:	1a9a      	subs	r2, r3, r2
 8009d92:	eba3 0901 	sub.w	r9, r3, r1
 8009d96:	4591      	cmp	r9, r2
 8009d98:	bfa8      	it	ge
 8009d9a:	4691      	movge	r9, r2
 8009d9c:	f1b9 0f00 	cmp.w	r9, #0
 8009da0:	dc35      	bgt.n	8009e0e <_printf_float+0x3ae>
 8009da2:	f04f 0800 	mov.w	r8, #0
 8009da6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009daa:	f104 0a1a 	add.w	sl, r4, #26
 8009dae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009db2:	1a9b      	subs	r3, r3, r2
 8009db4:	eba3 0309 	sub.w	r3, r3, r9
 8009db8:	4543      	cmp	r3, r8
 8009dba:	f77f af79 	ble.w	8009cb0 <_printf_float+0x250>
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	4652      	mov	r2, sl
 8009dc2:	4631      	mov	r1, r6
 8009dc4:	4628      	mov	r0, r5
 8009dc6:	47b8      	blx	r7
 8009dc8:	3001      	adds	r0, #1
 8009dca:	f43f aeaa 	beq.w	8009b22 <_printf_float+0xc2>
 8009dce:	f108 0801 	add.w	r8, r8, #1
 8009dd2:	e7ec      	b.n	8009dae <_printf_float+0x34e>
 8009dd4:	4613      	mov	r3, r2
 8009dd6:	4631      	mov	r1, r6
 8009dd8:	4642      	mov	r2, r8
 8009dda:	4628      	mov	r0, r5
 8009ddc:	47b8      	blx	r7
 8009dde:	3001      	adds	r0, #1
 8009de0:	d1c0      	bne.n	8009d64 <_printf_float+0x304>
 8009de2:	e69e      	b.n	8009b22 <_printf_float+0xc2>
 8009de4:	2301      	movs	r3, #1
 8009de6:	4631      	mov	r1, r6
 8009de8:	4628      	mov	r0, r5
 8009dea:	9205      	str	r2, [sp, #20]
 8009dec:	47b8      	blx	r7
 8009dee:	3001      	adds	r0, #1
 8009df0:	f43f ae97 	beq.w	8009b22 <_printf_float+0xc2>
 8009df4:	9a05      	ldr	r2, [sp, #20]
 8009df6:	f10b 0b01 	add.w	fp, fp, #1
 8009dfa:	e7b9      	b.n	8009d70 <_printf_float+0x310>
 8009dfc:	ee18 3a10 	vmov	r3, s16
 8009e00:	4652      	mov	r2, sl
 8009e02:	4631      	mov	r1, r6
 8009e04:	4628      	mov	r0, r5
 8009e06:	47b8      	blx	r7
 8009e08:	3001      	adds	r0, #1
 8009e0a:	d1be      	bne.n	8009d8a <_printf_float+0x32a>
 8009e0c:	e689      	b.n	8009b22 <_printf_float+0xc2>
 8009e0e:	9a05      	ldr	r2, [sp, #20]
 8009e10:	464b      	mov	r3, r9
 8009e12:	4442      	add	r2, r8
 8009e14:	4631      	mov	r1, r6
 8009e16:	4628      	mov	r0, r5
 8009e18:	47b8      	blx	r7
 8009e1a:	3001      	adds	r0, #1
 8009e1c:	d1c1      	bne.n	8009da2 <_printf_float+0x342>
 8009e1e:	e680      	b.n	8009b22 <_printf_float+0xc2>
 8009e20:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e22:	2a01      	cmp	r2, #1
 8009e24:	dc01      	bgt.n	8009e2a <_printf_float+0x3ca>
 8009e26:	07db      	lsls	r3, r3, #31
 8009e28:	d538      	bpl.n	8009e9c <_printf_float+0x43c>
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	4642      	mov	r2, r8
 8009e2e:	4631      	mov	r1, r6
 8009e30:	4628      	mov	r0, r5
 8009e32:	47b8      	blx	r7
 8009e34:	3001      	adds	r0, #1
 8009e36:	f43f ae74 	beq.w	8009b22 <_printf_float+0xc2>
 8009e3a:	ee18 3a10 	vmov	r3, s16
 8009e3e:	4652      	mov	r2, sl
 8009e40:	4631      	mov	r1, r6
 8009e42:	4628      	mov	r0, r5
 8009e44:	47b8      	blx	r7
 8009e46:	3001      	adds	r0, #1
 8009e48:	f43f ae6b 	beq.w	8009b22 <_printf_float+0xc2>
 8009e4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e50:	2200      	movs	r2, #0
 8009e52:	2300      	movs	r3, #0
 8009e54:	f7f6 fe40 	bl	8000ad8 <__aeabi_dcmpeq>
 8009e58:	b9d8      	cbnz	r0, 8009e92 <_printf_float+0x432>
 8009e5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e5c:	f108 0201 	add.w	r2, r8, #1
 8009e60:	3b01      	subs	r3, #1
 8009e62:	4631      	mov	r1, r6
 8009e64:	4628      	mov	r0, r5
 8009e66:	47b8      	blx	r7
 8009e68:	3001      	adds	r0, #1
 8009e6a:	d10e      	bne.n	8009e8a <_printf_float+0x42a>
 8009e6c:	e659      	b.n	8009b22 <_printf_float+0xc2>
 8009e6e:	2301      	movs	r3, #1
 8009e70:	4652      	mov	r2, sl
 8009e72:	4631      	mov	r1, r6
 8009e74:	4628      	mov	r0, r5
 8009e76:	47b8      	blx	r7
 8009e78:	3001      	adds	r0, #1
 8009e7a:	f43f ae52 	beq.w	8009b22 <_printf_float+0xc2>
 8009e7e:	f108 0801 	add.w	r8, r8, #1
 8009e82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e84:	3b01      	subs	r3, #1
 8009e86:	4543      	cmp	r3, r8
 8009e88:	dcf1      	bgt.n	8009e6e <_printf_float+0x40e>
 8009e8a:	464b      	mov	r3, r9
 8009e8c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009e90:	e6dc      	b.n	8009c4c <_printf_float+0x1ec>
 8009e92:	f04f 0800 	mov.w	r8, #0
 8009e96:	f104 0a1a 	add.w	sl, r4, #26
 8009e9a:	e7f2      	b.n	8009e82 <_printf_float+0x422>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	4642      	mov	r2, r8
 8009ea0:	e7df      	b.n	8009e62 <_printf_float+0x402>
 8009ea2:	2301      	movs	r3, #1
 8009ea4:	464a      	mov	r2, r9
 8009ea6:	4631      	mov	r1, r6
 8009ea8:	4628      	mov	r0, r5
 8009eaa:	47b8      	blx	r7
 8009eac:	3001      	adds	r0, #1
 8009eae:	f43f ae38 	beq.w	8009b22 <_printf_float+0xc2>
 8009eb2:	f108 0801 	add.w	r8, r8, #1
 8009eb6:	68e3      	ldr	r3, [r4, #12]
 8009eb8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009eba:	1a5b      	subs	r3, r3, r1
 8009ebc:	4543      	cmp	r3, r8
 8009ebe:	dcf0      	bgt.n	8009ea2 <_printf_float+0x442>
 8009ec0:	e6fa      	b.n	8009cb8 <_printf_float+0x258>
 8009ec2:	f04f 0800 	mov.w	r8, #0
 8009ec6:	f104 0919 	add.w	r9, r4, #25
 8009eca:	e7f4      	b.n	8009eb6 <_printf_float+0x456>

08009ecc <_printf_common>:
 8009ecc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed0:	4616      	mov	r6, r2
 8009ed2:	4699      	mov	r9, r3
 8009ed4:	688a      	ldr	r2, [r1, #8]
 8009ed6:	690b      	ldr	r3, [r1, #16]
 8009ed8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009edc:	4293      	cmp	r3, r2
 8009ede:	bfb8      	it	lt
 8009ee0:	4613      	movlt	r3, r2
 8009ee2:	6033      	str	r3, [r6, #0]
 8009ee4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009ee8:	4607      	mov	r7, r0
 8009eea:	460c      	mov	r4, r1
 8009eec:	b10a      	cbz	r2, 8009ef2 <_printf_common+0x26>
 8009eee:	3301      	adds	r3, #1
 8009ef0:	6033      	str	r3, [r6, #0]
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	0699      	lsls	r1, r3, #26
 8009ef6:	bf42      	ittt	mi
 8009ef8:	6833      	ldrmi	r3, [r6, #0]
 8009efa:	3302      	addmi	r3, #2
 8009efc:	6033      	strmi	r3, [r6, #0]
 8009efe:	6825      	ldr	r5, [r4, #0]
 8009f00:	f015 0506 	ands.w	r5, r5, #6
 8009f04:	d106      	bne.n	8009f14 <_printf_common+0x48>
 8009f06:	f104 0a19 	add.w	sl, r4, #25
 8009f0a:	68e3      	ldr	r3, [r4, #12]
 8009f0c:	6832      	ldr	r2, [r6, #0]
 8009f0e:	1a9b      	subs	r3, r3, r2
 8009f10:	42ab      	cmp	r3, r5
 8009f12:	dc26      	bgt.n	8009f62 <_printf_common+0x96>
 8009f14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f18:	1e13      	subs	r3, r2, #0
 8009f1a:	6822      	ldr	r2, [r4, #0]
 8009f1c:	bf18      	it	ne
 8009f1e:	2301      	movne	r3, #1
 8009f20:	0692      	lsls	r2, r2, #26
 8009f22:	d42b      	bmi.n	8009f7c <_printf_common+0xb0>
 8009f24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f28:	4649      	mov	r1, r9
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	47c0      	blx	r8
 8009f2e:	3001      	adds	r0, #1
 8009f30:	d01e      	beq.n	8009f70 <_printf_common+0xa4>
 8009f32:	6823      	ldr	r3, [r4, #0]
 8009f34:	68e5      	ldr	r5, [r4, #12]
 8009f36:	6832      	ldr	r2, [r6, #0]
 8009f38:	f003 0306 	and.w	r3, r3, #6
 8009f3c:	2b04      	cmp	r3, #4
 8009f3e:	bf08      	it	eq
 8009f40:	1aad      	subeq	r5, r5, r2
 8009f42:	68a3      	ldr	r3, [r4, #8]
 8009f44:	6922      	ldr	r2, [r4, #16]
 8009f46:	bf0c      	ite	eq
 8009f48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f4c:	2500      	movne	r5, #0
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	bfc4      	itt	gt
 8009f52:	1a9b      	subgt	r3, r3, r2
 8009f54:	18ed      	addgt	r5, r5, r3
 8009f56:	2600      	movs	r6, #0
 8009f58:	341a      	adds	r4, #26
 8009f5a:	42b5      	cmp	r5, r6
 8009f5c:	d11a      	bne.n	8009f94 <_printf_common+0xc8>
 8009f5e:	2000      	movs	r0, #0
 8009f60:	e008      	b.n	8009f74 <_printf_common+0xa8>
 8009f62:	2301      	movs	r3, #1
 8009f64:	4652      	mov	r2, sl
 8009f66:	4649      	mov	r1, r9
 8009f68:	4638      	mov	r0, r7
 8009f6a:	47c0      	blx	r8
 8009f6c:	3001      	adds	r0, #1
 8009f6e:	d103      	bne.n	8009f78 <_printf_common+0xac>
 8009f70:	f04f 30ff 	mov.w	r0, #4294967295
 8009f74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f78:	3501      	adds	r5, #1
 8009f7a:	e7c6      	b.n	8009f0a <_printf_common+0x3e>
 8009f7c:	18e1      	adds	r1, r4, r3
 8009f7e:	1c5a      	adds	r2, r3, #1
 8009f80:	2030      	movs	r0, #48	; 0x30
 8009f82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009f86:	4422      	add	r2, r4
 8009f88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009f8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009f90:	3302      	adds	r3, #2
 8009f92:	e7c7      	b.n	8009f24 <_printf_common+0x58>
 8009f94:	2301      	movs	r3, #1
 8009f96:	4622      	mov	r2, r4
 8009f98:	4649      	mov	r1, r9
 8009f9a:	4638      	mov	r0, r7
 8009f9c:	47c0      	blx	r8
 8009f9e:	3001      	adds	r0, #1
 8009fa0:	d0e6      	beq.n	8009f70 <_printf_common+0xa4>
 8009fa2:	3601      	adds	r6, #1
 8009fa4:	e7d9      	b.n	8009f5a <_printf_common+0x8e>
	...

08009fa8 <_printf_i>:
 8009fa8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fac:	7e0f      	ldrb	r7, [r1, #24]
 8009fae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fb0:	2f78      	cmp	r7, #120	; 0x78
 8009fb2:	4691      	mov	r9, r2
 8009fb4:	4680      	mov	r8, r0
 8009fb6:	460c      	mov	r4, r1
 8009fb8:	469a      	mov	sl, r3
 8009fba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fbe:	d807      	bhi.n	8009fd0 <_printf_i+0x28>
 8009fc0:	2f62      	cmp	r7, #98	; 0x62
 8009fc2:	d80a      	bhi.n	8009fda <_printf_i+0x32>
 8009fc4:	2f00      	cmp	r7, #0
 8009fc6:	f000 80d8 	beq.w	800a17a <_printf_i+0x1d2>
 8009fca:	2f58      	cmp	r7, #88	; 0x58
 8009fcc:	f000 80a3 	beq.w	800a116 <_printf_i+0x16e>
 8009fd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009fd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009fd8:	e03a      	b.n	800a050 <_printf_i+0xa8>
 8009fda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009fde:	2b15      	cmp	r3, #21
 8009fe0:	d8f6      	bhi.n	8009fd0 <_printf_i+0x28>
 8009fe2:	a101      	add	r1, pc, #4	; (adr r1, 8009fe8 <_printf_i+0x40>)
 8009fe4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009fe8:	0800a041 	.word	0x0800a041
 8009fec:	0800a055 	.word	0x0800a055
 8009ff0:	08009fd1 	.word	0x08009fd1
 8009ff4:	08009fd1 	.word	0x08009fd1
 8009ff8:	08009fd1 	.word	0x08009fd1
 8009ffc:	08009fd1 	.word	0x08009fd1
 800a000:	0800a055 	.word	0x0800a055
 800a004:	08009fd1 	.word	0x08009fd1
 800a008:	08009fd1 	.word	0x08009fd1
 800a00c:	08009fd1 	.word	0x08009fd1
 800a010:	08009fd1 	.word	0x08009fd1
 800a014:	0800a161 	.word	0x0800a161
 800a018:	0800a085 	.word	0x0800a085
 800a01c:	0800a143 	.word	0x0800a143
 800a020:	08009fd1 	.word	0x08009fd1
 800a024:	08009fd1 	.word	0x08009fd1
 800a028:	0800a183 	.word	0x0800a183
 800a02c:	08009fd1 	.word	0x08009fd1
 800a030:	0800a085 	.word	0x0800a085
 800a034:	08009fd1 	.word	0x08009fd1
 800a038:	08009fd1 	.word	0x08009fd1
 800a03c:	0800a14b 	.word	0x0800a14b
 800a040:	682b      	ldr	r3, [r5, #0]
 800a042:	1d1a      	adds	r2, r3, #4
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	602a      	str	r2, [r5, #0]
 800a048:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a04c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a050:	2301      	movs	r3, #1
 800a052:	e0a3      	b.n	800a19c <_printf_i+0x1f4>
 800a054:	6820      	ldr	r0, [r4, #0]
 800a056:	6829      	ldr	r1, [r5, #0]
 800a058:	0606      	lsls	r6, r0, #24
 800a05a:	f101 0304 	add.w	r3, r1, #4
 800a05e:	d50a      	bpl.n	800a076 <_printf_i+0xce>
 800a060:	680e      	ldr	r6, [r1, #0]
 800a062:	602b      	str	r3, [r5, #0]
 800a064:	2e00      	cmp	r6, #0
 800a066:	da03      	bge.n	800a070 <_printf_i+0xc8>
 800a068:	232d      	movs	r3, #45	; 0x2d
 800a06a:	4276      	negs	r6, r6
 800a06c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a070:	485e      	ldr	r0, [pc, #376]	; (800a1ec <_printf_i+0x244>)
 800a072:	230a      	movs	r3, #10
 800a074:	e019      	b.n	800a0aa <_printf_i+0x102>
 800a076:	680e      	ldr	r6, [r1, #0]
 800a078:	602b      	str	r3, [r5, #0]
 800a07a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a07e:	bf18      	it	ne
 800a080:	b236      	sxthne	r6, r6
 800a082:	e7ef      	b.n	800a064 <_printf_i+0xbc>
 800a084:	682b      	ldr	r3, [r5, #0]
 800a086:	6820      	ldr	r0, [r4, #0]
 800a088:	1d19      	adds	r1, r3, #4
 800a08a:	6029      	str	r1, [r5, #0]
 800a08c:	0601      	lsls	r1, r0, #24
 800a08e:	d501      	bpl.n	800a094 <_printf_i+0xec>
 800a090:	681e      	ldr	r6, [r3, #0]
 800a092:	e002      	b.n	800a09a <_printf_i+0xf2>
 800a094:	0646      	lsls	r6, r0, #25
 800a096:	d5fb      	bpl.n	800a090 <_printf_i+0xe8>
 800a098:	881e      	ldrh	r6, [r3, #0]
 800a09a:	4854      	ldr	r0, [pc, #336]	; (800a1ec <_printf_i+0x244>)
 800a09c:	2f6f      	cmp	r7, #111	; 0x6f
 800a09e:	bf0c      	ite	eq
 800a0a0:	2308      	moveq	r3, #8
 800a0a2:	230a      	movne	r3, #10
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0aa:	6865      	ldr	r5, [r4, #4]
 800a0ac:	60a5      	str	r5, [r4, #8]
 800a0ae:	2d00      	cmp	r5, #0
 800a0b0:	bfa2      	ittt	ge
 800a0b2:	6821      	ldrge	r1, [r4, #0]
 800a0b4:	f021 0104 	bicge.w	r1, r1, #4
 800a0b8:	6021      	strge	r1, [r4, #0]
 800a0ba:	b90e      	cbnz	r6, 800a0c0 <_printf_i+0x118>
 800a0bc:	2d00      	cmp	r5, #0
 800a0be:	d04d      	beq.n	800a15c <_printf_i+0x1b4>
 800a0c0:	4615      	mov	r5, r2
 800a0c2:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0c6:	fb03 6711 	mls	r7, r3, r1, r6
 800a0ca:	5dc7      	ldrb	r7, [r0, r7]
 800a0cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0d0:	4637      	mov	r7, r6
 800a0d2:	42bb      	cmp	r3, r7
 800a0d4:	460e      	mov	r6, r1
 800a0d6:	d9f4      	bls.n	800a0c2 <_printf_i+0x11a>
 800a0d8:	2b08      	cmp	r3, #8
 800a0da:	d10b      	bne.n	800a0f4 <_printf_i+0x14c>
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	07de      	lsls	r6, r3, #31
 800a0e0:	d508      	bpl.n	800a0f4 <_printf_i+0x14c>
 800a0e2:	6923      	ldr	r3, [r4, #16]
 800a0e4:	6861      	ldr	r1, [r4, #4]
 800a0e6:	4299      	cmp	r1, r3
 800a0e8:	bfde      	ittt	le
 800a0ea:	2330      	movle	r3, #48	; 0x30
 800a0ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a0f0:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a0f4:	1b52      	subs	r2, r2, r5
 800a0f6:	6122      	str	r2, [r4, #16]
 800a0f8:	f8cd a000 	str.w	sl, [sp]
 800a0fc:	464b      	mov	r3, r9
 800a0fe:	aa03      	add	r2, sp, #12
 800a100:	4621      	mov	r1, r4
 800a102:	4640      	mov	r0, r8
 800a104:	f7ff fee2 	bl	8009ecc <_printf_common>
 800a108:	3001      	adds	r0, #1
 800a10a:	d14c      	bne.n	800a1a6 <_printf_i+0x1fe>
 800a10c:	f04f 30ff 	mov.w	r0, #4294967295
 800a110:	b004      	add	sp, #16
 800a112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a116:	4835      	ldr	r0, [pc, #212]	; (800a1ec <_printf_i+0x244>)
 800a118:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a11c:	6829      	ldr	r1, [r5, #0]
 800a11e:	6823      	ldr	r3, [r4, #0]
 800a120:	f851 6b04 	ldr.w	r6, [r1], #4
 800a124:	6029      	str	r1, [r5, #0]
 800a126:	061d      	lsls	r5, r3, #24
 800a128:	d514      	bpl.n	800a154 <_printf_i+0x1ac>
 800a12a:	07df      	lsls	r7, r3, #31
 800a12c:	bf44      	itt	mi
 800a12e:	f043 0320 	orrmi.w	r3, r3, #32
 800a132:	6023      	strmi	r3, [r4, #0]
 800a134:	b91e      	cbnz	r6, 800a13e <_printf_i+0x196>
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	f023 0320 	bic.w	r3, r3, #32
 800a13c:	6023      	str	r3, [r4, #0]
 800a13e:	2310      	movs	r3, #16
 800a140:	e7b0      	b.n	800a0a4 <_printf_i+0xfc>
 800a142:	6823      	ldr	r3, [r4, #0]
 800a144:	f043 0320 	orr.w	r3, r3, #32
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	2378      	movs	r3, #120	; 0x78
 800a14c:	4828      	ldr	r0, [pc, #160]	; (800a1f0 <_printf_i+0x248>)
 800a14e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a152:	e7e3      	b.n	800a11c <_printf_i+0x174>
 800a154:	0659      	lsls	r1, r3, #25
 800a156:	bf48      	it	mi
 800a158:	b2b6      	uxthmi	r6, r6
 800a15a:	e7e6      	b.n	800a12a <_printf_i+0x182>
 800a15c:	4615      	mov	r5, r2
 800a15e:	e7bb      	b.n	800a0d8 <_printf_i+0x130>
 800a160:	682b      	ldr	r3, [r5, #0]
 800a162:	6826      	ldr	r6, [r4, #0]
 800a164:	6961      	ldr	r1, [r4, #20]
 800a166:	1d18      	adds	r0, r3, #4
 800a168:	6028      	str	r0, [r5, #0]
 800a16a:	0635      	lsls	r5, r6, #24
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	d501      	bpl.n	800a174 <_printf_i+0x1cc>
 800a170:	6019      	str	r1, [r3, #0]
 800a172:	e002      	b.n	800a17a <_printf_i+0x1d2>
 800a174:	0670      	lsls	r0, r6, #25
 800a176:	d5fb      	bpl.n	800a170 <_printf_i+0x1c8>
 800a178:	8019      	strh	r1, [r3, #0]
 800a17a:	2300      	movs	r3, #0
 800a17c:	6123      	str	r3, [r4, #16]
 800a17e:	4615      	mov	r5, r2
 800a180:	e7ba      	b.n	800a0f8 <_printf_i+0x150>
 800a182:	682b      	ldr	r3, [r5, #0]
 800a184:	1d1a      	adds	r2, r3, #4
 800a186:	602a      	str	r2, [r5, #0]
 800a188:	681d      	ldr	r5, [r3, #0]
 800a18a:	6862      	ldr	r2, [r4, #4]
 800a18c:	2100      	movs	r1, #0
 800a18e:	4628      	mov	r0, r5
 800a190:	f7f6 f82e 	bl	80001f0 <memchr>
 800a194:	b108      	cbz	r0, 800a19a <_printf_i+0x1f2>
 800a196:	1b40      	subs	r0, r0, r5
 800a198:	6060      	str	r0, [r4, #4]
 800a19a:	6863      	ldr	r3, [r4, #4]
 800a19c:	6123      	str	r3, [r4, #16]
 800a19e:	2300      	movs	r3, #0
 800a1a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1a4:	e7a8      	b.n	800a0f8 <_printf_i+0x150>
 800a1a6:	6923      	ldr	r3, [r4, #16]
 800a1a8:	462a      	mov	r2, r5
 800a1aa:	4649      	mov	r1, r9
 800a1ac:	4640      	mov	r0, r8
 800a1ae:	47d0      	blx	sl
 800a1b0:	3001      	adds	r0, #1
 800a1b2:	d0ab      	beq.n	800a10c <_printf_i+0x164>
 800a1b4:	6823      	ldr	r3, [r4, #0]
 800a1b6:	079b      	lsls	r3, r3, #30
 800a1b8:	d413      	bmi.n	800a1e2 <_printf_i+0x23a>
 800a1ba:	68e0      	ldr	r0, [r4, #12]
 800a1bc:	9b03      	ldr	r3, [sp, #12]
 800a1be:	4298      	cmp	r0, r3
 800a1c0:	bfb8      	it	lt
 800a1c2:	4618      	movlt	r0, r3
 800a1c4:	e7a4      	b.n	800a110 <_printf_i+0x168>
 800a1c6:	2301      	movs	r3, #1
 800a1c8:	4632      	mov	r2, r6
 800a1ca:	4649      	mov	r1, r9
 800a1cc:	4640      	mov	r0, r8
 800a1ce:	47d0      	blx	sl
 800a1d0:	3001      	adds	r0, #1
 800a1d2:	d09b      	beq.n	800a10c <_printf_i+0x164>
 800a1d4:	3501      	adds	r5, #1
 800a1d6:	68e3      	ldr	r3, [r4, #12]
 800a1d8:	9903      	ldr	r1, [sp, #12]
 800a1da:	1a5b      	subs	r3, r3, r1
 800a1dc:	42ab      	cmp	r3, r5
 800a1de:	dcf2      	bgt.n	800a1c6 <_printf_i+0x21e>
 800a1e0:	e7eb      	b.n	800a1ba <_printf_i+0x212>
 800a1e2:	2500      	movs	r5, #0
 800a1e4:	f104 0619 	add.w	r6, r4, #25
 800a1e8:	e7f5      	b.n	800a1d6 <_printf_i+0x22e>
 800a1ea:	bf00      	nop
 800a1ec:	0800c77e 	.word	0x0800c77e
 800a1f0:	0800c78f 	.word	0x0800c78f

0800a1f4 <siprintf>:
 800a1f4:	b40e      	push	{r1, r2, r3}
 800a1f6:	b500      	push	{lr}
 800a1f8:	b09c      	sub	sp, #112	; 0x70
 800a1fa:	ab1d      	add	r3, sp, #116	; 0x74
 800a1fc:	9002      	str	r0, [sp, #8]
 800a1fe:	9006      	str	r0, [sp, #24]
 800a200:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a204:	4809      	ldr	r0, [pc, #36]	; (800a22c <siprintf+0x38>)
 800a206:	9107      	str	r1, [sp, #28]
 800a208:	9104      	str	r1, [sp, #16]
 800a20a:	4909      	ldr	r1, [pc, #36]	; (800a230 <siprintf+0x3c>)
 800a20c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a210:	9105      	str	r1, [sp, #20]
 800a212:	6800      	ldr	r0, [r0, #0]
 800a214:	9301      	str	r3, [sp, #4]
 800a216:	a902      	add	r1, sp, #8
 800a218:	f001 fb78 	bl	800b90c <_svfiprintf_r>
 800a21c:	9b02      	ldr	r3, [sp, #8]
 800a21e:	2200      	movs	r2, #0
 800a220:	701a      	strb	r2, [r3, #0]
 800a222:	b01c      	add	sp, #112	; 0x70
 800a224:	f85d eb04 	ldr.w	lr, [sp], #4
 800a228:	b003      	add	sp, #12
 800a22a:	4770      	bx	lr
 800a22c:	2000012c 	.word	0x2000012c
 800a230:	ffff0208 	.word	0xffff0208

0800a234 <quorem>:
 800a234:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a238:	6903      	ldr	r3, [r0, #16]
 800a23a:	690c      	ldr	r4, [r1, #16]
 800a23c:	42a3      	cmp	r3, r4
 800a23e:	4607      	mov	r7, r0
 800a240:	f2c0 8081 	blt.w	800a346 <quorem+0x112>
 800a244:	3c01      	subs	r4, #1
 800a246:	f101 0814 	add.w	r8, r1, #20
 800a24a:	f100 0514 	add.w	r5, r0, #20
 800a24e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a252:	9301      	str	r3, [sp, #4]
 800a254:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a258:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a25c:	3301      	adds	r3, #1
 800a25e:	429a      	cmp	r2, r3
 800a260:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a264:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a268:	fbb2 f6f3 	udiv	r6, r2, r3
 800a26c:	d331      	bcc.n	800a2d2 <quorem+0x9e>
 800a26e:	f04f 0e00 	mov.w	lr, #0
 800a272:	4640      	mov	r0, r8
 800a274:	46ac      	mov	ip, r5
 800a276:	46f2      	mov	sl, lr
 800a278:	f850 2b04 	ldr.w	r2, [r0], #4
 800a27c:	b293      	uxth	r3, r2
 800a27e:	fb06 e303 	mla	r3, r6, r3, lr
 800a282:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a286:	b29b      	uxth	r3, r3
 800a288:	ebaa 0303 	sub.w	r3, sl, r3
 800a28c:	f8dc a000 	ldr.w	sl, [ip]
 800a290:	0c12      	lsrs	r2, r2, #16
 800a292:	fa13 f38a 	uxtah	r3, r3, sl
 800a296:	fb06 e202 	mla	r2, r6, r2, lr
 800a29a:	9300      	str	r3, [sp, #0]
 800a29c:	9b00      	ldr	r3, [sp, #0]
 800a29e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a2a2:	b292      	uxth	r2, r2
 800a2a4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a2a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a2ac:	f8bd 3000 	ldrh.w	r3, [sp]
 800a2b0:	4581      	cmp	r9, r0
 800a2b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a2b6:	f84c 3b04 	str.w	r3, [ip], #4
 800a2ba:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a2be:	d2db      	bcs.n	800a278 <quorem+0x44>
 800a2c0:	f855 300b 	ldr.w	r3, [r5, fp]
 800a2c4:	b92b      	cbnz	r3, 800a2d2 <quorem+0x9e>
 800a2c6:	9b01      	ldr	r3, [sp, #4]
 800a2c8:	3b04      	subs	r3, #4
 800a2ca:	429d      	cmp	r5, r3
 800a2cc:	461a      	mov	r2, r3
 800a2ce:	d32e      	bcc.n	800a32e <quorem+0xfa>
 800a2d0:	613c      	str	r4, [r7, #16]
 800a2d2:	4638      	mov	r0, r7
 800a2d4:	f001 f8c6 	bl	800b464 <__mcmp>
 800a2d8:	2800      	cmp	r0, #0
 800a2da:	db24      	blt.n	800a326 <quorem+0xf2>
 800a2dc:	3601      	adds	r6, #1
 800a2de:	4628      	mov	r0, r5
 800a2e0:	f04f 0c00 	mov.w	ip, #0
 800a2e4:	f858 2b04 	ldr.w	r2, [r8], #4
 800a2e8:	f8d0 e000 	ldr.w	lr, [r0]
 800a2ec:	b293      	uxth	r3, r2
 800a2ee:	ebac 0303 	sub.w	r3, ip, r3
 800a2f2:	0c12      	lsrs	r2, r2, #16
 800a2f4:	fa13 f38e 	uxtah	r3, r3, lr
 800a2f8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a2fc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a300:	b29b      	uxth	r3, r3
 800a302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a306:	45c1      	cmp	r9, r8
 800a308:	f840 3b04 	str.w	r3, [r0], #4
 800a30c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a310:	d2e8      	bcs.n	800a2e4 <quorem+0xb0>
 800a312:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a316:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a31a:	b922      	cbnz	r2, 800a326 <quorem+0xf2>
 800a31c:	3b04      	subs	r3, #4
 800a31e:	429d      	cmp	r5, r3
 800a320:	461a      	mov	r2, r3
 800a322:	d30a      	bcc.n	800a33a <quorem+0x106>
 800a324:	613c      	str	r4, [r7, #16]
 800a326:	4630      	mov	r0, r6
 800a328:	b003      	add	sp, #12
 800a32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32e:	6812      	ldr	r2, [r2, #0]
 800a330:	3b04      	subs	r3, #4
 800a332:	2a00      	cmp	r2, #0
 800a334:	d1cc      	bne.n	800a2d0 <quorem+0x9c>
 800a336:	3c01      	subs	r4, #1
 800a338:	e7c7      	b.n	800a2ca <quorem+0x96>
 800a33a:	6812      	ldr	r2, [r2, #0]
 800a33c:	3b04      	subs	r3, #4
 800a33e:	2a00      	cmp	r2, #0
 800a340:	d1f0      	bne.n	800a324 <quorem+0xf0>
 800a342:	3c01      	subs	r4, #1
 800a344:	e7eb      	b.n	800a31e <quorem+0xea>
 800a346:	2000      	movs	r0, #0
 800a348:	e7ee      	b.n	800a328 <quorem+0xf4>
 800a34a:	0000      	movs	r0, r0
 800a34c:	0000      	movs	r0, r0
	...

0800a350 <_dtoa_r>:
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	ed2d 8b04 	vpush	{d8-d9}
 800a358:	ec57 6b10 	vmov	r6, r7, d0
 800a35c:	b093      	sub	sp, #76	; 0x4c
 800a35e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a360:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a364:	9106      	str	r1, [sp, #24]
 800a366:	ee10 aa10 	vmov	sl, s0
 800a36a:	4604      	mov	r4, r0
 800a36c:	9209      	str	r2, [sp, #36]	; 0x24
 800a36e:	930c      	str	r3, [sp, #48]	; 0x30
 800a370:	46bb      	mov	fp, r7
 800a372:	b975      	cbnz	r5, 800a392 <_dtoa_r+0x42>
 800a374:	2010      	movs	r0, #16
 800a376:	f000 fddd 	bl	800af34 <malloc>
 800a37a:	4602      	mov	r2, r0
 800a37c:	6260      	str	r0, [r4, #36]	; 0x24
 800a37e:	b920      	cbnz	r0, 800a38a <_dtoa_r+0x3a>
 800a380:	4ba7      	ldr	r3, [pc, #668]	; (800a620 <_dtoa_r+0x2d0>)
 800a382:	21ea      	movs	r1, #234	; 0xea
 800a384:	48a7      	ldr	r0, [pc, #668]	; (800a624 <_dtoa_r+0x2d4>)
 800a386:	f001 fbd1 	bl	800bb2c <__assert_func>
 800a38a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a38e:	6005      	str	r5, [r0, #0]
 800a390:	60c5      	str	r5, [r0, #12]
 800a392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a394:	6819      	ldr	r1, [r3, #0]
 800a396:	b151      	cbz	r1, 800a3ae <_dtoa_r+0x5e>
 800a398:	685a      	ldr	r2, [r3, #4]
 800a39a:	604a      	str	r2, [r1, #4]
 800a39c:	2301      	movs	r3, #1
 800a39e:	4093      	lsls	r3, r2
 800a3a0:	608b      	str	r3, [r1, #8]
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	f000 fe1c 	bl	800afe0 <_Bfree>
 800a3a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	601a      	str	r2, [r3, #0]
 800a3ae:	1e3b      	subs	r3, r7, #0
 800a3b0:	bfaa      	itet	ge
 800a3b2:	2300      	movge	r3, #0
 800a3b4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a3b8:	f8c8 3000 	strge.w	r3, [r8]
 800a3bc:	4b9a      	ldr	r3, [pc, #616]	; (800a628 <_dtoa_r+0x2d8>)
 800a3be:	bfbc      	itt	lt
 800a3c0:	2201      	movlt	r2, #1
 800a3c2:	f8c8 2000 	strlt.w	r2, [r8]
 800a3c6:	ea33 030b 	bics.w	r3, r3, fp
 800a3ca:	d11b      	bne.n	800a404 <_dtoa_r+0xb4>
 800a3cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3ce:	f242 730f 	movw	r3, #9999	; 0x270f
 800a3d2:	6013      	str	r3, [r2, #0]
 800a3d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a3d8:	4333      	orrs	r3, r6
 800a3da:	f000 8592 	beq.w	800af02 <_dtoa_r+0xbb2>
 800a3de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3e0:	b963      	cbnz	r3, 800a3fc <_dtoa_r+0xac>
 800a3e2:	4b92      	ldr	r3, [pc, #584]	; (800a62c <_dtoa_r+0x2dc>)
 800a3e4:	e022      	b.n	800a42c <_dtoa_r+0xdc>
 800a3e6:	4b92      	ldr	r3, [pc, #584]	; (800a630 <_dtoa_r+0x2e0>)
 800a3e8:	9301      	str	r3, [sp, #4]
 800a3ea:	3308      	adds	r3, #8
 800a3ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a3ee:	6013      	str	r3, [r2, #0]
 800a3f0:	9801      	ldr	r0, [sp, #4]
 800a3f2:	b013      	add	sp, #76	; 0x4c
 800a3f4:	ecbd 8b04 	vpop	{d8-d9}
 800a3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3fc:	4b8b      	ldr	r3, [pc, #556]	; (800a62c <_dtoa_r+0x2dc>)
 800a3fe:	9301      	str	r3, [sp, #4]
 800a400:	3303      	adds	r3, #3
 800a402:	e7f3      	b.n	800a3ec <_dtoa_r+0x9c>
 800a404:	2200      	movs	r2, #0
 800a406:	2300      	movs	r3, #0
 800a408:	4650      	mov	r0, sl
 800a40a:	4659      	mov	r1, fp
 800a40c:	f7f6 fb64 	bl	8000ad8 <__aeabi_dcmpeq>
 800a410:	ec4b ab19 	vmov	d9, sl, fp
 800a414:	4680      	mov	r8, r0
 800a416:	b158      	cbz	r0, 800a430 <_dtoa_r+0xe0>
 800a418:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a41a:	2301      	movs	r3, #1
 800a41c:	6013      	str	r3, [r2, #0]
 800a41e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a420:	2b00      	cmp	r3, #0
 800a422:	f000 856b 	beq.w	800aefc <_dtoa_r+0xbac>
 800a426:	4883      	ldr	r0, [pc, #524]	; (800a634 <_dtoa_r+0x2e4>)
 800a428:	6018      	str	r0, [r3, #0]
 800a42a:	1e43      	subs	r3, r0, #1
 800a42c:	9301      	str	r3, [sp, #4]
 800a42e:	e7df      	b.n	800a3f0 <_dtoa_r+0xa0>
 800a430:	ec4b ab10 	vmov	d0, sl, fp
 800a434:	aa10      	add	r2, sp, #64	; 0x40
 800a436:	a911      	add	r1, sp, #68	; 0x44
 800a438:	4620      	mov	r0, r4
 800a43a:	f001 f8b9 	bl	800b5b0 <__d2b>
 800a43e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a442:	ee08 0a10 	vmov	s16, r0
 800a446:	2d00      	cmp	r5, #0
 800a448:	f000 8084 	beq.w	800a554 <_dtoa_r+0x204>
 800a44c:	ee19 3a90 	vmov	r3, s19
 800a450:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a454:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a458:	4656      	mov	r6, sl
 800a45a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a45e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a462:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a466:	4b74      	ldr	r3, [pc, #464]	; (800a638 <_dtoa_r+0x2e8>)
 800a468:	2200      	movs	r2, #0
 800a46a:	4630      	mov	r0, r6
 800a46c:	4639      	mov	r1, r7
 800a46e:	f7f5 ff13 	bl	8000298 <__aeabi_dsub>
 800a472:	a365      	add	r3, pc, #404	; (adr r3, 800a608 <_dtoa_r+0x2b8>)
 800a474:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a478:	f7f6 f8c6 	bl	8000608 <__aeabi_dmul>
 800a47c:	a364      	add	r3, pc, #400	; (adr r3, 800a610 <_dtoa_r+0x2c0>)
 800a47e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a482:	f7f5 ff0b 	bl	800029c <__adddf3>
 800a486:	4606      	mov	r6, r0
 800a488:	4628      	mov	r0, r5
 800a48a:	460f      	mov	r7, r1
 800a48c:	f7f6 f852 	bl	8000534 <__aeabi_i2d>
 800a490:	a361      	add	r3, pc, #388	; (adr r3, 800a618 <_dtoa_r+0x2c8>)
 800a492:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a496:	f7f6 f8b7 	bl	8000608 <__aeabi_dmul>
 800a49a:	4602      	mov	r2, r0
 800a49c:	460b      	mov	r3, r1
 800a49e:	4630      	mov	r0, r6
 800a4a0:	4639      	mov	r1, r7
 800a4a2:	f7f5 fefb 	bl	800029c <__adddf3>
 800a4a6:	4606      	mov	r6, r0
 800a4a8:	460f      	mov	r7, r1
 800a4aa:	f7f6 fb5d 	bl	8000b68 <__aeabi_d2iz>
 800a4ae:	2200      	movs	r2, #0
 800a4b0:	9000      	str	r0, [sp, #0]
 800a4b2:	2300      	movs	r3, #0
 800a4b4:	4630      	mov	r0, r6
 800a4b6:	4639      	mov	r1, r7
 800a4b8:	f7f6 fb18 	bl	8000aec <__aeabi_dcmplt>
 800a4bc:	b150      	cbz	r0, 800a4d4 <_dtoa_r+0x184>
 800a4be:	9800      	ldr	r0, [sp, #0]
 800a4c0:	f7f6 f838 	bl	8000534 <__aeabi_i2d>
 800a4c4:	4632      	mov	r2, r6
 800a4c6:	463b      	mov	r3, r7
 800a4c8:	f7f6 fb06 	bl	8000ad8 <__aeabi_dcmpeq>
 800a4cc:	b910      	cbnz	r0, 800a4d4 <_dtoa_r+0x184>
 800a4ce:	9b00      	ldr	r3, [sp, #0]
 800a4d0:	3b01      	subs	r3, #1
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	9b00      	ldr	r3, [sp, #0]
 800a4d6:	2b16      	cmp	r3, #22
 800a4d8:	d85a      	bhi.n	800a590 <_dtoa_r+0x240>
 800a4da:	9a00      	ldr	r2, [sp, #0]
 800a4dc:	4b57      	ldr	r3, [pc, #348]	; (800a63c <_dtoa_r+0x2ec>)
 800a4de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4e6:	ec51 0b19 	vmov	r0, r1, d9
 800a4ea:	f7f6 faff 	bl	8000aec <__aeabi_dcmplt>
 800a4ee:	2800      	cmp	r0, #0
 800a4f0:	d050      	beq.n	800a594 <_dtoa_r+0x244>
 800a4f2:	9b00      	ldr	r3, [sp, #0]
 800a4f4:	3b01      	subs	r3, #1
 800a4f6:	9300      	str	r3, [sp, #0]
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	930b      	str	r3, [sp, #44]	; 0x2c
 800a4fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4fe:	1b5d      	subs	r5, r3, r5
 800a500:	1e6b      	subs	r3, r5, #1
 800a502:	9305      	str	r3, [sp, #20]
 800a504:	bf45      	ittet	mi
 800a506:	f1c5 0301 	rsbmi	r3, r5, #1
 800a50a:	9304      	strmi	r3, [sp, #16]
 800a50c:	2300      	movpl	r3, #0
 800a50e:	2300      	movmi	r3, #0
 800a510:	bf4c      	ite	mi
 800a512:	9305      	strmi	r3, [sp, #20]
 800a514:	9304      	strpl	r3, [sp, #16]
 800a516:	9b00      	ldr	r3, [sp, #0]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	db3d      	blt.n	800a598 <_dtoa_r+0x248>
 800a51c:	9b05      	ldr	r3, [sp, #20]
 800a51e:	9a00      	ldr	r2, [sp, #0]
 800a520:	920a      	str	r2, [sp, #40]	; 0x28
 800a522:	4413      	add	r3, r2
 800a524:	9305      	str	r3, [sp, #20]
 800a526:	2300      	movs	r3, #0
 800a528:	9307      	str	r3, [sp, #28]
 800a52a:	9b06      	ldr	r3, [sp, #24]
 800a52c:	2b09      	cmp	r3, #9
 800a52e:	f200 8089 	bhi.w	800a644 <_dtoa_r+0x2f4>
 800a532:	2b05      	cmp	r3, #5
 800a534:	bfc4      	itt	gt
 800a536:	3b04      	subgt	r3, #4
 800a538:	9306      	strgt	r3, [sp, #24]
 800a53a:	9b06      	ldr	r3, [sp, #24]
 800a53c:	f1a3 0302 	sub.w	r3, r3, #2
 800a540:	bfcc      	ite	gt
 800a542:	2500      	movgt	r5, #0
 800a544:	2501      	movle	r5, #1
 800a546:	2b03      	cmp	r3, #3
 800a548:	f200 8087 	bhi.w	800a65a <_dtoa_r+0x30a>
 800a54c:	e8df f003 	tbb	[pc, r3]
 800a550:	59383a2d 	.word	0x59383a2d
 800a554:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a558:	441d      	add	r5, r3
 800a55a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a55e:	2b20      	cmp	r3, #32
 800a560:	bfc1      	itttt	gt
 800a562:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a566:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a56a:	fa0b f303 	lslgt.w	r3, fp, r3
 800a56e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a572:	bfda      	itte	le
 800a574:	f1c3 0320 	rsble	r3, r3, #32
 800a578:	fa06 f003 	lslle.w	r0, r6, r3
 800a57c:	4318      	orrgt	r0, r3
 800a57e:	f7f5 ffc9 	bl	8000514 <__aeabi_ui2d>
 800a582:	2301      	movs	r3, #1
 800a584:	4606      	mov	r6, r0
 800a586:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a58a:	3d01      	subs	r5, #1
 800a58c:	930e      	str	r3, [sp, #56]	; 0x38
 800a58e:	e76a      	b.n	800a466 <_dtoa_r+0x116>
 800a590:	2301      	movs	r3, #1
 800a592:	e7b2      	b.n	800a4fa <_dtoa_r+0x1aa>
 800a594:	900b      	str	r0, [sp, #44]	; 0x2c
 800a596:	e7b1      	b.n	800a4fc <_dtoa_r+0x1ac>
 800a598:	9b04      	ldr	r3, [sp, #16]
 800a59a:	9a00      	ldr	r2, [sp, #0]
 800a59c:	1a9b      	subs	r3, r3, r2
 800a59e:	9304      	str	r3, [sp, #16]
 800a5a0:	4253      	negs	r3, r2
 800a5a2:	9307      	str	r3, [sp, #28]
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	930a      	str	r3, [sp, #40]	; 0x28
 800a5a8:	e7bf      	b.n	800a52a <_dtoa_r+0x1da>
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	9308      	str	r3, [sp, #32]
 800a5ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	dc55      	bgt.n	800a660 <_dtoa_r+0x310>
 800a5b4:	2301      	movs	r3, #1
 800a5b6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a5ba:	461a      	mov	r2, r3
 800a5bc:	9209      	str	r2, [sp, #36]	; 0x24
 800a5be:	e00c      	b.n	800a5da <_dtoa_r+0x28a>
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e7f3      	b.n	800a5ac <_dtoa_r+0x25c>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a5c8:	9308      	str	r3, [sp, #32]
 800a5ca:	9b00      	ldr	r3, [sp, #0]
 800a5cc:	4413      	add	r3, r2
 800a5ce:	9302      	str	r3, [sp, #8]
 800a5d0:	3301      	adds	r3, #1
 800a5d2:	2b01      	cmp	r3, #1
 800a5d4:	9303      	str	r3, [sp, #12]
 800a5d6:	bfb8      	it	lt
 800a5d8:	2301      	movlt	r3, #1
 800a5da:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a5dc:	2200      	movs	r2, #0
 800a5de:	6042      	str	r2, [r0, #4]
 800a5e0:	2204      	movs	r2, #4
 800a5e2:	f102 0614 	add.w	r6, r2, #20
 800a5e6:	429e      	cmp	r6, r3
 800a5e8:	6841      	ldr	r1, [r0, #4]
 800a5ea:	d93d      	bls.n	800a668 <_dtoa_r+0x318>
 800a5ec:	4620      	mov	r0, r4
 800a5ee:	f000 fcb7 	bl	800af60 <_Balloc>
 800a5f2:	9001      	str	r0, [sp, #4]
 800a5f4:	2800      	cmp	r0, #0
 800a5f6:	d13b      	bne.n	800a670 <_dtoa_r+0x320>
 800a5f8:	4b11      	ldr	r3, [pc, #68]	; (800a640 <_dtoa_r+0x2f0>)
 800a5fa:	4602      	mov	r2, r0
 800a5fc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a600:	e6c0      	b.n	800a384 <_dtoa_r+0x34>
 800a602:	2301      	movs	r3, #1
 800a604:	e7df      	b.n	800a5c6 <_dtoa_r+0x276>
 800a606:	bf00      	nop
 800a608:	636f4361 	.word	0x636f4361
 800a60c:	3fd287a7 	.word	0x3fd287a7
 800a610:	8b60c8b3 	.word	0x8b60c8b3
 800a614:	3fc68a28 	.word	0x3fc68a28
 800a618:	509f79fb 	.word	0x509f79fb
 800a61c:	3fd34413 	.word	0x3fd34413
 800a620:	0800c7ad 	.word	0x0800c7ad
 800a624:	0800c7c4 	.word	0x0800c7c4
 800a628:	7ff00000 	.word	0x7ff00000
 800a62c:	0800c7a9 	.word	0x0800c7a9
 800a630:	0800c7a0 	.word	0x0800c7a0
 800a634:	0800c77d 	.word	0x0800c77d
 800a638:	3ff80000 	.word	0x3ff80000
 800a63c:	0800c8b8 	.word	0x0800c8b8
 800a640:	0800c81f 	.word	0x0800c81f
 800a644:	2501      	movs	r5, #1
 800a646:	2300      	movs	r3, #0
 800a648:	9306      	str	r3, [sp, #24]
 800a64a:	9508      	str	r5, [sp, #32]
 800a64c:	f04f 33ff 	mov.w	r3, #4294967295
 800a650:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a654:	2200      	movs	r2, #0
 800a656:	2312      	movs	r3, #18
 800a658:	e7b0      	b.n	800a5bc <_dtoa_r+0x26c>
 800a65a:	2301      	movs	r3, #1
 800a65c:	9308      	str	r3, [sp, #32]
 800a65e:	e7f5      	b.n	800a64c <_dtoa_r+0x2fc>
 800a660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a662:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a666:	e7b8      	b.n	800a5da <_dtoa_r+0x28a>
 800a668:	3101      	adds	r1, #1
 800a66a:	6041      	str	r1, [r0, #4]
 800a66c:	0052      	lsls	r2, r2, #1
 800a66e:	e7b8      	b.n	800a5e2 <_dtoa_r+0x292>
 800a670:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a672:	9a01      	ldr	r2, [sp, #4]
 800a674:	601a      	str	r2, [r3, #0]
 800a676:	9b03      	ldr	r3, [sp, #12]
 800a678:	2b0e      	cmp	r3, #14
 800a67a:	f200 809d 	bhi.w	800a7b8 <_dtoa_r+0x468>
 800a67e:	2d00      	cmp	r5, #0
 800a680:	f000 809a 	beq.w	800a7b8 <_dtoa_r+0x468>
 800a684:	9b00      	ldr	r3, [sp, #0]
 800a686:	2b00      	cmp	r3, #0
 800a688:	dd32      	ble.n	800a6f0 <_dtoa_r+0x3a0>
 800a68a:	4ab7      	ldr	r2, [pc, #732]	; (800a968 <_dtoa_r+0x618>)
 800a68c:	f003 030f 	and.w	r3, r3, #15
 800a690:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a694:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a698:	9b00      	ldr	r3, [sp, #0]
 800a69a:	05d8      	lsls	r0, r3, #23
 800a69c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a6a0:	d516      	bpl.n	800a6d0 <_dtoa_r+0x380>
 800a6a2:	4bb2      	ldr	r3, [pc, #712]	; (800a96c <_dtoa_r+0x61c>)
 800a6a4:	ec51 0b19 	vmov	r0, r1, d9
 800a6a8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a6ac:	f7f6 f8d6 	bl	800085c <__aeabi_ddiv>
 800a6b0:	f007 070f 	and.w	r7, r7, #15
 800a6b4:	4682      	mov	sl, r0
 800a6b6:	468b      	mov	fp, r1
 800a6b8:	2503      	movs	r5, #3
 800a6ba:	4eac      	ldr	r6, [pc, #688]	; (800a96c <_dtoa_r+0x61c>)
 800a6bc:	b957      	cbnz	r7, 800a6d4 <_dtoa_r+0x384>
 800a6be:	4642      	mov	r2, r8
 800a6c0:	464b      	mov	r3, r9
 800a6c2:	4650      	mov	r0, sl
 800a6c4:	4659      	mov	r1, fp
 800a6c6:	f7f6 f8c9 	bl	800085c <__aeabi_ddiv>
 800a6ca:	4682      	mov	sl, r0
 800a6cc:	468b      	mov	fp, r1
 800a6ce:	e028      	b.n	800a722 <_dtoa_r+0x3d2>
 800a6d0:	2502      	movs	r5, #2
 800a6d2:	e7f2      	b.n	800a6ba <_dtoa_r+0x36a>
 800a6d4:	07f9      	lsls	r1, r7, #31
 800a6d6:	d508      	bpl.n	800a6ea <_dtoa_r+0x39a>
 800a6d8:	4640      	mov	r0, r8
 800a6da:	4649      	mov	r1, r9
 800a6dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a6e0:	f7f5 ff92 	bl	8000608 <__aeabi_dmul>
 800a6e4:	3501      	adds	r5, #1
 800a6e6:	4680      	mov	r8, r0
 800a6e8:	4689      	mov	r9, r1
 800a6ea:	107f      	asrs	r7, r7, #1
 800a6ec:	3608      	adds	r6, #8
 800a6ee:	e7e5      	b.n	800a6bc <_dtoa_r+0x36c>
 800a6f0:	f000 809b 	beq.w	800a82a <_dtoa_r+0x4da>
 800a6f4:	9b00      	ldr	r3, [sp, #0]
 800a6f6:	4f9d      	ldr	r7, [pc, #628]	; (800a96c <_dtoa_r+0x61c>)
 800a6f8:	425e      	negs	r6, r3
 800a6fa:	4b9b      	ldr	r3, [pc, #620]	; (800a968 <_dtoa_r+0x618>)
 800a6fc:	f006 020f 	and.w	r2, r6, #15
 800a700:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a708:	ec51 0b19 	vmov	r0, r1, d9
 800a70c:	f7f5 ff7c 	bl	8000608 <__aeabi_dmul>
 800a710:	1136      	asrs	r6, r6, #4
 800a712:	4682      	mov	sl, r0
 800a714:	468b      	mov	fp, r1
 800a716:	2300      	movs	r3, #0
 800a718:	2502      	movs	r5, #2
 800a71a:	2e00      	cmp	r6, #0
 800a71c:	d17a      	bne.n	800a814 <_dtoa_r+0x4c4>
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d1d3      	bne.n	800a6ca <_dtoa_r+0x37a>
 800a722:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a724:	2b00      	cmp	r3, #0
 800a726:	f000 8082 	beq.w	800a82e <_dtoa_r+0x4de>
 800a72a:	4b91      	ldr	r3, [pc, #580]	; (800a970 <_dtoa_r+0x620>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	4650      	mov	r0, sl
 800a730:	4659      	mov	r1, fp
 800a732:	f7f6 f9db 	bl	8000aec <__aeabi_dcmplt>
 800a736:	2800      	cmp	r0, #0
 800a738:	d079      	beq.n	800a82e <_dtoa_r+0x4de>
 800a73a:	9b03      	ldr	r3, [sp, #12]
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d076      	beq.n	800a82e <_dtoa_r+0x4de>
 800a740:	9b02      	ldr	r3, [sp, #8]
 800a742:	2b00      	cmp	r3, #0
 800a744:	dd36      	ble.n	800a7b4 <_dtoa_r+0x464>
 800a746:	9b00      	ldr	r3, [sp, #0]
 800a748:	4650      	mov	r0, sl
 800a74a:	4659      	mov	r1, fp
 800a74c:	1e5f      	subs	r7, r3, #1
 800a74e:	2200      	movs	r2, #0
 800a750:	4b88      	ldr	r3, [pc, #544]	; (800a974 <_dtoa_r+0x624>)
 800a752:	f7f5 ff59 	bl	8000608 <__aeabi_dmul>
 800a756:	9e02      	ldr	r6, [sp, #8]
 800a758:	4682      	mov	sl, r0
 800a75a:	468b      	mov	fp, r1
 800a75c:	3501      	adds	r5, #1
 800a75e:	4628      	mov	r0, r5
 800a760:	f7f5 fee8 	bl	8000534 <__aeabi_i2d>
 800a764:	4652      	mov	r2, sl
 800a766:	465b      	mov	r3, fp
 800a768:	f7f5 ff4e 	bl	8000608 <__aeabi_dmul>
 800a76c:	4b82      	ldr	r3, [pc, #520]	; (800a978 <_dtoa_r+0x628>)
 800a76e:	2200      	movs	r2, #0
 800a770:	f7f5 fd94 	bl	800029c <__adddf3>
 800a774:	46d0      	mov	r8, sl
 800a776:	46d9      	mov	r9, fp
 800a778:	4682      	mov	sl, r0
 800a77a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a77e:	2e00      	cmp	r6, #0
 800a780:	d158      	bne.n	800a834 <_dtoa_r+0x4e4>
 800a782:	4b7e      	ldr	r3, [pc, #504]	; (800a97c <_dtoa_r+0x62c>)
 800a784:	2200      	movs	r2, #0
 800a786:	4640      	mov	r0, r8
 800a788:	4649      	mov	r1, r9
 800a78a:	f7f5 fd85 	bl	8000298 <__aeabi_dsub>
 800a78e:	4652      	mov	r2, sl
 800a790:	465b      	mov	r3, fp
 800a792:	4680      	mov	r8, r0
 800a794:	4689      	mov	r9, r1
 800a796:	f7f6 f9c7 	bl	8000b28 <__aeabi_dcmpgt>
 800a79a:	2800      	cmp	r0, #0
 800a79c:	f040 8295 	bne.w	800acca <_dtoa_r+0x97a>
 800a7a0:	4652      	mov	r2, sl
 800a7a2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a7a6:	4640      	mov	r0, r8
 800a7a8:	4649      	mov	r1, r9
 800a7aa:	f7f6 f99f 	bl	8000aec <__aeabi_dcmplt>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	f040 8289 	bne.w	800acc6 <_dtoa_r+0x976>
 800a7b4:	ec5b ab19 	vmov	sl, fp, d9
 800a7b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f2c0 8148 	blt.w	800aa50 <_dtoa_r+0x700>
 800a7c0:	9a00      	ldr	r2, [sp, #0]
 800a7c2:	2a0e      	cmp	r2, #14
 800a7c4:	f300 8144 	bgt.w	800aa50 <_dtoa_r+0x700>
 800a7c8:	4b67      	ldr	r3, [pc, #412]	; (800a968 <_dtoa_r+0x618>)
 800a7ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a7ce:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a7d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	f280 80d5 	bge.w	800a984 <_dtoa_r+0x634>
 800a7da:	9b03      	ldr	r3, [sp, #12]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	f300 80d1 	bgt.w	800a984 <_dtoa_r+0x634>
 800a7e2:	f040 826f 	bne.w	800acc4 <_dtoa_r+0x974>
 800a7e6:	4b65      	ldr	r3, [pc, #404]	; (800a97c <_dtoa_r+0x62c>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	4640      	mov	r0, r8
 800a7ec:	4649      	mov	r1, r9
 800a7ee:	f7f5 ff0b 	bl	8000608 <__aeabi_dmul>
 800a7f2:	4652      	mov	r2, sl
 800a7f4:	465b      	mov	r3, fp
 800a7f6:	f7f6 f98d 	bl	8000b14 <__aeabi_dcmpge>
 800a7fa:	9e03      	ldr	r6, [sp, #12]
 800a7fc:	4637      	mov	r7, r6
 800a7fe:	2800      	cmp	r0, #0
 800a800:	f040 8245 	bne.w	800ac8e <_dtoa_r+0x93e>
 800a804:	9d01      	ldr	r5, [sp, #4]
 800a806:	2331      	movs	r3, #49	; 0x31
 800a808:	f805 3b01 	strb.w	r3, [r5], #1
 800a80c:	9b00      	ldr	r3, [sp, #0]
 800a80e:	3301      	adds	r3, #1
 800a810:	9300      	str	r3, [sp, #0]
 800a812:	e240      	b.n	800ac96 <_dtoa_r+0x946>
 800a814:	07f2      	lsls	r2, r6, #31
 800a816:	d505      	bpl.n	800a824 <_dtoa_r+0x4d4>
 800a818:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a81c:	f7f5 fef4 	bl	8000608 <__aeabi_dmul>
 800a820:	3501      	adds	r5, #1
 800a822:	2301      	movs	r3, #1
 800a824:	1076      	asrs	r6, r6, #1
 800a826:	3708      	adds	r7, #8
 800a828:	e777      	b.n	800a71a <_dtoa_r+0x3ca>
 800a82a:	2502      	movs	r5, #2
 800a82c:	e779      	b.n	800a722 <_dtoa_r+0x3d2>
 800a82e:	9f00      	ldr	r7, [sp, #0]
 800a830:	9e03      	ldr	r6, [sp, #12]
 800a832:	e794      	b.n	800a75e <_dtoa_r+0x40e>
 800a834:	9901      	ldr	r1, [sp, #4]
 800a836:	4b4c      	ldr	r3, [pc, #304]	; (800a968 <_dtoa_r+0x618>)
 800a838:	4431      	add	r1, r6
 800a83a:	910d      	str	r1, [sp, #52]	; 0x34
 800a83c:	9908      	ldr	r1, [sp, #32]
 800a83e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a842:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a846:	2900      	cmp	r1, #0
 800a848:	d043      	beq.n	800a8d2 <_dtoa_r+0x582>
 800a84a:	494d      	ldr	r1, [pc, #308]	; (800a980 <_dtoa_r+0x630>)
 800a84c:	2000      	movs	r0, #0
 800a84e:	f7f6 f805 	bl	800085c <__aeabi_ddiv>
 800a852:	4652      	mov	r2, sl
 800a854:	465b      	mov	r3, fp
 800a856:	f7f5 fd1f 	bl	8000298 <__aeabi_dsub>
 800a85a:	9d01      	ldr	r5, [sp, #4]
 800a85c:	4682      	mov	sl, r0
 800a85e:	468b      	mov	fp, r1
 800a860:	4649      	mov	r1, r9
 800a862:	4640      	mov	r0, r8
 800a864:	f7f6 f980 	bl	8000b68 <__aeabi_d2iz>
 800a868:	4606      	mov	r6, r0
 800a86a:	f7f5 fe63 	bl	8000534 <__aeabi_i2d>
 800a86e:	4602      	mov	r2, r0
 800a870:	460b      	mov	r3, r1
 800a872:	4640      	mov	r0, r8
 800a874:	4649      	mov	r1, r9
 800a876:	f7f5 fd0f 	bl	8000298 <__aeabi_dsub>
 800a87a:	3630      	adds	r6, #48	; 0x30
 800a87c:	f805 6b01 	strb.w	r6, [r5], #1
 800a880:	4652      	mov	r2, sl
 800a882:	465b      	mov	r3, fp
 800a884:	4680      	mov	r8, r0
 800a886:	4689      	mov	r9, r1
 800a888:	f7f6 f930 	bl	8000aec <__aeabi_dcmplt>
 800a88c:	2800      	cmp	r0, #0
 800a88e:	d163      	bne.n	800a958 <_dtoa_r+0x608>
 800a890:	4642      	mov	r2, r8
 800a892:	464b      	mov	r3, r9
 800a894:	4936      	ldr	r1, [pc, #216]	; (800a970 <_dtoa_r+0x620>)
 800a896:	2000      	movs	r0, #0
 800a898:	f7f5 fcfe 	bl	8000298 <__aeabi_dsub>
 800a89c:	4652      	mov	r2, sl
 800a89e:	465b      	mov	r3, fp
 800a8a0:	f7f6 f924 	bl	8000aec <__aeabi_dcmplt>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	f040 80b5 	bne.w	800aa14 <_dtoa_r+0x6c4>
 800a8aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8ac:	429d      	cmp	r5, r3
 800a8ae:	d081      	beq.n	800a7b4 <_dtoa_r+0x464>
 800a8b0:	4b30      	ldr	r3, [pc, #192]	; (800a974 <_dtoa_r+0x624>)
 800a8b2:	2200      	movs	r2, #0
 800a8b4:	4650      	mov	r0, sl
 800a8b6:	4659      	mov	r1, fp
 800a8b8:	f7f5 fea6 	bl	8000608 <__aeabi_dmul>
 800a8bc:	4b2d      	ldr	r3, [pc, #180]	; (800a974 <_dtoa_r+0x624>)
 800a8be:	4682      	mov	sl, r0
 800a8c0:	468b      	mov	fp, r1
 800a8c2:	4640      	mov	r0, r8
 800a8c4:	4649      	mov	r1, r9
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	f7f5 fe9e 	bl	8000608 <__aeabi_dmul>
 800a8cc:	4680      	mov	r8, r0
 800a8ce:	4689      	mov	r9, r1
 800a8d0:	e7c6      	b.n	800a860 <_dtoa_r+0x510>
 800a8d2:	4650      	mov	r0, sl
 800a8d4:	4659      	mov	r1, fp
 800a8d6:	f7f5 fe97 	bl	8000608 <__aeabi_dmul>
 800a8da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8dc:	9d01      	ldr	r5, [sp, #4]
 800a8de:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8e0:	4682      	mov	sl, r0
 800a8e2:	468b      	mov	fp, r1
 800a8e4:	4649      	mov	r1, r9
 800a8e6:	4640      	mov	r0, r8
 800a8e8:	f7f6 f93e 	bl	8000b68 <__aeabi_d2iz>
 800a8ec:	4606      	mov	r6, r0
 800a8ee:	f7f5 fe21 	bl	8000534 <__aeabi_i2d>
 800a8f2:	3630      	adds	r6, #48	; 0x30
 800a8f4:	4602      	mov	r2, r0
 800a8f6:	460b      	mov	r3, r1
 800a8f8:	4640      	mov	r0, r8
 800a8fa:	4649      	mov	r1, r9
 800a8fc:	f7f5 fccc 	bl	8000298 <__aeabi_dsub>
 800a900:	f805 6b01 	strb.w	r6, [r5], #1
 800a904:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a906:	429d      	cmp	r5, r3
 800a908:	4680      	mov	r8, r0
 800a90a:	4689      	mov	r9, r1
 800a90c:	f04f 0200 	mov.w	r2, #0
 800a910:	d124      	bne.n	800a95c <_dtoa_r+0x60c>
 800a912:	4b1b      	ldr	r3, [pc, #108]	; (800a980 <_dtoa_r+0x630>)
 800a914:	4650      	mov	r0, sl
 800a916:	4659      	mov	r1, fp
 800a918:	f7f5 fcc0 	bl	800029c <__adddf3>
 800a91c:	4602      	mov	r2, r0
 800a91e:	460b      	mov	r3, r1
 800a920:	4640      	mov	r0, r8
 800a922:	4649      	mov	r1, r9
 800a924:	f7f6 f900 	bl	8000b28 <__aeabi_dcmpgt>
 800a928:	2800      	cmp	r0, #0
 800a92a:	d173      	bne.n	800aa14 <_dtoa_r+0x6c4>
 800a92c:	4652      	mov	r2, sl
 800a92e:	465b      	mov	r3, fp
 800a930:	4913      	ldr	r1, [pc, #76]	; (800a980 <_dtoa_r+0x630>)
 800a932:	2000      	movs	r0, #0
 800a934:	f7f5 fcb0 	bl	8000298 <__aeabi_dsub>
 800a938:	4602      	mov	r2, r0
 800a93a:	460b      	mov	r3, r1
 800a93c:	4640      	mov	r0, r8
 800a93e:	4649      	mov	r1, r9
 800a940:	f7f6 f8d4 	bl	8000aec <__aeabi_dcmplt>
 800a944:	2800      	cmp	r0, #0
 800a946:	f43f af35 	beq.w	800a7b4 <_dtoa_r+0x464>
 800a94a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a94c:	1e6b      	subs	r3, r5, #1
 800a94e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a950:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a954:	2b30      	cmp	r3, #48	; 0x30
 800a956:	d0f8      	beq.n	800a94a <_dtoa_r+0x5fa>
 800a958:	9700      	str	r7, [sp, #0]
 800a95a:	e049      	b.n	800a9f0 <_dtoa_r+0x6a0>
 800a95c:	4b05      	ldr	r3, [pc, #20]	; (800a974 <_dtoa_r+0x624>)
 800a95e:	f7f5 fe53 	bl	8000608 <__aeabi_dmul>
 800a962:	4680      	mov	r8, r0
 800a964:	4689      	mov	r9, r1
 800a966:	e7bd      	b.n	800a8e4 <_dtoa_r+0x594>
 800a968:	0800c8b8 	.word	0x0800c8b8
 800a96c:	0800c890 	.word	0x0800c890
 800a970:	3ff00000 	.word	0x3ff00000
 800a974:	40240000 	.word	0x40240000
 800a978:	401c0000 	.word	0x401c0000
 800a97c:	40140000 	.word	0x40140000
 800a980:	3fe00000 	.word	0x3fe00000
 800a984:	9d01      	ldr	r5, [sp, #4]
 800a986:	4656      	mov	r6, sl
 800a988:	465f      	mov	r7, fp
 800a98a:	4642      	mov	r2, r8
 800a98c:	464b      	mov	r3, r9
 800a98e:	4630      	mov	r0, r6
 800a990:	4639      	mov	r1, r7
 800a992:	f7f5 ff63 	bl	800085c <__aeabi_ddiv>
 800a996:	f7f6 f8e7 	bl	8000b68 <__aeabi_d2iz>
 800a99a:	4682      	mov	sl, r0
 800a99c:	f7f5 fdca 	bl	8000534 <__aeabi_i2d>
 800a9a0:	4642      	mov	r2, r8
 800a9a2:	464b      	mov	r3, r9
 800a9a4:	f7f5 fe30 	bl	8000608 <__aeabi_dmul>
 800a9a8:	4602      	mov	r2, r0
 800a9aa:	460b      	mov	r3, r1
 800a9ac:	4630      	mov	r0, r6
 800a9ae:	4639      	mov	r1, r7
 800a9b0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a9b4:	f7f5 fc70 	bl	8000298 <__aeabi_dsub>
 800a9b8:	f805 6b01 	strb.w	r6, [r5], #1
 800a9bc:	9e01      	ldr	r6, [sp, #4]
 800a9be:	9f03      	ldr	r7, [sp, #12]
 800a9c0:	1bae      	subs	r6, r5, r6
 800a9c2:	42b7      	cmp	r7, r6
 800a9c4:	4602      	mov	r2, r0
 800a9c6:	460b      	mov	r3, r1
 800a9c8:	d135      	bne.n	800aa36 <_dtoa_r+0x6e6>
 800a9ca:	f7f5 fc67 	bl	800029c <__adddf3>
 800a9ce:	4642      	mov	r2, r8
 800a9d0:	464b      	mov	r3, r9
 800a9d2:	4606      	mov	r6, r0
 800a9d4:	460f      	mov	r7, r1
 800a9d6:	f7f6 f8a7 	bl	8000b28 <__aeabi_dcmpgt>
 800a9da:	b9d0      	cbnz	r0, 800aa12 <_dtoa_r+0x6c2>
 800a9dc:	4642      	mov	r2, r8
 800a9de:	464b      	mov	r3, r9
 800a9e0:	4630      	mov	r0, r6
 800a9e2:	4639      	mov	r1, r7
 800a9e4:	f7f6 f878 	bl	8000ad8 <__aeabi_dcmpeq>
 800a9e8:	b110      	cbz	r0, 800a9f0 <_dtoa_r+0x6a0>
 800a9ea:	f01a 0f01 	tst.w	sl, #1
 800a9ee:	d110      	bne.n	800aa12 <_dtoa_r+0x6c2>
 800a9f0:	4620      	mov	r0, r4
 800a9f2:	ee18 1a10 	vmov	r1, s16
 800a9f6:	f000 faf3 	bl	800afe0 <_Bfree>
 800a9fa:	2300      	movs	r3, #0
 800a9fc:	9800      	ldr	r0, [sp, #0]
 800a9fe:	702b      	strb	r3, [r5, #0]
 800aa00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aa02:	3001      	adds	r0, #1
 800aa04:	6018      	str	r0, [r3, #0]
 800aa06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	f43f acf1 	beq.w	800a3f0 <_dtoa_r+0xa0>
 800aa0e:	601d      	str	r5, [r3, #0]
 800aa10:	e4ee      	b.n	800a3f0 <_dtoa_r+0xa0>
 800aa12:	9f00      	ldr	r7, [sp, #0]
 800aa14:	462b      	mov	r3, r5
 800aa16:	461d      	mov	r5, r3
 800aa18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aa1c:	2a39      	cmp	r2, #57	; 0x39
 800aa1e:	d106      	bne.n	800aa2e <_dtoa_r+0x6de>
 800aa20:	9a01      	ldr	r2, [sp, #4]
 800aa22:	429a      	cmp	r2, r3
 800aa24:	d1f7      	bne.n	800aa16 <_dtoa_r+0x6c6>
 800aa26:	9901      	ldr	r1, [sp, #4]
 800aa28:	2230      	movs	r2, #48	; 0x30
 800aa2a:	3701      	adds	r7, #1
 800aa2c:	700a      	strb	r2, [r1, #0]
 800aa2e:	781a      	ldrb	r2, [r3, #0]
 800aa30:	3201      	adds	r2, #1
 800aa32:	701a      	strb	r2, [r3, #0]
 800aa34:	e790      	b.n	800a958 <_dtoa_r+0x608>
 800aa36:	4ba6      	ldr	r3, [pc, #664]	; (800acd0 <_dtoa_r+0x980>)
 800aa38:	2200      	movs	r2, #0
 800aa3a:	f7f5 fde5 	bl	8000608 <__aeabi_dmul>
 800aa3e:	2200      	movs	r2, #0
 800aa40:	2300      	movs	r3, #0
 800aa42:	4606      	mov	r6, r0
 800aa44:	460f      	mov	r7, r1
 800aa46:	f7f6 f847 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	d09d      	beq.n	800a98a <_dtoa_r+0x63a>
 800aa4e:	e7cf      	b.n	800a9f0 <_dtoa_r+0x6a0>
 800aa50:	9a08      	ldr	r2, [sp, #32]
 800aa52:	2a00      	cmp	r2, #0
 800aa54:	f000 80d7 	beq.w	800ac06 <_dtoa_r+0x8b6>
 800aa58:	9a06      	ldr	r2, [sp, #24]
 800aa5a:	2a01      	cmp	r2, #1
 800aa5c:	f300 80ba 	bgt.w	800abd4 <_dtoa_r+0x884>
 800aa60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aa62:	2a00      	cmp	r2, #0
 800aa64:	f000 80b2 	beq.w	800abcc <_dtoa_r+0x87c>
 800aa68:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aa6c:	9e07      	ldr	r6, [sp, #28]
 800aa6e:	9d04      	ldr	r5, [sp, #16]
 800aa70:	9a04      	ldr	r2, [sp, #16]
 800aa72:	441a      	add	r2, r3
 800aa74:	9204      	str	r2, [sp, #16]
 800aa76:	9a05      	ldr	r2, [sp, #20]
 800aa78:	2101      	movs	r1, #1
 800aa7a:	441a      	add	r2, r3
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	9205      	str	r2, [sp, #20]
 800aa80:	f000 fb66 	bl	800b150 <__i2b>
 800aa84:	4607      	mov	r7, r0
 800aa86:	2d00      	cmp	r5, #0
 800aa88:	dd0c      	ble.n	800aaa4 <_dtoa_r+0x754>
 800aa8a:	9b05      	ldr	r3, [sp, #20]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	dd09      	ble.n	800aaa4 <_dtoa_r+0x754>
 800aa90:	42ab      	cmp	r3, r5
 800aa92:	9a04      	ldr	r2, [sp, #16]
 800aa94:	bfa8      	it	ge
 800aa96:	462b      	movge	r3, r5
 800aa98:	1ad2      	subs	r2, r2, r3
 800aa9a:	9204      	str	r2, [sp, #16]
 800aa9c:	9a05      	ldr	r2, [sp, #20]
 800aa9e:	1aed      	subs	r5, r5, r3
 800aaa0:	1ad3      	subs	r3, r2, r3
 800aaa2:	9305      	str	r3, [sp, #20]
 800aaa4:	9b07      	ldr	r3, [sp, #28]
 800aaa6:	b31b      	cbz	r3, 800aaf0 <_dtoa_r+0x7a0>
 800aaa8:	9b08      	ldr	r3, [sp, #32]
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	f000 80af 	beq.w	800ac0e <_dtoa_r+0x8be>
 800aab0:	2e00      	cmp	r6, #0
 800aab2:	dd13      	ble.n	800aadc <_dtoa_r+0x78c>
 800aab4:	4639      	mov	r1, r7
 800aab6:	4632      	mov	r2, r6
 800aab8:	4620      	mov	r0, r4
 800aaba:	f000 fc09 	bl	800b2d0 <__pow5mult>
 800aabe:	ee18 2a10 	vmov	r2, s16
 800aac2:	4601      	mov	r1, r0
 800aac4:	4607      	mov	r7, r0
 800aac6:	4620      	mov	r0, r4
 800aac8:	f000 fb58 	bl	800b17c <__multiply>
 800aacc:	ee18 1a10 	vmov	r1, s16
 800aad0:	4680      	mov	r8, r0
 800aad2:	4620      	mov	r0, r4
 800aad4:	f000 fa84 	bl	800afe0 <_Bfree>
 800aad8:	ee08 8a10 	vmov	s16, r8
 800aadc:	9b07      	ldr	r3, [sp, #28]
 800aade:	1b9a      	subs	r2, r3, r6
 800aae0:	d006      	beq.n	800aaf0 <_dtoa_r+0x7a0>
 800aae2:	ee18 1a10 	vmov	r1, s16
 800aae6:	4620      	mov	r0, r4
 800aae8:	f000 fbf2 	bl	800b2d0 <__pow5mult>
 800aaec:	ee08 0a10 	vmov	s16, r0
 800aaf0:	2101      	movs	r1, #1
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	f000 fb2c 	bl	800b150 <__i2b>
 800aaf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	4606      	mov	r6, r0
 800aafe:	f340 8088 	ble.w	800ac12 <_dtoa_r+0x8c2>
 800ab02:	461a      	mov	r2, r3
 800ab04:	4601      	mov	r1, r0
 800ab06:	4620      	mov	r0, r4
 800ab08:	f000 fbe2 	bl	800b2d0 <__pow5mult>
 800ab0c:	9b06      	ldr	r3, [sp, #24]
 800ab0e:	2b01      	cmp	r3, #1
 800ab10:	4606      	mov	r6, r0
 800ab12:	f340 8081 	ble.w	800ac18 <_dtoa_r+0x8c8>
 800ab16:	f04f 0800 	mov.w	r8, #0
 800ab1a:	6933      	ldr	r3, [r6, #16]
 800ab1c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ab20:	6918      	ldr	r0, [r3, #16]
 800ab22:	f000 fac5 	bl	800b0b0 <__hi0bits>
 800ab26:	f1c0 0020 	rsb	r0, r0, #32
 800ab2a:	9b05      	ldr	r3, [sp, #20]
 800ab2c:	4418      	add	r0, r3
 800ab2e:	f010 001f 	ands.w	r0, r0, #31
 800ab32:	f000 8092 	beq.w	800ac5a <_dtoa_r+0x90a>
 800ab36:	f1c0 0320 	rsb	r3, r0, #32
 800ab3a:	2b04      	cmp	r3, #4
 800ab3c:	f340 808a 	ble.w	800ac54 <_dtoa_r+0x904>
 800ab40:	f1c0 001c 	rsb	r0, r0, #28
 800ab44:	9b04      	ldr	r3, [sp, #16]
 800ab46:	4403      	add	r3, r0
 800ab48:	9304      	str	r3, [sp, #16]
 800ab4a:	9b05      	ldr	r3, [sp, #20]
 800ab4c:	4403      	add	r3, r0
 800ab4e:	4405      	add	r5, r0
 800ab50:	9305      	str	r3, [sp, #20]
 800ab52:	9b04      	ldr	r3, [sp, #16]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	dd07      	ble.n	800ab68 <_dtoa_r+0x818>
 800ab58:	ee18 1a10 	vmov	r1, s16
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	4620      	mov	r0, r4
 800ab60:	f000 fc10 	bl	800b384 <__lshift>
 800ab64:	ee08 0a10 	vmov	s16, r0
 800ab68:	9b05      	ldr	r3, [sp, #20]
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	dd05      	ble.n	800ab7a <_dtoa_r+0x82a>
 800ab6e:	4631      	mov	r1, r6
 800ab70:	461a      	mov	r2, r3
 800ab72:	4620      	mov	r0, r4
 800ab74:	f000 fc06 	bl	800b384 <__lshift>
 800ab78:	4606      	mov	r6, r0
 800ab7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d06e      	beq.n	800ac5e <_dtoa_r+0x90e>
 800ab80:	ee18 0a10 	vmov	r0, s16
 800ab84:	4631      	mov	r1, r6
 800ab86:	f000 fc6d 	bl	800b464 <__mcmp>
 800ab8a:	2800      	cmp	r0, #0
 800ab8c:	da67      	bge.n	800ac5e <_dtoa_r+0x90e>
 800ab8e:	9b00      	ldr	r3, [sp, #0]
 800ab90:	3b01      	subs	r3, #1
 800ab92:	ee18 1a10 	vmov	r1, s16
 800ab96:	9300      	str	r3, [sp, #0]
 800ab98:	220a      	movs	r2, #10
 800ab9a:	2300      	movs	r3, #0
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f000 fa41 	bl	800b024 <__multadd>
 800aba2:	9b08      	ldr	r3, [sp, #32]
 800aba4:	ee08 0a10 	vmov	s16, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	f000 81b1 	beq.w	800af10 <_dtoa_r+0xbc0>
 800abae:	2300      	movs	r3, #0
 800abb0:	4639      	mov	r1, r7
 800abb2:	220a      	movs	r2, #10
 800abb4:	4620      	mov	r0, r4
 800abb6:	f000 fa35 	bl	800b024 <__multadd>
 800abba:	9b02      	ldr	r3, [sp, #8]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	4607      	mov	r7, r0
 800abc0:	f300 808e 	bgt.w	800ace0 <_dtoa_r+0x990>
 800abc4:	9b06      	ldr	r3, [sp, #24]
 800abc6:	2b02      	cmp	r3, #2
 800abc8:	dc51      	bgt.n	800ac6e <_dtoa_r+0x91e>
 800abca:	e089      	b.n	800ace0 <_dtoa_r+0x990>
 800abcc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800abce:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800abd2:	e74b      	b.n	800aa6c <_dtoa_r+0x71c>
 800abd4:	9b03      	ldr	r3, [sp, #12]
 800abd6:	1e5e      	subs	r6, r3, #1
 800abd8:	9b07      	ldr	r3, [sp, #28]
 800abda:	42b3      	cmp	r3, r6
 800abdc:	bfbf      	itttt	lt
 800abde:	9b07      	ldrlt	r3, [sp, #28]
 800abe0:	9607      	strlt	r6, [sp, #28]
 800abe2:	1af2      	sublt	r2, r6, r3
 800abe4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800abe6:	bfb6      	itet	lt
 800abe8:	189b      	addlt	r3, r3, r2
 800abea:	1b9e      	subge	r6, r3, r6
 800abec:	930a      	strlt	r3, [sp, #40]	; 0x28
 800abee:	9b03      	ldr	r3, [sp, #12]
 800abf0:	bfb8      	it	lt
 800abf2:	2600      	movlt	r6, #0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	bfb7      	itett	lt
 800abf8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800abfc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ac00:	1a9d      	sublt	r5, r3, r2
 800ac02:	2300      	movlt	r3, #0
 800ac04:	e734      	b.n	800aa70 <_dtoa_r+0x720>
 800ac06:	9e07      	ldr	r6, [sp, #28]
 800ac08:	9d04      	ldr	r5, [sp, #16]
 800ac0a:	9f08      	ldr	r7, [sp, #32]
 800ac0c:	e73b      	b.n	800aa86 <_dtoa_r+0x736>
 800ac0e:	9a07      	ldr	r2, [sp, #28]
 800ac10:	e767      	b.n	800aae2 <_dtoa_r+0x792>
 800ac12:	9b06      	ldr	r3, [sp, #24]
 800ac14:	2b01      	cmp	r3, #1
 800ac16:	dc18      	bgt.n	800ac4a <_dtoa_r+0x8fa>
 800ac18:	f1ba 0f00 	cmp.w	sl, #0
 800ac1c:	d115      	bne.n	800ac4a <_dtoa_r+0x8fa>
 800ac1e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac22:	b993      	cbnz	r3, 800ac4a <_dtoa_r+0x8fa>
 800ac24:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac28:	0d1b      	lsrs	r3, r3, #20
 800ac2a:	051b      	lsls	r3, r3, #20
 800ac2c:	b183      	cbz	r3, 800ac50 <_dtoa_r+0x900>
 800ac2e:	9b04      	ldr	r3, [sp, #16]
 800ac30:	3301      	adds	r3, #1
 800ac32:	9304      	str	r3, [sp, #16]
 800ac34:	9b05      	ldr	r3, [sp, #20]
 800ac36:	3301      	adds	r3, #1
 800ac38:	9305      	str	r3, [sp, #20]
 800ac3a:	f04f 0801 	mov.w	r8, #1
 800ac3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	f47f af6a 	bne.w	800ab1a <_dtoa_r+0x7ca>
 800ac46:	2001      	movs	r0, #1
 800ac48:	e76f      	b.n	800ab2a <_dtoa_r+0x7da>
 800ac4a:	f04f 0800 	mov.w	r8, #0
 800ac4e:	e7f6      	b.n	800ac3e <_dtoa_r+0x8ee>
 800ac50:	4698      	mov	r8, r3
 800ac52:	e7f4      	b.n	800ac3e <_dtoa_r+0x8ee>
 800ac54:	f43f af7d 	beq.w	800ab52 <_dtoa_r+0x802>
 800ac58:	4618      	mov	r0, r3
 800ac5a:	301c      	adds	r0, #28
 800ac5c:	e772      	b.n	800ab44 <_dtoa_r+0x7f4>
 800ac5e:	9b03      	ldr	r3, [sp, #12]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	dc37      	bgt.n	800acd4 <_dtoa_r+0x984>
 800ac64:	9b06      	ldr	r3, [sp, #24]
 800ac66:	2b02      	cmp	r3, #2
 800ac68:	dd34      	ble.n	800acd4 <_dtoa_r+0x984>
 800ac6a:	9b03      	ldr	r3, [sp, #12]
 800ac6c:	9302      	str	r3, [sp, #8]
 800ac6e:	9b02      	ldr	r3, [sp, #8]
 800ac70:	b96b      	cbnz	r3, 800ac8e <_dtoa_r+0x93e>
 800ac72:	4631      	mov	r1, r6
 800ac74:	2205      	movs	r2, #5
 800ac76:	4620      	mov	r0, r4
 800ac78:	f000 f9d4 	bl	800b024 <__multadd>
 800ac7c:	4601      	mov	r1, r0
 800ac7e:	4606      	mov	r6, r0
 800ac80:	ee18 0a10 	vmov	r0, s16
 800ac84:	f000 fbee 	bl	800b464 <__mcmp>
 800ac88:	2800      	cmp	r0, #0
 800ac8a:	f73f adbb 	bgt.w	800a804 <_dtoa_r+0x4b4>
 800ac8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac90:	9d01      	ldr	r5, [sp, #4]
 800ac92:	43db      	mvns	r3, r3
 800ac94:	9300      	str	r3, [sp, #0]
 800ac96:	f04f 0800 	mov.w	r8, #0
 800ac9a:	4631      	mov	r1, r6
 800ac9c:	4620      	mov	r0, r4
 800ac9e:	f000 f99f 	bl	800afe0 <_Bfree>
 800aca2:	2f00      	cmp	r7, #0
 800aca4:	f43f aea4 	beq.w	800a9f0 <_dtoa_r+0x6a0>
 800aca8:	f1b8 0f00 	cmp.w	r8, #0
 800acac:	d005      	beq.n	800acba <_dtoa_r+0x96a>
 800acae:	45b8      	cmp	r8, r7
 800acb0:	d003      	beq.n	800acba <_dtoa_r+0x96a>
 800acb2:	4641      	mov	r1, r8
 800acb4:	4620      	mov	r0, r4
 800acb6:	f000 f993 	bl	800afe0 <_Bfree>
 800acba:	4639      	mov	r1, r7
 800acbc:	4620      	mov	r0, r4
 800acbe:	f000 f98f 	bl	800afe0 <_Bfree>
 800acc2:	e695      	b.n	800a9f0 <_dtoa_r+0x6a0>
 800acc4:	2600      	movs	r6, #0
 800acc6:	4637      	mov	r7, r6
 800acc8:	e7e1      	b.n	800ac8e <_dtoa_r+0x93e>
 800acca:	9700      	str	r7, [sp, #0]
 800accc:	4637      	mov	r7, r6
 800acce:	e599      	b.n	800a804 <_dtoa_r+0x4b4>
 800acd0:	40240000 	.word	0x40240000
 800acd4:	9b08      	ldr	r3, [sp, #32]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	f000 80ca 	beq.w	800ae70 <_dtoa_r+0xb20>
 800acdc:	9b03      	ldr	r3, [sp, #12]
 800acde:	9302      	str	r3, [sp, #8]
 800ace0:	2d00      	cmp	r5, #0
 800ace2:	dd05      	ble.n	800acf0 <_dtoa_r+0x9a0>
 800ace4:	4639      	mov	r1, r7
 800ace6:	462a      	mov	r2, r5
 800ace8:	4620      	mov	r0, r4
 800acea:	f000 fb4b 	bl	800b384 <__lshift>
 800acee:	4607      	mov	r7, r0
 800acf0:	f1b8 0f00 	cmp.w	r8, #0
 800acf4:	d05b      	beq.n	800adae <_dtoa_r+0xa5e>
 800acf6:	6879      	ldr	r1, [r7, #4]
 800acf8:	4620      	mov	r0, r4
 800acfa:	f000 f931 	bl	800af60 <_Balloc>
 800acfe:	4605      	mov	r5, r0
 800ad00:	b928      	cbnz	r0, 800ad0e <_dtoa_r+0x9be>
 800ad02:	4b87      	ldr	r3, [pc, #540]	; (800af20 <_dtoa_r+0xbd0>)
 800ad04:	4602      	mov	r2, r0
 800ad06:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ad0a:	f7ff bb3b 	b.w	800a384 <_dtoa_r+0x34>
 800ad0e:	693a      	ldr	r2, [r7, #16]
 800ad10:	3202      	adds	r2, #2
 800ad12:	0092      	lsls	r2, r2, #2
 800ad14:	f107 010c 	add.w	r1, r7, #12
 800ad18:	300c      	adds	r0, #12
 800ad1a:	f000 f913 	bl	800af44 <memcpy>
 800ad1e:	2201      	movs	r2, #1
 800ad20:	4629      	mov	r1, r5
 800ad22:	4620      	mov	r0, r4
 800ad24:	f000 fb2e 	bl	800b384 <__lshift>
 800ad28:	9b01      	ldr	r3, [sp, #4]
 800ad2a:	f103 0901 	add.w	r9, r3, #1
 800ad2e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ad32:	4413      	add	r3, r2
 800ad34:	9305      	str	r3, [sp, #20]
 800ad36:	f00a 0301 	and.w	r3, sl, #1
 800ad3a:	46b8      	mov	r8, r7
 800ad3c:	9304      	str	r3, [sp, #16]
 800ad3e:	4607      	mov	r7, r0
 800ad40:	4631      	mov	r1, r6
 800ad42:	ee18 0a10 	vmov	r0, s16
 800ad46:	f7ff fa75 	bl	800a234 <quorem>
 800ad4a:	4641      	mov	r1, r8
 800ad4c:	9002      	str	r0, [sp, #8]
 800ad4e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ad52:	ee18 0a10 	vmov	r0, s16
 800ad56:	f000 fb85 	bl	800b464 <__mcmp>
 800ad5a:	463a      	mov	r2, r7
 800ad5c:	9003      	str	r0, [sp, #12]
 800ad5e:	4631      	mov	r1, r6
 800ad60:	4620      	mov	r0, r4
 800ad62:	f000 fb9b 	bl	800b49c <__mdiff>
 800ad66:	68c2      	ldr	r2, [r0, #12]
 800ad68:	f109 3bff 	add.w	fp, r9, #4294967295
 800ad6c:	4605      	mov	r5, r0
 800ad6e:	bb02      	cbnz	r2, 800adb2 <_dtoa_r+0xa62>
 800ad70:	4601      	mov	r1, r0
 800ad72:	ee18 0a10 	vmov	r0, s16
 800ad76:	f000 fb75 	bl	800b464 <__mcmp>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	4629      	mov	r1, r5
 800ad7e:	4620      	mov	r0, r4
 800ad80:	9207      	str	r2, [sp, #28]
 800ad82:	f000 f92d 	bl	800afe0 <_Bfree>
 800ad86:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ad8a:	ea43 0102 	orr.w	r1, r3, r2
 800ad8e:	9b04      	ldr	r3, [sp, #16]
 800ad90:	430b      	orrs	r3, r1
 800ad92:	464d      	mov	r5, r9
 800ad94:	d10f      	bne.n	800adb6 <_dtoa_r+0xa66>
 800ad96:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad9a:	d02a      	beq.n	800adf2 <_dtoa_r+0xaa2>
 800ad9c:	9b03      	ldr	r3, [sp, #12]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	dd02      	ble.n	800ada8 <_dtoa_r+0xa58>
 800ada2:	9b02      	ldr	r3, [sp, #8]
 800ada4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ada8:	f88b a000 	strb.w	sl, [fp]
 800adac:	e775      	b.n	800ac9a <_dtoa_r+0x94a>
 800adae:	4638      	mov	r0, r7
 800adb0:	e7ba      	b.n	800ad28 <_dtoa_r+0x9d8>
 800adb2:	2201      	movs	r2, #1
 800adb4:	e7e2      	b.n	800ad7c <_dtoa_r+0xa2c>
 800adb6:	9b03      	ldr	r3, [sp, #12]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	db04      	blt.n	800adc6 <_dtoa_r+0xa76>
 800adbc:	9906      	ldr	r1, [sp, #24]
 800adbe:	430b      	orrs	r3, r1
 800adc0:	9904      	ldr	r1, [sp, #16]
 800adc2:	430b      	orrs	r3, r1
 800adc4:	d122      	bne.n	800ae0c <_dtoa_r+0xabc>
 800adc6:	2a00      	cmp	r2, #0
 800adc8:	ddee      	ble.n	800ada8 <_dtoa_r+0xa58>
 800adca:	ee18 1a10 	vmov	r1, s16
 800adce:	2201      	movs	r2, #1
 800add0:	4620      	mov	r0, r4
 800add2:	f000 fad7 	bl	800b384 <__lshift>
 800add6:	4631      	mov	r1, r6
 800add8:	ee08 0a10 	vmov	s16, r0
 800addc:	f000 fb42 	bl	800b464 <__mcmp>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	dc03      	bgt.n	800adec <_dtoa_r+0xa9c>
 800ade4:	d1e0      	bne.n	800ada8 <_dtoa_r+0xa58>
 800ade6:	f01a 0f01 	tst.w	sl, #1
 800adea:	d0dd      	beq.n	800ada8 <_dtoa_r+0xa58>
 800adec:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800adf0:	d1d7      	bne.n	800ada2 <_dtoa_r+0xa52>
 800adf2:	2339      	movs	r3, #57	; 0x39
 800adf4:	f88b 3000 	strb.w	r3, [fp]
 800adf8:	462b      	mov	r3, r5
 800adfa:	461d      	mov	r5, r3
 800adfc:	3b01      	subs	r3, #1
 800adfe:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ae02:	2a39      	cmp	r2, #57	; 0x39
 800ae04:	d071      	beq.n	800aeea <_dtoa_r+0xb9a>
 800ae06:	3201      	adds	r2, #1
 800ae08:	701a      	strb	r2, [r3, #0]
 800ae0a:	e746      	b.n	800ac9a <_dtoa_r+0x94a>
 800ae0c:	2a00      	cmp	r2, #0
 800ae0e:	dd07      	ble.n	800ae20 <_dtoa_r+0xad0>
 800ae10:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ae14:	d0ed      	beq.n	800adf2 <_dtoa_r+0xaa2>
 800ae16:	f10a 0301 	add.w	r3, sl, #1
 800ae1a:	f88b 3000 	strb.w	r3, [fp]
 800ae1e:	e73c      	b.n	800ac9a <_dtoa_r+0x94a>
 800ae20:	9b05      	ldr	r3, [sp, #20]
 800ae22:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ae26:	4599      	cmp	r9, r3
 800ae28:	d047      	beq.n	800aeba <_dtoa_r+0xb6a>
 800ae2a:	ee18 1a10 	vmov	r1, s16
 800ae2e:	2300      	movs	r3, #0
 800ae30:	220a      	movs	r2, #10
 800ae32:	4620      	mov	r0, r4
 800ae34:	f000 f8f6 	bl	800b024 <__multadd>
 800ae38:	45b8      	cmp	r8, r7
 800ae3a:	ee08 0a10 	vmov	s16, r0
 800ae3e:	f04f 0300 	mov.w	r3, #0
 800ae42:	f04f 020a 	mov.w	r2, #10
 800ae46:	4641      	mov	r1, r8
 800ae48:	4620      	mov	r0, r4
 800ae4a:	d106      	bne.n	800ae5a <_dtoa_r+0xb0a>
 800ae4c:	f000 f8ea 	bl	800b024 <__multadd>
 800ae50:	4680      	mov	r8, r0
 800ae52:	4607      	mov	r7, r0
 800ae54:	f109 0901 	add.w	r9, r9, #1
 800ae58:	e772      	b.n	800ad40 <_dtoa_r+0x9f0>
 800ae5a:	f000 f8e3 	bl	800b024 <__multadd>
 800ae5e:	4639      	mov	r1, r7
 800ae60:	4680      	mov	r8, r0
 800ae62:	2300      	movs	r3, #0
 800ae64:	220a      	movs	r2, #10
 800ae66:	4620      	mov	r0, r4
 800ae68:	f000 f8dc 	bl	800b024 <__multadd>
 800ae6c:	4607      	mov	r7, r0
 800ae6e:	e7f1      	b.n	800ae54 <_dtoa_r+0xb04>
 800ae70:	9b03      	ldr	r3, [sp, #12]
 800ae72:	9302      	str	r3, [sp, #8]
 800ae74:	9d01      	ldr	r5, [sp, #4]
 800ae76:	ee18 0a10 	vmov	r0, s16
 800ae7a:	4631      	mov	r1, r6
 800ae7c:	f7ff f9da 	bl	800a234 <quorem>
 800ae80:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ae84:	9b01      	ldr	r3, [sp, #4]
 800ae86:	f805 ab01 	strb.w	sl, [r5], #1
 800ae8a:	1aea      	subs	r2, r5, r3
 800ae8c:	9b02      	ldr	r3, [sp, #8]
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	dd09      	ble.n	800aea6 <_dtoa_r+0xb56>
 800ae92:	ee18 1a10 	vmov	r1, s16
 800ae96:	2300      	movs	r3, #0
 800ae98:	220a      	movs	r2, #10
 800ae9a:	4620      	mov	r0, r4
 800ae9c:	f000 f8c2 	bl	800b024 <__multadd>
 800aea0:	ee08 0a10 	vmov	s16, r0
 800aea4:	e7e7      	b.n	800ae76 <_dtoa_r+0xb26>
 800aea6:	9b02      	ldr	r3, [sp, #8]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	bfc8      	it	gt
 800aeac:	461d      	movgt	r5, r3
 800aeae:	9b01      	ldr	r3, [sp, #4]
 800aeb0:	bfd8      	it	le
 800aeb2:	2501      	movle	r5, #1
 800aeb4:	441d      	add	r5, r3
 800aeb6:	f04f 0800 	mov.w	r8, #0
 800aeba:	ee18 1a10 	vmov	r1, s16
 800aebe:	2201      	movs	r2, #1
 800aec0:	4620      	mov	r0, r4
 800aec2:	f000 fa5f 	bl	800b384 <__lshift>
 800aec6:	4631      	mov	r1, r6
 800aec8:	ee08 0a10 	vmov	s16, r0
 800aecc:	f000 faca 	bl	800b464 <__mcmp>
 800aed0:	2800      	cmp	r0, #0
 800aed2:	dc91      	bgt.n	800adf8 <_dtoa_r+0xaa8>
 800aed4:	d102      	bne.n	800aedc <_dtoa_r+0xb8c>
 800aed6:	f01a 0f01 	tst.w	sl, #1
 800aeda:	d18d      	bne.n	800adf8 <_dtoa_r+0xaa8>
 800aedc:	462b      	mov	r3, r5
 800aede:	461d      	mov	r5, r3
 800aee0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800aee4:	2a30      	cmp	r2, #48	; 0x30
 800aee6:	d0fa      	beq.n	800aede <_dtoa_r+0xb8e>
 800aee8:	e6d7      	b.n	800ac9a <_dtoa_r+0x94a>
 800aeea:	9a01      	ldr	r2, [sp, #4]
 800aeec:	429a      	cmp	r2, r3
 800aeee:	d184      	bne.n	800adfa <_dtoa_r+0xaaa>
 800aef0:	9b00      	ldr	r3, [sp, #0]
 800aef2:	3301      	adds	r3, #1
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	2331      	movs	r3, #49	; 0x31
 800aef8:	7013      	strb	r3, [r2, #0]
 800aefa:	e6ce      	b.n	800ac9a <_dtoa_r+0x94a>
 800aefc:	4b09      	ldr	r3, [pc, #36]	; (800af24 <_dtoa_r+0xbd4>)
 800aefe:	f7ff ba95 	b.w	800a42c <_dtoa_r+0xdc>
 800af02:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af04:	2b00      	cmp	r3, #0
 800af06:	f47f aa6e 	bne.w	800a3e6 <_dtoa_r+0x96>
 800af0a:	4b07      	ldr	r3, [pc, #28]	; (800af28 <_dtoa_r+0xbd8>)
 800af0c:	f7ff ba8e 	b.w	800a42c <_dtoa_r+0xdc>
 800af10:	9b02      	ldr	r3, [sp, #8]
 800af12:	2b00      	cmp	r3, #0
 800af14:	dcae      	bgt.n	800ae74 <_dtoa_r+0xb24>
 800af16:	9b06      	ldr	r3, [sp, #24]
 800af18:	2b02      	cmp	r3, #2
 800af1a:	f73f aea8 	bgt.w	800ac6e <_dtoa_r+0x91e>
 800af1e:	e7a9      	b.n	800ae74 <_dtoa_r+0xb24>
 800af20:	0800c81f 	.word	0x0800c81f
 800af24:	0800c77c 	.word	0x0800c77c
 800af28:	0800c7a0 	.word	0x0800c7a0

0800af2c <_localeconv_r>:
 800af2c:	4800      	ldr	r0, [pc, #0]	; (800af30 <_localeconv_r+0x4>)
 800af2e:	4770      	bx	lr
 800af30:	20000280 	.word	0x20000280

0800af34 <malloc>:
 800af34:	4b02      	ldr	r3, [pc, #8]	; (800af40 <malloc+0xc>)
 800af36:	4601      	mov	r1, r0
 800af38:	6818      	ldr	r0, [r3, #0]
 800af3a:	f000 bc17 	b.w	800b76c <_malloc_r>
 800af3e:	bf00      	nop
 800af40:	2000012c 	.word	0x2000012c

0800af44 <memcpy>:
 800af44:	440a      	add	r2, r1
 800af46:	4291      	cmp	r1, r2
 800af48:	f100 33ff 	add.w	r3, r0, #4294967295
 800af4c:	d100      	bne.n	800af50 <memcpy+0xc>
 800af4e:	4770      	bx	lr
 800af50:	b510      	push	{r4, lr}
 800af52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800af56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800af5a:	4291      	cmp	r1, r2
 800af5c:	d1f9      	bne.n	800af52 <memcpy+0xe>
 800af5e:	bd10      	pop	{r4, pc}

0800af60 <_Balloc>:
 800af60:	b570      	push	{r4, r5, r6, lr}
 800af62:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800af64:	4604      	mov	r4, r0
 800af66:	460d      	mov	r5, r1
 800af68:	b976      	cbnz	r6, 800af88 <_Balloc+0x28>
 800af6a:	2010      	movs	r0, #16
 800af6c:	f7ff ffe2 	bl	800af34 <malloc>
 800af70:	4602      	mov	r2, r0
 800af72:	6260      	str	r0, [r4, #36]	; 0x24
 800af74:	b920      	cbnz	r0, 800af80 <_Balloc+0x20>
 800af76:	4b18      	ldr	r3, [pc, #96]	; (800afd8 <_Balloc+0x78>)
 800af78:	4818      	ldr	r0, [pc, #96]	; (800afdc <_Balloc+0x7c>)
 800af7a:	2166      	movs	r1, #102	; 0x66
 800af7c:	f000 fdd6 	bl	800bb2c <__assert_func>
 800af80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af84:	6006      	str	r6, [r0, #0]
 800af86:	60c6      	str	r6, [r0, #12]
 800af88:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800af8a:	68f3      	ldr	r3, [r6, #12]
 800af8c:	b183      	cbz	r3, 800afb0 <_Balloc+0x50>
 800af8e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af90:	68db      	ldr	r3, [r3, #12]
 800af92:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af96:	b9b8      	cbnz	r0, 800afc8 <_Balloc+0x68>
 800af98:	2101      	movs	r1, #1
 800af9a:	fa01 f605 	lsl.w	r6, r1, r5
 800af9e:	1d72      	adds	r2, r6, #5
 800afa0:	0092      	lsls	r2, r2, #2
 800afa2:	4620      	mov	r0, r4
 800afa4:	f000 fb60 	bl	800b668 <_calloc_r>
 800afa8:	b160      	cbz	r0, 800afc4 <_Balloc+0x64>
 800afaa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800afae:	e00e      	b.n	800afce <_Balloc+0x6e>
 800afb0:	2221      	movs	r2, #33	; 0x21
 800afb2:	2104      	movs	r1, #4
 800afb4:	4620      	mov	r0, r4
 800afb6:	f000 fb57 	bl	800b668 <_calloc_r>
 800afba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800afbc:	60f0      	str	r0, [r6, #12]
 800afbe:	68db      	ldr	r3, [r3, #12]
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	d1e4      	bne.n	800af8e <_Balloc+0x2e>
 800afc4:	2000      	movs	r0, #0
 800afc6:	bd70      	pop	{r4, r5, r6, pc}
 800afc8:	6802      	ldr	r2, [r0, #0]
 800afca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800afce:	2300      	movs	r3, #0
 800afd0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800afd4:	e7f7      	b.n	800afc6 <_Balloc+0x66>
 800afd6:	bf00      	nop
 800afd8:	0800c7ad 	.word	0x0800c7ad
 800afdc:	0800c830 	.word	0x0800c830

0800afe0 <_Bfree>:
 800afe0:	b570      	push	{r4, r5, r6, lr}
 800afe2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800afe4:	4605      	mov	r5, r0
 800afe6:	460c      	mov	r4, r1
 800afe8:	b976      	cbnz	r6, 800b008 <_Bfree+0x28>
 800afea:	2010      	movs	r0, #16
 800afec:	f7ff ffa2 	bl	800af34 <malloc>
 800aff0:	4602      	mov	r2, r0
 800aff2:	6268      	str	r0, [r5, #36]	; 0x24
 800aff4:	b920      	cbnz	r0, 800b000 <_Bfree+0x20>
 800aff6:	4b09      	ldr	r3, [pc, #36]	; (800b01c <_Bfree+0x3c>)
 800aff8:	4809      	ldr	r0, [pc, #36]	; (800b020 <_Bfree+0x40>)
 800affa:	218a      	movs	r1, #138	; 0x8a
 800affc:	f000 fd96 	bl	800bb2c <__assert_func>
 800b000:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b004:	6006      	str	r6, [r0, #0]
 800b006:	60c6      	str	r6, [r0, #12]
 800b008:	b13c      	cbz	r4, 800b01a <_Bfree+0x3a>
 800b00a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b00c:	6862      	ldr	r2, [r4, #4]
 800b00e:	68db      	ldr	r3, [r3, #12]
 800b010:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b014:	6021      	str	r1, [r4, #0]
 800b016:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b01a:	bd70      	pop	{r4, r5, r6, pc}
 800b01c:	0800c7ad 	.word	0x0800c7ad
 800b020:	0800c830 	.word	0x0800c830

0800b024 <__multadd>:
 800b024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b028:	690d      	ldr	r5, [r1, #16]
 800b02a:	4607      	mov	r7, r0
 800b02c:	460c      	mov	r4, r1
 800b02e:	461e      	mov	r6, r3
 800b030:	f101 0c14 	add.w	ip, r1, #20
 800b034:	2000      	movs	r0, #0
 800b036:	f8dc 3000 	ldr.w	r3, [ip]
 800b03a:	b299      	uxth	r1, r3
 800b03c:	fb02 6101 	mla	r1, r2, r1, r6
 800b040:	0c1e      	lsrs	r6, r3, #16
 800b042:	0c0b      	lsrs	r3, r1, #16
 800b044:	fb02 3306 	mla	r3, r2, r6, r3
 800b048:	b289      	uxth	r1, r1
 800b04a:	3001      	adds	r0, #1
 800b04c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b050:	4285      	cmp	r5, r0
 800b052:	f84c 1b04 	str.w	r1, [ip], #4
 800b056:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b05a:	dcec      	bgt.n	800b036 <__multadd+0x12>
 800b05c:	b30e      	cbz	r6, 800b0a2 <__multadd+0x7e>
 800b05e:	68a3      	ldr	r3, [r4, #8]
 800b060:	42ab      	cmp	r3, r5
 800b062:	dc19      	bgt.n	800b098 <__multadd+0x74>
 800b064:	6861      	ldr	r1, [r4, #4]
 800b066:	4638      	mov	r0, r7
 800b068:	3101      	adds	r1, #1
 800b06a:	f7ff ff79 	bl	800af60 <_Balloc>
 800b06e:	4680      	mov	r8, r0
 800b070:	b928      	cbnz	r0, 800b07e <__multadd+0x5a>
 800b072:	4602      	mov	r2, r0
 800b074:	4b0c      	ldr	r3, [pc, #48]	; (800b0a8 <__multadd+0x84>)
 800b076:	480d      	ldr	r0, [pc, #52]	; (800b0ac <__multadd+0x88>)
 800b078:	21b5      	movs	r1, #181	; 0xb5
 800b07a:	f000 fd57 	bl	800bb2c <__assert_func>
 800b07e:	6922      	ldr	r2, [r4, #16]
 800b080:	3202      	adds	r2, #2
 800b082:	f104 010c 	add.w	r1, r4, #12
 800b086:	0092      	lsls	r2, r2, #2
 800b088:	300c      	adds	r0, #12
 800b08a:	f7ff ff5b 	bl	800af44 <memcpy>
 800b08e:	4621      	mov	r1, r4
 800b090:	4638      	mov	r0, r7
 800b092:	f7ff ffa5 	bl	800afe0 <_Bfree>
 800b096:	4644      	mov	r4, r8
 800b098:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b09c:	3501      	adds	r5, #1
 800b09e:	615e      	str	r6, [r3, #20]
 800b0a0:	6125      	str	r5, [r4, #16]
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0a8:	0800c81f 	.word	0x0800c81f
 800b0ac:	0800c830 	.word	0x0800c830

0800b0b0 <__hi0bits>:
 800b0b0:	0c03      	lsrs	r3, r0, #16
 800b0b2:	041b      	lsls	r3, r3, #16
 800b0b4:	b9d3      	cbnz	r3, 800b0ec <__hi0bits+0x3c>
 800b0b6:	0400      	lsls	r0, r0, #16
 800b0b8:	2310      	movs	r3, #16
 800b0ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b0be:	bf04      	itt	eq
 800b0c0:	0200      	lsleq	r0, r0, #8
 800b0c2:	3308      	addeq	r3, #8
 800b0c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b0c8:	bf04      	itt	eq
 800b0ca:	0100      	lsleq	r0, r0, #4
 800b0cc:	3304      	addeq	r3, #4
 800b0ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0d2:	bf04      	itt	eq
 800b0d4:	0080      	lsleq	r0, r0, #2
 800b0d6:	3302      	addeq	r3, #2
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	db05      	blt.n	800b0e8 <__hi0bits+0x38>
 800b0dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0e0:	f103 0301 	add.w	r3, r3, #1
 800b0e4:	bf08      	it	eq
 800b0e6:	2320      	moveq	r3, #32
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	4770      	bx	lr
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	e7e4      	b.n	800b0ba <__hi0bits+0xa>

0800b0f0 <__lo0bits>:
 800b0f0:	6803      	ldr	r3, [r0, #0]
 800b0f2:	f013 0207 	ands.w	r2, r3, #7
 800b0f6:	4601      	mov	r1, r0
 800b0f8:	d00b      	beq.n	800b112 <__lo0bits+0x22>
 800b0fa:	07da      	lsls	r2, r3, #31
 800b0fc:	d423      	bmi.n	800b146 <__lo0bits+0x56>
 800b0fe:	0798      	lsls	r0, r3, #30
 800b100:	bf49      	itett	mi
 800b102:	085b      	lsrmi	r3, r3, #1
 800b104:	089b      	lsrpl	r3, r3, #2
 800b106:	2001      	movmi	r0, #1
 800b108:	600b      	strmi	r3, [r1, #0]
 800b10a:	bf5c      	itt	pl
 800b10c:	600b      	strpl	r3, [r1, #0]
 800b10e:	2002      	movpl	r0, #2
 800b110:	4770      	bx	lr
 800b112:	b298      	uxth	r0, r3
 800b114:	b9a8      	cbnz	r0, 800b142 <__lo0bits+0x52>
 800b116:	0c1b      	lsrs	r3, r3, #16
 800b118:	2010      	movs	r0, #16
 800b11a:	b2da      	uxtb	r2, r3
 800b11c:	b90a      	cbnz	r2, 800b122 <__lo0bits+0x32>
 800b11e:	3008      	adds	r0, #8
 800b120:	0a1b      	lsrs	r3, r3, #8
 800b122:	071a      	lsls	r2, r3, #28
 800b124:	bf04      	itt	eq
 800b126:	091b      	lsreq	r3, r3, #4
 800b128:	3004      	addeq	r0, #4
 800b12a:	079a      	lsls	r2, r3, #30
 800b12c:	bf04      	itt	eq
 800b12e:	089b      	lsreq	r3, r3, #2
 800b130:	3002      	addeq	r0, #2
 800b132:	07da      	lsls	r2, r3, #31
 800b134:	d403      	bmi.n	800b13e <__lo0bits+0x4e>
 800b136:	085b      	lsrs	r3, r3, #1
 800b138:	f100 0001 	add.w	r0, r0, #1
 800b13c:	d005      	beq.n	800b14a <__lo0bits+0x5a>
 800b13e:	600b      	str	r3, [r1, #0]
 800b140:	4770      	bx	lr
 800b142:	4610      	mov	r0, r2
 800b144:	e7e9      	b.n	800b11a <__lo0bits+0x2a>
 800b146:	2000      	movs	r0, #0
 800b148:	4770      	bx	lr
 800b14a:	2020      	movs	r0, #32
 800b14c:	4770      	bx	lr
	...

0800b150 <__i2b>:
 800b150:	b510      	push	{r4, lr}
 800b152:	460c      	mov	r4, r1
 800b154:	2101      	movs	r1, #1
 800b156:	f7ff ff03 	bl	800af60 <_Balloc>
 800b15a:	4602      	mov	r2, r0
 800b15c:	b928      	cbnz	r0, 800b16a <__i2b+0x1a>
 800b15e:	4b05      	ldr	r3, [pc, #20]	; (800b174 <__i2b+0x24>)
 800b160:	4805      	ldr	r0, [pc, #20]	; (800b178 <__i2b+0x28>)
 800b162:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b166:	f000 fce1 	bl	800bb2c <__assert_func>
 800b16a:	2301      	movs	r3, #1
 800b16c:	6144      	str	r4, [r0, #20]
 800b16e:	6103      	str	r3, [r0, #16]
 800b170:	bd10      	pop	{r4, pc}
 800b172:	bf00      	nop
 800b174:	0800c81f 	.word	0x0800c81f
 800b178:	0800c830 	.word	0x0800c830

0800b17c <__multiply>:
 800b17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b180:	4691      	mov	r9, r2
 800b182:	690a      	ldr	r2, [r1, #16]
 800b184:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b188:	429a      	cmp	r2, r3
 800b18a:	bfb8      	it	lt
 800b18c:	460b      	movlt	r3, r1
 800b18e:	460c      	mov	r4, r1
 800b190:	bfbc      	itt	lt
 800b192:	464c      	movlt	r4, r9
 800b194:	4699      	movlt	r9, r3
 800b196:	6927      	ldr	r7, [r4, #16]
 800b198:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b19c:	68a3      	ldr	r3, [r4, #8]
 800b19e:	6861      	ldr	r1, [r4, #4]
 800b1a0:	eb07 060a 	add.w	r6, r7, sl
 800b1a4:	42b3      	cmp	r3, r6
 800b1a6:	b085      	sub	sp, #20
 800b1a8:	bfb8      	it	lt
 800b1aa:	3101      	addlt	r1, #1
 800b1ac:	f7ff fed8 	bl	800af60 <_Balloc>
 800b1b0:	b930      	cbnz	r0, 800b1c0 <__multiply+0x44>
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	4b44      	ldr	r3, [pc, #272]	; (800b2c8 <__multiply+0x14c>)
 800b1b6:	4845      	ldr	r0, [pc, #276]	; (800b2cc <__multiply+0x150>)
 800b1b8:	f240 115d 	movw	r1, #349	; 0x15d
 800b1bc:	f000 fcb6 	bl	800bb2c <__assert_func>
 800b1c0:	f100 0514 	add.w	r5, r0, #20
 800b1c4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1c8:	462b      	mov	r3, r5
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	4543      	cmp	r3, r8
 800b1ce:	d321      	bcc.n	800b214 <__multiply+0x98>
 800b1d0:	f104 0314 	add.w	r3, r4, #20
 800b1d4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b1d8:	f109 0314 	add.w	r3, r9, #20
 800b1dc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b1e0:	9202      	str	r2, [sp, #8]
 800b1e2:	1b3a      	subs	r2, r7, r4
 800b1e4:	3a15      	subs	r2, #21
 800b1e6:	f022 0203 	bic.w	r2, r2, #3
 800b1ea:	3204      	adds	r2, #4
 800b1ec:	f104 0115 	add.w	r1, r4, #21
 800b1f0:	428f      	cmp	r7, r1
 800b1f2:	bf38      	it	cc
 800b1f4:	2204      	movcc	r2, #4
 800b1f6:	9201      	str	r2, [sp, #4]
 800b1f8:	9a02      	ldr	r2, [sp, #8]
 800b1fa:	9303      	str	r3, [sp, #12]
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d80c      	bhi.n	800b21a <__multiply+0x9e>
 800b200:	2e00      	cmp	r6, #0
 800b202:	dd03      	ble.n	800b20c <__multiply+0x90>
 800b204:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d05a      	beq.n	800b2c2 <__multiply+0x146>
 800b20c:	6106      	str	r6, [r0, #16]
 800b20e:	b005      	add	sp, #20
 800b210:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b214:	f843 2b04 	str.w	r2, [r3], #4
 800b218:	e7d8      	b.n	800b1cc <__multiply+0x50>
 800b21a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b21e:	f1ba 0f00 	cmp.w	sl, #0
 800b222:	d024      	beq.n	800b26e <__multiply+0xf2>
 800b224:	f104 0e14 	add.w	lr, r4, #20
 800b228:	46a9      	mov	r9, r5
 800b22a:	f04f 0c00 	mov.w	ip, #0
 800b22e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b232:	f8d9 1000 	ldr.w	r1, [r9]
 800b236:	fa1f fb82 	uxth.w	fp, r2
 800b23a:	b289      	uxth	r1, r1
 800b23c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b240:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b244:	f8d9 2000 	ldr.w	r2, [r9]
 800b248:	4461      	add	r1, ip
 800b24a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b24e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b252:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b256:	b289      	uxth	r1, r1
 800b258:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b25c:	4577      	cmp	r7, lr
 800b25e:	f849 1b04 	str.w	r1, [r9], #4
 800b262:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b266:	d8e2      	bhi.n	800b22e <__multiply+0xb2>
 800b268:	9a01      	ldr	r2, [sp, #4]
 800b26a:	f845 c002 	str.w	ip, [r5, r2]
 800b26e:	9a03      	ldr	r2, [sp, #12]
 800b270:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b274:	3304      	adds	r3, #4
 800b276:	f1b9 0f00 	cmp.w	r9, #0
 800b27a:	d020      	beq.n	800b2be <__multiply+0x142>
 800b27c:	6829      	ldr	r1, [r5, #0]
 800b27e:	f104 0c14 	add.w	ip, r4, #20
 800b282:	46ae      	mov	lr, r5
 800b284:	f04f 0a00 	mov.w	sl, #0
 800b288:	f8bc b000 	ldrh.w	fp, [ip]
 800b28c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b290:	fb09 220b 	mla	r2, r9, fp, r2
 800b294:	4492      	add	sl, r2
 800b296:	b289      	uxth	r1, r1
 800b298:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b29c:	f84e 1b04 	str.w	r1, [lr], #4
 800b2a0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b2a4:	f8be 1000 	ldrh.w	r1, [lr]
 800b2a8:	0c12      	lsrs	r2, r2, #16
 800b2aa:	fb09 1102 	mla	r1, r9, r2, r1
 800b2ae:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b2b2:	4567      	cmp	r7, ip
 800b2b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b2b8:	d8e6      	bhi.n	800b288 <__multiply+0x10c>
 800b2ba:	9a01      	ldr	r2, [sp, #4]
 800b2bc:	50a9      	str	r1, [r5, r2]
 800b2be:	3504      	adds	r5, #4
 800b2c0:	e79a      	b.n	800b1f8 <__multiply+0x7c>
 800b2c2:	3e01      	subs	r6, #1
 800b2c4:	e79c      	b.n	800b200 <__multiply+0x84>
 800b2c6:	bf00      	nop
 800b2c8:	0800c81f 	.word	0x0800c81f
 800b2cc:	0800c830 	.word	0x0800c830

0800b2d0 <__pow5mult>:
 800b2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2d4:	4615      	mov	r5, r2
 800b2d6:	f012 0203 	ands.w	r2, r2, #3
 800b2da:	4606      	mov	r6, r0
 800b2dc:	460f      	mov	r7, r1
 800b2de:	d007      	beq.n	800b2f0 <__pow5mult+0x20>
 800b2e0:	4c25      	ldr	r4, [pc, #148]	; (800b378 <__pow5mult+0xa8>)
 800b2e2:	3a01      	subs	r2, #1
 800b2e4:	2300      	movs	r3, #0
 800b2e6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2ea:	f7ff fe9b 	bl	800b024 <__multadd>
 800b2ee:	4607      	mov	r7, r0
 800b2f0:	10ad      	asrs	r5, r5, #2
 800b2f2:	d03d      	beq.n	800b370 <__pow5mult+0xa0>
 800b2f4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800b2f6:	b97c      	cbnz	r4, 800b318 <__pow5mult+0x48>
 800b2f8:	2010      	movs	r0, #16
 800b2fa:	f7ff fe1b 	bl	800af34 <malloc>
 800b2fe:	4602      	mov	r2, r0
 800b300:	6270      	str	r0, [r6, #36]	; 0x24
 800b302:	b928      	cbnz	r0, 800b310 <__pow5mult+0x40>
 800b304:	4b1d      	ldr	r3, [pc, #116]	; (800b37c <__pow5mult+0xac>)
 800b306:	481e      	ldr	r0, [pc, #120]	; (800b380 <__pow5mult+0xb0>)
 800b308:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800b30c:	f000 fc0e 	bl	800bb2c <__assert_func>
 800b310:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b314:	6004      	str	r4, [r0, #0]
 800b316:	60c4      	str	r4, [r0, #12]
 800b318:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800b31c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b320:	b94c      	cbnz	r4, 800b336 <__pow5mult+0x66>
 800b322:	f240 2171 	movw	r1, #625	; 0x271
 800b326:	4630      	mov	r0, r6
 800b328:	f7ff ff12 	bl	800b150 <__i2b>
 800b32c:	2300      	movs	r3, #0
 800b32e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b332:	4604      	mov	r4, r0
 800b334:	6003      	str	r3, [r0, #0]
 800b336:	f04f 0900 	mov.w	r9, #0
 800b33a:	07eb      	lsls	r3, r5, #31
 800b33c:	d50a      	bpl.n	800b354 <__pow5mult+0x84>
 800b33e:	4639      	mov	r1, r7
 800b340:	4622      	mov	r2, r4
 800b342:	4630      	mov	r0, r6
 800b344:	f7ff ff1a 	bl	800b17c <__multiply>
 800b348:	4639      	mov	r1, r7
 800b34a:	4680      	mov	r8, r0
 800b34c:	4630      	mov	r0, r6
 800b34e:	f7ff fe47 	bl	800afe0 <_Bfree>
 800b352:	4647      	mov	r7, r8
 800b354:	106d      	asrs	r5, r5, #1
 800b356:	d00b      	beq.n	800b370 <__pow5mult+0xa0>
 800b358:	6820      	ldr	r0, [r4, #0]
 800b35a:	b938      	cbnz	r0, 800b36c <__pow5mult+0x9c>
 800b35c:	4622      	mov	r2, r4
 800b35e:	4621      	mov	r1, r4
 800b360:	4630      	mov	r0, r6
 800b362:	f7ff ff0b 	bl	800b17c <__multiply>
 800b366:	6020      	str	r0, [r4, #0]
 800b368:	f8c0 9000 	str.w	r9, [r0]
 800b36c:	4604      	mov	r4, r0
 800b36e:	e7e4      	b.n	800b33a <__pow5mult+0x6a>
 800b370:	4638      	mov	r0, r7
 800b372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b376:	bf00      	nop
 800b378:	0800c980 	.word	0x0800c980
 800b37c:	0800c7ad 	.word	0x0800c7ad
 800b380:	0800c830 	.word	0x0800c830

0800b384 <__lshift>:
 800b384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b388:	460c      	mov	r4, r1
 800b38a:	6849      	ldr	r1, [r1, #4]
 800b38c:	6923      	ldr	r3, [r4, #16]
 800b38e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b392:	68a3      	ldr	r3, [r4, #8]
 800b394:	4607      	mov	r7, r0
 800b396:	4691      	mov	r9, r2
 800b398:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b39c:	f108 0601 	add.w	r6, r8, #1
 800b3a0:	42b3      	cmp	r3, r6
 800b3a2:	db0b      	blt.n	800b3bc <__lshift+0x38>
 800b3a4:	4638      	mov	r0, r7
 800b3a6:	f7ff fddb 	bl	800af60 <_Balloc>
 800b3aa:	4605      	mov	r5, r0
 800b3ac:	b948      	cbnz	r0, 800b3c2 <__lshift+0x3e>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	4b2a      	ldr	r3, [pc, #168]	; (800b45c <__lshift+0xd8>)
 800b3b2:	482b      	ldr	r0, [pc, #172]	; (800b460 <__lshift+0xdc>)
 800b3b4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800b3b8:	f000 fbb8 	bl	800bb2c <__assert_func>
 800b3bc:	3101      	adds	r1, #1
 800b3be:	005b      	lsls	r3, r3, #1
 800b3c0:	e7ee      	b.n	800b3a0 <__lshift+0x1c>
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	f100 0114 	add.w	r1, r0, #20
 800b3c8:	f100 0210 	add.w	r2, r0, #16
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	4553      	cmp	r3, sl
 800b3d0:	db37      	blt.n	800b442 <__lshift+0xbe>
 800b3d2:	6920      	ldr	r0, [r4, #16]
 800b3d4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3d8:	f104 0314 	add.w	r3, r4, #20
 800b3dc:	f019 091f 	ands.w	r9, r9, #31
 800b3e0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3e4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800b3e8:	d02f      	beq.n	800b44a <__lshift+0xc6>
 800b3ea:	f1c9 0e20 	rsb	lr, r9, #32
 800b3ee:	468a      	mov	sl, r1
 800b3f0:	f04f 0c00 	mov.w	ip, #0
 800b3f4:	681a      	ldr	r2, [r3, #0]
 800b3f6:	fa02 f209 	lsl.w	r2, r2, r9
 800b3fa:	ea42 020c 	orr.w	r2, r2, ip
 800b3fe:	f84a 2b04 	str.w	r2, [sl], #4
 800b402:	f853 2b04 	ldr.w	r2, [r3], #4
 800b406:	4298      	cmp	r0, r3
 800b408:	fa22 fc0e 	lsr.w	ip, r2, lr
 800b40c:	d8f2      	bhi.n	800b3f4 <__lshift+0x70>
 800b40e:	1b03      	subs	r3, r0, r4
 800b410:	3b15      	subs	r3, #21
 800b412:	f023 0303 	bic.w	r3, r3, #3
 800b416:	3304      	adds	r3, #4
 800b418:	f104 0215 	add.w	r2, r4, #21
 800b41c:	4290      	cmp	r0, r2
 800b41e:	bf38      	it	cc
 800b420:	2304      	movcc	r3, #4
 800b422:	f841 c003 	str.w	ip, [r1, r3]
 800b426:	f1bc 0f00 	cmp.w	ip, #0
 800b42a:	d001      	beq.n	800b430 <__lshift+0xac>
 800b42c:	f108 0602 	add.w	r6, r8, #2
 800b430:	3e01      	subs	r6, #1
 800b432:	4638      	mov	r0, r7
 800b434:	612e      	str	r6, [r5, #16]
 800b436:	4621      	mov	r1, r4
 800b438:	f7ff fdd2 	bl	800afe0 <_Bfree>
 800b43c:	4628      	mov	r0, r5
 800b43e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b442:	f842 0f04 	str.w	r0, [r2, #4]!
 800b446:	3301      	adds	r3, #1
 800b448:	e7c1      	b.n	800b3ce <__lshift+0x4a>
 800b44a:	3904      	subs	r1, #4
 800b44c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b450:	f841 2f04 	str.w	r2, [r1, #4]!
 800b454:	4298      	cmp	r0, r3
 800b456:	d8f9      	bhi.n	800b44c <__lshift+0xc8>
 800b458:	e7ea      	b.n	800b430 <__lshift+0xac>
 800b45a:	bf00      	nop
 800b45c:	0800c81f 	.word	0x0800c81f
 800b460:	0800c830 	.word	0x0800c830

0800b464 <__mcmp>:
 800b464:	b530      	push	{r4, r5, lr}
 800b466:	6902      	ldr	r2, [r0, #16]
 800b468:	690c      	ldr	r4, [r1, #16]
 800b46a:	1b12      	subs	r2, r2, r4
 800b46c:	d10e      	bne.n	800b48c <__mcmp+0x28>
 800b46e:	f100 0314 	add.w	r3, r0, #20
 800b472:	3114      	adds	r1, #20
 800b474:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b478:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b47c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b480:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b484:	42a5      	cmp	r5, r4
 800b486:	d003      	beq.n	800b490 <__mcmp+0x2c>
 800b488:	d305      	bcc.n	800b496 <__mcmp+0x32>
 800b48a:	2201      	movs	r2, #1
 800b48c:	4610      	mov	r0, r2
 800b48e:	bd30      	pop	{r4, r5, pc}
 800b490:	4283      	cmp	r3, r0
 800b492:	d3f3      	bcc.n	800b47c <__mcmp+0x18>
 800b494:	e7fa      	b.n	800b48c <__mcmp+0x28>
 800b496:	f04f 32ff 	mov.w	r2, #4294967295
 800b49a:	e7f7      	b.n	800b48c <__mcmp+0x28>

0800b49c <__mdiff>:
 800b49c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4a0:	460c      	mov	r4, r1
 800b4a2:	4606      	mov	r6, r0
 800b4a4:	4611      	mov	r1, r2
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	4690      	mov	r8, r2
 800b4aa:	f7ff ffdb 	bl	800b464 <__mcmp>
 800b4ae:	1e05      	subs	r5, r0, #0
 800b4b0:	d110      	bne.n	800b4d4 <__mdiff+0x38>
 800b4b2:	4629      	mov	r1, r5
 800b4b4:	4630      	mov	r0, r6
 800b4b6:	f7ff fd53 	bl	800af60 <_Balloc>
 800b4ba:	b930      	cbnz	r0, 800b4ca <__mdiff+0x2e>
 800b4bc:	4b3a      	ldr	r3, [pc, #232]	; (800b5a8 <__mdiff+0x10c>)
 800b4be:	4602      	mov	r2, r0
 800b4c0:	f240 2132 	movw	r1, #562	; 0x232
 800b4c4:	4839      	ldr	r0, [pc, #228]	; (800b5ac <__mdiff+0x110>)
 800b4c6:	f000 fb31 	bl	800bb2c <__assert_func>
 800b4ca:	2301      	movs	r3, #1
 800b4cc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4d4:	bfa4      	itt	ge
 800b4d6:	4643      	movge	r3, r8
 800b4d8:	46a0      	movge	r8, r4
 800b4da:	4630      	mov	r0, r6
 800b4dc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4e0:	bfa6      	itte	ge
 800b4e2:	461c      	movge	r4, r3
 800b4e4:	2500      	movge	r5, #0
 800b4e6:	2501      	movlt	r5, #1
 800b4e8:	f7ff fd3a 	bl	800af60 <_Balloc>
 800b4ec:	b920      	cbnz	r0, 800b4f8 <__mdiff+0x5c>
 800b4ee:	4b2e      	ldr	r3, [pc, #184]	; (800b5a8 <__mdiff+0x10c>)
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	f44f 7110 	mov.w	r1, #576	; 0x240
 800b4f6:	e7e5      	b.n	800b4c4 <__mdiff+0x28>
 800b4f8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b4fc:	6926      	ldr	r6, [r4, #16]
 800b4fe:	60c5      	str	r5, [r0, #12]
 800b500:	f104 0914 	add.w	r9, r4, #20
 800b504:	f108 0514 	add.w	r5, r8, #20
 800b508:	f100 0e14 	add.w	lr, r0, #20
 800b50c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b510:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b514:	f108 0210 	add.w	r2, r8, #16
 800b518:	46f2      	mov	sl, lr
 800b51a:	2100      	movs	r1, #0
 800b51c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b520:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b524:	fa1f f883 	uxth.w	r8, r3
 800b528:	fa11 f18b 	uxtah	r1, r1, fp
 800b52c:	0c1b      	lsrs	r3, r3, #16
 800b52e:	eba1 0808 	sub.w	r8, r1, r8
 800b532:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b536:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b53a:	fa1f f888 	uxth.w	r8, r8
 800b53e:	1419      	asrs	r1, r3, #16
 800b540:	454e      	cmp	r6, r9
 800b542:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b546:	f84a 3b04 	str.w	r3, [sl], #4
 800b54a:	d8e7      	bhi.n	800b51c <__mdiff+0x80>
 800b54c:	1b33      	subs	r3, r6, r4
 800b54e:	3b15      	subs	r3, #21
 800b550:	f023 0303 	bic.w	r3, r3, #3
 800b554:	3304      	adds	r3, #4
 800b556:	3415      	adds	r4, #21
 800b558:	42a6      	cmp	r6, r4
 800b55a:	bf38      	it	cc
 800b55c:	2304      	movcc	r3, #4
 800b55e:	441d      	add	r5, r3
 800b560:	4473      	add	r3, lr
 800b562:	469e      	mov	lr, r3
 800b564:	462e      	mov	r6, r5
 800b566:	4566      	cmp	r6, ip
 800b568:	d30e      	bcc.n	800b588 <__mdiff+0xec>
 800b56a:	f10c 0203 	add.w	r2, ip, #3
 800b56e:	1b52      	subs	r2, r2, r5
 800b570:	f022 0203 	bic.w	r2, r2, #3
 800b574:	3d03      	subs	r5, #3
 800b576:	45ac      	cmp	ip, r5
 800b578:	bf38      	it	cc
 800b57a:	2200      	movcc	r2, #0
 800b57c:	441a      	add	r2, r3
 800b57e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b582:	b17b      	cbz	r3, 800b5a4 <__mdiff+0x108>
 800b584:	6107      	str	r7, [r0, #16]
 800b586:	e7a3      	b.n	800b4d0 <__mdiff+0x34>
 800b588:	f856 8b04 	ldr.w	r8, [r6], #4
 800b58c:	fa11 f288 	uxtah	r2, r1, r8
 800b590:	1414      	asrs	r4, r2, #16
 800b592:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b596:	b292      	uxth	r2, r2
 800b598:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b59c:	f84e 2b04 	str.w	r2, [lr], #4
 800b5a0:	1421      	asrs	r1, r4, #16
 800b5a2:	e7e0      	b.n	800b566 <__mdiff+0xca>
 800b5a4:	3f01      	subs	r7, #1
 800b5a6:	e7ea      	b.n	800b57e <__mdiff+0xe2>
 800b5a8:	0800c81f 	.word	0x0800c81f
 800b5ac:	0800c830 	.word	0x0800c830

0800b5b0 <__d2b>:
 800b5b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5b4:	4689      	mov	r9, r1
 800b5b6:	2101      	movs	r1, #1
 800b5b8:	ec57 6b10 	vmov	r6, r7, d0
 800b5bc:	4690      	mov	r8, r2
 800b5be:	f7ff fccf 	bl	800af60 <_Balloc>
 800b5c2:	4604      	mov	r4, r0
 800b5c4:	b930      	cbnz	r0, 800b5d4 <__d2b+0x24>
 800b5c6:	4602      	mov	r2, r0
 800b5c8:	4b25      	ldr	r3, [pc, #148]	; (800b660 <__d2b+0xb0>)
 800b5ca:	4826      	ldr	r0, [pc, #152]	; (800b664 <__d2b+0xb4>)
 800b5cc:	f240 310a 	movw	r1, #778	; 0x30a
 800b5d0:	f000 faac 	bl	800bb2c <__assert_func>
 800b5d4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b5d8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b5dc:	bb35      	cbnz	r5, 800b62c <__d2b+0x7c>
 800b5de:	2e00      	cmp	r6, #0
 800b5e0:	9301      	str	r3, [sp, #4]
 800b5e2:	d028      	beq.n	800b636 <__d2b+0x86>
 800b5e4:	4668      	mov	r0, sp
 800b5e6:	9600      	str	r6, [sp, #0]
 800b5e8:	f7ff fd82 	bl	800b0f0 <__lo0bits>
 800b5ec:	9900      	ldr	r1, [sp, #0]
 800b5ee:	b300      	cbz	r0, 800b632 <__d2b+0x82>
 800b5f0:	9a01      	ldr	r2, [sp, #4]
 800b5f2:	f1c0 0320 	rsb	r3, r0, #32
 800b5f6:	fa02 f303 	lsl.w	r3, r2, r3
 800b5fa:	430b      	orrs	r3, r1
 800b5fc:	40c2      	lsrs	r2, r0
 800b5fe:	6163      	str	r3, [r4, #20]
 800b600:	9201      	str	r2, [sp, #4]
 800b602:	9b01      	ldr	r3, [sp, #4]
 800b604:	61a3      	str	r3, [r4, #24]
 800b606:	2b00      	cmp	r3, #0
 800b608:	bf14      	ite	ne
 800b60a:	2202      	movne	r2, #2
 800b60c:	2201      	moveq	r2, #1
 800b60e:	6122      	str	r2, [r4, #16]
 800b610:	b1d5      	cbz	r5, 800b648 <__d2b+0x98>
 800b612:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b616:	4405      	add	r5, r0
 800b618:	f8c9 5000 	str.w	r5, [r9]
 800b61c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b620:	f8c8 0000 	str.w	r0, [r8]
 800b624:	4620      	mov	r0, r4
 800b626:	b003      	add	sp, #12
 800b628:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b62c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b630:	e7d5      	b.n	800b5de <__d2b+0x2e>
 800b632:	6161      	str	r1, [r4, #20]
 800b634:	e7e5      	b.n	800b602 <__d2b+0x52>
 800b636:	a801      	add	r0, sp, #4
 800b638:	f7ff fd5a 	bl	800b0f0 <__lo0bits>
 800b63c:	9b01      	ldr	r3, [sp, #4]
 800b63e:	6163      	str	r3, [r4, #20]
 800b640:	2201      	movs	r2, #1
 800b642:	6122      	str	r2, [r4, #16]
 800b644:	3020      	adds	r0, #32
 800b646:	e7e3      	b.n	800b610 <__d2b+0x60>
 800b648:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b64c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b650:	f8c9 0000 	str.w	r0, [r9]
 800b654:	6918      	ldr	r0, [r3, #16]
 800b656:	f7ff fd2b 	bl	800b0b0 <__hi0bits>
 800b65a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b65e:	e7df      	b.n	800b620 <__d2b+0x70>
 800b660:	0800c81f 	.word	0x0800c81f
 800b664:	0800c830 	.word	0x0800c830

0800b668 <_calloc_r>:
 800b668:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b66a:	fba1 2402 	umull	r2, r4, r1, r2
 800b66e:	b94c      	cbnz	r4, 800b684 <_calloc_r+0x1c>
 800b670:	4611      	mov	r1, r2
 800b672:	9201      	str	r2, [sp, #4]
 800b674:	f000 f87a 	bl	800b76c <_malloc_r>
 800b678:	9a01      	ldr	r2, [sp, #4]
 800b67a:	4605      	mov	r5, r0
 800b67c:	b930      	cbnz	r0, 800b68c <_calloc_r+0x24>
 800b67e:	4628      	mov	r0, r5
 800b680:	b003      	add	sp, #12
 800b682:	bd30      	pop	{r4, r5, pc}
 800b684:	220c      	movs	r2, #12
 800b686:	6002      	str	r2, [r0, #0]
 800b688:	2500      	movs	r5, #0
 800b68a:	e7f8      	b.n	800b67e <_calloc_r+0x16>
 800b68c:	4621      	mov	r1, r4
 800b68e:	f7fe f93f 	bl	8009910 <memset>
 800b692:	e7f4      	b.n	800b67e <_calloc_r+0x16>

0800b694 <_free_r>:
 800b694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b696:	2900      	cmp	r1, #0
 800b698:	d044      	beq.n	800b724 <_free_r+0x90>
 800b69a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b69e:	9001      	str	r0, [sp, #4]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	f1a1 0404 	sub.w	r4, r1, #4
 800b6a6:	bfb8      	it	lt
 800b6a8:	18e4      	addlt	r4, r4, r3
 800b6aa:	f000 fa9b 	bl	800bbe4 <__malloc_lock>
 800b6ae:	4a1e      	ldr	r2, [pc, #120]	; (800b728 <_free_r+0x94>)
 800b6b0:	9801      	ldr	r0, [sp, #4]
 800b6b2:	6813      	ldr	r3, [r2, #0]
 800b6b4:	b933      	cbnz	r3, 800b6c4 <_free_r+0x30>
 800b6b6:	6063      	str	r3, [r4, #4]
 800b6b8:	6014      	str	r4, [r2, #0]
 800b6ba:	b003      	add	sp, #12
 800b6bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b6c0:	f000 ba96 	b.w	800bbf0 <__malloc_unlock>
 800b6c4:	42a3      	cmp	r3, r4
 800b6c6:	d908      	bls.n	800b6da <_free_r+0x46>
 800b6c8:	6825      	ldr	r5, [r4, #0]
 800b6ca:	1961      	adds	r1, r4, r5
 800b6cc:	428b      	cmp	r3, r1
 800b6ce:	bf01      	itttt	eq
 800b6d0:	6819      	ldreq	r1, [r3, #0]
 800b6d2:	685b      	ldreq	r3, [r3, #4]
 800b6d4:	1949      	addeq	r1, r1, r5
 800b6d6:	6021      	streq	r1, [r4, #0]
 800b6d8:	e7ed      	b.n	800b6b6 <_free_r+0x22>
 800b6da:	461a      	mov	r2, r3
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	b10b      	cbz	r3, 800b6e4 <_free_r+0x50>
 800b6e0:	42a3      	cmp	r3, r4
 800b6e2:	d9fa      	bls.n	800b6da <_free_r+0x46>
 800b6e4:	6811      	ldr	r1, [r2, #0]
 800b6e6:	1855      	adds	r5, r2, r1
 800b6e8:	42a5      	cmp	r5, r4
 800b6ea:	d10b      	bne.n	800b704 <_free_r+0x70>
 800b6ec:	6824      	ldr	r4, [r4, #0]
 800b6ee:	4421      	add	r1, r4
 800b6f0:	1854      	adds	r4, r2, r1
 800b6f2:	42a3      	cmp	r3, r4
 800b6f4:	6011      	str	r1, [r2, #0]
 800b6f6:	d1e0      	bne.n	800b6ba <_free_r+0x26>
 800b6f8:	681c      	ldr	r4, [r3, #0]
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	6053      	str	r3, [r2, #4]
 800b6fe:	4421      	add	r1, r4
 800b700:	6011      	str	r1, [r2, #0]
 800b702:	e7da      	b.n	800b6ba <_free_r+0x26>
 800b704:	d902      	bls.n	800b70c <_free_r+0x78>
 800b706:	230c      	movs	r3, #12
 800b708:	6003      	str	r3, [r0, #0]
 800b70a:	e7d6      	b.n	800b6ba <_free_r+0x26>
 800b70c:	6825      	ldr	r5, [r4, #0]
 800b70e:	1961      	adds	r1, r4, r5
 800b710:	428b      	cmp	r3, r1
 800b712:	bf04      	itt	eq
 800b714:	6819      	ldreq	r1, [r3, #0]
 800b716:	685b      	ldreq	r3, [r3, #4]
 800b718:	6063      	str	r3, [r4, #4]
 800b71a:	bf04      	itt	eq
 800b71c:	1949      	addeq	r1, r1, r5
 800b71e:	6021      	streq	r1, [r4, #0]
 800b720:	6054      	str	r4, [r2, #4]
 800b722:	e7ca      	b.n	800b6ba <_free_r+0x26>
 800b724:	b003      	add	sp, #12
 800b726:	bd30      	pop	{r4, r5, pc}
 800b728:	200021dc 	.word	0x200021dc

0800b72c <sbrk_aligned>:
 800b72c:	b570      	push	{r4, r5, r6, lr}
 800b72e:	4e0e      	ldr	r6, [pc, #56]	; (800b768 <sbrk_aligned+0x3c>)
 800b730:	460c      	mov	r4, r1
 800b732:	6831      	ldr	r1, [r6, #0]
 800b734:	4605      	mov	r5, r0
 800b736:	b911      	cbnz	r1, 800b73e <sbrk_aligned+0x12>
 800b738:	f000 f9e8 	bl	800bb0c <_sbrk_r>
 800b73c:	6030      	str	r0, [r6, #0]
 800b73e:	4621      	mov	r1, r4
 800b740:	4628      	mov	r0, r5
 800b742:	f000 f9e3 	bl	800bb0c <_sbrk_r>
 800b746:	1c43      	adds	r3, r0, #1
 800b748:	d00a      	beq.n	800b760 <sbrk_aligned+0x34>
 800b74a:	1cc4      	adds	r4, r0, #3
 800b74c:	f024 0403 	bic.w	r4, r4, #3
 800b750:	42a0      	cmp	r0, r4
 800b752:	d007      	beq.n	800b764 <sbrk_aligned+0x38>
 800b754:	1a21      	subs	r1, r4, r0
 800b756:	4628      	mov	r0, r5
 800b758:	f000 f9d8 	bl	800bb0c <_sbrk_r>
 800b75c:	3001      	adds	r0, #1
 800b75e:	d101      	bne.n	800b764 <sbrk_aligned+0x38>
 800b760:	f04f 34ff 	mov.w	r4, #4294967295
 800b764:	4620      	mov	r0, r4
 800b766:	bd70      	pop	{r4, r5, r6, pc}
 800b768:	200021e0 	.word	0x200021e0

0800b76c <_malloc_r>:
 800b76c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b770:	1ccd      	adds	r5, r1, #3
 800b772:	f025 0503 	bic.w	r5, r5, #3
 800b776:	3508      	adds	r5, #8
 800b778:	2d0c      	cmp	r5, #12
 800b77a:	bf38      	it	cc
 800b77c:	250c      	movcc	r5, #12
 800b77e:	2d00      	cmp	r5, #0
 800b780:	4607      	mov	r7, r0
 800b782:	db01      	blt.n	800b788 <_malloc_r+0x1c>
 800b784:	42a9      	cmp	r1, r5
 800b786:	d905      	bls.n	800b794 <_malloc_r+0x28>
 800b788:	230c      	movs	r3, #12
 800b78a:	603b      	str	r3, [r7, #0]
 800b78c:	2600      	movs	r6, #0
 800b78e:	4630      	mov	r0, r6
 800b790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b794:	4e2e      	ldr	r6, [pc, #184]	; (800b850 <_malloc_r+0xe4>)
 800b796:	f000 fa25 	bl	800bbe4 <__malloc_lock>
 800b79a:	6833      	ldr	r3, [r6, #0]
 800b79c:	461c      	mov	r4, r3
 800b79e:	bb34      	cbnz	r4, 800b7ee <_malloc_r+0x82>
 800b7a0:	4629      	mov	r1, r5
 800b7a2:	4638      	mov	r0, r7
 800b7a4:	f7ff ffc2 	bl	800b72c <sbrk_aligned>
 800b7a8:	1c43      	adds	r3, r0, #1
 800b7aa:	4604      	mov	r4, r0
 800b7ac:	d14d      	bne.n	800b84a <_malloc_r+0xde>
 800b7ae:	6834      	ldr	r4, [r6, #0]
 800b7b0:	4626      	mov	r6, r4
 800b7b2:	2e00      	cmp	r6, #0
 800b7b4:	d140      	bne.n	800b838 <_malloc_r+0xcc>
 800b7b6:	6823      	ldr	r3, [r4, #0]
 800b7b8:	4631      	mov	r1, r6
 800b7ba:	4638      	mov	r0, r7
 800b7bc:	eb04 0803 	add.w	r8, r4, r3
 800b7c0:	f000 f9a4 	bl	800bb0c <_sbrk_r>
 800b7c4:	4580      	cmp	r8, r0
 800b7c6:	d13a      	bne.n	800b83e <_malloc_r+0xd2>
 800b7c8:	6821      	ldr	r1, [r4, #0]
 800b7ca:	3503      	adds	r5, #3
 800b7cc:	1a6d      	subs	r5, r5, r1
 800b7ce:	f025 0503 	bic.w	r5, r5, #3
 800b7d2:	3508      	adds	r5, #8
 800b7d4:	2d0c      	cmp	r5, #12
 800b7d6:	bf38      	it	cc
 800b7d8:	250c      	movcc	r5, #12
 800b7da:	4629      	mov	r1, r5
 800b7dc:	4638      	mov	r0, r7
 800b7de:	f7ff ffa5 	bl	800b72c <sbrk_aligned>
 800b7e2:	3001      	adds	r0, #1
 800b7e4:	d02b      	beq.n	800b83e <_malloc_r+0xd2>
 800b7e6:	6823      	ldr	r3, [r4, #0]
 800b7e8:	442b      	add	r3, r5
 800b7ea:	6023      	str	r3, [r4, #0]
 800b7ec:	e00e      	b.n	800b80c <_malloc_r+0xa0>
 800b7ee:	6822      	ldr	r2, [r4, #0]
 800b7f0:	1b52      	subs	r2, r2, r5
 800b7f2:	d41e      	bmi.n	800b832 <_malloc_r+0xc6>
 800b7f4:	2a0b      	cmp	r2, #11
 800b7f6:	d916      	bls.n	800b826 <_malloc_r+0xba>
 800b7f8:	1961      	adds	r1, r4, r5
 800b7fa:	42a3      	cmp	r3, r4
 800b7fc:	6025      	str	r5, [r4, #0]
 800b7fe:	bf18      	it	ne
 800b800:	6059      	strne	r1, [r3, #4]
 800b802:	6863      	ldr	r3, [r4, #4]
 800b804:	bf08      	it	eq
 800b806:	6031      	streq	r1, [r6, #0]
 800b808:	5162      	str	r2, [r4, r5]
 800b80a:	604b      	str	r3, [r1, #4]
 800b80c:	4638      	mov	r0, r7
 800b80e:	f104 060b 	add.w	r6, r4, #11
 800b812:	f000 f9ed 	bl	800bbf0 <__malloc_unlock>
 800b816:	f026 0607 	bic.w	r6, r6, #7
 800b81a:	1d23      	adds	r3, r4, #4
 800b81c:	1af2      	subs	r2, r6, r3
 800b81e:	d0b6      	beq.n	800b78e <_malloc_r+0x22>
 800b820:	1b9b      	subs	r3, r3, r6
 800b822:	50a3      	str	r3, [r4, r2]
 800b824:	e7b3      	b.n	800b78e <_malloc_r+0x22>
 800b826:	6862      	ldr	r2, [r4, #4]
 800b828:	42a3      	cmp	r3, r4
 800b82a:	bf0c      	ite	eq
 800b82c:	6032      	streq	r2, [r6, #0]
 800b82e:	605a      	strne	r2, [r3, #4]
 800b830:	e7ec      	b.n	800b80c <_malloc_r+0xa0>
 800b832:	4623      	mov	r3, r4
 800b834:	6864      	ldr	r4, [r4, #4]
 800b836:	e7b2      	b.n	800b79e <_malloc_r+0x32>
 800b838:	4634      	mov	r4, r6
 800b83a:	6876      	ldr	r6, [r6, #4]
 800b83c:	e7b9      	b.n	800b7b2 <_malloc_r+0x46>
 800b83e:	230c      	movs	r3, #12
 800b840:	603b      	str	r3, [r7, #0]
 800b842:	4638      	mov	r0, r7
 800b844:	f000 f9d4 	bl	800bbf0 <__malloc_unlock>
 800b848:	e7a1      	b.n	800b78e <_malloc_r+0x22>
 800b84a:	6025      	str	r5, [r4, #0]
 800b84c:	e7de      	b.n	800b80c <_malloc_r+0xa0>
 800b84e:	bf00      	nop
 800b850:	200021dc 	.word	0x200021dc

0800b854 <__ssputs_r>:
 800b854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b858:	688e      	ldr	r6, [r1, #8]
 800b85a:	429e      	cmp	r6, r3
 800b85c:	4682      	mov	sl, r0
 800b85e:	460c      	mov	r4, r1
 800b860:	4690      	mov	r8, r2
 800b862:	461f      	mov	r7, r3
 800b864:	d838      	bhi.n	800b8d8 <__ssputs_r+0x84>
 800b866:	898a      	ldrh	r2, [r1, #12]
 800b868:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b86c:	d032      	beq.n	800b8d4 <__ssputs_r+0x80>
 800b86e:	6825      	ldr	r5, [r4, #0]
 800b870:	6909      	ldr	r1, [r1, #16]
 800b872:	eba5 0901 	sub.w	r9, r5, r1
 800b876:	6965      	ldr	r5, [r4, #20]
 800b878:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b87c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b880:	3301      	adds	r3, #1
 800b882:	444b      	add	r3, r9
 800b884:	106d      	asrs	r5, r5, #1
 800b886:	429d      	cmp	r5, r3
 800b888:	bf38      	it	cc
 800b88a:	461d      	movcc	r5, r3
 800b88c:	0553      	lsls	r3, r2, #21
 800b88e:	d531      	bpl.n	800b8f4 <__ssputs_r+0xa0>
 800b890:	4629      	mov	r1, r5
 800b892:	f7ff ff6b 	bl	800b76c <_malloc_r>
 800b896:	4606      	mov	r6, r0
 800b898:	b950      	cbnz	r0, 800b8b0 <__ssputs_r+0x5c>
 800b89a:	230c      	movs	r3, #12
 800b89c:	f8ca 3000 	str.w	r3, [sl]
 800b8a0:	89a3      	ldrh	r3, [r4, #12]
 800b8a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b8a6:	81a3      	strh	r3, [r4, #12]
 800b8a8:	f04f 30ff 	mov.w	r0, #4294967295
 800b8ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b8b0:	6921      	ldr	r1, [r4, #16]
 800b8b2:	464a      	mov	r2, r9
 800b8b4:	f7ff fb46 	bl	800af44 <memcpy>
 800b8b8:	89a3      	ldrh	r3, [r4, #12]
 800b8ba:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b8be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8c2:	81a3      	strh	r3, [r4, #12]
 800b8c4:	6126      	str	r6, [r4, #16]
 800b8c6:	6165      	str	r5, [r4, #20]
 800b8c8:	444e      	add	r6, r9
 800b8ca:	eba5 0509 	sub.w	r5, r5, r9
 800b8ce:	6026      	str	r6, [r4, #0]
 800b8d0:	60a5      	str	r5, [r4, #8]
 800b8d2:	463e      	mov	r6, r7
 800b8d4:	42be      	cmp	r6, r7
 800b8d6:	d900      	bls.n	800b8da <__ssputs_r+0x86>
 800b8d8:	463e      	mov	r6, r7
 800b8da:	6820      	ldr	r0, [r4, #0]
 800b8dc:	4632      	mov	r2, r6
 800b8de:	4641      	mov	r1, r8
 800b8e0:	f000 f966 	bl	800bbb0 <memmove>
 800b8e4:	68a3      	ldr	r3, [r4, #8]
 800b8e6:	1b9b      	subs	r3, r3, r6
 800b8e8:	60a3      	str	r3, [r4, #8]
 800b8ea:	6823      	ldr	r3, [r4, #0]
 800b8ec:	4433      	add	r3, r6
 800b8ee:	6023      	str	r3, [r4, #0]
 800b8f0:	2000      	movs	r0, #0
 800b8f2:	e7db      	b.n	800b8ac <__ssputs_r+0x58>
 800b8f4:	462a      	mov	r2, r5
 800b8f6:	f000 f981 	bl	800bbfc <_realloc_r>
 800b8fa:	4606      	mov	r6, r0
 800b8fc:	2800      	cmp	r0, #0
 800b8fe:	d1e1      	bne.n	800b8c4 <__ssputs_r+0x70>
 800b900:	6921      	ldr	r1, [r4, #16]
 800b902:	4650      	mov	r0, sl
 800b904:	f7ff fec6 	bl	800b694 <_free_r>
 800b908:	e7c7      	b.n	800b89a <__ssputs_r+0x46>
	...

0800b90c <_svfiprintf_r>:
 800b90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b910:	4698      	mov	r8, r3
 800b912:	898b      	ldrh	r3, [r1, #12]
 800b914:	061b      	lsls	r3, r3, #24
 800b916:	b09d      	sub	sp, #116	; 0x74
 800b918:	4607      	mov	r7, r0
 800b91a:	460d      	mov	r5, r1
 800b91c:	4614      	mov	r4, r2
 800b91e:	d50e      	bpl.n	800b93e <_svfiprintf_r+0x32>
 800b920:	690b      	ldr	r3, [r1, #16]
 800b922:	b963      	cbnz	r3, 800b93e <_svfiprintf_r+0x32>
 800b924:	2140      	movs	r1, #64	; 0x40
 800b926:	f7ff ff21 	bl	800b76c <_malloc_r>
 800b92a:	6028      	str	r0, [r5, #0]
 800b92c:	6128      	str	r0, [r5, #16]
 800b92e:	b920      	cbnz	r0, 800b93a <_svfiprintf_r+0x2e>
 800b930:	230c      	movs	r3, #12
 800b932:	603b      	str	r3, [r7, #0]
 800b934:	f04f 30ff 	mov.w	r0, #4294967295
 800b938:	e0d1      	b.n	800bade <_svfiprintf_r+0x1d2>
 800b93a:	2340      	movs	r3, #64	; 0x40
 800b93c:	616b      	str	r3, [r5, #20]
 800b93e:	2300      	movs	r3, #0
 800b940:	9309      	str	r3, [sp, #36]	; 0x24
 800b942:	2320      	movs	r3, #32
 800b944:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b948:	f8cd 800c 	str.w	r8, [sp, #12]
 800b94c:	2330      	movs	r3, #48	; 0x30
 800b94e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800baf8 <_svfiprintf_r+0x1ec>
 800b952:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b956:	f04f 0901 	mov.w	r9, #1
 800b95a:	4623      	mov	r3, r4
 800b95c:	469a      	mov	sl, r3
 800b95e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b962:	b10a      	cbz	r2, 800b968 <_svfiprintf_r+0x5c>
 800b964:	2a25      	cmp	r2, #37	; 0x25
 800b966:	d1f9      	bne.n	800b95c <_svfiprintf_r+0x50>
 800b968:	ebba 0b04 	subs.w	fp, sl, r4
 800b96c:	d00b      	beq.n	800b986 <_svfiprintf_r+0x7a>
 800b96e:	465b      	mov	r3, fp
 800b970:	4622      	mov	r2, r4
 800b972:	4629      	mov	r1, r5
 800b974:	4638      	mov	r0, r7
 800b976:	f7ff ff6d 	bl	800b854 <__ssputs_r>
 800b97a:	3001      	adds	r0, #1
 800b97c:	f000 80aa 	beq.w	800bad4 <_svfiprintf_r+0x1c8>
 800b980:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b982:	445a      	add	r2, fp
 800b984:	9209      	str	r2, [sp, #36]	; 0x24
 800b986:	f89a 3000 	ldrb.w	r3, [sl]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	f000 80a2 	beq.w	800bad4 <_svfiprintf_r+0x1c8>
 800b990:	2300      	movs	r3, #0
 800b992:	f04f 32ff 	mov.w	r2, #4294967295
 800b996:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b99a:	f10a 0a01 	add.w	sl, sl, #1
 800b99e:	9304      	str	r3, [sp, #16]
 800b9a0:	9307      	str	r3, [sp, #28]
 800b9a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b9a6:	931a      	str	r3, [sp, #104]	; 0x68
 800b9a8:	4654      	mov	r4, sl
 800b9aa:	2205      	movs	r2, #5
 800b9ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9b0:	4851      	ldr	r0, [pc, #324]	; (800baf8 <_svfiprintf_r+0x1ec>)
 800b9b2:	f7f4 fc1d 	bl	80001f0 <memchr>
 800b9b6:	9a04      	ldr	r2, [sp, #16]
 800b9b8:	b9d8      	cbnz	r0, 800b9f2 <_svfiprintf_r+0xe6>
 800b9ba:	06d0      	lsls	r0, r2, #27
 800b9bc:	bf44      	itt	mi
 800b9be:	2320      	movmi	r3, #32
 800b9c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9c4:	0711      	lsls	r1, r2, #28
 800b9c6:	bf44      	itt	mi
 800b9c8:	232b      	movmi	r3, #43	; 0x2b
 800b9ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b9ce:	f89a 3000 	ldrb.w	r3, [sl]
 800b9d2:	2b2a      	cmp	r3, #42	; 0x2a
 800b9d4:	d015      	beq.n	800ba02 <_svfiprintf_r+0xf6>
 800b9d6:	9a07      	ldr	r2, [sp, #28]
 800b9d8:	4654      	mov	r4, sl
 800b9da:	2000      	movs	r0, #0
 800b9dc:	f04f 0c0a 	mov.w	ip, #10
 800b9e0:	4621      	mov	r1, r4
 800b9e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b9e6:	3b30      	subs	r3, #48	; 0x30
 800b9e8:	2b09      	cmp	r3, #9
 800b9ea:	d94e      	bls.n	800ba8a <_svfiprintf_r+0x17e>
 800b9ec:	b1b0      	cbz	r0, 800ba1c <_svfiprintf_r+0x110>
 800b9ee:	9207      	str	r2, [sp, #28]
 800b9f0:	e014      	b.n	800ba1c <_svfiprintf_r+0x110>
 800b9f2:	eba0 0308 	sub.w	r3, r0, r8
 800b9f6:	fa09 f303 	lsl.w	r3, r9, r3
 800b9fa:	4313      	orrs	r3, r2
 800b9fc:	9304      	str	r3, [sp, #16]
 800b9fe:	46a2      	mov	sl, r4
 800ba00:	e7d2      	b.n	800b9a8 <_svfiprintf_r+0x9c>
 800ba02:	9b03      	ldr	r3, [sp, #12]
 800ba04:	1d19      	adds	r1, r3, #4
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	9103      	str	r1, [sp, #12]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	bfbb      	ittet	lt
 800ba0e:	425b      	neglt	r3, r3
 800ba10:	f042 0202 	orrlt.w	r2, r2, #2
 800ba14:	9307      	strge	r3, [sp, #28]
 800ba16:	9307      	strlt	r3, [sp, #28]
 800ba18:	bfb8      	it	lt
 800ba1a:	9204      	strlt	r2, [sp, #16]
 800ba1c:	7823      	ldrb	r3, [r4, #0]
 800ba1e:	2b2e      	cmp	r3, #46	; 0x2e
 800ba20:	d10c      	bne.n	800ba3c <_svfiprintf_r+0x130>
 800ba22:	7863      	ldrb	r3, [r4, #1]
 800ba24:	2b2a      	cmp	r3, #42	; 0x2a
 800ba26:	d135      	bne.n	800ba94 <_svfiprintf_r+0x188>
 800ba28:	9b03      	ldr	r3, [sp, #12]
 800ba2a:	1d1a      	adds	r2, r3, #4
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	9203      	str	r2, [sp, #12]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	bfb8      	it	lt
 800ba34:	f04f 33ff 	movlt.w	r3, #4294967295
 800ba38:	3402      	adds	r4, #2
 800ba3a:	9305      	str	r3, [sp, #20]
 800ba3c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bb08 <_svfiprintf_r+0x1fc>
 800ba40:	7821      	ldrb	r1, [r4, #0]
 800ba42:	2203      	movs	r2, #3
 800ba44:	4650      	mov	r0, sl
 800ba46:	f7f4 fbd3 	bl	80001f0 <memchr>
 800ba4a:	b140      	cbz	r0, 800ba5e <_svfiprintf_r+0x152>
 800ba4c:	2340      	movs	r3, #64	; 0x40
 800ba4e:	eba0 000a 	sub.w	r0, r0, sl
 800ba52:	fa03 f000 	lsl.w	r0, r3, r0
 800ba56:	9b04      	ldr	r3, [sp, #16]
 800ba58:	4303      	orrs	r3, r0
 800ba5a:	3401      	adds	r4, #1
 800ba5c:	9304      	str	r3, [sp, #16]
 800ba5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ba62:	4826      	ldr	r0, [pc, #152]	; (800bafc <_svfiprintf_r+0x1f0>)
 800ba64:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ba68:	2206      	movs	r2, #6
 800ba6a:	f7f4 fbc1 	bl	80001f0 <memchr>
 800ba6e:	2800      	cmp	r0, #0
 800ba70:	d038      	beq.n	800bae4 <_svfiprintf_r+0x1d8>
 800ba72:	4b23      	ldr	r3, [pc, #140]	; (800bb00 <_svfiprintf_r+0x1f4>)
 800ba74:	bb1b      	cbnz	r3, 800babe <_svfiprintf_r+0x1b2>
 800ba76:	9b03      	ldr	r3, [sp, #12]
 800ba78:	3307      	adds	r3, #7
 800ba7a:	f023 0307 	bic.w	r3, r3, #7
 800ba7e:	3308      	adds	r3, #8
 800ba80:	9303      	str	r3, [sp, #12]
 800ba82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba84:	4433      	add	r3, r6
 800ba86:	9309      	str	r3, [sp, #36]	; 0x24
 800ba88:	e767      	b.n	800b95a <_svfiprintf_r+0x4e>
 800ba8a:	fb0c 3202 	mla	r2, ip, r2, r3
 800ba8e:	460c      	mov	r4, r1
 800ba90:	2001      	movs	r0, #1
 800ba92:	e7a5      	b.n	800b9e0 <_svfiprintf_r+0xd4>
 800ba94:	2300      	movs	r3, #0
 800ba96:	3401      	adds	r4, #1
 800ba98:	9305      	str	r3, [sp, #20]
 800ba9a:	4619      	mov	r1, r3
 800ba9c:	f04f 0c0a 	mov.w	ip, #10
 800baa0:	4620      	mov	r0, r4
 800baa2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800baa6:	3a30      	subs	r2, #48	; 0x30
 800baa8:	2a09      	cmp	r2, #9
 800baaa:	d903      	bls.n	800bab4 <_svfiprintf_r+0x1a8>
 800baac:	2b00      	cmp	r3, #0
 800baae:	d0c5      	beq.n	800ba3c <_svfiprintf_r+0x130>
 800bab0:	9105      	str	r1, [sp, #20]
 800bab2:	e7c3      	b.n	800ba3c <_svfiprintf_r+0x130>
 800bab4:	fb0c 2101 	mla	r1, ip, r1, r2
 800bab8:	4604      	mov	r4, r0
 800baba:	2301      	movs	r3, #1
 800babc:	e7f0      	b.n	800baa0 <_svfiprintf_r+0x194>
 800babe:	ab03      	add	r3, sp, #12
 800bac0:	9300      	str	r3, [sp, #0]
 800bac2:	462a      	mov	r2, r5
 800bac4:	4b0f      	ldr	r3, [pc, #60]	; (800bb04 <_svfiprintf_r+0x1f8>)
 800bac6:	a904      	add	r1, sp, #16
 800bac8:	4638      	mov	r0, r7
 800baca:	f7fd ffc9 	bl	8009a60 <_printf_float>
 800bace:	1c42      	adds	r2, r0, #1
 800bad0:	4606      	mov	r6, r0
 800bad2:	d1d6      	bne.n	800ba82 <_svfiprintf_r+0x176>
 800bad4:	89ab      	ldrh	r3, [r5, #12]
 800bad6:	065b      	lsls	r3, r3, #25
 800bad8:	f53f af2c 	bmi.w	800b934 <_svfiprintf_r+0x28>
 800badc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bade:	b01d      	add	sp, #116	; 0x74
 800bae0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae4:	ab03      	add	r3, sp, #12
 800bae6:	9300      	str	r3, [sp, #0]
 800bae8:	462a      	mov	r2, r5
 800baea:	4b06      	ldr	r3, [pc, #24]	; (800bb04 <_svfiprintf_r+0x1f8>)
 800baec:	a904      	add	r1, sp, #16
 800baee:	4638      	mov	r0, r7
 800baf0:	f7fe fa5a 	bl	8009fa8 <_printf_i>
 800baf4:	e7eb      	b.n	800bace <_svfiprintf_r+0x1c2>
 800baf6:	bf00      	nop
 800baf8:	0800c98c 	.word	0x0800c98c
 800bafc:	0800c996 	.word	0x0800c996
 800bb00:	08009a61 	.word	0x08009a61
 800bb04:	0800b855 	.word	0x0800b855
 800bb08:	0800c992 	.word	0x0800c992

0800bb0c <_sbrk_r>:
 800bb0c:	b538      	push	{r3, r4, r5, lr}
 800bb0e:	4d06      	ldr	r5, [pc, #24]	; (800bb28 <_sbrk_r+0x1c>)
 800bb10:	2300      	movs	r3, #0
 800bb12:	4604      	mov	r4, r0
 800bb14:	4608      	mov	r0, r1
 800bb16:	602b      	str	r3, [r5, #0]
 800bb18:	f7f5 fe8c 	bl	8001834 <_sbrk>
 800bb1c:	1c43      	adds	r3, r0, #1
 800bb1e:	d102      	bne.n	800bb26 <_sbrk_r+0x1a>
 800bb20:	682b      	ldr	r3, [r5, #0]
 800bb22:	b103      	cbz	r3, 800bb26 <_sbrk_r+0x1a>
 800bb24:	6023      	str	r3, [r4, #0]
 800bb26:	bd38      	pop	{r3, r4, r5, pc}
 800bb28:	200021e4 	.word	0x200021e4

0800bb2c <__assert_func>:
 800bb2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb2e:	4614      	mov	r4, r2
 800bb30:	461a      	mov	r2, r3
 800bb32:	4b09      	ldr	r3, [pc, #36]	; (800bb58 <__assert_func+0x2c>)
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	4605      	mov	r5, r0
 800bb38:	68d8      	ldr	r0, [r3, #12]
 800bb3a:	b14c      	cbz	r4, 800bb50 <__assert_func+0x24>
 800bb3c:	4b07      	ldr	r3, [pc, #28]	; (800bb5c <__assert_func+0x30>)
 800bb3e:	9100      	str	r1, [sp, #0]
 800bb40:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb44:	4906      	ldr	r1, [pc, #24]	; (800bb60 <__assert_func+0x34>)
 800bb46:	462b      	mov	r3, r5
 800bb48:	f000 f80e 	bl	800bb68 <fiprintf>
 800bb4c:	f000 faac 	bl	800c0a8 <abort>
 800bb50:	4b04      	ldr	r3, [pc, #16]	; (800bb64 <__assert_func+0x38>)
 800bb52:	461c      	mov	r4, r3
 800bb54:	e7f3      	b.n	800bb3e <__assert_func+0x12>
 800bb56:	bf00      	nop
 800bb58:	2000012c 	.word	0x2000012c
 800bb5c:	0800c99d 	.word	0x0800c99d
 800bb60:	0800c9aa 	.word	0x0800c9aa
 800bb64:	0800c9d8 	.word	0x0800c9d8

0800bb68 <fiprintf>:
 800bb68:	b40e      	push	{r1, r2, r3}
 800bb6a:	b503      	push	{r0, r1, lr}
 800bb6c:	4601      	mov	r1, r0
 800bb6e:	ab03      	add	r3, sp, #12
 800bb70:	4805      	ldr	r0, [pc, #20]	; (800bb88 <fiprintf+0x20>)
 800bb72:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb76:	6800      	ldr	r0, [r0, #0]
 800bb78:	9301      	str	r3, [sp, #4]
 800bb7a:	f000 f897 	bl	800bcac <_vfiprintf_r>
 800bb7e:	b002      	add	sp, #8
 800bb80:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb84:	b003      	add	sp, #12
 800bb86:	4770      	bx	lr
 800bb88:	2000012c 	.word	0x2000012c

0800bb8c <__ascii_mbtowc>:
 800bb8c:	b082      	sub	sp, #8
 800bb8e:	b901      	cbnz	r1, 800bb92 <__ascii_mbtowc+0x6>
 800bb90:	a901      	add	r1, sp, #4
 800bb92:	b142      	cbz	r2, 800bba6 <__ascii_mbtowc+0x1a>
 800bb94:	b14b      	cbz	r3, 800bbaa <__ascii_mbtowc+0x1e>
 800bb96:	7813      	ldrb	r3, [r2, #0]
 800bb98:	600b      	str	r3, [r1, #0]
 800bb9a:	7812      	ldrb	r2, [r2, #0]
 800bb9c:	1e10      	subs	r0, r2, #0
 800bb9e:	bf18      	it	ne
 800bba0:	2001      	movne	r0, #1
 800bba2:	b002      	add	sp, #8
 800bba4:	4770      	bx	lr
 800bba6:	4610      	mov	r0, r2
 800bba8:	e7fb      	b.n	800bba2 <__ascii_mbtowc+0x16>
 800bbaa:	f06f 0001 	mvn.w	r0, #1
 800bbae:	e7f8      	b.n	800bba2 <__ascii_mbtowc+0x16>

0800bbb0 <memmove>:
 800bbb0:	4288      	cmp	r0, r1
 800bbb2:	b510      	push	{r4, lr}
 800bbb4:	eb01 0402 	add.w	r4, r1, r2
 800bbb8:	d902      	bls.n	800bbc0 <memmove+0x10>
 800bbba:	4284      	cmp	r4, r0
 800bbbc:	4623      	mov	r3, r4
 800bbbe:	d807      	bhi.n	800bbd0 <memmove+0x20>
 800bbc0:	1e43      	subs	r3, r0, #1
 800bbc2:	42a1      	cmp	r1, r4
 800bbc4:	d008      	beq.n	800bbd8 <memmove+0x28>
 800bbc6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bbca:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bbce:	e7f8      	b.n	800bbc2 <memmove+0x12>
 800bbd0:	4402      	add	r2, r0
 800bbd2:	4601      	mov	r1, r0
 800bbd4:	428a      	cmp	r2, r1
 800bbd6:	d100      	bne.n	800bbda <memmove+0x2a>
 800bbd8:	bd10      	pop	{r4, pc}
 800bbda:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bbde:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bbe2:	e7f7      	b.n	800bbd4 <memmove+0x24>

0800bbe4 <__malloc_lock>:
 800bbe4:	4801      	ldr	r0, [pc, #4]	; (800bbec <__malloc_lock+0x8>)
 800bbe6:	f000 bc1f 	b.w	800c428 <__retarget_lock_acquire_recursive>
 800bbea:	bf00      	nop
 800bbec:	200021e8 	.word	0x200021e8

0800bbf0 <__malloc_unlock>:
 800bbf0:	4801      	ldr	r0, [pc, #4]	; (800bbf8 <__malloc_unlock+0x8>)
 800bbf2:	f000 bc1a 	b.w	800c42a <__retarget_lock_release_recursive>
 800bbf6:	bf00      	nop
 800bbf8:	200021e8 	.word	0x200021e8

0800bbfc <_realloc_r>:
 800bbfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc00:	4680      	mov	r8, r0
 800bc02:	4614      	mov	r4, r2
 800bc04:	460e      	mov	r6, r1
 800bc06:	b921      	cbnz	r1, 800bc12 <_realloc_r+0x16>
 800bc08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bc0c:	4611      	mov	r1, r2
 800bc0e:	f7ff bdad 	b.w	800b76c <_malloc_r>
 800bc12:	b92a      	cbnz	r2, 800bc20 <_realloc_r+0x24>
 800bc14:	f7ff fd3e 	bl	800b694 <_free_r>
 800bc18:	4625      	mov	r5, r4
 800bc1a:	4628      	mov	r0, r5
 800bc1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc20:	f000 fc6a 	bl	800c4f8 <_malloc_usable_size_r>
 800bc24:	4284      	cmp	r4, r0
 800bc26:	4607      	mov	r7, r0
 800bc28:	d802      	bhi.n	800bc30 <_realloc_r+0x34>
 800bc2a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bc2e:	d812      	bhi.n	800bc56 <_realloc_r+0x5a>
 800bc30:	4621      	mov	r1, r4
 800bc32:	4640      	mov	r0, r8
 800bc34:	f7ff fd9a 	bl	800b76c <_malloc_r>
 800bc38:	4605      	mov	r5, r0
 800bc3a:	2800      	cmp	r0, #0
 800bc3c:	d0ed      	beq.n	800bc1a <_realloc_r+0x1e>
 800bc3e:	42bc      	cmp	r4, r7
 800bc40:	4622      	mov	r2, r4
 800bc42:	4631      	mov	r1, r6
 800bc44:	bf28      	it	cs
 800bc46:	463a      	movcs	r2, r7
 800bc48:	f7ff f97c 	bl	800af44 <memcpy>
 800bc4c:	4631      	mov	r1, r6
 800bc4e:	4640      	mov	r0, r8
 800bc50:	f7ff fd20 	bl	800b694 <_free_r>
 800bc54:	e7e1      	b.n	800bc1a <_realloc_r+0x1e>
 800bc56:	4635      	mov	r5, r6
 800bc58:	e7df      	b.n	800bc1a <_realloc_r+0x1e>

0800bc5a <__sfputc_r>:
 800bc5a:	6893      	ldr	r3, [r2, #8]
 800bc5c:	3b01      	subs	r3, #1
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	b410      	push	{r4}
 800bc62:	6093      	str	r3, [r2, #8]
 800bc64:	da08      	bge.n	800bc78 <__sfputc_r+0x1e>
 800bc66:	6994      	ldr	r4, [r2, #24]
 800bc68:	42a3      	cmp	r3, r4
 800bc6a:	db01      	blt.n	800bc70 <__sfputc_r+0x16>
 800bc6c:	290a      	cmp	r1, #10
 800bc6e:	d103      	bne.n	800bc78 <__sfputc_r+0x1e>
 800bc70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc74:	f000 b94a 	b.w	800bf0c <__swbuf_r>
 800bc78:	6813      	ldr	r3, [r2, #0]
 800bc7a:	1c58      	adds	r0, r3, #1
 800bc7c:	6010      	str	r0, [r2, #0]
 800bc7e:	7019      	strb	r1, [r3, #0]
 800bc80:	4608      	mov	r0, r1
 800bc82:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <__sfputs_r>:
 800bc88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc8a:	4606      	mov	r6, r0
 800bc8c:	460f      	mov	r7, r1
 800bc8e:	4614      	mov	r4, r2
 800bc90:	18d5      	adds	r5, r2, r3
 800bc92:	42ac      	cmp	r4, r5
 800bc94:	d101      	bne.n	800bc9a <__sfputs_r+0x12>
 800bc96:	2000      	movs	r0, #0
 800bc98:	e007      	b.n	800bcaa <__sfputs_r+0x22>
 800bc9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc9e:	463a      	mov	r2, r7
 800bca0:	4630      	mov	r0, r6
 800bca2:	f7ff ffda 	bl	800bc5a <__sfputc_r>
 800bca6:	1c43      	adds	r3, r0, #1
 800bca8:	d1f3      	bne.n	800bc92 <__sfputs_r+0xa>
 800bcaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bcac <_vfiprintf_r>:
 800bcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcb0:	460d      	mov	r5, r1
 800bcb2:	b09d      	sub	sp, #116	; 0x74
 800bcb4:	4614      	mov	r4, r2
 800bcb6:	4698      	mov	r8, r3
 800bcb8:	4606      	mov	r6, r0
 800bcba:	b118      	cbz	r0, 800bcc4 <_vfiprintf_r+0x18>
 800bcbc:	6983      	ldr	r3, [r0, #24]
 800bcbe:	b90b      	cbnz	r3, 800bcc4 <_vfiprintf_r+0x18>
 800bcc0:	f000 fb14 	bl	800c2ec <__sinit>
 800bcc4:	4b89      	ldr	r3, [pc, #548]	; (800beec <_vfiprintf_r+0x240>)
 800bcc6:	429d      	cmp	r5, r3
 800bcc8:	d11b      	bne.n	800bd02 <_vfiprintf_r+0x56>
 800bcca:	6875      	ldr	r5, [r6, #4]
 800bccc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcce:	07d9      	lsls	r1, r3, #31
 800bcd0:	d405      	bmi.n	800bcde <_vfiprintf_r+0x32>
 800bcd2:	89ab      	ldrh	r3, [r5, #12]
 800bcd4:	059a      	lsls	r2, r3, #22
 800bcd6:	d402      	bmi.n	800bcde <_vfiprintf_r+0x32>
 800bcd8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcda:	f000 fba5 	bl	800c428 <__retarget_lock_acquire_recursive>
 800bcde:	89ab      	ldrh	r3, [r5, #12]
 800bce0:	071b      	lsls	r3, r3, #28
 800bce2:	d501      	bpl.n	800bce8 <_vfiprintf_r+0x3c>
 800bce4:	692b      	ldr	r3, [r5, #16]
 800bce6:	b9eb      	cbnz	r3, 800bd24 <_vfiprintf_r+0x78>
 800bce8:	4629      	mov	r1, r5
 800bcea:	4630      	mov	r0, r6
 800bcec:	f000 f96e 	bl	800bfcc <__swsetup_r>
 800bcf0:	b1c0      	cbz	r0, 800bd24 <_vfiprintf_r+0x78>
 800bcf2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcf4:	07dc      	lsls	r4, r3, #31
 800bcf6:	d50e      	bpl.n	800bd16 <_vfiprintf_r+0x6a>
 800bcf8:	f04f 30ff 	mov.w	r0, #4294967295
 800bcfc:	b01d      	add	sp, #116	; 0x74
 800bcfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd02:	4b7b      	ldr	r3, [pc, #492]	; (800bef0 <_vfiprintf_r+0x244>)
 800bd04:	429d      	cmp	r5, r3
 800bd06:	d101      	bne.n	800bd0c <_vfiprintf_r+0x60>
 800bd08:	68b5      	ldr	r5, [r6, #8]
 800bd0a:	e7df      	b.n	800bccc <_vfiprintf_r+0x20>
 800bd0c:	4b79      	ldr	r3, [pc, #484]	; (800bef4 <_vfiprintf_r+0x248>)
 800bd0e:	429d      	cmp	r5, r3
 800bd10:	bf08      	it	eq
 800bd12:	68f5      	ldreq	r5, [r6, #12]
 800bd14:	e7da      	b.n	800bccc <_vfiprintf_r+0x20>
 800bd16:	89ab      	ldrh	r3, [r5, #12]
 800bd18:	0598      	lsls	r0, r3, #22
 800bd1a:	d4ed      	bmi.n	800bcf8 <_vfiprintf_r+0x4c>
 800bd1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd1e:	f000 fb84 	bl	800c42a <__retarget_lock_release_recursive>
 800bd22:	e7e9      	b.n	800bcf8 <_vfiprintf_r+0x4c>
 800bd24:	2300      	movs	r3, #0
 800bd26:	9309      	str	r3, [sp, #36]	; 0x24
 800bd28:	2320      	movs	r3, #32
 800bd2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd2e:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd32:	2330      	movs	r3, #48	; 0x30
 800bd34:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bef8 <_vfiprintf_r+0x24c>
 800bd38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd3c:	f04f 0901 	mov.w	r9, #1
 800bd40:	4623      	mov	r3, r4
 800bd42:	469a      	mov	sl, r3
 800bd44:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd48:	b10a      	cbz	r2, 800bd4e <_vfiprintf_r+0xa2>
 800bd4a:	2a25      	cmp	r2, #37	; 0x25
 800bd4c:	d1f9      	bne.n	800bd42 <_vfiprintf_r+0x96>
 800bd4e:	ebba 0b04 	subs.w	fp, sl, r4
 800bd52:	d00b      	beq.n	800bd6c <_vfiprintf_r+0xc0>
 800bd54:	465b      	mov	r3, fp
 800bd56:	4622      	mov	r2, r4
 800bd58:	4629      	mov	r1, r5
 800bd5a:	4630      	mov	r0, r6
 800bd5c:	f7ff ff94 	bl	800bc88 <__sfputs_r>
 800bd60:	3001      	adds	r0, #1
 800bd62:	f000 80aa 	beq.w	800beba <_vfiprintf_r+0x20e>
 800bd66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd68:	445a      	add	r2, fp
 800bd6a:	9209      	str	r2, [sp, #36]	; 0x24
 800bd6c:	f89a 3000 	ldrb.w	r3, [sl]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	f000 80a2 	beq.w	800beba <_vfiprintf_r+0x20e>
 800bd76:	2300      	movs	r3, #0
 800bd78:	f04f 32ff 	mov.w	r2, #4294967295
 800bd7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd80:	f10a 0a01 	add.w	sl, sl, #1
 800bd84:	9304      	str	r3, [sp, #16]
 800bd86:	9307      	str	r3, [sp, #28]
 800bd88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd8c:	931a      	str	r3, [sp, #104]	; 0x68
 800bd8e:	4654      	mov	r4, sl
 800bd90:	2205      	movs	r2, #5
 800bd92:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd96:	4858      	ldr	r0, [pc, #352]	; (800bef8 <_vfiprintf_r+0x24c>)
 800bd98:	f7f4 fa2a 	bl	80001f0 <memchr>
 800bd9c:	9a04      	ldr	r2, [sp, #16]
 800bd9e:	b9d8      	cbnz	r0, 800bdd8 <_vfiprintf_r+0x12c>
 800bda0:	06d1      	lsls	r1, r2, #27
 800bda2:	bf44      	itt	mi
 800bda4:	2320      	movmi	r3, #32
 800bda6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdaa:	0713      	lsls	r3, r2, #28
 800bdac:	bf44      	itt	mi
 800bdae:	232b      	movmi	r3, #43	; 0x2b
 800bdb0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdb4:	f89a 3000 	ldrb.w	r3, [sl]
 800bdb8:	2b2a      	cmp	r3, #42	; 0x2a
 800bdba:	d015      	beq.n	800bde8 <_vfiprintf_r+0x13c>
 800bdbc:	9a07      	ldr	r2, [sp, #28]
 800bdbe:	4654      	mov	r4, sl
 800bdc0:	2000      	movs	r0, #0
 800bdc2:	f04f 0c0a 	mov.w	ip, #10
 800bdc6:	4621      	mov	r1, r4
 800bdc8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdcc:	3b30      	subs	r3, #48	; 0x30
 800bdce:	2b09      	cmp	r3, #9
 800bdd0:	d94e      	bls.n	800be70 <_vfiprintf_r+0x1c4>
 800bdd2:	b1b0      	cbz	r0, 800be02 <_vfiprintf_r+0x156>
 800bdd4:	9207      	str	r2, [sp, #28]
 800bdd6:	e014      	b.n	800be02 <_vfiprintf_r+0x156>
 800bdd8:	eba0 0308 	sub.w	r3, r0, r8
 800bddc:	fa09 f303 	lsl.w	r3, r9, r3
 800bde0:	4313      	orrs	r3, r2
 800bde2:	9304      	str	r3, [sp, #16]
 800bde4:	46a2      	mov	sl, r4
 800bde6:	e7d2      	b.n	800bd8e <_vfiprintf_r+0xe2>
 800bde8:	9b03      	ldr	r3, [sp, #12]
 800bdea:	1d19      	adds	r1, r3, #4
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	9103      	str	r1, [sp, #12]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	bfbb      	ittet	lt
 800bdf4:	425b      	neglt	r3, r3
 800bdf6:	f042 0202 	orrlt.w	r2, r2, #2
 800bdfa:	9307      	strge	r3, [sp, #28]
 800bdfc:	9307      	strlt	r3, [sp, #28]
 800bdfe:	bfb8      	it	lt
 800be00:	9204      	strlt	r2, [sp, #16]
 800be02:	7823      	ldrb	r3, [r4, #0]
 800be04:	2b2e      	cmp	r3, #46	; 0x2e
 800be06:	d10c      	bne.n	800be22 <_vfiprintf_r+0x176>
 800be08:	7863      	ldrb	r3, [r4, #1]
 800be0a:	2b2a      	cmp	r3, #42	; 0x2a
 800be0c:	d135      	bne.n	800be7a <_vfiprintf_r+0x1ce>
 800be0e:	9b03      	ldr	r3, [sp, #12]
 800be10:	1d1a      	adds	r2, r3, #4
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	9203      	str	r2, [sp, #12]
 800be16:	2b00      	cmp	r3, #0
 800be18:	bfb8      	it	lt
 800be1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800be1e:	3402      	adds	r4, #2
 800be20:	9305      	str	r3, [sp, #20]
 800be22:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf08 <_vfiprintf_r+0x25c>
 800be26:	7821      	ldrb	r1, [r4, #0]
 800be28:	2203      	movs	r2, #3
 800be2a:	4650      	mov	r0, sl
 800be2c:	f7f4 f9e0 	bl	80001f0 <memchr>
 800be30:	b140      	cbz	r0, 800be44 <_vfiprintf_r+0x198>
 800be32:	2340      	movs	r3, #64	; 0x40
 800be34:	eba0 000a 	sub.w	r0, r0, sl
 800be38:	fa03 f000 	lsl.w	r0, r3, r0
 800be3c:	9b04      	ldr	r3, [sp, #16]
 800be3e:	4303      	orrs	r3, r0
 800be40:	3401      	adds	r4, #1
 800be42:	9304      	str	r3, [sp, #16]
 800be44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be48:	482c      	ldr	r0, [pc, #176]	; (800befc <_vfiprintf_r+0x250>)
 800be4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be4e:	2206      	movs	r2, #6
 800be50:	f7f4 f9ce 	bl	80001f0 <memchr>
 800be54:	2800      	cmp	r0, #0
 800be56:	d03f      	beq.n	800bed8 <_vfiprintf_r+0x22c>
 800be58:	4b29      	ldr	r3, [pc, #164]	; (800bf00 <_vfiprintf_r+0x254>)
 800be5a:	bb1b      	cbnz	r3, 800bea4 <_vfiprintf_r+0x1f8>
 800be5c:	9b03      	ldr	r3, [sp, #12]
 800be5e:	3307      	adds	r3, #7
 800be60:	f023 0307 	bic.w	r3, r3, #7
 800be64:	3308      	adds	r3, #8
 800be66:	9303      	str	r3, [sp, #12]
 800be68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be6a:	443b      	add	r3, r7
 800be6c:	9309      	str	r3, [sp, #36]	; 0x24
 800be6e:	e767      	b.n	800bd40 <_vfiprintf_r+0x94>
 800be70:	fb0c 3202 	mla	r2, ip, r2, r3
 800be74:	460c      	mov	r4, r1
 800be76:	2001      	movs	r0, #1
 800be78:	e7a5      	b.n	800bdc6 <_vfiprintf_r+0x11a>
 800be7a:	2300      	movs	r3, #0
 800be7c:	3401      	adds	r4, #1
 800be7e:	9305      	str	r3, [sp, #20]
 800be80:	4619      	mov	r1, r3
 800be82:	f04f 0c0a 	mov.w	ip, #10
 800be86:	4620      	mov	r0, r4
 800be88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be8c:	3a30      	subs	r2, #48	; 0x30
 800be8e:	2a09      	cmp	r2, #9
 800be90:	d903      	bls.n	800be9a <_vfiprintf_r+0x1ee>
 800be92:	2b00      	cmp	r3, #0
 800be94:	d0c5      	beq.n	800be22 <_vfiprintf_r+0x176>
 800be96:	9105      	str	r1, [sp, #20]
 800be98:	e7c3      	b.n	800be22 <_vfiprintf_r+0x176>
 800be9a:	fb0c 2101 	mla	r1, ip, r1, r2
 800be9e:	4604      	mov	r4, r0
 800bea0:	2301      	movs	r3, #1
 800bea2:	e7f0      	b.n	800be86 <_vfiprintf_r+0x1da>
 800bea4:	ab03      	add	r3, sp, #12
 800bea6:	9300      	str	r3, [sp, #0]
 800bea8:	462a      	mov	r2, r5
 800beaa:	4b16      	ldr	r3, [pc, #88]	; (800bf04 <_vfiprintf_r+0x258>)
 800beac:	a904      	add	r1, sp, #16
 800beae:	4630      	mov	r0, r6
 800beb0:	f7fd fdd6 	bl	8009a60 <_printf_float>
 800beb4:	4607      	mov	r7, r0
 800beb6:	1c78      	adds	r0, r7, #1
 800beb8:	d1d6      	bne.n	800be68 <_vfiprintf_r+0x1bc>
 800beba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bebc:	07d9      	lsls	r1, r3, #31
 800bebe:	d405      	bmi.n	800becc <_vfiprintf_r+0x220>
 800bec0:	89ab      	ldrh	r3, [r5, #12]
 800bec2:	059a      	lsls	r2, r3, #22
 800bec4:	d402      	bmi.n	800becc <_vfiprintf_r+0x220>
 800bec6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bec8:	f000 faaf 	bl	800c42a <__retarget_lock_release_recursive>
 800becc:	89ab      	ldrh	r3, [r5, #12]
 800bece:	065b      	lsls	r3, r3, #25
 800bed0:	f53f af12 	bmi.w	800bcf8 <_vfiprintf_r+0x4c>
 800bed4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bed6:	e711      	b.n	800bcfc <_vfiprintf_r+0x50>
 800bed8:	ab03      	add	r3, sp, #12
 800beda:	9300      	str	r3, [sp, #0]
 800bedc:	462a      	mov	r2, r5
 800bede:	4b09      	ldr	r3, [pc, #36]	; (800bf04 <_vfiprintf_r+0x258>)
 800bee0:	a904      	add	r1, sp, #16
 800bee2:	4630      	mov	r0, r6
 800bee4:	f7fe f860 	bl	8009fa8 <_printf_i>
 800bee8:	e7e4      	b.n	800beb4 <_vfiprintf_r+0x208>
 800beea:	bf00      	nop
 800beec:	0800cb04 	.word	0x0800cb04
 800bef0:	0800cb24 	.word	0x0800cb24
 800bef4:	0800cae4 	.word	0x0800cae4
 800bef8:	0800c98c 	.word	0x0800c98c
 800befc:	0800c996 	.word	0x0800c996
 800bf00:	08009a61 	.word	0x08009a61
 800bf04:	0800bc89 	.word	0x0800bc89
 800bf08:	0800c992 	.word	0x0800c992

0800bf0c <__swbuf_r>:
 800bf0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf0e:	460e      	mov	r6, r1
 800bf10:	4614      	mov	r4, r2
 800bf12:	4605      	mov	r5, r0
 800bf14:	b118      	cbz	r0, 800bf1e <__swbuf_r+0x12>
 800bf16:	6983      	ldr	r3, [r0, #24]
 800bf18:	b90b      	cbnz	r3, 800bf1e <__swbuf_r+0x12>
 800bf1a:	f000 f9e7 	bl	800c2ec <__sinit>
 800bf1e:	4b21      	ldr	r3, [pc, #132]	; (800bfa4 <__swbuf_r+0x98>)
 800bf20:	429c      	cmp	r4, r3
 800bf22:	d12b      	bne.n	800bf7c <__swbuf_r+0x70>
 800bf24:	686c      	ldr	r4, [r5, #4]
 800bf26:	69a3      	ldr	r3, [r4, #24]
 800bf28:	60a3      	str	r3, [r4, #8]
 800bf2a:	89a3      	ldrh	r3, [r4, #12]
 800bf2c:	071a      	lsls	r2, r3, #28
 800bf2e:	d52f      	bpl.n	800bf90 <__swbuf_r+0x84>
 800bf30:	6923      	ldr	r3, [r4, #16]
 800bf32:	b36b      	cbz	r3, 800bf90 <__swbuf_r+0x84>
 800bf34:	6923      	ldr	r3, [r4, #16]
 800bf36:	6820      	ldr	r0, [r4, #0]
 800bf38:	1ac0      	subs	r0, r0, r3
 800bf3a:	6963      	ldr	r3, [r4, #20]
 800bf3c:	b2f6      	uxtb	r6, r6
 800bf3e:	4283      	cmp	r3, r0
 800bf40:	4637      	mov	r7, r6
 800bf42:	dc04      	bgt.n	800bf4e <__swbuf_r+0x42>
 800bf44:	4621      	mov	r1, r4
 800bf46:	4628      	mov	r0, r5
 800bf48:	f000 f93c 	bl	800c1c4 <_fflush_r>
 800bf4c:	bb30      	cbnz	r0, 800bf9c <__swbuf_r+0x90>
 800bf4e:	68a3      	ldr	r3, [r4, #8]
 800bf50:	3b01      	subs	r3, #1
 800bf52:	60a3      	str	r3, [r4, #8]
 800bf54:	6823      	ldr	r3, [r4, #0]
 800bf56:	1c5a      	adds	r2, r3, #1
 800bf58:	6022      	str	r2, [r4, #0]
 800bf5a:	701e      	strb	r6, [r3, #0]
 800bf5c:	6963      	ldr	r3, [r4, #20]
 800bf5e:	3001      	adds	r0, #1
 800bf60:	4283      	cmp	r3, r0
 800bf62:	d004      	beq.n	800bf6e <__swbuf_r+0x62>
 800bf64:	89a3      	ldrh	r3, [r4, #12]
 800bf66:	07db      	lsls	r3, r3, #31
 800bf68:	d506      	bpl.n	800bf78 <__swbuf_r+0x6c>
 800bf6a:	2e0a      	cmp	r6, #10
 800bf6c:	d104      	bne.n	800bf78 <__swbuf_r+0x6c>
 800bf6e:	4621      	mov	r1, r4
 800bf70:	4628      	mov	r0, r5
 800bf72:	f000 f927 	bl	800c1c4 <_fflush_r>
 800bf76:	b988      	cbnz	r0, 800bf9c <__swbuf_r+0x90>
 800bf78:	4638      	mov	r0, r7
 800bf7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf7c:	4b0a      	ldr	r3, [pc, #40]	; (800bfa8 <__swbuf_r+0x9c>)
 800bf7e:	429c      	cmp	r4, r3
 800bf80:	d101      	bne.n	800bf86 <__swbuf_r+0x7a>
 800bf82:	68ac      	ldr	r4, [r5, #8]
 800bf84:	e7cf      	b.n	800bf26 <__swbuf_r+0x1a>
 800bf86:	4b09      	ldr	r3, [pc, #36]	; (800bfac <__swbuf_r+0xa0>)
 800bf88:	429c      	cmp	r4, r3
 800bf8a:	bf08      	it	eq
 800bf8c:	68ec      	ldreq	r4, [r5, #12]
 800bf8e:	e7ca      	b.n	800bf26 <__swbuf_r+0x1a>
 800bf90:	4621      	mov	r1, r4
 800bf92:	4628      	mov	r0, r5
 800bf94:	f000 f81a 	bl	800bfcc <__swsetup_r>
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	d0cb      	beq.n	800bf34 <__swbuf_r+0x28>
 800bf9c:	f04f 37ff 	mov.w	r7, #4294967295
 800bfa0:	e7ea      	b.n	800bf78 <__swbuf_r+0x6c>
 800bfa2:	bf00      	nop
 800bfa4:	0800cb04 	.word	0x0800cb04
 800bfa8:	0800cb24 	.word	0x0800cb24
 800bfac:	0800cae4 	.word	0x0800cae4

0800bfb0 <__ascii_wctomb>:
 800bfb0:	b149      	cbz	r1, 800bfc6 <__ascii_wctomb+0x16>
 800bfb2:	2aff      	cmp	r2, #255	; 0xff
 800bfb4:	bf85      	ittet	hi
 800bfb6:	238a      	movhi	r3, #138	; 0x8a
 800bfb8:	6003      	strhi	r3, [r0, #0]
 800bfba:	700a      	strbls	r2, [r1, #0]
 800bfbc:	f04f 30ff 	movhi.w	r0, #4294967295
 800bfc0:	bf98      	it	ls
 800bfc2:	2001      	movls	r0, #1
 800bfc4:	4770      	bx	lr
 800bfc6:	4608      	mov	r0, r1
 800bfc8:	4770      	bx	lr
	...

0800bfcc <__swsetup_r>:
 800bfcc:	4b32      	ldr	r3, [pc, #200]	; (800c098 <__swsetup_r+0xcc>)
 800bfce:	b570      	push	{r4, r5, r6, lr}
 800bfd0:	681d      	ldr	r5, [r3, #0]
 800bfd2:	4606      	mov	r6, r0
 800bfd4:	460c      	mov	r4, r1
 800bfd6:	b125      	cbz	r5, 800bfe2 <__swsetup_r+0x16>
 800bfd8:	69ab      	ldr	r3, [r5, #24]
 800bfda:	b913      	cbnz	r3, 800bfe2 <__swsetup_r+0x16>
 800bfdc:	4628      	mov	r0, r5
 800bfde:	f000 f985 	bl	800c2ec <__sinit>
 800bfe2:	4b2e      	ldr	r3, [pc, #184]	; (800c09c <__swsetup_r+0xd0>)
 800bfe4:	429c      	cmp	r4, r3
 800bfe6:	d10f      	bne.n	800c008 <__swsetup_r+0x3c>
 800bfe8:	686c      	ldr	r4, [r5, #4]
 800bfea:	89a3      	ldrh	r3, [r4, #12]
 800bfec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bff0:	0719      	lsls	r1, r3, #28
 800bff2:	d42c      	bmi.n	800c04e <__swsetup_r+0x82>
 800bff4:	06dd      	lsls	r5, r3, #27
 800bff6:	d411      	bmi.n	800c01c <__swsetup_r+0x50>
 800bff8:	2309      	movs	r3, #9
 800bffa:	6033      	str	r3, [r6, #0]
 800bffc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c000:	81a3      	strh	r3, [r4, #12]
 800c002:	f04f 30ff 	mov.w	r0, #4294967295
 800c006:	e03e      	b.n	800c086 <__swsetup_r+0xba>
 800c008:	4b25      	ldr	r3, [pc, #148]	; (800c0a0 <__swsetup_r+0xd4>)
 800c00a:	429c      	cmp	r4, r3
 800c00c:	d101      	bne.n	800c012 <__swsetup_r+0x46>
 800c00e:	68ac      	ldr	r4, [r5, #8]
 800c010:	e7eb      	b.n	800bfea <__swsetup_r+0x1e>
 800c012:	4b24      	ldr	r3, [pc, #144]	; (800c0a4 <__swsetup_r+0xd8>)
 800c014:	429c      	cmp	r4, r3
 800c016:	bf08      	it	eq
 800c018:	68ec      	ldreq	r4, [r5, #12]
 800c01a:	e7e6      	b.n	800bfea <__swsetup_r+0x1e>
 800c01c:	0758      	lsls	r0, r3, #29
 800c01e:	d512      	bpl.n	800c046 <__swsetup_r+0x7a>
 800c020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c022:	b141      	cbz	r1, 800c036 <__swsetup_r+0x6a>
 800c024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c028:	4299      	cmp	r1, r3
 800c02a:	d002      	beq.n	800c032 <__swsetup_r+0x66>
 800c02c:	4630      	mov	r0, r6
 800c02e:	f7ff fb31 	bl	800b694 <_free_r>
 800c032:	2300      	movs	r3, #0
 800c034:	6363      	str	r3, [r4, #52]	; 0x34
 800c036:	89a3      	ldrh	r3, [r4, #12]
 800c038:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c03c:	81a3      	strh	r3, [r4, #12]
 800c03e:	2300      	movs	r3, #0
 800c040:	6063      	str	r3, [r4, #4]
 800c042:	6923      	ldr	r3, [r4, #16]
 800c044:	6023      	str	r3, [r4, #0]
 800c046:	89a3      	ldrh	r3, [r4, #12]
 800c048:	f043 0308 	orr.w	r3, r3, #8
 800c04c:	81a3      	strh	r3, [r4, #12]
 800c04e:	6923      	ldr	r3, [r4, #16]
 800c050:	b94b      	cbnz	r3, 800c066 <__swsetup_r+0x9a>
 800c052:	89a3      	ldrh	r3, [r4, #12]
 800c054:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c058:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c05c:	d003      	beq.n	800c066 <__swsetup_r+0x9a>
 800c05e:	4621      	mov	r1, r4
 800c060:	4630      	mov	r0, r6
 800c062:	f000 fa09 	bl	800c478 <__smakebuf_r>
 800c066:	89a0      	ldrh	r0, [r4, #12]
 800c068:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c06c:	f010 0301 	ands.w	r3, r0, #1
 800c070:	d00a      	beq.n	800c088 <__swsetup_r+0xbc>
 800c072:	2300      	movs	r3, #0
 800c074:	60a3      	str	r3, [r4, #8]
 800c076:	6963      	ldr	r3, [r4, #20]
 800c078:	425b      	negs	r3, r3
 800c07a:	61a3      	str	r3, [r4, #24]
 800c07c:	6923      	ldr	r3, [r4, #16]
 800c07e:	b943      	cbnz	r3, 800c092 <__swsetup_r+0xc6>
 800c080:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c084:	d1ba      	bne.n	800bffc <__swsetup_r+0x30>
 800c086:	bd70      	pop	{r4, r5, r6, pc}
 800c088:	0781      	lsls	r1, r0, #30
 800c08a:	bf58      	it	pl
 800c08c:	6963      	ldrpl	r3, [r4, #20]
 800c08e:	60a3      	str	r3, [r4, #8]
 800c090:	e7f4      	b.n	800c07c <__swsetup_r+0xb0>
 800c092:	2000      	movs	r0, #0
 800c094:	e7f7      	b.n	800c086 <__swsetup_r+0xba>
 800c096:	bf00      	nop
 800c098:	2000012c 	.word	0x2000012c
 800c09c:	0800cb04 	.word	0x0800cb04
 800c0a0:	0800cb24 	.word	0x0800cb24
 800c0a4:	0800cae4 	.word	0x0800cae4

0800c0a8 <abort>:
 800c0a8:	b508      	push	{r3, lr}
 800c0aa:	2006      	movs	r0, #6
 800c0ac:	f000 fa54 	bl	800c558 <raise>
 800c0b0:	2001      	movs	r0, #1
 800c0b2:	f7f5 fb47 	bl	8001744 <_exit>
	...

0800c0b8 <__sflush_r>:
 800c0b8:	898a      	ldrh	r2, [r1, #12]
 800c0ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0be:	4605      	mov	r5, r0
 800c0c0:	0710      	lsls	r0, r2, #28
 800c0c2:	460c      	mov	r4, r1
 800c0c4:	d458      	bmi.n	800c178 <__sflush_r+0xc0>
 800c0c6:	684b      	ldr	r3, [r1, #4]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	dc05      	bgt.n	800c0d8 <__sflush_r+0x20>
 800c0cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	dc02      	bgt.n	800c0d8 <__sflush_r+0x20>
 800c0d2:	2000      	movs	r0, #0
 800c0d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c0d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c0da:	2e00      	cmp	r6, #0
 800c0dc:	d0f9      	beq.n	800c0d2 <__sflush_r+0x1a>
 800c0de:	2300      	movs	r3, #0
 800c0e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c0e4:	682f      	ldr	r7, [r5, #0]
 800c0e6:	602b      	str	r3, [r5, #0]
 800c0e8:	d032      	beq.n	800c150 <__sflush_r+0x98>
 800c0ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0ec:	89a3      	ldrh	r3, [r4, #12]
 800c0ee:	075a      	lsls	r2, r3, #29
 800c0f0:	d505      	bpl.n	800c0fe <__sflush_r+0x46>
 800c0f2:	6863      	ldr	r3, [r4, #4]
 800c0f4:	1ac0      	subs	r0, r0, r3
 800c0f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0f8:	b10b      	cbz	r3, 800c0fe <__sflush_r+0x46>
 800c0fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0fc:	1ac0      	subs	r0, r0, r3
 800c0fe:	2300      	movs	r3, #0
 800c100:	4602      	mov	r2, r0
 800c102:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c104:	6a21      	ldr	r1, [r4, #32]
 800c106:	4628      	mov	r0, r5
 800c108:	47b0      	blx	r6
 800c10a:	1c43      	adds	r3, r0, #1
 800c10c:	89a3      	ldrh	r3, [r4, #12]
 800c10e:	d106      	bne.n	800c11e <__sflush_r+0x66>
 800c110:	6829      	ldr	r1, [r5, #0]
 800c112:	291d      	cmp	r1, #29
 800c114:	d82c      	bhi.n	800c170 <__sflush_r+0xb8>
 800c116:	4a2a      	ldr	r2, [pc, #168]	; (800c1c0 <__sflush_r+0x108>)
 800c118:	40ca      	lsrs	r2, r1
 800c11a:	07d6      	lsls	r6, r2, #31
 800c11c:	d528      	bpl.n	800c170 <__sflush_r+0xb8>
 800c11e:	2200      	movs	r2, #0
 800c120:	6062      	str	r2, [r4, #4]
 800c122:	04d9      	lsls	r1, r3, #19
 800c124:	6922      	ldr	r2, [r4, #16]
 800c126:	6022      	str	r2, [r4, #0]
 800c128:	d504      	bpl.n	800c134 <__sflush_r+0x7c>
 800c12a:	1c42      	adds	r2, r0, #1
 800c12c:	d101      	bne.n	800c132 <__sflush_r+0x7a>
 800c12e:	682b      	ldr	r3, [r5, #0]
 800c130:	b903      	cbnz	r3, 800c134 <__sflush_r+0x7c>
 800c132:	6560      	str	r0, [r4, #84]	; 0x54
 800c134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c136:	602f      	str	r7, [r5, #0]
 800c138:	2900      	cmp	r1, #0
 800c13a:	d0ca      	beq.n	800c0d2 <__sflush_r+0x1a>
 800c13c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c140:	4299      	cmp	r1, r3
 800c142:	d002      	beq.n	800c14a <__sflush_r+0x92>
 800c144:	4628      	mov	r0, r5
 800c146:	f7ff faa5 	bl	800b694 <_free_r>
 800c14a:	2000      	movs	r0, #0
 800c14c:	6360      	str	r0, [r4, #52]	; 0x34
 800c14e:	e7c1      	b.n	800c0d4 <__sflush_r+0x1c>
 800c150:	6a21      	ldr	r1, [r4, #32]
 800c152:	2301      	movs	r3, #1
 800c154:	4628      	mov	r0, r5
 800c156:	47b0      	blx	r6
 800c158:	1c41      	adds	r1, r0, #1
 800c15a:	d1c7      	bne.n	800c0ec <__sflush_r+0x34>
 800c15c:	682b      	ldr	r3, [r5, #0]
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d0c4      	beq.n	800c0ec <__sflush_r+0x34>
 800c162:	2b1d      	cmp	r3, #29
 800c164:	d001      	beq.n	800c16a <__sflush_r+0xb2>
 800c166:	2b16      	cmp	r3, #22
 800c168:	d101      	bne.n	800c16e <__sflush_r+0xb6>
 800c16a:	602f      	str	r7, [r5, #0]
 800c16c:	e7b1      	b.n	800c0d2 <__sflush_r+0x1a>
 800c16e:	89a3      	ldrh	r3, [r4, #12]
 800c170:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c174:	81a3      	strh	r3, [r4, #12]
 800c176:	e7ad      	b.n	800c0d4 <__sflush_r+0x1c>
 800c178:	690f      	ldr	r7, [r1, #16]
 800c17a:	2f00      	cmp	r7, #0
 800c17c:	d0a9      	beq.n	800c0d2 <__sflush_r+0x1a>
 800c17e:	0793      	lsls	r3, r2, #30
 800c180:	680e      	ldr	r6, [r1, #0]
 800c182:	bf08      	it	eq
 800c184:	694b      	ldreq	r3, [r1, #20]
 800c186:	600f      	str	r7, [r1, #0]
 800c188:	bf18      	it	ne
 800c18a:	2300      	movne	r3, #0
 800c18c:	eba6 0807 	sub.w	r8, r6, r7
 800c190:	608b      	str	r3, [r1, #8]
 800c192:	f1b8 0f00 	cmp.w	r8, #0
 800c196:	dd9c      	ble.n	800c0d2 <__sflush_r+0x1a>
 800c198:	6a21      	ldr	r1, [r4, #32]
 800c19a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c19c:	4643      	mov	r3, r8
 800c19e:	463a      	mov	r2, r7
 800c1a0:	4628      	mov	r0, r5
 800c1a2:	47b0      	blx	r6
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	dc06      	bgt.n	800c1b6 <__sflush_r+0xfe>
 800c1a8:	89a3      	ldrh	r3, [r4, #12]
 800c1aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c1ae:	81a3      	strh	r3, [r4, #12]
 800c1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800c1b4:	e78e      	b.n	800c0d4 <__sflush_r+0x1c>
 800c1b6:	4407      	add	r7, r0
 800c1b8:	eba8 0800 	sub.w	r8, r8, r0
 800c1bc:	e7e9      	b.n	800c192 <__sflush_r+0xda>
 800c1be:	bf00      	nop
 800c1c0:	20400001 	.word	0x20400001

0800c1c4 <_fflush_r>:
 800c1c4:	b538      	push	{r3, r4, r5, lr}
 800c1c6:	690b      	ldr	r3, [r1, #16]
 800c1c8:	4605      	mov	r5, r0
 800c1ca:	460c      	mov	r4, r1
 800c1cc:	b913      	cbnz	r3, 800c1d4 <_fflush_r+0x10>
 800c1ce:	2500      	movs	r5, #0
 800c1d0:	4628      	mov	r0, r5
 800c1d2:	bd38      	pop	{r3, r4, r5, pc}
 800c1d4:	b118      	cbz	r0, 800c1de <_fflush_r+0x1a>
 800c1d6:	6983      	ldr	r3, [r0, #24]
 800c1d8:	b90b      	cbnz	r3, 800c1de <_fflush_r+0x1a>
 800c1da:	f000 f887 	bl	800c2ec <__sinit>
 800c1de:	4b14      	ldr	r3, [pc, #80]	; (800c230 <_fflush_r+0x6c>)
 800c1e0:	429c      	cmp	r4, r3
 800c1e2:	d11b      	bne.n	800c21c <_fflush_r+0x58>
 800c1e4:	686c      	ldr	r4, [r5, #4]
 800c1e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d0ef      	beq.n	800c1ce <_fflush_r+0xa>
 800c1ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c1f0:	07d0      	lsls	r0, r2, #31
 800c1f2:	d404      	bmi.n	800c1fe <_fflush_r+0x3a>
 800c1f4:	0599      	lsls	r1, r3, #22
 800c1f6:	d402      	bmi.n	800c1fe <_fflush_r+0x3a>
 800c1f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1fa:	f000 f915 	bl	800c428 <__retarget_lock_acquire_recursive>
 800c1fe:	4628      	mov	r0, r5
 800c200:	4621      	mov	r1, r4
 800c202:	f7ff ff59 	bl	800c0b8 <__sflush_r>
 800c206:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c208:	07da      	lsls	r2, r3, #31
 800c20a:	4605      	mov	r5, r0
 800c20c:	d4e0      	bmi.n	800c1d0 <_fflush_r+0xc>
 800c20e:	89a3      	ldrh	r3, [r4, #12]
 800c210:	059b      	lsls	r3, r3, #22
 800c212:	d4dd      	bmi.n	800c1d0 <_fflush_r+0xc>
 800c214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c216:	f000 f908 	bl	800c42a <__retarget_lock_release_recursive>
 800c21a:	e7d9      	b.n	800c1d0 <_fflush_r+0xc>
 800c21c:	4b05      	ldr	r3, [pc, #20]	; (800c234 <_fflush_r+0x70>)
 800c21e:	429c      	cmp	r4, r3
 800c220:	d101      	bne.n	800c226 <_fflush_r+0x62>
 800c222:	68ac      	ldr	r4, [r5, #8]
 800c224:	e7df      	b.n	800c1e6 <_fflush_r+0x22>
 800c226:	4b04      	ldr	r3, [pc, #16]	; (800c238 <_fflush_r+0x74>)
 800c228:	429c      	cmp	r4, r3
 800c22a:	bf08      	it	eq
 800c22c:	68ec      	ldreq	r4, [r5, #12]
 800c22e:	e7da      	b.n	800c1e6 <_fflush_r+0x22>
 800c230:	0800cb04 	.word	0x0800cb04
 800c234:	0800cb24 	.word	0x0800cb24
 800c238:	0800cae4 	.word	0x0800cae4

0800c23c <std>:
 800c23c:	2300      	movs	r3, #0
 800c23e:	b510      	push	{r4, lr}
 800c240:	4604      	mov	r4, r0
 800c242:	e9c0 3300 	strd	r3, r3, [r0]
 800c246:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c24a:	6083      	str	r3, [r0, #8]
 800c24c:	8181      	strh	r1, [r0, #12]
 800c24e:	6643      	str	r3, [r0, #100]	; 0x64
 800c250:	81c2      	strh	r2, [r0, #14]
 800c252:	6183      	str	r3, [r0, #24]
 800c254:	4619      	mov	r1, r3
 800c256:	2208      	movs	r2, #8
 800c258:	305c      	adds	r0, #92	; 0x5c
 800c25a:	f7fd fb59 	bl	8009910 <memset>
 800c25e:	4b05      	ldr	r3, [pc, #20]	; (800c274 <std+0x38>)
 800c260:	6263      	str	r3, [r4, #36]	; 0x24
 800c262:	4b05      	ldr	r3, [pc, #20]	; (800c278 <std+0x3c>)
 800c264:	62a3      	str	r3, [r4, #40]	; 0x28
 800c266:	4b05      	ldr	r3, [pc, #20]	; (800c27c <std+0x40>)
 800c268:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c26a:	4b05      	ldr	r3, [pc, #20]	; (800c280 <std+0x44>)
 800c26c:	6224      	str	r4, [r4, #32]
 800c26e:	6323      	str	r3, [r4, #48]	; 0x30
 800c270:	bd10      	pop	{r4, pc}
 800c272:	bf00      	nop
 800c274:	0800c591 	.word	0x0800c591
 800c278:	0800c5b3 	.word	0x0800c5b3
 800c27c:	0800c5eb 	.word	0x0800c5eb
 800c280:	0800c60f 	.word	0x0800c60f

0800c284 <_cleanup_r>:
 800c284:	4901      	ldr	r1, [pc, #4]	; (800c28c <_cleanup_r+0x8>)
 800c286:	f000 b8af 	b.w	800c3e8 <_fwalk_reent>
 800c28a:	bf00      	nop
 800c28c:	0800c1c5 	.word	0x0800c1c5

0800c290 <__sfmoreglue>:
 800c290:	b570      	push	{r4, r5, r6, lr}
 800c292:	2268      	movs	r2, #104	; 0x68
 800c294:	1e4d      	subs	r5, r1, #1
 800c296:	4355      	muls	r5, r2
 800c298:	460e      	mov	r6, r1
 800c29a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c29e:	f7ff fa65 	bl	800b76c <_malloc_r>
 800c2a2:	4604      	mov	r4, r0
 800c2a4:	b140      	cbz	r0, 800c2b8 <__sfmoreglue+0x28>
 800c2a6:	2100      	movs	r1, #0
 800c2a8:	e9c0 1600 	strd	r1, r6, [r0]
 800c2ac:	300c      	adds	r0, #12
 800c2ae:	60a0      	str	r0, [r4, #8]
 800c2b0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c2b4:	f7fd fb2c 	bl	8009910 <memset>
 800c2b8:	4620      	mov	r0, r4
 800c2ba:	bd70      	pop	{r4, r5, r6, pc}

0800c2bc <__sfp_lock_acquire>:
 800c2bc:	4801      	ldr	r0, [pc, #4]	; (800c2c4 <__sfp_lock_acquire+0x8>)
 800c2be:	f000 b8b3 	b.w	800c428 <__retarget_lock_acquire_recursive>
 800c2c2:	bf00      	nop
 800c2c4:	200021e9 	.word	0x200021e9

0800c2c8 <__sfp_lock_release>:
 800c2c8:	4801      	ldr	r0, [pc, #4]	; (800c2d0 <__sfp_lock_release+0x8>)
 800c2ca:	f000 b8ae 	b.w	800c42a <__retarget_lock_release_recursive>
 800c2ce:	bf00      	nop
 800c2d0:	200021e9 	.word	0x200021e9

0800c2d4 <__sinit_lock_acquire>:
 800c2d4:	4801      	ldr	r0, [pc, #4]	; (800c2dc <__sinit_lock_acquire+0x8>)
 800c2d6:	f000 b8a7 	b.w	800c428 <__retarget_lock_acquire_recursive>
 800c2da:	bf00      	nop
 800c2dc:	200021ea 	.word	0x200021ea

0800c2e0 <__sinit_lock_release>:
 800c2e0:	4801      	ldr	r0, [pc, #4]	; (800c2e8 <__sinit_lock_release+0x8>)
 800c2e2:	f000 b8a2 	b.w	800c42a <__retarget_lock_release_recursive>
 800c2e6:	bf00      	nop
 800c2e8:	200021ea 	.word	0x200021ea

0800c2ec <__sinit>:
 800c2ec:	b510      	push	{r4, lr}
 800c2ee:	4604      	mov	r4, r0
 800c2f0:	f7ff fff0 	bl	800c2d4 <__sinit_lock_acquire>
 800c2f4:	69a3      	ldr	r3, [r4, #24]
 800c2f6:	b11b      	cbz	r3, 800c300 <__sinit+0x14>
 800c2f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c2fc:	f7ff bff0 	b.w	800c2e0 <__sinit_lock_release>
 800c300:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c304:	6523      	str	r3, [r4, #80]	; 0x50
 800c306:	4b13      	ldr	r3, [pc, #76]	; (800c354 <__sinit+0x68>)
 800c308:	4a13      	ldr	r2, [pc, #76]	; (800c358 <__sinit+0x6c>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	62a2      	str	r2, [r4, #40]	; 0x28
 800c30e:	42a3      	cmp	r3, r4
 800c310:	bf04      	itt	eq
 800c312:	2301      	moveq	r3, #1
 800c314:	61a3      	streq	r3, [r4, #24]
 800c316:	4620      	mov	r0, r4
 800c318:	f000 f820 	bl	800c35c <__sfp>
 800c31c:	6060      	str	r0, [r4, #4]
 800c31e:	4620      	mov	r0, r4
 800c320:	f000 f81c 	bl	800c35c <__sfp>
 800c324:	60a0      	str	r0, [r4, #8]
 800c326:	4620      	mov	r0, r4
 800c328:	f000 f818 	bl	800c35c <__sfp>
 800c32c:	2200      	movs	r2, #0
 800c32e:	60e0      	str	r0, [r4, #12]
 800c330:	2104      	movs	r1, #4
 800c332:	6860      	ldr	r0, [r4, #4]
 800c334:	f7ff ff82 	bl	800c23c <std>
 800c338:	68a0      	ldr	r0, [r4, #8]
 800c33a:	2201      	movs	r2, #1
 800c33c:	2109      	movs	r1, #9
 800c33e:	f7ff ff7d 	bl	800c23c <std>
 800c342:	68e0      	ldr	r0, [r4, #12]
 800c344:	2202      	movs	r2, #2
 800c346:	2112      	movs	r1, #18
 800c348:	f7ff ff78 	bl	800c23c <std>
 800c34c:	2301      	movs	r3, #1
 800c34e:	61a3      	str	r3, [r4, #24]
 800c350:	e7d2      	b.n	800c2f8 <__sinit+0xc>
 800c352:	bf00      	nop
 800c354:	0800c768 	.word	0x0800c768
 800c358:	0800c285 	.word	0x0800c285

0800c35c <__sfp>:
 800c35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c35e:	4607      	mov	r7, r0
 800c360:	f7ff ffac 	bl	800c2bc <__sfp_lock_acquire>
 800c364:	4b1e      	ldr	r3, [pc, #120]	; (800c3e0 <__sfp+0x84>)
 800c366:	681e      	ldr	r6, [r3, #0]
 800c368:	69b3      	ldr	r3, [r6, #24]
 800c36a:	b913      	cbnz	r3, 800c372 <__sfp+0x16>
 800c36c:	4630      	mov	r0, r6
 800c36e:	f7ff ffbd 	bl	800c2ec <__sinit>
 800c372:	3648      	adds	r6, #72	; 0x48
 800c374:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c378:	3b01      	subs	r3, #1
 800c37a:	d503      	bpl.n	800c384 <__sfp+0x28>
 800c37c:	6833      	ldr	r3, [r6, #0]
 800c37e:	b30b      	cbz	r3, 800c3c4 <__sfp+0x68>
 800c380:	6836      	ldr	r6, [r6, #0]
 800c382:	e7f7      	b.n	800c374 <__sfp+0x18>
 800c384:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c388:	b9d5      	cbnz	r5, 800c3c0 <__sfp+0x64>
 800c38a:	4b16      	ldr	r3, [pc, #88]	; (800c3e4 <__sfp+0x88>)
 800c38c:	60e3      	str	r3, [r4, #12]
 800c38e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c392:	6665      	str	r5, [r4, #100]	; 0x64
 800c394:	f000 f847 	bl	800c426 <__retarget_lock_init_recursive>
 800c398:	f7ff ff96 	bl	800c2c8 <__sfp_lock_release>
 800c39c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c3a0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c3a4:	6025      	str	r5, [r4, #0]
 800c3a6:	61a5      	str	r5, [r4, #24]
 800c3a8:	2208      	movs	r2, #8
 800c3aa:	4629      	mov	r1, r5
 800c3ac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c3b0:	f7fd faae 	bl	8009910 <memset>
 800c3b4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c3b8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c3bc:	4620      	mov	r0, r4
 800c3be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c3c0:	3468      	adds	r4, #104	; 0x68
 800c3c2:	e7d9      	b.n	800c378 <__sfp+0x1c>
 800c3c4:	2104      	movs	r1, #4
 800c3c6:	4638      	mov	r0, r7
 800c3c8:	f7ff ff62 	bl	800c290 <__sfmoreglue>
 800c3cc:	4604      	mov	r4, r0
 800c3ce:	6030      	str	r0, [r6, #0]
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d1d5      	bne.n	800c380 <__sfp+0x24>
 800c3d4:	f7ff ff78 	bl	800c2c8 <__sfp_lock_release>
 800c3d8:	230c      	movs	r3, #12
 800c3da:	603b      	str	r3, [r7, #0]
 800c3dc:	e7ee      	b.n	800c3bc <__sfp+0x60>
 800c3de:	bf00      	nop
 800c3e0:	0800c768 	.word	0x0800c768
 800c3e4:	ffff0001 	.word	0xffff0001

0800c3e8 <_fwalk_reent>:
 800c3e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c3ec:	4606      	mov	r6, r0
 800c3ee:	4688      	mov	r8, r1
 800c3f0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c3f4:	2700      	movs	r7, #0
 800c3f6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c3fa:	f1b9 0901 	subs.w	r9, r9, #1
 800c3fe:	d505      	bpl.n	800c40c <_fwalk_reent+0x24>
 800c400:	6824      	ldr	r4, [r4, #0]
 800c402:	2c00      	cmp	r4, #0
 800c404:	d1f7      	bne.n	800c3f6 <_fwalk_reent+0xe>
 800c406:	4638      	mov	r0, r7
 800c408:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c40c:	89ab      	ldrh	r3, [r5, #12]
 800c40e:	2b01      	cmp	r3, #1
 800c410:	d907      	bls.n	800c422 <_fwalk_reent+0x3a>
 800c412:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c416:	3301      	adds	r3, #1
 800c418:	d003      	beq.n	800c422 <_fwalk_reent+0x3a>
 800c41a:	4629      	mov	r1, r5
 800c41c:	4630      	mov	r0, r6
 800c41e:	47c0      	blx	r8
 800c420:	4307      	orrs	r7, r0
 800c422:	3568      	adds	r5, #104	; 0x68
 800c424:	e7e9      	b.n	800c3fa <_fwalk_reent+0x12>

0800c426 <__retarget_lock_init_recursive>:
 800c426:	4770      	bx	lr

0800c428 <__retarget_lock_acquire_recursive>:
 800c428:	4770      	bx	lr

0800c42a <__retarget_lock_release_recursive>:
 800c42a:	4770      	bx	lr

0800c42c <__swhatbuf_r>:
 800c42c:	b570      	push	{r4, r5, r6, lr}
 800c42e:	460e      	mov	r6, r1
 800c430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c434:	2900      	cmp	r1, #0
 800c436:	b096      	sub	sp, #88	; 0x58
 800c438:	4614      	mov	r4, r2
 800c43a:	461d      	mov	r5, r3
 800c43c:	da08      	bge.n	800c450 <__swhatbuf_r+0x24>
 800c43e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c442:	2200      	movs	r2, #0
 800c444:	602a      	str	r2, [r5, #0]
 800c446:	061a      	lsls	r2, r3, #24
 800c448:	d410      	bmi.n	800c46c <__swhatbuf_r+0x40>
 800c44a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c44e:	e00e      	b.n	800c46e <__swhatbuf_r+0x42>
 800c450:	466a      	mov	r2, sp
 800c452:	f000 f903 	bl	800c65c <_fstat_r>
 800c456:	2800      	cmp	r0, #0
 800c458:	dbf1      	blt.n	800c43e <__swhatbuf_r+0x12>
 800c45a:	9a01      	ldr	r2, [sp, #4]
 800c45c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c460:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c464:	425a      	negs	r2, r3
 800c466:	415a      	adcs	r2, r3
 800c468:	602a      	str	r2, [r5, #0]
 800c46a:	e7ee      	b.n	800c44a <__swhatbuf_r+0x1e>
 800c46c:	2340      	movs	r3, #64	; 0x40
 800c46e:	2000      	movs	r0, #0
 800c470:	6023      	str	r3, [r4, #0]
 800c472:	b016      	add	sp, #88	; 0x58
 800c474:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c478 <__smakebuf_r>:
 800c478:	898b      	ldrh	r3, [r1, #12]
 800c47a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c47c:	079d      	lsls	r5, r3, #30
 800c47e:	4606      	mov	r6, r0
 800c480:	460c      	mov	r4, r1
 800c482:	d507      	bpl.n	800c494 <__smakebuf_r+0x1c>
 800c484:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c488:	6023      	str	r3, [r4, #0]
 800c48a:	6123      	str	r3, [r4, #16]
 800c48c:	2301      	movs	r3, #1
 800c48e:	6163      	str	r3, [r4, #20]
 800c490:	b002      	add	sp, #8
 800c492:	bd70      	pop	{r4, r5, r6, pc}
 800c494:	ab01      	add	r3, sp, #4
 800c496:	466a      	mov	r2, sp
 800c498:	f7ff ffc8 	bl	800c42c <__swhatbuf_r>
 800c49c:	9900      	ldr	r1, [sp, #0]
 800c49e:	4605      	mov	r5, r0
 800c4a0:	4630      	mov	r0, r6
 800c4a2:	f7ff f963 	bl	800b76c <_malloc_r>
 800c4a6:	b948      	cbnz	r0, 800c4bc <__smakebuf_r+0x44>
 800c4a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4ac:	059a      	lsls	r2, r3, #22
 800c4ae:	d4ef      	bmi.n	800c490 <__smakebuf_r+0x18>
 800c4b0:	f023 0303 	bic.w	r3, r3, #3
 800c4b4:	f043 0302 	orr.w	r3, r3, #2
 800c4b8:	81a3      	strh	r3, [r4, #12]
 800c4ba:	e7e3      	b.n	800c484 <__smakebuf_r+0xc>
 800c4bc:	4b0d      	ldr	r3, [pc, #52]	; (800c4f4 <__smakebuf_r+0x7c>)
 800c4be:	62b3      	str	r3, [r6, #40]	; 0x28
 800c4c0:	89a3      	ldrh	r3, [r4, #12]
 800c4c2:	6020      	str	r0, [r4, #0]
 800c4c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4c8:	81a3      	strh	r3, [r4, #12]
 800c4ca:	9b00      	ldr	r3, [sp, #0]
 800c4cc:	6163      	str	r3, [r4, #20]
 800c4ce:	9b01      	ldr	r3, [sp, #4]
 800c4d0:	6120      	str	r0, [r4, #16]
 800c4d2:	b15b      	cbz	r3, 800c4ec <__smakebuf_r+0x74>
 800c4d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4d8:	4630      	mov	r0, r6
 800c4da:	f000 f8d1 	bl	800c680 <_isatty_r>
 800c4de:	b128      	cbz	r0, 800c4ec <__smakebuf_r+0x74>
 800c4e0:	89a3      	ldrh	r3, [r4, #12]
 800c4e2:	f023 0303 	bic.w	r3, r3, #3
 800c4e6:	f043 0301 	orr.w	r3, r3, #1
 800c4ea:	81a3      	strh	r3, [r4, #12]
 800c4ec:	89a0      	ldrh	r0, [r4, #12]
 800c4ee:	4305      	orrs	r5, r0
 800c4f0:	81a5      	strh	r5, [r4, #12]
 800c4f2:	e7cd      	b.n	800c490 <__smakebuf_r+0x18>
 800c4f4:	0800c285 	.word	0x0800c285

0800c4f8 <_malloc_usable_size_r>:
 800c4f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c4fc:	1f18      	subs	r0, r3, #4
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	bfbc      	itt	lt
 800c502:	580b      	ldrlt	r3, [r1, r0]
 800c504:	18c0      	addlt	r0, r0, r3
 800c506:	4770      	bx	lr

0800c508 <_raise_r>:
 800c508:	291f      	cmp	r1, #31
 800c50a:	b538      	push	{r3, r4, r5, lr}
 800c50c:	4604      	mov	r4, r0
 800c50e:	460d      	mov	r5, r1
 800c510:	d904      	bls.n	800c51c <_raise_r+0x14>
 800c512:	2316      	movs	r3, #22
 800c514:	6003      	str	r3, [r0, #0]
 800c516:	f04f 30ff 	mov.w	r0, #4294967295
 800c51a:	bd38      	pop	{r3, r4, r5, pc}
 800c51c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c51e:	b112      	cbz	r2, 800c526 <_raise_r+0x1e>
 800c520:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c524:	b94b      	cbnz	r3, 800c53a <_raise_r+0x32>
 800c526:	4620      	mov	r0, r4
 800c528:	f000 f830 	bl	800c58c <_getpid_r>
 800c52c:	462a      	mov	r2, r5
 800c52e:	4601      	mov	r1, r0
 800c530:	4620      	mov	r0, r4
 800c532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c536:	f000 b817 	b.w	800c568 <_kill_r>
 800c53a:	2b01      	cmp	r3, #1
 800c53c:	d00a      	beq.n	800c554 <_raise_r+0x4c>
 800c53e:	1c59      	adds	r1, r3, #1
 800c540:	d103      	bne.n	800c54a <_raise_r+0x42>
 800c542:	2316      	movs	r3, #22
 800c544:	6003      	str	r3, [r0, #0]
 800c546:	2001      	movs	r0, #1
 800c548:	e7e7      	b.n	800c51a <_raise_r+0x12>
 800c54a:	2400      	movs	r4, #0
 800c54c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c550:	4628      	mov	r0, r5
 800c552:	4798      	blx	r3
 800c554:	2000      	movs	r0, #0
 800c556:	e7e0      	b.n	800c51a <_raise_r+0x12>

0800c558 <raise>:
 800c558:	4b02      	ldr	r3, [pc, #8]	; (800c564 <raise+0xc>)
 800c55a:	4601      	mov	r1, r0
 800c55c:	6818      	ldr	r0, [r3, #0]
 800c55e:	f7ff bfd3 	b.w	800c508 <_raise_r>
 800c562:	bf00      	nop
 800c564:	2000012c 	.word	0x2000012c

0800c568 <_kill_r>:
 800c568:	b538      	push	{r3, r4, r5, lr}
 800c56a:	4d07      	ldr	r5, [pc, #28]	; (800c588 <_kill_r+0x20>)
 800c56c:	2300      	movs	r3, #0
 800c56e:	4604      	mov	r4, r0
 800c570:	4608      	mov	r0, r1
 800c572:	4611      	mov	r1, r2
 800c574:	602b      	str	r3, [r5, #0]
 800c576:	f7f5 f8d5 	bl	8001724 <_kill>
 800c57a:	1c43      	adds	r3, r0, #1
 800c57c:	d102      	bne.n	800c584 <_kill_r+0x1c>
 800c57e:	682b      	ldr	r3, [r5, #0]
 800c580:	b103      	cbz	r3, 800c584 <_kill_r+0x1c>
 800c582:	6023      	str	r3, [r4, #0]
 800c584:	bd38      	pop	{r3, r4, r5, pc}
 800c586:	bf00      	nop
 800c588:	200021e4 	.word	0x200021e4

0800c58c <_getpid_r>:
 800c58c:	f7f5 b8c2 	b.w	8001714 <_getpid>

0800c590 <__sread>:
 800c590:	b510      	push	{r4, lr}
 800c592:	460c      	mov	r4, r1
 800c594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c598:	f000 f894 	bl	800c6c4 <_read_r>
 800c59c:	2800      	cmp	r0, #0
 800c59e:	bfab      	itete	ge
 800c5a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c5a2:	89a3      	ldrhlt	r3, [r4, #12]
 800c5a4:	181b      	addge	r3, r3, r0
 800c5a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c5aa:	bfac      	ite	ge
 800c5ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800c5ae:	81a3      	strhlt	r3, [r4, #12]
 800c5b0:	bd10      	pop	{r4, pc}

0800c5b2 <__swrite>:
 800c5b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c5b6:	461f      	mov	r7, r3
 800c5b8:	898b      	ldrh	r3, [r1, #12]
 800c5ba:	05db      	lsls	r3, r3, #23
 800c5bc:	4605      	mov	r5, r0
 800c5be:	460c      	mov	r4, r1
 800c5c0:	4616      	mov	r6, r2
 800c5c2:	d505      	bpl.n	800c5d0 <__swrite+0x1e>
 800c5c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5c8:	2302      	movs	r3, #2
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	f000 f868 	bl	800c6a0 <_lseek_r>
 800c5d0:	89a3      	ldrh	r3, [r4, #12]
 800c5d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c5d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c5da:	81a3      	strh	r3, [r4, #12]
 800c5dc:	4632      	mov	r2, r6
 800c5de:	463b      	mov	r3, r7
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c5e6:	f000 b817 	b.w	800c618 <_write_r>

0800c5ea <__sseek>:
 800c5ea:	b510      	push	{r4, lr}
 800c5ec:	460c      	mov	r4, r1
 800c5ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c5f2:	f000 f855 	bl	800c6a0 <_lseek_r>
 800c5f6:	1c43      	adds	r3, r0, #1
 800c5f8:	89a3      	ldrh	r3, [r4, #12]
 800c5fa:	bf15      	itete	ne
 800c5fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800c5fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c602:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c606:	81a3      	strheq	r3, [r4, #12]
 800c608:	bf18      	it	ne
 800c60a:	81a3      	strhne	r3, [r4, #12]
 800c60c:	bd10      	pop	{r4, pc}

0800c60e <__sclose>:
 800c60e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c612:	f000 b813 	b.w	800c63c <_close_r>
	...

0800c618 <_write_r>:
 800c618:	b538      	push	{r3, r4, r5, lr}
 800c61a:	4d07      	ldr	r5, [pc, #28]	; (800c638 <_write_r+0x20>)
 800c61c:	4604      	mov	r4, r0
 800c61e:	4608      	mov	r0, r1
 800c620:	4611      	mov	r1, r2
 800c622:	2200      	movs	r2, #0
 800c624:	602a      	str	r2, [r5, #0]
 800c626:	461a      	mov	r2, r3
 800c628:	f7f5 f8b3 	bl	8001792 <_write>
 800c62c:	1c43      	adds	r3, r0, #1
 800c62e:	d102      	bne.n	800c636 <_write_r+0x1e>
 800c630:	682b      	ldr	r3, [r5, #0]
 800c632:	b103      	cbz	r3, 800c636 <_write_r+0x1e>
 800c634:	6023      	str	r3, [r4, #0]
 800c636:	bd38      	pop	{r3, r4, r5, pc}
 800c638:	200021e4 	.word	0x200021e4

0800c63c <_close_r>:
 800c63c:	b538      	push	{r3, r4, r5, lr}
 800c63e:	4d06      	ldr	r5, [pc, #24]	; (800c658 <_close_r+0x1c>)
 800c640:	2300      	movs	r3, #0
 800c642:	4604      	mov	r4, r0
 800c644:	4608      	mov	r0, r1
 800c646:	602b      	str	r3, [r5, #0]
 800c648:	f7f5 f8bf 	bl	80017ca <_close>
 800c64c:	1c43      	adds	r3, r0, #1
 800c64e:	d102      	bne.n	800c656 <_close_r+0x1a>
 800c650:	682b      	ldr	r3, [r5, #0]
 800c652:	b103      	cbz	r3, 800c656 <_close_r+0x1a>
 800c654:	6023      	str	r3, [r4, #0]
 800c656:	bd38      	pop	{r3, r4, r5, pc}
 800c658:	200021e4 	.word	0x200021e4

0800c65c <_fstat_r>:
 800c65c:	b538      	push	{r3, r4, r5, lr}
 800c65e:	4d07      	ldr	r5, [pc, #28]	; (800c67c <_fstat_r+0x20>)
 800c660:	2300      	movs	r3, #0
 800c662:	4604      	mov	r4, r0
 800c664:	4608      	mov	r0, r1
 800c666:	4611      	mov	r1, r2
 800c668:	602b      	str	r3, [r5, #0]
 800c66a:	f7f5 f8ba 	bl	80017e2 <_fstat>
 800c66e:	1c43      	adds	r3, r0, #1
 800c670:	d102      	bne.n	800c678 <_fstat_r+0x1c>
 800c672:	682b      	ldr	r3, [r5, #0]
 800c674:	b103      	cbz	r3, 800c678 <_fstat_r+0x1c>
 800c676:	6023      	str	r3, [r4, #0]
 800c678:	bd38      	pop	{r3, r4, r5, pc}
 800c67a:	bf00      	nop
 800c67c:	200021e4 	.word	0x200021e4

0800c680 <_isatty_r>:
 800c680:	b538      	push	{r3, r4, r5, lr}
 800c682:	4d06      	ldr	r5, [pc, #24]	; (800c69c <_isatty_r+0x1c>)
 800c684:	2300      	movs	r3, #0
 800c686:	4604      	mov	r4, r0
 800c688:	4608      	mov	r0, r1
 800c68a:	602b      	str	r3, [r5, #0]
 800c68c:	f7f5 f8b9 	bl	8001802 <_isatty>
 800c690:	1c43      	adds	r3, r0, #1
 800c692:	d102      	bne.n	800c69a <_isatty_r+0x1a>
 800c694:	682b      	ldr	r3, [r5, #0]
 800c696:	b103      	cbz	r3, 800c69a <_isatty_r+0x1a>
 800c698:	6023      	str	r3, [r4, #0]
 800c69a:	bd38      	pop	{r3, r4, r5, pc}
 800c69c:	200021e4 	.word	0x200021e4

0800c6a0 <_lseek_r>:
 800c6a0:	b538      	push	{r3, r4, r5, lr}
 800c6a2:	4d07      	ldr	r5, [pc, #28]	; (800c6c0 <_lseek_r+0x20>)
 800c6a4:	4604      	mov	r4, r0
 800c6a6:	4608      	mov	r0, r1
 800c6a8:	4611      	mov	r1, r2
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	602a      	str	r2, [r5, #0]
 800c6ae:	461a      	mov	r2, r3
 800c6b0:	f7f5 f8b2 	bl	8001818 <_lseek>
 800c6b4:	1c43      	adds	r3, r0, #1
 800c6b6:	d102      	bne.n	800c6be <_lseek_r+0x1e>
 800c6b8:	682b      	ldr	r3, [r5, #0]
 800c6ba:	b103      	cbz	r3, 800c6be <_lseek_r+0x1e>
 800c6bc:	6023      	str	r3, [r4, #0]
 800c6be:	bd38      	pop	{r3, r4, r5, pc}
 800c6c0:	200021e4 	.word	0x200021e4

0800c6c4 <_read_r>:
 800c6c4:	b538      	push	{r3, r4, r5, lr}
 800c6c6:	4d07      	ldr	r5, [pc, #28]	; (800c6e4 <_read_r+0x20>)
 800c6c8:	4604      	mov	r4, r0
 800c6ca:	4608      	mov	r0, r1
 800c6cc:	4611      	mov	r1, r2
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	602a      	str	r2, [r5, #0]
 800c6d2:	461a      	mov	r2, r3
 800c6d4:	f7f5 f840 	bl	8001758 <_read>
 800c6d8:	1c43      	adds	r3, r0, #1
 800c6da:	d102      	bne.n	800c6e2 <_read_r+0x1e>
 800c6dc:	682b      	ldr	r3, [r5, #0]
 800c6de:	b103      	cbz	r3, 800c6e2 <_read_r+0x1e>
 800c6e0:	6023      	str	r3, [r4, #0]
 800c6e2:	bd38      	pop	{r3, r4, r5, pc}
 800c6e4:	200021e4 	.word	0x200021e4

0800c6e8 <_init>:
 800c6e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6ea:	bf00      	nop
 800c6ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6ee:	bc08      	pop	{r3}
 800c6f0:	469e      	mov	lr, r3
 800c6f2:	4770      	bx	lr

0800c6f4 <_fini>:
 800c6f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6f6:	bf00      	nop
 800c6f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6fa:	bc08      	pop	{r3}
 800c6fc:	469e      	mov	lr, r3
 800c6fe:	4770      	bx	lr
