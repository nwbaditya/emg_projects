
emg_projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f364  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000590  0800f508  0800f508  0001f508  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa98  0800fa98  000202f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa98  0800fa98  0001fa98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800faa0  0800faa0  000202f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800faa0  0800faa0  0001faa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800faa4  0800faa4  0001faa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002f8  20000000  0800faa8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fe4  200002f8  0800fda0  000202f8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200022dc  0800fda0  000222dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b882  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043cd  00000000  00000000  0003bbaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  0003ff78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001538  00000000  00000000  000416b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb4b  00000000  00000000  00042be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ead6  00000000  00000000  0005e733  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f790  00000000  00000000  0007d209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c999  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007624  00000000  00000000  0011c9ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002f8 	.word	0x200002f8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f4ec 	.word	0x0800f4ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002fc 	.word	0x200002fc
 80001dc:	0800f4ec 	.word	0x0800f4ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100e:	463b      	mov	r3, r7
 8001010:	2200      	movs	r2, #0
 8001012:	601a      	str	r2, [r3, #0]
 8001014:	605a      	str	r2, [r3, #4]
 8001016:	609a      	str	r2, [r3, #8]
 8001018:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800101a:	4b30      	ldr	r3, [pc, #192]	; (80010dc <MX_ADC1_Init+0xd4>)
 800101c:	4a30      	ldr	r2, [pc, #192]	; (80010e0 <MX_ADC1_Init+0xd8>)
 800101e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001020:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <MX_ADC1_Init+0xd4>)
 8001022:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001026:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001028:	4b2c      	ldr	r3, [pc, #176]	; (80010dc <MX_ADC1_Init+0xd4>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800102e:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <MX_ADC1_Init+0xd4>)
 8001030:	2201      	movs	r2, #1
 8001032:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001034:	4b29      	ldr	r3, [pc, #164]	; (80010dc <MX_ADC1_Init+0xd4>)
 8001036:	2201      	movs	r2, #1
 8001038:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103a:	4b28      	ldr	r3, [pc, #160]	; (80010dc <MX_ADC1_Init+0xd4>)
 800103c:	2200      	movs	r2, #0
 800103e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <MX_ADC1_Init+0xd4>)
 8001044:	2200      	movs	r2, #0
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001048:	4b24      	ldr	r3, [pc, #144]	; (80010dc <MX_ADC1_Init+0xd4>)
 800104a:	4a26      	ldr	r2, [pc, #152]	; (80010e4 <MX_ADC1_Init+0xdc>)
 800104c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800104e:	4b23      	ldr	r3, [pc, #140]	; (80010dc <MX_ADC1_Init+0xd4>)
 8001050:	2200      	movs	r2, #0
 8001052:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <MX_ADC1_Init+0xd4>)
 8001056:	2203      	movs	r2, #3
 8001058:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800105a:	4b20      	ldr	r3, [pc, #128]	; (80010dc <MX_ADC1_Init+0xd4>)
 800105c:	2201      	movs	r2, #1
 800105e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001062:	4b1e      	ldr	r3, [pc, #120]	; (80010dc <MX_ADC1_Init+0xd4>)
 8001064:	2201      	movs	r2, #1
 8001066:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001068:	481c      	ldr	r0, [pc, #112]	; (80010dc <MX_ADC1_Init+0xd4>)
 800106a:	f001 fb33 	bl	80026d4 <HAL_ADC_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001074:	f000 ff2c 	bl	8001ed0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001078:	2301      	movs	r3, #1
 800107a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800107c:	2301      	movs	r3, #1
 800107e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001080:	2305      	movs	r3, #5
 8001082:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001084:	463b      	mov	r3, r7
 8001086:	4619      	mov	r1, r3
 8001088:	4814      	ldr	r0, [pc, #80]	; (80010dc <MX_ADC1_Init+0xd4>)
 800108a:	f001 fd85 	bl	8002b98 <HAL_ADC_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001094:	f000 ff1c 	bl	8001ed0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001098:	2304      	movs	r3, #4
 800109a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800109c:	2302      	movs	r3, #2
 800109e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80010a0:	2303      	movs	r3, #3
 80010a2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a4:	463b      	mov	r3, r7
 80010a6:	4619      	mov	r1, r3
 80010a8:	480c      	ldr	r0, [pc, #48]	; (80010dc <MX_ADC1_Init+0xd4>)
 80010aa:	f001 fd75 	bl	8002b98 <HAL_ADC_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 80010b4:	f000 ff0c 	bl	8001ed0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80010b8:	2305      	movs	r3, #5
 80010ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80010bc:	2303      	movs	r3, #3
 80010be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	4619      	mov	r1, r3
 80010c4:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_ADC1_Init+0xd4>)
 80010c6:	f001 fd67 	bl	8002b98 <HAL_ADC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 80010d0:	f000 fefe 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	3710      	adds	r7, #16
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000314 	.word	0x20000314
 80010e0:	40012000 	.word	0x40012000
 80010e4:	0f000001 	.word	0x0f000001

080010e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	; 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a33      	ldr	r2, [pc, #204]	; (80011d4 <HAL_ADC_MspInit+0xec>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d15f      	bne.n	80011ca <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	4b32      	ldr	r3, [pc, #200]	; (80011d8 <HAL_ADC_MspInit+0xf0>)
 8001110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001112:	4a31      	ldr	r2, [pc, #196]	; (80011d8 <HAL_ADC_MspInit+0xf0>)
 8001114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001118:	6453      	str	r3, [r2, #68]	; 0x44
 800111a:	4b2f      	ldr	r3, [pc, #188]	; (80011d8 <HAL_ADC_MspInit+0xf0>)
 800111c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001122:	613b      	str	r3, [r7, #16]
 8001124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <HAL_ADC_MspInit+0xf0>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	4a2a      	ldr	r2, [pc, #168]	; (80011d8 <HAL_ADC_MspInit+0xf0>)
 8001130:	f043 0301 	orr.w	r3, r3, #1
 8001134:	6313      	str	r3, [r2, #48]	; 0x30
 8001136:	4b28      	ldr	r3, [pc, #160]	; (80011d8 <HAL_ADC_MspInit+0xf0>)
 8001138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113a:	f003 0301 	and.w	r3, r3, #1
 800113e:	60fb      	str	r3, [r7, #12]
 8001140:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001142:	2332      	movs	r3, #50	; 0x32
 8001144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001146:	2303      	movs	r3, #3
 8001148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114a:	2300      	movs	r3, #0
 800114c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	4821      	ldr	r0, [pc, #132]	; (80011dc <HAL_ADC_MspInit+0xf4>)
 8001156:	f002 fc4b 	bl	80039f0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800115a:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <HAL_ADC_MspInit+0xf8>)
 800115c:	4a21      	ldr	r2, [pc, #132]	; (80011e4 <HAL_ADC_MspInit+0xfc>)
 800115e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001160:	4b1f      	ldr	r3, [pc, #124]	; (80011e0 <HAL_ADC_MspInit+0xf8>)
 8001162:	2200      	movs	r2, #0
 8001164:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001166:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <HAL_ADC_MspInit+0xf8>)
 8001168:	2200      	movs	r2, #0
 800116a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800116c:	4b1c      	ldr	r3, [pc, #112]	; (80011e0 <HAL_ADC_MspInit+0xf8>)
 800116e:	2200      	movs	r2, #0
 8001170:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001172:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <HAL_ADC_MspInit+0xf8>)
 8001174:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001178:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <HAL_ADC_MspInit+0xf8>)
 800117c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001180:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001182:	4b17      	ldr	r3, [pc, #92]	; (80011e0 <HAL_ADC_MspInit+0xf8>)
 8001184:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001188:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800118a:	4b15      	ldr	r3, [pc, #84]	; (80011e0 <HAL_ADC_MspInit+0xf8>)
 800118c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001190:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001192:	4b13      	ldr	r3, [pc, #76]	; (80011e0 <HAL_ADC_MspInit+0xf8>)
 8001194:	2200      	movs	r2, #0
 8001196:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001198:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <HAL_ADC_MspInit+0xf8>)
 800119a:	2200      	movs	r2, #0
 800119c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800119e:	4810      	ldr	r0, [pc, #64]	; (80011e0 <HAL_ADC_MspInit+0xf8>)
 80011a0:	f002 f8b6 	bl	8003310 <HAL_DMA_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80011aa:	f000 fe91 	bl	8001ed0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a0b      	ldr	r2, [pc, #44]	; (80011e0 <HAL_ADC_MspInit+0xf8>)
 80011b2:	639a      	str	r2, [r3, #56]	; 0x38
 80011b4:	4a0a      	ldr	r2, [pc, #40]	; (80011e0 <HAL_ADC_MspInit+0xf8>)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2012      	movs	r0, #18
 80011c0:	f002 f86f 	bl	80032a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80011c4:	2012      	movs	r0, #18
 80011c6:	f002 f888 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40012000 	.word	0x40012000
 80011d8:	40023800 	.word	0x40023800
 80011dc:	40020000 	.word	0x40020000
 80011e0:	2000035c 	.word	0x2000035c
 80011e4:	40026410 	.word	0x40026410

080011e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	607b      	str	r3, [r7, #4]
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_DMA_Init+0x3c>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <MX_DMA_Init+0x3c>)
 80011f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_DMA_Init+0x3c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001206:	607b      	str	r3, [r7, #4]
 8001208:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	2038      	movs	r0, #56	; 0x38
 8001210:	f002 f847 	bl	80032a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001214:	2038      	movs	r0, #56	; 0x38
 8001216:	f002 f860 	bl	80032da <HAL_NVIC_EnableIRQ>

}
 800121a:	bf00      	nop
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800

08001228 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
 800123c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	2300      	movs	r3, #0
 8001240:	613b      	str	r3, [r7, #16]
 8001242:	4b2e      	ldr	r3, [pc, #184]	; (80012fc <MX_GPIO_Init+0xd4>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	4a2d      	ldr	r2, [pc, #180]	; (80012fc <MX_GPIO_Init+0xd4>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	6313      	str	r3, [r2, #48]	; 0x30
 800124e:	4b2b      	ldr	r3, [pc, #172]	; (80012fc <MX_GPIO_Init+0xd4>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	613b      	str	r3, [r7, #16]
 8001258:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	60fb      	str	r3, [r7, #12]
 800125e:	4b27      	ldr	r3, [pc, #156]	; (80012fc <MX_GPIO_Init+0xd4>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	4a26      	ldr	r2, [pc, #152]	; (80012fc <MX_GPIO_Init+0xd4>)
 8001264:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001268:	6313      	str	r3, [r2, #48]	; 0x30
 800126a:	4b24      	ldr	r3, [pc, #144]	; (80012fc <MX_GPIO_Init+0xd4>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001272:	60fb      	str	r3, [r7, #12]
 8001274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60bb      	str	r3, [r7, #8]
 800127a:	4b20      	ldr	r3, [pc, #128]	; (80012fc <MX_GPIO_Init+0xd4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127e:	4a1f      	ldr	r2, [pc, #124]	; (80012fc <MX_GPIO_Init+0xd4>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6313      	str	r3, [r2, #48]	; 0x30
 8001286:	4b1d      	ldr	r3, [pc, #116]	; (80012fc <MX_GPIO_Init+0xd4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	60bb      	str	r3, [r7, #8]
 8001290:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	607b      	str	r3, [r7, #4]
 8001296:	4b19      	ldr	r3, [pc, #100]	; (80012fc <MX_GPIO_Init+0xd4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a18      	ldr	r2, [pc, #96]	; (80012fc <MX_GPIO_Init+0xd4>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b16      	ldr	r3, [pc, #88]	; (80012fc <MX_GPIO_Init+0xd4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	607b      	str	r3, [r7, #4]
 80012ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012ae:	2301      	movs	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012b2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	480f      	ldr	r0, [pc, #60]	; (8001300 <MX_GPIO_Init+0xd8>)
 80012c4:	f002 fb94 	bl	80039f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80012c8:	231e      	movs	r3, #30
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012cc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012d6:	f107 0314 	add.w	r3, r7, #20
 80012da:	4619      	mov	r1, r3
 80012dc:	4809      	ldr	r0, [pc, #36]	; (8001304 <MX_GPIO_Init+0xdc>)
 80012de:	f002 fb87 	bl	80039f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2006      	movs	r0, #6
 80012e8:	f001 ffdb 	bl	80032a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012ec:	2006      	movs	r0, #6
 80012ee:	f001 fff4 	bl	80032da <HAL_NVIC_EnableIRQ>

}
 80012f2:	bf00      	nop
 80012f4:	3728      	adds	r7, #40	; 0x28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800
 8001300:	40020000 	.word	0x40020000
 8001304:	40020400 	.word	0x40020400

08001308 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800130c:	4b12      	ldr	r3, [pc, #72]	; (8001358 <MX_I2C1_Init+0x50>)
 800130e:	4a13      	ldr	r2, [pc, #76]	; (800135c <MX_I2C1_Init+0x54>)
 8001310:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001312:	4b11      	ldr	r3, [pc, #68]	; (8001358 <MX_I2C1_Init+0x50>)
 8001314:	4a12      	ldr	r2, [pc, #72]	; (8001360 <MX_I2C1_Init+0x58>)
 8001316:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001318:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <MX_I2C1_Init+0x50>)
 800131a:	2200      	movs	r2, #0
 800131c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800131e:	4b0e      	ldr	r3, [pc, #56]	; (8001358 <MX_I2C1_Init+0x50>)
 8001320:	2200      	movs	r2, #0
 8001322:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001324:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <MX_I2C1_Init+0x50>)
 8001326:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800132a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800132c:	4b0a      	ldr	r3, [pc, #40]	; (8001358 <MX_I2C1_Init+0x50>)
 800132e:	2200      	movs	r2, #0
 8001330:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <MX_I2C1_Init+0x50>)
 8001334:	2200      	movs	r2, #0
 8001336:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <MX_I2C1_Init+0x50>)
 800133a:	2200      	movs	r2, #0
 800133c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <MX_I2C1_Init+0x50>)
 8001340:	2200      	movs	r2, #0
 8001342:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001344:	4804      	ldr	r0, [pc, #16]	; (8001358 <MX_I2C1_Init+0x50>)
 8001346:	f002 fcef 	bl	8003d28 <HAL_I2C_Init>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001350:	f000 fdbe 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	bd80      	pop	{r7, pc}
 8001358:	200003bc 	.word	0x200003bc
 800135c:	40005400 	.word	0x40005400
 8001360:	000186a0 	.word	0x000186a0

08001364 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a19      	ldr	r2, [pc, #100]	; (80013e8 <HAL_I2C_MspInit+0x84>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d12b      	bne.n	80013de <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	4b18      	ldr	r3, [pc, #96]	; (80013ec <HAL_I2C_MspInit+0x88>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a17      	ldr	r2, [pc, #92]	; (80013ec <HAL_I2C_MspInit+0x88>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b15      	ldr	r3, [pc, #84]	; (80013ec <HAL_I2C_MspInit+0x88>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80013a2:	23c0      	movs	r3, #192	; 0xc0
 80013a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013a6:	2312      	movs	r3, #18
 80013a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013ae:	2303      	movs	r3, #3
 80013b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013b2:	2304      	movs	r3, #4
 80013b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013b6:	f107 0314 	add.w	r3, r7, #20
 80013ba:	4619      	mov	r1, r3
 80013bc:	480c      	ldr	r0, [pc, #48]	; (80013f0 <HAL_I2C_MspInit+0x8c>)
 80013be:	f002 fb17 	bl	80039f0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	4b09      	ldr	r3, [pc, #36]	; (80013ec <HAL_I2C_MspInit+0x88>)
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ca:	4a08      	ldr	r2, [pc, #32]	; (80013ec <HAL_I2C_MspInit+0x88>)
 80013cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013d0:	6413      	str	r3, [r2, #64]	; 0x40
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_I2C_MspInit+0x88>)
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013da:	60fb      	str	r3, [r7, #12]
 80013dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80013de:	bf00      	nop
 80013e0:	3728      	adds	r7, #40	; 0x28
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	40005400 	.word	0x40005400
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40020400 	.word	0x40020400

080013f4 <Signal_Buf_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Signal_Buf_Init(SignalFeature_t *signal){
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
	//Clear Filter Buffer
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 80013fc:	2300      	movs	r3, #0
 80013fe:	73fb      	strb	r3, [r7, #15]
 8001400:	e009      	b.n	8001416 <Signal_Buf_Init+0x22>
		signal->buf[n] = 0.0f;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	009b      	lsls	r3, r3, #2
 8001408:	4413      	add	r3, r2
 800140a:	f04f 0200 	mov.w	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 8001410:	7bfb      	ldrb	r3, [r7, #15]
 8001412:	3301      	adds	r3, #1
 8001414:	73fb      	strb	r3, [r7, #15]
 8001416:	7bfb      	ldrb	r3, [r7, #15]
 8001418:	2b31      	cmp	r3, #49	; 0x31
 800141a:	d9f2      	bls.n	8001402 <Signal_Buf_Init+0xe>
	}

	//Clear Buf Index
	signal->bufIndex = 0;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	2200      	movs	r2, #0
 8001420:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

	//Clear Filter Output
	signal->power = 0.0f;
 8001424:	6879      	ldr	r1, [r7, #4]
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
}
 8001432:	bf00      	nop
 8001434:	3714      	adds	r7, #20
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <Signal_Buf_Update>:

void Signal_Buf_Update(SignalFeature_t *signal, float inp){
 800143e:	b480      	push	{r7}
 8001440:	b083      	sub	sp, #12
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	ed87 0a00 	vstr	s0, [r7]
	/*Store Latest Sample in buffer */
	signal->buf[signal->bufIndex] = inp;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	4413      	add	r3, r2
 8001456:	683a      	ldr	r2, [r7, #0]
 8001458:	601a      	str	r2, [r3, #0]

	/*increment buffer index and wrap around if necessary*/
	signal->bufIndex++;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8001460:	3301      	adds	r3, #1
 8001462:	b2da      	uxtb	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

	if(signal->bufIndex == SIGNAL_SAMPLES_LENGTH){
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 8001470:	2b32      	cmp	r3, #50	; 0x32
 8001472:	d103      	bne.n	800147c <Signal_Buf_Update+0x3e>
		signal->bufIndex = 0;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2200      	movs	r2, #0
 8001478:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	}
}
 800147c:	bf00      	nop
 800147e:	370c      	adds	r7, #12
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <Signal_power_Calculate>:

float Signal_power_Calculate(SignalFeature_t *signal){
 8001488:	b5b0      	push	{r4, r5, r7, lr}
 800148a:	b084      	sub	sp, #16
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	signal->power = 0.0f;
 8001490:	6879      	ldr	r1, [r7, #4]
 8001492:	f04f 0200 	mov.w	r2, #0
 8001496:	f04f 0300 	mov.w	r3, #0
 800149a:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0

	uint8_t sumIndex = signal->bufIndex;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80014a4:	73fb      	strb	r3, [r7, #15]
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 80014a6:	2300      	movs	r3, #0
 80014a8:	73bb      	strb	r3, [r7, #14]
 80014aa:	e02b      	b.n	8001504 <Signal_power_Calculate+0x7c>
		/*Decrement Index and Wrap if Necessary*/
		if(sumIndex < SIGNAL_SAMPLES_LENGTH -1){
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
 80014ae:	2b30      	cmp	r3, #48	; 0x30
 80014b0:	d803      	bhi.n	80014ba <Signal_power_Calculate+0x32>
			sumIndex++;
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	3301      	adds	r3, #1
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	e001      	b.n	80014be <Signal_power_Calculate+0x36>
		}else{
			sumIndex = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	73fb      	strb	r3, [r7, #15]
		}

		/*Multiply Impulse Response with Shifted input sample and add to output*/
		signal->power += (signal->buf[n] * signal->buf[n]);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	e9d3 4534 	ldrd	r4, r5, [r3, #208]	; 0xd0
 80014c4:	7bbb      	ldrb	r3, [r7, #14]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	4413      	add	r3, r2
 80014cc:	ed93 7a00 	vldr	s14, [r3]
 80014d0:	7bbb      	ldrb	r3, [r7, #14]
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	4413      	add	r3, r2
 80014d8:	edd3 7a00 	vldr	s15, [r3]
 80014dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014e0:	ee17 0a90 	vmov	r0, s15
 80014e4:	f7ff f838 	bl	8000558 <__aeabi_f2d>
 80014e8:	4602      	mov	r2, r0
 80014ea:	460b      	mov	r3, r1
 80014ec:	4620      	mov	r0, r4
 80014ee:	4629      	mov	r1, r5
 80014f0:	f7fe fed4 	bl	800029c <__adddf3>
 80014f4:	4602      	mov	r2, r0
 80014f6:	460b      	mov	r3, r1
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 80014fe:	7bbb      	ldrb	r3, [r7, #14]
 8001500:	3301      	adds	r3, #1
 8001502:	73bb      	strb	r3, [r7, #14]
 8001504:	7bbb      	ldrb	r3, [r7, #14]
 8001506:	2b31      	cmp	r3, #49	; 0x31
 8001508:	d9d0      	bls.n	80014ac <Signal_power_Calculate+0x24>
	}
	return signal->power;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8001510:	4610      	mov	r0, r2
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fb70 	bl	8000bf8 <__aeabi_d2f>
 8001518:	4603      	mov	r3, r0
 800151a:	ee07 3a90 	vmov	s15, r3
}
 800151e:	eeb0 0a67 	vmov.f32	s0, s15
 8001522:	3710      	adds	r7, #16
 8001524:	46bd      	mov	sp, r7
 8001526:	bdb0      	pop	{r4, r5, r7, pc}

08001528 <Signal_RMS_Calculate>:

float Signal_RMS_Calculate(SignalFeature_t *signal){
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
	float power = Signal_power_Calculate(signal);
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff ffa9 	bl	8001488 <Signal_power_Calculate>
 8001536:	ed87 0a03 	vstr	s0, [r7, #12]
	signal->rms = 0.0f;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f04f 0200 	mov.w	r2, #0
 8001540:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	signal->rms = sqrt(power / SIGNAL_SAMPLES_LENGTH);
 8001544:	edd7 7a03 	vldr	s15, [r7, #12]
 8001548:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800158c <Signal_RMS_Calculate+0x64>
 800154c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001550:	ee16 0a90 	vmov	r0, s13
 8001554:	f7ff f800 	bl	8000558 <__aeabi_f2d>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	ec43 2b10 	vmov	d0, r2, r3
 8001560:	f00d fee6 	bl	800f330 <sqrt>
 8001564:	ec53 2b10 	vmov	r2, r3, d0
 8001568:	4610      	mov	r0, r2
 800156a:	4619      	mov	r1, r3
 800156c:	f7ff fb44 	bl	8000bf8 <__aeabi_d2f>
 8001570:	4602      	mov	r2, r0
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	return signal->rms;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800157e:	ee07 3a90 	vmov	s15, r3
}
 8001582:	eeb0 0a67 	vmov.f32	s0, s15
 8001586:	3710      	adds	r7, #16
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	42480000 	.word	0x42480000

08001590 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001594:	b0d5      	sub	sp, #340	; 0x154
 8001596:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE BEGIN 1 */
  	PID_Init(&pid, kp, ti, td, dt);
 8001598:	4b49      	ldr	r3, [pc, #292]	; (80016c0 <main+0x130>)
 800159a:	edd3 7a00 	vldr	s15, [r3]
 800159e:	4b49      	ldr	r3, [pc, #292]	; (80016c4 <main+0x134>)
 80015a0:	ed93 7a00 	vldr	s14, [r3]
 80015a4:	4b48      	ldr	r3, [pc, #288]	; (80016c8 <main+0x138>)
 80015a6:	edd3 6a00 	vldr	s13, [r3]
 80015aa:	4b48      	ldr	r3, [pc, #288]	; (80016cc <main+0x13c>)
 80015ac:	ed93 6a00 	vldr	s12, [r3]
 80015b0:	eef0 1a46 	vmov.f32	s3, s12
 80015b4:	eeb0 1a66 	vmov.f32	s2, s13
 80015b8:	eef0 0a47 	vmov.f32	s1, s14
 80015bc:	eeb0 0a67 	vmov.f32	s0, s15
 80015c0:	4843      	ldr	r0, [pc, #268]	; (80016d0 <main+0x140>)
 80015c2:	f000 fc8a 	bl	8001eda <PID_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015c6:	f000 ffef 	bl	80025a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015ca:	f000 f89f 	bl	800170c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ce:	f7ff fe2b 	bl	8001228 <MX_GPIO_Init>
  MX_DMA_Init();
 80015d2:	f7ff fe09 	bl	80011e8 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80015d6:	f008 ff17 	bl	800a408 <MX_USB_DEVICE_Init>
  MX_TIM10_Init();
 80015da:	f000 ff1f 	bl	800241c <MX_TIM10_Init>
  MX_ADC1_Init();
 80015de:	f7ff fd13 	bl	8001008 <MX_ADC1_Init>
  MX_TIM9_Init();
 80015e2:	f000 feb7 	bl	8002354 <MX_TIM9_Init>
  MX_I2C1_Init();
 80015e6:	f7ff fe8f 	bl	8001308 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 80015ea:	483a      	ldr	r0, [pc, #232]	; (80016d4 <main+0x144>)
 80015ec:	f004 fbf2 	bl	8005dd4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80015f0:	2100      	movs	r1, #0
 80015f2:	4839      	ldr	r0, [pc, #228]	; (80016d8 <main+0x148>)
 80015f4:	f004 fcaa 	bl	8005f4c <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 3);
 80015f8:	2203      	movs	r2, #3
 80015fa:	4938      	ldr	r1, [pc, #224]	; (80016dc <main+0x14c>)
 80015fc:	4838      	ldr	r0, [pc, #224]	; (80016e0 <main+0x150>)
 80015fe:	f001 f9bd 	bl	800297c <HAL_ADC_Start_DMA>

  Signal_Buf_Init(&sig);
 8001602:	4838      	ldr	r0, [pc, #224]	; (80016e4 <main+0x154>)
 8001604:	f7ff fef6 	bl	80013f4 <Signal_Buf_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		char logbuf[256];
//		sprintf(logbuf, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n",signal_rms_voltage, normalized_signal_thresh, arm_force_setpoint, sum_fsr_force, normalized_signal_rms, mvc_voltage, emg_raw_voltage);
		sprintf(logbuf, "%u,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,\r\n", arm_state, mvc_voltage, normalized_signal_thresh, emg_rmv_offset_voltage, signal_rms_voltage, normalized_signal_rms, arm_force_setpoint,sum_fsr_force);
 8001608:	4b37      	ldr	r3, [pc, #220]	; (80016e8 <main+0x158>)
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	461e      	mov	r6, r3
 800160e:	4b37      	ldr	r3, [pc, #220]	; (80016ec <main+0x15c>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ffa0 	bl	8000558 <__aeabi_f2d>
 8001618:	4680      	mov	r8, r0
 800161a:	4689      	mov	r9, r1
 800161c:	4b34      	ldr	r3, [pc, #208]	; (80016f0 <main+0x160>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4618      	mov	r0, r3
 8001622:	f7fe ff99 	bl	8000558 <__aeabi_f2d>
 8001626:	4682      	mov	sl, r0
 8001628:	468b      	mov	fp, r1
 800162a:	4b32      	ldr	r3, [pc, #200]	; (80016f4 <main+0x164>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4618      	mov	r0, r3
 8001630:	f7fe ff92 	bl	8000558 <__aeabi_f2d>
 8001634:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001638:	4b2f      	ldr	r3, [pc, #188]	; (80016f8 <main+0x168>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4618      	mov	r0, r3
 800163e:	f7fe ff8b 	bl	8000558 <__aeabi_f2d>
 8001642:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001646:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <main+0x16c>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4618      	mov	r0, r3
 800164c:	f7fe ff84 	bl	8000558 <__aeabi_f2d>
 8001650:	e9c7 0100 	strd	r0, r1, [r7]
 8001654:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <main+0x170>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4618      	mov	r0, r3
 800165a:	f7fe ff7d 	bl	8000558 <__aeabi_f2d>
 800165e:	4604      	mov	r4, r0
 8001660:	460d      	mov	r5, r1
 8001662:	4b28      	ldr	r3, [pc, #160]	; (8001704 <main+0x174>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4618      	mov	r0, r3
 8001668:	f7fe ff76 	bl	8000558 <__aeabi_f2d>
 800166c:	4602      	mov	r2, r0
 800166e:	460b      	mov	r3, r1
 8001670:	f107 0018 	add.w	r0, r7, #24
 8001674:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8001678:	e9cd 450a 	strd	r4, r5, [sp, #40]	; 0x28
 800167c:	ed97 7b00 	vldr	d7, [r7]
 8001680:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001684:	ed97 7b02 	vldr	d7, [r7, #8]
 8001688:	ed8d 7b06 	vstr	d7, [sp, #24]
 800168c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001690:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001694:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001698:	e9cd 8900 	strd	r8, r9, [sp]
 800169c:	4632      	mov	r2, r6
 800169e:	491a      	ldr	r1, [pc, #104]	; (8001708 <main+0x178>)
 80016a0:	f00a f884 	bl	800b7ac <siprintf>
		CDC_Transmit_FS((uint8_t*)logbuf, strlen(logbuf));
 80016a4:	f107 0318 	add.w	r3, r7, #24
 80016a8:	4618      	mov	r0, r3
 80016aa:	f7fe fd99 	bl	80001e0 <strlen>
 80016ae:	4603      	mov	r3, r0
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	f107 0318 	add.w	r3, r7, #24
 80016b6:	4611      	mov	r1, r2
 80016b8:	4618      	mov	r0, r3
 80016ba:	f008 ff6d 	bl	800a598 <CDC_Transmit_FS>
  {
 80016be:	e7a3      	b.n	8001608 <main+0x78>
 80016c0:	20000014 	.word	0x20000014
 80016c4:	20000018 	.word	0x20000018
 80016c8:	2000001c 	.word	0x2000001c
 80016cc:	20000020 	.word	0x20000020
 80016d0:	20000568 	.word	0x20000568
 80016d4:	20000674 	.word	0x20000674
 80016d8:	2000062c 	.word	0x2000062c
 80016dc:	2000041c 	.word	0x2000041c
 80016e0:	20000314 	.word	0x20000314
 80016e4:	20000488 	.word	0x20000488
 80016e8:	20000460 	.word	0x20000460
 80016ec:	2000047c 	.word	0x2000047c
 80016f0:	20000008 	.word	0x20000008
 80016f4:	20000458 	.word	0x20000458
 80016f8:	20000468 	.word	0x20000468
 80016fc:	2000046c 	.word	0x2000046c
 8001700:	20000000 	.word	0x20000000
 8001704:	20000448 	.word	0x20000448
 8001708:	0800f508 	.word	0x0800f508

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b094      	sub	sp, #80	; 0x50
 8001710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001712:	f107 0320 	add.w	r3, r7, #32
 8001716:	2230      	movs	r2, #48	; 0x30
 8001718:	2100      	movs	r1, #0
 800171a:	4618      	mov	r0, r3
 800171c:	f009 fbd4 	bl	800aec8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001720:	f107 030c 	add.w	r3, r7, #12
 8001724:	2200      	movs	r2, #0
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	605a      	str	r2, [r3, #4]
 800172a:	609a      	str	r2, [r3, #8]
 800172c:	60da      	str	r2, [r3, #12]
 800172e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001730:	2300      	movs	r3, #0
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	4b29      	ldr	r3, [pc, #164]	; (80017dc <SystemClock_Config+0xd0>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001738:	4a28      	ldr	r2, [pc, #160]	; (80017dc <SystemClock_Config+0xd0>)
 800173a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800173e:	6413      	str	r3, [r2, #64]	; 0x40
 8001740:	4b26      	ldr	r3, [pc, #152]	; (80017dc <SystemClock_Config+0xd0>)
 8001742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001744:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001748:	60bb      	str	r3, [r7, #8]
 800174a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800174c:	2300      	movs	r3, #0
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	4b23      	ldr	r3, [pc, #140]	; (80017e0 <SystemClock_Config+0xd4>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001758:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <SystemClock_Config+0xd4>)
 800175a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800175e:	6013      	str	r3, [r2, #0]
 8001760:	4b1f      	ldr	r3, [pc, #124]	; (80017e0 <SystemClock_Config+0xd4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001768:	607b      	str	r3, [r7, #4]
 800176a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800176c:	2301      	movs	r3, #1
 800176e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001770:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001774:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001776:	2302      	movs	r3, #2
 8001778:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800177a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800177e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001780:	2319      	movs	r3, #25
 8001782:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001784:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001788:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800178a:	2304      	movs	r3, #4
 800178c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800178e:	2307      	movs	r3, #7
 8001790:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001792:	f107 0320 	add.w	r3, r7, #32
 8001796:	4618      	mov	r0, r3
 8001798:	f003 fe88 	bl	80054ac <HAL_RCC_OscConfig>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017a2:	f000 fb95 	bl	8001ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017a6:	230f      	movs	r3, #15
 80017a8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017aa:	2302      	movs	r3, #2
 80017ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017b6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017b8:	2300      	movs	r3, #0
 80017ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017bc:	f107 030c 	add.w	r3, r7, #12
 80017c0:	2102      	movs	r1, #2
 80017c2:	4618      	mov	r0, r3
 80017c4:	f004 f8ea 	bl	800599c <HAL_RCC_ClockConfig>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80017ce:	f000 fb7f 	bl	8001ed0 <Error_Handler>
  }
}
 80017d2:	bf00      	nop
 80017d4:	3750      	adds	r7, #80	; 0x50
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40007000 	.word	0x40007000
 80017e4:	00000000 	.word	0x00000000

080017e8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b088      	sub	sp, #32
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM10){
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4a54      	ldr	r2, [pc, #336]	; (8001948 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	f040 82d1 	bne.w	8001d9e <HAL_TIM_PeriodElapsedCallback+0x5b6>
//		char logbuf[256];

		uint8_t i = 0;
 80017fc:	2300      	movs	r3, #0
 80017fe:	77fb      	strb	r3, [r7, #31]
		char *p = strtok(usbd_buf_recv, ",");
 8001800:	4952      	ldr	r1, [pc, #328]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001802:	4853      	ldr	r0, [pc, #332]	; (8001950 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001804:	f00a fe22 	bl	800c44c <strtok>
 8001808:	61b8      	str	r0, [r7, #24]

		while(p != NULL){
 800180a:	e00c      	b.n	8001826 <HAL_TIM_PeriodElapsedCallback+0x3e>
			array[i++] = p;
 800180c:	7ffb      	ldrb	r3, [r7, #31]
 800180e:	1c5a      	adds	r2, r3, #1
 8001810:	77fa      	strb	r2, [r7, #31]
 8001812:	4619      	mov	r1, r3
 8001814:	4a4f      	ldr	r2, [pc, #316]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			p = strtok(NULL, ",");
 800181c:	494b      	ldr	r1, [pc, #300]	; (800194c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800181e:	2000      	movs	r0, #0
 8001820:	f00a fe14 	bl	800c44c <strtok>
 8001824:	61b8      	str	r0, [r7, #24]
		while(p != NULL){
 8001826:	69bb      	ldr	r3, [r7, #24]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1ef      	bne.n	800180c <HAL_TIM_PeriodElapsedCallback+0x24>
		}

		parsedBuf[0] = atof(array[0]);
 800182c:	4b49      	ldr	r3, [pc, #292]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4618      	mov	r0, r3
 8001832:	f009 fb0d 	bl	800ae50 <atof>
 8001836:	ec53 2b10 	vmov	r2, r3, d0
 800183a:	4610      	mov	r0, r2
 800183c:	4619      	mov	r1, r3
 800183e:	f7ff f9db 	bl	8000bf8 <__aeabi_d2f>
 8001842:	4603      	mov	r3, r0
 8001844:	4a44      	ldr	r2, [pc, #272]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001846:	6013      	str	r3, [r2, #0]
		parsedBuf[1] = atof(array[1]);
 8001848:	4b42      	ldr	r3, [pc, #264]	; (8001954 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	f009 faff 	bl	800ae50 <atof>
 8001852:	ec53 2b10 	vmov	r2, r3, d0
 8001856:	4610      	mov	r0, r2
 8001858:	4619      	mov	r1, r3
 800185a:	f7ff f9cd 	bl	8000bf8 <__aeabi_d2f>
 800185e:	4603      	mov	r3, r0
 8001860:	4a3d      	ldr	r2, [pc, #244]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001862:	6053      	str	r3, [r2, #4]


		if(parsedBuf[0] == 1){
 8001864:	4b3c      	ldr	r3, [pc, #240]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001866:	edd3 7a00 	vldr	s15, [r3]
 800186a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800186e:	eef4 7a47 	vcmp.f32	s15, s14
 8001872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001876:	d10b      	bne.n	8001890 <HAL_TIM_PeriodElapsedCallback+0xa8>
			device_status = parsedBuf[1];
 8001878:	4b37      	ldr	r3, [pc, #220]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800187a:	edd3 7a01 	vldr	s15, [r3, #4]
 800187e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001882:	edc7 7a00 	vstr	s15, [r7]
 8001886:	783b      	ldrb	r3, [r7, #0]
 8001888:	b2da      	uxtb	r2, r3
 800188a:	4b34      	ldr	r3, [pc, #208]	; (800195c <HAL_TIM_PeriodElapsedCallback+0x174>)
 800188c:	701a      	strb	r2, [r3, #0]
 800188e:	e087      	b.n	80019a0 <HAL_TIM_PeriodElapsedCallback+0x1b8>
		}else if(parsedBuf[0] == 2){
 8001890:	4b31      	ldr	r3, [pc, #196]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001892:	edd3 7a00 	vldr	s15, [r3]
 8001896:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800189a:	eef4 7a47 	vcmp.f32	s15, s14
 800189e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a2:	d12d      	bne.n	8001900 <HAL_TIM_PeriodElapsedCallback+0x118>
			int value = parsedBuf[1];
 80018a4:	4b2c      	ldr	r3, [pc, #176]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x170>)
 80018a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80018aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ae:	ee17 3a90 	vmov	r3, s15
 80018b2:	60fb      	str	r3, [r7, #12]
			emg_offset_volt = (float)value / 1000;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	ee07 3a90 	vmov	s15, r3
 80018ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018be:	eddf 6a28 	vldr	s13, [pc, #160]	; 8001960 <HAL_TIM_PeriodElapsedCallback+0x178>
 80018c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80018c6:	4b27      	ldr	r3, [pc, #156]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80018c8:	edc3 7a00 	vstr	s15, [r3]
//			emg_offset_volt = parsedBuf[1];
			emg_offset = (emg_offset_volt*4096/3.3);
 80018cc:	4b25      	ldr	r3, [pc, #148]	; (8001964 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80018ce:	edd3 7a00 	vldr	s15, [r3]
 80018d2:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001968 <HAL_TIM_PeriodElapsedCallback+0x180>
 80018d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018da:	ee17 0a90 	vmov	r0, s15
 80018de:	f7fe fe3b 	bl	8000558 <__aeabi_f2d>
 80018e2:	a317      	add	r3, pc, #92	; (adr r3, 8001940 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80018e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018e8:	f7fe ffb8 	bl	800085c <__aeabi_ddiv>
 80018ec:	4602      	mov	r2, r0
 80018ee:	460b      	mov	r3, r1
 80018f0:	4610      	mov	r0, r2
 80018f2:	4619      	mov	r1, r3
 80018f4:	f7ff f938 	bl	8000b68 <__aeabi_d2iz>
 80018f8:	4603      	mov	r3, r0
 80018fa:	4a1c      	ldr	r2, [pc, #112]	; (800196c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80018fc:	6013      	str	r3, [r2, #0]
 80018fe:	e04f      	b.n	80019a0 <HAL_TIM_PeriodElapsedCallback+0x1b8>
		}else if(parsedBuf[0] == 3){
 8001900:	4b15      	ldr	r3, [pc, #84]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001902:	edd3 7a00 	vldr	s15, [r3]
 8001906:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800190a:	eef4 7a47 	vcmp.f32	s15, s14
 800190e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001912:	d12f      	bne.n	8001974 <HAL_TIM_PeriodElapsedCallback+0x18c>
			int value = parsedBuf[1];
 8001914:	4b10      	ldr	r3, [pc, #64]	; (8001958 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001916:	edd3 7a01 	vldr	s15, [r3, #4]
 800191a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800191e:	ee17 3a90 	vmov	r3, s15
 8001922:	613b      	str	r3, [r7, #16]
			normalized_signal_thresh = (float)value / 1000;
 8001924:	693b      	ldr	r3, [r7, #16]
 8001926:	ee07 3a90 	vmov	s15, r3
 800192a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800192e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001960 <HAL_TIM_PeriodElapsedCallback+0x178>
 8001932:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001936:	4b0e      	ldr	r3, [pc, #56]	; (8001970 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8001938:	edc3 7a00 	vstr	s15, [r3]
 800193c:	e030      	b.n	80019a0 <HAL_TIM_PeriodElapsedCallback+0x1b8>
 800193e:	bf00      	nop
 8001940:	66666666 	.word	0x66666666
 8001944:	400a6666 	.word	0x400a6666
 8001948:	40014400 	.word	0x40014400
 800194c:	0800f534 	.word	0x0800f534
 8001950:	20000590 	.word	0x20000590
 8001954:	20000610 	.word	0x20000610
 8001958:	20000618 	.word	0x20000618
 800195c:	20000620 	.word	0x20000620
 8001960:	447a0000 	.word	0x447a0000
 8001964:	2000045c 	.word	0x2000045c
 8001968:	45800000 	.word	0x45800000
 800196c:	20000004 	.word	0x20000004
 8001970:	20000008 	.word	0x20000008
//			normalized_signal_thresh = parsedBuf[1];
		}else if(parsedBuf[0] == 4){
 8001974:	4b9a      	ldr	r3, [pc, #616]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 8001976:	edd3 7a00 	vldr	s15, [r3]
 800197a:	eeb1 7a00 	vmov.f32	s14, #16	; 0x40800000  4.0
 800197e:	eef4 7a47 	vcmp.f32	s15, s14
 8001982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001986:	d10b      	bne.n	80019a0 <HAL_TIM_PeriodElapsedCallback+0x1b8>
			int value = (int)parsedBuf[1];
 8001988:	4b95      	ldr	r3, [pc, #596]	; (8001be0 <HAL_TIM_PeriodElapsedCallback+0x3f8>)
 800198a:	edd3 7a01 	vldr	s15, [r3, #4]
 800198e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001992:	ee17 3a90 	vmov	r3, s15
 8001996:	617b      	str	r3, [r7, #20]
			get_mvc_flag = (uint8_t)value;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	b2da      	uxtb	r2, r3
 800199c:	4b91      	ldr	r3, [pc, #580]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 800199e:	701a      	strb	r2, [r3, #0]
		}
		memset(usbd_buf_recv, NULL, sizeof(usbd_buf_recv));
 80019a0:	2280      	movs	r2, #128	; 0x80
 80019a2:	2100      	movs	r1, #0
 80019a4:	4890      	ldr	r0, [pc, #576]	; (8001be8 <HAL_TIM_PeriodElapsedCallback+0x400>)
 80019a6:	f009 fa8f 	bl	800aec8 <memset>

		fsr_volt[0] = ((float)fsr[0]/4096)*3.3;
 80019aa:	4b90      	ldr	r3, [pc, #576]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x404>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	ee07 3a90 	vmov	s15, r3
 80019b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019b6:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8001bf0 <HAL_TIM_PeriodElapsedCallback+0x408>
 80019ba:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019be:	ee16 0a90 	vmov	r0, s13
 80019c2:	f7fe fdc9 	bl	8000558 <__aeabi_f2d>
 80019c6:	a380      	add	r3, pc, #512	; (adr r3, 8001bc8 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 80019c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019cc:	f7fe fe1c 	bl	8000608 <__aeabi_dmul>
 80019d0:	4602      	mov	r2, r0
 80019d2:	460b      	mov	r3, r1
 80019d4:	4610      	mov	r0, r2
 80019d6:	4619      	mov	r1, r3
 80019d8:	f7ff f90e 	bl	8000bf8 <__aeabi_d2f>
 80019dc:	4603      	mov	r3, r0
 80019de:	4a85      	ldr	r2, [pc, #532]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 80019e0:	6013      	str	r3, [r2, #0]
		fsr_volt[1] = ((float)fsr[1]/4096)*3.3;
 80019e2:	4b82      	ldr	r3, [pc, #520]	; (8001bec <HAL_TIM_PeriodElapsedCallback+0x404>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	ee07 3a90 	vmov	s15, r3
 80019ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019ee:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001bf0 <HAL_TIM_PeriodElapsedCallback+0x408>
 80019f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80019f6:	ee16 0a90 	vmov	r0, s13
 80019fa:	f7fe fdad 	bl	8000558 <__aeabi_f2d>
 80019fe:	a372      	add	r3, pc, #456	; (adr r3, 8001bc8 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8001a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a04:	f7fe fe00 	bl	8000608 <__aeabi_dmul>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	460b      	mov	r3, r1
 8001a0c:	4610      	mov	r0, r2
 8001a0e:	4619      	mov	r1, r3
 8001a10:	f7ff f8f2 	bl	8000bf8 <__aeabi_d2f>
 8001a14:	4603      	mov	r3, r0
 8001a16:	4a77      	ldr	r2, [pc, #476]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8001a18:	6053      	str	r3, [r2, #4]

		fsr_force[0] = 0.5287*fsr_volt[0] + 0.1773;
 8001a1a:	4b76      	ldr	r3, [pc, #472]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f7fe fd9a 	bl	8000558 <__aeabi_f2d>
 8001a24:	a36a      	add	r3, pc, #424	; (adr r3, 8001bd0 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8001a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2a:	f7fe fded 	bl	8000608 <__aeabi_dmul>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4610      	mov	r0, r2
 8001a34:	4619      	mov	r1, r3
 8001a36:	a368      	add	r3, pc, #416	; (adr r3, 8001bd8 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8001a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a3c:	f7fe fc2e 	bl	800029c <__adddf3>
 8001a40:	4602      	mov	r2, r0
 8001a42:	460b      	mov	r3, r1
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	f7ff f8d6 	bl	8000bf8 <__aeabi_d2f>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	4a6a      	ldr	r2, [pc, #424]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8001a50:	6013      	str	r3, [r2, #0]
		fsr_force[1] = 0.5287*fsr_volt[1] + 0.1773;
 8001a52:	4b68      	ldr	r3, [pc, #416]	; (8001bf4 <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd7e 	bl	8000558 <__aeabi_f2d>
 8001a5c:	a35c      	add	r3, pc, #368	; (adr r3, 8001bd0 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8001a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a62:	f7fe fdd1 	bl	8000608 <__aeabi_dmul>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4610      	mov	r0, r2
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	a35a      	add	r3, pc, #360	; (adr r3, 8001bd8 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8001a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a74:	f7fe fc12 	bl	800029c <__adddf3>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	4619      	mov	r1, r3
 8001a80:	f7ff f8ba 	bl	8000bf8 <__aeabi_d2f>
 8001a84:	4603      	mov	r3, r0
 8001a86:	4a5c      	ldr	r2, [pc, #368]	; (8001bf8 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8001a88:	6053      	str	r3, [r2, #4]

		emg_rmv_offset = emg_raw - emg_offset;
 8001a8a:	4b5c      	ldr	r3, [pc, #368]	; (8001bfc <HAL_TIM_PeriodElapsedCallback+0x414>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	461a      	mov	r2, r3
 8001a90:	4b5b      	ldr	r3, [pc, #364]	; (8001c00 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	4a5b      	ldr	r2, [pc, #364]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001a98:	6013      	str	r3, [r2, #0]
		emg_rmv_offset_voltage = emg_rmv_offset * 3.3 / 4096;
 8001a9a:	4b5a      	ldr	r3, [pc, #360]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fd48 	bl	8000534 <__aeabi_i2d>
 8001aa4:	a348      	add	r3, pc, #288	; (adr r3, 8001bc8 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8001aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aaa:	f7fe fdad 	bl	8000608 <__aeabi_dmul>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	4610      	mov	r0, r2
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	f04f 0200 	mov.w	r2, #0
 8001aba:	4b53      	ldr	r3, [pc, #332]	; (8001c08 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8001abc:	f7fe fece 	bl	800085c <__aeabi_ddiv>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4610      	mov	r0, r2
 8001ac6:	4619      	mov	r1, r3
 8001ac8:	f7ff f896 	bl	8000bf8 <__aeabi_d2f>
 8001acc:	4603      	mov	r3, r0
 8001ace:	4a4f      	ldr	r2, [pc, #316]	; (8001c0c <HAL_TIM_PeriodElapsedCallback+0x424>)
 8001ad0:	6013      	str	r3, [r2, #0]
		Signal_Buf_Update(&sig, emg_rmv_offset);
 8001ad2:	4b4c      	ldr	r3, [pc, #304]	; (8001c04 <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	ee07 3a90 	vmov	s15, r3
 8001ada:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ade:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae2:	484b      	ldr	r0, [pc, #300]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8001ae4:	f7ff fcab 	bl	800143e <Signal_Buf_Update>
		Signal_RMS_Calculate(&sig);
 8001ae8:	4849      	ldr	r0, [pc, #292]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8001aea:	f7ff fd1d 	bl	8001528 <Signal_RMS_Calculate>

		signal_rms = sig.rms;
 8001aee:	4b48      	ldr	r3, [pc, #288]	; (8001c10 <HAL_TIM_PeriodElapsedCallback+0x428>)
 8001af0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001af4:	4a47      	ldr	r2, [pc, #284]	; (8001c14 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8001af6:	6013      	str	r3, [r2, #0]
		signal_rms_voltage = (signal_rms/4096)*3.3;
 8001af8:	4b46      	ldr	r3, [pc, #280]	; (8001c14 <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001bf0 <HAL_TIM_PeriodElapsedCallback+0x408>
 8001b02:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001b06:	ee16 0a90 	vmov	r0, s13
 8001b0a:	f7fe fd25 	bl	8000558 <__aeabi_f2d>
 8001b0e:	a32e      	add	r3, pc, #184	; (adr r3, 8001bc8 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8001b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b14:	f7fe fd78 	bl	8000608 <__aeabi_dmul>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	4610      	mov	r0, r2
 8001b1e:	4619      	mov	r1, r3
 8001b20:	f7ff f86a 	bl	8000bf8 <__aeabi_d2f>
 8001b24:	4603      	mov	r3, r0
 8001b26:	4a3c      	ldr	r2, [pc, #240]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8001b28:	6013      	str	r3, [r2, #0]

		if(get_mvc_flag == 1){
 8001b2a:	4b2e      	ldr	r3, [pc, #184]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d12b      	bne.n	8001b8a <HAL_TIM_PeriodElapsedCallback+0x3a2>
			if(get_mvc_counter < get_mvc_counter_maxval){
 8001b32:	4b3a      	ldr	r3, [pc, #232]	; (8001c1c <HAL_TIM_PeriodElapsedCallback+0x434>)
 8001b34:	881b      	ldrh	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	4b39      	ldr	r3, [pc, #228]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d910      	bls.n	8001b62 <HAL_TIM_PeriodElapsedCallback+0x37a>
				mvc_sum += signal_rms_voltage;
 8001b40:	4b38      	ldr	r3, [pc, #224]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8001b42:	ed93 7a00 	vldr	s14, [r3]
 8001b46:	4b34      	ldr	r3, [pc, #208]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8001b48:	edd3 7a00 	vldr	s15, [r3]
 8001b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b50:	4b34      	ldr	r3, [pc, #208]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8001b52:	edc3 7a00 	vstr	s15, [r3]
				get_mvc_counter++;
 8001b56:	4b32      	ldr	r3, [pc, #200]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	4a30      	ldr	r2, [pc, #192]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	e01b      	b.n	8001b9a <HAL_TIM_PeriodElapsedCallback+0x3b2>
			}else{
				mvc_voltage = mvc_sum/1000;
 8001b62:	4b30      	ldr	r3, [pc, #192]	; (8001c24 <HAL_TIM_PeriodElapsedCallback+0x43c>)
 8001b64:	ed93 7a00 	vldr	s14, [r3]
 8001b68:	eddf 6a2f 	vldr	s13, [pc, #188]	; 8001c28 <HAL_TIM_PeriodElapsedCallback+0x440>
 8001b6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b70:	4b2e      	ldr	r3, [pc, #184]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x444>)
 8001b72:	edc3 7a00 	vstr	s15, [r3]
				get_mvc_counter = 0;
 8001b76:	4b2a      	ldr	r3, [pc, #168]	; (8001c20 <HAL_TIM_PeriodElapsedCallback+0x438>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
				get_mvc_flag = 0;
 8001b7c:	4b19      	ldr	r3, [pc, #100]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	701a      	strb	r2, [r3, #0]
				ever_get_mvc = 1;
 8001b82:	4b2b      	ldr	r3, [pc, #172]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8001b84:	2201      	movs	r2, #1
 8001b86:	701a      	strb	r2, [r3, #0]
 8001b88:	e007      	b.n	8001b9a <HAL_TIM_PeriodElapsedCallback+0x3b2>
			}
		}else if(get_mvc_flag == 2){
 8001b8a:	4b16      	ldr	r3, [pc, #88]	; (8001be4 <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 8001b8c:	781b      	ldrb	r3, [r3, #0]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d103      	bne.n	8001b9a <HAL_TIM_PeriodElapsedCallback+0x3b2>
			mvc_voltage = 0;
 8001b92:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x444>)
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
		}

		if(ever_get_mvc == 1){
 8001b9a:	4b25      	ldr	r3, [pc, #148]	; (8001c30 <HAL_TIM_PeriodElapsedCallback+0x448>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d14c      	bne.n	8001c3c <HAL_TIM_PeriodElapsedCallback+0x454>
			normalized_signal_rms = (signal_rms_voltage / mvc_voltage)*100;
 8001ba2:	4b1d      	ldr	r3, [pc, #116]	; (8001c18 <HAL_TIM_PeriodElapsedCallback+0x430>)
 8001ba4:	edd3 6a00 	vldr	s13, [r3]
 8001ba8:	4b20      	ldr	r3, [pc, #128]	; (8001c2c <HAL_TIM_PeriodElapsedCallback+0x444>)
 8001baa:	ed93 7a00 	vldr	s14, [r3]
 8001bae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001bb2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001c34 <HAL_TIM_PeriodElapsedCallback+0x44c>
 8001bb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bba:	4b1f      	ldr	r3, [pc, #124]	; (8001c38 <HAL_TIM_PeriodElapsedCallback+0x450>)
 8001bbc:	edc3 7a00 	vstr	s15, [r3]
 8001bc0:	e044      	b.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x464>
 8001bc2:	bf00      	nop
 8001bc4:	f3af 8000 	nop.w
 8001bc8:	66666666 	.word	0x66666666
 8001bcc:	400a6666 	.word	0x400a6666
 8001bd0:	432ca57a 	.word	0x432ca57a
 8001bd4:	3fe0eb1c 	.word	0x3fe0eb1c
 8001bd8:	32ca57a8 	.word	0x32ca57a8
 8001bdc:	3fc6b1c4 	.word	0x3fc6b1c4
 8001be0:	20000618 	.word	0x20000618
 8001be4:	20000470 	.word	0x20000470
 8001be8:	20000590 	.word	0x20000590
 8001bec:	20000428 	.word	0x20000428
 8001bf0:	45800000 	.word	0x45800000
 8001bf4:	20000430 	.word	0x20000430
 8001bf8:	20000438 	.word	0x20000438
 8001bfc:	2000044c 	.word	0x2000044c
 8001c00:	20000004 	.word	0x20000004
 8001c04:	20000454 	.word	0x20000454
 8001c08:	40b00000 	.word	0x40b00000
 8001c0c:	20000458 	.word	0x20000458
 8001c10:	20000488 	.word	0x20000488
 8001c14:	20000464 	.word	0x20000464
 8001c18:	20000468 	.word	0x20000468
 8001c1c:	2000000c 	.word	0x2000000c
 8001c20:	20000474 	.word	0x20000474
 8001c24:	20000480 	.word	0x20000480
 8001c28:	447a0000 	.word	0x447a0000
 8001c2c:	2000047c 	.word	0x2000047c
 8001c30:	20000478 	.word	0x20000478
 8001c34:	42c80000 	.word	0x42c80000
 8001c38:	2000046c 	.word	0x2000046c
		}else if(ever_get_mvc == 0){
 8001c3c:	4b5a      	ldr	r3, [pc, #360]	; (8001da8 <HAL_TIM_PeriodElapsedCallback+0x5c0>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d103      	bne.n	8001c4c <HAL_TIM_PeriodElapsedCallback+0x464>
			normalized_signal_rms = 0;
 8001c44:	4b59      	ldr	r3, [pc, #356]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8001c46:	f04f 0200 	mov.w	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
		}

		sum_fsr = fsr[0] + fsr[1];
 8001c4c:	4b58      	ldr	r3, [pc, #352]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4b57      	ldr	r3, [pc, #348]	; (8001db0 <HAL_TIM_PeriodElapsedCallback+0x5c8>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	4a57      	ldr	r2, [pc, #348]	; (8001db4 <HAL_TIM_PeriodElapsedCallback+0x5cc>)
 8001c58:	6013      	str	r3, [r2, #0]
		sum_fsr_voltage = fsr_volt[0] + fsr_volt[1];
 8001c5a:	4b57      	ldr	r3, [pc, #348]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001c5c:	ed93 7a00 	vldr	s14, [r3]
 8001c60:	4b55      	ldr	r3, [pc, #340]	; (8001db8 <HAL_TIM_PeriodElapsedCallback+0x5d0>)
 8001c62:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6a:	4b54      	ldr	r3, [pc, #336]	; (8001dbc <HAL_TIM_PeriodElapsedCallback+0x5d4>)
 8001c6c:	edc3 7a00 	vstr	s15, [r3]
		sum_fsr_force = fsr_force[0] + fsr_force[1];
 8001c70:	4b53      	ldr	r3, [pc, #332]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001c72:	ed93 7a00 	vldr	s14, [r3]
 8001c76:	4b52      	ldr	r3, [pc, #328]	; (8001dc0 <HAL_TIM_PeriodElapsedCallback+0x5d8>)
 8001c78:	edd3 7a01 	vldr	s15, [r3, #4]
 8001c7c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c80:	4b50      	ldr	r3, [pc, #320]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001c82:	edc3 7a00 	vstr	s15, [r3]


		servo_pwm = PID_Update(&pid, arm_force_setpoint, sum_fsr_force) + 1500;
 8001c86:	4b50      	ldr	r3, [pc, #320]	; (8001dc8 <HAL_TIM_PeriodElapsedCallback+0x5e0>)
 8001c88:	edd3 7a00 	vldr	s15, [r3]
 8001c8c:	4b4d      	ldr	r3, [pc, #308]	; (8001dc4 <HAL_TIM_PeriodElapsedCallback+0x5dc>)
 8001c8e:	ed93 7a00 	vldr	s14, [r3]
 8001c92:	eef0 0a47 	vmov.f32	s1, s14
 8001c96:	eeb0 0a67 	vmov.f32	s0, s15
 8001c9a:	484c      	ldr	r0, [pc, #304]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001c9c:	f000 f954 	bl	8001f48 <PID_Update>
 8001ca0:	eef0 7a40 	vmov.f32	s15, s0
 8001ca4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8001dd0 <HAL_TIM_PeriodElapsedCallback+0x5e8>
 8001ca8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001cac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cb0:	ee17 2a90 	vmov	r2, s15
 8001cb4:	4b47      	ldr	r3, [pc, #284]	; (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001cb6:	601a      	str	r2, [r3, #0]
		cnt++;
 8001cb8:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	4a46      	ldr	r2, [pc, #280]	; (8001dd8 <HAL_TIM_PeriodElapsedCallback+0x5f0>)
 8001cc0:	6013      	str	r3, [r2, #0]

		if(normalized_signal_rms > normalized_signal_thresh){
 8001cc2:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <HAL_TIM_PeriodElapsedCallback+0x5c4>)
 8001cc4:	ed93 7a00 	vldr	s14, [r3]
 8001cc8:	4b44      	ldr	r3, [pc, #272]	; (8001ddc <HAL_TIM_PeriodElapsedCallback+0x5f4>)
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd6:	dd1d      	ble.n	8001d14 <HAL_TIM_PeriodElapsedCallback+0x52c>
			if(prosthetic_statebfr == true){
 8001cd8:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d015      	beq.n	8001d0c <HAL_TIM_PeriodElapsedCallback+0x524>
				truth_counter_thresh++;
 8001ce0:	4b40      	ldr	r3, [pc, #256]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001cea:	801a      	strh	r2, [r3, #0]
				if(truth_counter_thresh >= truth_counter_maxval){
 8001cec:	4b3e      	ldr	r3, [pc, #248]	; (8001de8 <HAL_TIM_PeriodElapsedCallback+0x600>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	4b3c      	ldr	r3, [pc, #240]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001cf4:	881b      	ldrh	r3, [r3, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d808      	bhi.n	8001d0c <HAL_TIM_PeriodElapsedCallback+0x524>
					prosthetic_state = true;
 8001cfa:	4b3c      	ldr	r3, [pc, #240]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	701a      	strb	r2, [r3, #0]
					arm_state = 1;
 8001d00:	4b3b      	ldr	r3, [pc, #236]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	701a      	strb	r2, [r3, #0]
					truth_counter_thresh = 0;
 8001d06:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	801a      	strh	r2, [r3, #0]
				}
			}
			prosthetic_statebfr = true;
 8001d0c:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	701a      	strb	r2, [r3, #0]
 8001d12:	e022      	b.n	8001d5a <HAL_TIM_PeriodElapsedCallback+0x572>
		}else{
			if(prosthetic_statebfr == false){
 8001d14:	4b32      	ldr	r3, [pc, #200]	; (8001de0 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	f083 0301 	eor.w	r3, r3, #1
 8001d1c:	b2db      	uxtb	r3, r3
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d018      	beq.n	8001d54 <HAL_TIM_PeriodElapsedCallback+0x56c>
				truth_counter_thresh++;
 8001d22:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001d24:	881b      	ldrh	r3, [r3, #0]
 8001d26:	3301      	adds	r3, #1
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	4b2e      	ldr	r3, [pc, #184]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001d2c:	801a      	strh	r2, [r3, #0]
				if(truth_counter_thresh >= truth_counter_maxval_arm_closed){
 8001d2e:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001d30:	881a      	ldrh	r2, [r3, #0]
 8001d32:	4b30      	ldr	r3, [pc, #192]	; (8001df4 <HAL_TIM_PeriodElapsedCallback+0x60c>)
 8001d34:	881b      	ldrh	r3, [r3, #0]
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d30c      	bcc.n	8001d54 <HAL_TIM_PeriodElapsedCallback+0x56c>
					prosthetic_state = false;
 8001d3a:	4b2c      	ldr	r3, [pc, #176]	; (8001dec <HAL_TIM_PeriodElapsedCallback+0x604>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	701a      	strb	r2, [r3, #0]
					arm_state = 0;
 8001d40:	4b2b      	ldr	r3, [pc, #172]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	701a      	strb	r2, [r3, #0]
					pid.i = 0;
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <HAL_TIM_PeriodElapsedCallback+0x5e4>)
 8001d48:	f04f 0200 	mov.w	r2, #0
 8001d4c:	611a      	str	r2, [r3, #16]
					truth_counter_thresh = 0;
 8001d4e:	4b25      	ldr	r3, [pc, #148]	; (8001de4 <HAL_TIM_PeriodElapsedCallback+0x5fc>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	801a      	strh	r2, [r3, #0]
				}
			}
			prosthetic_statebfr = false;
 8001d54:	4b22      	ldr	r3, [pc, #136]	; (8001de0 <HAL_TIM_PeriodElapsedCallback+0x5f8>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
		}

		if(arm_state == 1 && device_status == 1){
 8001d5a:	4b25      	ldr	r3, [pc, #148]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d109      	bne.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0x58e>
 8001d62:	4b25      	ldr	r3, [pc, #148]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001d64:	781b      	ldrb	r3, [r3, #0]
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d105      	bne.n	8001d76 <HAL_TIM_PeriodElapsedCallback+0x58e>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, servo_pwm);
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <HAL_TIM_PeriodElapsedCallback+0x5ec>)
 8001d6c:	681a      	ldr	r2, [r3, #0]
 8001d6e:	4b23      	ldr	r3, [pc, #140]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x614>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	635a      	str	r2, [r3, #52]	; 0x34
 8001d74:	e013      	b.n	8001d9e <HAL_TIM_PeriodElapsedCallback+0x5b6>
		}else if(arm_state == 0 && device_status == 1){
 8001d76:	4b1e      	ldr	r3, [pc, #120]	; (8001df0 <HAL_TIM_PeriodElapsedCallback+0x608>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d109      	bne.n	8001d92 <HAL_TIM_PeriodElapsedCallback+0x5aa>
 8001d7e:	4b1e      	ldr	r3, [pc, #120]	; (8001df8 <HAL_TIM_PeriodElapsedCallback+0x610>)
 8001d80:	781b      	ldrb	r3, [r3, #0]
 8001d82:	2b01      	cmp	r3, #1
 8001d84:	d105      	bne.n	8001d92 <HAL_TIM_PeriodElapsedCallback+0x5aa>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 1000);
 8001d86:	4b1d      	ldr	r3, [pc, #116]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x614>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d8e:	635a      	str	r2, [r3, #52]	; 0x34
 8001d90:	e005      	b.n	8001d9e <HAL_TIM_PeriodElapsedCallback+0x5b6>
		}else{
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 1000);
 8001d92:	4b1a      	ldr	r3, [pc, #104]	; (8001dfc <HAL_TIM_PeriodElapsedCallback+0x614>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001d9a:	635a      	str	r2, [r3, #52]	; 0x34
//		sprintf(logbuf, "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\r\n",signal_rms_voltage, normalized_signal_thresh, arm_force_setpoint, sum_fsr_force, normalized_signal_rms, mvc_voltage, emg_raw_voltage);
//For Serial oscilloscope
//		sprintf(logbuf, "%.3f,%.3f,%.3f,%.3f,%.3f\r\n",signal_rms_voltage, normalized_signal_thresh, arm_force_setpoint, sum_fsr_force, arm_force_setpoint);
//		CDC_Transmit_FS((uint8_t*)logbuf, strlen(logbuf));
	}
}
 8001d9c:	e7ff      	b.n	8001d9e <HAL_TIM_PeriodElapsedCallback+0x5b6>
 8001d9e:	bf00      	nop
 8001da0:	3720      	adds	r7, #32
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000478 	.word	0x20000478
 8001dac:	2000046c 	.word	0x2000046c
 8001db0:	20000428 	.word	0x20000428
 8001db4:	20000440 	.word	0x20000440
 8001db8:	20000430 	.word	0x20000430
 8001dbc:	20000444 	.word	0x20000444
 8001dc0:	20000438 	.word	0x20000438
 8001dc4:	20000448 	.word	0x20000448
 8001dc8:	20000000 	.word	0x20000000
 8001dcc:	20000568 	.word	0x20000568
 8001dd0:	44bb8000 	.word	0x44bb8000
 8001dd4:	20000024 	.word	0x20000024
 8001dd8:	20000624 	.word	0x20000624
 8001ddc:	20000008 	.word	0x20000008
 8001de0:	20000487 	.word	0x20000487
 8001de4:	20000484 	.word	0x20000484
 8001de8:	2000000e 	.word	0x2000000e
 8001dec:	20000486 	.word	0x20000486
 8001df0:	20000460 	.word	0x20000460
 8001df4:	20000010 	.word	0x20000010
 8001df8:	20000620 	.word	0x20000620
 8001dfc:	2000062c 	.word	0x2000062c

08001e00 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b084      	sub	sp, #16
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
	for(int i =0; i < 3; i++){
 8001e08:	2300      	movs	r3, #0
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	e00a      	b.n	8001e24 <HAL_ADC_ConvCpltCallback+0x24>
		adc[i] = adc_buffer[i];
 8001e0e:	4a20      	ldr	r2, [pc, #128]	; (8001e90 <HAL_ADC_ConvCpltCallback+0x90>)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e16:	491f      	ldr	r1, [pc, #124]	; (8001e94 <HAL_ADC_ConvCpltCallback+0x94>)
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i =0; i < 3; i++){
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	3301      	adds	r3, #1
 8001e22:	60fb      	str	r3, [r7, #12]
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	ddf1      	ble.n	8001e0e <HAL_ADC_ConvCpltCallback+0xe>
	}
	emg_raw = adc[0];
 8001e2a:	4b1a      	ldr	r3, [pc, #104]	; (8001e94 <HAL_ADC_ConvCpltCallback+0x94>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	b29a      	uxth	r2, r3
 8001e30:	4b19      	ldr	r3, [pc, #100]	; (8001e98 <HAL_ADC_ConvCpltCallback+0x98>)
 8001e32:	801a      	strh	r2, [r3, #0]
	emg_raw_voltage = (emg_raw*3.3/4096);
 8001e34:	4b18      	ldr	r3, [pc, #96]	; (8001e98 <HAL_ADC_ConvCpltCallback+0x98>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7fe fb7b 	bl	8000534 <__aeabi_i2d>
 8001e3e:	a312      	add	r3, pc, #72	; (adr r3, 8001e88 <HAL_ADC_ConvCpltCallback+0x88>)
 8001e40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e44:	f7fe fbe0 	bl	8000608 <__aeabi_dmul>
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	f04f 0200 	mov.w	r2, #0
 8001e54:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_ADC_ConvCpltCallback+0x9c>)
 8001e56:	f7fe fd01 	bl	800085c <__aeabi_ddiv>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	4610      	mov	r0, r2
 8001e60:	4619      	mov	r1, r3
 8001e62:	f7fe fec9 	bl	8000bf8 <__aeabi_d2f>
 8001e66:	4603      	mov	r3, r0
 8001e68:	4a0d      	ldr	r2, [pc, #52]	; (8001ea0 <HAL_ADC_ConvCpltCallback+0xa0>)
 8001e6a:	6013      	str	r3, [r2, #0]
	fsr[0] = adc[1];
 8001e6c:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_ADC_ConvCpltCallback+0x94>)
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b0c      	ldr	r3, [pc, #48]	; (8001ea4 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001e74:	601a      	str	r2, [r3, #0]
	fsr[1] = adc[2];
 8001e76:	4b07      	ldr	r3, [pc, #28]	; (8001e94 <HAL_ADC_ConvCpltCallback+0x94>)
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b09      	ldr	r3, [pc, #36]	; (8001ea4 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001e7e:	605a      	str	r2, [r3, #4]
}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}
 8001e88:	66666666 	.word	0x66666666
 8001e8c:	400a6666 	.word	0x400a6666
 8001e90:	2000041c 	.word	0x2000041c
 8001e94:	20000410 	.word	0x20000410
 8001e98:	2000044c 	.word	0x2000044c
 8001e9c:	40b00000 	.word	0x40b00000
 8001ea0:	20000450 	.word	0x20000450
 8001ea4:	20000428 	.word	0x20000428

08001ea8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	4603      	mov	r3, r0
 8001eb0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 8001eb2:	88fb      	ldrh	r3, [r7, #6]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d102      	bne.n	8001ebe <HAL_GPIO_EXTI_Callback+0x16>
		get_mvc_flag = 1;
 8001eb8:	4b04      	ldr	r3, [pc, #16]	; (8001ecc <HAL_GPIO_EXTI_Callback+0x24>)
 8001eba:	2201      	movs	r2, #1
 8001ebc:	701a      	strb	r2, [r3, #0]
	}
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	20000470 	.word	0x20000470

08001ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ed4:	b672      	cpsid	i
}
 8001ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ed8:	e7fe      	b.n	8001ed8 <Error_Handler+0x8>

08001eda <PID_Init>:
 *      Author: Nawab
 */

#include "pid.h"

void PID_Init(PID_t *pid, float _kp, float _ti, float _td, float _dt){
 8001eda:	b480      	push	{r7}
 8001edc:	b087      	sub	sp, #28
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6178      	str	r0, [r7, #20]
 8001ee2:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ee6:	edc7 0a03 	vstr	s1, [r7, #12]
 8001eea:	ed87 1a02 	vstr	s2, [r7, #8]
 8001eee:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->kp = _kp;
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	601a      	str	r2, [r3, #0]
	pid->ti = _ti;
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	68fa      	ldr	r2, [r7, #12]
 8001efc:	605a      	str	r2, [r3, #4]
	pid->td = _td;
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	68ba      	ldr	r2, [r7, #8]
 8001f02:	609a      	str	r2, [r3, #8]

	pid->p = 0;
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
	pid->i = 0;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f04f 0200 	mov.w	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
	pid->d = 0;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	f04f 0200 	mov.w	r2, #0
 8001f1a:	615a      	str	r2, [r3, #20]

	pid->e_now = 0;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
	pid->e_prev = 0;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	f04f 0200 	mov.w	r2, #0
 8001f2a:	61da      	str	r2, [r3, #28]
	pid->de = 0;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	621a      	str	r2, [r3, #32]
	pid->dt = _dt;
 8001f34:	697b      	ldr	r3, [r7, #20]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001f3a:	bf00      	nop
 8001f3c:	371c      	adds	r7, #28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr
	...

08001f48 <PID_Update>:

float PID_Update(PID_t *pid, float reference, float input){
 8001f48:	b480      	push	{r7}
 8001f4a:	b087      	sub	sp, #28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f54:	edc7 0a01 	vstr	s1, [r7, #4]
	float out;
	pid->e_now = reference - input;
 8001f58:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f5c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->de = pid->e_now - pid->e_prev;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	ed93 7a06 	vldr	s14, [r3, #24]
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	edd3 7a07 	vldr	s15, [r3, #28]
 8001f76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	edc3 7a08 	vstr	s15, [r3, #32]

	pid->p = pid->kp * pid->e_now;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	ed93 7a00 	vldr	s14, [r3]
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	edd3 7a06 	vldr	s15, [r3, #24]
 8001f8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->i = pid->i + (pid->e_now * pid->dt);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	ed93 7a04 	vldr	s14, [r3, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	edd3 6a06 	vldr	s13, [r3, #24]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001fa8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	edc3 7a04 	vstr	s15, [r3, #16]
	if(pid->i > 500){
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fbc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8002090 <PID_Update+0x148>
 8001fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc8:	dd03      	ble.n	8001fd2 <PID_Update+0x8a>
		pid->i = 500;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4a31      	ldr	r2, [pc, #196]	; (8002094 <PID_Update+0x14c>)
 8001fce:	611a      	str	r2, [r3, #16]
 8001fd0:	e00c      	b.n	8001fec <PID_Update+0xa4>
	}else if(pid->i < -500){
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	edd3 7a04 	vldr	s15, [r3, #16]
 8001fd8:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8002098 <PID_Update+0x150>
 8001fdc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fe4:	d502      	bpl.n	8001fec <PID_Update+0xa4>
		pid->i = -500;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	4a2c      	ldr	r2, [pc, #176]	; (800209c <PID_Update+0x154>)
 8001fea:	611a      	str	r2, [r3, #16]
	}
	pid->d = pid->de / pid->dt;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	edd3 6a08 	vldr	s13, [r3, #32]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001ff8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	edc3 7a05 	vstr	s15, [r3, #20]

	out = pid->kp * (pid->p + (1 / pid->ti) * pid->i + pid->td * pid->d);
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	ed93 7a00 	vldr	s14, [r3]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	edd3 6a03 	vldr	s13, [r3, #12]
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	edd3 7a01 	vldr	s15, [r3, #4]
 8002014:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8002018:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	edd3 7a04 	vldr	s15, [r3, #16]
 8002022:	ee66 7a27 	vmul.f32	s15, s12, s15
 8002026:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	ed93 6a02 	vldr	s12, [r3, #8]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	edd3 7a05 	vldr	s15, [r3, #20]
 8002036:	ee66 7a27 	vmul.f32	s15, s12, s15
 800203a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800203e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002042:	edc7 7a05 	vstr	s15, [r7, #20]
	if(out < -500){
 8002046:	edd7 7a05 	vldr	s15, [r7, #20]
 800204a:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002098 <PID_Update+0x150>
 800204e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002056:	d502      	bpl.n	800205e <PID_Update+0x116>
		out = -500;
 8002058:	4b10      	ldr	r3, [pc, #64]	; (800209c <PID_Update+0x154>)
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	e00a      	b.n	8002074 <PID_Update+0x12c>
	}else if(out > 500){
 800205e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002062:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002090 <PID_Update+0x148>
 8002066:	eef4 7ac7 	vcmpe.f32	s15, s14
 800206a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800206e:	dd01      	ble.n	8002074 <PID_Update+0x12c>
		out = 500;
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <PID_Update+0x14c>)
 8002072:	617b      	str	r3, [r7, #20]
	}
	pid->e_prev = pid->e_now;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	699a      	ldr	r2, [r3, #24]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	61da      	str	r2, [r3, #28]
	return out;
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	ee07 3a90 	vmov	s15, r3
}
 8002082:	eeb0 0a67 	vmov.f32	s0, s15
 8002086:	371c      	adds	r7, #28
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	43fa0000 	.word	0x43fa0000
 8002094:	43fa0000 	.word	0x43fa0000
 8002098:	c3fa0000 	.word	0xc3fa0000
 800209c:	c3fa0000 	.word	0xc3fa0000

080020a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b083      	sub	sp, #12
 80020a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020a6:	2300      	movs	r3, #0
 80020a8:	607b      	str	r3, [r7, #4]
 80020aa:	4b10      	ldr	r3, [pc, #64]	; (80020ec <HAL_MspInit+0x4c>)
 80020ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ae:	4a0f      	ldr	r2, [pc, #60]	; (80020ec <HAL_MspInit+0x4c>)
 80020b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020b4:	6453      	str	r3, [r2, #68]	; 0x44
 80020b6:	4b0d      	ldr	r3, [pc, #52]	; (80020ec <HAL_MspInit+0x4c>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020be:	607b      	str	r3, [r7, #4]
 80020c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	603b      	str	r3, [r7, #0]
 80020c6:	4b09      	ldr	r3, [pc, #36]	; (80020ec <HAL_MspInit+0x4c>)
 80020c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ca:	4a08      	ldr	r2, [pc, #32]	; (80020ec <HAL_MspInit+0x4c>)
 80020cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6413      	str	r3, [r2, #64]	; 0x40
 80020d2:	4b06      	ldr	r3, [pc, #24]	; (80020ec <HAL_MspInit+0x4c>)
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020de:	bf00      	nop
 80020e0:	370c      	adds	r7, #12
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800

080020f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020f0:	b480      	push	{r7}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80020f4:	e7fe      	b.n	80020f4 <NMI_Handler+0x4>

080020f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020f6:	b480      	push	{r7}
 80020f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020fa:	e7fe      	b.n	80020fa <HardFault_Handler+0x4>

080020fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002100:	e7fe      	b.n	8002100 <MemManage_Handler+0x4>

08002102 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002102:	b480      	push	{r7}
 8002104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002106:	e7fe      	b.n	8002106 <BusFault_Handler+0x4>

08002108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800210c:	e7fe      	b.n	800210c <UsageFault_Handler+0x4>

0800210e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800210e:	b480      	push	{r7}
 8002110:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002112:	bf00      	nop
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800211c:	b480      	push	{r7}
 800211e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002120:	bf00      	nop
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800212a:	b480      	push	{r7}
 800212c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800212e:	bf00      	nop
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr

08002138 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800213c:	f000 fa86 	bl	800264c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}

08002144 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002148:	2001      	movs	r0, #1
 800214a:	f001 fdd5 	bl	8003cf8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800214e:	bf00      	nop
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <ADC_IRQHandler+0x10>)
 800215a:	f000 fafe 	bl	800275a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000314 	.word	0x20000314

08002168 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800216e:	f003 ff9d 	bl	80060ac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	20000674 	.word	0x20000674

0800217c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <DMA2_Stream0_IRQHandler+0x10>)
 8002182:	f001 f9cb 	bl	800351c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	2000035c 	.word	0x2000035c

08002190 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <OTG_FS_IRQHandler+0x10>)
 8002196:	f002 f85b 	bl	8004250 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20001ba0 	.word	0x20001ba0

080021a4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
	return 1;
 80021a8:	2301      	movs	r3, #1
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	46bd      	mov	sp, r7
 80021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b2:	4770      	bx	lr

080021b4 <_kill>:

int _kill(int pid, int sig)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80021be:	f008 fe4b 	bl	800ae58 <__errno>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2216      	movs	r2, #22
 80021c6:	601a      	str	r2, [r3, #0]
	return -1;
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}

080021d4 <_exit>:

void _exit (int status)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80021dc:	f04f 31ff 	mov.w	r1, #4294967295
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff ffe7 	bl	80021b4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80021e6:	e7fe      	b.n	80021e6 <_exit+0x12>

080021e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b086      	sub	sp, #24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	e00a      	b.n	8002210 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021fa:	f3af 8000 	nop.w
 80021fe:	4601      	mov	r1, r0
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	60ba      	str	r2, [r7, #8]
 8002206:	b2ca      	uxtb	r2, r1
 8002208:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	3301      	adds	r3, #1
 800220e:	617b      	str	r3, [r7, #20]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	dbf0      	blt.n	80021fa <_read+0x12>
	}

return len;
 8002218:	687b      	ldr	r3, [r7, #4]
}
 800221a:	4618      	mov	r0, r3
 800221c:	3718      	adds	r7, #24
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}

08002222 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002222:	b580      	push	{r7, lr}
 8002224:	b086      	sub	sp, #24
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800222e:	2300      	movs	r3, #0
 8002230:	617b      	str	r3, [r7, #20]
 8002232:	e009      	b.n	8002248 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	1c5a      	adds	r2, r3, #1
 8002238:	60ba      	str	r2, [r7, #8]
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	3301      	adds	r3, #1
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	429a      	cmp	r2, r3
 800224e:	dbf1      	blt.n	8002234 <_write+0x12>
	}
	return len;
 8002250:	687b      	ldr	r3, [r7, #4]
}
 8002252:	4618      	mov	r0, r3
 8002254:	3718      	adds	r7, #24
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}

0800225a <_close>:

int _close(int file)
{
 800225a:	b480      	push	{r7}
 800225c:	b083      	sub	sp, #12
 800225e:	af00      	add	r7, sp, #0
 8002260:	6078      	str	r0, [r7, #4]
	return -1;
 8002262:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002266:	4618      	mov	r0, r3
 8002268:	370c      	adds	r7, #12
 800226a:	46bd      	mov	sp, r7
 800226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002270:	4770      	bx	lr

08002272 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002282:	605a      	str	r2, [r3, #4]
	return 0;
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	370c      	adds	r7, #12
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <_isatty>:

int _isatty(int file)
{
 8002292:	b480      	push	{r7}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
	return 1;
 800229a:	2301      	movs	r3, #1
}
 800229c:	4618      	mov	r0, r3
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
	return 0;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3714      	adds	r7, #20
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022cc:	4a14      	ldr	r2, [pc, #80]	; (8002320 <_sbrk+0x5c>)
 80022ce:	4b15      	ldr	r3, [pc, #84]	; (8002324 <_sbrk+0x60>)
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022d8:	4b13      	ldr	r3, [pc, #76]	; (8002328 <_sbrk+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d102      	bne.n	80022e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e0:	4b11      	ldr	r3, [pc, #68]	; (8002328 <_sbrk+0x64>)
 80022e2:	4a12      	ldr	r2, [pc, #72]	; (800232c <_sbrk+0x68>)
 80022e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022e6:	4b10      	ldr	r3, [pc, #64]	; (8002328 <_sbrk+0x64>)
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	4413      	add	r3, r2
 80022ee:	693a      	ldr	r2, [r7, #16]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d207      	bcs.n	8002304 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f4:	f008 fdb0 	bl	800ae58 <__errno>
 80022f8:	4603      	mov	r3, r0
 80022fa:	220c      	movs	r2, #12
 80022fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002302:	e009      	b.n	8002318 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002304:	4b08      	ldr	r3, [pc, #32]	; (8002328 <_sbrk+0x64>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800230a:	4b07      	ldr	r3, [pc, #28]	; (8002328 <_sbrk+0x64>)
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4413      	add	r3, r2
 8002312:	4a05      	ldr	r2, [pc, #20]	; (8002328 <_sbrk+0x64>)
 8002314:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002316:	68fb      	ldr	r3, [r7, #12]
}
 8002318:	4618      	mov	r0, r3
 800231a:	3718      	adds	r7, #24
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20018000 	.word	0x20018000
 8002324:	00000400 	.word	0x00000400
 8002328:	20000628 	.word	0x20000628
 800232c:	200022e0 	.word	0x200022e0

08002330 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002330:	b480      	push	{r7}
 8002332:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002334:	4b06      	ldr	r3, [pc, #24]	; (8002350 <SystemInit+0x20>)
 8002336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233a:	4a05      	ldr	r2, [pc, #20]	; (8002350 <SystemInit+0x20>)
 800233c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002340:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002344:	bf00      	nop
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
 800234e:	bf00      	nop
 8002350:	e000ed00 	.word	0xe000ed00

08002354 <MX_TIM9_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08c      	sub	sp, #48	; 0x30
 8002358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800235a:	f107 0320 	add.w	r3, r7, #32
 800235e:	2200      	movs	r2, #0
 8002360:	601a      	str	r2, [r3, #0]
 8002362:	605a      	str	r2, [r3, #4]
 8002364:	609a      	str	r2, [r3, #8]
 8002366:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002368:	1d3b      	adds	r3, r7, #4
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	605a      	str	r2, [r3, #4]
 8002370:	609a      	str	r2, [r3, #8]
 8002372:	60da      	str	r2, [r3, #12]
 8002374:	611a      	str	r2, [r3, #16]
 8002376:	615a      	str	r2, [r3, #20]
 8002378:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800237a:	4b26      	ldr	r3, [pc, #152]	; (8002414 <MX_TIM9_Init+0xc0>)
 800237c:	4a26      	ldr	r2, [pc, #152]	; (8002418 <MX_TIM9_Init+0xc4>)
 800237e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 8002380:	4b24      	ldr	r3, [pc, #144]	; (8002414 <MX_TIM9_Init+0xc0>)
 8002382:	2253      	movs	r2, #83	; 0x53
 8002384:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002386:	4b23      	ldr	r3, [pc, #140]	; (8002414 <MX_TIM9_Init+0xc0>)
 8002388:	2200      	movs	r2, #0
 800238a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 800238c:	4b21      	ldr	r3, [pc, #132]	; (8002414 <MX_TIM9_Init+0xc0>)
 800238e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8002392:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002394:	4b1f      	ldr	r3, [pc, #124]	; (8002414 <MX_TIM9_Init+0xc0>)
 8002396:	2200      	movs	r2, #0
 8002398:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800239a:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <MX_TIM9_Init+0xc0>)
 800239c:	2200      	movs	r2, #0
 800239e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80023a0:	481c      	ldr	r0, [pc, #112]	; (8002414 <MX_TIM9_Init+0xc0>)
 80023a2:	f003 fcc7 	bl	8005d34 <HAL_TIM_Base_Init>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d001      	beq.n	80023b0 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80023ac:	f7ff fd90 	bl	8001ed0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80023b6:	f107 0320 	add.w	r3, r7, #32
 80023ba:	4619      	mov	r1, r3
 80023bc:	4815      	ldr	r0, [pc, #84]	; (8002414 <MX_TIM9_Init+0xc0>)
 80023be:	f004 f83f 	bl	8006440 <HAL_TIM_ConfigClockSource>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80023c8:	f7ff fd82 	bl	8001ed0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80023cc:	4811      	ldr	r0, [pc, #68]	; (8002414 <MX_TIM9_Init+0xc0>)
 80023ce:	f003 fd63 	bl	8005e98 <HAL_TIM_PWM_Init>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d001      	beq.n	80023dc <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80023d8:	f7ff fd7a 	bl	8001ed0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80023dc:	2360      	movs	r3, #96	; 0x60
 80023de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 80023e0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80023e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	2200      	movs	r2, #0
 80023f2:	4619      	mov	r1, r3
 80023f4:	4807      	ldr	r0, [pc, #28]	; (8002414 <MX_TIM9_Init+0xc0>)
 80023f6:	f003 ff61 	bl	80062bc <HAL_TIM_PWM_ConfigChannel>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8002400:	f7ff fd66 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8002404:	4803      	ldr	r0, [pc, #12]	; (8002414 <MX_TIM9_Init+0xc0>)
 8002406:	f000 f86b 	bl	80024e0 <HAL_TIM_MspPostInit>

}
 800240a:	bf00      	nop
 800240c:	3730      	adds	r7, #48	; 0x30
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	2000062c 	.word	0x2000062c
 8002418:	40014000 	.word	0x40014000

0800241c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002420:	4b0e      	ldr	r3, [pc, #56]	; (800245c <MX_TIM10_Init+0x40>)
 8002422:	4a0f      	ldr	r2, [pc, #60]	; (8002460 <MX_TIM10_Init+0x44>)
 8002424:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 8002426:	4b0d      	ldr	r3, [pc, #52]	; (800245c <MX_TIM10_Init+0x40>)
 8002428:	2253      	movs	r2, #83	; 0x53
 800242a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800242c:	4b0b      	ldr	r3, [pc, #44]	; (800245c <MX_TIM10_Init+0x40>)
 800242e:	2200      	movs	r2, #0
 8002430:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 500-1;
 8002432:	4b0a      	ldr	r3, [pc, #40]	; (800245c <MX_TIM10_Init+0x40>)
 8002434:	f240 12f3 	movw	r2, #499	; 0x1f3
 8002438:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <MX_TIM10_Init+0x40>)
 800243c:	2200      	movs	r2, #0
 800243e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <MX_TIM10_Init+0x40>)
 8002442:	2200      	movs	r2, #0
 8002444:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002446:	4805      	ldr	r0, [pc, #20]	; (800245c <MX_TIM10_Init+0x40>)
 8002448:	f003 fc74 	bl	8005d34 <HAL_TIM_Base_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8002452:	f7ff fd3d 	bl	8001ed0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000674 	.word	0x20000674
 8002460:	40014400 	.word	0x40014400

08002464 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b084      	sub	sp, #16
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a18      	ldr	r2, [pc, #96]	; (80024d4 <HAL_TIM_Base_MspInit+0x70>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d10e      	bne.n	8002494 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002476:	2300      	movs	r3, #0
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	4b17      	ldr	r3, [pc, #92]	; (80024d8 <HAL_TIM_Base_MspInit+0x74>)
 800247c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247e:	4a16      	ldr	r2, [pc, #88]	; (80024d8 <HAL_TIM_Base_MspInit+0x74>)
 8002480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002484:	6453      	str	r3, [r2, #68]	; 0x44
 8002486:	4b14      	ldr	r3, [pc, #80]	; (80024d8 <HAL_TIM_Base_MspInit+0x74>)
 8002488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8002492:	e01a      	b.n	80024ca <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a10      	ldr	r2, [pc, #64]	; (80024dc <HAL_TIM_Base_MspInit+0x78>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d115      	bne.n	80024ca <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	4b0d      	ldr	r3, [pc, #52]	; (80024d8 <HAL_TIM_Base_MspInit+0x74>)
 80024a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a6:	4a0c      	ldr	r2, [pc, #48]	; (80024d8 <HAL_TIM_Base_MspInit+0x74>)
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ac:	6453      	str	r3, [r2, #68]	; 0x44
 80024ae:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <HAL_TIM_Base_MspInit+0x74>)
 80024b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	60bb      	str	r3, [r7, #8]
 80024b8:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80024ba:	2200      	movs	r2, #0
 80024bc:	2100      	movs	r1, #0
 80024be:	2019      	movs	r0, #25
 80024c0:	f000 feef 	bl	80032a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024c4:	2019      	movs	r0, #25
 80024c6:	f000 ff08 	bl	80032da <HAL_NVIC_EnableIRQ>
}
 80024ca:	bf00      	nop
 80024cc:	3710      	adds	r7, #16
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	40014000 	.word	0x40014000
 80024d8:	40023800 	.word	0x40023800
 80024dc:	40014400 	.word	0x40014400

080024e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024e8:	f107 030c 	add.w	r3, r7, #12
 80024ec:	2200      	movs	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	605a      	str	r2, [r3, #4]
 80024f2:	609a      	str	r2, [r3, #8]
 80024f4:	60da      	str	r2, [r3, #12]
 80024f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a12      	ldr	r2, [pc, #72]	; (8002548 <HAL_TIM_MspPostInit+0x68>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d11d      	bne.n	800253e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	4b11      	ldr	r3, [pc, #68]	; (800254c <HAL_TIM_MspPostInit+0x6c>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a10      	ldr	r2, [pc, #64]	; (800254c <HAL_TIM_MspPostInit+0x6c>)
 800250c:	f043 0301 	orr.w	r3, r3, #1
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b0e      	ldr	r3, [pc, #56]	; (800254c <HAL_TIM_MspPostInit+0x6c>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0301 	and.w	r3, r3, #1
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PA2     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800251e:	2304      	movs	r3, #4
 8002520:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800252e:	2303      	movs	r3, #3
 8002530:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002532:	f107 030c 	add.w	r3, r7, #12
 8002536:	4619      	mov	r1, r3
 8002538:	4805      	ldr	r0, [pc, #20]	; (8002550 <HAL_TIM_MspPostInit+0x70>)
 800253a:	f001 fa59 	bl	80039f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 800253e:	bf00      	nop
 8002540:	3720      	adds	r7, #32
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40014000 	.word	0x40014000
 800254c:	40023800 	.word	0x40023800
 8002550:	40020000 	.word	0x40020000

08002554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800258c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002558:	480d      	ldr	r0, [pc, #52]	; (8002590 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800255a:	490e      	ldr	r1, [pc, #56]	; (8002594 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800255c:	4a0e      	ldr	r2, [pc, #56]	; (8002598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800255e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002560:	e002      	b.n	8002568 <LoopCopyDataInit>

08002562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002566:	3304      	adds	r3, #4

08002568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800256a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800256c:	d3f9      	bcc.n	8002562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800256e:	4a0b      	ldr	r2, [pc, #44]	; (800259c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002570:	4c0b      	ldr	r4, [pc, #44]	; (80025a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002574:	e001      	b.n	800257a <LoopFillZerobss>

08002576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002578:	3204      	adds	r2, #4

0800257a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800257a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800257c:	d3fb      	bcc.n	8002576 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800257e:	f7ff fed7 	bl	8002330 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002582:	f008 fc6f 	bl	800ae64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002586:	f7ff f803 	bl	8001590 <main>
  bx  lr    
 800258a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800258c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002594:	200002f8 	.word	0x200002f8
  ldr r2, =_sidata
 8002598:	0800faa8 	.word	0x0800faa8
  ldr r2, =_sbss
 800259c:	200002f8 	.word	0x200002f8
  ldr r4, =_ebss
 80025a0:	200022dc 	.word	0x200022dc

080025a4 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025a4:	e7fe      	b.n	80025a4 <DMA1_Stream0_IRQHandler>
	...

080025a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025ac:	4b0e      	ldr	r3, [pc, #56]	; (80025e8 <HAL_Init+0x40>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a0d      	ldr	r2, [pc, #52]	; (80025e8 <HAL_Init+0x40>)
 80025b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025b8:	4b0b      	ldr	r3, [pc, #44]	; (80025e8 <HAL_Init+0x40>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0a      	ldr	r2, [pc, #40]	; (80025e8 <HAL_Init+0x40>)
 80025be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80025c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <HAL_Init+0x40>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a07      	ldr	r2, [pc, #28]	; (80025e8 <HAL_Init+0x40>)
 80025ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025d0:	2003      	movs	r0, #3
 80025d2:	f000 fe5b 	bl	800328c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025d6:	200f      	movs	r0, #15
 80025d8:	f000 f808 	bl	80025ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025dc:	f7ff fd60 	bl	80020a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40023c00 	.word	0x40023c00

080025ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80025f4:	4b12      	ldr	r3, [pc, #72]	; (8002640 <HAL_InitTick+0x54>)
 80025f6:	681a      	ldr	r2, [r3, #0]
 80025f8:	4b12      	ldr	r3, [pc, #72]	; (8002644 <HAL_InitTick+0x58>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	4619      	mov	r1, r3
 80025fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002602:	fbb3 f3f1 	udiv	r3, r3, r1
 8002606:	fbb2 f3f3 	udiv	r3, r2, r3
 800260a:	4618      	mov	r0, r3
 800260c:	f000 fe73 	bl	80032f6 <HAL_SYSTICK_Config>
 8002610:	4603      	mov	r3, r0
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e00e      	b.n	8002638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2b0f      	cmp	r3, #15
 800261e:	d80a      	bhi.n	8002636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002620:	2200      	movs	r2, #0
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	f04f 30ff 	mov.w	r0, #4294967295
 8002628:	f000 fe3b 	bl	80032a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800262c:	4a06      	ldr	r2, [pc, #24]	; (8002648 <HAL_InitTick+0x5c>)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002632:	2300      	movs	r3, #0
 8002634:	e000      	b.n	8002638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
}
 8002638:	4618      	mov	r0, r3
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	20000028 	.word	0x20000028
 8002644:	20000030 	.word	0x20000030
 8002648:	2000002c 	.word	0x2000002c

0800264c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002650:	4b06      	ldr	r3, [pc, #24]	; (800266c <HAL_IncTick+0x20>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	4b06      	ldr	r3, [pc, #24]	; (8002670 <HAL_IncTick+0x24>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4413      	add	r3, r2
 800265c:	4a04      	ldr	r2, [pc, #16]	; (8002670 <HAL_IncTick+0x24>)
 800265e:	6013      	str	r3, [r2, #0]
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002668:	4770      	bx	lr
 800266a:	bf00      	nop
 800266c:	20000030 	.word	0x20000030
 8002670:	200006bc 	.word	0x200006bc

08002674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0
  return uwTick;
 8002678:	4b03      	ldr	r3, [pc, #12]	; (8002688 <HAL_GetTick+0x14>)
 800267a:	681b      	ldr	r3, [r3, #0]
}
 800267c:	4618      	mov	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr
 8002686:	bf00      	nop
 8002688:	200006bc 	.word	0x200006bc

0800268c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002694:	f7ff ffee 	bl	8002674 <HAL_GetTick>
 8002698:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a4:	d005      	beq.n	80026b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026a6:	4b0a      	ldr	r3, [pc, #40]	; (80026d0 <HAL_Delay+0x44>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4413      	add	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80026b2:	bf00      	nop
 80026b4:	f7ff ffde 	bl	8002674 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d8f7      	bhi.n	80026b4 <HAL_Delay+0x28>
  {
  }
}
 80026c4:	bf00      	nop
 80026c6:	bf00      	nop
 80026c8:	3710      	adds	r7, #16
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	20000030 	.word	0x20000030

080026d4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b084      	sub	sp, #16
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026dc:	2300      	movs	r3, #0
 80026de:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e033      	b.n	8002752 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d109      	bne.n	8002706 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f7fe fcf8 	bl	80010e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2200      	movs	r2, #0
 80026fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270a:	f003 0310 	and.w	r3, r3, #16
 800270e:	2b00      	cmp	r3, #0
 8002710:	d118      	bne.n	8002744 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002716:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800271a:	f023 0302 	bic.w	r3, r3, #2
 800271e:	f043 0202 	orr.w	r2, r3, #2
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f000 fb58 	bl	8002ddc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2200      	movs	r2, #0
 8002730:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	f023 0303 	bic.w	r3, r3, #3
 800273a:	f043 0201 	orr.w	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	641a      	str	r2, [r3, #64]	; 0x40
 8002742:	e001      	b.n	8002748 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}

0800275a <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b086      	sub	sp, #24
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002762:	2300      	movs	r3, #0
 8002764:	617b      	str	r3, [r7, #20]
 8002766:	2300      	movs	r3, #0
 8002768:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	f003 0302 	and.w	r3, r3, #2
 8002780:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002782:	68bb      	ldr	r3, [r7, #8]
 8002784:	f003 0320 	and.w	r3, r3, #32
 8002788:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d049      	beq.n	8002824 <HAL_ADC_IRQHandler+0xca>
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d046      	beq.n	8002824 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279a:	f003 0310 	and.w	r3, r3, #16
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d105      	bne.n	80027ae <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d12b      	bne.n	8002814 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d127      	bne.n	8002814 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d006      	beq.n	80027e0 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d119      	bne.n	8002814 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f022 0220 	bic.w	r2, r2, #32
 80027ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d105      	bne.n	8002814 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280c:	f043 0201 	orr.w	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	f7ff faf3 	bl	8001e00 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f06f 0212 	mvn.w	r2, #18
 8002822:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002832:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d057      	beq.n	80028ea <HAL_ADC_IRQHandler+0x190>
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d054      	beq.n	80028ea <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f003 0310 	and.w	r3, r3, #16
 8002848:	2b00      	cmp	r3, #0
 800284a:	d105      	bne.n	8002858 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d139      	bne.n	80028da <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002870:	2b00      	cmp	r3, #0
 8002872:	d006      	beq.n	8002882 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800287e:	2b00      	cmp	r3, #0
 8002880:	d12b      	bne.n	80028da <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800288c:	2b00      	cmp	r3, #0
 800288e:	d124      	bne.n	80028da <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800289a:	2b00      	cmp	r3, #0
 800289c:	d11d      	bne.n	80028da <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d119      	bne.n	80028da <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	685a      	ldr	r2, [r3, #4]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028b4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d105      	bne.n	80028da <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	f043 0201 	orr.w	r2, r3, #1
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 fbfc 	bl	80030d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f06f 020c 	mvn.w	r2, #12
 80028e8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028f8:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80028fa:	697b      	ldr	r3, [r7, #20]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d017      	beq.n	8002930 <HAL_ADC_IRQHandler+0x1d6>
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	2b00      	cmp	r3, #0
 8002904:	d014      	beq.n	8002930 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d10d      	bne.n	8002930 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002918:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 f925 	bl	8002b70 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f06f 0201 	mvn.w	r2, #1
 800292e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800293e:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d015      	beq.n	8002972 <HAL_ADC_IRQHandler+0x218>
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d012      	beq.n	8002972 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002950:	f043 0202 	orr.w	r2, r3, #2
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0220 	mvn.w	r2, #32
 8002960:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f000 f90e 	bl	8002b84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f06f 0220 	mvn.w	r2, #32
 8002970:	601a      	str	r2, [r3, #0]
  }
}
 8002972:	bf00      	nop
 8002974:	3718      	adds	r7, #24
 8002976:	46bd      	mov	sp, r7
 8002978:	bd80      	pop	{r7, pc}
	...

0800297c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002988:	2300      	movs	r3, #0
 800298a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002992:	2b01      	cmp	r3, #1
 8002994:	d101      	bne.n	800299a <HAL_ADC_Start_DMA+0x1e>
 8002996:	2302      	movs	r3, #2
 8002998:	e0ce      	b.n	8002b38 <HAL_ADC_Start_DMA+0x1bc>
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2201      	movs	r2, #1
 800299e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d018      	beq.n	80029e2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689a      	ldr	r2, [r3, #8]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f042 0201 	orr.w	r2, r2, #1
 80029be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029c0:	4b5f      	ldr	r3, [pc, #380]	; (8002b40 <HAL_ADC_Start_DMA+0x1c4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a5f      	ldr	r2, [pc, #380]	; (8002b44 <HAL_ADC_Start_DMA+0x1c8>)
 80029c6:	fba2 2303 	umull	r2, r3, r2, r3
 80029ca:	0c9a      	lsrs	r2, r3, #18
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80029d4:	e002      	b.n	80029dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	3b01      	subs	r3, #1
 80029da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d1f9      	bne.n	80029d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f0:	d107      	bne.n	8002a02 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689a      	ldr	r2, [r3, #8]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a00:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 0301 	and.w	r3, r3, #1
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	f040 8086 	bne.w	8002b1e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a16:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002a1a:	f023 0301 	bic.w	r3, r3, #1
 8002a1e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	685b      	ldr	r3, [r3, #4]
 8002a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d007      	beq.n	8002a44 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a3c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a50:	d106      	bne.n	8002a60 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a56:	f023 0206 	bic.w	r2, r3, #6
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
 8002a5e:	e002      	b.n	8002a66 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a6e:	4b36      	ldr	r3, [pc, #216]	; (8002b48 <HAL_ADC_Start_DMA+0x1cc>)
 8002a70:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a76:	4a35      	ldr	r2, [pc, #212]	; (8002b4c <HAL_ADC_Start_DMA+0x1d0>)
 8002a78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7e:	4a34      	ldr	r2, [pc, #208]	; (8002b50 <HAL_ADC_Start_DMA+0x1d4>)
 8002a80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a86:	4a33      	ldr	r2, [pc, #204]	; (8002b54 <HAL_ADC_Start_DMA+0x1d8>)
 8002a88:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a92:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	685a      	ldr	r2, [r3, #4]
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002aa2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ab2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	334c      	adds	r3, #76	; 0x4c
 8002abe:	4619      	mov	r1, r3
 8002ac0:	68ba      	ldr	r2, [r7, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	f000 fcd2 	bl	800346c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 031f 	and.w	r3, r3, #31
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d10f      	bne.n	8002af4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d129      	bne.n	8002b36 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	689a      	ldr	r2, [r3, #8]
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002af0:	609a      	str	r2, [r3, #8]
 8002af2:	e020      	b.n	8002b36 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a17      	ldr	r2, [pc, #92]	; (8002b58 <HAL_ADC_Start_DMA+0x1dc>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d11b      	bne.n	8002b36 <HAL_ADC_Start_DMA+0x1ba>
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d114      	bne.n	8002b36 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	689a      	ldr	r2, [r3, #8]
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	e00b      	b.n	8002b36 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f043 0210 	orr.w	r2, r3, #16
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	f043 0201 	orr.w	r2, r3, #1
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002b36:	2300      	movs	r3, #0
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3718      	adds	r7, #24
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	20000028 	.word	0x20000028
 8002b44:	431bde83 	.word	0x431bde83
 8002b48:	40012300 	.word	0x40012300
 8002b4c:	08002fd5 	.word	0x08002fd5
 8002b50:	0800308f 	.word	0x0800308f
 8002b54:	080030ab 	.word	0x080030ab
 8002b58:	40012000 	.word	0x40012000

08002b5c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002b78:	bf00      	nop
 8002b7a:	370c      	adds	r7, #12
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr

08002b98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b085      	sub	sp, #20
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_ADC_ConfigChannel+0x1c>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e105      	b.n	8002dc0 <HAL_ADC_ConfigChannel+0x228>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2b09      	cmp	r3, #9
 8002bc2:	d925      	bls.n	8002c10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68d9      	ldr	r1, [r3, #12]
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	b29b      	uxth	r3, r3
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	005b      	lsls	r3, r3, #1
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3b1e      	subs	r3, #30
 8002bda:	2207      	movs	r2, #7
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	43da      	mvns	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	400a      	ands	r2, r1
 8002be8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	68d9      	ldr	r1, [r3, #12]
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	b29b      	uxth	r3, r3
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	005b      	lsls	r3, r3, #1
 8002c00:	4403      	add	r3, r0
 8002c02:	3b1e      	subs	r3, #30
 8002c04:	409a      	lsls	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	60da      	str	r2, [r3, #12]
 8002c0e:	e022      	b.n	8002c56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	6919      	ldr	r1, [r3, #16]
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4613      	mov	r3, r2
 8002c20:	005b      	lsls	r3, r3, #1
 8002c22:	4413      	add	r3, r2
 8002c24:	2207      	movs	r2, #7
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43da      	mvns	r2, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	400a      	ands	r2, r1
 8002c32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	6919      	ldr	r1, [r3, #16]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	689a      	ldr	r2, [r3, #8]
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	b29b      	uxth	r3, r3
 8002c44:	4618      	mov	r0, r3
 8002c46:	4603      	mov	r3, r0
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	4403      	add	r3, r0
 8002c4c:	409a      	lsls	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d824      	bhi.n	8002ca8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4413      	add	r3, r2
 8002c6e:	3b05      	subs	r3, #5
 8002c70:	221f      	movs	r2, #31
 8002c72:	fa02 f303 	lsl.w	r3, r2, r3
 8002c76:	43da      	mvns	r2, r3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	400a      	ands	r2, r1
 8002c7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685a      	ldr	r2, [r3, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	4413      	add	r3, r2
 8002c98:	3b05      	subs	r3, #5
 8002c9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ca6:	e04c      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b0c      	cmp	r3, #12
 8002cae:	d824      	bhi.n	8002cfa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	4613      	mov	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4413      	add	r3, r2
 8002cc0:	3b23      	subs	r3, #35	; 0x23
 8002cc2:	221f      	movs	r2, #31
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	43da      	mvns	r2, r3
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	400a      	ands	r2, r1
 8002cd0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	4618      	mov	r0, r3
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685a      	ldr	r2, [r3, #4]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	4413      	add	r3, r2
 8002cea:	3b23      	subs	r3, #35	; 0x23
 8002cec:	fa00 f203 	lsl.w	r2, r0, r3
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	430a      	orrs	r2, r1
 8002cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8002cf8:	e023      	b.n	8002d42 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	4613      	mov	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4413      	add	r3, r2
 8002d0a:	3b41      	subs	r3, #65	; 0x41
 8002d0c:	221f      	movs	r2, #31
 8002d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d12:	43da      	mvns	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	400a      	ands	r2, r1
 8002d1a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	4618      	mov	r0, r3
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	685a      	ldr	r2, [r3, #4]
 8002d2e:	4613      	mov	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	4413      	add	r3, r2
 8002d34:	3b41      	subs	r3, #65	; 0x41
 8002d36:	fa00 f203 	lsl.w	r2, r0, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d42:	4b22      	ldr	r3, [pc, #136]	; (8002dcc <HAL_ADC_ConfigChannel+0x234>)
 8002d44:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4a21      	ldr	r2, [pc, #132]	; (8002dd0 <HAL_ADC_ConfigChannel+0x238>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d109      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x1cc>
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b12      	cmp	r3, #18
 8002d56:	d105      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a19      	ldr	r2, [pc, #100]	; (8002dd0 <HAL_ADC_ConfigChannel+0x238>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d123      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x21e>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b10      	cmp	r3, #16
 8002d74:	d003      	beq.n	8002d7e <HAL_ADC_ConfigChannel+0x1e6>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b11      	cmp	r3, #17
 8002d7c:	d11b      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b10      	cmp	r3, #16
 8002d90:	d111      	bne.n	8002db6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d92:	4b10      	ldr	r3, [pc, #64]	; (8002dd4 <HAL_ADC_ConfigChannel+0x23c>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a10      	ldr	r2, [pc, #64]	; (8002dd8 <HAL_ADC_ConfigChannel+0x240>)
 8002d98:	fba2 2303 	umull	r2, r3, r2, r3
 8002d9c:	0c9a      	lsrs	r2, r3, #18
 8002d9e:	4613      	mov	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	4413      	add	r3, r2
 8002da4:	005b      	lsls	r3, r3, #1
 8002da6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002da8:	e002      	b.n	8002db0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	3b01      	subs	r3, #1
 8002dae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d1f9      	bne.n	8002daa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002dbe:	2300      	movs	r3, #0
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	3714      	adds	r7, #20
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	40012300 	.word	0x40012300
 8002dd0:	40012000 	.word	0x40012000
 8002dd4:	20000028 	.word	0x20000028
 8002dd8:	431bde83 	.word	0x431bde83

08002ddc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002de4:	4b79      	ldr	r3, [pc, #484]	; (8002fcc <ADC_Init+0x1f0>)
 8002de6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	685a      	ldr	r2, [r3, #4]
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e10:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6859      	ldr	r1, [r3, #4]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	021a      	lsls	r2, r3, #8
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	689a      	ldr	r2, [r3, #8]
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	430a      	orrs	r2, r1
 8002e46:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689a      	ldr	r2, [r3, #8]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e56:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	6899      	ldr	r1, [r3, #8]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e6e:	4a58      	ldr	r2, [pc, #352]	; (8002fd0 <ADC_Init+0x1f4>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d022      	beq.n	8002eba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	689a      	ldr	r2, [r3, #8]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002e82:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6899      	ldr	r1, [r3, #8]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	430a      	orrs	r2, r1
 8002e94:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ea4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	6899      	ldr	r1, [r3, #8]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	430a      	orrs	r2, r1
 8002eb6:	609a      	str	r2, [r3, #8]
 8002eb8:	e00f      	b.n	8002eda <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	689a      	ldr	r2, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ec8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ed8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	689a      	ldr	r2, [r3, #8]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0202 	bic.w	r2, r2, #2
 8002ee8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6899      	ldr	r1, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	7e1b      	ldrb	r3, [r3, #24]
 8002ef4:	005a      	lsls	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d01b      	beq.n	8002f40 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	685a      	ldr	r2, [r3, #4]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f16:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	685a      	ldr	r2, [r3, #4]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f26:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	6859      	ldr	r1, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f32:	3b01      	subs	r3, #1
 8002f34:	035a      	lsls	r2, r3, #13
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	e007      	b.n	8002f50 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f4e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002f5e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69db      	ldr	r3, [r3, #28]
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	051a      	lsls	r2, r3, #20
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689a      	ldr	r2, [r3, #8]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002f84:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6899      	ldr	r1, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002f92:	025a      	lsls	r2, r3, #9
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	689a      	ldr	r2, [r3, #8]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6899      	ldr	r1, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	029a      	lsls	r2, r3, #10
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	609a      	str	r2, [r3, #8]
}
 8002fc0:	bf00      	nop
 8002fc2:	3714      	adds	r7, #20
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	40012300 	.word	0x40012300
 8002fd0:	0f000001 	.word	0x0f000001

08002fd4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d13c      	bne.n	8003068 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d12b      	bne.n	8003060 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800300c:	2b00      	cmp	r3, #0
 800300e:	d127      	bne.n	8003060 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800301a:	2b00      	cmp	r3, #0
 800301c:	d006      	beq.n	800302c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003028:	2b00      	cmp	r3, #0
 800302a:	d119      	bne.n	8003060 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f022 0220 	bic.w	r2, r2, #32
 800303a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003040:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d105      	bne.n	8003060 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003058:	f043 0201 	orr.w	r2, r3, #1
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f7fe fecd 	bl	8001e00 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003066:	e00e      	b.n	8003086 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306c:	f003 0310 	and.w	r3, r3, #16
 8003070:	2b00      	cmp	r3, #0
 8003072:	d003      	beq.n	800307c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003074:	68f8      	ldr	r0, [r7, #12]
 8003076:	f7ff fd85 	bl	8002b84 <HAL_ADC_ErrorCallback>
}
 800307a:	e004      	b.n	8003086 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	4798      	blx	r3
}
 8003086:	bf00      	nop
 8003088:	3710      	adds	r7, #16
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800308e:	b580      	push	{r7, lr}
 8003090:	b084      	sub	sp, #16
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f7ff fd5d 	bl	8002b5c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030a2:	bf00      	nop
 80030a4:	3710      	adds	r7, #16
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80030aa:	b580      	push	{r7, lr}
 80030ac:	b084      	sub	sp, #16
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030b6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2240      	movs	r2, #64	; 0x40
 80030bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030c2:	f043 0204 	orr.w	r2, r3, #4
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f7ff fd5a 	bl	8002b84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80030d0:	bf00      	nop
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f003 0307 	and.w	r3, r3, #7
 80030fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030fc:	4b0c      	ldr	r3, [pc, #48]	; (8003130 <__NVIC_SetPriorityGrouping+0x44>)
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003108:	4013      	ands	r3, r2
 800310a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003114:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800311c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800311e:	4a04      	ldr	r2, [pc, #16]	; (8003130 <__NVIC_SetPriorityGrouping+0x44>)
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	60d3      	str	r3, [r2, #12]
}
 8003124:	bf00      	nop
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	e000ed00 	.word	0xe000ed00

08003134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003138:	4b04      	ldr	r3, [pc, #16]	; (800314c <__NVIC_GetPriorityGrouping+0x18>)
 800313a:	68db      	ldr	r3, [r3, #12]
 800313c:	0a1b      	lsrs	r3, r3, #8
 800313e:	f003 0307 	and.w	r3, r3, #7
}
 8003142:	4618      	mov	r0, r3
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	e000ed00 	.word	0xe000ed00

08003150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	4603      	mov	r3, r0
 8003158:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800315a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315e:	2b00      	cmp	r3, #0
 8003160:	db0b      	blt.n	800317a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003162:	79fb      	ldrb	r3, [r7, #7]
 8003164:	f003 021f 	and.w	r2, r3, #31
 8003168:	4907      	ldr	r1, [pc, #28]	; (8003188 <__NVIC_EnableIRQ+0x38>)
 800316a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	2001      	movs	r0, #1
 8003172:	fa00 f202 	lsl.w	r2, r0, r2
 8003176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
 8003186:	bf00      	nop
 8003188:	e000e100 	.word	0xe000e100

0800318c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	6039      	str	r1, [r7, #0]
 8003196:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003198:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319c:	2b00      	cmp	r3, #0
 800319e:	db0a      	blt.n	80031b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	490c      	ldr	r1, [pc, #48]	; (80031d8 <__NVIC_SetPriority+0x4c>)
 80031a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031aa:	0112      	lsls	r2, r2, #4
 80031ac:	b2d2      	uxtb	r2, r2
 80031ae:	440b      	add	r3, r1
 80031b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031b4:	e00a      	b.n	80031cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	4908      	ldr	r1, [pc, #32]	; (80031dc <__NVIC_SetPriority+0x50>)
 80031bc:	79fb      	ldrb	r3, [r7, #7]
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	3b04      	subs	r3, #4
 80031c4:	0112      	lsls	r2, r2, #4
 80031c6:	b2d2      	uxtb	r2, r2
 80031c8:	440b      	add	r3, r1
 80031ca:	761a      	strb	r2, [r3, #24]
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr
 80031d8:	e000e100 	.word	0xe000e100
 80031dc:	e000ed00 	.word	0xe000ed00

080031e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b089      	sub	sp, #36	; 0x24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	60f8      	str	r0, [r7, #12]
 80031e8:	60b9      	str	r1, [r7, #8]
 80031ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f003 0307 	and.w	r3, r3, #7
 80031f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	f1c3 0307 	rsb	r3, r3, #7
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	bf28      	it	cs
 80031fe:	2304      	movcs	r3, #4
 8003200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3304      	adds	r3, #4
 8003206:	2b06      	cmp	r3, #6
 8003208:	d902      	bls.n	8003210 <NVIC_EncodePriority+0x30>
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	3b03      	subs	r3, #3
 800320e:	e000      	b.n	8003212 <NVIC_EncodePriority+0x32>
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003214:	f04f 32ff 	mov.w	r2, #4294967295
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	fa02 f303 	lsl.w	r3, r2, r3
 800321e:	43da      	mvns	r2, r3
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	401a      	ands	r2, r3
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003228:	f04f 31ff 	mov.w	r1, #4294967295
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	fa01 f303 	lsl.w	r3, r1, r3
 8003232:	43d9      	mvns	r1, r3
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003238:	4313      	orrs	r3, r2
         );
}
 800323a:	4618      	mov	r0, r3
 800323c:	3724      	adds	r7, #36	; 0x24
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr
	...

08003248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b082      	sub	sp, #8
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	3b01      	subs	r3, #1
 8003254:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003258:	d301      	bcc.n	800325e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800325a:	2301      	movs	r3, #1
 800325c:	e00f      	b.n	800327e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800325e:	4a0a      	ldr	r2, [pc, #40]	; (8003288 <SysTick_Config+0x40>)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	3b01      	subs	r3, #1
 8003264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003266:	210f      	movs	r1, #15
 8003268:	f04f 30ff 	mov.w	r0, #4294967295
 800326c:	f7ff ff8e 	bl	800318c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003270:	4b05      	ldr	r3, [pc, #20]	; (8003288 <SysTick_Config+0x40>)
 8003272:	2200      	movs	r2, #0
 8003274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003276:	4b04      	ldr	r3, [pc, #16]	; (8003288 <SysTick_Config+0x40>)
 8003278:	2207      	movs	r2, #7
 800327a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
 8003286:	bf00      	nop
 8003288:	e000e010 	.word	0xe000e010

0800328c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003294:	6878      	ldr	r0, [r7, #4]
 8003296:	f7ff ff29 	bl	80030ec <__NVIC_SetPriorityGrouping>
}
 800329a:	bf00      	nop
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}

080032a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032a2:	b580      	push	{r7, lr}
 80032a4:	b086      	sub	sp, #24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	4603      	mov	r3, r0
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032b4:	f7ff ff3e 	bl	8003134 <__NVIC_GetPriorityGrouping>
 80032b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	68b9      	ldr	r1, [r7, #8]
 80032be:	6978      	ldr	r0, [r7, #20]
 80032c0:	f7ff ff8e 	bl	80031e0 <NVIC_EncodePriority>
 80032c4:	4602      	mov	r2, r0
 80032c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032ca:	4611      	mov	r1, r2
 80032cc:	4618      	mov	r0, r3
 80032ce:	f7ff ff5d 	bl	800318c <__NVIC_SetPriority>
}
 80032d2:	bf00      	nop
 80032d4:	3718      	adds	r7, #24
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}

080032da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032da:	b580      	push	{r7, lr}
 80032dc:	b082      	sub	sp, #8
 80032de:	af00      	add	r7, sp, #0
 80032e0:	4603      	mov	r3, r0
 80032e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff ff31 	bl	8003150 <__NVIC_EnableIRQ>
}
 80032ee:	bf00      	nop
 80032f0:	3708      	adds	r7, #8
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}

080032f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032f6:	b580      	push	{r7, lr}
 80032f8:	b082      	sub	sp, #8
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032fe:	6878      	ldr	r0, [r7, #4]
 8003300:	f7ff ffa2 	bl	8003248 <SysTick_Config>
 8003304:	4603      	mov	r3, r0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3708      	adds	r7, #8
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
	...

08003310 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b086      	sub	sp, #24
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800331c:	f7ff f9aa 	bl	8002674 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d101      	bne.n	800332c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e099      	b.n	8003460 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	681a      	ldr	r2, [r3, #0]
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f022 0201 	bic.w	r2, r2, #1
 800334a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800334c:	e00f      	b.n	800336e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800334e:	f7ff f991 	bl	8002674 <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b05      	cmp	r3, #5
 800335a:	d908      	bls.n	800336e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2220      	movs	r2, #32
 8003360:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2203      	movs	r2, #3
 8003366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e078      	b.n	8003460 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0301 	and.w	r3, r3, #1
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1e8      	bne.n	800334e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	4b38      	ldr	r3, [pc, #224]	; (8003468 <HAL_DMA_Init+0x158>)
 8003388:	4013      	ands	r3, r2
 800338a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	685a      	ldr	r2, [r3, #4]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800339a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80033a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80033b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6a1b      	ldr	r3, [r3, #32]
 80033b8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	4313      	orrs	r3, r2
 80033be:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	2b04      	cmp	r3, #4
 80033c6:	d107      	bne.n	80033d8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d0:	4313      	orrs	r3, r2
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	695b      	ldr	r3, [r3, #20]
 80033e6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	f023 0307 	bic.w	r3, r3, #7
 80033ee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	4313      	orrs	r3, r2
 80033f8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033fe:	2b04      	cmp	r3, #4
 8003400:	d117      	bne.n	8003432 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003406:	697a      	ldr	r2, [r7, #20]
 8003408:	4313      	orrs	r3, r2
 800340a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00e      	beq.n	8003432 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003414:	6878      	ldr	r0, [r7, #4]
 8003416:	f000 fa6f 	bl	80038f8 <DMA_CheckFifoParam>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2240      	movs	r2, #64	; 0x40
 8003424:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800342e:	2301      	movs	r3, #1
 8003430:	e016      	b.n	8003460 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 fa26 	bl	800388c <DMA_CalcBaseAndBitshift>
 8003440:	4603      	mov	r3, r0
 8003442:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	223f      	movs	r2, #63	; 0x3f
 800344a:	409a      	lsls	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3718      	adds	r7, #24
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	f010803f 	.word	0xf010803f

0800346c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
 8003478:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003482:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800348a:	2b01      	cmp	r3, #1
 800348c:	d101      	bne.n	8003492 <HAL_DMA_Start_IT+0x26>
 800348e:	2302      	movs	r3, #2
 8003490:	e040      	b.n	8003514 <HAL_DMA_Start_IT+0xa8>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2201      	movs	r2, #1
 8003496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d12f      	bne.n	8003506 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2202      	movs	r2, #2
 80034aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	68b9      	ldr	r1, [r7, #8]
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 f9b8 	bl	8003830 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034c4:	223f      	movs	r2, #63	; 0x3f
 80034c6:	409a      	lsls	r2, r3
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0216 	orr.w	r2, r2, #22
 80034da:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d007      	beq.n	80034f4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0208 	orr.w	r2, r2, #8
 80034f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	e005      	b.n	8003512 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800350e:	2302      	movs	r3, #2
 8003510:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003512:	7dfb      	ldrb	r3, [r7, #23]
}
 8003514:	4618      	mov	r0, r3
 8003516:	3718      	adds	r7, #24
 8003518:	46bd      	mov	sp, r7
 800351a:	bd80      	pop	{r7, pc}

0800351c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003524:	2300      	movs	r3, #0
 8003526:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003528:	4b8e      	ldr	r3, [pc, #568]	; (8003764 <HAL_DMA_IRQHandler+0x248>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a8e      	ldr	r2, [pc, #568]	; (8003768 <HAL_DMA_IRQHandler+0x24c>)
 800352e:	fba2 2303 	umull	r2, r3, r2, r3
 8003532:	0a9b      	lsrs	r3, r3, #10
 8003534:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800353a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003546:	2208      	movs	r2, #8
 8003548:	409a      	lsls	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4013      	ands	r3, r2
 800354e:	2b00      	cmp	r3, #0
 8003550:	d01a      	beq.n	8003588 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d013      	beq.n	8003588 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f022 0204 	bic.w	r2, r2, #4
 800356e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003574:	2208      	movs	r2, #8
 8003576:	409a      	lsls	r2, r3
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003580:	f043 0201 	orr.w	r2, r3, #1
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800358c:	2201      	movs	r2, #1
 800358e:	409a      	lsls	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	4013      	ands	r3, r2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d012      	beq.n	80035be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d00b      	beq.n	80035be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035aa:	2201      	movs	r2, #1
 80035ac:	409a      	lsls	r2, r3
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b6:	f043 0202 	orr.w	r2, r3, #2
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c2:	2204      	movs	r2, #4
 80035c4:	409a      	lsls	r2, r3
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	4013      	ands	r3, r2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d012      	beq.n	80035f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00b      	beq.n	80035f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035e0:	2204      	movs	r2, #4
 80035e2:	409a      	lsls	r2, r3
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ec:	f043 0204 	orr.w	r2, r3, #4
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035f8:	2210      	movs	r2, #16
 80035fa:	409a      	lsls	r2, r3
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	4013      	ands	r3, r2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d043      	beq.n	800368c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0308 	and.w	r3, r3, #8
 800360e:	2b00      	cmp	r3, #0
 8003610:	d03c      	beq.n	800368c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003616:	2210      	movs	r2, #16
 8003618:	409a      	lsls	r2, r3
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d018      	beq.n	800365e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d108      	bne.n	800364c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	2b00      	cmp	r3, #0
 8003640:	d024      	beq.n	800368c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	4798      	blx	r3
 800364a:	e01f      	b.n	800368c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003650:	2b00      	cmp	r3, #0
 8003652:	d01b      	beq.n	800368c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	4798      	blx	r3
 800365c:	e016      	b.n	800368c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003668:	2b00      	cmp	r3, #0
 800366a:	d107      	bne.n	800367c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f022 0208 	bic.w	r2, r2, #8
 800367a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003690:	2220      	movs	r2, #32
 8003692:	409a      	lsls	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	f000 808f 	beq.w	80037bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0310 	and.w	r3, r3, #16
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	f000 8087 	beq.w	80037bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b2:	2220      	movs	r2, #32
 80036b4:	409a      	lsls	r2, r3
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b05      	cmp	r3, #5
 80036c4:	d136      	bne.n	8003734 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0216 	bic.w	r2, r2, #22
 80036d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	695a      	ldr	r2, [r3, #20]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d103      	bne.n	80036f6 <HAL_DMA_IRQHandler+0x1da>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d007      	beq.n	8003706 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0208 	bic.w	r2, r2, #8
 8003704:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370a:	223f      	movs	r2, #63	; 0x3f
 800370c:	409a      	lsls	r2, r3
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2201      	movs	r2, #1
 8003716:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003726:	2b00      	cmp	r3, #0
 8003728:	d07e      	beq.n	8003828 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	4798      	blx	r3
        }
        return;
 8003732:	e079      	b.n	8003828 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d01d      	beq.n	800377e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800374c:	2b00      	cmp	r3, #0
 800374e:	d10d      	bne.n	800376c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003754:	2b00      	cmp	r3, #0
 8003756:	d031      	beq.n	80037bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	4798      	blx	r3
 8003760:	e02c      	b.n	80037bc <HAL_DMA_IRQHandler+0x2a0>
 8003762:	bf00      	nop
 8003764:	20000028 	.word	0x20000028
 8003768:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003770:	2b00      	cmp	r3, #0
 8003772:	d023      	beq.n	80037bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	4798      	blx	r3
 800377c:	e01e      	b.n	80037bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003788:	2b00      	cmp	r3, #0
 800378a:	d10f      	bne.n	80037ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0210 	bic.w	r2, r2, #16
 800379a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d003      	beq.n	80037bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d032      	beq.n	800382a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037c8:	f003 0301 	and.w	r3, r3, #1
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d022      	beq.n	8003816 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2205      	movs	r2, #5
 80037d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f022 0201 	bic.w	r2, r2, #1
 80037e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	3301      	adds	r3, #1
 80037ec:	60bb      	str	r3, [r7, #8]
 80037ee:	697a      	ldr	r2, [r7, #20]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d307      	bcc.n	8003804 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1f2      	bne.n	80037e8 <HAL_DMA_IRQHandler+0x2cc>
 8003802:	e000      	b.n	8003806 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003804:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381a:	2b00      	cmp	r3, #0
 800381c:	d005      	beq.n	800382a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	4798      	blx	r3
 8003826:	e000      	b.n	800382a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003828:	bf00      	nop
    }
  }
}
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003830:	b480      	push	{r7}
 8003832:	b085      	sub	sp, #20
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	681a      	ldr	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800384c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	683a      	ldr	r2, [r7, #0]
 8003854:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b40      	cmp	r3, #64	; 0x40
 800385c:	d108      	bne.n	8003870 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800386e:	e007      	b.n	8003880 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68ba      	ldr	r2, [r7, #8]
 8003876:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	60da      	str	r2, [r3, #12]
}
 8003880:	bf00      	nop
 8003882:	3714      	adds	r7, #20
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800388c:	b480      	push	{r7}
 800388e:	b085      	sub	sp, #20
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	b2db      	uxtb	r3, r3
 800389a:	3b10      	subs	r3, #16
 800389c:	4a14      	ldr	r2, [pc, #80]	; (80038f0 <DMA_CalcBaseAndBitshift+0x64>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	091b      	lsrs	r3, r3, #4
 80038a4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80038a6:	4a13      	ldr	r2, [pc, #76]	; (80038f4 <DMA_CalcBaseAndBitshift+0x68>)
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4413      	add	r3, r2
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	461a      	mov	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	d909      	bls.n	80038ce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038c2:	f023 0303 	bic.w	r3, r3, #3
 80038c6:	1d1a      	adds	r2, r3, #4
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	659a      	str	r2, [r3, #88]	; 0x58
 80038cc:	e007      	b.n	80038de <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3714      	adds	r7, #20
 80038e6:	46bd      	mov	sp, r7
 80038e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ec:	4770      	bx	lr
 80038ee:	bf00      	nop
 80038f0:	aaaaaaab 	.word	0xaaaaaaab
 80038f4:	0800f598 	.word	0x0800f598

080038f8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003900:	2300      	movs	r3, #0
 8003902:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d11f      	bne.n	8003952 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	2b03      	cmp	r3, #3
 8003916:	d856      	bhi.n	80039c6 <DMA_CheckFifoParam+0xce>
 8003918:	a201      	add	r2, pc, #4	; (adr r2, 8003920 <DMA_CheckFifoParam+0x28>)
 800391a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800391e:	bf00      	nop
 8003920:	08003931 	.word	0x08003931
 8003924:	08003943 	.word	0x08003943
 8003928:	08003931 	.word	0x08003931
 800392c:	080039c7 	.word	0x080039c7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003934:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003938:	2b00      	cmp	r3, #0
 800393a:	d046      	beq.n	80039ca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003940:	e043      	b.n	80039ca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003946:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800394a:	d140      	bne.n	80039ce <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003950:	e03d      	b.n	80039ce <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800395a:	d121      	bne.n	80039a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d837      	bhi.n	80039d2 <DMA_CheckFifoParam+0xda>
 8003962:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <DMA_CheckFifoParam+0x70>)
 8003964:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003968:	08003979 	.word	0x08003979
 800396c:	0800397f 	.word	0x0800397f
 8003970:	08003979 	.word	0x08003979
 8003974:	08003991 	.word	0x08003991
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	73fb      	strb	r3, [r7, #15]
      break;
 800397c:	e030      	b.n	80039e0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003982:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d025      	beq.n	80039d6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800398e:	e022      	b.n	80039d6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003994:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003998:	d11f      	bne.n	80039da <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800399e:	e01c      	b.n	80039da <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d903      	bls.n	80039ae <DMA_CheckFifoParam+0xb6>
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d003      	beq.n	80039b4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80039ac:	e018      	b.n	80039e0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	73fb      	strb	r3, [r7, #15]
      break;
 80039b2:	e015      	b.n	80039e0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d00e      	beq.n	80039de <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	73fb      	strb	r3, [r7, #15]
      break;
 80039c4:	e00b      	b.n	80039de <DMA_CheckFifoParam+0xe6>
      break;
 80039c6:	bf00      	nop
 80039c8:	e00a      	b.n	80039e0 <DMA_CheckFifoParam+0xe8>
      break;
 80039ca:	bf00      	nop
 80039cc:	e008      	b.n	80039e0 <DMA_CheckFifoParam+0xe8>
      break;
 80039ce:	bf00      	nop
 80039d0:	e006      	b.n	80039e0 <DMA_CheckFifoParam+0xe8>
      break;
 80039d2:	bf00      	nop
 80039d4:	e004      	b.n	80039e0 <DMA_CheckFifoParam+0xe8>
      break;
 80039d6:	bf00      	nop
 80039d8:	e002      	b.n	80039e0 <DMA_CheckFifoParam+0xe8>
      break;   
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <DMA_CheckFifoParam+0xe8>
      break;
 80039de:	bf00      	nop
    }
  } 
  
  return status; 
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3714      	adds	r7, #20
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop

080039f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b089      	sub	sp, #36	; 0x24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
 80039f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039fa:	2300      	movs	r3, #0
 80039fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a06:	2300      	movs	r3, #0
 8003a08:	61fb      	str	r3, [r7, #28]
 8003a0a:	e159      	b.n	8003cc0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003a20:	693a      	ldr	r2, [r7, #16]
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	f040 8148 	bne.w	8003cba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f003 0303 	and.w	r3, r3, #3
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d005      	beq.n	8003a42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d130      	bne.n	8003aa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a48:	69fb      	ldr	r3, [r7, #28]
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	2203      	movs	r2, #3
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43db      	mvns	r3, r3
 8003a54:	69ba      	ldr	r2, [r7, #24]
 8003a56:	4013      	ands	r3, r2
 8003a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68da      	ldr	r2, [r3, #12]
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	005b      	lsls	r3, r3, #1
 8003a62:	fa02 f303 	lsl.w	r3, r2, r3
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	69ba      	ldr	r2, [r7, #24]
 8003a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a78:	2201      	movs	r2, #1
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	091b      	lsrs	r3, r3, #4
 8003a8e:	f003 0201 	and.w	r2, r3, #1
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	69ba      	ldr	r2, [r7, #24]
 8003aa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	2b03      	cmp	r3, #3
 8003aae:	d017      	beq.n	8003ae0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	68db      	ldr	r3, [r3, #12]
 8003ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	2203      	movs	r2, #3
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	69ba      	ldr	r2, [r7, #24]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	689a      	ldr	r2, [r3, #8]
 8003acc:	69fb      	ldr	r3, [r7, #28]
 8003ace:	005b      	lsls	r3, r3, #1
 8003ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0303 	and.w	r3, r3, #3
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d123      	bne.n	8003b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aec:	69fb      	ldr	r3, [r7, #28]
 8003aee:	08da      	lsrs	r2, r3, #3
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	3208      	adds	r2, #8
 8003af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f003 0307 	and.w	r3, r3, #7
 8003b00:	009b      	lsls	r3, r3, #2
 8003b02:	220f      	movs	r2, #15
 8003b04:	fa02 f303 	lsl.w	r3, r2, r3
 8003b08:	43db      	mvns	r3, r3
 8003b0a:	69ba      	ldr	r2, [r7, #24]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	4313      	orrs	r3, r2
 8003b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	08da      	lsrs	r2, r3, #3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	3208      	adds	r2, #8
 8003b2e:	69b9      	ldr	r1, [r7, #24]
 8003b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	005b      	lsls	r3, r3, #1
 8003b3e:	2203      	movs	r2, #3
 8003b40:	fa02 f303 	lsl.w	r3, r2, r3
 8003b44:	43db      	mvns	r3, r3
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	4013      	ands	r3, r2
 8003b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f003 0203 	and.w	r2, r3, #3
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	005b      	lsls	r3, r3, #1
 8003b58:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5c:	69ba      	ldr	r2, [r7, #24]
 8003b5e:	4313      	orrs	r3, r2
 8003b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	69ba      	ldr	r2, [r7, #24]
 8003b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	f000 80a2 	beq.w	8003cba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b76:	2300      	movs	r3, #0
 8003b78:	60fb      	str	r3, [r7, #12]
 8003b7a:	4b57      	ldr	r3, [pc, #348]	; (8003cd8 <HAL_GPIO_Init+0x2e8>)
 8003b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b7e:	4a56      	ldr	r2, [pc, #344]	; (8003cd8 <HAL_GPIO_Init+0x2e8>)
 8003b80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b84:	6453      	str	r3, [r2, #68]	; 0x44
 8003b86:	4b54      	ldr	r3, [pc, #336]	; (8003cd8 <HAL_GPIO_Init+0x2e8>)
 8003b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b8e:	60fb      	str	r3, [r7, #12]
 8003b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b92:	4a52      	ldr	r2, [pc, #328]	; (8003cdc <HAL_GPIO_Init+0x2ec>)
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	089b      	lsrs	r3, r3, #2
 8003b98:	3302      	adds	r3, #2
 8003b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	f003 0303 	and.w	r3, r3, #3
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	220f      	movs	r2, #15
 8003baa:	fa02 f303 	lsl.w	r3, r2, r3
 8003bae:	43db      	mvns	r3, r3
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a49      	ldr	r2, [pc, #292]	; (8003ce0 <HAL_GPIO_Init+0x2f0>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d019      	beq.n	8003bf2 <HAL_GPIO_Init+0x202>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a48      	ldr	r2, [pc, #288]	; (8003ce4 <HAL_GPIO_Init+0x2f4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d013      	beq.n	8003bee <HAL_GPIO_Init+0x1fe>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a47      	ldr	r2, [pc, #284]	; (8003ce8 <HAL_GPIO_Init+0x2f8>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d00d      	beq.n	8003bea <HAL_GPIO_Init+0x1fa>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	4a46      	ldr	r2, [pc, #280]	; (8003cec <HAL_GPIO_Init+0x2fc>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d007      	beq.n	8003be6 <HAL_GPIO_Init+0x1f6>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a45      	ldr	r2, [pc, #276]	; (8003cf0 <HAL_GPIO_Init+0x300>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d101      	bne.n	8003be2 <HAL_GPIO_Init+0x1f2>
 8003bde:	2304      	movs	r3, #4
 8003be0:	e008      	b.n	8003bf4 <HAL_GPIO_Init+0x204>
 8003be2:	2307      	movs	r3, #7
 8003be4:	e006      	b.n	8003bf4 <HAL_GPIO_Init+0x204>
 8003be6:	2303      	movs	r3, #3
 8003be8:	e004      	b.n	8003bf4 <HAL_GPIO_Init+0x204>
 8003bea:	2302      	movs	r3, #2
 8003bec:	e002      	b.n	8003bf4 <HAL_GPIO_Init+0x204>
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e000      	b.n	8003bf4 <HAL_GPIO_Init+0x204>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	69fa      	ldr	r2, [r7, #28]
 8003bf6:	f002 0203 	and.w	r2, r2, #3
 8003bfa:	0092      	lsls	r2, r2, #2
 8003bfc:	4093      	lsls	r3, r2
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c04:	4935      	ldr	r1, [pc, #212]	; (8003cdc <HAL_GPIO_Init+0x2ec>)
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	089b      	lsrs	r3, r3, #2
 8003c0a:	3302      	adds	r3, #2
 8003c0c:	69ba      	ldr	r2, [r7, #24]
 8003c0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c12:	4b38      	ldr	r3, [pc, #224]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	43db      	mvns	r3, r3
 8003c1c:	69ba      	ldr	r2, [r7, #24]
 8003c1e:	4013      	ands	r3, r2
 8003c20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	685b      	ldr	r3, [r3, #4]
 8003c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d003      	beq.n	8003c36 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003c2e:	69ba      	ldr	r2, [r7, #24]
 8003c30:	693b      	ldr	r3, [r7, #16]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c36:	4a2f      	ldr	r2, [pc, #188]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c3c:	4b2d      	ldr	r3, [pc, #180]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003c58:	69ba      	ldr	r2, [r7, #24]
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c60:	4a24      	ldr	r2, [pc, #144]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c66:	4b23      	ldr	r3, [pc, #140]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	43db      	mvns	r3, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	4013      	ands	r3, r2
 8003c74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d003      	beq.n	8003c8a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	4313      	orrs	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c8a:	4a1a      	ldr	r2, [pc, #104]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c90:	4b18      	ldr	r3, [pc, #96]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	43db      	mvns	r3, r3
 8003c9a:	69ba      	ldr	r2, [r7, #24]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d003      	beq.n	8003cb4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cb4:	4a0f      	ldr	r2, [pc, #60]	; (8003cf4 <HAL_GPIO_Init+0x304>)
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	61fb      	str	r3, [r7, #28]
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	2b0f      	cmp	r3, #15
 8003cc4:	f67f aea2 	bls.w	8003a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cc8:	bf00      	nop
 8003cca:	bf00      	nop
 8003ccc:	3724      	adds	r7, #36	; 0x24
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	40013800 	.word	0x40013800
 8003ce0:	40020000 	.word	0x40020000
 8003ce4:	40020400 	.word	0x40020400
 8003ce8:	40020800 	.word	0x40020800
 8003cec:	40020c00 	.word	0x40020c00
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40013c00 	.word	0x40013c00

08003cf8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	4603      	mov	r3, r0
 8003d00:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003d02:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d04:	695a      	ldr	r2, [r3, #20]
 8003d06:	88fb      	ldrh	r3, [r7, #6]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d006      	beq.n	8003d1c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003d0e:	4a05      	ldr	r2, [pc, #20]	; (8003d24 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003d10:	88fb      	ldrh	r3, [r7, #6]
 8003d12:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f7fe f8c6 	bl	8001ea8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	3708      	adds	r7, #8
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40013c00 	.word	0x40013c00

08003d28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e12b      	b.n	8003f92 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d106      	bne.n	8003d54 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7fd fb08 	bl	8001364 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2224      	movs	r2, #36	; 0x24
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0201 	bic.w	r2, r2, #1
 8003d6a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003d7a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d8a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003d8c:	f001 ffbe 	bl	8005d0c <HAL_RCC_GetPCLK1Freq>
 8003d90:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	4a81      	ldr	r2, [pc, #516]	; (8003f9c <HAL_I2C_Init+0x274>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d807      	bhi.n	8003dac <HAL_I2C_Init+0x84>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4a80      	ldr	r2, [pc, #512]	; (8003fa0 <HAL_I2C_Init+0x278>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	bf94      	ite	ls
 8003da4:	2301      	movls	r3, #1
 8003da6:	2300      	movhi	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	e006      	b.n	8003dba <HAL_I2C_Init+0x92>
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4a7d      	ldr	r2, [pc, #500]	; (8003fa4 <HAL_I2C_Init+0x27c>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	bf94      	ite	ls
 8003db4:	2301      	movls	r3, #1
 8003db6:	2300      	movhi	r3, #0
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e0e7      	b.n	8003f92 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	4a78      	ldr	r2, [pc, #480]	; (8003fa8 <HAL_I2C_Init+0x280>)
 8003dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8003dca:	0c9b      	lsrs	r3, r3, #18
 8003dcc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	6a1b      	ldr	r3, [r3, #32]
 8003de8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	4a6a      	ldr	r2, [pc, #424]	; (8003f9c <HAL_I2C_Init+0x274>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d802      	bhi.n	8003dfc <HAL_I2C_Init+0xd4>
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	3301      	adds	r3, #1
 8003dfa:	e009      	b.n	8003e10 <HAL_I2C_Init+0xe8>
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003e02:	fb02 f303 	mul.w	r3, r2, r3
 8003e06:	4a69      	ldr	r2, [pc, #420]	; (8003fac <HAL_I2C_Init+0x284>)
 8003e08:	fba2 2303 	umull	r2, r3, r2, r3
 8003e0c:	099b      	lsrs	r3, r3, #6
 8003e0e:	3301      	adds	r3, #1
 8003e10:	687a      	ldr	r2, [r7, #4]
 8003e12:	6812      	ldr	r2, [r2, #0]
 8003e14:	430b      	orrs	r3, r1
 8003e16:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003e22:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	495c      	ldr	r1, [pc, #368]	; (8003f9c <HAL_I2C_Init+0x274>)
 8003e2c:	428b      	cmp	r3, r1
 8003e2e:	d819      	bhi.n	8003e64 <HAL_I2C_Init+0x13c>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1e59      	subs	r1, r3, #1
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e3e:	1c59      	adds	r1, r3, #1
 8003e40:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003e44:	400b      	ands	r3, r1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_I2C_Init+0x138>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1e59      	subs	r1, r3, #1
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	685b      	ldr	r3, [r3, #4]
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	fbb1 f3f3 	udiv	r3, r1, r3
 8003e58:	3301      	adds	r3, #1
 8003e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e5e:	e051      	b.n	8003f04 <HAL_I2C_Init+0x1dc>
 8003e60:	2304      	movs	r3, #4
 8003e62:	e04f      	b.n	8003f04 <HAL_I2C_Init+0x1dc>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d111      	bne.n	8003e90 <HAL_I2C_Init+0x168>
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1e58      	subs	r0, r3, #1
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6859      	ldr	r1, [r3, #4]
 8003e74:	460b      	mov	r3, r1
 8003e76:	005b      	lsls	r3, r3, #1
 8003e78:	440b      	add	r3, r1
 8003e7a:	fbb0 f3f3 	udiv	r3, r0, r3
 8003e7e:	3301      	adds	r3, #1
 8003e80:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	bf0c      	ite	eq
 8003e88:	2301      	moveq	r3, #1
 8003e8a:	2300      	movne	r3, #0
 8003e8c:	b2db      	uxtb	r3, r3
 8003e8e:	e012      	b.n	8003eb6 <HAL_I2C_Init+0x18e>
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	1e58      	subs	r0, r3, #1
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6859      	ldr	r1, [r3, #4]
 8003e98:	460b      	mov	r3, r1
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	440b      	add	r3, r1
 8003e9e:	0099      	lsls	r1, r3, #2
 8003ea0:	440b      	add	r3, r1
 8003ea2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ea6:	3301      	adds	r3, #1
 8003ea8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d001      	beq.n	8003ebe <HAL_I2C_Init+0x196>
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e022      	b.n	8003f04 <HAL_I2C_Init+0x1dc>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10e      	bne.n	8003ee4 <HAL_I2C_Init+0x1bc>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1e58      	subs	r0, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6859      	ldr	r1, [r3, #4]
 8003ece:	460b      	mov	r3, r1
 8003ed0:	005b      	lsls	r3, r3, #1
 8003ed2:	440b      	add	r3, r1
 8003ed4:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ed8:	3301      	adds	r3, #1
 8003eda:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ede:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ee2:	e00f      	b.n	8003f04 <HAL_I2C_Init+0x1dc>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	1e58      	subs	r0, r3, #1
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6859      	ldr	r1, [r3, #4]
 8003eec:	460b      	mov	r3, r1
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	440b      	add	r3, r1
 8003ef2:	0099      	lsls	r1, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	fbb0 f3f3 	udiv	r3, r0, r3
 8003efa:	3301      	adds	r3, #1
 8003efc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f00:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	6809      	ldr	r1, [r1, #0]
 8003f08:	4313      	orrs	r3, r2
 8003f0a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69da      	ldr	r2, [r3, #28]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	430a      	orrs	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003f32:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	6911      	ldr	r1, [r2, #16]
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68d2      	ldr	r2, [r2, #12]
 8003f3e:	4311      	orrs	r1, r2
 8003f40:	687a      	ldr	r2, [r7, #4]
 8003f42:	6812      	ldr	r2, [r2, #0]
 8003f44:	430b      	orrs	r3, r1
 8003f46:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	695a      	ldr	r2, [r3, #20]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	431a      	orrs	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	430a      	orrs	r2, r1
 8003f62:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	000186a0 	.word	0x000186a0
 8003fa0:	001e847f 	.word	0x001e847f
 8003fa4:	003d08ff 	.word	0x003d08ff
 8003fa8:	431bde83 	.word	0x431bde83
 8003fac:	10624dd3 	.word	0x10624dd3

08003fb0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fb2:	b08f      	sub	sp, #60	; 0x3c
 8003fb4:	af0a      	add	r7, sp, #40	; 0x28
 8003fb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d101      	bne.n	8003fc2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e10f      	b.n	80041e2 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d106      	bne.n	8003fe2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f006 fc23 	bl	800a828 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2203      	movs	r2, #3
 8003fe6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d102      	bne.n	8003ffc <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	f002 ff00 	bl	8006e06 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	603b      	str	r3, [r7, #0]
 800400c:	687e      	ldr	r6, [r7, #4]
 800400e:	466d      	mov	r5, sp
 8004010:	f106 0410 	add.w	r4, r6, #16
 8004014:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004016:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004018:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800401a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800401c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004020:	e885 0003 	stmia.w	r5, {r0, r1}
 8004024:	1d33      	adds	r3, r6, #4
 8004026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004028:	6838      	ldr	r0, [r7, #0]
 800402a:	f002 fdd8 	bl	8006bde <USB_CoreInit>
 800402e:	4603      	mov	r3, r0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d005      	beq.n	8004040 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0d0      	b.n	80041e2 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2100      	movs	r1, #0
 8004046:	4618      	mov	r0, r3
 8004048:	f002 feee 	bl	8006e28 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800404c:	2300      	movs	r3, #0
 800404e:	73fb      	strb	r3, [r7, #15]
 8004050:	e04a      	b.n	80040e8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004052:	7bfa      	ldrb	r2, [r7, #15]
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	4613      	mov	r3, r2
 8004058:	00db      	lsls	r3, r3, #3
 800405a:	4413      	add	r3, r2
 800405c:	009b      	lsls	r3, r3, #2
 800405e:	440b      	add	r3, r1
 8004060:	333d      	adds	r3, #61	; 0x3d
 8004062:	2201      	movs	r2, #1
 8004064:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004066:	7bfa      	ldrb	r2, [r7, #15]
 8004068:	6879      	ldr	r1, [r7, #4]
 800406a:	4613      	mov	r3, r2
 800406c:	00db      	lsls	r3, r3, #3
 800406e:	4413      	add	r3, r2
 8004070:	009b      	lsls	r3, r3, #2
 8004072:	440b      	add	r3, r1
 8004074:	333c      	adds	r3, #60	; 0x3c
 8004076:	7bfa      	ldrb	r2, [r7, #15]
 8004078:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800407a:	7bfa      	ldrb	r2, [r7, #15]
 800407c:	7bfb      	ldrb	r3, [r7, #15]
 800407e:	b298      	uxth	r0, r3
 8004080:	6879      	ldr	r1, [r7, #4]
 8004082:	4613      	mov	r3, r2
 8004084:	00db      	lsls	r3, r3, #3
 8004086:	4413      	add	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	440b      	add	r3, r1
 800408c:	3344      	adds	r3, #68	; 0x44
 800408e:	4602      	mov	r2, r0
 8004090:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004092:	7bfa      	ldrb	r2, [r7, #15]
 8004094:	6879      	ldr	r1, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	00db      	lsls	r3, r3, #3
 800409a:	4413      	add	r3, r2
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	440b      	add	r3, r1
 80040a0:	3340      	adds	r3, #64	; 0x40
 80040a2:	2200      	movs	r2, #0
 80040a4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040a6:	7bfa      	ldrb	r2, [r7, #15]
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	4613      	mov	r3, r2
 80040ac:	00db      	lsls	r3, r3, #3
 80040ae:	4413      	add	r3, r2
 80040b0:	009b      	lsls	r3, r3, #2
 80040b2:	440b      	add	r3, r1
 80040b4:	3348      	adds	r3, #72	; 0x48
 80040b6:	2200      	movs	r2, #0
 80040b8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040ba:	7bfa      	ldrb	r2, [r7, #15]
 80040bc:	6879      	ldr	r1, [r7, #4]
 80040be:	4613      	mov	r3, r2
 80040c0:	00db      	lsls	r3, r3, #3
 80040c2:	4413      	add	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	334c      	adds	r3, #76	; 0x4c
 80040ca:	2200      	movs	r2, #0
 80040cc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040ce:	7bfa      	ldrb	r2, [r7, #15]
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	4613      	mov	r3, r2
 80040d4:	00db      	lsls	r3, r3, #3
 80040d6:	4413      	add	r3, r2
 80040d8:	009b      	lsls	r3, r3, #2
 80040da:	440b      	add	r3, r1
 80040dc:	3354      	adds	r3, #84	; 0x54
 80040de:	2200      	movs	r2, #0
 80040e0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040e2:	7bfb      	ldrb	r3, [r7, #15]
 80040e4:	3301      	adds	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
 80040e8:	7bfa      	ldrb	r2, [r7, #15]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d3af      	bcc.n	8004052 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040f2:	2300      	movs	r3, #0
 80040f4:	73fb      	strb	r3, [r7, #15]
 80040f6:	e044      	b.n	8004182 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040f8:	7bfa      	ldrb	r2, [r7, #15]
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	4613      	mov	r3, r2
 80040fe:	00db      	lsls	r3, r3, #3
 8004100:	4413      	add	r3, r2
 8004102:	009b      	lsls	r3, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800410a:	2200      	movs	r2, #0
 800410c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800410e:	7bfa      	ldrb	r2, [r7, #15]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004120:	7bfa      	ldrb	r2, [r7, #15]
 8004122:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004124:	7bfa      	ldrb	r2, [r7, #15]
 8004126:	6879      	ldr	r1, [r7, #4]
 8004128:	4613      	mov	r3, r2
 800412a:	00db      	lsls	r3, r3, #3
 800412c:	4413      	add	r3, r2
 800412e:	009b      	lsls	r3, r3, #2
 8004130:	440b      	add	r3, r1
 8004132:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004136:	2200      	movs	r2, #0
 8004138:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800413a:	7bfa      	ldrb	r2, [r7, #15]
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800414c:	2200      	movs	r2, #0
 800414e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004150:	7bfa      	ldrb	r2, [r7, #15]
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	4613      	mov	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004162:	2200      	movs	r2, #0
 8004164:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004166:	7bfa      	ldrb	r2, [r7, #15]
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	4613      	mov	r3, r2
 800416c:	00db      	lsls	r3, r3, #3
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	440b      	add	r3, r1
 8004174:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800417c:	7bfb      	ldrb	r3, [r7, #15]
 800417e:	3301      	adds	r3, #1
 8004180:	73fb      	strb	r3, [r7, #15]
 8004182:	7bfa      	ldrb	r2, [r7, #15]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	429a      	cmp	r2, r3
 800418a:	d3b5      	bcc.n	80040f8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	603b      	str	r3, [r7, #0]
 8004192:	687e      	ldr	r6, [r7, #4]
 8004194:	466d      	mov	r5, sp
 8004196:	f106 0410 	add.w	r4, r6, #16
 800419a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800419c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800419e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80041a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80041a2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80041a6:	e885 0003 	stmia.w	r5, {r0, r1}
 80041aa:	1d33      	adds	r3, r6, #4
 80041ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80041ae:	6838      	ldr	r0, [r7, #0]
 80041b0:	f002 fe86 	bl	8006ec0 <USB_DevInit>
 80041b4:	4603      	mov	r3, r0
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d005      	beq.n	80041c6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2202      	movs	r2, #2
 80041be:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e00d      	b.n	80041e2 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f003 ffd5 	bl	800818a <USB_DevDisconnect>

  return HAL_OK;
 80041e0:	2300      	movs	r3, #0
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080041ea <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80041ea:	b580      	push	{r7, lr}
 80041ec:	b084      	sub	sp, #16
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041fe:	2b01      	cmp	r3, #1
 8004200:	d101      	bne.n	8004206 <HAL_PCD_Start+0x1c>
 8004202:	2302      	movs	r3, #2
 8004204:	e020      	b.n	8004248 <HAL_PCD_Start+0x5e>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2201      	movs	r2, #1
 800420a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004212:	2b01      	cmp	r3, #1
 8004214:	d109      	bne.n	800422a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800421a:	2b01      	cmp	r3, #1
 800421c:	d005      	beq.n	800422a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004222:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4618      	mov	r0, r3
 8004230:	f002 fdd8 	bl	8006de4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4618      	mov	r0, r3
 800423a:	f003 ff85 	bl	8008148 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004250:	b590      	push	{r4, r7, lr}
 8004252:	b08d      	sub	sp, #52	; 0x34
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4618      	mov	r0, r3
 8004268:	f004 f843 	bl	80082f2 <USB_GetMode>
 800426c:	4603      	mov	r3, r0
 800426e:	2b00      	cmp	r3, #0
 8004270:	f040 848a 	bne.w	8004b88 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4618      	mov	r0, r3
 800427a:	f003 ffa7 	bl	80081cc <USB_ReadInterrupts>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	f000 8480 	beq.w	8004b86 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	0a1b      	lsrs	r3, r3, #8
 8004290:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4618      	mov	r0, r3
 80042a0:	f003 ff94 	bl	80081cc <USB_ReadInterrupts>
 80042a4:	4603      	mov	r3, r0
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d107      	bne.n	80042be <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	695a      	ldr	r2, [r3, #20]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f002 0202 	and.w	r2, r2, #2
 80042bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4618      	mov	r0, r3
 80042c4:	f003 ff82 	bl	80081cc <USB_ReadInterrupts>
 80042c8:	4603      	mov	r3, r0
 80042ca:	f003 0310 	and.w	r3, r3, #16
 80042ce:	2b10      	cmp	r3, #16
 80042d0:	d161      	bne.n	8004396 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	699a      	ldr	r2, [r3, #24]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f022 0210 	bic.w	r2, r2, #16
 80042e0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	f003 020f 	and.w	r2, r3, #15
 80042ee:	4613      	mov	r3, r2
 80042f0:	00db      	lsls	r3, r3, #3
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	4413      	add	r3, r2
 80042fe:	3304      	adds	r3, #4
 8004300:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004302:	69bb      	ldr	r3, [r7, #24]
 8004304:	0c5b      	lsrs	r3, r3, #17
 8004306:	f003 030f 	and.w	r3, r3, #15
 800430a:	2b02      	cmp	r3, #2
 800430c:	d124      	bne.n	8004358 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004314:	4013      	ands	r3, r2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d035      	beq.n	8004386 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	091b      	lsrs	r3, r3, #4
 8004322:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004324:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004328:	b29b      	uxth	r3, r3
 800432a:	461a      	mov	r2, r3
 800432c:	6a38      	ldr	r0, [r7, #32]
 800432e:	f003 fdb9 	bl	8007ea4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	691a      	ldr	r2, [r3, #16]
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	091b      	lsrs	r3, r3, #4
 800433a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800433e:	441a      	add	r2, r3
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	6a1a      	ldr	r2, [r3, #32]
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	091b      	lsrs	r3, r3, #4
 800434c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004350:	441a      	add	r2, r3
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	621a      	str	r2, [r3, #32]
 8004356:	e016      	b.n	8004386 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	0c5b      	lsrs	r3, r3, #17
 800435c:	f003 030f 	and.w	r3, r3, #15
 8004360:	2b06      	cmp	r3, #6
 8004362:	d110      	bne.n	8004386 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800436a:	2208      	movs	r2, #8
 800436c:	4619      	mov	r1, r3
 800436e:	6a38      	ldr	r0, [r7, #32]
 8004370:	f003 fd98 	bl	8007ea4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	6a1a      	ldr	r2, [r3, #32]
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	091b      	lsrs	r3, r3, #4
 800437c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004380:	441a      	add	r2, r3
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699a      	ldr	r2, [r3, #24]
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f042 0210 	orr.w	r2, r2, #16
 8004394:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4618      	mov	r0, r3
 800439c:	f003 ff16 	bl	80081cc <USB_ReadInterrupts>
 80043a0:	4603      	mov	r3, r0
 80043a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80043aa:	f040 80a7 	bne.w	80044fc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80043ae:	2300      	movs	r3, #0
 80043b0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	4618      	mov	r0, r3
 80043b8:	f003 ff1b 	bl	80081f2 <USB_ReadDevAllOutEpInterrupt>
 80043bc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80043be:	e099      	b.n	80044f4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80043c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	f000 808e 	beq.w	80044e8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d2:	b2d2      	uxtb	r2, r2
 80043d4:	4611      	mov	r1, r2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f003 ff3f 	bl	800825a <USB_ReadDevOutEPInterrupt>
 80043dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80043de:	693b      	ldr	r3, [r7, #16]
 80043e0:	f003 0301 	and.w	r3, r3, #1
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d00c      	beq.n	8004402 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f4:	461a      	mov	r2, r3
 80043f6:	2301      	movs	r3, #1
 80043f8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80043fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f000 fec3 	bl	8005188 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f003 0308 	and.w	r3, r3, #8
 8004408:	2b00      	cmp	r3, #0
 800440a:	d00c      	beq.n	8004426 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	4413      	add	r3, r2
 8004414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004418:	461a      	mov	r2, r3
 800441a:	2308      	movs	r3, #8
 800441c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800441e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 ff99 	bl	8005358 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004426:	693b      	ldr	r3, [r7, #16]
 8004428:	f003 0310 	and.w	r3, r3, #16
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	015a      	lsls	r2, r3, #5
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	4413      	add	r3, r2
 8004438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443c:	461a      	mov	r2, r3
 800443e:	2310      	movs	r3, #16
 8004440:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f003 0302 	and.w	r3, r3, #2
 8004448:	2b00      	cmp	r3, #0
 800444a:	d030      	beq.n	80044ae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004454:	2b80      	cmp	r3, #128	; 0x80
 8004456:	d109      	bne.n	800446c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004466:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800446a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800446c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446e:	4613      	mov	r3, r2
 8004470:	00db      	lsls	r3, r3, #3
 8004472:	4413      	add	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	4413      	add	r3, r2
 800447e:	3304      	adds	r3, #4
 8004480:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	78db      	ldrb	r3, [r3, #3]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d108      	bne.n	800449c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2200      	movs	r2, #0
 800448e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004492:	b2db      	uxtb	r3, r3
 8004494:	4619      	mov	r1, r3
 8004496:	6878      	ldr	r0, [r7, #4]
 8004498:	f006 facc 	bl	800aa34 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800449c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	69fb      	ldr	r3, [r7, #28]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044a8:	461a      	mov	r2, r3
 80044aa:	2302      	movs	r3, #2
 80044ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f003 0320 	and.w	r3, r3, #32
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d008      	beq.n	80044ca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	015a      	lsls	r2, r3, #5
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	4413      	add	r3, r2
 80044c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044c4:	461a      	mov	r2, r3
 80044c6:	2320      	movs	r3, #32
 80044c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d009      	beq.n	80044e8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80044d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044d6:	015a      	lsls	r2, r3, #5
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	4413      	add	r3, r2
 80044dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e0:	461a      	mov	r2, r3
 80044e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80044e6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80044e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ea:	3301      	adds	r3, #1
 80044ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80044ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f0:	085b      	lsrs	r3, r3, #1
 80044f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80044f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f47f af62 	bne.w	80043c0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f003 fe63 	bl	80081cc <USB_ReadInterrupts>
 8004506:	4603      	mov	r3, r0
 8004508:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800450c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004510:	f040 80db 	bne.w	80046ca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f003 fe84 	bl	8008226 <USB_ReadDevAllInEpInterrupt>
 800451e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004520:	2300      	movs	r3, #0
 8004522:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004524:	e0cd      	b.n	80046c2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	f000 80c2 	beq.w	80046b6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	4611      	mov	r1, r2
 800453c:	4618      	mov	r0, r3
 800453e:	f003 feaa 	bl	8008296 <USB_ReadDevInEPInterrupt>
 8004542:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d057      	beq.n	80045fe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	2201      	movs	r2, #1
 8004556:	fa02 f303 	lsl.w	r3, r2, r3
 800455a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	43db      	mvns	r3, r3
 8004568:	69f9      	ldr	r1, [r7, #28]
 800456a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800456e:	4013      	ands	r3, r2
 8004570:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800457e:	461a      	mov	r2, r3
 8004580:	2301      	movs	r3, #1
 8004582:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	691b      	ldr	r3, [r3, #16]
 8004588:	2b01      	cmp	r3, #1
 800458a:	d132      	bne.n	80045f2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800458c:	6879      	ldr	r1, [r7, #4]
 800458e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004590:	4613      	mov	r3, r2
 8004592:	00db      	lsls	r3, r3, #3
 8004594:	4413      	add	r3, r2
 8004596:	009b      	lsls	r3, r3, #2
 8004598:	440b      	add	r3, r1
 800459a:	334c      	adds	r3, #76	; 0x4c
 800459c:	6819      	ldr	r1, [r3, #0]
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045a2:	4613      	mov	r3, r2
 80045a4:	00db      	lsls	r3, r3, #3
 80045a6:	4413      	add	r3, r2
 80045a8:	009b      	lsls	r3, r3, #2
 80045aa:	4403      	add	r3, r0
 80045ac:	3348      	adds	r3, #72	; 0x48
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4419      	add	r1, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b6:	4613      	mov	r3, r2
 80045b8:	00db      	lsls	r3, r3, #3
 80045ba:	4413      	add	r3, r2
 80045bc:	009b      	lsls	r3, r3, #2
 80045be:	4403      	add	r3, r0
 80045c0:	334c      	adds	r3, #76	; 0x4c
 80045c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80045c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d113      	bne.n	80045f2 <HAL_PCD_IRQHandler+0x3a2>
 80045ca:	6879      	ldr	r1, [r7, #4]
 80045cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045ce:	4613      	mov	r3, r2
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	3354      	adds	r3, #84	; 0x54
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d108      	bne.n	80045f2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6818      	ldr	r0, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045ea:	461a      	mov	r2, r3
 80045ec:	2101      	movs	r1, #1
 80045ee:	f003 feb1 	bl	8008354 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	4619      	mov	r1, r3
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f006 f996 	bl	800a92a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b00      	cmp	r3, #0
 8004606:	d008      	beq.n	800461a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004614:	461a      	mov	r2, r3
 8004616:	2308      	movs	r3, #8
 8004618:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f003 0310 	and.w	r3, r3, #16
 8004620:	2b00      	cmp	r3, #0
 8004622:	d008      	beq.n	8004636 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	015a      	lsls	r2, r3, #5
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	4413      	add	r3, r2
 800462c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004630:	461a      	mov	r2, r3
 8004632:	2310      	movs	r3, #16
 8004634:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800463c:	2b00      	cmp	r3, #0
 800463e:	d008      	beq.n	8004652 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464c:	461a      	mov	r2, r3
 800464e:	2340      	movs	r3, #64	; 0x40
 8004650:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	f003 0302 	and.w	r3, r3, #2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d023      	beq.n	80046a4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800465c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800465e:	6a38      	ldr	r0, [r7, #32]
 8004660:	f002 fd92 	bl	8007188 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004666:	4613      	mov	r3, r2
 8004668:	00db      	lsls	r3, r3, #3
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	3338      	adds	r3, #56	; 0x38
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4413      	add	r3, r2
 8004674:	3304      	adds	r3, #4
 8004676:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	78db      	ldrb	r3, [r3, #3]
 800467c:	2b01      	cmp	r3, #1
 800467e:	d108      	bne.n	8004692 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	2200      	movs	r2, #0
 8004684:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	b2db      	uxtb	r3, r3
 800468a:	4619      	mov	r1, r3
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f006 f9e3 	bl	800aa58 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004694:	015a      	lsls	r2, r3, #5
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	4413      	add	r3, r2
 800469a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469e:	461a      	mov	r2, r3
 80046a0:	2302      	movs	r3, #2
 80046a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d003      	beq.n	80046b6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80046ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f000 fcdb 	bl	800506c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	3301      	adds	r3, #1
 80046ba:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80046bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046be:	085b      	lsrs	r3, r3, #1
 80046c0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80046c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	f47f af2e 	bne.w	8004526 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f003 fd7c 	bl	80081cc <USB_ReadInterrupts>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046de:	d122      	bne.n	8004726 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	69fa      	ldr	r2, [r7, #28]
 80046ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046ee:	f023 0301 	bic.w	r3, r3, #1
 80046f2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d108      	bne.n	8004710 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004706:	2100      	movs	r1, #0
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f000 fec3 	bl	8005494 <HAL_PCDEx_LPM_Callback>
 800470e:	e002      	b.n	8004716 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f006 f981 	bl	800aa18 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004724:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4618      	mov	r0, r3
 800472c:	f003 fd4e 	bl	80081cc <USB_ReadInterrupts>
 8004730:	4603      	mov	r3, r0
 8004732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800473a:	d112      	bne.n	8004762 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f003 0301 	and.w	r3, r3, #1
 8004748:	2b01      	cmp	r3, #1
 800474a:	d102      	bne.n	8004752 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f006 f93d 	bl	800a9cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	695a      	ldr	r2, [r3, #20]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004760:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f003 fd30 	bl	80081cc <USB_ReadInterrupts>
 800476c:	4603      	mov	r3, r0
 800476e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004772:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004776:	f040 80b7 	bne.w	80048e8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	69fa      	ldr	r2, [r7, #28]
 8004784:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004788:	f023 0301 	bic.w	r3, r3, #1
 800478c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2110      	movs	r1, #16
 8004794:	4618      	mov	r0, r3
 8004796:	f002 fcf7 	bl	8007188 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800479a:	2300      	movs	r3, #0
 800479c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800479e:	e046      	b.n	800482e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80047a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ac:	461a      	mov	r2, r3
 80047ae:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047b2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80047b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	69fb      	ldr	r3, [r7, #28]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047c4:	0151      	lsls	r1, r2, #5
 80047c6:	69fa      	ldr	r2, [r7, #28]
 80047c8:	440a      	add	r2, r1
 80047ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047ce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80047d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e0:	461a      	mov	r2, r3
 80047e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80047e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	69fb      	ldr	r3, [r7, #28]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047f8:	0151      	lsls	r1, r2, #5
 80047fa:	69fa      	ldr	r2, [r7, #28]
 80047fc:	440a      	add	r2, r1
 80047fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004802:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004806:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800480a:	015a      	lsls	r2, r3, #5
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	4413      	add	r3, r2
 8004810:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004818:	0151      	lsls	r1, r2, #5
 800481a:	69fa      	ldr	r2, [r7, #28]
 800481c:	440a      	add	r2, r1
 800481e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004822:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004826:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	3301      	adds	r3, #1
 800482c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685b      	ldr	r3, [r3, #4]
 8004832:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004834:	429a      	cmp	r2, r3
 8004836:	d3b3      	bcc.n	80047a0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	69fa      	ldr	r2, [r7, #28]
 8004842:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004846:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800484a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004850:	2b00      	cmp	r3, #0
 8004852:	d016      	beq.n	8004882 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800485a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800485e:	69fa      	ldr	r2, [r7, #28]
 8004860:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004864:	f043 030b 	orr.w	r3, r3, #11
 8004868:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800487a:	f043 030b 	orr.w	r3, r3, #11
 800487e:	6453      	str	r3, [r2, #68]	; 0x44
 8004880:	e015      	b.n	80048ae <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	69fa      	ldr	r2, [r7, #28]
 800488c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004890:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004894:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004898:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800489a:	69fb      	ldr	r3, [r7, #28]
 800489c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	69fa      	ldr	r2, [r7, #28]
 80048a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048a8:	f043 030b 	orr.w	r3, r3, #11
 80048ac:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	69fa      	ldr	r2, [r7, #28]
 80048b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048bc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80048c0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6818      	ldr	r0, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80048d2:	461a      	mov	r2, r3
 80048d4:	f003 fd3e 	bl	8008354 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695a      	ldr	r2, [r3, #20]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80048e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f003 fc6d 	bl	80081cc <USB_ReadInterrupts>
 80048f2:	4603      	mov	r3, r0
 80048f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80048f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048fc:	d124      	bne.n	8004948 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4618      	mov	r0, r3
 8004904:	f003 fd03 	bl	800830e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f002 fcb8 	bl	8007282 <USB_GetDevSpeed>
 8004912:	4603      	mov	r3, r0
 8004914:	461a      	mov	r2, r3
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681c      	ldr	r4, [r3, #0]
 800491e:	f001 f9e9 	bl	8005cf4 <HAL_RCC_GetHCLKFreq>
 8004922:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004928:	b2db      	uxtb	r3, r3
 800492a:	461a      	mov	r2, r3
 800492c:	4620      	mov	r0, r4
 800492e:	f002 f9b7 	bl	8006ca0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f006 f821 	bl	800a97a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	695a      	ldr	r2, [r3, #20]
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004946:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4618      	mov	r0, r3
 800494e:	f003 fc3d 	bl	80081cc <USB_ReadInterrupts>
 8004952:	4603      	mov	r3, r0
 8004954:	f003 0308 	and.w	r3, r3, #8
 8004958:	2b08      	cmp	r3, #8
 800495a:	d10a      	bne.n	8004972 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f005 fffe 	bl	800a95e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	695a      	ldr	r2, [r3, #20]
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f002 0208 	and.w	r2, r2, #8
 8004970:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	4618      	mov	r0, r3
 8004978:	f003 fc28 	bl	80081cc <USB_ReadInterrupts>
 800497c:	4603      	mov	r3, r0
 800497e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004982:	2b80      	cmp	r3, #128	; 0x80
 8004984:	d122      	bne.n	80049cc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004986:	6a3b      	ldr	r3, [r7, #32]
 8004988:	699b      	ldr	r3, [r3, #24]
 800498a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004992:	2301      	movs	r3, #1
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
 8004996:	e014      	b.n	80049c2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004998:	6879      	ldr	r1, [r7, #4]
 800499a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499c:	4613      	mov	r3, r2
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	4413      	add	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d105      	bne.n	80049bc <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80049b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	4619      	mov	r1, r3
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fb27 	bl	800500a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049be:	3301      	adds	r3, #1
 80049c0:	627b      	str	r3, [r7, #36]	; 0x24
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d3e5      	bcc.n	8004998 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	4618      	mov	r0, r3
 80049d2:	f003 fbfb 	bl	80081cc <USB_ReadInterrupts>
 80049d6:	4603      	mov	r3, r0
 80049d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e0:	d13b      	bne.n	8004a5a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049e2:	2301      	movs	r3, #1
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
 80049e6:	e02b      	b.n	8004a40 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80049e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ea:	015a      	lsls	r2, r3, #5
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	4413      	add	r3, r2
 80049f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fc:	4613      	mov	r3, r2
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	4413      	add	r3, r2
 8004a02:	009b      	lsls	r3, r3, #2
 8004a04:	440b      	add	r3, r1
 8004a06:	3340      	adds	r3, #64	; 0x40
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d115      	bne.n	8004a3a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004a0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	da12      	bge.n	8004a3a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a18:	4613      	mov	r3, r2
 8004a1a:	00db      	lsls	r3, r3, #3
 8004a1c:	4413      	add	r3, r2
 8004a1e:	009b      	lsls	r3, r3, #2
 8004a20:	440b      	add	r3, r1
 8004a22:	333f      	adds	r3, #63	; 0x3f
 8004a24:	2201      	movs	r2, #1
 8004a26:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	4619      	mov	r1, r3
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 fae8 	bl	800500a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3c:	3301      	adds	r3, #1
 8004a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d3ce      	bcc.n	80049e8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	695a      	ldr	r2, [r3, #20]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004a58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f003 fbb4 	bl	80081cc <USB_ReadInterrupts>
 8004a64:	4603      	mov	r3, r0
 8004a66:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a6e:	d155      	bne.n	8004b1c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a70:	2301      	movs	r3, #1
 8004a72:	627b      	str	r3, [r7, #36]	; 0x24
 8004a74:	e045      	b.n	8004b02 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a86:	6879      	ldr	r1, [r7, #4]
 8004a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	00db      	lsls	r3, r3, #3
 8004a8e:	4413      	add	r3, r2
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	440b      	add	r3, r1
 8004a94:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d12e      	bne.n	8004afc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a9e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	da2b      	bge.n	8004afc <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004ab0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004ab4:	429a      	cmp	r2, r3
 8004ab6:	d121      	bne.n	8004afc <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004ab8:	6879      	ldr	r1, [r7, #4]
 8004aba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abc:	4613      	mov	r3, r2
 8004abe:	00db      	lsls	r3, r3, #3
 8004ac0:	4413      	add	r3, r2
 8004ac2:	009b      	lsls	r3, r3, #2
 8004ac4:	440b      	add	r3, r1
 8004ac6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004aca:	2201      	movs	r2, #1
 8004acc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10a      	bne.n	8004afc <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004ae6:	69fb      	ldr	r3, [r7, #28]
 8004ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	69fa      	ldr	r2, [r7, #28]
 8004af0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004af4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004af8:	6053      	str	r3, [r2, #4]
            break;
 8004afa:	e007      	b.n	8004b0c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afe:	3301      	adds	r3, #1
 8004b00:	627b      	str	r3, [r7, #36]	; 0x24
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d3b4      	bcc.n	8004a76 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695a      	ldr	r2, [r3, #20]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4618      	mov	r0, r3
 8004b22:	f003 fb53 	bl	80081cc <USB_ReadInterrupts>
 8004b26:	4603      	mov	r3, r0
 8004b28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b30:	d10a      	bne.n	8004b48 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f005 ffa2 	bl	800aa7c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	695a      	ldr	r2, [r3, #20]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004b46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f003 fb3d 	bl	80081cc <USB_ReadInterrupts>
 8004b52:	4603      	mov	r3, r0
 8004b54:	f003 0304 	and.w	r3, r3, #4
 8004b58:	2b04      	cmp	r3, #4
 8004b5a:	d115      	bne.n	8004b88 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f005 ff92 	bl	800aa98 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	6859      	ldr	r1, [r3, #4]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	69ba      	ldr	r2, [r7, #24]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	605a      	str	r2, [r3, #4]
 8004b84:	e000      	b.n	8004b88 <HAL_PCD_IRQHandler+0x938>
      return;
 8004b86:	bf00      	nop
    }
  }
}
 8004b88:	3734      	adds	r7, #52	; 0x34
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd90      	pop	{r4, r7, pc}

08004b8e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b8e:	b580      	push	{r7, lr}
 8004b90:	b082      	sub	sp, #8
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	6078      	str	r0, [r7, #4]
 8004b96:	460b      	mov	r3, r1
 8004b98:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d101      	bne.n	8004ba8 <HAL_PCD_SetAddress+0x1a>
 8004ba4:	2302      	movs	r3, #2
 8004ba6:	e013      	b.n	8004bd0 <HAL_PCD_SetAddress+0x42>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2201      	movs	r2, #1
 8004bac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	78fa      	ldrb	r2, [r7, #3]
 8004bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	78fa      	ldrb	r2, [r7, #3]
 8004bbe:	4611      	mov	r1, r2
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f003 fa9b 	bl	80080fc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2200      	movs	r2, #0
 8004bca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3708      	adds	r7, #8
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	4608      	mov	r0, r1
 8004be2:	4611      	mov	r1, r2
 8004be4:	461a      	mov	r2, r3
 8004be6:	4603      	mov	r3, r0
 8004be8:	70fb      	strb	r3, [r7, #3]
 8004bea:	460b      	mov	r3, r1
 8004bec:	803b      	strh	r3, [r7, #0]
 8004bee:	4613      	mov	r3, r2
 8004bf0:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004bf6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	da0f      	bge.n	8004c1e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bfe:	78fb      	ldrb	r3, [r7, #3]
 8004c00:	f003 020f 	and.w	r2, r3, #15
 8004c04:	4613      	mov	r3, r2
 8004c06:	00db      	lsls	r3, r3, #3
 8004c08:	4413      	add	r3, r2
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	3338      	adds	r3, #56	; 0x38
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	4413      	add	r3, r2
 8004c12:	3304      	adds	r3, #4
 8004c14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	705a      	strb	r2, [r3, #1]
 8004c1c:	e00f      	b.n	8004c3e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c1e:	78fb      	ldrb	r3, [r7, #3]
 8004c20:	f003 020f 	and.w	r2, r3, #15
 8004c24:	4613      	mov	r3, r2
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	4413      	add	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	4413      	add	r3, r2
 8004c34:	3304      	adds	r3, #4
 8004c36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004c3e:	78fb      	ldrb	r3, [r7, #3]
 8004c40:	f003 030f 	and.w	r3, r3, #15
 8004c44:	b2da      	uxtb	r2, r3
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004c4a:	883a      	ldrh	r2, [r7, #0]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	78ba      	ldrb	r2, [r7, #2]
 8004c54:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	785b      	ldrb	r3, [r3, #1]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d004      	beq.n	8004c68 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004c68:	78bb      	ldrb	r3, [r7, #2]
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	d102      	bne.n	8004c74 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	2200      	movs	r2, #0
 8004c72:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_PCD_EP_Open+0xaa>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e00e      	b.n	8004ca0 <HAL_PCD_EP_Open+0xc8>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68f9      	ldr	r1, [r7, #12]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f002 fb1b 	bl	80072cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004c9e:	7afb      	ldrb	r3, [r7, #11]
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3710      	adds	r7, #16
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}

08004ca8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004cb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	da0f      	bge.n	8004cdc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004cbc:	78fb      	ldrb	r3, [r7, #3]
 8004cbe:	f003 020f 	and.w	r2, r3, #15
 8004cc2:	4613      	mov	r3, r2
 8004cc4:	00db      	lsls	r3, r3, #3
 8004cc6:	4413      	add	r3, r2
 8004cc8:	009b      	lsls	r3, r3, #2
 8004cca:	3338      	adds	r3, #56	; 0x38
 8004ccc:	687a      	ldr	r2, [r7, #4]
 8004cce:	4413      	add	r3, r2
 8004cd0:	3304      	adds	r3, #4
 8004cd2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	705a      	strb	r2, [r3, #1]
 8004cda:	e00f      	b.n	8004cfc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cdc:	78fb      	ldrb	r3, [r7, #3]
 8004cde:	f003 020f 	and.w	r2, r3, #15
 8004ce2:	4613      	mov	r3, r2
 8004ce4:	00db      	lsls	r3, r3, #3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	009b      	lsls	r3, r3, #2
 8004cea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cee:	687a      	ldr	r2, [r7, #4]
 8004cf0:	4413      	add	r3, r2
 8004cf2:	3304      	adds	r3, #4
 8004cf4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004cfc:	78fb      	ldrb	r3, [r7, #3]
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	b2da      	uxtb	r2, r3
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004d0e:	2b01      	cmp	r3, #1
 8004d10:	d101      	bne.n	8004d16 <HAL_PCD_EP_Close+0x6e>
 8004d12:	2302      	movs	r3, #2
 8004d14:	e00e      	b.n	8004d34 <HAL_PCD_EP_Close+0x8c>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68f9      	ldr	r1, [r7, #12]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f002 fb59 	bl	80073dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004d32:	2300      	movs	r3, #0
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3710      	adds	r7, #16
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	607a      	str	r2, [r7, #4]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	460b      	mov	r3, r1
 8004d4a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d4c:	7afb      	ldrb	r3, [r7, #11]
 8004d4e:	f003 020f 	and.w	r2, r3, #15
 8004d52:	4613      	mov	r3, r2
 8004d54:	00db      	lsls	r3, r3, #3
 8004d56:	4413      	add	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	4413      	add	r3, r2
 8004d62:	3304      	adds	r3, #4
 8004d64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2200      	movs	r2, #0
 8004d76:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d7e:	7afb      	ldrb	r3, [r7, #11]
 8004d80:	f003 030f 	and.w	r3, r3, #15
 8004d84:	b2da      	uxtb	r2, r3
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	d102      	bne.n	8004d98 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d98:	7afb      	ldrb	r3, [r7, #11]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d109      	bne.n	8004db6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6818      	ldr	r0, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	691b      	ldr	r3, [r3, #16]
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	461a      	mov	r2, r3
 8004dae:	6979      	ldr	r1, [r7, #20]
 8004db0:	f002 fe38 	bl	8007a24 <USB_EP0StartXfer>
 8004db4:	e008      	b.n	8004dc8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	6818      	ldr	r0, [r3, #0]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	461a      	mov	r2, r3
 8004dc2:	6979      	ldr	r1, [r7, #20]
 8004dc4:	f002 fbe6 	bl	8007594 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004dc8:	2300      	movs	r3, #0
}
 8004dca:	4618      	mov	r0, r3
 8004dcc:	3718      	adds	r7, #24
 8004dce:	46bd      	mov	sp, r7
 8004dd0:	bd80      	pop	{r7, pc}

08004dd2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b083      	sub	sp, #12
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
 8004dda:	460b      	mov	r3, r1
 8004ddc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004dde:	78fb      	ldrb	r3, [r7, #3]
 8004de0:	f003 020f 	and.w	r2, r3, #15
 8004de4:	6879      	ldr	r1, [r7, #4]
 8004de6:	4613      	mov	r3, r2
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	4413      	add	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	440b      	add	r3, r1
 8004df0:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004df4:	681b      	ldr	r3, [r3, #0]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr

08004e02 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b086      	sub	sp, #24
 8004e06:	af00      	add	r7, sp, #0
 8004e08:	60f8      	str	r0, [r7, #12]
 8004e0a:	607a      	str	r2, [r7, #4]
 8004e0c:	603b      	str	r3, [r7, #0]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e12:	7afb      	ldrb	r3, [r7, #11]
 8004e14:	f003 020f 	and.w	r2, r3, #15
 8004e18:	4613      	mov	r3, r2
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	4413      	add	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	3338      	adds	r3, #56	; 0x38
 8004e22:	68fa      	ldr	r2, [r7, #12]
 8004e24:	4413      	add	r3, r2
 8004e26:	3304      	adds	r3, #4
 8004e28:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	683a      	ldr	r2, [r7, #0]
 8004e34:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e42:	7afb      	ldrb	r3, [r7, #11]
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d102      	bne.n	8004e5c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e5c:	7afb      	ldrb	r3, [r7, #11]
 8004e5e:	f003 030f 	and.w	r3, r3, #15
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d109      	bne.n	8004e7a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	6818      	ldr	r0, [r3, #0]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	461a      	mov	r2, r3
 8004e72:	6979      	ldr	r1, [r7, #20]
 8004e74:	f002 fdd6 	bl	8007a24 <USB_EP0StartXfer>
 8004e78:	e008      	b.n	8004e8c <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	461a      	mov	r2, r3
 8004e86:	6979      	ldr	r1, [r7, #20]
 8004e88:	f002 fb84 	bl	8007594 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}

08004e96 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004e96:	b580      	push	{r7, lr}
 8004e98:	b084      	sub	sp, #16
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	f003 020f 	and.w	r2, r3, #15
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d901      	bls.n	8004eb4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e050      	b.n	8004f56 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004eb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	da0f      	bge.n	8004edc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ebc:	78fb      	ldrb	r3, [r7, #3]
 8004ebe:	f003 020f 	and.w	r2, r3, #15
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	00db      	lsls	r3, r3, #3
 8004ec6:	4413      	add	r3, r2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	3338      	adds	r3, #56	; 0x38
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	4413      	add	r3, r2
 8004ed0:	3304      	adds	r3, #4
 8004ed2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	705a      	strb	r2, [r3, #1]
 8004eda:	e00d      	b.n	8004ef8 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004edc:	78fa      	ldrb	r2, [r7, #3]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	00db      	lsls	r3, r3, #3
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004eea:	687a      	ldr	r2, [r7, #4]
 8004eec:	4413      	add	r3, r2
 8004eee:	3304      	adds	r3, #4
 8004ef0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	b2da      	uxtb	r2, r3
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f10:	2b01      	cmp	r3, #1
 8004f12:	d101      	bne.n	8004f18 <HAL_PCD_EP_SetStall+0x82>
 8004f14:	2302      	movs	r3, #2
 8004f16:	e01e      	b.n	8004f56 <HAL_PCD_EP_SetStall+0xc0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68f9      	ldr	r1, [r7, #12]
 8004f26:	4618      	mov	r0, r3
 8004f28:	f003 f814 	bl	8007f54 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f2c:	78fb      	ldrb	r3, [r7, #3]
 8004f2e:	f003 030f 	and.w	r3, r3, #15
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10a      	bne.n	8004f4c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6818      	ldr	r0, [r3, #0]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	691b      	ldr	r3, [r3, #16]
 8004f3e:	b2d9      	uxtb	r1, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f46:	461a      	mov	r2, r3
 8004f48:	f003 fa04 	bl	8008354 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}

08004f5e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f5e:	b580      	push	{r7, lr}
 8004f60:	b084      	sub	sp, #16
 8004f62:	af00      	add	r7, sp, #0
 8004f64:	6078      	str	r0, [r7, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004f6a:	78fb      	ldrb	r3, [r7, #3]
 8004f6c:	f003 020f 	and.w	r2, r3, #15
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d901      	bls.n	8004f7c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e042      	b.n	8005002 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f7c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	da0f      	bge.n	8004fa4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f84:	78fb      	ldrb	r3, [r7, #3]
 8004f86:	f003 020f 	and.w	r2, r3, #15
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	00db      	lsls	r3, r3, #3
 8004f8e:	4413      	add	r3, r2
 8004f90:	009b      	lsls	r3, r3, #2
 8004f92:	3338      	adds	r3, #56	; 0x38
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	4413      	add	r3, r2
 8004f98:	3304      	adds	r3, #4
 8004f9a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	705a      	strb	r2, [r3, #1]
 8004fa2:	e00f      	b.n	8004fc4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004fa4:	78fb      	ldrb	r3, [r7, #3]
 8004fa6:	f003 020f 	and.w	r2, r3, #15
 8004faa:	4613      	mov	r3, r2
 8004fac:	00db      	lsls	r3, r3, #3
 8004fae:	4413      	add	r3, r2
 8004fb0:	009b      	lsls	r3, r3, #2
 8004fb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fb6:	687a      	ldr	r2, [r7, #4]
 8004fb8:	4413      	add	r3, r2
 8004fba:	3304      	adds	r3, #4
 8004fbc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	f003 030f 	and.w	r3, r3, #15
 8004fd0:	b2da      	uxtb	r2, r3
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004fdc:	2b01      	cmp	r3, #1
 8004fde:	d101      	bne.n	8004fe4 <HAL_PCD_EP_ClrStall+0x86>
 8004fe0:	2302      	movs	r3, #2
 8004fe2:	e00e      	b.n	8005002 <HAL_PCD_EP_ClrStall+0xa4>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	68f9      	ldr	r1, [r7, #12]
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f003 f81c 	bl	8008030 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005000:	2300      	movs	r3, #0
}
 8005002:	4618      	mov	r0, r3
 8005004:	3710      	adds	r7, #16
 8005006:	46bd      	mov	sp, r7
 8005008:	bd80      	pop	{r7, pc}

0800500a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800500a:	b580      	push	{r7, lr}
 800500c:	b084      	sub	sp, #16
 800500e:	af00      	add	r7, sp, #0
 8005010:	6078      	str	r0, [r7, #4]
 8005012:	460b      	mov	r3, r1
 8005014:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005016:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800501a:	2b00      	cmp	r3, #0
 800501c:	da0c      	bge.n	8005038 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800501e:	78fb      	ldrb	r3, [r7, #3]
 8005020:	f003 020f 	and.w	r2, r3, #15
 8005024:	4613      	mov	r3, r2
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	4413      	add	r3, r2
 800502a:	009b      	lsls	r3, r3, #2
 800502c:	3338      	adds	r3, #56	; 0x38
 800502e:	687a      	ldr	r2, [r7, #4]
 8005030:	4413      	add	r3, r2
 8005032:	3304      	adds	r3, #4
 8005034:	60fb      	str	r3, [r7, #12]
 8005036:	e00c      	b.n	8005052 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005038:	78fb      	ldrb	r3, [r7, #3]
 800503a:	f003 020f 	and.w	r2, r3, #15
 800503e:	4613      	mov	r3, r2
 8005040:	00db      	lsls	r3, r3, #3
 8005042:	4413      	add	r3, r2
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	4413      	add	r3, r2
 800504e:	3304      	adds	r3, #4
 8005050:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68f9      	ldr	r1, [r7, #12]
 8005058:	4618      	mov	r0, r3
 800505a:	f002 fe3b 	bl	8007cd4 <USB_EPStopXfer>
 800505e:	4603      	mov	r3, r0
 8005060:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005062:	7afb      	ldrb	r3, [r7, #11]
}
 8005064:	4618      	mov	r0, r3
 8005066:	3710      	adds	r7, #16
 8005068:	46bd      	mov	sp, r7
 800506a:	bd80      	pop	{r7, pc}

0800506c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b08a      	sub	sp, #40	; 0x28
 8005070:	af02      	add	r7, sp, #8
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005080:	683a      	ldr	r2, [r7, #0]
 8005082:	4613      	mov	r3, r2
 8005084:	00db      	lsls	r3, r3, #3
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	3338      	adds	r3, #56	; 0x38
 800508c:	687a      	ldr	r2, [r7, #4]
 800508e:	4413      	add	r3, r2
 8005090:	3304      	adds	r3, #4
 8005092:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1a      	ldr	r2, [r3, #32]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	429a      	cmp	r2, r3
 800509e:	d901      	bls.n	80050a4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e06c      	b.n	800517e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	699a      	ldr	r2, [r3, #24]
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	6a1b      	ldr	r3, [r3, #32]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	69fa      	ldr	r2, [r7, #28]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d902      	bls.n	80050c0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	3303      	adds	r3, #3
 80050c4:	089b      	lsrs	r3, r3, #2
 80050c6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80050c8:	e02b      	b.n	8005122 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	699a      	ldr	r2, [r3, #24]
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	68db      	ldr	r3, [r3, #12]
 80050da:	69fa      	ldr	r2, [r7, #28]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d902      	bls.n	80050e6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	68db      	ldr	r3, [r3, #12]
 80050e4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	3303      	adds	r3, #3
 80050ea:	089b      	lsrs	r3, r3, #2
 80050ec:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6919      	ldr	r1, [r3, #16]
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	4603      	mov	r3, r0
 8005104:	6978      	ldr	r0, [r7, #20]
 8005106:	f002 fe8f 	bl	8007e28 <USB_WritePacket>

    ep->xfer_buff  += len;
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	691a      	ldr	r2, [r3, #16]
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	441a      	add	r2, r3
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	6a1a      	ldr	r2, [r3, #32]
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	441a      	add	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	693b      	ldr	r3, [r7, #16]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	b29b      	uxth	r3, r3
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	429a      	cmp	r2, r3
 8005136:	d809      	bhi.n	800514c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a1a      	ldr	r2, [r3, #32]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005140:	429a      	cmp	r2, r3
 8005142:	d203      	bcs.n	800514c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	699b      	ldr	r3, [r3, #24]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1be      	bne.n	80050ca <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	699a      	ldr	r2, [r3, #24]
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	429a      	cmp	r2, r3
 8005156:	d811      	bhi.n	800517c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	f003 030f 	and.w	r3, r3, #15
 800515e:	2201      	movs	r2, #1
 8005160:	fa02 f303 	lsl.w	r3, r2, r3
 8005164:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800516c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	43db      	mvns	r3, r3
 8005172:	6939      	ldr	r1, [r7, #16]
 8005174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005178:	4013      	ands	r3, r2
 800517a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800517c:	2300      	movs	r3, #0
}
 800517e:	4618      	mov	r0, r3
 8005180:	3720      	adds	r7, #32
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
	...

08005188 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b088      	sub	sp, #32
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800519c:	69fb      	ldr	r3, [r7, #28]
 800519e:	333c      	adds	r3, #60	; 0x3c
 80051a0:	3304      	adds	r3, #4
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	015a      	lsls	r2, r3, #5
 80051aa:	69bb      	ldr	r3, [r7, #24]
 80051ac:	4413      	add	r3, r2
 80051ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	691b      	ldr	r3, [r3, #16]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d17b      	bne.n	80052b6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d015      	beq.n	80051f4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	4a61      	ldr	r2, [pc, #388]	; (8005350 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80051cc:	4293      	cmp	r3, r2
 80051ce:	f240 80b9 	bls.w	8005344 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80051d8:	2b00      	cmp	r3, #0
 80051da:	f000 80b3 	beq.w	8005344 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	015a      	lsls	r2, r3, #5
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	4413      	add	r3, r2
 80051e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ea:	461a      	mov	r2, r3
 80051ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80051f0:	6093      	str	r3, [r2, #8]
 80051f2:	e0a7      	b.n	8005344 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80051f4:	693b      	ldr	r3, [r7, #16]
 80051f6:	f003 0320 	and.w	r3, r3, #32
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520a:	461a      	mov	r2, r3
 800520c:	2320      	movs	r3, #32
 800520e:	6093      	str	r3, [r2, #8]
 8005210:	e098      	b.n	8005344 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005218:	2b00      	cmp	r3, #0
 800521a:	f040 8093 	bne.w	8005344 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	4a4b      	ldr	r2, [pc, #300]	; (8005350 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d90f      	bls.n	8005246 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005226:	693b      	ldr	r3, [r7, #16]
 8005228:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00a      	beq.n	8005246 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	69bb      	ldr	r3, [r7, #24]
 8005236:	4413      	add	r3, r2
 8005238:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523c:	461a      	mov	r2, r3
 800523e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005242:	6093      	str	r3, [r2, #8]
 8005244:	e07e      	b.n	8005344 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005246:	683a      	ldr	r2, [r7, #0]
 8005248:	4613      	mov	r3, r2
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	4413      	add	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005254:	687a      	ldr	r2, [r7, #4]
 8005256:	4413      	add	r3, r2
 8005258:	3304      	adds	r3, #4
 800525a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	0159      	lsls	r1, r3, #5
 8005264:	69bb      	ldr	r3, [r7, #24]
 8005266:	440b      	add	r3, r1
 8005268:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005272:	1ad2      	subs	r2, r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d114      	bne.n	80052a8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d109      	bne.n	800529a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005290:	461a      	mov	r2, r3
 8005292:	2101      	movs	r1, #1
 8005294:	f003 f85e 	bl	8008354 <USB_EP0_OutStart>
 8005298:	e006      	b.n	80052a8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	691a      	ldr	r2, [r3, #16]
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6a1b      	ldr	r3, [r3, #32]
 80052a2:	441a      	add	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	b2db      	uxtb	r3, r3
 80052ac:	4619      	mov	r1, r3
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f005 fb20 	bl	800a8f4 <HAL_PCD_DataOutStageCallback>
 80052b4:	e046      	b.n	8005344 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	4a26      	ldr	r2, [pc, #152]	; (8005354 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d124      	bne.n	8005308 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00a      	beq.n	80052de <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052c8:	683b      	ldr	r3, [r7, #0]
 80052ca:	015a      	lsls	r2, r3, #5
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	4413      	add	r3, r2
 80052d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d4:	461a      	mov	r2, r3
 80052d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052da:	6093      	str	r3, [r2, #8]
 80052dc:	e032      	b.n	8005344 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	f003 0320 	and.w	r3, r3, #32
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d008      	beq.n	80052fa <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	015a      	lsls	r2, r3, #5
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	4413      	add	r3, r2
 80052f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f4:	461a      	mov	r2, r3
 80052f6:	2320      	movs	r3, #32
 80052f8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	4619      	mov	r1, r3
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f005 faf7 	bl	800a8f4 <HAL_PCD_DataOutStageCallback>
 8005306:	e01d      	b.n	8005344 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d114      	bne.n	8005338 <PCD_EP_OutXfrComplete_int+0x1b0>
 800530e:	6879      	ldr	r1, [r7, #4]
 8005310:	683a      	ldr	r2, [r7, #0]
 8005312:	4613      	mov	r3, r2
 8005314:	00db      	lsls	r3, r3, #3
 8005316:	4413      	add	r3, r2
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	440b      	add	r3, r1
 800531c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d108      	bne.n	8005338 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6818      	ldr	r0, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005330:	461a      	mov	r2, r3
 8005332:	2100      	movs	r1, #0
 8005334:	f003 f80e 	bl	8008354 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	b2db      	uxtb	r3, r3
 800533c:	4619      	mov	r1, r3
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f005 fad8 	bl	800a8f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005344:	2300      	movs	r3, #0
}
 8005346:	4618      	mov	r0, r3
 8005348:	3720      	adds	r7, #32
 800534a:	46bd      	mov	sp, r7
 800534c:	bd80      	pop	{r7, pc}
 800534e:	bf00      	nop
 8005350:	4f54300a 	.word	0x4f54300a
 8005354:	4f54310a 	.word	0x4f54310a

08005358 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	333c      	adds	r3, #60	; 0x3c
 8005370:	3304      	adds	r3, #4
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	015a      	lsls	r2, r3, #5
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	4413      	add	r3, r2
 800537e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005382:	689b      	ldr	r3, [r3, #8]
 8005384:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	4a15      	ldr	r2, [pc, #84]	; (80053e0 <PCD_EP_OutSetupPacket_int+0x88>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d90e      	bls.n	80053ac <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005394:	2b00      	cmp	r3, #0
 8005396:	d009      	beq.n	80053ac <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a4:	461a      	mov	r2, r3
 80053a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053aa:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	f005 fa8f 	bl	800a8d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	4a0a      	ldr	r2, [pc, #40]	; (80053e0 <PCD_EP_OutSetupPacket_int+0x88>)
 80053b6:	4293      	cmp	r3, r2
 80053b8:	d90c      	bls.n	80053d4 <PCD_EP_OutSetupPacket_int+0x7c>
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d108      	bne.n	80053d4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6818      	ldr	r0, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053cc:	461a      	mov	r2, r3
 80053ce:	2101      	movs	r1, #1
 80053d0:	f002 ffc0 	bl	8008354 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	4f54300a 	.word	0x4f54300a

080053e4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	460b      	mov	r3, r1
 80053ee:	70fb      	strb	r3, [r7, #3]
 80053f0:	4613      	mov	r3, r2
 80053f2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80053fc:	78fb      	ldrb	r3, [r7, #3]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d107      	bne.n	8005412 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005402:	883b      	ldrh	r3, [r7, #0]
 8005404:	0419      	lsls	r1, r3, #16
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68ba      	ldr	r2, [r7, #8]
 800540c:	430a      	orrs	r2, r1
 800540e:	629a      	str	r2, [r3, #40]	; 0x28
 8005410:	e028      	b.n	8005464 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005418:	0c1b      	lsrs	r3, r3, #16
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	4413      	add	r3, r2
 800541e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005420:	2300      	movs	r3, #0
 8005422:	73fb      	strb	r3, [r7, #15]
 8005424:	e00d      	b.n	8005442 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681a      	ldr	r2, [r3, #0]
 800542a:	7bfb      	ldrb	r3, [r7, #15]
 800542c:	3340      	adds	r3, #64	; 0x40
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	4413      	add	r3, r2
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	0c1b      	lsrs	r3, r3, #16
 8005436:	68ba      	ldr	r2, [r7, #8]
 8005438:	4413      	add	r3, r2
 800543a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800543c:	7bfb      	ldrb	r3, [r7, #15]
 800543e:	3301      	adds	r3, #1
 8005440:	73fb      	strb	r3, [r7, #15]
 8005442:	7bfa      	ldrb	r2, [r7, #15]
 8005444:	78fb      	ldrb	r3, [r7, #3]
 8005446:	3b01      	subs	r3, #1
 8005448:	429a      	cmp	r2, r3
 800544a:	d3ec      	bcc.n	8005426 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800544c:	883b      	ldrh	r3, [r7, #0]
 800544e:	0418      	lsls	r0, r3, #16
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	3b01      	subs	r3, #1
 8005458:	68ba      	ldr	r2, [r7, #8]
 800545a:	4302      	orrs	r2, r0
 800545c:	3340      	adds	r3, #64	; 0x40
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	440b      	add	r3, r1
 8005462:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3714      	adds	r7, #20
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
 800547a:	460b      	mov	r3, r1
 800547c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	887a      	ldrh	r2, [r7, #2]
 8005484:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	370c      	adds	r7, #12
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr

08005494 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	460b      	mov	r3, r1
 800549e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	b086      	sub	sp, #24
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e267      	b.n	800598e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 0301 	and.w	r3, r3, #1
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d075      	beq.n	80055b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054ca:	4b88      	ldr	r3, [pc, #544]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 030c 	and.w	r3, r3, #12
 80054d2:	2b04      	cmp	r3, #4
 80054d4:	d00c      	beq.n	80054f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054d6:	4b85      	ldr	r3, [pc, #532]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054de:	2b08      	cmp	r3, #8
 80054e0:	d112      	bne.n	8005508 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054e2:	4b82      	ldr	r3, [pc, #520]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054ee:	d10b      	bne.n	8005508 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f0:	4b7e      	ldr	r3, [pc, #504]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d05b      	beq.n	80055b4 <HAL_RCC_OscConfig+0x108>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d157      	bne.n	80055b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005504:	2301      	movs	r3, #1
 8005506:	e242      	b.n	800598e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005510:	d106      	bne.n	8005520 <HAL_RCC_OscConfig+0x74>
 8005512:	4b76      	ldr	r3, [pc, #472]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a75      	ldr	r2, [pc, #468]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 8005518:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800551c:	6013      	str	r3, [r2, #0]
 800551e:	e01d      	b.n	800555c <HAL_RCC_OscConfig+0xb0>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005528:	d10c      	bne.n	8005544 <HAL_RCC_OscConfig+0x98>
 800552a:	4b70      	ldr	r3, [pc, #448]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a6f      	ldr	r2, [pc, #444]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 8005530:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	4b6d      	ldr	r3, [pc, #436]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a6c      	ldr	r2, [pc, #432]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 800553c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	e00b      	b.n	800555c <HAL_RCC_OscConfig+0xb0>
 8005544:	4b69      	ldr	r3, [pc, #420]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a68      	ldr	r2, [pc, #416]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 800554a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	4b66      	ldr	r3, [pc, #408]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a65      	ldr	r2, [pc, #404]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 8005556:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800555a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d013      	beq.n	800558c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005564:	f7fd f886 	bl	8002674 <HAL_GetTick>
 8005568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800556a:	e008      	b.n	800557e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800556c:	f7fd f882 	bl	8002674 <HAL_GetTick>
 8005570:	4602      	mov	r2, r0
 8005572:	693b      	ldr	r3, [r7, #16]
 8005574:	1ad3      	subs	r3, r2, r3
 8005576:	2b64      	cmp	r3, #100	; 0x64
 8005578:	d901      	bls.n	800557e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800557a:	2303      	movs	r3, #3
 800557c:	e207      	b.n	800598e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800557e:	4b5b      	ldr	r3, [pc, #364]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005586:	2b00      	cmp	r3, #0
 8005588:	d0f0      	beq.n	800556c <HAL_RCC_OscConfig+0xc0>
 800558a:	e014      	b.n	80055b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800558c:	f7fd f872 	bl	8002674 <HAL_GetTick>
 8005590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005592:	e008      	b.n	80055a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005594:	f7fd f86e 	bl	8002674 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b64      	cmp	r3, #100	; 0x64
 80055a0:	d901      	bls.n	80055a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e1f3      	b.n	800598e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055a6:	4b51      	ldr	r3, [pc, #324]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d1f0      	bne.n	8005594 <HAL_RCC_OscConfig+0xe8>
 80055b2:	e000      	b.n	80055b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d063      	beq.n	800568a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055c2:	4b4a      	ldr	r3, [pc, #296]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	f003 030c 	and.w	r3, r3, #12
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00b      	beq.n	80055e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055ce:	4b47      	ldr	r3, [pc, #284]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055d6:	2b08      	cmp	r3, #8
 80055d8:	d11c      	bne.n	8005614 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055da:	4b44      	ldr	r3, [pc, #272]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d116      	bne.n	8005614 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055e6:	4b41      	ldr	r3, [pc, #260]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d005      	beq.n	80055fe <HAL_RCC_OscConfig+0x152>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d001      	beq.n	80055fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055fa:	2301      	movs	r3, #1
 80055fc:	e1c7      	b.n	800598e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80055fe:	4b3b      	ldr	r3, [pc, #236]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	00db      	lsls	r3, r3, #3
 800560c:	4937      	ldr	r1, [pc, #220]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 800560e:	4313      	orrs	r3, r2
 8005610:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005612:	e03a      	b.n	800568a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d020      	beq.n	800565e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800561c:	4b34      	ldr	r3, [pc, #208]	; (80056f0 <HAL_RCC_OscConfig+0x244>)
 800561e:	2201      	movs	r2, #1
 8005620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005622:	f7fd f827 	bl	8002674 <HAL_GetTick>
 8005626:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005628:	e008      	b.n	800563c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800562a:	f7fd f823 	bl	8002674 <HAL_GetTick>
 800562e:	4602      	mov	r2, r0
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	1ad3      	subs	r3, r2, r3
 8005634:	2b02      	cmp	r3, #2
 8005636:	d901      	bls.n	800563c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005638:	2303      	movs	r3, #3
 800563a:	e1a8      	b.n	800598e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800563c:	4b2b      	ldr	r3, [pc, #172]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d0f0      	beq.n	800562a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005648:	4b28      	ldr	r3, [pc, #160]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	00db      	lsls	r3, r3, #3
 8005656:	4925      	ldr	r1, [pc, #148]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 8005658:	4313      	orrs	r3, r2
 800565a:	600b      	str	r3, [r1, #0]
 800565c:	e015      	b.n	800568a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800565e:	4b24      	ldr	r3, [pc, #144]	; (80056f0 <HAL_RCC_OscConfig+0x244>)
 8005660:	2200      	movs	r2, #0
 8005662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005664:	f7fd f806 	bl	8002674 <HAL_GetTick>
 8005668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800566a:	e008      	b.n	800567e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800566c:	f7fd f802 	bl	8002674 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	2b02      	cmp	r3, #2
 8005678:	d901      	bls.n	800567e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800567a:	2303      	movs	r3, #3
 800567c:	e187      	b.n	800598e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800567e:	4b1b      	ldr	r3, [pc, #108]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 0302 	and.w	r3, r3, #2
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1f0      	bne.n	800566c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f003 0308 	and.w	r3, r3, #8
 8005692:	2b00      	cmp	r3, #0
 8005694:	d036      	beq.n	8005704 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d016      	beq.n	80056cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800569e:	4b15      	ldr	r3, [pc, #84]	; (80056f4 <HAL_RCC_OscConfig+0x248>)
 80056a0:	2201      	movs	r2, #1
 80056a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a4:	f7fc ffe6 	bl	8002674 <HAL_GetTick>
 80056a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056aa:	e008      	b.n	80056be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056ac:	f7fc ffe2 	bl	8002674 <HAL_GetTick>
 80056b0:	4602      	mov	r2, r0
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	1ad3      	subs	r3, r2, r3
 80056b6:	2b02      	cmp	r3, #2
 80056b8:	d901      	bls.n	80056be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e167      	b.n	800598e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056be:	4b0b      	ldr	r3, [pc, #44]	; (80056ec <HAL_RCC_OscConfig+0x240>)
 80056c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d0f0      	beq.n	80056ac <HAL_RCC_OscConfig+0x200>
 80056ca:	e01b      	b.n	8005704 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056cc:	4b09      	ldr	r3, [pc, #36]	; (80056f4 <HAL_RCC_OscConfig+0x248>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d2:	f7fc ffcf 	bl	8002674 <HAL_GetTick>
 80056d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056d8:	e00e      	b.n	80056f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056da:	f7fc ffcb 	bl	8002674 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d907      	bls.n	80056f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e150      	b.n	800598e <HAL_RCC_OscConfig+0x4e2>
 80056ec:	40023800 	.word	0x40023800
 80056f0:	42470000 	.word	0x42470000
 80056f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056f8:	4b88      	ldr	r3, [pc, #544]	; (800591c <HAL_RCC_OscConfig+0x470>)
 80056fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d1ea      	bne.n	80056da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0304 	and.w	r3, r3, #4
 800570c:	2b00      	cmp	r3, #0
 800570e:	f000 8097 	beq.w	8005840 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005712:	2300      	movs	r3, #0
 8005714:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005716:	4b81      	ldr	r3, [pc, #516]	; (800591c <HAL_RCC_OscConfig+0x470>)
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10f      	bne.n	8005742 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005722:	2300      	movs	r3, #0
 8005724:	60bb      	str	r3, [r7, #8]
 8005726:	4b7d      	ldr	r3, [pc, #500]	; (800591c <HAL_RCC_OscConfig+0x470>)
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	4a7c      	ldr	r2, [pc, #496]	; (800591c <HAL_RCC_OscConfig+0x470>)
 800572c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005730:	6413      	str	r3, [r2, #64]	; 0x40
 8005732:	4b7a      	ldr	r3, [pc, #488]	; (800591c <HAL_RCC_OscConfig+0x470>)
 8005734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573a:	60bb      	str	r3, [r7, #8]
 800573c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800573e:	2301      	movs	r3, #1
 8005740:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005742:	4b77      	ldr	r3, [pc, #476]	; (8005920 <HAL_RCC_OscConfig+0x474>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574a:	2b00      	cmp	r3, #0
 800574c:	d118      	bne.n	8005780 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800574e:	4b74      	ldr	r3, [pc, #464]	; (8005920 <HAL_RCC_OscConfig+0x474>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	4a73      	ldr	r2, [pc, #460]	; (8005920 <HAL_RCC_OscConfig+0x474>)
 8005754:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005758:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800575a:	f7fc ff8b 	bl	8002674 <HAL_GetTick>
 800575e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005760:	e008      	b.n	8005774 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005762:	f7fc ff87 	bl	8002674 <HAL_GetTick>
 8005766:	4602      	mov	r2, r0
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	1ad3      	subs	r3, r2, r3
 800576c:	2b02      	cmp	r3, #2
 800576e:	d901      	bls.n	8005774 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005770:	2303      	movs	r3, #3
 8005772:	e10c      	b.n	800598e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005774:	4b6a      	ldr	r3, [pc, #424]	; (8005920 <HAL_RCC_OscConfig+0x474>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800577c:	2b00      	cmp	r3, #0
 800577e:	d0f0      	beq.n	8005762 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	2b01      	cmp	r3, #1
 8005786:	d106      	bne.n	8005796 <HAL_RCC_OscConfig+0x2ea>
 8005788:	4b64      	ldr	r3, [pc, #400]	; (800591c <HAL_RCC_OscConfig+0x470>)
 800578a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800578c:	4a63      	ldr	r2, [pc, #396]	; (800591c <HAL_RCC_OscConfig+0x470>)
 800578e:	f043 0301 	orr.w	r3, r3, #1
 8005792:	6713      	str	r3, [r2, #112]	; 0x70
 8005794:	e01c      	b.n	80057d0 <HAL_RCC_OscConfig+0x324>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	689b      	ldr	r3, [r3, #8]
 800579a:	2b05      	cmp	r3, #5
 800579c:	d10c      	bne.n	80057b8 <HAL_RCC_OscConfig+0x30c>
 800579e:	4b5f      	ldr	r3, [pc, #380]	; (800591c <HAL_RCC_OscConfig+0x470>)
 80057a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a2:	4a5e      	ldr	r2, [pc, #376]	; (800591c <HAL_RCC_OscConfig+0x470>)
 80057a4:	f043 0304 	orr.w	r3, r3, #4
 80057a8:	6713      	str	r3, [r2, #112]	; 0x70
 80057aa:	4b5c      	ldr	r3, [pc, #368]	; (800591c <HAL_RCC_OscConfig+0x470>)
 80057ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057ae:	4a5b      	ldr	r2, [pc, #364]	; (800591c <HAL_RCC_OscConfig+0x470>)
 80057b0:	f043 0301 	orr.w	r3, r3, #1
 80057b4:	6713      	str	r3, [r2, #112]	; 0x70
 80057b6:	e00b      	b.n	80057d0 <HAL_RCC_OscConfig+0x324>
 80057b8:	4b58      	ldr	r3, [pc, #352]	; (800591c <HAL_RCC_OscConfig+0x470>)
 80057ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057bc:	4a57      	ldr	r2, [pc, #348]	; (800591c <HAL_RCC_OscConfig+0x470>)
 80057be:	f023 0301 	bic.w	r3, r3, #1
 80057c2:	6713      	str	r3, [r2, #112]	; 0x70
 80057c4:	4b55      	ldr	r3, [pc, #340]	; (800591c <HAL_RCC_OscConfig+0x470>)
 80057c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c8:	4a54      	ldr	r2, [pc, #336]	; (800591c <HAL_RCC_OscConfig+0x470>)
 80057ca:	f023 0304 	bic.w	r3, r3, #4
 80057ce:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d015      	beq.n	8005804 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057d8:	f7fc ff4c 	bl	8002674 <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057de:	e00a      	b.n	80057f6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057e0:	f7fc ff48 	bl	8002674 <HAL_GetTick>
 80057e4:	4602      	mov	r2, r0
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	1ad3      	subs	r3, r2, r3
 80057ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d901      	bls.n	80057f6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057f2:	2303      	movs	r3, #3
 80057f4:	e0cb      	b.n	800598e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057f6:	4b49      	ldr	r3, [pc, #292]	; (800591c <HAL_RCC_OscConfig+0x470>)
 80057f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fa:	f003 0302 	and.w	r3, r3, #2
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d0ee      	beq.n	80057e0 <HAL_RCC_OscConfig+0x334>
 8005802:	e014      	b.n	800582e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005804:	f7fc ff36 	bl	8002674 <HAL_GetTick>
 8005808:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800580a:	e00a      	b.n	8005822 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800580c:	f7fc ff32 	bl	8002674 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	f241 3288 	movw	r2, #5000	; 0x1388
 800581a:	4293      	cmp	r3, r2
 800581c:	d901      	bls.n	8005822 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800581e:	2303      	movs	r3, #3
 8005820:	e0b5      	b.n	800598e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005822:	4b3e      	ldr	r3, [pc, #248]	; (800591c <HAL_RCC_OscConfig+0x470>)
 8005824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005826:	f003 0302 	and.w	r3, r3, #2
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1ee      	bne.n	800580c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800582e:	7dfb      	ldrb	r3, [r7, #23]
 8005830:	2b01      	cmp	r3, #1
 8005832:	d105      	bne.n	8005840 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005834:	4b39      	ldr	r3, [pc, #228]	; (800591c <HAL_RCC_OscConfig+0x470>)
 8005836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005838:	4a38      	ldr	r2, [pc, #224]	; (800591c <HAL_RCC_OscConfig+0x470>)
 800583a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800583e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	2b00      	cmp	r3, #0
 8005846:	f000 80a1 	beq.w	800598c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800584a:	4b34      	ldr	r3, [pc, #208]	; (800591c <HAL_RCC_OscConfig+0x470>)
 800584c:	689b      	ldr	r3, [r3, #8]
 800584e:	f003 030c 	and.w	r3, r3, #12
 8005852:	2b08      	cmp	r3, #8
 8005854:	d05c      	beq.n	8005910 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	699b      	ldr	r3, [r3, #24]
 800585a:	2b02      	cmp	r3, #2
 800585c:	d141      	bne.n	80058e2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800585e:	4b31      	ldr	r3, [pc, #196]	; (8005924 <HAL_RCC_OscConfig+0x478>)
 8005860:	2200      	movs	r2, #0
 8005862:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005864:	f7fc ff06 	bl	8002674 <HAL_GetTick>
 8005868:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800586a:	e008      	b.n	800587e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800586c:	f7fc ff02 	bl	8002674 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	2b02      	cmp	r3, #2
 8005878:	d901      	bls.n	800587e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800587a:	2303      	movs	r3, #3
 800587c:	e087      	b.n	800598e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800587e:	4b27      	ldr	r3, [pc, #156]	; (800591c <HAL_RCC_OscConfig+0x470>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d1f0      	bne.n	800586c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	69da      	ldr	r2, [r3, #28]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
 8005892:	431a      	orrs	r2, r3
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	019b      	lsls	r3, r3, #6
 800589a:	431a      	orrs	r2, r3
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a0:	085b      	lsrs	r3, r3, #1
 80058a2:	3b01      	subs	r3, #1
 80058a4:	041b      	lsls	r3, r3, #16
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ac:	061b      	lsls	r3, r3, #24
 80058ae:	491b      	ldr	r1, [pc, #108]	; (800591c <HAL_RCC_OscConfig+0x470>)
 80058b0:	4313      	orrs	r3, r2
 80058b2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058b4:	4b1b      	ldr	r3, [pc, #108]	; (8005924 <HAL_RCC_OscConfig+0x478>)
 80058b6:	2201      	movs	r2, #1
 80058b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ba:	f7fc fedb 	bl	8002674 <HAL_GetTick>
 80058be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058c0:	e008      	b.n	80058d4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058c2:	f7fc fed7 	bl	8002674 <HAL_GetTick>
 80058c6:	4602      	mov	r2, r0
 80058c8:	693b      	ldr	r3, [r7, #16]
 80058ca:	1ad3      	subs	r3, r2, r3
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d901      	bls.n	80058d4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058d0:	2303      	movs	r3, #3
 80058d2:	e05c      	b.n	800598e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058d4:	4b11      	ldr	r3, [pc, #68]	; (800591c <HAL_RCC_OscConfig+0x470>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d0f0      	beq.n	80058c2 <HAL_RCC_OscConfig+0x416>
 80058e0:	e054      	b.n	800598c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e2:	4b10      	ldr	r3, [pc, #64]	; (8005924 <HAL_RCC_OscConfig+0x478>)
 80058e4:	2200      	movs	r2, #0
 80058e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e8:	f7fc fec4 	bl	8002674 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058f0:	f7fc fec0 	bl	8002674 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b02      	cmp	r3, #2
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e045      	b.n	800598e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005902:	4b06      	ldr	r3, [pc, #24]	; (800591c <HAL_RCC_OscConfig+0x470>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d1f0      	bne.n	80058f0 <HAL_RCC_OscConfig+0x444>
 800590e:	e03d      	b.n	800598c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	2b01      	cmp	r3, #1
 8005916:	d107      	bne.n	8005928 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e038      	b.n	800598e <HAL_RCC_OscConfig+0x4e2>
 800591c:	40023800 	.word	0x40023800
 8005920:	40007000 	.word	0x40007000
 8005924:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005928:	4b1b      	ldr	r3, [pc, #108]	; (8005998 <HAL_RCC_OscConfig+0x4ec>)
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d028      	beq.n	8005988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005940:	429a      	cmp	r2, r3
 8005942:	d121      	bne.n	8005988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800594e:	429a      	cmp	r2, r3
 8005950:	d11a      	bne.n	8005988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005958:	4013      	ands	r3, r2
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800595e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005960:	4293      	cmp	r3, r2
 8005962:	d111      	bne.n	8005988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800596e:	085b      	lsrs	r3, r3, #1
 8005970:	3b01      	subs	r3, #1
 8005972:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005974:	429a      	cmp	r2, r3
 8005976:	d107      	bne.n	8005988 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005982:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005984:	429a      	cmp	r2, r3
 8005986:	d001      	beq.n	800598c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e000      	b.n	800598e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	40023800 	.word	0x40023800

0800599c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e0cc      	b.n	8005b4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059b0:	4b68      	ldr	r3, [pc, #416]	; (8005b54 <HAL_RCC_ClockConfig+0x1b8>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0307 	and.w	r3, r3, #7
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	d90c      	bls.n	80059d8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059be:	4b65      	ldr	r3, [pc, #404]	; (8005b54 <HAL_RCC_ClockConfig+0x1b8>)
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	b2d2      	uxtb	r2, r2
 80059c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059c6:	4b63      	ldr	r3, [pc, #396]	; (8005b54 <HAL_RCC_ClockConfig+0x1b8>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0307 	and.w	r3, r3, #7
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d001      	beq.n	80059d8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059d4:	2301      	movs	r3, #1
 80059d6:	e0b8      	b.n	8005b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0302 	and.w	r3, r3, #2
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d020      	beq.n	8005a26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d005      	beq.n	80059fc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059f0:	4b59      	ldr	r3, [pc, #356]	; (8005b58 <HAL_RCC_ClockConfig+0x1bc>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	4a58      	ldr	r2, [pc, #352]	; (8005b58 <HAL_RCC_ClockConfig+0x1bc>)
 80059f6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059fa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f003 0308 	and.w	r3, r3, #8
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d005      	beq.n	8005a14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a08:	4b53      	ldr	r3, [pc, #332]	; (8005b58 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0a:	689b      	ldr	r3, [r3, #8]
 8005a0c:	4a52      	ldr	r2, [pc, #328]	; (8005b58 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a14:	4b50      	ldr	r3, [pc, #320]	; (8005b58 <HAL_RCC_ClockConfig+0x1bc>)
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	494d      	ldr	r1, [pc, #308]	; (8005b58 <HAL_RCC_ClockConfig+0x1bc>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d044      	beq.n	8005abc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	685b      	ldr	r3, [r3, #4]
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d107      	bne.n	8005a4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a3a:	4b47      	ldr	r3, [pc, #284]	; (8005b58 <HAL_RCC_ClockConfig+0x1bc>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d119      	bne.n	8005a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e07f      	b.n	8005b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	685b      	ldr	r3, [r3, #4]
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d003      	beq.n	8005a5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	d107      	bne.n	8005a6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a5a:	4b3f      	ldr	r3, [pc, #252]	; (8005b58 <HAL_RCC_ClockConfig+0x1bc>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d109      	bne.n	8005a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e06f      	b.n	8005b4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a6a:	4b3b      	ldr	r3, [pc, #236]	; (8005b58 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f003 0302 	and.w	r3, r3, #2
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d101      	bne.n	8005a7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a76:	2301      	movs	r3, #1
 8005a78:	e067      	b.n	8005b4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a7a:	4b37      	ldr	r3, [pc, #220]	; (8005b58 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7c:	689b      	ldr	r3, [r3, #8]
 8005a7e:	f023 0203 	bic.w	r2, r3, #3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	4934      	ldr	r1, [pc, #208]	; (8005b58 <HAL_RCC_ClockConfig+0x1bc>)
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a8c:	f7fc fdf2 	bl	8002674 <HAL_GetTick>
 8005a90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a92:	e00a      	b.n	8005aaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a94:	f7fc fdee 	bl	8002674 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d901      	bls.n	8005aaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005aa6:	2303      	movs	r3, #3
 8005aa8:	e04f      	b.n	8005b4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aaa:	4b2b      	ldr	r3, [pc, #172]	; (8005b58 <HAL_RCC_ClockConfig+0x1bc>)
 8005aac:	689b      	ldr	r3, [r3, #8]
 8005aae:	f003 020c 	and.w	r2, r3, #12
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	d1eb      	bne.n	8005a94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005abc:	4b25      	ldr	r3, [pc, #148]	; (8005b54 <HAL_RCC_ClockConfig+0x1b8>)
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0307 	and.w	r3, r3, #7
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d20c      	bcs.n	8005ae4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005aca:	4b22      	ldr	r3, [pc, #136]	; (8005b54 <HAL_RCC_ClockConfig+0x1b8>)
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	b2d2      	uxtb	r2, r2
 8005ad0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad2:	4b20      	ldr	r3, [pc, #128]	; (8005b54 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f003 0307 	and.w	r3, r3, #7
 8005ada:	683a      	ldr	r2, [r7, #0]
 8005adc:	429a      	cmp	r2, r3
 8005ade:	d001      	beq.n	8005ae4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e032      	b.n	8005b4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f003 0304 	and.w	r3, r3, #4
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d008      	beq.n	8005b02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005af0:	4b19      	ldr	r3, [pc, #100]	; (8005b58 <HAL_RCC_ClockConfig+0x1bc>)
 8005af2:	689b      	ldr	r3, [r3, #8]
 8005af4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	4916      	ldr	r1, [pc, #88]	; (8005b58 <HAL_RCC_ClockConfig+0x1bc>)
 8005afe:	4313      	orrs	r3, r2
 8005b00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0308 	and.w	r3, r3, #8
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d009      	beq.n	8005b22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b0e:	4b12      	ldr	r3, [pc, #72]	; (8005b58 <HAL_RCC_ClockConfig+0x1bc>)
 8005b10:	689b      	ldr	r3, [r3, #8]
 8005b12:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	00db      	lsls	r3, r3, #3
 8005b1c:	490e      	ldr	r1, [pc, #56]	; (8005b58 <HAL_RCC_ClockConfig+0x1bc>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b22:	f000 f821 	bl	8005b68 <HAL_RCC_GetSysClockFreq>
 8005b26:	4602      	mov	r2, r0
 8005b28:	4b0b      	ldr	r3, [pc, #44]	; (8005b58 <HAL_RCC_ClockConfig+0x1bc>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	091b      	lsrs	r3, r3, #4
 8005b2e:	f003 030f 	and.w	r3, r3, #15
 8005b32:	490a      	ldr	r1, [pc, #40]	; (8005b5c <HAL_RCC_ClockConfig+0x1c0>)
 8005b34:	5ccb      	ldrb	r3, [r1, r3]
 8005b36:	fa22 f303 	lsr.w	r3, r2, r3
 8005b3a:	4a09      	ldr	r2, [pc, #36]	; (8005b60 <HAL_RCC_ClockConfig+0x1c4>)
 8005b3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b3e:	4b09      	ldr	r3, [pc, #36]	; (8005b64 <HAL_RCC_ClockConfig+0x1c8>)
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4618      	mov	r0, r3
 8005b44:	f7fc fd52 	bl	80025ec <HAL_InitTick>

  return HAL_OK;
 8005b48:	2300      	movs	r3, #0
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3710      	adds	r7, #16
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	40023c00 	.word	0x40023c00
 8005b58:	40023800 	.word	0x40023800
 8005b5c:	0800f580 	.word	0x0800f580
 8005b60:	20000028 	.word	0x20000028
 8005b64:	2000002c 	.word	0x2000002c

08005b68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b6c:	b090      	sub	sp, #64	; 0x40
 8005b6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	637b      	str	r3, [r7, #52]	; 0x34
 8005b74:	2300      	movs	r3, #0
 8005b76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b78:	2300      	movs	r3, #0
 8005b7a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b80:	4b59      	ldr	r3, [pc, #356]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	f003 030c 	and.w	r3, r3, #12
 8005b88:	2b08      	cmp	r3, #8
 8005b8a:	d00d      	beq.n	8005ba8 <HAL_RCC_GetSysClockFreq+0x40>
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	f200 80a1 	bhi.w	8005cd4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <HAL_RCC_GetSysClockFreq+0x34>
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d003      	beq.n	8005ba2 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b9a:	e09b      	b.n	8005cd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005b9c:	4b53      	ldr	r3, [pc, #332]	; (8005cec <HAL_RCC_GetSysClockFreq+0x184>)
 8005b9e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005ba0:	e09b      	b.n	8005cda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ba2:	4b53      	ldr	r3, [pc, #332]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005ba4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005ba6:	e098      	b.n	8005cda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005ba8:	4b4f      	ldr	r3, [pc, #316]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bb0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bb2:	4b4d      	ldr	r3, [pc, #308]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d028      	beq.n	8005c10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bbe:	4b4a      	ldr	r3, [pc, #296]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	099b      	lsrs	r3, r3, #6
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	623b      	str	r3, [r7, #32]
 8005bc8:	627a      	str	r2, [r7, #36]	; 0x24
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005bd0:	2100      	movs	r1, #0
 8005bd2:	4b47      	ldr	r3, [pc, #284]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005bd4:	fb03 f201 	mul.w	r2, r3, r1
 8005bd8:	2300      	movs	r3, #0
 8005bda:	fb00 f303 	mul.w	r3, r0, r3
 8005bde:	4413      	add	r3, r2
 8005be0:	4a43      	ldr	r2, [pc, #268]	; (8005cf0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005be2:	fba0 1202 	umull	r1, r2, r0, r2
 8005be6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005be8:	460a      	mov	r2, r1
 8005bea:	62ba      	str	r2, [r7, #40]	; 0x28
 8005bec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bee:	4413      	add	r3, r2
 8005bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	61bb      	str	r3, [r7, #24]
 8005bf8:	61fa      	str	r2, [r7, #28]
 8005bfa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bfe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005c02:	f7fb f849 	bl	8000c98 <__aeabi_uldivmod>
 8005c06:	4602      	mov	r2, r0
 8005c08:	460b      	mov	r3, r1
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c0e:	e053      	b.n	8005cb8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c10:	4b35      	ldr	r3, [pc, #212]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c12:	685b      	ldr	r3, [r3, #4]
 8005c14:	099b      	lsrs	r3, r3, #6
 8005c16:	2200      	movs	r2, #0
 8005c18:	613b      	str	r3, [r7, #16]
 8005c1a:	617a      	str	r2, [r7, #20]
 8005c1c:	693b      	ldr	r3, [r7, #16]
 8005c1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005c22:	f04f 0b00 	mov.w	fp, #0
 8005c26:	4652      	mov	r2, sl
 8005c28:	465b      	mov	r3, fp
 8005c2a:	f04f 0000 	mov.w	r0, #0
 8005c2e:	f04f 0100 	mov.w	r1, #0
 8005c32:	0159      	lsls	r1, r3, #5
 8005c34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c38:	0150      	lsls	r0, r2, #5
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	ebb2 080a 	subs.w	r8, r2, sl
 8005c42:	eb63 090b 	sbc.w	r9, r3, fp
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	f04f 0300 	mov.w	r3, #0
 8005c4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005c52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005c56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005c5a:	ebb2 0408 	subs.w	r4, r2, r8
 8005c5e:	eb63 0509 	sbc.w	r5, r3, r9
 8005c62:	f04f 0200 	mov.w	r2, #0
 8005c66:	f04f 0300 	mov.w	r3, #0
 8005c6a:	00eb      	lsls	r3, r5, #3
 8005c6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c70:	00e2      	lsls	r2, r4, #3
 8005c72:	4614      	mov	r4, r2
 8005c74:	461d      	mov	r5, r3
 8005c76:	eb14 030a 	adds.w	r3, r4, sl
 8005c7a:	603b      	str	r3, [r7, #0]
 8005c7c:	eb45 030b 	adc.w	r3, r5, fp
 8005c80:	607b      	str	r3, [r7, #4]
 8005c82:	f04f 0200 	mov.w	r2, #0
 8005c86:	f04f 0300 	mov.w	r3, #0
 8005c8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c8e:	4629      	mov	r1, r5
 8005c90:	028b      	lsls	r3, r1, #10
 8005c92:	4621      	mov	r1, r4
 8005c94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c98:	4621      	mov	r1, r4
 8005c9a:	028a      	lsls	r2, r1, #10
 8005c9c:	4610      	mov	r0, r2
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	60bb      	str	r3, [r7, #8]
 8005ca6:	60fa      	str	r2, [r7, #12]
 8005ca8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005cac:	f7fa fff4 	bl	8000c98 <__aeabi_uldivmod>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005cb8:	4b0b      	ldr	r3, [pc, #44]	; (8005ce8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	0c1b      	lsrs	r3, r3, #16
 8005cbe:	f003 0303 	and.w	r3, r3, #3
 8005cc2:	3301      	adds	r3, #1
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005cc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cd0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005cd2:	e002      	b.n	8005cda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005cd4:	4b05      	ldr	r3, [pc, #20]	; (8005cec <HAL_RCC_GetSysClockFreq+0x184>)
 8005cd6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005cd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3740      	adds	r7, #64	; 0x40
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ce6:	bf00      	nop
 8005ce8:	40023800 	.word	0x40023800
 8005cec:	00f42400 	.word	0x00f42400
 8005cf0:	017d7840 	.word	0x017d7840

08005cf4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cf8:	4b03      	ldr	r3, [pc, #12]	; (8005d08 <HAL_RCC_GetHCLKFreq+0x14>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	20000028 	.word	0x20000028

08005d0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d10:	f7ff fff0 	bl	8005cf4 <HAL_RCC_GetHCLKFreq>
 8005d14:	4602      	mov	r2, r0
 8005d16:	4b05      	ldr	r3, [pc, #20]	; (8005d2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	0a9b      	lsrs	r3, r3, #10
 8005d1c:	f003 0307 	and.w	r3, r3, #7
 8005d20:	4903      	ldr	r1, [pc, #12]	; (8005d30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005d22:	5ccb      	ldrb	r3, [r1, r3]
 8005d24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	40023800 	.word	0x40023800
 8005d30:	0800f590 	.word	0x0800f590

08005d34 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b082      	sub	sp, #8
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e041      	b.n	8005dca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fc fb82 	bl	8002464 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	2202      	movs	r2, #2
 8005d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	3304      	adds	r3, #4
 8005d70:	4619      	mov	r1, r3
 8005d72:	4610      	mov	r0, r2
 8005d74:	f000 fc54 	bl	8006620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2201      	movs	r2, #1
 8005d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2201      	movs	r2, #1
 8005da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2201      	movs	r2, #1
 8005dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dc8:	2300      	movs	r3, #0
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3708      	adds	r7, #8
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005dd4:	b480      	push	{r7}
 8005dd6:	b085      	sub	sp, #20
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d001      	beq.n	8005dec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e044      	b.n	8005e76 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2202      	movs	r2, #2
 8005df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68da      	ldr	r2, [r3, #12]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f042 0201 	orr.w	r2, r2, #1
 8005e02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a1e      	ldr	r2, [pc, #120]	; (8005e84 <HAL_TIM_Base_Start_IT+0xb0>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d018      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0x6c>
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e16:	d013      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0x6c>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a1a      	ldr	r2, [pc, #104]	; (8005e88 <HAL_TIM_Base_Start_IT+0xb4>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d00e      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0x6c>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a19      	ldr	r2, [pc, #100]	; (8005e8c <HAL_TIM_Base_Start_IT+0xb8>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d009      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0x6c>
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a17      	ldr	r2, [pc, #92]	; (8005e90 <HAL_TIM_Base_Start_IT+0xbc>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d004      	beq.n	8005e40 <HAL_TIM_Base_Start_IT+0x6c>
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a16      	ldr	r2, [pc, #88]	; (8005e94 <HAL_TIM_Base_Start_IT+0xc0>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d111      	bne.n	8005e64 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2b06      	cmp	r3, #6
 8005e50:	d010      	beq.n	8005e74 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 0201 	orr.w	r2, r2, #1
 8005e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e62:	e007      	b.n	8005e74 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40010000 	.word	0x40010000
 8005e88:	40000400 	.word	0x40000400
 8005e8c:	40000800 	.word	0x40000800
 8005e90:	40000c00 	.word	0x40000c00
 8005e94:	40014000 	.word	0x40014000

08005e98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d101      	bne.n	8005eaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e041      	b.n	8005f2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d106      	bne.n	8005ec4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f839 	bl	8005f36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681a      	ldr	r2, [r3, #0]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	3304      	adds	r3, #4
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	4610      	mov	r0, r2
 8005ed8:	f000 fba2 	bl	8006620 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2201      	movs	r2, #1
 8005f08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2201      	movs	r2, #1
 8005f10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f2c:	2300      	movs	r3, #0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	3708      	adds	r7, #8
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}

08005f36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005f36:	b480      	push	{r7}
 8005f38:	b083      	sub	sp, #12
 8005f3a:	af00      	add	r7, sp, #0
 8005f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005f3e:	bf00      	nop
 8005f40:	370c      	adds	r7, #12
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
	...

08005f4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005f4c:	b580      	push	{r7, lr}
 8005f4e:	b084      	sub	sp, #16
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d109      	bne.n	8005f70 <HAL_TIM_PWM_Start+0x24>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b01      	cmp	r3, #1
 8005f66:	bf14      	ite	ne
 8005f68:	2301      	movne	r3, #1
 8005f6a:	2300      	moveq	r3, #0
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	e022      	b.n	8005fb6 <HAL_TIM_PWM_Start+0x6a>
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	2b04      	cmp	r3, #4
 8005f74:	d109      	bne.n	8005f8a <HAL_TIM_PWM_Start+0x3e>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b01      	cmp	r3, #1
 8005f80:	bf14      	ite	ne
 8005f82:	2301      	movne	r3, #1
 8005f84:	2300      	moveq	r3, #0
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	e015      	b.n	8005fb6 <HAL_TIM_PWM_Start+0x6a>
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	2b08      	cmp	r3, #8
 8005f8e:	d109      	bne.n	8005fa4 <HAL_TIM_PWM_Start+0x58>
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	bf14      	ite	ne
 8005f9c:	2301      	movne	r3, #1
 8005f9e:	2300      	moveq	r3, #0
 8005fa0:	b2db      	uxtb	r3, r3
 8005fa2:	e008      	b.n	8005fb6 <HAL_TIM_PWM_Start+0x6a>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	bf14      	ite	ne
 8005fb0:	2301      	movne	r3, #1
 8005fb2:	2300      	moveq	r3, #0
 8005fb4:	b2db      	uxtb	r3, r3
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d001      	beq.n	8005fbe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e068      	b.n	8006090 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d104      	bne.n	8005fce <HAL_TIM_PWM_Start+0x82>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fcc:	e013      	b.n	8005ff6 <HAL_TIM_PWM_Start+0xaa>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b04      	cmp	r3, #4
 8005fd2:	d104      	bne.n	8005fde <HAL_TIM_PWM_Start+0x92>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2202      	movs	r2, #2
 8005fd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005fdc:	e00b      	b.n	8005ff6 <HAL_TIM_PWM_Start+0xaa>
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d104      	bne.n	8005fee <HAL_TIM_PWM_Start+0xa2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2202      	movs	r2, #2
 8005fe8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005fec:	e003      	b.n	8005ff6 <HAL_TIM_PWM_Start+0xaa>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	2202      	movs	r2, #2
 8005ff2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	4618      	mov	r0, r3
 8006000:	f000 fdb4 	bl	8006b6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a23      	ldr	r2, [pc, #140]	; (8006098 <HAL_TIM_PWM_Start+0x14c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d107      	bne.n	800601e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800601c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a1d      	ldr	r2, [pc, #116]	; (8006098 <HAL_TIM_PWM_Start+0x14c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d018      	beq.n	800605a <HAL_TIM_PWM_Start+0x10e>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006030:	d013      	beq.n	800605a <HAL_TIM_PWM_Start+0x10e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a19      	ldr	r2, [pc, #100]	; (800609c <HAL_TIM_PWM_Start+0x150>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d00e      	beq.n	800605a <HAL_TIM_PWM_Start+0x10e>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a17      	ldr	r2, [pc, #92]	; (80060a0 <HAL_TIM_PWM_Start+0x154>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d009      	beq.n	800605a <HAL_TIM_PWM_Start+0x10e>
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a16      	ldr	r2, [pc, #88]	; (80060a4 <HAL_TIM_PWM_Start+0x158>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d004      	beq.n	800605a <HAL_TIM_PWM_Start+0x10e>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4a14      	ldr	r2, [pc, #80]	; (80060a8 <HAL_TIM_PWM_Start+0x15c>)
 8006056:	4293      	cmp	r3, r2
 8006058:	d111      	bne.n	800607e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	f003 0307 	and.w	r3, r3, #7
 8006064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2b06      	cmp	r3, #6
 800606a:	d010      	beq.n	800608e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f042 0201 	orr.w	r2, r2, #1
 800607a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800607c:	e007      	b.n	800608e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f042 0201 	orr.w	r2, r2, #1
 800608c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3710      	adds	r7, #16
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	40010000 	.word	0x40010000
 800609c:	40000400 	.word	0x40000400
 80060a0:	40000800 	.word	0x40000800
 80060a4:	40000c00 	.word	0x40000c00
 80060a8:	40014000 	.word	0x40014000

080060ac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f003 0302 	and.w	r3, r3, #2
 80060be:	2b02      	cmp	r3, #2
 80060c0:	d122      	bne.n	8006108 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d11b      	bne.n	8006108 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f06f 0202 	mvn.w	r2, #2
 80060d8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f003 0303 	and.w	r3, r3, #3
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d003      	beq.n	80060f6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 fa77 	bl	80065e2 <HAL_TIM_IC_CaptureCallback>
 80060f4:	e005      	b.n	8006102 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 fa69 	bl	80065ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fa7a 	bl	80065f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	691b      	ldr	r3, [r3, #16]
 800610e:	f003 0304 	and.w	r3, r3, #4
 8006112:	2b04      	cmp	r3, #4
 8006114:	d122      	bne.n	800615c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f003 0304 	and.w	r3, r3, #4
 8006120:	2b04      	cmp	r3, #4
 8006122:	d11b      	bne.n	800615c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f06f 0204 	mvn.w	r2, #4
 800612c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2202      	movs	r2, #2
 8006132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	699b      	ldr	r3, [r3, #24]
 800613a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800613e:	2b00      	cmp	r3, #0
 8006140:	d003      	beq.n	800614a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 fa4d 	bl	80065e2 <HAL_TIM_IC_CaptureCallback>
 8006148:	e005      	b.n	8006156 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 fa3f 	bl	80065ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fa50 	bl	80065f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	f003 0308 	and.w	r3, r3, #8
 8006166:	2b08      	cmp	r3, #8
 8006168:	d122      	bne.n	80061b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	f003 0308 	and.w	r3, r3, #8
 8006174:	2b08      	cmp	r3, #8
 8006176:	d11b      	bne.n	80061b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f06f 0208 	mvn.w	r2, #8
 8006180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2204      	movs	r2, #4
 8006186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	69db      	ldr	r3, [r3, #28]
 800618e:	f003 0303 	and.w	r3, r3, #3
 8006192:	2b00      	cmp	r3, #0
 8006194:	d003      	beq.n	800619e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f000 fa23 	bl	80065e2 <HAL_TIM_IC_CaptureCallback>
 800619c:	e005      	b.n	80061aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fa15 	bl	80065ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061a4:	6878      	ldr	r0, [r7, #4]
 80061a6:	f000 fa26 	bl	80065f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	691b      	ldr	r3, [r3, #16]
 80061b6:	f003 0310 	and.w	r3, r3, #16
 80061ba:	2b10      	cmp	r3, #16
 80061bc:	d122      	bne.n	8006204 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	f003 0310 	and.w	r3, r3, #16
 80061c8:	2b10      	cmp	r3, #16
 80061ca:	d11b      	bne.n	8006204 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f06f 0210 	mvn.w	r2, #16
 80061d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2208      	movs	r2, #8
 80061da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	69db      	ldr	r3, [r3, #28]
 80061e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ea:	6878      	ldr	r0, [r7, #4]
 80061ec:	f000 f9f9 	bl	80065e2 <HAL_TIM_IC_CaptureCallback>
 80061f0:	e005      	b.n	80061fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f9eb 	bl	80065ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f9fc 	bl	80065f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	691b      	ldr	r3, [r3, #16]
 800620a:	f003 0301 	and.w	r3, r3, #1
 800620e:	2b01      	cmp	r3, #1
 8006210:	d10e      	bne.n	8006230 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	f003 0301 	and.w	r3, r3, #1
 800621c:	2b01      	cmp	r3, #1
 800621e:	d107      	bne.n	8006230 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f06f 0201 	mvn.w	r2, #1
 8006228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f7fb fadc 	bl	80017e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	691b      	ldr	r3, [r3, #16]
 8006236:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800623a:	2b80      	cmp	r3, #128	; 0x80
 800623c:	d10e      	bne.n	800625c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	68db      	ldr	r3, [r3, #12]
 8006244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006248:	2b80      	cmp	r3, #128	; 0x80
 800624a:	d107      	bne.n	800625c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006256:	6878      	ldr	r0, [r7, #4]
 8006258:	f000 fcb7 	bl	8006bca <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006266:	2b40      	cmp	r3, #64	; 0x40
 8006268:	d10e      	bne.n	8006288 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006274:	2b40      	cmp	r3, #64	; 0x40
 8006276:	d107      	bne.n	8006288 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006282:	6878      	ldr	r0, [r7, #4]
 8006284:	f000 f9c1 	bl	800660a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	691b      	ldr	r3, [r3, #16]
 800628e:	f003 0320 	and.w	r3, r3, #32
 8006292:	2b20      	cmp	r3, #32
 8006294:	d10e      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f003 0320 	and.w	r3, r3, #32
 80062a0:	2b20      	cmp	r3, #32
 80062a2:	d107      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f06f 0220 	mvn.w	r2, #32
 80062ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fc81 	bl	8006bb6 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80062b4:	bf00      	nop
 80062b6:	3708      	adds	r7, #8
 80062b8:	46bd      	mov	sp, r7
 80062ba:	bd80      	pop	{r7, pc}

080062bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b086      	sub	sp, #24
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80062c8:	2300      	movs	r3, #0
 80062ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d101      	bne.n	80062da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e0ae      	b.n	8006438 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2201      	movs	r2, #1
 80062de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2b0c      	cmp	r3, #12
 80062e6:	f200 809f 	bhi.w	8006428 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062ea:	a201      	add	r2, pc, #4	; (adr r2, 80062f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062f0:	08006325 	.word	0x08006325
 80062f4:	08006429 	.word	0x08006429
 80062f8:	08006429 	.word	0x08006429
 80062fc:	08006429 	.word	0x08006429
 8006300:	08006365 	.word	0x08006365
 8006304:	08006429 	.word	0x08006429
 8006308:	08006429 	.word	0x08006429
 800630c:	08006429 	.word	0x08006429
 8006310:	080063a7 	.word	0x080063a7
 8006314:	08006429 	.word	0x08006429
 8006318:	08006429 	.word	0x08006429
 800631c:	08006429 	.word	0x08006429
 8006320:	080063e7 	.word	0x080063e7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68b9      	ldr	r1, [r7, #8]
 800632a:	4618      	mov	r0, r3
 800632c:	f000 f9f8 	bl	8006720 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	699a      	ldr	r2, [r3, #24]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f042 0208 	orr.w	r2, r2, #8
 800633e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	699a      	ldr	r2, [r3, #24]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f022 0204 	bic.w	r2, r2, #4
 800634e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	6999      	ldr	r1, [r3, #24]
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	691a      	ldr	r2, [r3, #16]
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	619a      	str	r2, [r3, #24]
      break;
 8006362:	e064      	b.n	800642e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	68b9      	ldr	r1, [r7, #8]
 800636a:	4618      	mov	r0, r3
 800636c:	f000 fa3e 	bl	80067ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	699a      	ldr	r2, [r3, #24]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800637e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699a      	ldr	r2, [r3, #24]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800638e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6999      	ldr	r1, [r3, #24]
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	021a      	lsls	r2, r3, #8
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	430a      	orrs	r2, r1
 80063a2:	619a      	str	r2, [r3, #24]
      break;
 80063a4:	e043      	b.n	800642e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68b9      	ldr	r1, [r7, #8]
 80063ac:	4618      	mov	r0, r3
 80063ae:	f000 fa89 	bl	80068c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	69da      	ldr	r2, [r3, #28]
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	f042 0208 	orr.w	r2, r2, #8
 80063c0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	69da      	ldr	r2, [r3, #28]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f022 0204 	bic.w	r2, r2, #4
 80063d0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	69d9      	ldr	r1, [r3, #28]
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	691a      	ldr	r2, [r3, #16]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	430a      	orrs	r2, r1
 80063e2:	61da      	str	r2, [r3, #28]
      break;
 80063e4:	e023      	b.n	800642e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	68b9      	ldr	r1, [r7, #8]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f000 fad3 	bl	8006998 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	69da      	ldr	r2, [r3, #28]
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006400:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	69da      	ldr	r2, [r3, #28]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006410:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	69d9      	ldr	r1, [r3, #28]
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	691b      	ldr	r3, [r3, #16]
 800641c:	021a      	lsls	r2, r3, #8
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	430a      	orrs	r2, r1
 8006424:	61da      	str	r2, [r3, #28]
      break;
 8006426:	e002      	b.n	800642e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	75fb      	strb	r3, [r7, #23]
      break;
 800642c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2200      	movs	r2, #0
 8006432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006436:	7dfb      	ldrb	r3, [r7, #23]
}
 8006438:	4618      	mov	r0, r3
 800643a:	3718      	adds	r7, #24
 800643c:	46bd      	mov	sp, r7
 800643e:	bd80      	pop	{r7, pc}

08006440 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b084      	sub	sp, #16
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800644a:	2300      	movs	r3, #0
 800644c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006454:	2b01      	cmp	r3, #1
 8006456:	d101      	bne.n	800645c <HAL_TIM_ConfigClockSource+0x1c>
 8006458:	2302      	movs	r3, #2
 800645a:	e0b4      	b.n	80065c6 <HAL_TIM_ConfigClockSource+0x186>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2201      	movs	r2, #1
 8006460:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006474:	68bb      	ldr	r3, [r7, #8]
 8006476:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800647a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800647c:	68bb      	ldr	r3, [r7, #8]
 800647e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006482:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800648c:	683b      	ldr	r3, [r7, #0]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006494:	d03e      	beq.n	8006514 <HAL_TIM_ConfigClockSource+0xd4>
 8006496:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800649a:	f200 8087 	bhi.w	80065ac <HAL_TIM_ConfigClockSource+0x16c>
 800649e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064a2:	f000 8086 	beq.w	80065b2 <HAL_TIM_ConfigClockSource+0x172>
 80064a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064aa:	d87f      	bhi.n	80065ac <HAL_TIM_ConfigClockSource+0x16c>
 80064ac:	2b70      	cmp	r3, #112	; 0x70
 80064ae:	d01a      	beq.n	80064e6 <HAL_TIM_ConfigClockSource+0xa6>
 80064b0:	2b70      	cmp	r3, #112	; 0x70
 80064b2:	d87b      	bhi.n	80065ac <HAL_TIM_ConfigClockSource+0x16c>
 80064b4:	2b60      	cmp	r3, #96	; 0x60
 80064b6:	d050      	beq.n	800655a <HAL_TIM_ConfigClockSource+0x11a>
 80064b8:	2b60      	cmp	r3, #96	; 0x60
 80064ba:	d877      	bhi.n	80065ac <HAL_TIM_ConfigClockSource+0x16c>
 80064bc:	2b50      	cmp	r3, #80	; 0x50
 80064be:	d03c      	beq.n	800653a <HAL_TIM_ConfigClockSource+0xfa>
 80064c0:	2b50      	cmp	r3, #80	; 0x50
 80064c2:	d873      	bhi.n	80065ac <HAL_TIM_ConfigClockSource+0x16c>
 80064c4:	2b40      	cmp	r3, #64	; 0x40
 80064c6:	d058      	beq.n	800657a <HAL_TIM_ConfigClockSource+0x13a>
 80064c8:	2b40      	cmp	r3, #64	; 0x40
 80064ca:	d86f      	bhi.n	80065ac <HAL_TIM_ConfigClockSource+0x16c>
 80064cc:	2b30      	cmp	r3, #48	; 0x30
 80064ce:	d064      	beq.n	800659a <HAL_TIM_ConfigClockSource+0x15a>
 80064d0:	2b30      	cmp	r3, #48	; 0x30
 80064d2:	d86b      	bhi.n	80065ac <HAL_TIM_ConfigClockSource+0x16c>
 80064d4:	2b20      	cmp	r3, #32
 80064d6:	d060      	beq.n	800659a <HAL_TIM_ConfigClockSource+0x15a>
 80064d8:	2b20      	cmp	r3, #32
 80064da:	d867      	bhi.n	80065ac <HAL_TIM_ConfigClockSource+0x16c>
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d05c      	beq.n	800659a <HAL_TIM_ConfigClockSource+0x15a>
 80064e0:	2b10      	cmp	r3, #16
 80064e2:	d05a      	beq.n	800659a <HAL_TIM_ConfigClockSource+0x15a>
 80064e4:	e062      	b.n	80065ac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6818      	ldr	r0, [r3, #0]
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	6899      	ldr	r1, [r3, #8]
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	685a      	ldr	r2, [r3, #4]
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	68db      	ldr	r3, [r3, #12]
 80064f6:	f000 fb19 	bl	8006b2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006508:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	609a      	str	r2, [r3, #8]
      break;
 8006512:	e04f      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6818      	ldr	r0, [r3, #0]
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	6899      	ldr	r1, [r3, #8]
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685a      	ldr	r2, [r3, #4]
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f000 fb02 	bl	8006b2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	689a      	ldr	r2, [r3, #8]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006536:	609a      	str	r2, [r3, #8]
      break;
 8006538:	e03c      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	6818      	ldr	r0, [r3, #0]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	6859      	ldr	r1, [r3, #4]
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	461a      	mov	r2, r3
 8006548:	f000 fa76 	bl	8006a38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	2150      	movs	r1, #80	; 0x50
 8006552:	4618      	mov	r0, r3
 8006554:	f000 facf 	bl	8006af6 <TIM_ITRx_SetConfig>
      break;
 8006558:	e02c      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6818      	ldr	r0, [r3, #0]
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	6859      	ldr	r1, [r3, #4]
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	461a      	mov	r2, r3
 8006568:	f000 fa95 	bl	8006a96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2160      	movs	r1, #96	; 0x60
 8006572:	4618      	mov	r0, r3
 8006574:	f000 fabf 	bl	8006af6 <TIM_ITRx_SetConfig>
      break;
 8006578:	e01c      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6818      	ldr	r0, [r3, #0]
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	6859      	ldr	r1, [r3, #4]
 8006582:	683b      	ldr	r3, [r7, #0]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	461a      	mov	r2, r3
 8006588:	f000 fa56 	bl	8006a38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	2140      	movs	r1, #64	; 0x40
 8006592:	4618      	mov	r0, r3
 8006594:	f000 faaf 	bl	8006af6 <TIM_ITRx_SetConfig>
      break;
 8006598:	e00c      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	683b      	ldr	r3, [r7, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	4619      	mov	r1, r3
 80065a4:	4610      	mov	r0, r2
 80065a6:	f000 faa6 	bl	8006af6 <TIM_ITRx_SetConfig>
      break;
 80065aa:	e003      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80065ac:	2301      	movs	r3, #1
 80065ae:	73fb      	strb	r3, [r7, #15]
      break;
 80065b0:	e000      	b.n	80065b4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80065b2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2201      	movs	r2, #1
 80065b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2200      	movs	r2, #0
 80065c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3710      	adds	r7, #16
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80065d6:	bf00      	nop
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006612:	bf00      	nop
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
	...

08006620 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a34      	ldr	r2, [pc, #208]	; (8006704 <TIM_Base_SetConfig+0xe4>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d00f      	beq.n	8006658 <TIM_Base_SetConfig+0x38>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800663e:	d00b      	beq.n	8006658 <TIM_Base_SetConfig+0x38>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a31      	ldr	r2, [pc, #196]	; (8006708 <TIM_Base_SetConfig+0xe8>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d007      	beq.n	8006658 <TIM_Base_SetConfig+0x38>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a30      	ldr	r2, [pc, #192]	; (800670c <TIM_Base_SetConfig+0xec>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d003      	beq.n	8006658 <TIM_Base_SetConfig+0x38>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a2f      	ldr	r2, [pc, #188]	; (8006710 <TIM_Base_SetConfig+0xf0>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d108      	bne.n	800666a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	68fa      	ldr	r2, [r7, #12]
 8006666:	4313      	orrs	r3, r2
 8006668:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	4a25      	ldr	r2, [pc, #148]	; (8006704 <TIM_Base_SetConfig+0xe4>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d01b      	beq.n	80066aa <TIM_Base_SetConfig+0x8a>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006678:	d017      	beq.n	80066aa <TIM_Base_SetConfig+0x8a>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	4a22      	ldr	r2, [pc, #136]	; (8006708 <TIM_Base_SetConfig+0xe8>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d013      	beq.n	80066aa <TIM_Base_SetConfig+0x8a>
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	4a21      	ldr	r2, [pc, #132]	; (800670c <TIM_Base_SetConfig+0xec>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d00f      	beq.n	80066aa <TIM_Base_SetConfig+0x8a>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	4a20      	ldr	r2, [pc, #128]	; (8006710 <TIM_Base_SetConfig+0xf0>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d00b      	beq.n	80066aa <TIM_Base_SetConfig+0x8a>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	4a1f      	ldr	r2, [pc, #124]	; (8006714 <TIM_Base_SetConfig+0xf4>)
 8006696:	4293      	cmp	r3, r2
 8006698:	d007      	beq.n	80066aa <TIM_Base_SetConfig+0x8a>
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	4a1e      	ldr	r2, [pc, #120]	; (8006718 <TIM_Base_SetConfig+0xf8>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d003      	beq.n	80066aa <TIM_Base_SetConfig+0x8a>
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a1d      	ldr	r2, [pc, #116]	; (800671c <TIM_Base_SetConfig+0xfc>)
 80066a6:	4293      	cmp	r3, r2
 80066a8:	d108      	bne.n	80066bc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	68db      	ldr	r3, [r3, #12]
 80066b6:	68fa      	ldr	r2, [r7, #12]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	4313      	orrs	r3, r2
 80066c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	689a      	ldr	r2, [r3, #8]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	681a      	ldr	r2, [r3, #0]
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	4a08      	ldr	r2, [pc, #32]	; (8006704 <TIM_Base_SetConfig+0xe4>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d103      	bne.n	80066f0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	691a      	ldr	r2, [r3, #16]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2201      	movs	r2, #1
 80066f4:	615a      	str	r2, [r3, #20]
}
 80066f6:	bf00      	nop
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
 8006702:	bf00      	nop
 8006704:	40010000 	.word	0x40010000
 8006708:	40000400 	.word	0x40000400
 800670c:	40000800 	.word	0x40000800
 8006710:	40000c00 	.word	0x40000c00
 8006714:	40014000 	.word	0x40014000
 8006718:	40014400 	.word	0x40014400
 800671c:	40014800 	.word	0x40014800

08006720 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006720:	b480      	push	{r7}
 8006722:	b087      	sub	sp, #28
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6a1b      	ldr	r3, [r3, #32]
 800672e:	f023 0201 	bic.w	r2, r3, #1
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a1b      	ldr	r3, [r3, #32]
 800673a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	699b      	ldr	r3, [r3, #24]
 8006746:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f023 0303 	bic.w	r3, r3, #3
 8006756:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	4313      	orrs	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	f023 0302 	bic.w	r3, r3, #2
 8006768:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	4a1c      	ldr	r2, [pc, #112]	; (80067e8 <TIM_OC1_SetConfig+0xc8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d10c      	bne.n	8006796 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	f023 0308 	bic.w	r3, r3, #8
 8006782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	f023 0304 	bic.w	r3, r3, #4
 8006794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4a13      	ldr	r2, [pc, #76]	; (80067e8 <TIM_OC1_SetConfig+0xc8>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d111      	bne.n	80067c2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80067ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	693a      	ldr	r2, [r7, #16]
 80067b4:	4313      	orrs	r3, r2
 80067b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	699b      	ldr	r3, [r3, #24]
 80067bc:	693a      	ldr	r2, [r7, #16]
 80067be:	4313      	orrs	r3, r2
 80067c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	693a      	ldr	r2, [r7, #16]
 80067c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68fa      	ldr	r2, [r7, #12]
 80067cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	697a      	ldr	r2, [r7, #20]
 80067da:	621a      	str	r2, [r3, #32]
}
 80067dc:	bf00      	nop
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	40010000 	.word	0x40010000

080067ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b087      	sub	sp, #28
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a1b      	ldr	r3, [r3, #32]
 80067fa:	f023 0210 	bic.w	r2, r3, #16
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a1b      	ldr	r3, [r3, #32]
 8006806:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	685b      	ldr	r3, [r3, #4]
 800680c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	699b      	ldr	r3, [r3, #24]
 8006812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800681a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006822:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	021b      	lsls	r3, r3, #8
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	4313      	orrs	r3, r2
 800682e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f023 0320 	bic.w	r3, r3, #32
 8006836:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	689b      	ldr	r3, [r3, #8]
 800683c:	011b      	lsls	r3, r3, #4
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	4313      	orrs	r3, r2
 8006842:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	4a1e      	ldr	r2, [pc, #120]	; (80068c0 <TIM_OC2_SetConfig+0xd4>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d10d      	bne.n	8006868 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006852:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006854:	683b      	ldr	r3, [r7, #0]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	697a      	ldr	r2, [r7, #20]
 800685c:	4313      	orrs	r3, r2
 800685e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006866:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a15      	ldr	r2, [pc, #84]	; (80068c0 <TIM_OC2_SetConfig+0xd4>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d113      	bne.n	8006898 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006876:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800687e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006880:	683b      	ldr	r3, [r7, #0]
 8006882:	695b      	ldr	r3, [r3, #20]
 8006884:	009b      	lsls	r3, r3, #2
 8006886:	693a      	ldr	r2, [r7, #16]
 8006888:	4313      	orrs	r3, r2
 800688a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	693a      	ldr	r2, [r7, #16]
 8006894:	4313      	orrs	r3, r2
 8006896:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	693a      	ldr	r2, [r7, #16]
 800689c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	68fa      	ldr	r2, [r7, #12]
 80068a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	685a      	ldr	r2, [r3, #4]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	621a      	str	r2, [r3, #32]
}
 80068b2:	bf00      	nop
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
 80068be:	bf00      	nop
 80068c0:	40010000 	.word	0x40010000

080068c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0303 	bic.w	r3, r3, #3
 80068fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800690c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	689b      	ldr	r3, [r3, #8]
 8006912:	021b      	lsls	r3, r3, #8
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	4313      	orrs	r3, r2
 8006918:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a1d      	ldr	r2, [pc, #116]	; (8006994 <TIM_OC3_SetConfig+0xd0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d10d      	bne.n	800693e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006922:	697b      	ldr	r3, [r7, #20]
 8006924:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006928:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800692a:	683b      	ldr	r3, [r7, #0]
 800692c:	68db      	ldr	r3, [r3, #12]
 800692e:	021b      	lsls	r3, r3, #8
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800693c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a14      	ldr	r2, [pc, #80]	; (8006994 <TIM_OC3_SetConfig+0xd0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d113      	bne.n	800696e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800694c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	695b      	ldr	r3, [r3, #20]
 800695a:	011b      	lsls	r3, r3, #4
 800695c:	693a      	ldr	r2, [r7, #16]
 800695e:	4313      	orrs	r3, r2
 8006960:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	699b      	ldr	r3, [r3, #24]
 8006966:	011b      	lsls	r3, r3, #4
 8006968:	693a      	ldr	r2, [r7, #16]
 800696a:	4313      	orrs	r3, r2
 800696c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	685a      	ldr	r2, [r3, #4]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	621a      	str	r2, [r3, #32]
}
 8006988:	bf00      	nop
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	40010000 	.word	0x40010000

08006998 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006998:	b480      	push	{r7}
 800699a:	b087      	sub	sp, #28
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]
 80069a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6a1b      	ldr	r3, [r3, #32]
 80069a6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a1b      	ldr	r3, [r3, #32]
 80069b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	685b      	ldr	r3, [r3, #4]
 80069b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	69db      	ldr	r3, [r3, #28]
 80069be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4313      	orrs	r3, r2
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80069e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	031b      	lsls	r3, r3, #12
 80069ea:	693a      	ldr	r2, [r7, #16]
 80069ec:	4313      	orrs	r3, r2
 80069ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	4a10      	ldr	r2, [pc, #64]	; (8006a34 <TIM_OC4_SetConfig+0x9c>)
 80069f4:	4293      	cmp	r3, r2
 80069f6:	d109      	bne.n	8006a0c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069f8:	697b      	ldr	r3, [r7, #20]
 80069fa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069fe:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	695b      	ldr	r3, [r3, #20]
 8006a04:	019b      	lsls	r3, r3, #6
 8006a06:	697a      	ldr	r2, [r7, #20]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	697a      	ldr	r2, [r7, #20]
 8006a10:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	685a      	ldr	r2, [r3, #4]
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	621a      	str	r2, [r3, #32]
}
 8006a26:	bf00      	nop
 8006a28:	371c      	adds	r7, #28
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40010000 	.word	0x40010000

08006a38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a38:	b480      	push	{r7}
 8006a3a:	b087      	sub	sp, #28
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	60f8      	str	r0, [r7, #12]
 8006a40:	60b9      	str	r1, [r7, #8]
 8006a42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	6a1b      	ldr	r3, [r3, #32]
 8006a48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6a1b      	ldr	r3, [r3, #32]
 8006a4e:	f023 0201 	bic.w	r2, r3, #1
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	f023 030a 	bic.w	r3, r3, #10
 8006a74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a76:	697a      	ldr	r2, [r7, #20]
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	697a      	ldr	r2, [r7, #20]
 8006a88:	621a      	str	r2, [r3, #32]
}
 8006a8a:	bf00      	nop
 8006a8c:	371c      	adds	r7, #28
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr

08006a96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a96:	b480      	push	{r7}
 8006a98:	b087      	sub	sp, #28
 8006a9a:	af00      	add	r7, sp, #0
 8006a9c:	60f8      	str	r0, [r7, #12]
 8006a9e:	60b9      	str	r1, [r7, #8]
 8006aa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	f023 0210 	bic.w	r2, r3, #16
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	699b      	ldr	r3, [r3, #24]
 8006ab2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	6a1b      	ldr	r3, [r3, #32]
 8006ab8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ac0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	031b      	lsls	r3, r3, #12
 8006ac6:	697a      	ldr	r2, [r7, #20]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ad2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	011b      	lsls	r3, r3, #4
 8006ad8:	693a      	ldr	r2, [r7, #16]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	697a      	ldr	r2, [r7, #20]
 8006ae2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	621a      	str	r2, [r3, #32]
}
 8006aea:	bf00      	nop
 8006aec:	371c      	adds	r7, #28
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr

08006af6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006af6:	b480      	push	{r7}
 8006af8:	b085      	sub	sp, #20
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
 8006afe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b0e:	683a      	ldr	r2, [r7, #0]
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	f043 0307 	orr.w	r3, r3, #7
 8006b18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	609a      	str	r2, [r3, #8]
}
 8006b20:	bf00      	nop
 8006b22:	3714      	adds	r7, #20
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b087      	sub	sp, #28
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b40:	697b      	ldr	r3, [r7, #20]
 8006b42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	021a      	lsls	r2, r3, #8
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	697a      	ldr	r2, [r7, #20]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	697a      	ldr	r2, [r7, #20]
 8006b5e:	609a      	str	r2, [r3, #8]
}
 8006b60:	bf00      	nop
 8006b62:	371c      	adds	r7, #28
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b087      	sub	sp, #28
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	60f8      	str	r0, [r7, #12]
 8006b74:	60b9      	str	r1, [r7, #8]
 8006b76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	f003 031f 	and.w	r3, r3, #31
 8006b7e:	2201      	movs	r2, #1
 8006b80:	fa02 f303 	lsl.w	r3, r2, r3
 8006b84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a1a      	ldr	r2, [r3, #32]
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	43db      	mvns	r3, r3
 8006b8e:	401a      	ands	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	6a1a      	ldr	r2, [r3, #32]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	f003 031f 	and.w	r3, r3, #31
 8006b9e:	6879      	ldr	r1, [r7, #4]
 8006ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	621a      	str	r2, [r3, #32]
}
 8006baa:	bf00      	nop
 8006bac:	371c      	adds	r7, #28
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr

08006bb6 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bb6:	b480      	push	{r7}
 8006bb8:	b083      	sub	sp, #12
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bbe:	bf00      	nop
 8006bc0:	370c      	adds	r7, #12
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr

08006bca <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bca:	b480      	push	{r7}
 8006bcc:	b083      	sub	sp, #12
 8006bce:	af00      	add	r7, sp, #0
 8006bd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bd2:	bf00      	nop
 8006bd4:	370c      	adds	r7, #12
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr

08006bde <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bde:	b084      	sub	sp, #16
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b084      	sub	sp, #16
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	f107 001c 	add.w	r0, r7, #28
 8006bec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bf2:	2b01      	cmp	r3, #1
 8006bf4:	d122      	bne.n	8006c3c <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	68db      	ldr	r3, [r3, #12]
 8006c16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c20:	2b01      	cmp	r3, #1
 8006c22:	d105      	bne.n	8006c30 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	68db      	ldr	r3, [r3, #12]
 8006c28:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f001 fbed 	bl	8008410 <USB_CoreReset>
 8006c36:	4603      	mov	r3, r0
 8006c38:	73fb      	strb	r3, [r7, #15]
 8006c3a:	e01a      	b.n	8006c72 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	68db      	ldr	r3, [r3, #12]
 8006c40:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f001 fbe1 	bl	8008410 <USB_CoreReset>
 8006c4e:	4603      	mov	r3, r0
 8006c50:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d106      	bne.n	8006c66 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	639a      	str	r2, [r3, #56]	; 0x38
 8006c64:	e005      	b.n	8006c72 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d10b      	bne.n	8006c90 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	689b      	ldr	r3, [r3, #8]
 8006c7c:	f043 0206 	orr.w	r2, r3, #6
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f043 0220 	orr.w	r2, r3, #32
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c9c:	b004      	add	sp, #16
 8006c9e:	4770      	bx	lr

08006ca0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b087      	sub	sp, #28
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	60f8      	str	r0, [r7, #12]
 8006ca8:	60b9      	str	r1, [r7, #8]
 8006caa:	4613      	mov	r3, r2
 8006cac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006cae:	79fb      	ldrb	r3, [r7, #7]
 8006cb0:	2b02      	cmp	r3, #2
 8006cb2:	d165      	bne.n	8006d80 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	4a41      	ldr	r2, [pc, #260]	; (8006dbc <USB_SetTurnaroundTime+0x11c>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d906      	bls.n	8006cca <USB_SetTurnaroundTime+0x2a>
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4a40      	ldr	r2, [pc, #256]	; (8006dc0 <USB_SetTurnaroundTime+0x120>)
 8006cc0:	4293      	cmp	r3, r2
 8006cc2:	d202      	bcs.n	8006cca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006cc4:	230f      	movs	r3, #15
 8006cc6:	617b      	str	r3, [r7, #20]
 8006cc8:	e062      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006cca:	68bb      	ldr	r3, [r7, #8]
 8006ccc:	4a3c      	ldr	r2, [pc, #240]	; (8006dc0 <USB_SetTurnaroundTime+0x120>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d306      	bcc.n	8006ce0 <USB_SetTurnaroundTime+0x40>
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	4a3b      	ldr	r2, [pc, #236]	; (8006dc4 <USB_SetTurnaroundTime+0x124>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d202      	bcs.n	8006ce0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006cda:	230e      	movs	r3, #14
 8006cdc:	617b      	str	r3, [r7, #20]
 8006cde:	e057      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	4a38      	ldr	r2, [pc, #224]	; (8006dc4 <USB_SetTurnaroundTime+0x124>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d306      	bcc.n	8006cf6 <USB_SetTurnaroundTime+0x56>
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	4a37      	ldr	r2, [pc, #220]	; (8006dc8 <USB_SetTurnaroundTime+0x128>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d202      	bcs.n	8006cf6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006cf0:	230d      	movs	r3, #13
 8006cf2:	617b      	str	r3, [r7, #20]
 8006cf4:	e04c      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	4a33      	ldr	r2, [pc, #204]	; (8006dc8 <USB_SetTurnaroundTime+0x128>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d306      	bcc.n	8006d0c <USB_SetTurnaroundTime+0x6c>
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	4a32      	ldr	r2, [pc, #200]	; (8006dcc <USB_SetTurnaroundTime+0x12c>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d802      	bhi.n	8006d0c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006d06:	230c      	movs	r3, #12
 8006d08:	617b      	str	r3, [r7, #20]
 8006d0a:	e041      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	4a2f      	ldr	r2, [pc, #188]	; (8006dcc <USB_SetTurnaroundTime+0x12c>)
 8006d10:	4293      	cmp	r3, r2
 8006d12:	d906      	bls.n	8006d22 <USB_SetTurnaroundTime+0x82>
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	4a2e      	ldr	r2, [pc, #184]	; (8006dd0 <USB_SetTurnaroundTime+0x130>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d802      	bhi.n	8006d22 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006d1c:	230b      	movs	r3, #11
 8006d1e:	617b      	str	r3, [r7, #20]
 8006d20:	e036      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	4a2a      	ldr	r2, [pc, #168]	; (8006dd0 <USB_SetTurnaroundTime+0x130>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d906      	bls.n	8006d38 <USB_SetTurnaroundTime+0x98>
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	4a29      	ldr	r2, [pc, #164]	; (8006dd4 <USB_SetTurnaroundTime+0x134>)
 8006d2e:	4293      	cmp	r3, r2
 8006d30:	d802      	bhi.n	8006d38 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006d32:	230a      	movs	r3, #10
 8006d34:	617b      	str	r3, [r7, #20]
 8006d36:	e02b      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	4a26      	ldr	r2, [pc, #152]	; (8006dd4 <USB_SetTurnaroundTime+0x134>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d906      	bls.n	8006d4e <USB_SetTurnaroundTime+0xae>
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	4a25      	ldr	r2, [pc, #148]	; (8006dd8 <USB_SetTurnaroundTime+0x138>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d202      	bcs.n	8006d4e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006d48:	2309      	movs	r3, #9
 8006d4a:	617b      	str	r3, [r7, #20]
 8006d4c:	e020      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	4a21      	ldr	r2, [pc, #132]	; (8006dd8 <USB_SetTurnaroundTime+0x138>)
 8006d52:	4293      	cmp	r3, r2
 8006d54:	d306      	bcc.n	8006d64 <USB_SetTurnaroundTime+0xc4>
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	4a20      	ldr	r2, [pc, #128]	; (8006ddc <USB_SetTurnaroundTime+0x13c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d802      	bhi.n	8006d64 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006d5e:	2308      	movs	r3, #8
 8006d60:	617b      	str	r3, [r7, #20]
 8006d62:	e015      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	4a1d      	ldr	r2, [pc, #116]	; (8006ddc <USB_SetTurnaroundTime+0x13c>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d906      	bls.n	8006d7a <USB_SetTurnaroundTime+0xda>
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	4a1c      	ldr	r2, [pc, #112]	; (8006de0 <USB_SetTurnaroundTime+0x140>)
 8006d70:	4293      	cmp	r3, r2
 8006d72:	d202      	bcs.n	8006d7a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006d74:	2307      	movs	r3, #7
 8006d76:	617b      	str	r3, [r7, #20]
 8006d78:	e00a      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006d7a:	2306      	movs	r3, #6
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	e007      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006d80:	79fb      	ldrb	r3, [r7, #7]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d102      	bne.n	8006d8c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006d86:	2309      	movs	r3, #9
 8006d88:	617b      	str	r3, [r7, #20]
 8006d8a:	e001      	b.n	8006d90 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006d8c:	2309      	movs	r3, #9
 8006d8e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	68da      	ldr	r2, [r3, #12]
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	029b      	lsls	r3, r3, #10
 8006da4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006da8:	431a      	orrs	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	371c      	adds	r7, #28
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr
 8006dbc:	00d8acbf 	.word	0x00d8acbf
 8006dc0:	00e4e1c0 	.word	0x00e4e1c0
 8006dc4:	00f42400 	.word	0x00f42400
 8006dc8:	01067380 	.word	0x01067380
 8006dcc:	011a499f 	.word	0x011a499f
 8006dd0:	01312cff 	.word	0x01312cff
 8006dd4:	014ca43f 	.word	0x014ca43f
 8006dd8:	016e3600 	.word	0x016e3600
 8006ddc:	01a6ab1f 	.word	0x01a6ab1f
 8006de0:	01e84800 	.word	0x01e84800

08006de4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b083      	sub	sp, #12
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	689b      	ldr	r3, [r3, #8]
 8006df0:	f043 0201 	orr.w	r2, r3, #1
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	370c      	adds	r7, #12
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b083      	sub	sp, #12
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f023 0201 	bic.w	r2, r3, #1
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006e1a:	2300      	movs	r3, #0
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	370c      	adds	r7, #12
 8006e20:	46bd      	mov	sp, r7
 8006e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e26:	4770      	bx	lr

08006e28 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	460b      	mov	r3, r1
 8006e32:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006e34:	2300      	movs	r3, #0
 8006e36:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006e44:	78fb      	ldrb	r3, [r7, #3]
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d115      	bne.n	8006e76 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e56:	2001      	movs	r0, #1
 8006e58:	f7fb fc18 	bl	800268c <HAL_Delay>
      ms++;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f001 fa45 	bl	80082f2 <USB_GetMode>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d01e      	beq.n	8006eac <USB_SetCurrentMode+0x84>
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b31      	cmp	r3, #49	; 0x31
 8006e72:	d9f0      	bls.n	8006e56 <USB_SetCurrentMode+0x2e>
 8006e74:	e01a      	b.n	8006eac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006e76:	78fb      	ldrb	r3, [r7, #3]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d115      	bne.n	8006ea8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006e88:	2001      	movs	r0, #1
 8006e8a:	f7fb fbff 	bl	800268c <HAL_Delay>
      ms++;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	3301      	adds	r3, #1
 8006e92:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f001 fa2c 	bl	80082f2 <USB_GetMode>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d005      	beq.n	8006eac <USB_SetCurrentMode+0x84>
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2b31      	cmp	r3, #49	; 0x31
 8006ea4:	d9f0      	bls.n	8006e88 <USB_SetCurrentMode+0x60>
 8006ea6:	e001      	b.n	8006eac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	e005      	b.n	8006eb8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2b32      	cmp	r3, #50	; 0x32
 8006eb0:	d101      	bne.n	8006eb6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006eb2:	2301      	movs	r3, #1
 8006eb4:	e000      	b.n	8006eb8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006eb6:	2300      	movs	r3, #0
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ec0:	b084      	sub	sp, #16
 8006ec2:	b580      	push	{r7, lr}
 8006ec4:	b086      	sub	sp, #24
 8006ec6:	af00      	add	r7, sp, #0
 8006ec8:	6078      	str	r0, [r7, #4]
 8006eca:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006eda:	2300      	movs	r3, #0
 8006edc:	613b      	str	r3, [r7, #16]
 8006ede:	e009      	b.n	8006ef4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	3340      	adds	r3, #64	; 0x40
 8006ee6:	009b      	lsls	r3, r3, #2
 8006ee8:	4413      	add	r3, r2
 8006eea:	2200      	movs	r2, #0
 8006eec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	3301      	adds	r3, #1
 8006ef2:	613b      	str	r3, [r7, #16]
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	2b0e      	cmp	r3, #14
 8006ef8:	d9f2      	bls.n	8006ee0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006efa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d11c      	bne.n	8006f3a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	68fa      	ldr	r2, [r7, #12]
 8006f0a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f0e:	f043 0302 	orr.w	r3, r3, #2
 8006f12:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f18:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f24:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f30:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	639a      	str	r2, [r3, #56]	; 0x38
 8006f38:	e00b      	b.n	8006f52 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f4a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f58:	461a      	mov	r2, r3
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f64:	4619      	mov	r1, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6c:	461a      	mov	r2, r3
 8006f6e:	680b      	ldr	r3, [r1, #0]
 8006f70:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d10c      	bne.n	8006f92 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d104      	bne.n	8006f88 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006f7e:	2100      	movs	r1, #0
 8006f80:	6878      	ldr	r0, [r7, #4]
 8006f82:	f000 f965 	bl	8007250 <USB_SetDevSpeed>
 8006f86:	e008      	b.n	8006f9a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006f88:	2101      	movs	r1, #1
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f960 	bl	8007250 <USB_SetDevSpeed>
 8006f90:	e003      	b.n	8006f9a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006f92:	2103      	movs	r1, #3
 8006f94:	6878      	ldr	r0, [r7, #4]
 8006f96:	f000 f95b 	bl	8007250 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f9a:	2110      	movs	r1, #16
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 f8f3 	bl	8007188 <USB_FlushTxFifo>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d001      	beq.n	8006fac <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	f000 f91f 	bl	80071f0 <USB_FlushRxFifo>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d001      	beq.n	8006fbc <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fce:	461a      	mov	r2, r3
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fda:	461a      	mov	r2, r3
 8006fdc:	2300      	movs	r3, #0
 8006fde:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	613b      	str	r3, [r7, #16]
 8006fe4:	e043      	b.n	800706e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	015a      	lsls	r2, r3, #5
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	4413      	add	r3, r2
 8006fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ffc:	d118      	bne.n	8007030 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006ffe:	693b      	ldr	r3, [r7, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d10a      	bne.n	800701a <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	015a      	lsls	r2, r3, #5
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	4413      	add	r3, r2
 800700c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007010:	461a      	mov	r2, r3
 8007012:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007016:	6013      	str	r3, [r2, #0]
 8007018:	e013      	b.n	8007042 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800701a:	693b      	ldr	r3, [r7, #16]
 800701c:	015a      	lsls	r2, r3, #5
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	4413      	add	r3, r2
 8007022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007026:	461a      	mov	r2, r3
 8007028:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	e008      	b.n	8007042 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007030:	693b      	ldr	r3, [r7, #16]
 8007032:	015a      	lsls	r2, r3, #5
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	4413      	add	r3, r2
 8007038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703c:	461a      	mov	r2, r3
 800703e:	2300      	movs	r3, #0
 8007040:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007042:	693b      	ldr	r3, [r7, #16]
 8007044:	015a      	lsls	r2, r3, #5
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	4413      	add	r3, r2
 800704a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800704e:	461a      	mov	r2, r3
 8007050:	2300      	movs	r3, #0
 8007052:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007060:	461a      	mov	r2, r3
 8007062:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007066:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	3301      	adds	r3, #1
 800706c:	613b      	str	r3, [r7, #16]
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	693a      	ldr	r2, [r7, #16]
 8007072:	429a      	cmp	r2, r3
 8007074:	d3b7      	bcc.n	8006fe6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007076:	2300      	movs	r3, #0
 8007078:	613b      	str	r3, [r7, #16]
 800707a:	e043      	b.n	8007104 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	015a      	lsls	r2, r3, #5
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	4413      	add	r3, r2
 8007084:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800708e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007092:	d118      	bne.n	80070c6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10a      	bne.n	80070b0 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800709a:	693b      	ldr	r3, [r7, #16]
 800709c:	015a      	lsls	r2, r3, #5
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	4413      	add	r3, r2
 80070a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070a6:	461a      	mov	r2, r3
 80070a8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80070ac:	6013      	str	r3, [r2, #0]
 80070ae:	e013      	b.n	80070d8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070bc:	461a      	mov	r2, r3
 80070be:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80070c2:	6013      	str	r3, [r2, #0]
 80070c4:	e008      	b.n	80070d8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80070c6:	693b      	ldr	r3, [r7, #16]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070d2:	461a      	mov	r2, r3
 80070d4:	2300      	movs	r3, #0
 80070d6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	015a      	lsls	r2, r3, #5
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	4413      	add	r3, r2
 80070e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070e4:	461a      	mov	r2, r3
 80070e6:	2300      	movs	r3, #0
 80070e8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	015a      	lsls	r2, r3, #5
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	4413      	add	r3, r2
 80070f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070f6:	461a      	mov	r2, r3
 80070f8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80070fc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	3301      	adds	r3, #1
 8007102:	613b      	str	r3, [r7, #16]
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	693a      	ldr	r2, [r7, #16]
 8007108:	429a      	cmp	r2, r3
 800710a:	d3b7      	bcc.n	800707c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800711a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800711e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2200      	movs	r2, #0
 8007124:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800712c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800712e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007130:	2b00      	cmp	r3, #0
 8007132:	d105      	bne.n	8007140 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	699b      	ldr	r3, [r3, #24]
 8007138:	f043 0210 	orr.w	r2, r3, #16
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	699a      	ldr	r2, [r3, #24]
 8007144:	4b0f      	ldr	r3, [pc, #60]	; (8007184 <USB_DevInit+0x2c4>)
 8007146:	4313      	orrs	r3, r2
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800714c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800714e:	2b00      	cmp	r3, #0
 8007150:	d005      	beq.n	800715e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	f043 0208 	orr.w	r2, r3, #8
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800715e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007160:	2b01      	cmp	r3, #1
 8007162:	d107      	bne.n	8007174 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800716c:	f043 0304 	orr.w	r3, r3, #4
 8007170:	687a      	ldr	r2, [r7, #4]
 8007172:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007174:	7dfb      	ldrb	r3, [r7, #23]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3718      	adds	r7, #24
 800717a:	46bd      	mov	sp, r7
 800717c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007180:	b004      	add	sp, #16
 8007182:	4770      	bx	lr
 8007184:	803c3800 	.word	0x803c3800

08007188 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007192:	2300      	movs	r3, #0
 8007194:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	3301      	adds	r3, #1
 800719a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4a13      	ldr	r2, [pc, #76]	; (80071ec <USB_FlushTxFifo+0x64>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d901      	bls.n	80071a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80071a4:	2303      	movs	r3, #3
 80071a6:	e01b      	b.n	80071e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	daf2      	bge.n	8007196 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071b0:	2300      	movs	r3, #0
 80071b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	019b      	lsls	r3, r3, #6
 80071b8:	f043 0220 	orr.w	r2, r3, #32
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	3301      	adds	r3, #1
 80071c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4a08      	ldr	r2, [pc, #32]	; (80071ec <USB_FlushTxFifo+0x64>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d901      	bls.n	80071d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e006      	b.n	80071e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	691b      	ldr	r3, [r3, #16]
 80071d6:	f003 0320 	and.w	r3, r3, #32
 80071da:	2b20      	cmp	r3, #32
 80071dc:	d0f0      	beq.n	80071c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071de:	2300      	movs	r3, #0
}
 80071e0:	4618      	mov	r0, r3
 80071e2:	3714      	adds	r7, #20
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr
 80071ec:	00030d40 	.word	0x00030d40

080071f0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b085      	sub	sp, #20
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071f8:	2300      	movs	r3, #0
 80071fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	3301      	adds	r3, #1
 8007200:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	4a11      	ldr	r2, [pc, #68]	; (800724c <USB_FlushRxFifo+0x5c>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d901      	bls.n	800720e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800720a:	2303      	movs	r3, #3
 800720c:	e018      	b.n	8007240 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	691b      	ldr	r3, [r3, #16]
 8007212:	2b00      	cmp	r3, #0
 8007214:	daf2      	bge.n	80071fc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007216:	2300      	movs	r3, #0
 8007218:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	2210      	movs	r2, #16
 800721e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	3301      	adds	r3, #1
 8007224:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	4a08      	ldr	r2, [pc, #32]	; (800724c <USB_FlushRxFifo+0x5c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d901      	bls.n	8007232 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800722e:	2303      	movs	r3, #3
 8007230:	e006      	b.n	8007240 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	691b      	ldr	r3, [r3, #16]
 8007236:	f003 0310 	and.w	r3, r3, #16
 800723a:	2b10      	cmp	r3, #16
 800723c:	d0f0      	beq.n	8007220 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800723e:	2300      	movs	r3, #0
}
 8007240:	4618      	mov	r0, r3
 8007242:	3714      	adds	r7, #20
 8007244:	46bd      	mov	sp, r7
 8007246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724a:	4770      	bx	lr
 800724c:	00030d40 	.word	0x00030d40

08007250 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007250:	b480      	push	{r7}
 8007252:	b085      	sub	sp, #20
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	78fb      	ldrb	r3, [r7, #3]
 800726a:	68f9      	ldr	r1, [r7, #12]
 800726c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007270:	4313      	orrs	r3, r2
 8007272:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007274:	2300      	movs	r3, #0
}
 8007276:	4618      	mov	r0, r3
 8007278:	3714      	adds	r7, #20
 800727a:	46bd      	mov	sp, r7
 800727c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007280:	4770      	bx	lr

08007282 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8007282:	b480      	push	{r7}
 8007284:	b087      	sub	sp, #28
 8007286:	af00      	add	r7, sp, #0
 8007288:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	f003 0306 	and.w	r3, r3, #6
 800729a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d102      	bne.n	80072a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80072a2:	2300      	movs	r3, #0
 80072a4:	75fb      	strb	r3, [r7, #23]
 80072a6:	e00a      	b.n	80072be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	2b02      	cmp	r3, #2
 80072ac:	d002      	beq.n	80072b4 <USB_GetDevSpeed+0x32>
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2b06      	cmp	r3, #6
 80072b2:	d102      	bne.n	80072ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80072b4:	2302      	movs	r3, #2
 80072b6:	75fb      	strb	r3, [r7, #23]
 80072b8:	e001      	b.n	80072be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80072ba:	230f      	movs	r3, #15
 80072bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80072be:	7dfb      	ldrb	r3, [r7, #23]
}
 80072c0:	4618      	mov	r0, r3
 80072c2:	371c      	adds	r7, #28
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b085      	sub	sp, #20
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	781b      	ldrb	r3, [r3, #0]
 80072de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	785b      	ldrb	r3, [r3, #1]
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d13a      	bne.n	800735e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072ee:	69da      	ldr	r2, [r3, #28]
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	781b      	ldrb	r3, [r3, #0]
 80072f4:	f003 030f 	and.w	r3, r3, #15
 80072f8:	2101      	movs	r1, #1
 80072fa:	fa01 f303 	lsl.w	r3, r1, r3
 80072fe:	b29b      	uxth	r3, r3
 8007300:	68f9      	ldr	r1, [r7, #12]
 8007302:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007306:	4313      	orrs	r3, r2
 8007308:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800730a:	68bb      	ldr	r3, [r7, #8]
 800730c:	015a      	lsls	r2, r3, #5
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	4413      	add	r3, r2
 8007312:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800731c:	2b00      	cmp	r3, #0
 800731e:	d155      	bne.n	80073cc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	015a      	lsls	r2, r3, #5
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	4413      	add	r3, r2
 8007328:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800732c:	681a      	ldr	r2, [r3, #0]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	791b      	ldrb	r3, [r3, #4]
 800733a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800733c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	059b      	lsls	r3, r3, #22
 8007342:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007344:	4313      	orrs	r3, r2
 8007346:	68ba      	ldr	r2, [r7, #8]
 8007348:	0151      	lsls	r1, r2, #5
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	440a      	add	r2, r1
 800734e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007356:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800735a:	6013      	str	r3, [r2, #0]
 800735c:	e036      	b.n	80073cc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007364:	69da      	ldr	r2, [r3, #28]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	f003 030f 	and.w	r3, r3, #15
 800736e:	2101      	movs	r1, #1
 8007370:	fa01 f303 	lsl.w	r3, r1, r3
 8007374:	041b      	lsls	r3, r3, #16
 8007376:	68f9      	ldr	r1, [r7, #12]
 8007378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800737c:	4313      	orrs	r3, r2
 800737e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	4413      	add	r3, r2
 8007388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007392:	2b00      	cmp	r3, #0
 8007394:	d11a      	bne.n	80073cc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	015a      	lsls	r2, r3, #5
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	4413      	add	r3, r2
 800739e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073a2:	681a      	ldr	r2, [r3, #0]
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	791b      	ldrb	r3, [r3, #4]
 80073b0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80073b2:	430b      	orrs	r3, r1
 80073b4:	4313      	orrs	r3, r2
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	0151      	lsls	r1, r2, #5
 80073ba:	68fa      	ldr	r2, [r7, #12]
 80073bc:	440a      	add	r2, r1
 80073be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073ca:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80073cc:	2300      	movs	r3, #0
}
 80073ce:	4618      	mov	r0, r3
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
	...

080073dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	781b      	ldrb	r3, [r3, #0]
 80073ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	785b      	ldrb	r3, [r3, #1]
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d161      	bne.n	80074bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	015a      	lsls	r2, r3, #5
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	4413      	add	r3, r2
 8007400:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800740a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800740e:	d11f      	bne.n	8007450 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007410:	68bb      	ldr	r3, [r7, #8]
 8007412:	015a      	lsls	r2, r3, #5
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4413      	add	r3, r2
 8007418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	68ba      	ldr	r2, [r7, #8]
 8007420:	0151      	lsls	r1, r2, #5
 8007422:	68fa      	ldr	r2, [r7, #12]
 8007424:	440a      	add	r2, r1
 8007426:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800742a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800742e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	015a      	lsls	r2, r3, #5
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	4413      	add	r3, r2
 8007438:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	68ba      	ldr	r2, [r7, #8]
 8007440:	0151      	lsls	r1, r2, #5
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	440a      	add	r2, r1
 8007446:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800744a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800744e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007456:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	f003 030f 	and.w	r3, r3, #15
 8007460:	2101      	movs	r1, #1
 8007462:	fa01 f303 	lsl.w	r3, r1, r3
 8007466:	b29b      	uxth	r3, r3
 8007468:	43db      	mvns	r3, r3
 800746a:	68f9      	ldr	r1, [r7, #12]
 800746c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007470:	4013      	ands	r3, r2
 8007472:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800747a:	69da      	ldr	r2, [r3, #28]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	781b      	ldrb	r3, [r3, #0]
 8007480:	f003 030f 	and.w	r3, r3, #15
 8007484:	2101      	movs	r1, #1
 8007486:	fa01 f303 	lsl.w	r3, r1, r3
 800748a:	b29b      	uxth	r3, r3
 800748c:	43db      	mvns	r3, r3
 800748e:	68f9      	ldr	r1, [r7, #12]
 8007490:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007494:	4013      	ands	r3, r2
 8007496:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074a4:	681a      	ldr	r2, [r3, #0]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	0159      	lsls	r1, r3, #5
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	440b      	add	r3, r1
 80074ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b2:	4619      	mov	r1, r3
 80074b4:	4b35      	ldr	r3, [pc, #212]	; (800758c <USB_DeactivateEndpoint+0x1b0>)
 80074b6:	4013      	ands	r3, r2
 80074b8:	600b      	str	r3, [r1, #0]
 80074ba:	e060      	b.n	800757e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80074bc:	68bb      	ldr	r3, [r7, #8]
 80074be:	015a      	lsls	r2, r3, #5
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	4413      	add	r3, r2
 80074c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074d2:	d11f      	bne.n	8007514 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	015a      	lsls	r2, r3, #5
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	4413      	add	r3, r2
 80074dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	68ba      	ldr	r2, [r7, #8]
 80074e4:	0151      	lsls	r1, r2, #5
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	440a      	add	r2, r1
 80074ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	015a      	lsls	r2, r3, #5
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4413      	add	r3, r2
 80074fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	68ba      	ldr	r2, [r7, #8]
 8007504:	0151      	lsls	r1, r2, #5
 8007506:	68fa      	ldr	r2, [r7, #12]
 8007508:	440a      	add	r2, r1
 800750a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800750e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007512:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800751a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	f003 030f 	and.w	r3, r3, #15
 8007524:	2101      	movs	r1, #1
 8007526:	fa01 f303 	lsl.w	r3, r1, r3
 800752a:	041b      	lsls	r3, r3, #16
 800752c:	43db      	mvns	r3, r3
 800752e:	68f9      	ldr	r1, [r7, #12]
 8007530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007534:	4013      	ands	r3, r2
 8007536:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800753e:	69da      	ldr	r2, [r3, #28]
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	f003 030f 	and.w	r3, r3, #15
 8007548:	2101      	movs	r1, #1
 800754a:	fa01 f303 	lsl.w	r3, r1, r3
 800754e:	041b      	lsls	r3, r3, #16
 8007550:	43db      	mvns	r3, r3
 8007552:	68f9      	ldr	r1, [r7, #12]
 8007554:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007558:	4013      	ands	r3, r2
 800755a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4413      	add	r3, r2
 8007564:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007568:	681a      	ldr	r2, [r3, #0]
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	0159      	lsls	r1, r3, #5
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	440b      	add	r3, r1
 8007572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007576:	4619      	mov	r1, r3
 8007578:	4b05      	ldr	r3, [pc, #20]	; (8007590 <USB_DeactivateEndpoint+0x1b4>)
 800757a:	4013      	ands	r3, r2
 800757c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800757e:	2300      	movs	r3, #0
}
 8007580:	4618      	mov	r0, r3
 8007582:	3714      	adds	r7, #20
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr
 800758c:	ec337800 	.word	0xec337800
 8007590:	eff37800 	.word	0xeff37800

08007594 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b08a      	sub	sp, #40	; 0x28
 8007598:	af02      	add	r7, sp, #8
 800759a:	60f8      	str	r0, [r7, #12]
 800759c:	60b9      	str	r1, [r7, #8]
 800759e:	4613      	mov	r3, r2
 80075a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	785b      	ldrb	r3, [r3, #1]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	f040 815c 	bne.w	800786e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80075b6:	68bb      	ldr	r3, [r7, #8]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d132      	bne.n	8007624 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	015a      	lsls	r2, r3, #5
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	4413      	add	r3, r2
 80075c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ca:	691b      	ldr	r3, [r3, #16]
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	0151      	lsls	r1, r2, #5
 80075d0:	69fa      	ldr	r2, [r7, #28]
 80075d2:	440a      	add	r2, r1
 80075d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80075dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80075e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	015a      	lsls	r2, r3, #5
 80075e6:	69fb      	ldr	r3, [r7, #28]
 80075e8:	4413      	add	r3, r2
 80075ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	69ba      	ldr	r2, [r7, #24]
 80075f2:	0151      	lsls	r1, r2, #5
 80075f4:	69fa      	ldr	r2, [r7, #28]
 80075f6:	440a      	add	r2, r1
 80075f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007600:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	015a      	lsls	r2, r3, #5
 8007606:	69fb      	ldr	r3, [r7, #28]
 8007608:	4413      	add	r3, r2
 800760a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	0151      	lsls	r1, r2, #5
 8007614:	69fa      	ldr	r2, [r7, #28]
 8007616:	440a      	add	r2, r1
 8007618:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800761c:	0cdb      	lsrs	r3, r3, #19
 800761e:	04db      	lsls	r3, r3, #19
 8007620:	6113      	str	r3, [r2, #16]
 8007622:	e074      	b.n	800770e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007624:	69bb      	ldr	r3, [r7, #24]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	69fb      	ldr	r3, [r7, #28]
 800762a:	4413      	add	r3, r2
 800762c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	0151      	lsls	r1, r2, #5
 8007636:	69fa      	ldr	r2, [r7, #28]
 8007638:	440a      	add	r2, r1
 800763a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800763e:	0cdb      	lsrs	r3, r3, #19
 8007640:	04db      	lsls	r3, r3, #19
 8007642:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007644:	69bb      	ldr	r3, [r7, #24]
 8007646:	015a      	lsls	r2, r3, #5
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	4413      	add	r3, r2
 800764c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007650:	691b      	ldr	r3, [r3, #16]
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	0151      	lsls	r1, r2, #5
 8007656:	69fa      	ldr	r2, [r7, #28]
 8007658:	440a      	add	r2, r1
 800765a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800765e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007662:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007666:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007668:	69bb      	ldr	r3, [r7, #24]
 800766a:	015a      	lsls	r2, r3, #5
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	4413      	add	r3, r2
 8007670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007674:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	6999      	ldr	r1, [r3, #24]
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	68db      	ldr	r3, [r3, #12]
 800767e:	440b      	add	r3, r1
 8007680:	1e59      	subs	r1, r3, #1
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	68db      	ldr	r3, [r3, #12]
 8007686:	fbb1 f3f3 	udiv	r3, r1, r3
 800768a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800768c:	4b9d      	ldr	r3, [pc, #628]	; (8007904 <USB_EPStartXfer+0x370>)
 800768e:	400b      	ands	r3, r1
 8007690:	69b9      	ldr	r1, [r7, #24]
 8007692:	0148      	lsls	r0, r1, #5
 8007694:	69f9      	ldr	r1, [r7, #28]
 8007696:	4401      	add	r1, r0
 8007698:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800769c:	4313      	orrs	r3, r2
 800769e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076a0:	69bb      	ldr	r3, [r7, #24]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076ac:	691a      	ldr	r2, [r3, #16]
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	699b      	ldr	r3, [r3, #24]
 80076b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076b6:	69b9      	ldr	r1, [r7, #24]
 80076b8:	0148      	lsls	r0, r1, #5
 80076ba:	69f9      	ldr	r1, [r7, #28]
 80076bc:	4401      	add	r1, r0
 80076be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80076c2:	4313      	orrs	r3, r2
 80076c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80076c6:	68bb      	ldr	r3, [r7, #8]
 80076c8:	791b      	ldrb	r3, [r3, #4]
 80076ca:	2b01      	cmp	r3, #1
 80076cc:	d11f      	bne.n	800770e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	015a      	lsls	r2, r3, #5
 80076d2:	69fb      	ldr	r3, [r7, #28]
 80076d4:	4413      	add	r3, r2
 80076d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	69ba      	ldr	r2, [r7, #24]
 80076de:	0151      	lsls	r1, r2, #5
 80076e0:	69fa      	ldr	r2, [r7, #28]
 80076e2:	440a      	add	r2, r1
 80076e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80076ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	015a      	lsls	r2, r3, #5
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	4413      	add	r3, r2
 80076f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076fa:	691b      	ldr	r3, [r3, #16]
 80076fc:	69ba      	ldr	r2, [r7, #24]
 80076fe:	0151      	lsls	r1, r2, #5
 8007700:	69fa      	ldr	r2, [r7, #28]
 8007702:	440a      	add	r2, r1
 8007704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007708:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800770c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800770e:	79fb      	ldrb	r3, [r7, #7]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d14b      	bne.n	80077ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d009      	beq.n	8007730 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800771c:	69bb      	ldr	r3, [r7, #24]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	4413      	add	r3, r2
 8007724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007728:	461a      	mov	r2, r3
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	791b      	ldrb	r3, [r3, #4]
 8007734:	2b01      	cmp	r3, #1
 8007736:	d128      	bne.n	800778a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007744:	2b00      	cmp	r3, #0
 8007746:	d110      	bne.n	800776a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007748:	69bb      	ldr	r3, [r7, #24]
 800774a:	015a      	lsls	r2, r3, #5
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	4413      	add	r3, r2
 8007750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	69ba      	ldr	r2, [r7, #24]
 8007758:	0151      	lsls	r1, r2, #5
 800775a:	69fa      	ldr	r2, [r7, #28]
 800775c:	440a      	add	r2, r1
 800775e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007762:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007766:	6013      	str	r3, [r2, #0]
 8007768:	e00f      	b.n	800778a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	015a      	lsls	r2, r3, #5
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	4413      	add	r3, r2
 8007772:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	69ba      	ldr	r2, [r7, #24]
 800777a:	0151      	lsls	r1, r2, #5
 800777c:	69fa      	ldr	r2, [r7, #28]
 800777e:	440a      	add	r2, r1
 8007780:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007788:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	4413      	add	r3, r2
 8007792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	0151      	lsls	r1, r2, #5
 800779c:	69fa      	ldr	r2, [r7, #28]
 800779e:	440a      	add	r2, r1
 80077a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077a8:	6013      	str	r3, [r2, #0]
 80077aa:	e133      	b.n	8007a14 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80077ac:	69bb      	ldr	r3, [r7, #24]
 80077ae:	015a      	lsls	r2, r3, #5
 80077b0:	69fb      	ldr	r3, [r7, #28]
 80077b2:	4413      	add	r3, r2
 80077b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	69ba      	ldr	r2, [r7, #24]
 80077bc:	0151      	lsls	r1, r2, #5
 80077be:	69fa      	ldr	r2, [r7, #28]
 80077c0:	440a      	add	r2, r1
 80077c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80077ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	791b      	ldrb	r3, [r3, #4]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d015      	beq.n	8007800 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	699b      	ldr	r3, [r3, #24]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 811b 	beq.w	8007a14 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077e6:	68bb      	ldr	r3, [r7, #8]
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	f003 030f 	and.w	r3, r3, #15
 80077ee:	2101      	movs	r1, #1
 80077f0:	fa01 f303 	lsl.w	r3, r1, r3
 80077f4:	69f9      	ldr	r1, [r7, #28]
 80077f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80077fa:	4313      	orrs	r3, r2
 80077fc:	634b      	str	r3, [r1, #52]	; 0x34
 80077fe:	e109      	b.n	8007a14 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007800:	69fb      	ldr	r3, [r7, #28]
 8007802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780c:	2b00      	cmp	r3, #0
 800780e:	d110      	bne.n	8007832 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	0151      	lsls	r1, r2, #5
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	440a      	add	r2, r1
 8007826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800782a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	e00f      	b.n	8007852 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007832:	69bb      	ldr	r3, [r7, #24]
 8007834:	015a      	lsls	r2, r3, #5
 8007836:	69fb      	ldr	r3, [r7, #28]
 8007838:	4413      	add	r3, r2
 800783a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	69ba      	ldr	r2, [r7, #24]
 8007842:	0151      	lsls	r1, r2, #5
 8007844:	69fa      	ldr	r2, [r7, #28]
 8007846:	440a      	add	r2, r1
 8007848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800784c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007850:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	6919      	ldr	r1, [r3, #16]
 8007856:	68bb      	ldr	r3, [r7, #8]
 8007858:	781a      	ldrb	r2, [r3, #0]
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	b298      	uxth	r0, r3
 8007860:	79fb      	ldrb	r3, [r7, #7]
 8007862:	9300      	str	r3, [sp, #0]
 8007864:	4603      	mov	r3, r0
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f000 fade 	bl	8007e28 <USB_WritePacket>
 800786c:	e0d2      	b.n	8007a14 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800786e:	69bb      	ldr	r3, [r7, #24]
 8007870:	015a      	lsls	r2, r3, #5
 8007872:	69fb      	ldr	r3, [r7, #28]
 8007874:	4413      	add	r3, r2
 8007876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800787a:	691b      	ldr	r3, [r3, #16]
 800787c:	69ba      	ldr	r2, [r7, #24]
 800787e:	0151      	lsls	r1, r2, #5
 8007880:	69fa      	ldr	r2, [r7, #28]
 8007882:	440a      	add	r2, r1
 8007884:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007888:	0cdb      	lsrs	r3, r3, #19
 800788a:	04db      	lsls	r3, r3, #19
 800788c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800788e:	69bb      	ldr	r3, [r7, #24]
 8007890:	015a      	lsls	r2, r3, #5
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	4413      	add	r3, r2
 8007896:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800789a:	691b      	ldr	r3, [r3, #16]
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	0151      	lsls	r1, r2, #5
 80078a0:	69fa      	ldr	r2, [r7, #28]
 80078a2:	440a      	add	r2, r1
 80078a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078a8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80078ac:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80078b0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	699b      	ldr	r3, [r3, #24]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d126      	bne.n	8007908 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078c6:	691a      	ldr	r2, [r3, #16]
 80078c8:	68bb      	ldr	r3, [r7, #8]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80078d0:	69b9      	ldr	r1, [r7, #24]
 80078d2:	0148      	lsls	r0, r1, #5
 80078d4:	69f9      	ldr	r1, [r7, #28]
 80078d6:	4401      	add	r1, r0
 80078d8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80078dc:	4313      	orrs	r3, r2
 80078de:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	015a      	lsls	r2, r3, #5
 80078e4:	69fb      	ldr	r3, [r7, #28]
 80078e6:	4413      	add	r3, r2
 80078e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ec:	691b      	ldr	r3, [r3, #16]
 80078ee:	69ba      	ldr	r2, [r7, #24]
 80078f0:	0151      	lsls	r1, r2, #5
 80078f2:	69fa      	ldr	r2, [r7, #28]
 80078f4:	440a      	add	r2, r1
 80078f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80078fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80078fe:	6113      	str	r3, [r2, #16]
 8007900:	e03a      	b.n	8007978 <USB_EPStartXfer+0x3e4>
 8007902:	bf00      	nop
 8007904:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	699a      	ldr	r2, [r3, #24]
 800790c:	68bb      	ldr	r3, [r7, #8]
 800790e:	68db      	ldr	r3, [r3, #12]
 8007910:	4413      	add	r3, r2
 8007912:	1e5a      	subs	r2, r3, #1
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	68db      	ldr	r3, [r3, #12]
 8007918:	fbb2 f3f3 	udiv	r3, r2, r3
 800791c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	8afa      	ldrh	r2, [r7, #22]
 8007924:	fb03 f202 	mul.w	r2, r3, r2
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800792c:	69bb      	ldr	r3, [r7, #24]
 800792e:	015a      	lsls	r2, r3, #5
 8007930:	69fb      	ldr	r3, [r7, #28]
 8007932:	4413      	add	r3, r2
 8007934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007938:	691a      	ldr	r2, [r3, #16]
 800793a:	8afb      	ldrh	r3, [r7, #22]
 800793c:	04d9      	lsls	r1, r3, #19
 800793e:	4b38      	ldr	r3, [pc, #224]	; (8007a20 <USB_EPStartXfer+0x48c>)
 8007940:	400b      	ands	r3, r1
 8007942:	69b9      	ldr	r1, [r7, #24]
 8007944:	0148      	lsls	r0, r1, #5
 8007946:	69f9      	ldr	r1, [r7, #28]
 8007948:	4401      	add	r1, r0
 800794a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800794e:	4313      	orrs	r3, r2
 8007950:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	4413      	add	r3, r2
 800795a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800795e:	691a      	ldr	r2, [r3, #16]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	69db      	ldr	r3, [r3, #28]
 8007964:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007968:	69b9      	ldr	r1, [r7, #24]
 800796a:	0148      	lsls	r0, r1, #5
 800796c:	69f9      	ldr	r1, [r7, #28]
 800796e:	4401      	add	r1, r0
 8007970:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007974:	4313      	orrs	r3, r2
 8007976:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007978:	79fb      	ldrb	r3, [r7, #7]
 800797a:	2b01      	cmp	r3, #1
 800797c:	d10d      	bne.n	800799a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d009      	beq.n	800799a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	6919      	ldr	r1, [r3, #16]
 800798a:	69bb      	ldr	r3, [r7, #24]
 800798c:	015a      	lsls	r2, r3, #5
 800798e:	69fb      	ldr	r3, [r7, #28]
 8007990:	4413      	add	r3, r2
 8007992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007996:	460a      	mov	r2, r1
 8007998:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800799a:	68bb      	ldr	r3, [r7, #8]
 800799c:	791b      	ldrb	r3, [r3, #4]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d128      	bne.n	80079f4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d110      	bne.n	80079d4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80079b2:	69bb      	ldr	r3, [r7, #24]
 80079b4:	015a      	lsls	r2, r3, #5
 80079b6:	69fb      	ldr	r3, [r7, #28]
 80079b8:	4413      	add	r3, r2
 80079ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	69ba      	ldr	r2, [r7, #24]
 80079c2:	0151      	lsls	r1, r2, #5
 80079c4:	69fa      	ldr	r2, [r7, #28]
 80079c6:	440a      	add	r2, r1
 80079c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079d0:	6013      	str	r3, [r2, #0]
 80079d2:	e00f      	b.n	80079f4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80079d4:	69bb      	ldr	r3, [r7, #24]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	69fb      	ldr	r3, [r7, #28]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	69ba      	ldr	r2, [r7, #24]
 80079e4:	0151      	lsls	r1, r2, #5
 80079e6:	69fa      	ldr	r2, [r7, #28]
 80079e8:	440a      	add	r2, r1
 80079ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	69ba      	ldr	r2, [r7, #24]
 8007a04:	0151      	lsls	r1, r2, #5
 8007a06:	69fa      	ldr	r2, [r7, #28]
 8007a08:	440a      	add	r2, r1
 8007a0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a0e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007a12:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a14:	2300      	movs	r3, #0
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3720      	adds	r7, #32
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	1ff80000 	.word	0x1ff80000

08007a24 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007a24:	b480      	push	{r7}
 8007a26:	b087      	sub	sp, #28
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	4613      	mov	r3, r2
 8007a30:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	785b      	ldrb	r3, [r3, #1]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	f040 80ce 	bne.w	8007be2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	699b      	ldr	r3, [r3, #24]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d132      	bne.n	8007ab4 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	015a      	lsls	r2, r3, #5
 8007a52:	697b      	ldr	r3, [r7, #20]
 8007a54:	4413      	add	r3, r2
 8007a56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a5a:	691b      	ldr	r3, [r3, #16]
 8007a5c:	693a      	ldr	r2, [r7, #16]
 8007a5e:	0151      	lsls	r1, r2, #5
 8007a60:	697a      	ldr	r2, [r7, #20]
 8007a62:	440a      	add	r2, r1
 8007a64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a68:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a6c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007a72:	693b      	ldr	r3, [r7, #16]
 8007a74:	015a      	lsls	r2, r3, #5
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	4413      	add	r3, r2
 8007a7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	693a      	ldr	r2, [r7, #16]
 8007a82:	0151      	lsls	r1, r2, #5
 8007a84:	697a      	ldr	r2, [r7, #20]
 8007a86:	440a      	add	r2, r1
 8007a88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a8c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a90:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	015a      	lsls	r2, r3, #5
 8007a96:	697b      	ldr	r3, [r7, #20]
 8007a98:	4413      	add	r3, r2
 8007a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a9e:	691b      	ldr	r3, [r3, #16]
 8007aa0:	693a      	ldr	r2, [r7, #16]
 8007aa2:	0151      	lsls	r1, r2, #5
 8007aa4:	697a      	ldr	r2, [r7, #20]
 8007aa6:	440a      	add	r2, r1
 8007aa8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aac:	0cdb      	lsrs	r3, r3, #19
 8007aae:	04db      	lsls	r3, r3, #19
 8007ab0:	6113      	str	r3, [r2, #16]
 8007ab2:	e04e      	b.n	8007b52 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007ab4:	693b      	ldr	r3, [r7, #16]
 8007ab6:	015a      	lsls	r2, r3, #5
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	4413      	add	r3, r2
 8007abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ac0:	691b      	ldr	r3, [r3, #16]
 8007ac2:	693a      	ldr	r2, [r7, #16]
 8007ac4:	0151      	lsls	r1, r2, #5
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	440a      	add	r2, r1
 8007aca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ace:	0cdb      	lsrs	r3, r3, #19
 8007ad0:	04db      	lsls	r3, r3, #19
 8007ad2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ae0:	691b      	ldr	r3, [r3, #16]
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	0151      	lsls	r1, r2, #5
 8007ae6:	697a      	ldr	r2, [r7, #20]
 8007ae8:	440a      	add	r2, r1
 8007aea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007aee:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007af2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007af6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	699a      	ldr	r2, [r3, #24]
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	68db      	ldr	r3, [r3, #12]
 8007b00:	429a      	cmp	r2, r3
 8007b02:	d903      	bls.n	8007b0c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	68da      	ldr	r2, [r3, #12]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b0c:	693b      	ldr	r3, [r7, #16]
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b18:	691b      	ldr	r3, [r3, #16]
 8007b1a:	693a      	ldr	r2, [r7, #16]
 8007b1c:	0151      	lsls	r1, r2, #5
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	440a      	add	r2, r1
 8007b22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b2a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	697b      	ldr	r3, [r7, #20]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b38:	691a      	ldr	r2, [r3, #16]
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	699b      	ldr	r3, [r3, #24]
 8007b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b42:	6939      	ldr	r1, [r7, #16]
 8007b44:	0148      	lsls	r0, r1, #5
 8007b46:	6979      	ldr	r1, [r7, #20]
 8007b48:	4401      	add	r1, r0
 8007b4a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007b4e:	4313      	orrs	r3, r2
 8007b50:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007b52:	79fb      	ldrb	r3, [r7, #7]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d11e      	bne.n	8007b96 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	695b      	ldr	r3, [r3, #20]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d009      	beq.n	8007b74 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	015a      	lsls	r2, r3, #5
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	4413      	add	r3, r2
 8007b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b6c:	461a      	mov	r2, r3
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	695b      	ldr	r3, [r3, #20]
 8007b72:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b74:	693b      	ldr	r3, [r7, #16]
 8007b76:	015a      	lsls	r2, r3, #5
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	4413      	add	r3, r2
 8007b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	693a      	ldr	r2, [r7, #16]
 8007b84:	0151      	lsls	r1, r2, #5
 8007b86:	697a      	ldr	r2, [r7, #20]
 8007b88:	440a      	add	r2, r1
 8007b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b8e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007b92:	6013      	str	r3, [r2, #0]
 8007b94:	e097      	b.n	8007cc6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	015a      	lsls	r2, r3, #5
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	693a      	ldr	r2, [r7, #16]
 8007ba6:	0151      	lsls	r1, r2, #5
 8007ba8:	697a      	ldr	r2, [r7, #20]
 8007baa:	440a      	add	r2, r1
 8007bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007bb0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bb4:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	699b      	ldr	r3, [r3, #24]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 8083 	beq.w	8007cc6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007bc0:	697b      	ldr	r3, [r7, #20]
 8007bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bc6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	781b      	ldrb	r3, [r3, #0]
 8007bcc:	f003 030f 	and.w	r3, r3, #15
 8007bd0:	2101      	movs	r1, #1
 8007bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8007bd6:	6979      	ldr	r1, [r7, #20]
 8007bd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	634b      	str	r3, [r1, #52]	; 0x34
 8007be0:	e071      	b.n	8007cc6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	697b      	ldr	r3, [r7, #20]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bee:	691b      	ldr	r3, [r3, #16]
 8007bf0:	693a      	ldr	r2, [r7, #16]
 8007bf2:	0151      	lsls	r1, r2, #5
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	440a      	add	r2, r1
 8007bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bfc:	0cdb      	lsrs	r3, r3, #19
 8007bfe:	04db      	lsls	r3, r3, #19
 8007c00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007c02:	693b      	ldr	r3, [r7, #16]
 8007c04:	015a      	lsls	r2, r3, #5
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	4413      	add	r3, r2
 8007c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	693a      	ldr	r2, [r7, #16]
 8007c12:	0151      	lsls	r1, r2, #5
 8007c14:	697a      	ldr	r2, [r7, #20]
 8007c16:	440a      	add	r2, r1
 8007c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d003      	beq.n	8007c36 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	68da      	ldr	r2, [r3, #12]
 8007c32:	68bb      	ldr	r3, [r7, #8]
 8007c34:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	68da      	ldr	r2, [r3, #12]
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	0151      	lsls	r1, r2, #5
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	440a      	add	r2, r1
 8007c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6a:	691a      	ldr	r2, [r3, #16]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c74:	6939      	ldr	r1, [r7, #16]
 8007c76:	0148      	lsls	r0, r1, #5
 8007c78:	6979      	ldr	r1, [r7, #20]
 8007c7a:	4401      	add	r1, r0
 8007c7c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007c80:	4313      	orrs	r3, r2
 8007c82:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007c84:	79fb      	ldrb	r3, [r7, #7]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d10d      	bne.n	8007ca6 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d009      	beq.n	8007ca6 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007c92:	68bb      	ldr	r3, [r7, #8]
 8007c94:	6919      	ldr	r1, [r3, #16]
 8007c96:	693b      	ldr	r3, [r7, #16]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca2:	460a      	mov	r2, r1
 8007ca4:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007ca6:	693b      	ldr	r3, [r7, #16]
 8007ca8:	015a      	lsls	r2, r3, #5
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	4413      	add	r3, r2
 8007cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	0151      	lsls	r1, r2, #5
 8007cb8:	697a      	ldr	r2, [r7, #20]
 8007cba:	440a      	add	r2, r1
 8007cbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007cc0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007cc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	371c      	adds	r7, #28
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b087      	sub	sp, #28
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
 8007cdc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007cea:	683b      	ldr	r3, [r7, #0]
 8007cec:	785b      	ldrb	r3, [r3, #1]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d14a      	bne.n	8007d88 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	015a      	lsls	r2, r3, #5
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	4413      	add	r3, r2
 8007cfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d0a:	f040 8086 	bne.w	8007e1a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	015a      	lsls	r2, r3, #5
 8007d14:	693b      	ldr	r3, [r7, #16]
 8007d16:	4413      	add	r3, r2
 8007d18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	683a      	ldr	r2, [r7, #0]
 8007d20:	7812      	ldrb	r2, [r2, #0]
 8007d22:	0151      	lsls	r1, r2, #5
 8007d24:	693a      	ldr	r2, [r7, #16]
 8007d26:	440a      	add	r2, r1
 8007d28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d2c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007d30:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	781b      	ldrb	r3, [r3, #0]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	683a      	ldr	r2, [r7, #0]
 8007d44:	7812      	ldrb	r2, [r2, #0]
 8007d46:	0151      	lsls	r1, r2, #5
 8007d48:	693a      	ldr	r2, [r7, #16]
 8007d4a:	440a      	add	r2, r1
 8007d4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d50:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d54:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	3301      	adds	r3, #1
 8007d5a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d902      	bls.n	8007d6c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007d66:	2301      	movs	r3, #1
 8007d68:	75fb      	strb	r3, [r7, #23]
          break;
 8007d6a:	e056      	b.n	8007e1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	781b      	ldrb	r3, [r3, #0]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d84:	d0e7      	beq.n	8007d56 <USB_EPStopXfer+0x82>
 8007d86:	e048      	b.n	8007e1a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	781b      	ldrb	r3, [r3, #0]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d9c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007da0:	d13b      	bne.n	8007e1a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	015a      	lsls	r2, r3, #5
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	4413      	add	r3, r2
 8007dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	683a      	ldr	r2, [r7, #0]
 8007db4:	7812      	ldrb	r2, [r2, #0]
 8007db6:	0151      	lsls	r1, r2, #5
 8007db8:	693a      	ldr	r2, [r7, #16]
 8007dba:	440a      	add	r2, r1
 8007dbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dc0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007dc4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007dc6:	683b      	ldr	r3, [r7, #0]
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	015a      	lsls	r2, r3, #5
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	4413      	add	r3, r2
 8007dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	683a      	ldr	r2, [r7, #0]
 8007dd8:	7812      	ldrb	r2, [r2, #0]
 8007dda:	0151      	lsls	r1, r2, #5
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	440a      	add	r2, r1
 8007de0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007de4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007de8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3301      	adds	r3, #1
 8007dee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f242 7210 	movw	r2, #10000	; 0x2710
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d902      	bls.n	8007e00 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	75fb      	strb	r3, [r7, #23]
          break;
 8007dfe:	e00c      	b.n	8007e1a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007e00:	683b      	ldr	r3, [r7, #0]
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	015a      	lsls	r2, r3, #5
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	4413      	add	r3, r2
 8007e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e18:	d0e7      	beq.n	8007dea <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007e1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	371c      	adds	r7, #28
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr

08007e28 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	b089      	sub	sp, #36	; 0x24
 8007e2c:	af00      	add	r7, sp, #0
 8007e2e:	60f8      	str	r0, [r7, #12]
 8007e30:	60b9      	str	r1, [r7, #8]
 8007e32:	4611      	mov	r1, r2
 8007e34:	461a      	mov	r2, r3
 8007e36:	460b      	mov	r3, r1
 8007e38:	71fb      	strb	r3, [r7, #7]
 8007e3a:	4613      	mov	r3, r2
 8007e3c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007e46:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d123      	bne.n	8007e96 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007e4e:	88bb      	ldrh	r3, [r7, #4]
 8007e50:	3303      	adds	r3, #3
 8007e52:	089b      	lsrs	r3, r3, #2
 8007e54:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007e56:	2300      	movs	r3, #0
 8007e58:	61bb      	str	r3, [r7, #24]
 8007e5a:	e018      	b.n	8007e8e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007e5c:	79fb      	ldrb	r3, [r7, #7]
 8007e5e:	031a      	lsls	r2, r3, #12
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007e68:	461a      	mov	r2, r3
 8007e6a:	69fb      	ldr	r3, [r7, #28]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	3301      	adds	r3, #1
 8007e74:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	3301      	adds	r3, #1
 8007e7a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	3301      	adds	r3, #1
 8007e80:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	3301      	adds	r3, #1
 8007e86:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	3301      	adds	r3, #1
 8007e8c:	61bb      	str	r3, [r7, #24]
 8007e8e:	69ba      	ldr	r2, [r7, #24]
 8007e90:	693b      	ldr	r3, [r7, #16]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d3e2      	bcc.n	8007e5c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007e96:	2300      	movs	r3, #0
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3724      	adds	r7, #36	; 0x24
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea2:	4770      	bx	lr

08007ea4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b08b      	sub	sp, #44	; 0x2c
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	4613      	mov	r3, r2
 8007eb0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007eba:	88fb      	ldrh	r3, [r7, #6]
 8007ebc:	089b      	lsrs	r3, r3, #2
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007ec2:	88fb      	ldrh	r3, [r7, #6]
 8007ec4:	f003 0303 	and.w	r3, r3, #3
 8007ec8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007eca:	2300      	movs	r3, #0
 8007ecc:	623b      	str	r3, [r7, #32]
 8007ece:	e014      	b.n	8007efa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ed6:	681a      	ldr	r2, [r3, #0]
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	601a      	str	r2, [r3, #0]
    pDest++;
 8007edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ede:	3301      	adds	r3, #1
 8007ee0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee4:	3301      	adds	r3, #1
 8007ee6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eea:	3301      	adds	r3, #1
 8007eec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef0:	3301      	adds	r3, #1
 8007ef2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007ef4:	6a3b      	ldr	r3, [r7, #32]
 8007ef6:	3301      	adds	r3, #1
 8007ef8:	623b      	str	r3, [r7, #32]
 8007efa:	6a3a      	ldr	r2, [r7, #32]
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	429a      	cmp	r2, r3
 8007f00:	d3e6      	bcc.n	8007ed0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007f02:	8bfb      	ldrh	r3, [r7, #30]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d01e      	beq.n	8007f46 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007f08:	2300      	movs	r3, #0
 8007f0a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007f12:	461a      	mov	r2, r3
 8007f14:	f107 0310 	add.w	r3, r7, #16
 8007f18:	6812      	ldr	r2, [r2, #0]
 8007f1a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007f1c:	693a      	ldr	r2, [r7, #16]
 8007f1e:	6a3b      	ldr	r3, [r7, #32]
 8007f20:	b2db      	uxtb	r3, r3
 8007f22:	00db      	lsls	r3, r3, #3
 8007f24:	fa22 f303 	lsr.w	r3, r2, r3
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	701a      	strb	r2, [r3, #0]
      i++;
 8007f2e:	6a3b      	ldr	r3, [r7, #32]
 8007f30:	3301      	adds	r3, #1
 8007f32:	623b      	str	r3, [r7, #32]
      pDest++;
 8007f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f36:	3301      	adds	r3, #1
 8007f38:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007f3a:	8bfb      	ldrh	r3, [r7, #30]
 8007f3c:	3b01      	subs	r3, #1
 8007f3e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007f40:	8bfb      	ldrh	r3, [r7, #30]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d1ea      	bne.n	8007f1c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007f48:	4618      	mov	r0, r3
 8007f4a:	372c      	adds	r7, #44	; 0x2c
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b085      	sub	sp, #20
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	785b      	ldrb	r3, [r3, #1]
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d12c      	bne.n	8007fca <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007f70:	68bb      	ldr	r3, [r7, #8]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	db12      	blt.n	8007fa8 <USB_EPSetStall+0x54>
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d00f      	beq.n	8007fa8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	015a      	lsls	r2, r3, #5
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	4413      	add	r3, r2
 8007f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	0151      	lsls	r1, r2, #5
 8007f9a:	68fa      	ldr	r2, [r7, #12]
 8007f9c:	440a      	add	r2, r1
 8007f9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fa2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007fa6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007fa8:	68bb      	ldr	r3, [r7, #8]
 8007faa:	015a      	lsls	r2, r3, #5
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	4413      	add	r3, r2
 8007fb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	68ba      	ldr	r2, [r7, #8]
 8007fb8:	0151      	lsls	r1, r2, #5
 8007fba:	68fa      	ldr	r2, [r7, #12]
 8007fbc:	440a      	add	r2, r1
 8007fbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007fc2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007fc6:	6013      	str	r3, [r2, #0]
 8007fc8:	e02b      	b.n	8008022 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	015a      	lsls	r2, r3, #5
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	4413      	add	r3, r2
 8007fd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	db12      	blt.n	8008002 <USB_EPSetStall+0xae>
 8007fdc:	68bb      	ldr	r3, [r7, #8]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00f      	beq.n	8008002 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	015a      	lsls	r2, r3, #5
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	4413      	add	r3, r2
 8007fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	0151      	lsls	r1, r2, #5
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	440a      	add	r2, r1
 8007ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ffc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008000:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008002:	68bb      	ldr	r3, [r7, #8]
 8008004:	015a      	lsls	r2, r3, #5
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	4413      	add	r3, r2
 800800a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	68ba      	ldr	r2, [r7, #8]
 8008012:	0151      	lsls	r1, r2, #5
 8008014:	68fa      	ldr	r2, [r7, #12]
 8008016:	440a      	add	r2, r1
 8008018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800801c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008020:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3714      	adds	r7, #20
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008030:	b480      	push	{r7}
 8008032:	b085      	sub	sp, #20
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
 8008038:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	785b      	ldrb	r3, [r3, #1]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d128      	bne.n	800809e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800804c:	68bb      	ldr	r3, [r7, #8]
 800804e:	015a      	lsls	r2, r3, #5
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	4413      	add	r3, r2
 8008054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	68ba      	ldr	r2, [r7, #8]
 800805c:	0151      	lsls	r1, r2, #5
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	440a      	add	r2, r1
 8008062:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008066:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800806a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	791b      	ldrb	r3, [r3, #4]
 8008070:	2b03      	cmp	r3, #3
 8008072:	d003      	beq.n	800807c <USB_EPClearStall+0x4c>
 8008074:	683b      	ldr	r3, [r7, #0]
 8008076:	791b      	ldrb	r3, [r3, #4]
 8008078:	2b02      	cmp	r3, #2
 800807a:	d138      	bne.n	80080ee <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	015a      	lsls	r2, r3, #5
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	4413      	add	r3, r2
 8008084:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68ba      	ldr	r2, [r7, #8]
 800808c:	0151      	lsls	r1, r2, #5
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	440a      	add	r2, r1
 8008092:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800809a:	6013      	str	r3, [r2, #0]
 800809c:	e027      	b.n	80080ee <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	015a      	lsls	r2, r3, #5
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	4413      	add	r3, r2
 80080a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	0151      	lsls	r1, r2, #5
 80080b0:	68fa      	ldr	r2, [r7, #12]
 80080b2:	440a      	add	r2, r1
 80080b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080b8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80080bc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	791b      	ldrb	r3, [r3, #4]
 80080c2:	2b03      	cmp	r3, #3
 80080c4:	d003      	beq.n	80080ce <USB_EPClearStall+0x9e>
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	791b      	ldrb	r3, [r3, #4]
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d10f      	bne.n	80080ee <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	015a      	lsls	r2, r3, #5
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	4413      	add	r3, r2
 80080d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68ba      	ldr	r2, [r7, #8]
 80080de:	0151      	lsls	r1, r2, #5
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	440a      	add	r2, r1
 80080e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80080e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080ec:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b085      	sub	sp, #20
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	460b      	mov	r3, r1
 8008106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800811a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800811e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	78fb      	ldrb	r3, [r7, #3]
 800812a:	011b      	lsls	r3, r3, #4
 800812c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8008130:	68f9      	ldr	r1, [r7, #12]
 8008132:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008136:	4313      	orrs	r3, r2
 8008138:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800813a:	2300      	movs	r3, #0
}
 800813c:	4618      	mov	r0, r3
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr

08008148 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008148:	b480      	push	{r7}
 800814a:	b085      	sub	sp, #20
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008162:	f023 0303 	bic.w	r3, r3, #3
 8008166:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008176:	f023 0302 	bic.w	r3, r3, #2
 800817a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800818a:	b480      	push	{r7}
 800818c:	b085      	sub	sp, #20
 800818e:	af00      	add	r7, sp, #0
 8008190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	68fa      	ldr	r2, [r7, #12]
 80081a0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80081a4:	f023 0303 	bic.w	r3, r3, #3
 80081a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	68fa      	ldr	r2, [r7, #12]
 80081b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80081b8:	f043 0302 	orr.w	r3, r3, #2
 80081bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80081be:	2300      	movs	r3, #0
}
 80081c0:	4618      	mov	r0, r3
 80081c2:	3714      	adds	r7, #20
 80081c4:	46bd      	mov	sp, r7
 80081c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ca:	4770      	bx	lr

080081cc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80081cc:	b480      	push	{r7}
 80081ce:	b085      	sub	sp, #20
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	695b      	ldr	r3, [r3, #20]
 80081d8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	699b      	ldr	r3, [r3, #24]
 80081de:	68fa      	ldr	r2, [r7, #12]
 80081e0:	4013      	ands	r3, r2
 80081e2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80081e4:	68fb      	ldr	r3, [r7, #12]
}
 80081e6:	4618      	mov	r0, r3
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80081f2:	b480      	push	{r7}
 80081f4:	b085      	sub	sp, #20
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	68ba      	ldr	r2, [r7, #8]
 8008212:	4013      	ands	r3, r2
 8008214:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	0c1b      	lsrs	r3, r3, #16
}
 800821a:	4618      	mov	r0, r3
 800821c:	3714      	adds	r7, #20
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008226:	b480      	push	{r7}
 8008228:	b085      	sub	sp, #20
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008238:	699b      	ldr	r3, [r3, #24]
 800823a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008242:	69db      	ldr	r3, [r3, #28]
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	4013      	ands	r3, r2
 8008248:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800824a:	68bb      	ldr	r3, [r7, #8]
 800824c:	b29b      	uxth	r3, r3
}
 800824e:	4618      	mov	r0, r3
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr

0800825a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800825a:	b480      	push	{r7}
 800825c:	b085      	sub	sp, #20
 800825e:	af00      	add	r7, sp, #0
 8008260:	6078      	str	r0, [r7, #4]
 8008262:	460b      	mov	r3, r1
 8008264:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800826a:	78fb      	ldrb	r3, [r7, #3]
 800826c:	015a      	lsls	r2, r3, #5
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	4413      	add	r3, r2
 8008272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008280:	695b      	ldr	r3, [r3, #20]
 8008282:	68ba      	ldr	r2, [r7, #8]
 8008284:	4013      	ands	r3, r2
 8008286:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008288:	68bb      	ldr	r3, [r7, #8]
}
 800828a:	4618      	mov	r0, r3
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr

08008296 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008296:	b480      	push	{r7}
 8008298:	b087      	sub	sp, #28
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	460b      	mov	r3, r1
 80082a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082ac:	691b      	ldr	r3, [r3, #16]
 80082ae:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082b8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80082ba:	78fb      	ldrb	r3, [r7, #3]
 80082bc:	f003 030f 	and.w	r3, r3, #15
 80082c0:	68fa      	ldr	r2, [r7, #12]
 80082c2:	fa22 f303 	lsr.w	r3, r2, r3
 80082c6:	01db      	lsls	r3, r3, #7
 80082c8:	b2db      	uxtb	r3, r3
 80082ca:	693a      	ldr	r2, [r7, #16]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80082d0:	78fb      	ldrb	r3, [r7, #3]
 80082d2:	015a      	lsls	r2, r3, #5
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	4413      	add	r3, r2
 80082d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	693a      	ldr	r2, [r7, #16]
 80082e0:	4013      	ands	r3, r2
 80082e2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80082e4:	68bb      	ldr	r3, [r7, #8]
}
 80082e6:	4618      	mov	r0, r3
 80082e8:	371c      	adds	r7, #28
 80082ea:	46bd      	mov	sp, r7
 80082ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f0:	4770      	bx	lr

080082f2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80082f2:	b480      	push	{r7}
 80082f4:	b083      	sub	sp, #12
 80082f6:	af00      	add	r7, sp, #0
 80082f8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	695b      	ldr	r3, [r3, #20]
 80082fe:	f003 0301 	and.w	r3, r3, #1
}
 8008302:	4618      	mov	r0, r3
 8008304:	370c      	adds	r7, #12
 8008306:	46bd      	mov	sp, r7
 8008308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830c:	4770      	bx	lr

0800830e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800830e:	b480      	push	{r7}
 8008310:	b085      	sub	sp, #20
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008328:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800832c:	f023 0307 	bic.w	r3, r3, #7
 8008330:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	68fa      	ldr	r2, [r7, #12]
 800833c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008344:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008346:	2300      	movs	r3, #0
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008354:	b480      	push	{r7}
 8008356:	b087      	sub	sp, #28
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	460b      	mov	r3, r1
 800835e:	607a      	str	r2, [r7, #4]
 8008360:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	333c      	adds	r3, #60	; 0x3c
 800836a:	3304      	adds	r3, #4
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8008370:	693b      	ldr	r3, [r7, #16]
 8008372:	4a26      	ldr	r2, [pc, #152]	; (800840c <USB_EP0_OutStart+0xb8>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d90a      	bls.n	800838e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008384:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008388:	d101      	bne.n	800838e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	e037      	b.n	80083fe <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008394:	461a      	mov	r2, r3
 8008396:	2300      	movs	r3, #0
 8008398:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083a0:	691b      	ldr	r3, [r3, #16]
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80083ac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083b4:	691b      	ldr	r3, [r3, #16]
 80083b6:	697a      	ldr	r2, [r7, #20]
 80083b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083bc:	f043 0318 	orr.w	r3, r3, #24
 80083c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083c8:	691b      	ldr	r3, [r3, #16]
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083d0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80083d4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80083d6:	7afb      	ldrb	r3, [r7, #11]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d10f      	bne.n	80083fc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083e2:	461a      	mov	r2, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80083f6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80083fa:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	371c      	adds	r7, #28
 8008402:	46bd      	mov	sp, r7
 8008404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008408:	4770      	bx	lr
 800840a:	bf00      	nop
 800840c:	4f54300a 	.word	0x4f54300a

08008410 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008410:	b480      	push	{r7}
 8008412:	b085      	sub	sp, #20
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008418:	2300      	movs	r3, #0
 800841a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	3301      	adds	r3, #1
 8008420:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	4a13      	ldr	r2, [pc, #76]	; (8008474 <USB_CoreReset+0x64>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d901      	bls.n	800842e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800842a:	2303      	movs	r3, #3
 800842c:	e01b      	b.n	8008466 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	691b      	ldr	r3, [r3, #16]
 8008432:	2b00      	cmp	r3, #0
 8008434:	daf2      	bge.n	800841c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008436:	2300      	movs	r3, #0
 8008438:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	f043 0201 	orr.w	r2, r3, #1
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	3301      	adds	r3, #1
 800844a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	4a09      	ldr	r2, [pc, #36]	; (8008474 <USB_CoreReset+0x64>)
 8008450:	4293      	cmp	r3, r2
 8008452:	d901      	bls.n	8008458 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008454:	2303      	movs	r3, #3
 8008456:	e006      	b.n	8008466 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	691b      	ldr	r3, [r3, #16]
 800845c:	f003 0301 	and.w	r3, r3, #1
 8008460:	2b01      	cmp	r3, #1
 8008462:	d0f0      	beq.n	8008446 <USB_CoreReset+0x36>

  return HAL_OK;
 8008464:	2300      	movs	r3, #0
}
 8008466:	4618      	mov	r0, r3
 8008468:	3714      	adds	r7, #20
 800846a:	46bd      	mov	sp, r7
 800846c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008470:	4770      	bx	lr
 8008472:	bf00      	nop
 8008474:	00030d40 	.word	0x00030d40

08008478 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	460b      	mov	r3, r1
 8008482:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008484:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008488:	f002 fc9e 	bl	800adc8 <USBD_static_malloc>
 800848c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d109      	bne.n	80084a8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	32b0      	adds	r2, #176	; 0xb0
 800849e:	2100      	movs	r1, #0
 80084a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80084a4:	2302      	movs	r3, #2
 80084a6:	e0d4      	b.n	8008652 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80084a8:	f44f 7207 	mov.w	r2, #540	; 0x21c
 80084ac:	2100      	movs	r1, #0
 80084ae:	68f8      	ldr	r0, [r7, #12]
 80084b0:	f002 fd0a 	bl	800aec8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	32b0      	adds	r2, #176	; 0xb0
 80084be:	68f9      	ldr	r1, [r7, #12]
 80084c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	32b0      	adds	r2, #176	; 0xb0
 80084ce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	7c1b      	ldrb	r3, [r3, #16]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d138      	bne.n	8008552 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80084e0:	4b5e      	ldr	r3, [pc, #376]	; (800865c <USBD_CDC_Init+0x1e4>)
 80084e2:	7819      	ldrb	r1, [r3, #0]
 80084e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80084e8:	2202      	movs	r2, #2
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f002 fb49 	bl	800ab82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80084f0:	4b5a      	ldr	r3, [pc, #360]	; (800865c <USBD_CDC_Init+0x1e4>)
 80084f2:	781b      	ldrb	r3, [r3, #0]
 80084f4:	f003 020f 	and.w	r2, r3, #15
 80084f8:	6879      	ldr	r1, [r7, #4]
 80084fa:	4613      	mov	r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	4413      	add	r3, r2
 8008500:	009b      	lsls	r3, r3, #2
 8008502:	440b      	add	r3, r1
 8008504:	3324      	adds	r3, #36	; 0x24
 8008506:	2201      	movs	r2, #1
 8008508:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800850a:	4b55      	ldr	r3, [pc, #340]	; (8008660 <USBD_CDC_Init+0x1e8>)
 800850c:	7819      	ldrb	r1, [r3, #0]
 800850e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008512:	2202      	movs	r2, #2
 8008514:	6878      	ldr	r0, [r7, #4]
 8008516:	f002 fb34 	bl	800ab82 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800851a:	4b51      	ldr	r3, [pc, #324]	; (8008660 <USBD_CDC_Init+0x1e8>)
 800851c:	781b      	ldrb	r3, [r3, #0]
 800851e:	f003 020f 	and.w	r2, r3, #15
 8008522:	6879      	ldr	r1, [r7, #4]
 8008524:	4613      	mov	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4413      	add	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	440b      	add	r3, r1
 800852e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008532:	2201      	movs	r2, #1
 8008534:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8008536:	4b4b      	ldr	r3, [pc, #300]	; (8008664 <USBD_CDC_Init+0x1ec>)
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	f003 020f 	and.w	r2, r3, #15
 800853e:	6879      	ldr	r1, [r7, #4]
 8008540:	4613      	mov	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	4413      	add	r3, r2
 8008546:	009b      	lsls	r3, r3, #2
 8008548:	440b      	add	r3, r1
 800854a:	3326      	adds	r3, #38	; 0x26
 800854c:	2210      	movs	r2, #16
 800854e:	801a      	strh	r2, [r3, #0]
 8008550:	e035      	b.n	80085be <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8008552:	4b42      	ldr	r3, [pc, #264]	; (800865c <USBD_CDC_Init+0x1e4>)
 8008554:	7819      	ldrb	r1, [r3, #0]
 8008556:	2340      	movs	r3, #64	; 0x40
 8008558:	2202      	movs	r2, #2
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f002 fb11 	bl	800ab82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008560:	4b3e      	ldr	r3, [pc, #248]	; (800865c <USBD_CDC_Init+0x1e4>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	f003 020f 	and.w	r2, r3, #15
 8008568:	6879      	ldr	r1, [r7, #4]
 800856a:	4613      	mov	r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	4413      	add	r3, r2
 8008570:	009b      	lsls	r3, r3, #2
 8008572:	440b      	add	r3, r1
 8008574:	3324      	adds	r3, #36	; 0x24
 8008576:	2201      	movs	r2, #1
 8008578:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800857a:	4b39      	ldr	r3, [pc, #228]	; (8008660 <USBD_CDC_Init+0x1e8>)
 800857c:	7819      	ldrb	r1, [r3, #0]
 800857e:	2340      	movs	r3, #64	; 0x40
 8008580:	2202      	movs	r2, #2
 8008582:	6878      	ldr	r0, [r7, #4]
 8008584:	f002 fafd 	bl	800ab82 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008588:	4b35      	ldr	r3, [pc, #212]	; (8008660 <USBD_CDC_Init+0x1e8>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	f003 020f 	and.w	r2, r3, #15
 8008590:	6879      	ldr	r1, [r7, #4]
 8008592:	4613      	mov	r3, r2
 8008594:	009b      	lsls	r3, r3, #2
 8008596:	4413      	add	r3, r2
 8008598:	009b      	lsls	r3, r3, #2
 800859a:	440b      	add	r3, r1
 800859c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80085a0:	2201      	movs	r2, #1
 80085a2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80085a4:	4b2f      	ldr	r3, [pc, #188]	; (8008664 <USBD_CDC_Init+0x1ec>)
 80085a6:	781b      	ldrb	r3, [r3, #0]
 80085a8:	f003 020f 	and.w	r2, r3, #15
 80085ac:	6879      	ldr	r1, [r7, #4]
 80085ae:	4613      	mov	r3, r2
 80085b0:	009b      	lsls	r3, r3, #2
 80085b2:	4413      	add	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	440b      	add	r3, r1
 80085b8:	3326      	adds	r3, #38	; 0x26
 80085ba:	2210      	movs	r2, #16
 80085bc:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80085be:	4b29      	ldr	r3, [pc, #164]	; (8008664 <USBD_CDC_Init+0x1ec>)
 80085c0:	7819      	ldrb	r1, [r3, #0]
 80085c2:	2308      	movs	r3, #8
 80085c4:	2203      	movs	r2, #3
 80085c6:	6878      	ldr	r0, [r7, #4]
 80085c8:	f002 fadb 	bl	800ab82 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80085cc:	4b25      	ldr	r3, [pc, #148]	; (8008664 <USBD_CDC_Init+0x1ec>)
 80085ce:	781b      	ldrb	r3, [r3, #0]
 80085d0:	f003 020f 	and.w	r2, r3, #15
 80085d4:	6879      	ldr	r1, [r7, #4]
 80085d6:	4613      	mov	r3, r2
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	009b      	lsls	r3, r3, #2
 80085de:	440b      	add	r3, r1
 80085e0:	3324      	adds	r3, #36	; 0x24
 80085e2:	2201      	movs	r2, #1
 80085e4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085f4:	687a      	ldr	r2, [r7, #4]
 80085f6:	33b0      	adds	r3, #176	; 0xb0
 80085f8:	009b      	lsls	r3, r3, #2
 80085fa:	4413      	add	r3, r2
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	2200      	movs	r2, #0
 8008606:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	2200      	movs	r2, #0
 800860e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008618:	2b00      	cmp	r3, #0
 800861a:	d101      	bne.n	8008620 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800861c:	2302      	movs	r3, #2
 800861e:	e018      	b.n	8008652 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	7c1b      	ldrb	r3, [r3, #16]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d10a      	bne.n	800863e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008628:	4b0d      	ldr	r3, [pc, #52]	; (8008660 <USBD_CDC_Init+0x1e8>)
 800862a:	7819      	ldrb	r1, [r3, #0]
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008632:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	f002 fb92 	bl	800ad60 <USBD_LL_PrepareReceive>
 800863c:	e008      	b.n	8008650 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800863e:	4b08      	ldr	r3, [pc, #32]	; (8008660 <USBD_CDC_Init+0x1e8>)
 8008640:	7819      	ldrb	r1, [r3, #0]
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008648:	2340      	movs	r3, #64	; 0x40
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f002 fb88 	bl	800ad60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008650:	2300      	movs	r3, #0
}
 8008652:	4618      	mov	r0, r3
 8008654:	3710      	adds	r7, #16
 8008656:	46bd      	mov	sp, r7
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	200000bb 	.word	0x200000bb
 8008660:	200000bc 	.word	0x200000bc
 8008664:	200000bd 	.word	0x200000bd

08008668 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
 8008670:	460b      	mov	r3, r1
 8008672:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008674:	4b3a      	ldr	r3, [pc, #232]	; (8008760 <USBD_CDC_DeInit+0xf8>)
 8008676:	781b      	ldrb	r3, [r3, #0]
 8008678:	4619      	mov	r1, r3
 800867a:	6878      	ldr	r0, [r7, #4]
 800867c:	f002 faa7 	bl	800abce <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008680:	4b37      	ldr	r3, [pc, #220]	; (8008760 <USBD_CDC_DeInit+0xf8>)
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	f003 020f 	and.w	r2, r3, #15
 8008688:	6879      	ldr	r1, [r7, #4]
 800868a:	4613      	mov	r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	4413      	add	r3, r2
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	440b      	add	r3, r1
 8008694:	3324      	adds	r3, #36	; 0x24
 8008696:	2200      	movs	r2, #0
 8008698:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800869a:	4b32      	ldr	r3, [pc, #200]	; (8008764 <USBD_CDC_DeInit+0xfc>)
 800869c:	781b      	ldrb	r3, [r3, #0]
 800869e:	4619      	mov	r1, r3
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f002 fa94 	bl	800abce <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80086a6:	4b2f      	ldr	r3, [pc, #188]	; (8008764 <USBD_CDC_DeInit+0xfc>)
 80086a8:	781b      	ldrb	r3, [r3, #0]
 80086aa:	f003 020f 	and.w	r2, r3, #15
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	4613      	mov	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	440b      	add	r3, r1
 80086ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80086be:	2200      	movs	r2, #0
 80086c0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80086c2:	4b29      	ldr	r3, [pc, #164]	; (8008768 <USBD_CDC_DeInit+0x100>)
 80086c4:	781b      	ldrb	r3, [r3, #0]
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f002 fa80 	bl	800abce <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80086ce:	4b26      	ldr	r3, [pc, #152]	; (8008768 <USBD_CDC_DeInit+0x100>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	f003 020f 	and.w	r2, r3, #15
 80086d6:	6879      	ldr	r1, [r7, #4]
 80086d8:	4613      	mov	r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	4413      	add	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	440b      	add	r3, r1
 80086e2:	3324      	adds	r3, #36	; 0x24
 80086e4:	2200      	movs	r2, #0
 80086e6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80086e8:	4b1f      	ldr	r3, [pc, #124]	; (8008768 <USBD_CDC_DeInit+0x100>)
 80086ea:	781b      	ldrb	r3, [r3, #0]
 80086ec:	f003 020f 	and.w	r2, r3, #15
 80086f0:	6879      	ldr	r1, [r7, #4]
 80086f2:	4613      	mov	r3, r2
 80086f4:	009b      	lsls	r3, r3, #2
 80086f6:	4413      	add	r3, r2
 80086f8:	009b      	lsls	r3, r3, #2
 80086fa:	440b      	add	r3, r1
 80086fc:	3326      	adds	r3, #38	; 0x26
 80086fe:	2200      	movs	r2, #0
 8008700:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	32b0      	adds	r2, #176	; 0xb0
 800870c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008710:	2b00      	cmp	r3, #0
 8008712:	d01f      	beq.n	8008754 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	33b0      	adds	r3, #176	; 0xb0
 800871e:	009b      	lsls	r3, r3, #2
 8008720:	4413      	add	r3, r2
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	32b0      	adds	r2, #176	; 0xb0
 8008732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008736:	4618      	mov	r0, r3
 8008738:	f002 fb54 	bl	800ade4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	32b0      	adds	r2, #176	; 0xb0
 8008746:	2100      	movs	r1, #0
 8008748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008754:	2300      	movs	r3, #0
}
 8008756:	4618      	mov	r0, r3
 8008758:	3708      	adds	r7, #8
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	200000bb 	.word	0x200000bb
 8008764:	200000bc 	.word	0x200000bc
 8008768:	200000bd 	.word	0x200000bd

0800876c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800876c:	b580      	push	{r7, lr}
 800876e:	b086      	sub	sp, #24
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	32b0      	adds	r2, #176	; 0xb0
 8008780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008784:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008786:	2300      	movs	r3, #0
 8008788:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800878a:	2300      	movs	r3, #0
 800878c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d101      	bne.n	800879c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008798:	2303      	movs	r3, #3
 800879a:	e0bf      	b.n	800891c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d050      	beq.n	800884a <USBD_CDC_Setup+0xde>
 80087a8:	2b20      	cmp	r3, #32
 80087aa:	f040 80af 	bne.w	800890c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	88db      	ldrh	r3, [r3, #6]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d03a      	beq.n	800882c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	781b      	ldrb	r3, [r3, #0]
 80087ba:	b25b      	sxtb	r3, r3
 80087bc:	2b00      	cmp	r3, #0
 80087be:	da1b      	bge.n	80087f8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	33b0      	adds	r3, #176	; 0xb0
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	4413      	add	r3, r2
 80087ce:	685b      	ldr	r3, [r3, #4]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	683a      	ldr	r2, [r7, #0]
 80087d4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80087d6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80087d8:	683a      	ldr	r2, [r7, #0]
 80087da:	88d2      	ldrh	r2, [r2, #6]
 80087dc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	88db      	ldrh	r3, [r3, #6]
 80087e2:	2b07      	cmp	r3, #7
 80087e4:	bf28      	it	cs
 80087e6:	2307      	movcs	r3, #7
 80087e8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	89fa      	ldrh	r2, [r7, #14]
 80087ee:	4619      	mov	r1, r3
 80087f0:	6878      	ldr	r0, [r7, #4]
 80087f2:	f001 fd89 	bl	800a308 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80087f6:	e090      	b.n	800891a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	785a      	ldrb	r2, [r3, #1]
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008802:	683b      	ldr	r3, [r7, #0]
 8008804:	88db      	ldrh	r3, [r3, #6]
 8008806:	2b3f      	cmp	r3, #63	; 0x3f
 8008808:	d803      	bhi.n	8008812 <USBD_CDC_Setup+0xa6>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	88db      	ldrh	r3, [r3, #6]
 800880e:	b2da      	uxtb	r2, r3
 8008810:	e000      	b.n	8008814 <USBD_CDC_Setup+0xa8>
 8008812:	2240      	movs	r2, #64	; 0x40
 8008814:	693b      	ldr	r3, [r7, #16]
 8008816:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800881a:	6939      	ldr	r1, [r7, #16]
 800881c:	693b      	ldr	r3, [r7, #16]
 800881e:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8008822:	461a      	mov	r2, r3
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f001 fd9b 	bl	800a360 <USBD_CtlPrepareRx>
      break;
 800882a:	e076      	b.n	800891a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008832:	687a      	ldr	r2, [r7, #4]
 8008834:	33b0      	adds	r3, #176	; 0xb0
 8008836:	009b      	lsls	r3, r3, #2
 8008838:	4413      	add	r3, r2
 800883a:	685b      	ldr	r3, [r3, #4]
 800883c:	689b      	ldr	r3, [r3, #8]
 800883e:	683a      	ldr	r2, [r7, #0]
 8008840:	7850      	ldrb	r0, [r2, #1]
 8008842:	2200      	movs	r2, #0
 8008844:	6839      	ldr	r1, [r7, #0]
 8008846:	4798      	blx	r3
      break;
 8008848:	e067      	b.n	800891a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	785b      	ldrb	r3, [r3, #1]
 800884e:	2b0b      	cmp	r3, #11
 8008850:	d851      	bhi.n	80088f6 <USBD_CDC_Setup+0x18a>
 8008852:	a201      	add	r2, pc, #4	; (adr r2, 8008858 <USBD_CDC_Setup+0xec>)
 8008854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008858:	08008889 	.word	0x08008889
 800885c:	08008905 	.word	0x08008905
 8008860:	080088f7 	.word	0x080088f7
 8008864:	080088f7 	.word	0x080088f7
 8008868:	080088f7 	.word	0x080088f7
 800886c:	080088f7 	.word	0x080088f7
 8008870:	080088f7 	.word	0x080088f7
 8008874:	080088f7 	.word	0x080088f7
 8008878:	080088f7 	.word	0x080088f7
 800887c:	080088f7 	.word	0x080088f7
 8008880:	080088b3 	.word	0x080088b3
 8008884:	080088dd 	.word	0x080088dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b03      	cmp	r3, #3
 8008892:	d107      	bne.n	80088a4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008894:	f107 030a 	add.w	r3, r7, #10
 8008898:	2202      	movs	r2, #2
 800889a:	4619      	mov	r1, r3
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f001 fd33 	bl	800a308 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088a2:	e032      	b.n	800890a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80088a4:	6839      	ldr	r1, [r7, #0]
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f001 fcbd 	bl	800a226 <USBD_CtlError>
            ret = USBD_FAIL;
 80088ac:	2303      	movs	r3, #3
 80088ae:	75fb      	strb	r3, [r7, #23]
          break;
 80088b0:	e02b      	b.n	800890a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b03      	cmp	r3, #3
 80088bc:	d107      	bne.n	80088ce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80088be:	f107 030d 	add.w	r3, r7, #13
 80088c2:	2201      	movs	r2, #1
 80088c4:	4619      	mov	r1, r3
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 fd1e 	bl	800a308 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088cc:	e01d      	b.n	800890a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80088ce:	6839      	ldr	r1, [r7, #0]
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	f001 fca8 	bl	800a226 <USBD_CtlError>
            ret = USBD_FAIL;
 80088d6:	2303      	movs	r3, #3
 80088d8:	75fb      	strb	r3, [r7, #23]
          break;
 80088da:	e016      	b.n	800890a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088e2:	b2db      	uxtb	r3, r3
 80088e4:	2b03      	cmp	r3, #3
 80088e6:	d00f      	beq.n	8008908 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80088e8:	6839      	ldr	r1, [r7, #0]
 80088ea:	6878      	ldr	r0, [r7, #4]
 80088ec:	f001 fc9b 	bl	800a226 <USBD_CtlError>
            ret = USBD_FAIL;
 80088f0:	2303      	movs	r3, #3
 80088f2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80088f4:	e008      	b.n	8008908 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80088f6:	6839      	ldr	r1, [r7, #0]
 80088f8:	6878      	ldr	r0, [r7, #4]
 80088fa:	f001 fc94 	bl	800a226 <USBD_CtlError>
          ret = USBD_FAIL;
 80088fe:	2303      	movs	r3, #3
 8008900:	75fb      	strb	r3, [r7, #23]
          break;
 8008902:	e002      	b.n	800890a <USBD_CDC_Setup+0x19e>
          break;
 8008904:	bf00      	nop
 8008906:	e008      	b.n	800891a <USBD_CDC_Setup+0x1ae>
          break;
 8008908:	bf00      	nop
      }
      break;
 800890a:	e006      	b.n	800891a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800890c:	6839      	ldr	r1, [r7, #0]
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f001 fc89 	bl	800a226 <USBD_CtlError>
      ret = USBD_FAIL;
 8008914:	2303      	movs	r3, #3
 8008916:	75fb      	strb	r3, [r7, #23]
      break;
 8008918:	bf00      	nop
  }

  return (uint8_t)ret;
 800891a:	7dfb      	ldrb	r3, [r7, #23]
}
 800891c:	4618      	mov	r0, r3
 800891e:	3718      	adds	r7, #24
 8008920:	46bd      	mov	sp, r7
 8008922:	bd80      	pop	{r7, pc}

08008924 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b084      	sub	sp, #16
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	460b      	mov	r3, r1
 800892e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008936:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	32b0      	adds	r2, #176	; 0xb0
 8008942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d101      	bne.n	800894e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800894a:	2303      	movs	r3, #3
 800894c:	e065      	b.n	8008a1a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	32b0      	adds	r2, #176	; 0xb0
 8008958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800895c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800895e:	78fb      	ldrb	r3, [r7, #3]
 8008960:	f003 020f 	and.w	r2, r3, #15
 8008964:	6879      	ldr	r1, [r7, #4]
 8008966:	4613      	mov	r3, r2
 8008968:	009b      	lsls	r3, r3, #2
 800896a:	4413      	add	r3, r2
 800896c:	009b      	lsls	r3, r3, #2
 800896e:	440b      	add	r3, r1
 8008970:	3318      	adds	r3, #24
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d02f      	beq.n	80089d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008978:	78fb      	ldrb	r3, [r7, #3]
 800897a:	f003 020f 	and.w	r2, r3, #15
 800897e:	6879      	ldr	r1, [r7, #4]
 8008980:	4613      	mov	r3, r2
 8008982:	009b      	lsls	r3, r3, #2
 8008984:	4413      	add	r3, r2
 8008986:	009b      	lsls	r3, r3, #2
 8008988:	440b      	add	r3, r1
 800898a:	3318      	adds	r3, #24
 800898c:	681a      	ldr	r2, [r3, #0]
 800898e:	78fb      	ldrb	r3, [r7, #3]
 8008990:	f003 010f 	and.w	r1, r3, #15
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	460b      	mov	r3, r1
 8008998:	00db      	lsls	r3, r3, #3
 800899a:	440b      	add	r3, r1
 800899c:	009b      	lsls	r3, r3, #2
 800899e:	4403      	add	r3, r0
 80089a0:	3348      	adds	r3, #72	; 0x48
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80089a8:	fb01 f303 	mul.w	r3, r1, r3
 80089ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d112      	bne.n	80089d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80089b2:	78fb      	ldrb	r3, [r7, #3]
 80089b4:	f003 020f 	and.w	r2, r3, #15
 80089b8:	6879      	ldr	r1, [r7, #4]
 80089ba:	4613      	mov	r3, r2
 80089bc:	009b      	lsls	r3, r3, #2
 80089be:	4413      	add	r3, r2
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	440b      	add	r3, r1
 80089c4:	3318      	adds	r3, #24
 80089c6:	2200      	movs	r2, #0
 80089c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80089ca:	78f9      	ldrb	r1, [r7, #3]
 80089cc:	2300      	movs	r3, #0
 80089ce:	2200      	movs	r2, #0
 80089d0:	6878      	ldr	r0, [r7, #4]
 80089d2:	f002 f9a4 	bl	800ad1e <USBD_LL_Transmit>
 80089d6:	e01f      	b.n	8008a18 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	2200      	movs	r2, #0
 80089dc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089e6:	687a      	ldr	r2, [r7, #4]
 80089e8:	33b0      	adds	r3, #176	; 0xb0
 80089ea:	009b      	lsls	r3, r3, #2
 80089ec:	4413      	add	r3, r2
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	691b      	ldr	r3, [r3, #16]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d010      	beq.n	8008a18 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80089fc:	687a      	ldr	r2, [r7, #4]
 80089fe:	33b0      	adds	r3, #176	; 0xb0
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	4413      	add	r3, r2
 8008a04:	685b      	ldr	r3, [r3, #4]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008a0e:	68ba      	ldr	r2, [r7, #8]
 8008a10:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008a14:	78fa      	ldrb	r2, [r7, #3]
 8008a16:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008a18:	2300      	movs	r3, #0
}
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	3710      	adds	r7, #16
 8008a1e:	46bd      	mov	sp, r7
 8008a20:	bd80      	pop	{r7, pc}

08008a22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a22:	b580      	push	{r7, lr}
 8008a24:	b084      	sub	sp, #16
 8008a26:	af00      	add	r7, sp, #0
 8008a28:	6078      	str	r0, [r7, #4]
 8008a2a:	460b      	mov	r3, r1
 8008a2c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	32b0      	adds	r2, #176	; 0xb0
 8008a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a3c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	32b0      	adds	r2, #176	; 0xb0
 8008a48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e01a      	b.n	8008a8a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008a54:	78fb      	ldrb	r3, [r7, #3]
 8008a56:	4619      	mov	r1, r3
 8008a58:	6878      	ldr	r0, [r7, #4]
 8008a5a:	f002 f9a2 	bl	800ada2 <USBD_LL_GetRxDataSize>
 8008a5e:	4602      	mov	r2, r0
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008a6c:	687a      	ldr	r2, [r7, #4]
 8008a6e:	33b0      	adds	r3, #176	; 0xb0
 8008a70:	009b      	lsls	r3, r3, #2
 8008a72:	4413      	add	r3, r2
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	68fa      	ldr	r2, [r7, #12]
 8008a7a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008a84:	4611      	mov	r1, r2
 8008a86:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008a88:	2300      	movs	r3, #0
}
 8008a8a:	4618      	mov	r0, r3
 8008a8c:	3710      	adds	r7, #16
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	bd80      	pop	{r7, pc}

08008a92 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008a92:	b580      	push	{r7, lr}
 8008a94:	b084      	sub	sp, #16
 8008a96:	af00      	add	r7, sp, #0
 8008a98:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	32b0      	adds	r2, #176	; 0xb0
 8008aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e025      	b.n	8008b00 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	33b0      	adds	r3, #176	; 0xb0
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	4413      	add	r3, r2
 8008ac2:	685b      	ldr	r3, [r3, #4]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d01a      	beq.n	8008afe <USBD_CDC_EP0_RxReady+0x6c>
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8008ace:	2bff      	cmp	r3, #255	; 0xff
 8008ad0:	d015      	beq.n	8008afe <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008ad8:	687a      	ldr	r2, [r7, #4]
 8008ada:	33b0      	adds	r3, #176	; 0xb0
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	4413      	add	r3, r2
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	68fa      	ldr	r2, [r7, #12]
 8008ae6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008aea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008aec:	68fa      	ldr	r2, [r7, #12]
 8008aee:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008af2:	b292      	uxth	r2, r2
 8008af4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	22ff      	movs	r2, #255	; 0xff
 8008afa:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8008afe:	2300      	movs	r3, #0
}
 8008b00:	4618      	mov	r0, r3
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b086      	sub	sp, #24
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b10:	2182      	movs	r1, #130	; 0x82
 8008b12:	4818      	ldr	r0, [pc, #96]	; (8008b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b14:	f000 fd4f 	bl	80095b6 <USBD_GetEpDesc>
 8008b18:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b1a:	2101      	movs	r1, #1
 8008b1c:	4815      	ldr	r0, [pc, #84]	; (8008b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b1e:	f000 fd4a 	bl	80095b6 <USBD_GetEpDesc>
 8008b22:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008b24:	2181      	movs	r1, #129	; 0x81
 8008b26:	4813      	ldr	r0, [pc, #76]	; (8008b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008b28:	f000 fd45 	bl	80095b6 <USBD_GetEpDesc>
 8008b2c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d002      	beq.n	8008b3a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008b34:	697b      	ldr	r3, [r7, #20]
 8008b36:	2210      	movs	r2, #16
 8008b38:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d006      	beq.n	8008b4e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b40:	693b      	ldr	r3, [r7, #16]
 8008b42:	2200      	movs	r2, #0
 8008b44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b48:	711a      	strb	r2, [r3, #4]
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d006      	beq.n	8008b62 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2200      	movs	r2, #0
 8008b58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b5c:	711a      	strb	r2, [r3, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	2243      	movs	r2, #67	; 0x43
 8008b66:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008b68:	4b02      	ldr	r3, [pc, #8]	; (8008b74 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3718      	adds	r7, #24
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	20000078 	.word	0x20000078

08008b78 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b086      	sub	sp, #24
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008b80:	2182      	movs	r1, #130	; 0x82
 8008b82:	4818      	ldr	r0, [pc, #96]	; (8008be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008b84:	f000 fd17 	bl	80095b6 <USBD_GetEpDesc>
 8008b88:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008b8a:	2101      	movs	r1, #1
 8008b8c:	4815      	ldr	r0, [pc, #84]	; (8008be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008b8e:	f000 fd12 	bl	80095b6 <USBD_GetEpDesc>
 8008b92:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008b94:	2181      	movs	r1, #129	; 0x81
 8008b96:	4813      	ldr	r0, [pc, #76]	; (8008be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008b98:	f000 fd0d 	bl	80095b6 <USBD_GetEpDesc>
 8008b9c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	2210      	movs	r2, #16
 8008ba8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d006      	beq.n	8008bbe <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	711a      	strb	r2, [r3, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f042 0202 	orr.w	r2, r2, #2
 8008bbc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d006      	beq.n	8008bd2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	711a      	strb	r2, [r3, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f042 0202 	orr.w	r2, r2, #2
 8008bd0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2243      	movs	r2, #67	; 0x43
 8008bd6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008bd8:	4b02      	ldr	r3, [pc, #8]	; (8008be4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008bda:	4618      	mov	r0, r3
 8008bdc:	3718      	adds	r7, #24
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}
 8008be2:	bf00      	nop
 8008be4:	20000078 	.word	0x20000078

08008be8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008be8:	b580      	push	{r7, lr}
 8008bea:	b086      	sub	sp, #24
 8008bec:	af00      	add	r7, sp, #0
 8008bee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008bf0:	2182      	movs	r1, #130	; 0x82
 8008bf2:	4818      	ldr	r0, [pc, #96]	; (8008c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008bf4:	f000 fcdf 	bl	80095b6 <USBD_GetEpDesc>
 8008bf8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008bfa:	2101      	movs	r1, #1
 8008bfc:	4815      	ldr	r0, [pc, #84]	; (8008c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008bfe:	f000 fcda 	bl	80095b6 <USBD_GetEpDesc>
 8008c02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008c04:	2181      	movs	r1, #129	; 0x81
 8008c06:	4813      	ldr	r0, [pc, #76]	; (8008c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008c08:	f000 fcd5 	bl	80095b6 <USBD_GetEpDesc>
 8008c0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d002      	beq.n	8008c1a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008c14:	697b      	ldr	r3, [r7, #20]
 8008c16:	2210      	movs	r2, #16
 8008c18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d006      	beq.n	8008c2e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	2200      	movs	r2, #0
 8008c24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c28:	711a      	strb	r2, [r3, #4]
 8008c2a:	2200      	movs	r2, #0
 8008c2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d006      	beq.n	8008c42 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008c34:	68fb      	ldr	r3, [r7, #12]
 8008c36:	2200      	movs	r2, #0
 8008c38:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c3c:	711a      	strb	r2, [r3, #4]
 8008c3e:	2200      	movs	r2, #0
 8008c40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	2243      	movs	r2, #67	; 0x43
 8008c46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008c48:	4b02      	ldr	r3, [pc, #8]	; (8008c54 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	3718      	adds	r7, #24
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	20000078 	.word	0x20000078

08008c58 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008c58:	b480      	push	{r7}
 8008c5a:	b083      	sub	sp, #12
 8008c5c:	af00      	add	r7, sp, #0
 8008c5e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	220a      	movs	r2, #10
 8008c64:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008c66:	4b03      	ldr	r3, [pc, #12]	; (8008c74 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	370c      	adds	r7, #12
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c72:	4770      	bx	lr
 8008c74:	20000034 	.word	0x20000034

08008c78 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b083      	sub	sp, #12
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d101      	bne.n	8008c8c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e009      	b.n	8008ca0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	33b0      	adds	r3, #176	; 0xb0
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4413      	add	r3, r2
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	32b0      	adds	r2, #176	; 0xb0
 8008cc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008cc8:	697b      	ldr	r3, [r7, #20]
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d101      	bne.n	8008cd2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e008      	b.n	8008ce4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008cd2:	697b      	ldr	r3, [r7, #20]
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	687a      	ldr	r2, [r7, #4]
 8008cde:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8008ce2:	2300      	movs	r3, #0
}
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	371c      	adds	r7, #28
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr

08008cf0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b085      	sub	sp, #20
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
 8008cf8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	32b0      	adds	r2, #176	; 0xb0
 8008d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d08:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d101      	bne.n	8008d14 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008d10:	2303      	movs	r3, #3
 8008d12:	e004      	b.n	8008d1e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	683a      	ldr	r2, [r7, #0]
 8008d18:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008d1c:	2300      	movs	r3, #0
}
 8008d1e:	4618      	mov	r0, r3
 8008d20:	3714      	adds	r7, #20
 8008d22:	46bd      	mov	sp, r7
 8008d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d28:	4770      	bx	lr
	...

08008d2c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	32b0      	adds	r2, #176	; 0xb0
 8008d3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d42:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008d44:	2301      	movs	r3, #1
 8008d46:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	32b0      	adds	r2, #176	; 0xb0
 8008d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d101      	bne.n	8008d5e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e025      	b.n	8008daa <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d11f      	bne.n	8008da8 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008d68:	68bb      	ldr	r3, [r7, #8]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008d70:	4b10      	ldr	r3, [pc, #64]	; (8008db4 <USBD_CDC_TransmitPacket+0x88>)
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	f003 020f 	and.w	r2, r3, #15
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	4613      	mov	r3, r2
 8008d82:	009b      	lsls	r3, r3, #2
 8008d84:	4413      	add	r3, r2
 8008d86:	009b      	lsls	r3, r3, #2
 8008d88:	4403      	add	r3, r0
 8008d8a:	3318      	adds	r3, #24
 8008d8c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008d8e:	4b09      	ldr	r3, [pc, #36]	; (8008db4 <USBD_CDC_TransmitPacket+0x88>)
 8008d90:	7819      	ldrb	r1, [r3, #0]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f001 ffbd 	bl	800ad1e <USBD_LL_Transmit>

    ret = USBD_OK;
 8008da4:	2300      	movs	r3, #0
 8008da6:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	200000bb 	.word	0x200000bb

08008db8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	32b0      	adds	r2, #176	; 0xb0
 8008dca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dce:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	32b0      	adds	r2, #176	; 0xb0
 8008dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8008de2:	2303      	movs	r3, #3
 8008de4:	e018      	b.n	8008e18 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	7c1b      	ldrb	r3, [r3, #16]
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d10a      	bne.n	8008e04 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008dee:	4b0c      	ldr	r3, [pc, #48]	; (8008e20 <USBD_CDC_ReceivePacket+0x68>)
 8008df0:	7819      	ldrb	r1, [r3, #0]
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008df8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f001 ffaf 	bl	800ad60 <USBD_LL_PrepareReceive>
 8008e02:	e008      	b.n	8008e16 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008e04:	4b06      	ldr	r3, [pc, #24]	; (8008e20 <USBD_CDC_ReceivePacket+0x68>)
 8008e06:	7819      	ldrb	r1, [r3, #0]
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008e0e:	2340      	movs	r3, #64	; 0x40
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 ffa5 	bl	800ad60 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008e16:	2300      	movs	r3, #0
}
 8008e18:	4618      	mov	r0, r3
 8008e1a:	3710      	adds	r7, #16
 8008e1c:	46bd      	mov	sp, r7
 8008e1e:	bd80      	pop	{r7, pc}
 8008e20:	200000bc 	.word	0x200000bc

08008e24 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b086      	sub	sp, #24
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	60f8      	str	r0, [r7, #12]
 8008e2c:	60b9      	str	r1, [r7, #8]
 8008e2e:	4613      	mov	r3, r2
 8008e30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d101      	bne.n	8008e3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e38:	2303      	movs	r3, #3
 8008e3a:	e01f      	b.n	8008e7c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	2200      	movs	r2, #0
 8008e48:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d003      	beq.n	8008e62 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2201      	movs	r2, #1
 8008e66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	79fa      	ldrb	r2, [r7, #7]
 8008e6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008e70:	68f8      	ldr	r0, [r7, #12]
 8008e72:	f001 fe1f 	bl	800aab4 <USBD_LL_Init>
 8008e76:	4603      	mov	r3, r0
 8008e78:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3718      	adds	r7, #24
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008e92:	683b      	ldr	r3, [r7, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d101      	bne.n	8008e9c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008e98:	2303      	movs	r3, #3
 8008e9a:	e025      	b.n	8008ee8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	683a      	ldr	r2, [r7, #0]
 8008ea0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	32ae      	adds	r2, #174	; 0xae
 8008eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d00f      	beq.n	8008ed8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	32ae      	adds	r2, #174	; 0xae
 8008ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec8:	f107 020e 	add.w	r2, r7, #14
 8008ecc:	4610      	mov	r0, r2
 8008ece:	4798      	blx	r3
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008ede:	1c5a      	adds	r2, r3, #1
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008ee6:	2300      	movs	r3, #0
}
 8008ee8:	4618      	mov	r0, r3
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b082      	sub	sp, #8
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f001 fe27 	bl	800ab4c <USBD_LL_Start>
 8008efe:	4603      	mov	r3, r0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3708      	adds	r7, #8
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bd80      	pop	{r7, pc}

08008f08 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f10:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008f12:	4618      	mov	r0, r3
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
 8008f26:	460b      	mov	r3, r1
 8008f28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d009      	beq.n	8008f4c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	78fa      	ldrb	r2, [r7, #3]
 8008f42:	4611      	mov	r1, r2
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	4798      	blx	r3
 8008f48:	4603      	mov	r3, r0
 8008f4a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3710      	adds	r7, #16
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	6078      	str	r0, [r7, #4]
 8008f5e:	460b      	mov	r3, r1
 8008f60:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f62:	2300      	movs	r3, #0
 8008f64:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f6c:	685b      	ldr	r3, [r3, #4]
 8008f6e:	78fa      	ldrb	r2, [r7, #3]
 8008f70:	4611      	mov	r1, r2
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	4798      	blx	r3
 8008f76:	4603      	mov	r3, r0
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d001      	beq.n	8008f80 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}

08008f8a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008f8a:	b580      	push	{r7, lr}
 8008f8c:	b084      	sub	sp, #16
 8008f8e:	af00      	add	r7, sp, #0
 8008f90:	6078      	str	r0, [r7, #4]
 8008f92:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008f9a:	6839      	ldr	r1, [r7, #0]
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	f001 f908 	bl	800a1b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2201      	movs	r2, #1
 8008fa6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008fbe:	f003 031f 	and.w	r3, r3, #31
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d01a      	beq.n	8008ffc <USBD_LL_SetupStage+0x72>
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d822      	bhi.n	8009010 <USBD_LL_SetupStage+0x86>
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d002      	beq.n	8008fd4 <USBD_LL_SetupStage+0x4a>
 8008fce:	2b01      	cmp	r3, #1
 8008fd0:	d00a      	beq.n	8008fe8 <USBD_LL_SetupStage+0x5e>
 8008fd2:	e01d      	b.n	8009010 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fda:	4619      	mov	r1, r3
 8008fdc:	6878      	ldr	r0, [r7, #4]
 8008fde:	f000 fb5f 	bl	80096a0 <USBD_StdDevReq>
 8008fe2:	4603      	mov	r3, r0
 8008fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe6:	e020      	b.n	800902a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008fee:	4619      	mov	r1, r3
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fbc7 	bl	8009784 <USBD_StdItfReq>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	73fb      	strb	r3, [r7, #15]
      break;
 8008ffa:	e016      	b.n	800902a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009002:	4619      	mov	r1, r3
 8009004:	6878      	ldr	r0, [r7, #4]
 8009006:	f000 fc29 	bl	800985c <USBD_StdEPReq>
 800900a:	4603      	mov	r3, r0
 800900c:	73fb      	strb	r3, [r7, #15]
      break;
 800900e:	e00c      	b.n	800902a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009016:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800901a:	b2db      	uxtb	r3, r3
 800901c:	4619      	mov	r1, r3
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f001 fdf4 	bl	800ac0c <USBD_LL_StallEP>
 8009024:	4603      	mov	r3, r0
 8009026:	73fb      	strb	r3, [r7, #15]
      break;
 8009028:	bf00      	nop
  }

  return ret;
 800902a:	7bfb      	ldrb	r3, [r7, #15]
}
 800902c:	4618      	mov	r0, r3
 800902e:	3710      	adds	r7, #16
 8009030:	46bd      	mov	sp, r7
 8009032:	bd80      	pop	{r7, pc}

08009034 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	60f8      	str	r0, [r7, #12]
 800903c:	460b      	mov	r3, r1
 800903e:	607a      	str	r2, [r7, #4]
 8009040:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009042:	2300      	movs	r3, #0
 8009044:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009046:	7afb      	ldrb	r3, [r7, #11]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d16e      	bne.n	800912a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009052:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800905a:	2b03      	cmp	r3, #3
 800905c:	f040 8098 	bne.w	8009190 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	689a      	ldr	r2, [r3, #8]
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	429a      	cmp	r2, r3
 800906a:	d913      	bls.n	8009094 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	689a      	ldr	r2, [r3, #8]
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	1ad2      	subs	r2, r2, r3
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	68da      	ldr	r2, [r3, #12]
 800907e:	693b      	ldr	r3, [r7, #16]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	4293      	cmp	r3, r2
 8009084:	bf28      	it	cs
 8009086:	4613      	movcs	r3, r2
 8009088:	461a      	mov	r2, r3
 800908a:	6879      	ldr	r1, [r7, #4]
 800908c:	68f8      	ldr	r0, [r7, #12]
 800908e:	f001 f984 	bl	800a39a <USBD_CtlContinueRx>
 8009092:	e07d      	b.n	8009190 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800909a:	f003 031f 	and.w	r3, r3, #31
 800909e:	2b02      	cmp	r3, #2
 80090a0:	d014      	beq.n	80090cc <USBD_LL_DataOutStage+0x98>
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d81d      	bhi.n	80090e2 <USBD_LL_DataOutStage+0xae>
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d002      	beq.n	80090b0 <USBD_LL_DataOutStage+0x7c>
 80090aa:	2b01      	cmp	r3, #1
 80090ac:	d003      	beq.n	80090b6 <USBD_LL_DataOutStage+0x82>
 80090ae:	e018      	b.n	80090e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80090b0:	2300      	movs	r3, #0
 80090b2:	75bb      	strb	r3, [r7, #22]
            break;
 80090b4:	e018      	b.n	80090e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090bc:	b2db      	uxtb	r3, r3
 80090be:	4619      	mov	r1, r3
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f000 fa5e 	bl	8009582 <USBD_CoreFindIF>
 80090c6:	4603      	mov	r3, r0
 80090c8:	75bb      	strb	r3, [r7, #22]
            break;
 80090ca:	e00d      	b.n	80090e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	4619      	mov	r1, r3
 80090d6:	68f8      	ldr	r0, [r7, #12]
 80090d8:	f000 fa60 	bl	800959c <USBD_CoreFindEP>
 80090dc:	4603      	mov	r3, r0
 80090de:	75bb      	strb	r3, [r7, #22]
            break;
 80090e0:	e002      	b.n	80090e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80090e2:	2300      	movs	r3, #0
 80090e4:	75bb      	strb	r3, [r7, #22]
            break;
 80090e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80090e8:	7dbb      	ldrb	r3, [r7, #22]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d119      	bne.n	8009122 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090f4:	b2db      	uxtb	r3, r3
 80090f6:	2b03      	cmp	r3, #3
 80090f8:	d113      	bne.n	8009122 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80090fa:	7dba      	ldrb	r2, [r7, #22]
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	32ae      	adds	r2, #174	; 0xae
 8009100:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009104:	691b      	ldr	r3, [r3, #16]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d00b      	beq.n	8009122 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800910a:	7dba      	ldrb	r2, [r7, #22]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009112:	7dba      	ldrb	r2, [r7, #22]
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	32ae      	adds	r2, #174	; 0xae
 8009118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	68f8      	ldr	r0, [r7, #12]
 8009120:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009122:	68f8      	ldr	r0, [r7, #12]
 8009124:	f001 f94a 	bl	800a3bc <USBD_CtlSendStatus>
 8009128:	e032      	b.n	8009190 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800912a:	7afb      	ldrb	r3, [r7, #11]
 800912c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009130:	b2db      	uxtb	r3, r3
 8009132:	4619      	mov	r1, r3
 8009134:	68f8      	ldr	r0, [r7, #12]
 8009136:	f000 fa31 	bl	800959c <USBD_CoreFindEP>
 800913a:	4603      	mov	r3, r0
 800913c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800913e:	7dbb      	ldrb	r3, [r7, #22]
 8009140:	2bff      	cmp	r3, #255	; 0xff
 8009142:	d025      	beq.n	8009190 <USBD_LL_DataOutStage+0x15c>
 8009144:	7dbb      	ldrb	r3, [r7, #22]
 8009146:	2b00      	cmp	r3, #0
 8009148:	d122      	bne.n	8009190 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009150:	b2db      	uxtb	r3, r3
 8009152:	2b03      	cmp	r3, #3
 8009154:	d117      	bne.n	8009186 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009156:	7dba      	ldrb	r2, [r7, #22]
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	32ae      	adds	r2, #174	; 0xae
 800915c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009160:	699b      	ldr	r3, [r3, #24]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d00f      	beq.n	8009186 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009166:	7dba      	ldrb	r2, [r7, #22]
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800916e:	7dba      	ldrb	r2, [r7, #22]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	32ae      	adds	r2, #174	; 0xae
 8009174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009178:	699b      	ldr	r3, [r3, #24]
 800917a:	7afa      	ldrb	r2, [r7, #11]
 800917c:	4611      	mov	r1, r2
 800917e:	68f8      	ldr	r0, [r7, #12]
 8009180:	4798      	blx	r3
 8009182:	4603      	mov	r3, r0
 8009184:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009186:	7dfb      	ldrb	r3, [r7, #23]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d001      	beq.n	8009190 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800918c:	7dfb      	ldrb	r3, [r7, #23]
 800918e:	e000      	b.n	8009192 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3718      	adds	r7, #24
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800919a:	b580      	push	{r7, lr}
 800919c:	b086      	sub	sp, #24
 800919e:	af00      	add	r7, sp, #0
 80091a0:	60f8      	str	r0, [r7, #12]
 80091a2:	460b      	mov	r3, r1
 80091a4:	607a      	str	r2, [r7, #4]
 80091a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80091a8:	7afb      	ldrb	r3, [r7, #11]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d16f      	bne.n	800928e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	3314      	adds	r3, #20
 80091b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80091ba:	2b02      	cmp	r3, #2
 80091bc:	d15a      	bne.n	8009274 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	689a      	ldr	r2, [r3, #8]
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	68db      	ldr	r3, [r3, #12]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d914      	bls.n	80091f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	689a      	ldr	r2, [r3, #8]
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	1ad2      	subs	r2, r2, r3
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	689b      	ldr	r3, [r3, #8]
 80091dc:	461a      	mov	r2, r3
 80091de:	6879      	ldr	r1, [r7, #4]
 80091e0:	68f8      	ldr	r0, [r7, #12]
 80091e2:	f001 f8ac 	bl	800a33e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091e6:	2300      	movs	r3, #0
 80091e8:	2200      	movs	r2, #0
 80091ea:	2100      	movs	r1, #0
 80091ec:	68f8      	ldr	r0, [r7, #12]
 80091ee:	f001 fdb7 	bl	800ad60 <USBD_LL_PrepareReceive>
 80091f2:	e03f      	b.n	8009274 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80091f4:	693b      	ldr	r3, [r7, #16]
 80091f6:	68da      	ldr	r2, [r3, #12]
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	429a      	cmp	r2, r3
 80091fe:	d11c      	bne.n	800923a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	685a      	ldr	r2, [r3, #4]
 8009204:	693b      	ldr	r3, [r7, #16]
 8009206:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009208:	429a      	cmp	r2, r3
 800920a:	d316      	bcc.n	800923a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8009216:	429a      	cmp	r2, r3
 8009218:	d20f      	bcs.n	800923a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800921a:	2200      	movs	r2, #0
 800921c:	2100      	movs	r1, #0
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f001 f88d 	bl	800a33e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2200      	movs	r2, #0
 8009228:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800922c:	2300      	movs	r3, #0
 800922e:	2200      	movs	r2, #0
 8009230:	2100      	movs	r1, #0
 8009232:	68f8      	ldr	r0, [r7, #12]
 8009234:	f001 fd94 	bl	800ad60 <USBD_LL_PrepareReceive>
 8009238:	e01c      	b.n	8009274 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b03      	cmp	r3, #3
 8009244:	d10f      	bne.n	8009266 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d009      	beq.n	8009266 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	2200      	movs	r2, #0
 8009256:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009260:	68db      	ldr	r3, [r3, #12]
 8009262:	68f8      	ldr	r0, [r7, #12]
 8009264:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8009266:	2180      	movs	r1, #128	; 0x80
 8009268:	68f8      	ldr	r0, [r7, #12]
 800926a:	f001 fccf 	bl	800ac0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800926e:	68f8      	ldr	r0, [r7, #12]
 8009270:	f001 f8b7 	bl	800a3e2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d03a      	beq.n	80092f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800927e:	68f8      	ldr	r0, [r7, #12]
 8009280:	f7ff fe42 	bl	8008f08 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	2200      	movs	r2, #0
 8009288:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800928c:	e032      	b.n	80092f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800928e:	7afb      	ldrb	r3, [r7, #11]
 8009290:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009294:	b2db      	uxtb	r3, r3
 8009296:	4619      	mov	r1, r3
 8009298:	68f8      	ldr	r0, [r7, #12]
 800929a:	f000 f97f 	bl	800959c <USBD_CoreFindEP>
 800929e:	4603      	mov	r3, r0
 80092a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092a2:	7dfb      	ldrb	r3, [r7, #23]
 80092a4:	2bff      	cmp	r3, #255	; 0xff
 80092a6:	d025      	beq.n	80092f4 <USBD_LL_DataInStage+0x15a>
 80092a8:	7dfb      	ldrb	r3, [r7, #23]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d122      	bne.n	80092f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092b4:	b2db      	uxtb	r3, r3
 80092b6:	2b03      	cmp	r3, #3
 80092b8:	d11c      	bne.n	80092f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80092ba:	7dfa      	ldrb	r2, [r7, #23]
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	32ae      	adds	r2, #174	; 0xae
 80092c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c4:	695b      	ldr	r3, [r3, #20]
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d014      	beq.n	80092f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80092ca:	7dfa      	ldrb	r2, [r7, #23]
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80092d2:	7dfa      	ldrb	r2, [r7, #23]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	32ae      	adds	r2, #174	; 0xae
 80092d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092dc:	695b      	ldr	r3, [r3, #20]
 80092de:	7afa      	ldrb	r2, [r7, #11]
 80092e0:	4611      	mov	r1, r2
 80092e2:	68f8      	ldr	r0, [r7, #12]
 80092e4:	4798      	blx	r3
 80092e6:	4603      	mov	r3, r0
 80092e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80092ea:	7dbb      	ldrb	r3, [r7, #22]
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d001      	beq.n	80092f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80092f0:	7dbb      	ldrb	r3, [r7, #22]
 80092f2:	e000      	b.n	80092f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80092f4:	2300      	movs	r3, #0
}
 80092f6:	4618      	mov	r0, r3
 80092f8:	3718      	adds	r7, #24
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80092fe:	b580      	push	{r7, lr}
 8009300:	b084      	sub	sp, #16
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009306:	2300      	movs	r3, #0
 8009308:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2200      	movs	r2, #0
 800931e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	2200      	movs	r2, #0
 8009324:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009336:	2b00      	cmp	r3, #0
 8009338:	d014      	beq.n	8009364 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d00e      	beq.n	8009364 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800934c:	685b      	ldr	r3, [r3, #4]
 800934e:	687a      	ldr	r2, [r7, #4]
 8009350:	6852      	ldr	r2, [r2, #4]
 8009352:	b2d2      	uxtb	r2, r2
 8009354:	4611      	mov	r1, r2
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	4798      	blx	r3
 800935a:	4603      	mov	r3, r0
 800935c:	2b00      	cmp	r3, #0
 800935e:	d001      	beq.n	8009364 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8009360:	2303      	movs	r3, #3
 8009362:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009364:	2340      	movs	r3, #64	; 0x40
 8009366:	2200      	movs	r2, #0
 8009368:	2100      	movs	r1, #0
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f001 fc09 	bl	800ab82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2201      	movs	r2, #1
 8009374:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2240      	movs	r2, #64	; 0x40
 800937c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8009380:	2340      	movs	r3, #64	; 0x40
 8009382:	2200      	movs	r2, #0
 8009384:	2180      	movs	r1, #128	; 0x80
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f001 fbfb 	bl	800ab82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2240      	movs	r2, #64	; 0x40
 8009396:	621a      	str	r2, [r3, #32]

  return ret;
 8009398:	7bfb      	ldrb	r3, [r7, #15]
}
 800939a:	4618      	mov	r0, r3
 800939c:	3710      	adds	r7, #16
 800939e:	46bd      	mov	sp, r7
 80093a0:	bd80      	pop	{r7, pc}

080093a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80093a2:	b480      	push	{r7}
 80093a4:	b083      	sub	sp, #12
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	6078      	str	r0, [r7, #4]
 80093aa:	460b      	mov	r3, r1
 80093ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	78fa      	ldrb	r2, [r7, #3]
 80093b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	370c      	adds	r7, #12
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b083      	sub	sp, #12
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2204      	movs	r2, #4
 80093dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80093e0:	2300      	movs	r3, #0
}
 80093e2:	4618      	mov	r0, r3
 80093e4:	370c      	adds	r7, #12
 80093e6:	46bd      	mov	sp, r7
 80093e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ec:	4770      	bx	lr

080093ee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80093ee:	b480      	push	{r7}
 80093f0:	b083      	sub	sp, #12
 80093f2:	af00      	add	r7, sp, #0
 80093f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093fc:	b2db      	uxtb	r3, r3
 80093fe:	2b04      	cmp	r3, #4
 8009400:	d106      	bne.n	8009410 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8009408:	b2da      	uxtb	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009410:	2300      	movs	r3, #0
}
 8009412:	4618      	mov	r0, r3
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr

0800941e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800941e:	b580      	push	{r7, lr}
 8009420:	b082      	sub	sp, #8
 8009422:	af00      	add	r7, sp, #0
 8009424:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800942c:	b2db      	uxtb	r3, r3
 800942e:	2b03      	cmp	r3, #3
 8009430:	d110      	bne.n	8009454 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009438:	2b00      	cmp	r3, #0
 800943a:	d00b      	beq.n	8009454 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009442:	69db      	ldr	r3, [r3, #28]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d005      	beq.n	8009454 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800944e:	69db      	ldr	r3, [r3, #28]
 8009450:	6878      	ldr	r0, [r7, #4]
 8009452:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009454:	2300      	movs	r3, #0
}
 8009456:	4618      	mov	r0, r3
 8009458:	3708      	adds	r7, #8
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}

0800945e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800945e:	b580      	push	{r7, lr}
 8009460:	b082      	sub	sp, #8
 8009462:	af00      	add	r7, sp, #0
 8009464:	6078      	str	r0, [r7, #4]
 8009466:	460b      	mov	r3, r1
 8009468:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	32ae      	adds	r2, #174	; 0xae
 8009474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800947c:	2303      	movs	r3, #3
 800947e:	e01c      	b.n	80094ba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009486:	b2db      	uxtb	r3, r3
 8009488:	2b03      	cmp	r3, #3
 800948a:	d115      	bne.n	80094b8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	32ae      	adds	r2, #174	; 0xae
 8009496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800949a:	6a1b      	ldr	r3, [r3, #32]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00b      	beq.n	80094b8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	32ae      	adds	r2, #174	; 0xae
 80094aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094ae:	6a1b      	ldr	r3, [r3, #32]
 80094b0:	78fa      	ldrb	r2, [r7, #3]
 80094b2:	4611      	mov	r1, r2
 80094b4:	6878      	ldr	r0, [r7, #4]
 80094b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b082      	sub	sp, #8
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
 80094ca:	460b      	mov	r3, r1
 80094cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	32ae      	adds	r2, #174	; 0xae
 80094d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80094e0:	2303      	movs	r3, #3
 80094e2:	e01c      	b.n	800951e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094ea:	b2db      	uxtb	r3, r3
 80094ec:	2b03      	cmp	r3, #3
 80094ee:	d115      	bne.n	800951c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	32ae      	adds	r2, #174	; 0xae
 80094fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80094fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009500:	2b00      	cmp	r3, #0
 8009502:	d00b      	beq.n	800951c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	32ae      	adds	r2, #174	; 0xae
 800950e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009514:	78fa      	ldrb	r2, [r7, #3]
 8009516:	4611      	mov	r1, r2
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800951c:	2300      	movs	r3, #0
}
 800951e:	4618      	mov	r0, r3
 8009520:	3708      	adds	r7, #8
 8009522:	46bd      	mov	sp, r7
 8009524:	bd80      	pop	{r7, pc}

08009526 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8009526:	b480      	push	{r7}
 8009528:	b083      	sub	sp, #12
 800952a:	af00      	add	r7, sp, #0
 800952c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800952e:	2300      	movs	r3, #0
}
 8009530:	4618      	mov	r0, r3
 8009532:	370c      	adds	r7, #12
 8009534:	46bd      	mov	sp, r7
 8009536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953a:	4770      	bx	lr

0800953c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800953c:	b580      	push	{r7, lr}
 800953e:	b084      	sub	sp, #16
 8009540:	af00      	add	r7, sp, #0
 8009542:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009544:	2300      	movs	r3, #0
 8009546:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	2201      	movs	r2, #1
 800954c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009556:	2b00      	cmp	r3, #0
 8009558:	d00e      	beq.n	8009578 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	6852      	ldr	r2, [r2, #4]
 8009566:	b2d2      	uxtb	r2, r2
 8009568:	4611      	mov	r1, r2
 800956a:	6878      	ldr	r0, [r7, #4]
 800956c:	4798      	blx	r3
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d001      	beq.n	8009578 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009574:	2303      	movs	r3, #3
 8009576:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009578:	7bfb      	ldrb	r3, [r7, #15]
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009582:	b480      	push	{r7}
 8009584:	b083      	sub	sp, #12
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
 800958a:	460b      	mov	r3, r1
 800958c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800958e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009590:	4618      	mov	r0, r3
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
 80095a4:	460b      	mov	r3, r1
 80095a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80095a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80095aa:	4618      	mov	r0, r3
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b086      	sub	sp, #24
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
 80095be:	460b      	mov	r3, r1
 80095c0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80095ca:	2300      	movs	r3, #0
 80095cc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	885b      	ldrh	r3, [r3, #2]
 80095d2:	b29a      	uxth	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	b29b      	uxth	r3, r3
 80095da:	429a      	cmp	r2, r3
 80095dc:	d920      	bls.n	8009620 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	781b      	ldrb	r3, [r3, #0]
 80095e2:	b29b      	uxth	r3, r3
 80095e4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80095e6:	e013      	b.n	8009610 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80095e8:	f107 030a 	add.w	r3, r7, #10
 80095ec:	4619      	mov	r1, r3
 80095ee:	6978      	ldr	r0, [r7, #20]
 80095f0:	f000 f81b 	bl	800962a <USBD_GetNextDesc>
 80095f4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	785b      	ldrb	r3, [r3, #1]
 80095fa:	2b05      	cmp	r3, #5
 80095fc:	d108      	bne.n	8009610 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009602:	693b      	ldr	r3, [r7, #16]
 8009604:	789b      	ldrb	r3, [r3, #2]
 8009606:	78fa      	ldrb	r2, [r7, #3]
 8009608:	429a      	cmp	r2, r3
 800960a:	d008      	beq.n	800961e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800960c:	2300      	movs	r3, #0
 800960e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	885b      	ldrh	r3, [r3, #2]
 8009614:	b29a      	uxth	r2, r3
 8009616:	897b      	ldrh	r3, [r7, #10]
 8009618:	429a      	cmp	r2, r3
 800961a:	d8e5      	bhi.n	80095e8 <USBD_GetEpDesc+0x32>
 800961c:	e000      	b.n	8009620 <USBD_GetEpDesc+0x6a>
          break;
 800961e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009620:	693b      	ldr	r3, [r7, #16]
}
 8009622:	4618      	mov	r0, r3
 8009624:	3718      	adds	r7, #24
 8009626:	46bd      	mov	sp, r7
 8009628:	bd80      	pop	{r7, pc}

0800962a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800962a:	b480      	push	{r7}
 800962c:	b085      	sub	sp, #20
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
 8009632:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	881a      	ldrh	r2, [r3, #0]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	b29b      	uxth	r3, r3
 8009642:	4413      	add	r3, r2
 8009644:	b29a      	uxth	r2, r3
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	461a      	mov	r2, r3
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	4413      	add	r3, r2
 8009654:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009656:	68fb      	ldr	r3, [r7, #12]
}
 8009658:	4618      	mov	r0, r3
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009664:	b480      	push	{r7}
 8009666:	b087      	sub	sp, #28
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	781b      	ldrb	r3, [r3, #0]
 8009674:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	3301      	adds	r3, #1
 800967a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800967c:	697b      	ldr	r3, [r7, #20]
 800967e:	781b      	ldrb	r3, [r3, #0]
 8009680:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009682:	8a3b      	ldrh	r3, [r7, #16]
 8009684:	021b      	lsls	r3, r3, #8
 8009686:	b21a      	sxth	r2, r3
 8009688:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800968c:	4313      	orrs	r3, r2
 800968e:	b21b      	sxth	r3, r3
 8009690:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009692:	89fb      	ldrh	r3, [r7, #14]
}
 8009694:	4618      	mov	r0, r3
 8009696:	371c      	adds	r7, #28
 8009698:	46bd      	mov	sp, r7
 800969a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969e:	4770      	bx	lr

080096a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80096aa:	2300      	movs	r3, #0
 80096ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80096b6:	2b40      	cmp	r3, #64	; 0x40
 80096b8:	d005      	beq.n	80096c6 <USBD_StdDevReq+0x26>
 80096ba:	2b40      	cmp	r3, #64	; 0x40
 80096bc:	d857      	bhi.n	800976e <USBD_StdDevReq+0xce>
 80096be:	2b00      	cmp	r3, #0
 80096c0:	d00f      	beq.n	80096e2 <USBD_StdDevReq+0x42>
 80096c2:	2b20      	cmp	r3, #32
 80096c4:	d153      	bne.n	800976e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	32ae      	adds	r2, #174	; 0xae
 80096d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	6839      	ldr	r1, [r7, #0]
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	4798      	blx	r3
 80096dc:	4603      	mov	r3, r0
 80096de:	73fb      	strb	r3, [r7, #15]
      break;
 80096e0:	e04a      	b.n	8009778 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	785b      	ldrb	r3, [r3, #1]
 80096e6:	2b09      	cmp	r3, #9
 80096e8:	d83b      	bhi.n	8009762 <USBD_StdDevReq+0xc2>
 80096ea:	a201      	add	r2, pc, #4	; (adr r2, 80096f0 <USBD_StdDevReq+0x50>)
 80096ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096f0:	08009745 	.word	0x08009745
 80096f4:	08009759 	.word	0x08009759
 80096f8:	08009763 	.word	0x08009763
 80096fc:	0800974f 	.word	0x0800974f
 8009700:	08009763 	.word	0x08009763
 8009704:	08009723 	.word	0x08009723
 8009708:	08009719 	.word	0x08009719
 800970c:	08009763 	.word	0x08009763
 8009710:	0800973b 	.word	0x0800973b
 8009714:	0800972d 	.word	0x0800972d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009718:	6839      	ldr	r1, [r7, #0]
 800971a:	6878      	ldr	r0, [r7, #4]
 800971c:	f000 fa3c 	bl	8009b98 <USBD_GetDescriptor>
          break;
 8009720:	e024      	b.n	800976c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009722:	6839      	ldr	r1, [r7, #0]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 fba1 	bl	8009e6c <USBD_SetAddress>
          break;
 800972a:	e01f      	b.n	800976c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800972c:	6839      	ldr	r1, [r7, #0]
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fbe0 	bl	8009ef4 <USBD_SetConfig>
 8009734:	4603      	mov	r3, r0
 8009736:	73fb      	strb	r3, [r7, #15]
          break;
 8009738:	e018      	b.n	800976c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800973a:	6839      	ldr	r1, [r7, #0]
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fc83 	bl	800a048 <USBD_GetConfig>
          break;
 8009742:	e013      	b.n	800976c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009744:	6839      	ldr	r1, [r7, #0]
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f000 fcb4 	bl	800a0b4 <USBD_GetStatus>
          break;
 800974c:	e00e      	b.n	800976c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800974e:	6839      	ldr	r1, [r7, #0]
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f000 fce3 	bl	800a11c <USBD_SetFeature>
          break;
 8009756:	e009      	b.n	800976c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fd07 	bl	800a16e <USBD_ClrFeature>
          break;
 8009760:	e004      	b.n	800976c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8009762:	6839      	ldr	r1, [r7, #0]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f000 fd5e 	bl	800a226 <USBD_CtlError>
          break;
 800976a:	bf00      	nop
      }
      break;
 800976c:	e004      	b.n	8009778 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800976e:	6839      	ldr	r1, [r7, #0]
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fd58 	bl	800a226 <USBD_CtlError>
      break;
 8009776:	bf00      	nop
  }

  return ret;
 8009778:	7bfb      	ldrb	r3, [r7, #15]
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}
 8009782:	bf00      	nop

08009784 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
 800978c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800978e:	2300      	movs	r3, #0
 8009790:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009792:	683b      	ldr	r3, [r7, #0]
 8009794:	781b      	ldrb	r3, [r3, #0]
 8009796:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800979a:	2b40      	cmp	r3, #64	; 0x40
 800979c:	d005      	beq.n	80097aa <USBD_StdItfReq+0x26>
 800979e:	2b40      	cmp	r3, #64	; 0x40
 80097a0:	d852      	bhi.n	8009848 <USBD_StdItfReq+0xc4>
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d001      	beq.n	80097aa <USBD_StdItfReq+0x26>
 80097a6:	2b20      	cmp	r3, #32
 80097a8:	d14e      	bne.n	8009848 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80097b0:	b2db      	uxtb	r3, r3
 80097b2:	3b01      	subs	r3, #1
 80097b4:	2b02      	cmp	r3, #2
 80097b6:	d840      	bhi.n	800983a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	889b      	ldrh	r3, [r3, #4]
 80097bc:	b2db      	uxtb	r3, r3
 80097be:	2b01      	cmp	r3, #1
 80097c0:	d836      	bhi.n	8009830 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80097c2:	683b      	ldr	r3, [r7, #0]
 80097c4:	889b      	ldrh	r3, [r3, #4]
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	4619      	mov	r1, r3
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f7ff fed9 	bl	8009582 <USBD_CoreFindIF>
 80097d0:	4603      	mov	r3, r0
 80097d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80097d4:	7bbb      	ldrb	r3, [r7, #14]
 80097d6:	2bff      	cmp	r3, #255	; 0xff
 80097d8:	d01d      	beq.n	8009816 <USBD_StdItfReq+0x92>
 80097da:	7bbb      	ldrb	r3, [r7, #14]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d11a      	bne.n	8009816 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80097e0:	7bba      	ldrb	r2, [r7, #14]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	32ae      	adds	r2, #174	; 0xae
 80097e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d00f      	beq.n	8009810 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80097f0:	7bba      	ldrb	r2, [r7, #14]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80097f8:	7bba      	ldrb	r2, [r7, #14]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	32ae      	adds	r2, #174	; 0xae
 80097fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009802:	689b      	ldr	r3, [r3, #8]
 8009804:	6839      	ldr	r1, [r7, #0]
 8009806:	6878      	ldr	r0, [r7, #4]
 8009808:	4798      	blx	r3
 800980a:	4603      	mov	r3, r0
 800980c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800980e:	e004      	b.n	800981a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009810:	2303      	movs	r3, #3
 8009812:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009814:	e001      	b.n	800981a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009816:	2303      	movs	r3, #3
 8009818:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	88db      	ldrh	r3, [r3, #6]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d110      	bne.n	8009844 <USBD_StdItfReq+0xc0>
 8009822:	7bfb      	ldrb	r3, [r7, #15]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d10d      	bne.n	8009844 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009828:	6878      	ldr	r0, [r7, #4]
 800982a:	f000 fdc7 	bl	800a3bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800982e:	e009      	b.n	8009844 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009830:	6839      	ldr	r1, [r7, #0]
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fcf7 	bl	800a226 <USBD_CtlError>
          break;
 8009838:	e004      	b.n	8009844 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fcf2 	bl	800a226 <USBD_CtlError>
          break;
 8009842:	e000      	b.n	8009846 <USBD_StdItfReq+0xc2>
          break;
 8009844:	bf00      	nop
      }
      break;
 8009846:	e004      	b.n	8009852 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 fceb 	bl	800a226 <USBD_CtlError>
      break;
 8009850:	bf00      	nop
  }

  return ret;
 8009852:	7bfb      	ldrb	r3, [r7, #15]
}
 8009854:	4618      	mov	r0, r3
 8009856:	3710      	adds	r7, #16
 8009858:	46bd      	mov	sp, r7
 800985a:	bd80      	pop	{r7, pc}

0800985c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800985c:	b580      	push	{r7, lr}
 800985e:	b084      	sub	sp, #16
 8009860:	af00      	add	r7, sp, #0
 8009862:	6078      	str	r0, [r7, #4]
 8009864:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009866:	2300      	movs	r3, #0
 8009868:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	889b      	ldrh	r3, [r3, #4]
 800986e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009870:	683b      	ldr	r3, [r7, #0]
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009878:	2b40      	cmp	r3, #64	; 0x40
 800987a:	d007      	beq.n	800988c <USBD_StdEPReq+0x30>
 800987c:	2b40      	cmp	r3, #64	; 0x40
 800987e:	f200 817f 	bhi.w	8009b80 <USBD_StdEPReq+0x324>
 8009882:	2b00      	cmp	r3, #0
 8009884:	d02a      	beq.n	80098dc <USBD_StdEPReq+0x80>
 8009886:	2b20      	cmp	r3, #32
 8009888:	f040 817a 	bne.w	8009b80 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800988c:	7bbb      	ldrb	r3, [r7, #14]
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7ff fe83 	bl	800959c <USBD_CoreFindEP>
 8009896:	4603      	mov	r3, r0
 8009898:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800989a:	7b7b      	ldrb	r3, [r7, #13]
 800989c:	2bff      	cmp	r3, #255	; 0xff
 800989e:	f000 8174 	beq.w	8009b8a <USBD_StdEPReq+0x32e>
 80098a2:	7b7b      	ldrb	r3, [r7, #13]
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	f040 8170 	bne.w	8009b8a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80098aa:	7b7a      	ldrb	r2, [r7, #13]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80098b2:	7b7a      	ldrb	r2, [r7, #13]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	32ae      	adds	r2, #174	; 0xae
 80098b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098bc:	689b      	ldr	r3, [r3, #8]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	f000 8163 	beq.w	8009b8a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80098c4:	7b7a      	ldrb	r2, [r7, #13]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	32ae      	adds	r2, #174	; 0xae
 80098ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098ce:	689b      	ldr	r3, [r3, #8]
 80098d0:	6839      	ldr	r1, [r7, #0]
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	4798      	blx	r3
 80098d6:	4603      	mov	r3, r0
 80098d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80098da:	e156      	b.n	8009b8a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	785b      	ldrb	r3, [r3, #1]
 80098e0:	2b03      	cmp	r3, #3
 80098e2:	d008      	beq.n	80098f6 <USBD_StdEPReq+0x9a>
 80098e4:	2b03      	cmp	r3, #3
 80098e6:	f300 8145 	bgt.w	8009b74 <USBD_StdEPReq+0x318>
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	f000 809b 	beq.w	8009a26 <USBD_StdEPReq+0x1ca>
 80098f0:	2b01      	cmp	r3, #1
 80098f2:	d03c      	beq.n	800996e <USBD_StdEPReq+0x112>
 80098f4:	e13e      	b.n	8009b74 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b02      	cmp	r3, #2
 8009900:	d002      	beq.n	8009908 <USBD_StdEPReq+0xac>
 8009902:	2b03      	cmp	r3, #3
 8009904:	d016      	beq.n	8009934 <USBD_StdEPReq+0xd8>
 8009906:	e02c      	b.n	8009962 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009908:	7bbb      	ldrb	r3, [r7, #14]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00d      	beq.n	800992a <USBD_StdEPReq+0xce>
 800990e:	7bbb      	ldrb	r3, [r7, #14]
 8009910:	2b80      	cmp	r3, #128	; 0x80
 8009912:	d00a      	beq.n	800992a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009914:	7bbb      	ldrb	r3, [r7, #14]
 8009916:	4619      	mov	r1, r3
 8009918:	6878      	ldr	r0, [r7, #4]
 800991a:	f001 f977 	bl	800ac0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800991e:	2180      	movs	r1, #128	; 0x80
 8009920:	6878      	ldr	r0, [r7, #4]
 8009922:	f001 f973 	bl	800ac0c <USBD_LL_StallEP>
 8009926:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009928:	e020      	b.n	800996c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800992a:	6839      	ldr	r1, [r7, #0]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f000 fc7a 	bl	800a226 <USBD_CtlError>
              break;
 8009932:	e01b      	b.n	800996c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009934:	683b      	ldr	r3, [r7, #0]
 8009936:	885b      	ldrh	r3, [r3, #2]
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10e      	bne.n	800995a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800993c:	7bbb      	ldrb	r3, [r7, #14]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d00b      	beq.n	800995a <USBD_StdEPReq+0xfe>
 8009942:	7bbb      	ldrb	r3, [r7, #14]
 8009944:	2b80      	cmp	r3, #128	; 0x80
 8009946:	d008      	beq.n	800995a <USBD_StdEPReq+0xfe>
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	88db      	ldrh	r3, [r3, #6]
 800994c:	2b00      	cmp	r3, #0
 800994e:	d104      	bne.n	800995a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009950:	7bbb      	ldrb	r3, [r7, #14]
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f001 f959 	bl	800ac0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fd2e 	bl	800a3bc <USBD_CtlSendStatus>

              break;
 8009960:	e004      	b.n	800996c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009962:	6839      	ldr	r1, [r7, #0]
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fc5e 	bl	800a226 <USBD_CtlError>
              break;
 800996a:	bf00      	nop
          }
          break;
 800996c:	e107      	b.n	8009b7e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009974:	b2db      	uxtb	r3, r3
 8009976:	2b02      	cmp	r3, #2
 8009978:	d002      	beq.n	8009980 <USBD_StdEPReq+0x124>
 800997a:	2b03      	cmp	r3, #3
 800997c:	d016      	beq.n	80099ac <USBD_StdEPReq+0x150>
 800997e:	e04b      	b.n	8009a18 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009980:	7bbb      	ldrb	r3, [r7, #14]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00d      	beq.n	80099a2 <USBD_StdEPReq+0x146>
 8009986:	7bbb      	ldrb	r3, [r7, #14]
 8009988:	2b80      	cmp	r3, #128	; 0x80
 800998a:	d00a      	beq.n	80099a2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800998c:	7bbb      	ldrb	r3, [r7, #14]
 800998e:	4619      	mov	r1, r3
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f001 f93b 	bl	800ac0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009996:	2180      	movs	r1, #128	; 0x80
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f001 f937 	bl	800ac0c <USBD_LL_StallEP>
 800999e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80099a0:	e040      	b.n	8009a24 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80099a2:	6839      	ldr	r1, [r7, #0]
 80099a4:	6878      	ldr	r0, [r7, #4]
 80099a6:	f000 fc3e 	bl	800a226 <USBD_CtlError>
              break;
 80099aa:	e03b      	b.n	8009a24 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	885b      	ldrh	r3, [r3, #2]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d136      	bne.n	8009a22 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80099b4:	7bbb      	ldrb	r3, [r7, #14]
 80099b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d004      	beq.n	80099c8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80099be:	7bbb      	ldrb	r3, [r7, #14]
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f001 f941 	bl	800ac4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80099c8:	6878      	ldr	r0, [r7, #4]
 80099ca:	f000 fcf7 	bl	800a3bc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80099ce:	7bbb      	ldrb	r3, [r7, #14]
 80099d0:	4619      	mov	r1, r3
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f7ff fde2 	bl	800959c <USBD_CoreFindEP>
 80099d8:	4603      	mov	r3, r0
 80099da:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80099dc:	7b7b      	ldrb	r3, [r7, #13]
 80099de:	2bff      	cmp	r3, #255	; 0xff
 80099e0:	d01f      	beq.n	8009a22 <USBD_StdEPReq+0x1c6>
 80099e2:	7b7b      	ldrb	r3, [r7, #13]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d11c      	bne.n	8009a22 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80099e8:	7b7a      	ldrb	r2, [r7, #13]
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80099f0:	7b7a      	ldrb	r2, [r7, #13]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	32ae      	adds	r2, #174	; 0xae
 80099f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d010      	beq.n	8009a22 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a00:	7b7a      	ldrb	r2, [r7, #13]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	32ae      	adds	r2, #174	; 0xae
 8009a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	4798      	blx	r3
 8009a12:	4603      	mov	r3, r0
 8009a14:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009a16:	e004      	b.n	8009a22 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009a18:	6839      	ldr	r1, [r7, #0]
 8009a1a:	6878      	ldr	r0, [r7, #4]
 8009a1c:	f000 fc03 	bl	800a226 <USBD_CtlError>
              break;
 8009a20:	e000      	b.n	8009a24 <USBD_StdEPReq+0x1c8>
              break;
 8009a22:	bf00      	nop
          }
          break;
 8009a24:	e0ab      	b.n	8009b7e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a2c:	b2db      	uxtb	r3, r3
 8009a2e:	2b02      	cmp	r3, #2
 8009a30:	d002      	beq.n	8009a38 <USBD_StdEPReq+0x1dc>
 8009a32:	2b03      	cmp	r3, #3
 8009a34:	d032      	beq.n	8009a9c <USBD_StdEPReq+0x240>
 8009a36:	e097      	b.n	8009b68 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009a38:	7bbb      	ldrb	r3, [r7, #14]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d007      	beq.n	8009a4e <USBD_StdEPReq+0x1f2>
 8009a3e:	7bbb      	ldrb	r3, [r7, #14]
 8009a40:	2b80      	cmp	r3, #128	; 0x80
 8009a42:	d004      	beq.n	8009a4e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009a44:	6839      	ldr	r1, [r7, #0]
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f000 fbed 	bl	800a226 <USBD_CtlError>
                break;
 8009a4c:	e091      	b.n	8009b72 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	da0b      	bge.n	8009a6e <USBD_StdEPReq+0x212>
 8009a56:	7bbb      	ldrb	r3, [r7, #14]
 8009a58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	009b      	lsls	r3, r3, #2
 8009a60:	4413      	add	r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	3310      	adds	r3, #16
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	4413      	add	r3, r2
 8009a6a:	3304      	adds	r3, #4
 8009a6c:	e00b      	b.n	8009a86 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009a6e:	7bbb      	ldrb	r3, [r7, #14]
 8009a70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009a74:	4613      	mov	r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4413      	add	r3, r2
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	4413      	add	r3, r2
 8009a84:	3304      	adds	r3, #4
 8009a86:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009a88:	68bb      	ldr	r3, [r7, #8]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	2202      	movs	r2, #2
 8009a92:	4619      	mov	r1, r3
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	f000 fc37 	bl	800a308 <USBD_CtlSendData>
              break;
 8009a9a:	e06a      	b.n	8009b72 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009a9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009aa0:	2b00      	cmp	r3, #0
 8009aa2:	da11      	bge.n	8009ac8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009aa4:	7bbb      	ldrb	r3, [r7, #14]
 8009aa6:	f003 020f 	and.w	r2, r3, #15
 8009aaa:	6879      	ldr	r1, [r7, #4]
 8009aac:	4613      	mov	r3, r2
 8009aae:	009b      	lsls	r3, r3, #2
 8009ab0:	4413      	add	r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	440b      	add	r3, r1
 8009ab6:	3324      	adds	r3, #36	; 0x24
 8009ab8:	881b      	ldrh	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d117      	bne.n	8009aee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009abe:	6839      	ldr	r1, [r7, #0]
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 fbb0 	bl	800a226 <USBD_CtlError>
                  break;
 8009ac6:	e054      	b.n	8009b72 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009ac8:	7bbb      	ldrb	r3, [r7, #14]
 8009aca:	f003 020f 	and.w	r2, r3, #15
 8009ace:	6879      	ldr	r1, [r7, #4]
 8009ad0:	4613      	mov	r3, r2
 8009ad2:	009b      	lsls	r3, r3, #2
 8009ad4:	4413      	add	r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	440b      	add	r3, r1
 8009ada:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009ade:	881b      	ldrh	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d104      	bne.n	8009aee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009ae4:	6839      	ldr	r1, [r7, #0]
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f000 fb9d 	bl	800a226 <USBD_CtlError>
                  break;
 8009aec:	e041      	b.n	8009b72 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009aee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	da0b      	bge.n	8009b0e <USBD_StdEPReq+0x2b2>
 8009af6:	7bbb      	ldrb	r3, [r7, #14]
 8009af8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009afc:	4613      	mov	r3, r2
 8009afe:	009b      	lsls	r3, r3, #2
 8009b00:	4413      	add	r3, r2
 8009b02:	009b      	lsls	r3, r3, #2
 8009b04:	3310      	adds	r3, #16
 8009b06:	687a      	ldr	r2, [r7, #4]
 8009b08:	4413      	add	r3, r2
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	e00b      	b.n	8009b26 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009b0e:	7bbb      	ldrb	r3, [r7, #14]
 8009b10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009b14:	4613      	mov	r3, r2
 8009b16:	009b      	lsls	r3, r3, #2
 8009b18:	4413      	add	r3, r2
 8009b1a:	009b      	lsls	r3, r3, #2
 8009b1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009b20:	687a      	ldr	r2, [r7, #4]
 8009b22:	4413      	add	r3, r2
 8009b24:	3304      	adds	r3, #4
 8009b26:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009b28:	7bbb      	ldrb	r3, [r7, #14]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d002      	beq.n	8009b34 <USBD_StdEPReq+0x2d8>
 8009b2e:	7bbb      	ldrb	r3, [r7, #14]
 8009b30:	2b80      	cmp	r3, #128	; 0x80
 8009b32:	d103      	bne.n	8009b3c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	2200      	movs	r2, #0
 8009b38:	601a      	str	r2, [r3, #0]
 8009b3a:	e00e      	b.n	8009b5a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009b3c:	7bbb      	ldrb	r3, [r7, #14]
 8009b3e:	4619      	mov	r1, r3
 8009b40:	6878      	ldr	r0, [r7, #4]
 8009b42:	f001 f8a1 	bl	800ac88 <USBD_LL_IsStallEP>
 8009b46:	4603      	mov	r3, r0
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d003      	beq.n	8009b54 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009b4c:	68bb      	ldr	r3, [r7, #8]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	601a      	str	r2, [r3, #0]
 8009b52:	e002      	b.n	8009b5a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	2200      	movs	r2, #0
 8009b58:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009b5a:	68bb      	ldr	r3, [r7, #8]
 8009b5c:	2202      	movs	r2, #2
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f000 fbd1 	bl	800a308 <USBD_CtlSendData>
              break;
 8009b66:	e004      	b.n	8009b72 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009b68:	6839      	ldr	r1, [r7, #0]
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 fb5b 	bl	800a226 <USBD_CtlError>
              break;
 8009b70:	bf00      	nop
          }
          break;
 8009b72:	e004      	b.n	8009b7e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009b74:	6839      	ldr	r1, [r7, #0]
 8009b76:	6878      	ldr	r0, [r7, #4]
 8009b78:	f000 fb55 	bl	800a226 <USBD_CtlError>
          break;
 8009b7c:	bf00      	nop
      }
      break;
 8009b7e:	e005      	b.n	8009b8c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009b80:	6839      	ldr	r1, [r7, #0]
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 fb4f 	bl	800a226 <USBD_CtlError>
      break;
 8009b88:	e000      	b.n	8009b8c <USBD_StdEPReq+0x330>
      break;
 8009b8a:	bf00      	nop
  }

  return ret;
 8009b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
	...

08009b98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009ba2:	2300      	movs	r3, #0
 8009ba4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009baa:	2300      	movs	r3, #0
 8009bac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009bae:	683b      	ldr	r3, [r7, #0]
 8009bb0:	885b      	ldrh	r3, [r3, #2]
 8009bb2:	0a1b      	lsrs	r3, r3, #8
 8009bb4:	b29b      	uxth	r3, r3
 8009bb6:	3b01      	subs	r3, #1
 8009bb8:	2b06      	cmp	r3, #6
 8009bba:	f200 8128 	bhi.w	8009e0e <USBD_GetDescriptor+0x276>
 8009bbe:	a201      	add	r2, pc, #4	; (adr r2, 8009bc4 <USBD_GetDescriptor+0x2c>)
 8009bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bc4:	08009be1 	.word	0x08009be1
 8009bc8:	08009bf9 	.word	0x08009bf9
 8009bcc:	08009c39 	.word	0x08009c39
 8009bd0:	08009e0f 	.word	0x08009e0f
 8009bd4:	08009e0f 	.word	0x08009e0f
 8009bd8:	08009daf 	.word	0x08009daf
 8009bdc:	08009ddb 	.word	0x08009ddb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	687a      	ldr	r2, [r7, #4]
 8009bea:	7c12      	ldrb	r2, [r2, #16]
 8009bec:	f107 0108 	add.w	r1, r7, #8
 8009bf0:	4610      	mov	r0, r2
 8009bf2:	4798      	blx	r3
 8009bf4:	60f8      	str	r0, [r7, #12]
      break;
 8009bf6:	e112      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	7c1b      	ldrb	r3, [r3, #16]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d10d      	bne.n	8009c1c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c08:	f107 0208 	add.w	r2, r7, #8
 8009c0c:	4610      	mov	r0, r2
 8009c0e:	4798      	blx	r3
 8009c10:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	2202      	movs	r2, #2
 8009c18:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009c1a:	e100      	b.n	8009e1e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c24:	f107 0208 	add.w	r2, r7, #8
 8009c28:	4610      	mov	r0, r2
 8009c2a:	4798      	blx	r3
 8009c2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	3301      	adds	r3, #1
 8009c32:	2202      	movs	r2, #2
 8009c34:	701a      	strb	r2, [r3, #0]
      break;
 8009c36:	e0f2      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	885b      	ldrh	r3, [r3, #2]
 8009c3c:	b2db      	uxtb	r3, r3
 8009c3e:	2b05      	cmp	r3, #5
 8009c40:	f200 80ac 	bhi.w	8009d9c <USBD_GetDescriptor+0x204>
 8009c44:	a201      	add	r2, pc, #4	; (adr r2, 8009c4c <USBD_GetDescriptor+0xb4>)
 8009c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4a:	bf00      	nop
 8009c4c:	08009c65 	.word	0x08009c65
 8009c50:	08009c99 	.word	0x08009c99
 8009c54:	08009ccd 	.word	0x08009ccd
 8009c58:	08009d01 	.word	0x08009d01
 8009c5c:	08009d35 	.word	0x08009d35
 8009c60:	08009d69 	.word	0x08009d69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d00b      	beq.n	8009c88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	687a      	ldr	r2, [r7, #4]
 8009c7a:	7c12      	ldrb	r2, [r2, #16]
 8009c7c:	f107 0108 	add.w	r1, r7, #8
 8009c80:	4610      	mov	r0, r2
 8009c82:	4798      	blx	r3
 8009c84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009c86:	e091      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009c88:	6839      	ldr	r1, [r7, #0]
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 facb 	bl	800a226 <USBD_CtlError>
            err++;
 8009c90:	7afb      	ldrb	r3, [r7, #11]
 8009c92:	3301      	adds	r3, #1
 8009c94:	72fb      	strb	r3, [r7, #11]
          break;
 8009c96:	e089      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d00b      	beq.n	8009cbc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	7c12      	ldrb	r2, [r2, #16]
 8009cb0:	f107 0108 	add.w	r1, r7, #8
 8009cb4:	4610      	mov	r0, r2
 8009cb6:	4798      	blx	r3
 8009cb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cba:	e077      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cbc:	6839      	ldr	r1, [r7, #0]
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fab1 	bl	800a226 <USBD_CtlError>
            err++;
 8009cc4:	7afb      	ldrb	r3, [r7, #11]
 8009cc6:	3301      	adds	r3, #1
 8009cc8:	72fb      	strb	r3, [r7, #11]
          break;
 8009cca:	e06f      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cd2:	68db      	ldr	r3, [r3, #12]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d00b      	beq.n	8009cf0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009cde:	68db      	ldr	r3, [r3, #12]
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	7c12      	ldrb	r2, [r2, #16]
 8009ce4:	f107 0108 	add.w	r1, r7, #8
 8009ce8:	4610      	mov	r0, r2
 8009cea:	4798      	blx	r3
 8009cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009cee:	e05d      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009cf0:	6839      	ldr	r1, [r7, #0]
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 fa97 	bl	800a226 <USBD_CtlError>
            err++;
 8009cf8:	7afb      	ldrb	r3, [r7, #11]
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8009cfe:	e055      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d06:	691b      	ldr	r3, [r3, #16]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d00b      	beq.n	8009d24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	7c12      	ldrb	r2, [r2, #16]
 8009d18:	f107 0108 	add.w	r1, r7, #8
 8009d1c:	4610      	mov	r0, r2
 8009d1e:	4798      	blx	r3
 8009d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d22:	e043      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d24:	6839      	ldr	r1, [r7, #0]
 8009d26:	6878      	ldr	r0, [r7, #4]
 8009d28:	f000 fa7d 	bl	800a226 <USBD_CtlError>
            err++;
 8009d2c:	7afb      	ldrb	r3, [r7, #11]
 8009d2e:	3301      	adds	r3, #1
 8009d30:	72fb      	strb	r3, [r7, #11]
          break;
 8009d32:	e03b      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d3a:	695b      	ldr	r3, [r3, #20]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00b      	beq.n	8009d58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d46:	695b      	ldr	r3, [r3, #20]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	7c12      	ldrb	r2, [r2, #16]
 8009d4c:	f107 0108 	add.w	r1, r7, #8
 8009d50:	4610      	mov	r0, r2
 8009d52:	4798      	blx	r3
 8009d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d56:	e029      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d58:	6839      	ldr	r1, [r7, #0]
 8009d5a:	6878      	ldr	r0, [r7, #4]
 8009d5c:	f000 fa63 	bl	800a226 <USBD_CtlError>
            err++;
 8009d60:	7afb      	ldrb	r3, [r7, #11]
 8009d62:	3301      	adds	r3, #1
 8009d64:	72fb      	strb	r3, [r7, #11]
          break;
 8009d66:	e021      	b.n	8009dac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d6e:	699b      	ldr	r3, [r3, #24]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d00b      	beq.n	8009d8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009d7a:	699b      	ldr	r3, [r3, #24]
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	7c12      	ldrb	r2, [r2, #16]
 8009d80:	f107 0108 	add.w	r1, r7, #8
 8009d84:	4610      	mov	r0, r2
 8009d86:	4798      	blx	r3
 8009d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009d8a:	e00f      	b.n	8009dac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009d8c:	6839      	ldr	r1, [r7, #0]
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f000 fa49 	bl	800a226 <USBD_CtlError>
            err++;
 8009d94:	7afb      	ldrb	r3, [r7, #11]
 8009d96:	3301      	adds	r3, #1
 8009d98:	72fb      	strb	r3, [r7, #11]
          break;
 8009d9a:	e007      	b.n	8009dac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009d9c:	6839      	ldr	r1, [r7, #0]
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f000 fa41 	bl	800a226 <USBD_CtlError>
          err++;
 8009da4:	7afb      	ldrb	r3, [r7, #11]
 8009da6:	3301      	adds	r3, #1
 8009da8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009daa:	bf00      	nop
      }
      break;
 8009dac:	e037      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	7c1b      	ldrb	r3, [r3, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d109      	bne.n	8009dca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dbe:	f107 0208 	add.w	r2, r7, #8
 8009dc2:	4610      	mov	r0, r2
 8009dc4:	4798      	blx	r3
 8009dc6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dc8:	e029      	b.n	8009e1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dca:	6839      	ldr	r1, [r7, #0]
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	f000 fa2a 	bl	800a226 <USBD_CtlError>
        err++;
 8009dd2:	7afb      	ldrb	r3, [r7, #11]
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	72fb      	strb	r3, [r7, #11]
      break;
 8009dd8:	e021      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	7c1b      	ldrb	r3, [r3, #16]
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d10d      	bne.n	8009dfe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dea:	f107 0208 	add.w	r2, r7, #8
 8009dee:	4610      	mov	r0, r2
 8009df0:	4798      	blx	r3
 8009df2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	3301      	adds	r3, #1
 8009df8:	2207      	movs	r2, #7
 8009dfa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009dfc:	e00f      	b.n	8009e1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009dfe:	6839      	ldr	r1, [r7, #0]
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 fa10 	bl	800a226 <USBD_CtlError>
        err++;
 8009e06:	7afb      	ldrb	r3, [r7, #11]
 8009e08:	3301      	adds	r3, #1
 8009e0a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e0c:	e007      	b.n	8009e1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009e0e:	6839      	ldr	r1, [r7, #0]
 8009e10:	6878      	ldr	r0, [r7, #4]
 8009e12:	f000 fa08 	bl	800a226 <USBD_CtlError>
      err++;
 8009e16:	7afb      	ldrb	r3, [r7, #11]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	72fb      	strb	r3, [r7, #11]
      break;
 8009e1c:	bf00      	nop
  }

  if (err != 0U)
 8009e1e:	7afb      	ldrb	r3, [r7, #11]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d11e      	bne.n	8009e62 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	88db      	ldrh	r3, [r3, #6]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d016      	beq.n	8009e5a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009e2c:	893b      	ldrh	r3, [r7, #8]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d00e      	beq.n	8009e50 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009e32:	683b      	ldr	r3, [r7, #0]
 8009e34:	88da      	ldrh	r2, [r3, #6]
 8009e36:	893b      	ldrh	r3, [r7, #8]
 8009e38:	4293      	cmp	r3, r2
 8009e3a:	bf28      	it	cs
 8009e3c:	4613      	movcs	r3, r2
 8009e3e:	b29b      	uxth	r3, r3
 8009e40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009e42:	893b      	ldrh	r3, [r7, #8]
 8009e44:	461a      	mov	r2, r3
 8009e46:	68f9      	ldr	r1, [r7, #12]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 fa5d 	bl	800a308 <USBD_CtlSendData>
 8009e4e:	e009      	b.n	8009e64 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009e50:	6839      	ldr	r1, [r7, #0]
 8009e52:	6878      	ldr	r0, [r7, #4]
 8009e54:	f000 f9e7 	bl	800a226 <USBD_CtlError>
 8009e58:	e004      	b.n	8009e64 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 faae 	bl	800a3bc <USBD_CtlSendStatus>
 8009e60:	e000      	b.n	8009e64 <USBD_GetDescriptor+0x2cc>
    return;
 8009e62:	bf00      	nop
  }
}
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}
 8009e6a:	bf00      	nop

08009e6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009e76:	683b      	ldr	r3, [r7, #0]
 8009e78:	889b      	ldrh	r3, [r3, #4]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d131      	bne.n	8009ee2 <USBD_SetAddress+0x76>
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	88db      	ldrh	r3, [r3, #6]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d12d      	bne.n	8009ee2 <USBD_SetAddress+0x76>
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	885b      	ldrh	r3, [r3, #2]
 8009e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8009e8c:	d829      	bhi.n	8009ee2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	885b      	ldrh	r3, [r3, #2]
 8009e92:	b2db      	uxtb	r3, r3
 8009e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009e98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ea0:	b2db      	uxtb	r3, r3
 8009ea2:	2b03      	cmp	r3, #3
 8009ea4:	d104      	bne.n	8009eb0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009ea6:	6839      	ldr	r1, [r7, #0]
 8009ea8:	6878      	ldr	r0, [r7, #4]
 8009eaa:	f000 f9bc 	bl	800a226 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009eae:	e01d      	b.n	8009eec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	7bfa      	ldrb	r2, [r7, #15]
 8009eb4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009eb8:	7bfb      	ldrb	r3, [r7, #15]
 8009eba:	4619      	mov	r1, r3
 8009ebc:	6878      	ldr	r0, [r7, #4]
 8009ebe:	f000 ff0f 	bl	800ace0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009ec2:	6878      	ldr	r0, [r7, #4]
 8009ec4:	f000 fa7a 	bl	800a3bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009ec8:	7bfb      	ldrb	r3, [r7, #15]
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d004      	beq.n	8009ed8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	2202      	movs	r2, #2
 8009ed2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ed6:	e009      	b.n	8009eec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	2201      	movs	r2, #1
 8009edc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009ee0:	e004      	b.n	8009eec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009ee2:	6839      	ldr	r1, [r7, #0]
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f000 f99e 	bl	800a226 <USBD_CtlError>
  }
}
 8009eea:	bf00      	nop
 8009eec:	bf00      	nop
 8009eee:	3710      	adds	r7, #16
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009efe:	2300      	movs	r3, #0
 8009f00:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	885b      	ldrh	r3, [r3, #2]
 8009f06:	b2da      	uxtb	r2, r3
 8009f08:	4b4e      	ldr	r3, [pc, #312]	; (800a044 <USBD_SetConfig+0x150>)
 8009f0a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009f0c:	4b4d      	ldr	r3, [pc, #308]	; (800a044 <USBD_SetConfig+0x150>)
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	d905      	bls.n	8009f20 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009f14:	6839      	ldr	r1, [r7, #0]
 8009f16:	6878      	ldr	r0, [r7, #4]
 8009f18:	f000 f985 	bl	800a226 <USBD_CtlError>
    return USBD_FAIL;
 8009f1c:	2303      	movs	r3, #3
 8009f1e:	e08c      	b.n	800a03a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	2b02      	cmp	r3, #2
 8009f2a:	d002      	beq.n	8009f32 <USBD_SetConfig+0x3e>
 8009f2c:	2b03      	cmp	r3, #3
 8009f2e:	d029      	beq.n	8009f84 <USBD_SetConfig+0x90>
 8009f30:	e075      	b.n	800a01e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009f32:	4b44      	ldr	r3, [pc, #272]	; (800a044 <USBD_SetConfig+0x150>)
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d020      	beq.n	8009f7c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009f3a:	4b42      	ldr	r3, [pc, #264]	; (800a044 <USBD_SetConfig+0x150>)
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	461a      	mov	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009f44:	4b3f      	ldr	r3, [pc, #252]	; (800a044 <USBD_SetConfig+0x150>)
 8009f46:	781b      	ldrb	r3, [r3, #0]
 8009f48:	4619      	mov	r1, r3
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	f7fe ffe7 	bl	8008f1e <USBD_SetClassConfig>
 8009f50:	4603      	mov	r3, r0
 8009f52:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009f54:	7bfb      	ldrb	r3, [r7, #15]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d008      	beq.n	8009f6c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009f5a:	6839      	ldr	r1, [r7, #0]
 8009f5c:	6878      	ldr	r0, [r7, #4]
 8009f5e:	f000 f962 	bl	800a226 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	2202      	movs	r2, #2
 8009f66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009f6a:	e065      	b.n	800a038 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009f6c:	6878      	ldr	r0, [r7, #4]
 8009f6e:	f000 fa25 	bl	800a3bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2203      	movs	r2, #3
 8009f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009f7a:	e05d      	b.n	800a038 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f000 fa1d 	bl	800a3bc <USBD_CtlSendStatus>
      break;
 8009f82:	e059      	b.n	800a038 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009f84:	4b2f      	ldr	r3, [pc, #188]	; (800a044 <USBD_SetConfig+0x150>)
 8009f86:	781b      	ldrb	r3, [r3, #0]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d112      	bne.n	8009fb2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2202      	movs	r2, #2
 8009f90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009f94:	4b2b      	ldr	r3, [pc, #172]	; (800a044 <USBD_SetConfig+0x150>)
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	461a      	mov	r2, r3
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009f9e:	4b29      	ldr	r3, [pc, #164]	; (800a044 <USBD_SetConfig+0x150>)
 8009fa0:	781b      	ldrb	r3, [r3, #0]
 8009fa2:	4619      	mov	r1, r3
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f7fe ffd6 	bl	8008f56 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f000 fa06 	bl	800a3bc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009fb0:	e042      	b.n	800a038 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009fb2:	4b24      	ldr	r3, [pc, #144]	; (800a044 <USBD_SetConfig+0x150>)
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	461a      	mov	r2, r3
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	685b      	ldr	r3, [r3, #4]
 8009fbc:	429a      	cmp	r2, r3
 8009fbe:	d02a      	beq.n	800a016 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	b2db      	uxtb	r3, r3
 8009fc6:	4619      	mov	r1, r3
 8009fc8:	6878      	ldr	r0, [r7, #4]
 8009fca:	f7fe ffc4 	bl	8008f56 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009fce:	4b1d      	ldr	r3, [pc, #116]	; (800a044 <USBD_SetConfig+0x150>)
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009fd8:	4b1a      	ldr	r3, [pc, #104]	; (800a044 <USBD_SetConfig+0x150>)
 8009fda:	781b      	ldrb	r3, [r3, #0]
 8009fdc:	4619      	mov	r1, r3
 8009fde:	6878      	ldr	r0, [r7, #4]
 8009fe0:	f7fe ff9d 	bl	8008f1e <USBD_SetClassConfig>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00f      	beq.n	800a00e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009fee:	6839      	ldr	r1, [r7, #0]
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f918 	bl	800a226 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	b2db      	uxtb	r3, r3
 8009ffc:	4619      	mov	r1, r3
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f7fe ffa9 	bl	8008f56 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	2202      	movs	r2, #2
 800a008:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800a00c:	e014      	b.n	800a038 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f9d4 	bl	800a3bc <USBD_CtlSendStatus>
      break;
 800a014:	e010      	b.n	800a038 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 f9d0 	bl	800a3bc <USBD_CtlSendStatus>
      break;
 800a01c:	e00c      	b.n	800a038 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a01e:	6839      	ldr	r1, [r7, #0]
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 f900 	bl	800a226 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a026:	4b07      	ldr	r3, [pc, #28]	; (800a044 <USBD_SetConfig+0x150>)
 800a028:	781b      	ldrb	r3, [r3, #0]
 800a02a:	4619      	mov	r1, r3
 800a02c:	6878      	ldr	r0, [r7, #4]
 800a02e:	f7fe ff92 	bl	8008f56 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a032:	2303      	movs	r3, #3
 800a034:	73fb      	strb	r3, [r7, #15]
      break;
 800a036:	bf00      	nop
  }

  return ret;
 800a038:	7bfb      	ldrb	r3, [r7, #15]
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3710      	adds	r7, #16
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	200006c0 	.word	0x200006c0

0800a048 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a052:	683b      	ldr	r3, [r7, #0]
 800a054:	88db      	ldrh	r3, [r3, #6]
 800a056:	2b01      	cmp	r3, #1
 800a058:	d004      	beq.n	800a064 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a05a:	6839      	ldr	r1, [r7, #0]
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 f8e2 	bl	800a226 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a062:	e023      	b.n	800a0ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a06a:	b2db      	uxtb	r3, r3
 800a06c:	2b02      	cmp	r3, #2
 800a06e:	dc02      	bgt.n	800a076 <USBD_GetConfig+0x2e>
 800a070:	2b00      	cmp	r3, #0
 800a072:	dc03      	bgt.n	800a07c <USBD_GetConfig+0x34>
 800a074:	e015      	b.n	800a0a2 <USBD_GetConfig+0x5a>
 800a076:	2b03      	cmp	r3, #3
 800a078:	d00b      	beq.n	800a092 <USBD_GetConfig+0x4a>
 800a07a:	e012      	b.n	800a0a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2200      	movs	r2, #0
 800a080:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	3308      	adds	r3, #8
 800a086:	2201      	movs	r2, #1
 800a088:	4619      	mov	r1, r3
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f000 f93c 	bl	800a308 <USBD_CtlSendData>
        break;
 800a090:	e00c      	b.n	800a0ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	3304      	adds	r3, #4
 800a096:	2201      	movs	r2, #1
 800a098:	4619      	mov	r1, r3
 800a09a:	6878      	ldr	r0, [r7, #4]
 800a09c:	f000 f934 	bl	800a308 <USBD_CtlSendData>
        break;
 800a0a0:	e004      	b.n	800a0ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a0a2:	6839      	ldr	r1, [r7, #0]
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 f8be 	bl	800a226 <USBD_CtlError>
        break;
 800a0aa:	bf00      	nop
}
 800a0ac:	bf00      	nop
 800a0ae:	3708      	adds	r7, #8
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	bd80      	pop	{r7, pc}

0800a0b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b082      	sub	sp, #8
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	6078      	str	r0, [r7, #4]
 800a0bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0c4:	b2db      	uxtb	r3, r3
 800a0c6:	3b01      	subs	r3, #1
 800a0c8:	2b02      	cmp	r3, #2
 800a0ca:	d81e      	bhi.n	800a10a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	88db      	ldrh	r3, [r3, #6]
 800a0d0:	2b02      	cmp	r3, #2
 800a0d2:	d004      	beq.n	800a0de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a0d4:	6839      	ldr	r1, [r7, #0]
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f000 f8a5 	bl	800a226 <USBD_CtlError>
        break;
 800a0dc:	e01a      	b.n	800a114 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2201      	movs	r2, #1
 800a0e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d005      	beq.n	800a0fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	f043 0202 	orr.w	r2, r3, #2
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	330c      	adds	r3, #12
 800a0fe:	2202      	movs	r2, #2
 800a100:	4619      	mov	r1, r3
 800a102:	6878      	ldr	r0, [r7, #4]
 800a104:	f000 f900 	bl	800a308 <USBD_CtlSendData>
      break;
 800a108:	e004      	b.n	800a114 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a10a:	6839      	ldr	r1, [r7, #0]
 800a10c:	6878      	ldr	r0, [r7, #4]
 800a10e:	f000 f88a 	bl	800a226 <USBD_CtlError>
      break;
 800a112:	bf00      	nop
  }
}
 800a114:	bf00      	nop
 800a116:	3708      	adds	r7, #8
 800a118:	46bd      	mov	sp, r7
 800a11a:	bd80      	pop	{r7, pc}

0800a11c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b082      	sub	sp, #8
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	885b      	ldrh	r3, [r3, #2]
 800a12a:	2b01      	cmp	r3, #1
 800a12c:	d107      	bne.n	800a13e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	2201      	movs	r2, #1
 800a132:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a136:	6878      	ldr	r0, [r7, #4]
 800a138:	f000 f940 	bl	800a3bc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a13c:	e013      	b.n	800a166 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	885b      	ldrh	r3, [r3, #2]
 800a142:	2b02      	cmp	r3, #2
 800a144:	d10b      	bne.n	800a15e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	889b      	ldrh	r3, [r3, #4]
 800a14a:	0a1b      	lsrs	r3, r3, #8
 800a14c:	b29b      	uxth	r3, r3
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f930 	bl	800a3bc <USBD_CtlSendStatus>
}
 800a15c:	e003      	b.n	800a166 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a15e:	6839      	ldr	r1, [r7, #0]
 800a160:	6878      	ldr	r0, [r7, #4]
 800a162:	f000 f860 	bl	800a226 <USBD_CtlError>
}
 800a166:	bf00      	nop
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b082      	sub	sp, #8
 800a172:	af00      	add	r7, sp, #0
 800a174:	6078      	str	r0, [r7, #4]
 800a176:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a17e:	b2db      	uxtb	r3, r3
 800a180:	3b01      	subs	r3, #1
 800a182:	2b02      	cmp	r3, #2
 800a184:	d80b      	bhi.n	800a19e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	885b      	ldrh	r3, [r3, #2]
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d10c      	bne.n	800a1a8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	2200      	movs	r2, #0
 800a192:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 f910 	bl	800a3bc <USBD_CtlSendStatus>
      }
      break;
 800a19c:	e004      	b.n	800a1a8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a19e:	6839      	ldr	r1, [r7, #0]
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f840 	bl	800a226 <USBD_CtlError>
      break;
 800a1a6:	e000      	b.n	800a1aa <USBD_ClrFeature+0x3c>
      break;
 800a1a8:	bf00      	nop
  }
}
 800a1aa:	bf00      	nop
 800a1ac:	3708      	adds	r7, #8
 800a1ae:	46bd      	mov	sp, r7
 800a1b0:	bd80      	pop	{r7, pc}

0800a1b2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a1b2:	b580      	push	{r7, lr}
 800a1b4:	b084      	sub	sp, #16
 800a1b6:	af00      	add	r7, sp, #0
 800a1b8:	6078      	str	r0, [r7, #4]
 800a1ba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a1bc:	683b      	ldr	r3, [r7, #0]
 800a1be:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	781a      	ldrb	r2, [r3, #0]
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	3301      	adds	r3, #1
 800a1cc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	781a      	ldrb	r2, [r3, #0]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	3301      	adds	r3, #1
 800a1da:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a1dc:	68f8      	ldr	r0, [r7, #12]
 800a1de:	f7ff fa41 	bl	8009664 <SWAPBYTE>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	461a      	mov	r2, r3
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f7ff fa34 	bl	8009664 <SWAPBYTE>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	461a      	mov	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	3301      	adds	r3, #1
 800a208:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	3301      	adds	r3, #1
 800a20e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a210:	68f8      	ldr	r0, [r7, #12]
 800a212:	f7ff fa27 	bl	8009664 <SWAPBYTE>
 800a216:	4603      	mov	r3, r0
 800a218:	461a      	mov	r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	80da      	strh	r2, [r3, #6]
}
 800a21e:	bf00      	nop
 800a220:	3710      	adds	r7, #16
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}

0800a226 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
 800a22e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a230:	2180      	movs	r1, #128	; 0x80
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f000 fcea 	bl	800ac0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a238:	2100      	movs	r1, #0
 800a23a:	6878      	ldr	r0, [r7, #4]
 800a23c:	f000 fce6 	bl	800ac0c <USBD_LL_StallEP>
}
 800a240:	bf00      	nop
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b086      	sub	sp, #24
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a254:	2300      	movs	r3, #0
 800a256:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d036      	beq.n	800a2cc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800a262:	6938      	ldr	r0, [r7, #16]
 800a264:	f000 f836 	bl	800a2d4 <USBD_GetLen>
 800a268:	4603      	mov	r3, r0
 800a26a:	3301      	adds	r3, #1
 800a26c:	b29b      	uxth	r3, r3
 800a26e:	005b      	lsls	r3, r3, #1
 800a270:	b29a      	uxth	r2, r3
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a276:	7dfb      	ldrb	r3, [r7, #23]
 800a278:	68ba      	ldr	r2, [r7, #8]
 800a27a:	4413      	add	r3, r2
 800a27c:	687a      	ldr	r2, [r7, #4]
 800a27e:	7812      	ldrb	r2, [r2, #0]
 800a280:	701a      	strb	r2, [r3, #0]
  idx++;
 800a282:	7dfb      	ldrb	r3, [r7, #23]
 800a284:	3301      	adds	r3, #1
 800a286:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a288:	7dfb      	ldrb	r3, [r7, #23]
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	4413      	add	r3, r2
 800a28e:	2203      	movs	r2, #3
 800a290:	701a      	strb	r2, [r3, #0]
  idx++;
 800a292:	7dfb      	ldrb	r3, [r7, #23]
 800a294:	3301      	adds	r3, #1
 800a296:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a298:	e013      	b.n	800a2c2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800a29a:	7dfb      	ldrb	r3, [r7, #23]
 800a29c:	68ba      	ldr	r2, [r7, #8]
 800a29e:	4413      	add	r3, r2
 800a2a0:	693a      	ldr	r2, [r7, #16]
 800a2a2:	7812      	ldrb	r2, [r2, #0]
 800a2a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	3301      	adds	r3, #1
 800a2aa:	613b      	str	r3, [r7, #16]
    idx++;
 800a2ac:	7dfb      	ldrb	r3, [r7, #23]
 800a2ae:	3301      	adds	r3, #1
 800a2b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a2b2:	7dfb      	ldrb	r3, [r7, #23]
 800a2b4:	68ba      	ldr	r2, [r7, #8]
 800a2b6:	4413      	add	r3, r2
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	701a      	strb	r2, [r3, #0]
    idx++;
 800a2bc:	7dfb      	ldrb	r3, [r7, #23]
 800a2be:	3301      	adds	r3, #1
 800a2c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a2c2:	693b      	ldr	r3, [r7, #16]
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d1e7      	bne.n	800a29a <USBD_GetString+0x52>
 800a2ca:	e000      	b.n	800a2ce <USBD_GetString+0x86>
    return;
 800a2cc:	bf00      	nop
  }
}
 800a2ce:	3718      	adds	r7, #24
 800a2d0:	46bd      	mov	sp, r7
 800a2d2:	bd80      	pop	{r7, pc}

0800a2d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a2d4:	b480      	push	{r7}
 800a2d6:	b085      	sub	sp, #20
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a2dc:	2300      	movs	r3, #0
 800a2de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a2e4:	e005      	b.n	800a2f2 <USBD_GetLen+0x1e>
  {
    len++;
 800a2e6:	7bfb      	ldrb	r3, [r7, #15]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	3301      	adds	r3, #1
 800a2f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	781b      	ldrb	r3, [r3, #0]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d1f5      	bne.n	800a2e6 <USBD_GetLen+0x12>
  }

  return len;
 800a2fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2fc:	4618      	mov	r0, r3
 800a2fe:	3714      	adds	r7, #20
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a308:	b580      	push	{r7, lr}
 800a30a:	b084      	sub	sp, #16
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	60f8      	str	r0, [r7, #12]
 800a310:	60b9      	str	r1, [r7, #8]
 800a312:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2202      	movs	r2, #2
 800a318:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	687a      	ldr	r2, [r7, #4]
 800a320:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	687a      	ldr	r2, [r7, #4]
 800a326:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	68ba      	ldr	r2, [r7, #8]
 800a32c:	2100      	movs	r1, #0
 800a32e:	68f8      	ldr	r0, [r7, #12]
 800a330:	f000 fcf5 	bl	800ad1e <USBD_LL_Transmit>

  return USBD_OK;
 800a334:	2300      	movs	r3, #0
}
 800a336:	4618      	mov	r0, r3
 800a338:	3710      	adds	r7, #16
 800a33a:	46bd      	mov	sp, r7
 800a33c:	bd80      	pop	{r7, pc}

0800a33e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a33e:	b580      	push	{r7, lr}
 800a340:	b084      	sub	sp, #16
 800a342:	af00      	add	r7, sp, #0
 800a344:	60f8      	str	r0, [r7, #12]
 800a346:	60b9      	str	r1, [r7, #8]
 800a348:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	68ba      	ldr	r2, [r7, #8]
 800a34e:	2100      	movs	r1, #0
 800a350:	68f8      	ldr	r0, [r7, #12]
 800a352:	f000 fce4 	bl	800ad1e <USBD_LL_Transmit>

  return USBD_OK;
 800a356:	2300      	movs	r3, #0
}
 800a358:	4618      	mov	r0, r3
 800a35a:	3710      	adds	r7, #16
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b084      	sub	sp, #16
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2203      	movs	r2, #3
 800a370:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	2100      	movs	r1, #0
 800a38a:	68f8      	ldr	r0, [r7, #12]
 800a38c:	f000 fce8 	bl	800ad60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a390:	2300      	movs	r3, #0
}
 800a392:	4618      	mov	r0, r3
 800a394:	3710      	adds	r7, #16
 800a396:	46bd      	mov	sp, r7
 800a398:	bd80      	pop	{r7, pc}

0800a39a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a39a:	b580      	push	{r7, lr}
 800a39c:	b084      	sub	sp, #16
 800a39e:	af00      	add	r7, sp, #0
 800a3a0:	60f8      	str	r0, [r7, #12]
 800a3a2:	60b9      	str	r1, [r7, #8]
 800a3a4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	68ba      	ldr	r2, [r7, #8]
 800a3aa:	2100      	movs	r1, #0
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f000 fcd7 	bl	800ad60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3b2:	2300      	movs	r3, #0
}
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	3710      	adds	r7, #16
 800a3b8:	46bd      	mov	sp, r7
 800a3ba:	bd80      	pop	{r7, pc}

0800a3bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b082      	sub	sp, #8
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	2204      	movs	r2, #4
 800a3c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	6878      	ldr	r0, [r7, #4]
 800a3d4:	f000 fca3 	bl	800ad1e <USBD_LL_Transmit>

  return USBD_OK;
 800a3d8:	2300      	movs	r3, #0
}
 800a3da:	4618      	mov	r0, r3
 800a3dc:	3708      	adds	r7, #8
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}

0800a3e2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a3e2:	b580      	push	{r7, lr}
 800a3e4:	b082      	sub	sp, #8
 800a3e6:	af00      	add	r7, sp, #0
 800a3e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2205      	movs	r2, #5
 800a3ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	2100      	movs	r1, #0
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f000 fcb1 	bl	800ad60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3708      	adds	r7, #8
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a40c:	2200      	movs	r2, #0
 800a40e:	4912      	ldr	r1, [pc, #72]	; (800a458 <MX_USB_DEVICE_Init+0x50>)
 800a410:	4812      	ldr	r0, [pc, #72]	; (800a45c <MX_USB_DEVICE_Init+0x54>)
 800a412:	f7fe fd07 	bl	8008e24 <USBD_Init>
 800a416:	4603      	mov	r3, r0
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d001      	beq.n	800a420 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a41c:	f7f7 fd58 	bl	8001ed0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a420:	490f      	ldr	r1, [pc, #60]	; (800a460 <MX_USB_DEVICE_Init+0x58>)
 800a422:	480e      	ldr	r0, [pc, #56]	; (800a45c <MX_USB_DEVICE_Init+0x54>)
 800a424:	f7fe fd2e 	bl	8008e84 <USBD_RegisterClass>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d001      	beq.n	800a432 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a42e:	f7f7 fd4f 	bl	8001ed0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a432:	490c      	ldr	r1, [pc, #48]	; (800a464 <MX_USB_DEVICE_Init+0x5c>)
 800a434:	4809      	ldr	r0, [pc, #36]	; (800a45c <MX_USB_DEVICE_Init+0x54>)
 800a436:	f7fe fc1f 	bl	8008c78 <USBD_CDC_RegisterInterface>
 800a43a:	4603      	mov	r3, r0
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d001      	beq.n	800a444 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a440:	f7f7 fd46 	bl	8001ed0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a444:	4805      	ldr	r0, [pc, #20]	; (800a45c <MX_USB_DEVICE_Init+0x54>)
 800a446:	f7fe fd53 	bl	8008ef0 <USBD_Start>
 800a44a:	4603      	mov	r3, r0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d001      	beq.n	800a454 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a450:	f7f7 fd3e 	bl	8001ed0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a454:	bf00      	nop
 800a456:	bd80      	pop	{r7, pc}
 800a458:	200000d4 	.word	0x200000d4
 800a45c:	200006c4 	.word	0x200006c4
 800a460:	20000040 	.word	0x20000040
 800a464:	200000c0 	.word	0x200000c0

0800a468 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a46c:	2200      	movs	r2, #0
 800a46e:	4905      	ldr	r1, [pc, #20]	; (800a484 <CDC_Init_FS+0x1c>)
 800a470:	4805      	ldr	r0, [pc, #20]	; (800a488 <CDC_Init_FS+0x20>)
 800a472:	f7fe fc1b 	bl	8008cac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a476:	4905      	ldr	r1, [pc, #20]	; (800a48c <CDC_Init_FS+0x24>)
 800a478:	4803      	ldr	r0, [pc, #12]	; (800a488 <CDC_Init_FS+0x20>)
 800a47a:	f7fe fc39 	bl	8008cf0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a47e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a480:	4618      	mov	r0, r3
 800a482:	bd80      	pop	{r7, pc}
 800a484:	200011a0 	.word	0x200011a0
 800a488:	200006c4 	.word	0x200006c4
 800a48c:	200009a0 	.word	0x200009a0

0800a490 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a490:	b480      	push	{r7}
 800a492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a494:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a496:	4618      	mov	r0, r3
 800a498:	46bd      	mov	sp, r7
 800a49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a49e:	4770      	bx	lr

0800a4a0 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a4a0:	b480      	push	{r7}
 800a4a2:	b083      	sub	sp, #12
 800a4a4:	af00      	add	r7, sp, #0
 800a4a6:	4603      	mov	r3, r0
 800a4a8:	6039      	str	r1, [r7, #0]
 800a4aa:	71fb      	strb	r3, [r7, #7]
 800a4ac:	4613      	mov	r3, r2
 800a4ae:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a4b0:	79fb      	ldrb	r3, [r7, #7]
 800a4b2:	2b23      	cmp	r3, #35	; 0x23
 800a4b4:	d84a      	bhi.n	800a54c <CDC_Control_FS+0xac>
 800a4b6:	a201      	add	r2, pc, #4	; (adr r2, 800a4bc <CDC_Control_FS+0x1c>)
 800a4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4bc:	0800a54d 	.word	0x0800a54d
 800a4c0:	0800a54d 	.word	0x0800a54d
 800a4c4:	0800a54d 	.word	0x0800a54d
 800a4c8:	0800a54d 	.word	0x0800a54d
 800a4cc:	0800a54d 	.word	0x0800a54d
 800a4d0:	0800a54d 	.word	0x0800a54d
 800a4d4:	0800a54d 	.word	0x0800a54d
 800a4d8:	0800a54d 	.word	0x0800a54d
 800a4dc:	0800a54d 	.word	0x0800a54d
 800a4e0:	0800a54d 	.word	0x0800a54d
 800a4e4:	0800a54d 	.word	0x0800a54d
 800a4e8:	0800a54d 	.word	0x0800a54d
 800a4ec:	0800a54d 	.word	0x0800a54d
 800a4f0:	0800a54d 	.word	0x0800a54d
 800a4f4:	0800a54d 	.word	0x0800a54d
 800a4f8:	0800a54d 	.word	0x0800a54d
 800a4fc:	0800a54d 	.word	0x0800a54d
 800a500:	0800a54d 	.word	0x0800a54d
 800a504:	0800a54d 	.word	0x0800a54d
 800a508:	0800a54d 	.word	0x0800a54d
 800a50c:	0800a54d 	.word	0x0800a54d
 800a510:	0800a54d 	.word	0x0800a54d
 800a514:	0800a54d 	.word	0x0800a54d
 800a518:	0800a54d 	.word	0x0800a54d
 800a51c:	0800a54d 	.word	0x0800a54d
 800a520:	0800a54d 	.word	0x0800a54d
 800a524:	0800a54d 	.word	0x0800a54d
 800a528:	0800a54d 	.word	0x0800a54d
 800a52c:	0800a54d 	.word	0x0800a54d
 800a530:	0800a54d 	.word	0x0800a54d
 800a534:	0800a54d 	.word	0x0800a54d
 800a538:	0800a54d 	.word	0x0800a54d
 800a53c:	0800a54d 	.word	0x0800a54d
 800a540:	0800a54d 	.word	0x0800a54d
 800a544:	0800a54d 	.word	0x0800a54d
 800a548:	0800a54d 	.word	0x0800a54d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a54c:	bf00      	nop
  }

  return (USBD_OK);
 800a54e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a550:	4618      	mov	r0, r3
 800a552:	370c      	adds	r7, #12
 800a554:	46bd      	mov	sp, r7
 800a556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55a:	4770      	bx	lr

0800a55c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b084      	sub	sp, #16
 800a560:	af00      	add	r7, sp, #0
 800a562:	6078      	str	r0, [r7, #4]
 800a564:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a566:	6879      	ldr	r1, [r7, #4]
 800a568:	4809      	ldr	r0, [pc, #36]	; (800a590 <CDC_Receive_FS+0x34>)
 800a56a:	f7fe fbc1 	bl	8008cf0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a56e:	4808      	ldr	r0, [pc, #32]	; (800a590 <CDC_Receive_FS+0x34>)
 800a570:	f7fe fc22 	bl	8008db8 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	73fb      	strb	r3, [r7, #15]
  memcpy(usbd_buf_recv, Buf, len);
 800a57a:	7bfb      	ldrb	r3, [r7, #15]
 800a57c:	461a      	mov	r2, r3
 800a57e:	6879      	ldr	r1, [r7, #4]
 800a580:	4804      	ldr	r0, [pc, #16]	; (800a594 <CDC_Receive_FS+0x38>)
 800a582:	f000 fc93 	bl	800aeac <memcpy>
  return (USBD_OK);
 800a586:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3710      	adds	r7, #16
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	200006c4 	.word	0x200006c4
 800a594:	20000590 	.word	0x20000590

0800a598 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b084      	sub	sp, #16
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	460b      	mov	r3, r1
 800a5a2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a5a4:	2300      	movs	r3, #0
 800a5a6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a5a8:	4b0d      	ldr	r3, [pc, #52]	; (800a5e0 <CDC_Transmit_FS+0x48>)
 800a5aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a5ae:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d001      	beq.n	800a5be <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a5ba:	2301      	movs	r3, #1
 800a5bc:	e00b      	b.n	800a5d6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a5be:	887b      	ldrh	r3, [r7, #2]
 800a5c0:	461a      	mov	r2, r3
 800a5c2:	6879      	ldr	r1, [r7, #4]
 800a5c4:	4806      	ldr	r0, [pc, #24]	; (800a5e0 <CDC_Transmit_FS+0x48>)
 800a5c6:	f7fe fb71 	bl	8008cac <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a5ca:	4805      	ldr	r0, [pc, #20]	; (800a5e0 <CDC_Transmit_FS+0x48>)
 800a5cc:	f7fe fbae 	bl	8008d2c <USBD_CDC_TransmitPacket>
 800a5d0:	4603      	mov	r3, r0
 800a5d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a5d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5d6:	4618      	mov	r0, r3
 800a5d8:	3710      	adds	r7, #16
 800a5da:	46bd      	mov	sp, r7
 800a5dc:	bd80      	pop	{r7, pc}
 800a5de:	bf00      	nop
 800a5e0:	200006c4 	.word	0x200006c4

0800a5e4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a5e4:	b480      	push	{r7}
 800a5e6:	b087      	sub	sp, #28
 800a5e8:	af00      	add	r7, sp, #0
 800a5ea:	60f8      	str	r0, [r7, #12]
 800a5ec:	60b9      	str	r1, [r7, #8]
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a5f6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	371c      	adds	r7, #28
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr
	...

0800a608 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	6039      	str	r1, [r7, #0]
 800a612:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	2212      	movs	r2, #18
 800a618:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a61a:	4b03      	ldr	r3, [pc, #12]	; (800a628 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr
 800a628:	200000f0 	.word	0x200000f0

0800a62c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a62c:	b480      	push	{r7}
 800a62e:	b083      	sub	sp, #12
 800a630:	af00      	add	r7, sp, #0
 800a632:	4603      	mov	r3, r0
 800a634:	6039      	str	r1, [r7, #0]
 800a636:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	2204      	movs	r2, #4
 800a63c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a63e:	4b03      	ldr	r3, [pc, #12]	; (800a64c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a640:	4618      	mov	r0, r3
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr
 800a64c:	20000104 	.word	0x20000104

0800a650 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b082      	sub	sp, #8
 800a654:	af00      	add	r7, sp, #0
 800a656:	4603      	mov	r3, r0
 800a658:	6039      	str	r1, [r7, #0]
 800a65a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a65c:	79fb      	ldrb	r3, [r7, #7]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d105      	bne.n	800a66e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a662:	683a      	ldr	r2, [r7, #0]
 800a664:	4907      	ldr	r1, [pc, #28]	; (800a684 <USBD_FS_ProductStrDescriptor+0x34>)
 800a666:	4808      	ldr	r0, [pc, #32]	; (800a688 <USBD_FS_ProductStrDescriptor+0x38>)
 800a668:	f7ff fdee 	bl	800a248 <USBD_GetString>
 800a66c:	e004      	b.n	800a678 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a66e:	683a      	ldr	r2, [r7, #0]
 800a670:	4904      	ldr	r1, [pc, #16]	; (800a684 <USBD_FS_ProductStrDescriptor+0x34>)
 800a672:	4805      	ldr	r0, [pc, #20]	; (800a688 <USBD_FS_ProductStrDescriptor+0x38>)
 800a674:	f7ff fde8 	bl	800a248 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a678:	4b02      	ldr	r3, [pc, #8]	; (800a684 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a67a:	4618      	mov	r0, r3
 800a67c:	3708      	adds	r7, #8
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}
 800a682:	bf00      	nop
 800a684:	200019a0 	.word	0x200019a0
 800a688:	0800f538 	.word	0x0800f538

0800a68c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b082      	sub	sp, #8
 800a690:	af00      	add	r7, sp, #0
 800a692:	4603      	mov	r3, r0
 800a694:	6039      	str	r1, [r7, #0]
 800a696:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a698:	683a      	ldr	r2, [r7, #0]
 800a69a:	4904      	ldr	r1, [pc, #16]	; (800a6ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a69c:	4804      	ldr	r0, [pc, #16]	; (800a6b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a69e:	f7ff fdd3 	bl	800a248 <USBD_GetString>
  return USBD_StrDesc;
 800a6a2:	4b02      	ldr	r3, [pc, #8]	; (800a6ac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a6a4:	4618      	mov	r0, r3
 800a6a6:	3708      	adds	r7, #8
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	200019a0 	.word	0x200019a0
 800a6b0:	0800f550 	.word	0x0800f550

0800a6b4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	b082      	sub	sp, #8
 800a6b8:	af00      	add	r7, sp, #0
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	6039      	str	r1, [r7, #0]
 800a6be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	221a      	movs	r2, #26
 800a6c4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a6c6:	f000 f843 	bl	800a750 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a6ca:	4b02      	ldr	r3, [pc, #8]	; (800a6d4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3708      	adds	r7, #8
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	bd80      	pop	{r7, pc}
 800a6d4:	20000108 	.word	0x20000108

0800a6d8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b082      	sub	sp, #8
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	4603      	mov	r3, r0
 800a6e0:	6039      	str	r1, [r7, #0]
 800a6e2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a6e4:	79fb      	ldrb	r3, [r7, #7]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d105      	bne.n	800a6f6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a6ea:	683a      	ldr	r2, [r7, #0]
 800a6ec:	4907      	ldr	r1, [pc, #28]	; (800a70c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a6ee:	4808      	ldr	r0, [pc, #32]	; (800a710 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a6f0:	f7ff fdaa 	bl	800a248 <USBD_GetString>
 800a6f4:	e004      	b.n	800a700 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a6f6:	683a      	ldr	r2, [r7, #0]
 800a6f8:	4904      	ldr	r1, [pc, #16]	; (800a70c <USBD_FS_ConfigStrDescriptor+0x34>)
 800a6fa:	4805      	ldr	r0, [pc, #20]	; (800a710 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a6fc:	f7ff fda4 	bl	800a248 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a700:	4b02      	ldr	r3, [pc, #8]	; (800a70c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a702:	4618      	mov	r0, r3
 800a704:	3708      	adds	r7, #8
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}
 800a70a:	bf00      	nop
 800a70c:	200019a0 	.word	0x200019a0
 800a710:	0800f564 	.word	0x0800f564

0800a714 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	b082      	sub	sp, #8
 800a718:	af00      	add	r7, sp, #0
 800a71a:	4603      	mov	r3, r0
 800a71c:	6039      	str	r1, [r7, #0]
 800a71e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a720:	79fb      	ldrb	r3, [r7, #7]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d105      	bne.n	800a732 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a726:	683a      	ldr	r2, [r7, #0]
 800a728:	4907      	ldr	r1, [pc, #28]	; (800a748 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a72a:	4808      	ldr	r0, [pc, #32]	; (800a74c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a72c:	f7ff fd8c 	bl	800a248 <USBD_GetString>
 800a730:	e004      	b.n	800a73c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	4904      	ldr	r1, [pc, #16]	; (800a748 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a736:	4805      	ldr	r0, [pc, #20]	; (800a74c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a738:	f7ff fd86 	bl	800a248 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a73c:	4b02      	ldr	r3, [pc, #8]	; (800a748 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a73e:	4618      	mov	r0, r3
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	200019a0 	.word	0x200019a0
 800a74c:	0800f570 	.word	0x0800f570

0800a750 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b084      	sub	sp, #16
 800a754:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a756:	4b0f      	ldr	r3, [pc, #60]	; (800a794 <Get_SerialNum+0x44>)
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a75c:	4b0e      	ldr	r3, [pc, #56]	; (800a798 <Get_SerialNum+0x48>)
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a762:	4b0e      	ldr	r3, [pc, #56]	; (800a79c <Get_SerialNum+0x4c>)
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a768:	68fa      	ldr	r2, [r7, #12]
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	4413      	add	r3, r2
 800a76e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	2b00      	cmp	r3, #0
 800a774:	d009      	beq.n	800a78a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a776:	2208      	movs	r2, #8
 800a778:	4909      	ldr	r1, [pc, #36]	; (800a7a0 <Get_SerialNum+0x50>)
 800a77a:	68f8      	ldr	r0, [r7, #12]
 800a77c:	f000 f814 	bl	800a7a8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a780:	2204      	movs	r2, #4
 800a782:	4908      	ldr	r1, [pc, #32]	; (800a7a4 <Get_SerialNum+0x54>)
 800a784:	68b8      	ldr	r0, [r7, #8]
 800a786:	f000 f80f 	bl	800a7a8 <IntToUnicode>
  }
}
 800a78a:	bf00      	nop
 800a78c:	3710      	adds	r7, #16
 800a78e:	46bd      	mov	sp, r7
 800a790:	bd80      	pop	{r7, pc}
 800a792:	bf00      	nop
 800a794:	1fff7a10 	.word	0x1fff7a10
 800a798:	1fff7a14 	.word	0x1fff7a14
 800a79c:	1fff7a18 	.word	0x1fff7a18
 800a7a0:	2000010a 	.word	0x2000010a
 800a7a4:	2000011a 	.word	0x2000011a

0800a7a8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b087      	sub	sp, #28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	60b9      	str	r1, [r7, #8]
 800a7b2:	4613      	mov	r3, r2
 800a7b4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	75fb      	strb	r3, [r7, #23]
 800a7be:	e027      	b.n	800a810 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	0f1b      	lsrs	r3, r3, #28
 800a7c4:	2b09      	cmp	r3, #9
 800a7c6:	d80b      	bhi.n	800a7e0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	0f1b      	lsrs	r3, r3, #28
 800a7cc:	b2da      	uxtb	r2, r3
 800a7ce:	7dfb      	ldrb	r3, [r7, #23]
 800a7d0:	005b      	lsls	r3, r3, #1
 800a7d2:	4619      	mov	r1, r3
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	440b      	add	r3, r1
 800a7d8:	3230      	adds	r2, #48	; 0x30
 800a7da:	b2d2      	uxtb	r2, r2
 800a7dc:	701a      	strb	r2, [r3, #0]
 800a7de:	e00a      	b.n	800a7f6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	0f1b      	lsrs	r3, r3, #28
 800a7e4:	b2da      	uxtb	r2, r3
 800a7e6:	7dfb      	ldrb	r3, [r7, #23]
 800a7e8:	005b      	lsls	r3, r3, #1
 800a7ea:	4619      	mov	r1, r3
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	440b      	add	r3, r1
 800a7f0:	3237      	adds	r2, #55	; 0x37
 800a7f2:	b2d2      	uxtb	r2, r2
 800a7f4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	011b      	lsls	r3, r3, #4
 800a7fa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a7fc:	7dfb      	ldrb	r3, [r7, #23]
 800a7fe:	005b      	lsls	r3, r3, #1
 800a800:	3301      	adds	r3, #1
 800a802:	68ba      	ldr	r2, [r7, #8]
 800a804:	4413      	add	r3, r2
 800a806:	2200      	movs	r2, #0
 800a808:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a80a:	7dfb      	ldrb	r3, [r7, #23]
 800a80c:	3301      	adds	r3, #1
 800a80e:	75fb      	strb	r3, [r7, #23]
 800a810:	7dfa      	ldrb	r2, [r7, #23]
 800a812:	79fb      	ldrb	r3, [r7, #7]
 800a814:	429a      	cmp	r2, r3
 800a816:	d3d3      	bcc.n	800a7c0 <IntToUnicode+0x18>
  }
}
 800a818:	bf00      	nop
 800a81a:	bf00      	nop
 800a81c:	371c      	adds	r7, #28
 800a81e:	46bd      	mov	sp, r7
 800a820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a824:	4770      	bx	lr
	...

0800a828 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a828:	b580      	push	{r7, lr}
 800a82a:	b08a      	sub	sp, #40	; 0x28
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a830:	f107 0314 	add.w	r3, r7, #20
 800a834:	2200      	movs	r2, #0
 800a836:	601a      	str	r2, [r3, #0]
 800a838:	605a      	str	r2, [r3, #4]
 800a83a:	609a      	str	r2, [r3, #8]
 800a83c:	60da      	str	r2, [r3, #12]
 800a83e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a848:	d13a      	bne.n	800a8c0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a84a:	2300      	movs	r3, #0
 800a84c:	613b      	str	r3, [r7, #16]
 800a84e:	4b1e      	ldr	r3, [pc, #120]	; (800a8c8 <HAL_PCD_MspInit+0xa0>)
 800a850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a852:	4a1d      	ldr	r2, [pc, #116]	; (800a8c8 <HAL_PCD_MspInit+0xa0>)
 800a854:	f043 0301 	orr.w	r3, r3, #1
 800a858:	6313      	str	r3, [r2, #48]	; 0x30
 800a85a:	4b1b      	ldr	r3, [pc, #108]	; (800a8c8 <HAL_PCD_MspInit+0xa0>)
 800a85c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a85e:	f003 0301 	and.w	r3, r3, #1
 800a862:	613b      	str	r3, [r7, #16]
 800a864:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a866:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a86a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a86c:	2302      	movs	r3, #2
 800a86e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a870:	2300      	movs	r3, #0
 800a872:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a874:	2303      	movs	r3, #3
 800a876:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a878:	230a      	movs	r3, #10
 800a87a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a87c:	f107 0314 	add.w	r3, r7, #20
 800a880:	4619      	mov	r1, r3
 800a882:	4812      	ldr	r0, [pc, #72]	; (800a8cc <HAL_PCD_MspInit+0xa4>)
 800a884:	f7f9 f8b4 	bl	80039f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a888:	4b0f      	ldr	r3, [pc, #60]	; (800a8c8 <HAL_PCD_MspInit+0xa0>)
 800a88a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a88c:	4a0e      	ldr	r2, [pc, #56]	; (800a8c8 <HAL_PCD_MspInit+0xa0>)
 800a88e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a892:	6353      	str	r3, [r2, #52]	; 0x34
 800a894:	2300      	movs	r3, #0
 800a896:	60fb      	str	r3, [r7, #12]
 800a898:	4b0b      	ldr	r3, [pc, #44]	; (800a8c8 <HAL_PCD_MspInit+0xa0>)
 800a89a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a89c:	4a0a      	ldr	r2, [pc, #40]	; (800a8c8 <HAL_PCD_MspInit+0xa0>)
 800a89e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a8a2:	6453      	str	r3, [r2, #68]	; 0x44
 800a8a4:	4b08      	ldr	r3, [pc, #32]	; (800a8c8 <HAL_PCD_MspInit+0xa0>)
 800a8a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8ac:	60fb      	str	r3, [r7, #12]
 800a8ae:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	2100      	movs	r1, #0
 800a8b4:	2043      	movs	r0, #67	; 0x43
 800a8b6:	f7f8 fcf4 	bl	80032a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a8ba:	2043      	movs	r0, #67	; 0x43
 800a8bc:	f7f8 fd0d 	bl	80032da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a8c0:	bf00      	nop
 800a8c2:	3728      	adds	r7, #40	; 0x28
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	bd80      	pop	{r7, pc}
 800a8c8:	40023800 	.word	0x40023800
 800a8cc:	40020000 	.word	0x40020000

0800a8d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b082      	sub	sp, #8
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	4610      	mov	r0, r2
 800a8e8:	f7fe fb4f 	bl	8008f8a <USBD_LL_SetupStage>
}
 800a8ec:	bf00      	nop
 800a8ee:	3708      	adds	r7, #8
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	bd80      	pop	{r7, pc}

0800a8f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b082      	sub	sp, #8
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	460b      	mov	r3, r1
 800a8fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a906:	78fa      	ldrb	r2, [r7, #3]
 800a908:	6879      	ldr	r1, [r7, #4]
 800a90a:	4613      	mov	r3, r2
 800a90c:	00db      	lsls	r3, r3, #3
 800a90e:	4413      	add	r3, r2
 800a910:	009b      	lsls	r3, r3, #2
 800a912:	440b      	add	r3, r1
 800a914:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	78fb      	ldrb	r3, [r7, #3]
 800a91c:	4619      	mov	r1, r3
 800a91e:	f7fe fb89 	bl	8009034 <USBD_LL_DataOutStage>
}
 800a922:	bf00      	nop
 800a924:	3708      	adds	r7, #8
 800a926:	46bd      	mov	sp, r7
 800a928:	bd80      	pop	{r7, pc}

0800a92a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a92a:	b580      	push	{r7, lr}
 800a92c:	b082      	sub	sp, #8
 800a92e:	af00      	add	r7, sp, #0
 800a930:	6078      	str	r0, [r7, #4]
 800a932:	460b      	mov	r3, r1
 800a934:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a93c:	78fa      	ldrb	r2, [r7, #3]
 800a93e:	6879      	ldr	r1, [r7, #4]
 800a940:	4613      	mov	r3, r2
 800a942:	00db      	lsls	r3, r3, #3
 800a944:	4413      	add	r3, r2
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	440b      	add	r3, r1
 800a94a:	334c      	adds	r3, #76	; 0x4c
 800a94c:	681a      	ldr	r2, [r3, #0]
 800a94e:	78fb      	ldrb	r3, [r7, #3]
 800a950:	4619      	mov	r1, r3
 800a952:	f7fe fc22 	bl	800919a <USBD_LL_DataInStage>
}
 800a956:	bf00      	nop
 800a958:	3708      	adds	r7, #8
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b082      	sub	sp, #8
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fe fd56 	bl	800941e <USBD_LL_SOF>
}
 800a972:	bf00      	nop
 800a974:	3708      	adds	r7, #8
 800a976:	46bd      	mov	sp, r7
 800a978:	bd80      	pop	{r7, pc}

0800a97a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a97a:	b580      	push	{r7, lr}
 800a97c:	b084      	sub	sp, #16
 800a97e:	af00      	add	r7, sp, #0
 800a980:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a982:	2301      	movs	r3, #1
 800a984:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	68db      	ldr	r3, [r3, #12]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d102      	bne.n	800a994 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a98e:	2300      	movs	r3, #0
 800a990:	73fb      	strb	r3, [r7, #15]
 800a992:	e008      	b.n	800a9a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	68db      	ldr	r3, [r3, #12]
 800a998:	2b02      	cmp	r3, #2
 800a99a:	d102      	bne.n	800a9a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a99c:	2301      	movs	r3, #1
 800a99e:	73fb      	strb	r3, [r7, #15]
 800a9a0:	e001      	b.n	800a9a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a9a2:	f7f7 fa95 	bl	8001ed0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a9ac:	7bfa      	ldrb	r2, [r7, #15]
 800a9ae:	4611      	mov	r1, r2
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	f7fe fcf6 	bl	80093a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a9bc:	4618      	mov	r0, r3
 800a9be:	f7fe fc9e 	bl	80092fe <USBD_LL_Reset>
}
 800a9c2:	bf00      	nop
 800a9c4:	3710      	adds	r7, #16
 800a9c6:	46bd      	mov	sp, r7
 800a9c8:	bd80      	pop	{r7, pc}
	...

0800a9cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b082      	sub	sp, #8
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f7fe fcf1 	bl	80093c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	6812      	ldr	r2, [r2, #0]
 800a9ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a9f2:	f043 0301 	orr.w	r3, r3, #1
 800a9f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	6a1b      	ldr	r3, [r3, #32]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d005      	beq.n	800aa0c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800aa00:	4b04      	ldr	r3, [pc, #16]	; (800aa14 <HAL_PCD_SuspendCallback+0x48>)
 800aa02:	691b      	ldr	r3, [r3, #16]
 800aa04:	4a03      	ldr	r2, [pc, #12]	; (800aa14 <HAL_PCD_SuspendCallback+0x48>)
 800aa06:	f043 0306 	orr.w	r3, r3, #6
 800aa0a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800aa0c:	bf00      	nop
 800aa0e:	3708      	adds	r7, #8
 800aa10:	46bd      	mov	sp, r7
 800aa12:	bd80      	pop	{r7, pc}
 800aa14:	e000ed00 	.word	0xe000ed00

0800aa18 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa18:	b580      	push	{r7, lr}
 800aa1a:	b082      	sub	sp, #8
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa26:	4618      	mov	r0, r3
 800aa28:	f7fe fce1 	bl	80093ee <USBD_LL_Resume>
}
 800aa2c:	bf00      	nop
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b082      	sub	sp, #8
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa46:	78fa      	ldrb	r2, [r7, #3]
 800aa48:	4611      	mov	r1, r2
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f7fe fd39 	bl	80094c2 <USBD_LL_IsoOUTIncomplete>
}
 800aa50:	bf00      	nop
 800aa52:	3708      	adds	r7, #8
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}

0800aa58 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b082      	sub	sp, #8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	460b      	mov	r3, r1
 800aa62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa6a:	78fa      	ldrb	r2, [r7, #3]
 800aa6c:	4611      	mov	r1, r2
 800aa6e:	4618      	mov	r0, r3
 800aa70:	f7fe fcf5 	bl	800945e <USBD_LL_IsoINIncomplete>
}
 800aa74:	bf00      	nop
 800aa76:	3708      	adds	r7, #8
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b082      	sub	sp, #8
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	f7fe fd4b 	bl	8009526 <USBD_LL_DevConnected>
}
 800aa90:	bf00      	nop
 800aa92:	3708      	adds	r7, #8
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}

0800aa98 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800aa98:	b580      	push	{r7, lr}
 800aa9a:	b082      	sub	sp, #8
 800aa9c:	af00      	add	r7, sp, #0
 800aa9e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f7fe fd48 	bl	800953c <USBD_LL_DevDisconnected>
}
 800aaac:	bf00      	nop
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b082      	sub	sp, #8
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	781b      	ldrb	r3, [r3, #0]
 800aac0:	2b00      	cmp	r3, #0
 800aac2:	d13c      	bne.n	800ab3e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800aac4:	4a20      	ldr	r2, [pc, #128]	; (800ab48 <USBD_LL_Init+0x94>)
 800aac6:	687b      	ldr	r3, [r7, #4]
 800aac8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	4a1e      	ldr	r2, [pc, #120]	; (800ab48 <USBD_LL_Init+0x94>)
 800aad0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800aad4:	4b1c      	ldr	r3, [pc, #112]	; (800ab48 <USBD_LL_Init+0x94>)
 800aad6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800aada:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800aadc:	4b1a      	ldr	r3, [pc, #104]	; (800ab48 <USBD_LL_Init+0x94>)
 800aade:	2204      	movs	r2, #4
 800aae0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800aae2:	4b19      	ldr	r3, [pc, #100]	; (800ab48 <USBD_LL_Init+0x94>)
 800aae4:	2202      	movs	r2, #2
 800aae6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800aae8:	4b17      	ldr	r3, [pc, #92]	; (800ab48 <USBD_LL_Init+0x94>)
 800aaea:	2200      	movs	r2, #0
 800aaec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800aaee:	4b16      	ldr	r3, [pc, #88]	; (800ab48 <USBD_LL_Init+0x94>)
 800aaf0:	2202      	movs	r2, #2
 800aaf2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800aaf4:	4b14      	ldr	r3, [pc, #80]	; (800ab48 <USBD_LL_Init+0x94>)
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800aafa:	4b13      	ldr	r3, [pc, #76]	; (800ab48 <USBD_LL_Init+0x94>)
 800aafc:	2200      	movs	r2, #0
 800aafe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ab00:	4b11      	ldr	r3, [pc, #68]	; (800ab48 <USBD_LL_Init+0x94>)
 800ab02:	2200      	movs	r2, #0
 800ab04:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ab06:	4b10      	ldr	r3, [pc, #64]	; (800ab48 <USBD_LL_Init+0x94>)
 800ab08:	2200      	movs	r2, #0
 800ab0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ab0c:	4b0e      	ldr	r3, [pc, #56]	; (800ab48 <USBD_LL_Init+0x94>)
 800ab0e:	2200      	movs	r2, #0
 800ab10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ab12:	480d      	ldr	r0, [pc, #52]	; (800ab48 <USBD_LL_Init+0x94>)
 800ab14:	f7f9 fa4c 	bl	8003fb0 <HAL_PCD_Init>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d001      	beq.n	800ab22 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ab1e:	f7f7 f9d7 	bl	8001ed0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ab22:	2180      	movs	r1, #128	; 0x80
 800ab24:	4808      	ldr	r0, [pc, #32]	; (800ab48 <USBD_LL_Init+0x94>)
 800ab26:	f7fa fca4 	bl	8005472 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ab2a:	2240      	movs	r2, #64	; 0x40
 800ab2c:	2100      	movs	r1, #0
 800ab2e:	4806      	ldr	r0, [pc, #24]	; (800ab48 <USBD_LL_Init+0x94>)
 800ab30:	f7fa fc58 	bl	80053e4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ab34:	2280      	movs	r2, #128	; 0x80
 800ab36:	2101      	movs	r1, #1
 800ab38:	4803      	ldr	r0, [pc, #12]	; (800ab48 <USBD_LL_Init+0x94>)
 800ab3a:	f7fa fc53 	bl	80053e4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ab3e:	2300      	movs	r3, #0
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	3708      	adds	r7, #8
 800ab44:	46bd      	mov	sp, r7
 800ab46:	bd80      	pop	{r7, pc}
 800ab48:	20001ba0 	.word	0x20001ba0

0800ab4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ab4c:	b580      	push	{r7, lr}
 800ab4e:	b084      	sub	sp, #16
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab54:	2300      	movs	r3, #0
 800ab56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ab62:	4618      	mov	r0, r3
 800ab64:	f7f9 fb41 	bl	80041ea <HAL_PCD_Start>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ab6c:	7bfb      	ldrb	r3, [r7, #15]
 800ab6e:	4618      	mov	r0, r3
 800ab70:	f000 f942 	bl	800adf8 <USBD_Get_USB_Status>
 800ab74:	4603      	mov	r3, r0
 800ab76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ab78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3710      	adds	r7, #16
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	bd80      	pop	{r7, pc}

0800ab82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ab82:	b580      	push	{r7, lr}
 800ab84:	b084      	sub	sp, #16
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	6078      	str	r0, [r7, #4]
 800ab8a:	4608      	mov	r0, r1
 800ab8c:	4611      	mov	r1, r2
 800ab8e:	461a      	mov	r2, r3
 800ab90:	4603      	mov	r3, r0
 800ab92:	70fb      	strb	r3, [r7, #3]
 800ab94:	460b      	mov	r3, r1
 800ab96:	70bb      	strb	r3, [r7, #2]
 800ab98:	4613      	mov	r3, r2
 800ab9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800aba0:	2300      	movs	r3, #0
 800aba2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800abaa:	78bb      	ldrb	r3, [r7, #2]
 800abac:	883a      	ldrh	r2, [r7, #0]
 800abae:	78f9      	ldrb	r1, [r7, #3]
 800abb0:	f7fa f812 	bl	8004bd8 <HAL_PCD_EP_Open>
 800abb4:	4603      	mov	r3, r0
 800abb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 f91c 	bl	800adf8 <USBD_Get_USB_Status>
 800abc0:	4603      	mov	r3, r0
 800abc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800abc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800abc6:	4618      	mov	r0, r3
 800abc8:	3710      	adds	r7, #16
 800abca:	46bd      	mov	sp, r7
 800abcc:	bd80      	pop	{r7, pc}

0800abce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800abce:	b580      	push	{r7, lr}
 800abd0:	b084      	sub	sp, #16
 800abd2:	af00      	add	r7, sp, #0
 800abd4:	6078      	str	r0, [r7, #4]
 800abd6:	460b      	mov	r3, r1
 800abd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800abda:	2300      	movs	r3, #0
 800abdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800abde:	2300      	movs	r3, #0
 800abe0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800abe8:	78fa      	ldrb	r2, [r7, #3]
 800abea:	4611      	mov	r1, r2
 800abec:	4618      	mov	r0, r3
 800abee:	f7fa f85b 	bl	8004ca8 <HAL_PCD_EP_Close>
 800abf2:	4603      	mov	r3, r0
 800abf4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800abf6:	7bfb      	ldrb	r3, [r7, #15]
 800abf8:	4618      	mov	r0, r3
 800abfa:	f000 f8fd 	bl	800adf8 <USBD_Get_USB_Status>
 800abfe:	4603      	mov	r3, r0
 800ac00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac02:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	460b      	mov	r3, r1
 800ac16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac18:	2300      	movs	r3, #0
 800ac1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac26:	78fa      	ldrb	r2, [r7, #3]
 800ac28:	4611      	mov	r1, r2
 800ac2a:	4618      	mov	r0, r3
 800ac2c:	f7fa f933 	bl	8004e96 <HAL_PCD_EP_SetStall>
 800ac30:	4603      	mov	r3, r0
 800ac32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac34:	7bfb      	ldrb	r3, [r7, #15]
 800ac36:	4618      	mov	r0, r3
 800ac38:	f000 f8de 	bl	800adf8 <USBD_Get_USB_Status>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac40:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
 800ac52:	460b      	mov	r3, r1
 800ac54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ac56:	2300      	movs	r3, #0
 800ac58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ac5a:	2300      	movs	r3, #0
 800ac5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac64:	78fa      	ldrb	r2, [r7, #3]
 800ac66:	4611      	mov	r1, r2
 800ac68:	4618      	mov	r0, r3
 800ac6a:	f7fa f978 	bl	8004f5e <HAL_PCD_EP_ClrStall>
 800ac6e:	4603      	mov	r3, r0
 800ac70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ac72:	7bfb      	ldrb	r3, [r7, #15]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f000 f8bf 	bl	800adf8 <USBD_Get_USB_Status>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ac7e:	7bbb      	ldrb	r3, [r7, #14]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b085      	sub	sp, #20
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
 800ac90:	460b      	mov	r3, r1
 800ac92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800ac9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800ac9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	da0b      	bge.n	800acbc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aca4:	78fb      	ldrb	r3, [r7, #3]
 800aca6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acaa:	68f9      	ldr	r1, [r7, #12]
 800acac:	4613      	mov	r3, r2
 800acae:	00db      	lsls	r3, r3, #3
 800acb0:	4413      	add	r3, r2
 800acb2:	009b      	lsls	r3, r3, #2
 800acb4:	440b      	add	r3, r1
 800acb6:	333e      	adds	r3, #62	; 0x3e
 800acb8:	781b      	ldrb	r3, [r3, #0]
 800acba:	e00b      	b.n	800acd4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800acbc:	78fb      	ldrb	r3, [r7, #3]
 800acbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800acc2:	68f9      	ldr	r1, [r7, #12]
 800acc4:	4613      	mov	r3, r2
 800acc6:	00db      	lsls	r3, r3, #3
 800acc8:	4413      	add	r3, r2
 800acca:	009b      	lsls	r3, r3, #2
 800accc:	440b      	add	r3, r1
 800acce:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800acd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800acd4:	4618      	mov	r0, r3
 800acd6:	3714      	adds	r7, #20
 800acd8:	46bd      	mov	sp, r7
 800acda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acde:	4770      	bx	lr

0800ace0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b084      	sub	sp, #16
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	460b      	mov	r3, r1
 800acea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800acec:	2300      	movs	r3, #0
 800acee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800acf0:	2300      	movs	r3, #0
 800acf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800acfa:	78fa      	ldrb	r2, [r7, #3]
 800acfc:	4611      	mov	r1, r2
 800acfe:	4618      	mov	r0, r3
 800ad00:	f7f9 ff45 	bl	8004b8e <HAL_PCD_SetAddress>
 800ad04:	4603      	mov	r3, r0
 800ad06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad08:	7bfb      	ldrb	r3, [r7, #15]
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f000 f874 	bl	800adf8 <USBD_Get_USB_Status>
 800ad10:	4603      	mov	r3, r0
 800ad12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ad14:	7bbb      	ldrb	r3, [r7, #14]
}
 800ad16:	4618      	mov	r0, r3
 800ad18:	3710      	adds	r7, #16
 800ad1a:	46bd      	mov	sp, r7
 800ad1c:	bd80      	pop	{r7, pc}

0800ad1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad1e:	b580      	push	{r7, lr}
 800ad20:	b086      	sub	sp, #24
 800ad22:	af00      	add	r7, sp, #0
 800ad24:	60f8      	str	r0, [r7, #12]
 800ad26:	607a      	str	r2, [r7, #4]
 800ad28:	603b      	str	r3, [r7, #0]
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad2e:	2300      	movs	r3, #0
 800ad30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad32:	2300      	movs	r3, #0
 800ad34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ad3c:	7af9      	ldrb	r1, [r7, #11]
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	687a      	ldr	r2, [r7, #4]
 800ad42:	f7fa f85e 	bl	8004e02 <HAL_PCD_EP_Transmit>
 800ad46:	4603      	mov	r3, r0
 800ad48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad4a:	7dfb      	ldrb	r3, [r7, #23]
 800ad4c:	4618      	mov	r0, r3
 800ad4e:	f000 f853 	bl	800adf8 <USBD_Get_USB_Status>
 800ad52:	4603      	mov	r3, r0
 800ad54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad56:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad58:	4618      	mov	r0, r3
 800ad5a:	3718      	adds	r7, #24
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}

0800ad60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	b086      	sub	sp, #24
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	60f8      	str	r0, [r7, #12]
 800ad68:	607a      	str	r2, [r7, #4]
 800ad6a:	603b      	str	r3, [r7, #0]
 800ad6c:	460b      	mov	r3, r1
 800ad6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad70:	2300      	movs	r3, #0
 800ad72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad74:	2300      	movs	r3, #0
 800ad76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ad7e:	7af9      	ldrb	r1, [r7, #11]
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	687a      	ldr	r2, [r7, #4]
 800ad84:	f7f9 ffda 	bl	8004d3c <HAL_PCD_EP_Receive>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ad8c:	7dfb      	ldrb	r3, [r7, #23]
 800ad8e:	4618      	mov	r0, r3
 800ad90:	f000 f832 	bl	800adf8 <USBD_Get_USB_Status>
 800ad94:	4603      	mov	r3, r0
 800ad96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ad98:	7dbb      	ldrb	r3, [r7, #22]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3718      	adds	r7, #24
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b082      	sub	sp, #8
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	460b      	mov	r3, r1
 800adac:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800adb4:	78fa      	ldrb	r2, [r7, #3]
 800adb6:	4611      	mov	r1, r2
 800adb8:	4618      	mov	r0, r3
 800adba:	f7fa f80a 	bl	8004dd2 <HAL_PCD_EP_GetRxCount>
 800adbe:	4603      	mov	r3, r0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3708      	adds	r7, #8
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}

0800adc8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800adc8:	b480      	push	{r7}
 800adca:	b083      	sub	sp, #12
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800add0:	4b03      	ldr	r3, [pc, #12]	; (800ade0 <USBD_static_malloc+0x18>)
}
 800add2:	4618      	mov	r0, r3
 800add4:	370c      	adds	r7, #12
 800add6:	46bd      	mov	sp, r7
 800add8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800addc:	4770      	bx	lr
 800adde:	bf00      	nop
 800ade0:	200020ac 	.word	0x200020ac

0800ade4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ade4:	b480      	push	{r7}
 800ade6:	b083      	sub	sp, #12
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]

}
 800adec:	bf00      	nop
 800adee:	370c      	adds	r7, #12
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr

0800adf8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	4603      	mov	r3, r0
 800ae00:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae02:	2300      	movs	r3, #0
 800ae04:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ae06:	79fb      	ldrb	r3, [r7, #7]
 800ae08:	2b03      	cmp	r3, #3
 800ae0a:	d817      	bhi.n	800ae3c <USBD_Get_USB_Status+0x44>
 800ae0c:	a201      	add	r2, pc, #4	; (adr r2, 800ae14 <USBD_Get_USB_Status+0x1c>)
 800ae0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae12:	bf00      	nop
 800ae14:	0800ae25 	.word	0x0800ae25
 800ae18:	0800ae2b 	.word	0x0800ae2b
 800ae1c:	0800ae31 	.word	0x0800ae31
 800ae20:	0800ae37 	.word	0x0800ae37
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ae24:	2300      	movs	r3, #0
 800ae26:	73fb      	strb	r3, [r7, #15]
    break;
 800ae28:	e00b      	b.n	800ae42 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	73fb      	strb	r3, [r7, #15]
    break;
 800ae2e:	e008      	b.n	800ae42 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ae30:	2301      	movs	r3, #1
 800ae32:	73fb      	strb	r3, [r7, #15]
    break;
 800ae34:	e005      	b.n	800ae42 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ae36:	2303      	movs	r3, #3
 800ae38:	73fb      	strb	r3, [r7, #15]
    break;
 800ae3a:	e002      	b.n	800ae42 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ae3c:	2303      	movs	r3, #3
 800ae3e:	73fb      	strb	r3, [r7, #15]
    break;
 800ae40:	bf00      	nop
  }
  return usb_status;
 800ae42:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae44:	4618      	mov	r0, r3
 800ae46:	3714      	adds	r7, #20
 800ae48:	46bd      	mov	sp, r7
 800ae4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae4e:	4770      	bx	lr

0800ae50 <atof>:
 800ae50:	2100      	movs	r1, #0
 800ae52:	f001 baef 	b.w	800c434 <strtod>
	...

0800ae58 <__errno>:
 800ae58:	4b01      	ldr	r3, [pc, #4]	; (800ae60 <__errno+0x8>)
 800ae5a:	6818      	ldr	r0, [r3, #0]
 800ae5c:	4770      	bx	lr
 800ae5e:	bf00      	nop
 800ae60:	20000124 	.word	0x20000124

0800ae64 <__libc_init_array>:
 800ae64:	b570      	push	{r4, r5, r6, lr}
 800ae66:	4d0d      	ldr	r5, [pc, #52]	; (800ae9c <__libc_init_array+0x38>)
 800ae68:	4c0d      	ldr	r4, [pc, #52]	; (800aea0 <__libc_init_array+0x3c>)
 800ae6a:	1b64      	subs	r4, r4, r5
 800ae6c:	10a4      	asrs	r4, r4, #2
 800ae6e:	2600      	movs	r6, #0
 800ae70:	42a6      	cmp	r6, r4
 800ae72:	d109      	bne.n	800ae88 <__libc_init_array+0x24>
 800ae74:	4d0b      	ldr	r5, [pc, #44]	; (800aea4 <__libc_init_array+0x40>)
 800ae76:	4c0c      	ldr	r4, [pc, #48]	; (800aea8 <__libc_init_array+0x44>)
 800ae78:	f004 fb38 	bl	800f4ec <_init>
 800ae7c:	1b64      	subs	r4, r4, r5
 800ae7e:	10a4      	asrs	r4, r4, #2
 800ae80:	2600      	movs	r6, #0
 800ae82:	42a6      	cmp	r6, r4
 800ae84:	d105      	bne.n	800ae92 <__libc_init_array+0x2e>
 800ae86:	bd70      	pop	{r4, r5, r6, pc}
 800ae88:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae8c:	4798      	blx	r3
 800ae8e:	3601      	adds	r6, #1
 800ae90:	e7ee      	b.n	800ae70 <__libc_init_array+0xc>
 800ae92:	f855 3b04 	ldr.w	r3, [r5], #4
 800ae96:	4798      	blx	r3
 800ae98:	3601      	adds	r6, #1
 800ae9a:	e7f2      	b.n	800ae82 <__libc_init_array+0x1e>
 800ae9c:	0800faa0 	.word	0x0800faa0
 800aea0:	0800faa0 	.word	0x0800faa0
 800aea4:	0800faa0 	.word	0x0800faa0
 800aea8:	0800faa4 	.word	0x0800faa4

0800aeac <memcpy>:
 800aeac:	440a      	add	r2, r1
 800aeae:	4291      	cmp	r1, r2
 800aeb0:	f100 33ff 	add.w	r3, r0, #4294967295
 800aeb4:	d100      	bne.n	800aeb8 <memcpy+0xc>
 800aeb6:	4770      	bx	lr
 800aeb8:	b510      	push	{r4, lr}
 800aeba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aebe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aec2:	4291      	cmp	r1, r2
 800aec4:	d1f9      	bne.n	800aeba <memcpy+0xe>
 800aec6:	bd10      	pop	{r4, pc}

0800aec8 <memset>:
 800aec8:	4402      	add	r2, r0
 800aeca:	4603      	mov	r3, r0
 800aecc:	4293      	cmp	r3, r2
 800aece:	d100      	bne.n	800aed2 <memset+0xa>
 800aed0:	4770      	bx	lr
 800aed2:	f803 1b01 	strb.w	r1, [r3], #1
 800aed6:	e7f9      	b.n	800aecc <memset+0x4>

0800aed8 <__cvt>:
 800aed8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aedc:	ec55 4b10 	vmov	r4, r5, d0
 800aee0:	2d00      	cmp	r5, #0
 800aee2:	460e      	mov	r6, r1
 800aee4:	4619      	mov	r1, r3
 800aee6:	462b      	mov	r3, r5
 800aee8:	bfbb      	ittet	lt
 800aeea:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aeee:	461d      	movlt	r5, r3
 800aef0:	2300      	movge	r3, #0
 800aef2:	232d      	movlt	r3, #45	; 0x2d
 800aef4:	700b      	strb	r3, [r1, #0]
 800aef6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aef8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aefc:	4691      	mov	r9, r2
 800aefe:	f023 0820 	bic.w	r8, r3, #32
 800af02:	bfbc      	itt	lt
 800af04:	4622      	movlt	r2, r4
 800af06:	4614      	movlt	r4, r2
 800af08:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af0c:	d005      	beq.n	800af1a <__cvt+0x42>
 800af0e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800af12:	d100      	bne.n	800af16 <__cvt+0x3e>
 800af14:	3601      	adds	r6, #1
 800af16:	2102      	movs	r1, #2
 800af18:	e000      	b.n	800af1c <__cvt+0x44>
 800af1a:	2103      	movs	r1, #3
 800af1c:	ab03      	add	r3, sp, #12
 800af1e:	9301      	str	r3, [sp, #4]
 800af20:	ab02      	add	r3, sp, #8
 800af22:	9300      	str	r3, [sp, #0]
 800af24:	ec45 4b10 	vmov	d0, r4, r5
 800af28:	4653      	mov	r3, sl
 800af2a:	4632      	mov	r2, r6
 800af2c:	f001 fb94 	bl	800c658 <_dtoa_r>
 800af30:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800af34:	4607      	mov	r7, r0
 800af36:	d102      	bne.n	800af3e <__cvt+0x66>
 800af38:	f019 0f01 	tst.w	r9, #1
 800af3c:	d022      	beq.n	800af84 <__cvt+0xac>
 800af3e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800af42:	eb07 0906 	add.w	r9, r7, r6
 800af46:	d110      	bne.n	800af6a <__cvt+0x92>
 800af48:	783b      	ldrb	r3, [r7, #0]
 800af4a:	2b30      	cmp	r3, #48	; 0x30
 800af4c:	d10a      	bne.n	800af64 <__cvt+0x8c>
 800af4e:	2200      	movs	r2, #0
 800af50:	2300      	movs	r3, #0
 800af52:	4620      	mov	r0, r4
 800af54:	4629      	mov	r1, r5
 800af56:	f7f5 fdbf 	bl	8000ad8 <__aeabi_dcmpeq>
 800af5a:	b918      	cbnz	r0, 800af64 <__cvt+0x8c>
 800af5c:	f1c6 0601 	rsb	r6, r6, #1
 800af60:	f8ca 6000 	str.w	r6, [sl]
 800af64:	f8da 3000 	ldr.w	r3, [sl]
 800af68:	4499      	add	r9, r3
 800af6a:	2200      	movs	r2, #0
 800af6c:	2300      	movs	r3, #0
 800af6e:	4620      	mov	r0, r4
 800af70:	4629      	mov	r1, r5
 800af72:	f7f5 fdb1 	bl	8000ad8 <__aeabi_dcmpeq>
 800af76:	b108      	cbz	r0, 800af7c <__cvt+0xa4>
 800af78:	f8cd 900c 	str.w	r9, [sp, #12]
 800af7c:	2230      	movs	r2, #48	; 0x30
 800af7e:	9b03      	ldr	r3, [sp, #12]
 800af80:	454b      	cmp	r3, r9
 800af82:	d307      	bcc.n	800af94 <__cvt+0xbc>
 800af84:	9b03      	ldr	r3, [sp, #12]
 800af86:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af88:	1bdb      	subs	r3, r3, r7
 800af8a:	4638      	mov	r0, r7
 800af8c:	6013      	str	r3, [r2, #0]
 800af8e:	b004      	add	sp, #16
 800af90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af94:	1c59      	adds	r1, r3, #1
 800af96:	9103      	str	r1, [sp, #12]
 800af98:	701a      	strb	r2, [r3, #0]
 800af9a:	e7f0      	b.n	800af7e <__cvt+0xa6>

0800af9c <__exponent>:
 800af9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800af9e:	4603      	mov	r3, r0
 800afa0:	2900      	cmp	r1, #0
 800afa2:	bfb8      	it	lt
 800afa4:	4249      	neglt	r1, r1
 800afa6:	f803 2b02 	strb.w	r2, [r3], #2
 800afaa:	bfb4      	ite	lt
 800afac:	222d      	movlt	r2, #45	; 0x2d
 800afae:	222b      	movge	r2, #43	; 0x2b
 800afb0:	2909      	cmp	r1, #9
 800afb2:	7042      	strb	r2, [r0, #1]
 800afb4:	dd2a      	ble.n	800b00c <__exponent+0x70>
 800afb6:	f10d 0407 	add.w	r4, sp, #7
 800afba:	46a4      	mov	ip, r4
 800afbc:	270a      	movs	r7, #10
 800afbe:	46a6      	mov	lr, r4
 800afc0:	460a      	mov	r2, r1
 800afc2:	fb91 f6f7 	sdiv	r6, r1, r7
 800afc6:	fb07 1516 	mls	r5, r7, r6, r1
 800afca:	3530      	adds	r5, #48	; 0x30
 800afcc:	2a63      	cmp	r2, #99	; 0x63
 800afce:	f104 34ff 	add.w	r4, r4, #4294967295
 800afd2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800afd6:	4631      	mov	r1, r6
 800afd8:	dcf1      	bgt.n	800afbe <__exponent+0x22>
 800afda:	3130      	adds	r1, #48	; 0x30
 800afdc:	f1ae 0502 	sub.w	r5, lr, #2
 800afe0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800afe4:	1c44      	adds	r4, r0, #1
 800afe6:	4629      	mov	r1, r5
 800afe8:	4561      	cmp	r1, ip
 800afea:	d30a      	bcc.n	800b002 <__exponent+0x66>
 800afec:	f10d 0209 	add.w	r2, sp, #9
 800aff0:	eba2 020e 	sub.w	r2, r2, lr
 800aff4:	4565      	cmp	r5, ip
 800aff6:	bf88      	it	hi
 800aff8:	2200      	movhi	r2, #0
 800affa:	4413      	add	r3, r2
 800affc:	1a18      	subs	r0, r3, r0
 800affe:	b003      	add	sp, #12
 800b000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b002:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b006:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b00a:	e7ed      	b.n	800afe8 <__exponent+0x4c>
 800b00c:	2330      	movs	r3, #48	; 0x30
 800b00e:	3130      	adds	r1, #48	; 0x30
 800b010:	7083      	strb	r3, [r0, #2]
 800b012:	70c1      	strb	r1, [r0, #3]
 800b014:	1d03      	adds	r3, r0, #4
 800b016:	e7f1      	b.n	800affc <__exponent+0x60>

0800b018 <_printf_float>:
 800b018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b01c:	ed2d 8b02 	vpush	{d8}
 800b020:	b08d      	sub	sp, #52	; 0x34
 800b022:	460c      	mov	r4, r1
 800b024:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b028:	4616      	mov	r6, r2
 800b02a:	461f      	mov	r7, r3
 800b02c:	4605      	mov	r5, r0
 800b02e:	f002 fc83 	bl	800d938 <_localeconv_r>
 800b032:	f8d0 a000 	ldr.w	sl, [r0]
 800b036:	4650      	mov	r0, sl
 800b038:	f7f5 f8d2 	bl	80001e0 <strlen>
 800b03c:	2300      	movs	r3, #0
 800b03e:	930a      	str	r3, [sp, #40]	; 0x28
 800b040:	6823      	ldr	r3, [r4, #0]
 800b042:	9305      	str	r3, [sp, #20]
 800b044:	f8d8 3000 	ldr.w	r3, [r8]
 800b048:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b04c:	3307      	adds	r3, #7
 800b04e:	f023 0307 	bic.w	r3, r3, #7
 800b052:	f103 0208 	add.w	r2, r3, #8
 800b056:	f8c8 2000 	str.w	r2, [r8]
 800b05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b062:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b066:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b06a:	9307      	str	r3, [sp, #28]
 800b06c:	f8cd 8018 	str.w	r8, [sp, #24]
 800b070:	ee08 0a10 	vmov	s16, r0
 800b074:	4b9f      	ldr	r3, [pc, #636]	; (800b2f4 <_printf_float+0x2dc>)
 800b076:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b07a:	f04f 32ff 	mov.w	r2, #4294967295
 800b07e:	f7f5 fd5d 	bl	8000b3c <__aeabi_dcmpun>
 800b082:	bb88      	cbnz	r0, 800b0e8 <_printf_float+0xd0>
 800b084:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b088:	4b9a      	ldr	r3, [pc, #616]	; (800b2f4 <_printf_float+0x2dc>)
 800b08a:	f04f 32ff 	mov.w	r2, #4294967295
 800b08e:	f7f5 fd37 	bl	8000b00 <__aeabi_dcmple>
 800b092:	bb48      	cbnz	r0, 800b0e8 <_printf_float+0xd0>
 800b094:	2200      	movs	r2, #0
 800b096:	2300      	movs	r3, #0
 800b098:	4640      	mov	r0, r8
 800b09a:	4649      	mov	r1, r9
 800b09c:	f7f5 fd26 	bl	8000aec <__aeabi_dcmplt>
 800b0a0:	b110      	cbz	r0, 800b0a8 <_printf_float+0x90>
 800b0a2:	232d      	movs	r3, #45	; 0x2d
 800b0a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b0a8:	4b93      	ldr	r3, [pc, #588]	; (800b2f8 <_printf_float+0x2e0>)
 800b0aa:	4894      	ldr	r0, [pc, #592]	; (800b2fc <_printf_float+0x2e4>)
 800b0ac:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800b0b0:	bf94      	ite	ls
 800b0b2:	4698      	movls	r8, r3
 800b0b4:	4680      	movhi	r8, r0
 800b0b6:	2303      	movs	r3, #3
 800b0b8:	6123      	str	r3, [r4, #16]
 800b0ba:	9b05      	ldr	r3, [sp, #20]
 800b0bc:	f023 0204 	bic.w	r2, r3, #4
 800b0c0:	6022      	str	r2, [r4, #0]
 800b0c2:	f04f 0900 	mov.w	r9, #0
 800b0c6:	9700      	str	r7, [sp, #0]
 800b0c8:	4633      	mov	r3, r6
 800b0ca:	aa0b      	add	r2, sp, #44	; 0x2c
 800b0cc:	4621      	mov	r1, r4
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	f000 f9d8 	bl	800b484 <_printf_common>
 800b0d4:	3001      	adds	r0, #1
 800b0d6:	f040 8090 	bne.w	800b1fa <_printf_float+0x1e2>
 800b0da:	f04f 30ff 	mov.w	r0, #4294967295
 800b0de:	b00d      	add	sp, #52	; 0x34
 800b0e0:	ecbd 8b02 	vpop	{d8}
 800b0e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0e8:	4642      	mov	r2, r8
 800b0ea:	464b      	mov	r3, r9
 800b0ec:	4640      	mov	r0, r8
 800b0ee:	4649      	mov	r1, r9
 800b0f0:	f7f5 fd24 	bl	8000b3c <__aeabi_dcmpun>
 800b0f4:	b140      	cbz	r0, 800b108 <_printf_float+0xf0>
 800b0f6:	464b      	mov	r3, r9
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	bfbc      	itt	lt
 800b0fc:	232d      	movlt	r3, #45	; 0x2d
 800b0fe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800b102:	487f      	ldr	r0, [pc, #508]	; (800b300 <_printf_float+0x2e8>)
 800b104:	4b7f      	ldr	r3, [pc, #508]	; (800b304 <_printf_float+0x2ec>)
 800b106:	e7d1      	b.n	800b0ac <_printf_float+0x94>
 800b108:	6863      	ldr	r3, [r4, #4]
 800b10a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800b10e:	9206      	str	r2, [sp, #24]
 800b110:	1c5a      	adds	r2, r3, #1
 800b112:	d13f      	bne.n	800b194 <_printf_float+0x17c>
 800b114:	2306      	movs	r3, #6
 800b116:	6063      	str	r3, [r4, #4]
 800b118:	9b05      	ldr	r3, [sp, #20]
 800b11a:	6861      	ldr	r1, [r4, #4]
 800b11c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800b120:	2300      	movs	r3, #0
 800b122:	9303      	str	r3, [sp, #12]
 800b124:	ab0a      	add	r3, sp, #40	; 0x28
 800b126:	e9cd b301 	strd	fp, r3, [sp, #4]
 800b12a:	ab09      	add	r3, sp, #36	; 0x24
 800b12c:	ec49 8b10 	vmov	d0, r8, r9
 800b130:	9300      	str	r3, [sp, #0]
 800b132:	6022      	str	r2, [r4, #0]
 800b134:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800b138:	4628      	mov	r0, r5
 800b13a:	f7ff fecd 	bl	800aed8 <__cvt>
 800b13e:	9b06      	ldr	r3, [sp, #24]
 800b140:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b142:	2b47      	cmp	r3, #71	; 0x47
 800b144:	4680      	mov	r8, r0
 800b146:	d108      	bne.n	800b15a <_printf_float+0x142>
 800b148:	1cc8      	adds	r0, r1, #3
 800b14a:	db02      	blt.n	800b152 <_printf_float+0x13a>
 800b14c:	6863      	ldr	r3, [r4, #4]
 800b14e:	4299      	cmp	r1, r3
 800b150:	dd41      	ble.n	800b1d6 <_printf_float+0x1be>
 800b152:	f1ab 0b02 	sub.w	fp, fp, #2
 800b156:	fa5f fb8b 	uxtb.w	fp, fp
 800b15a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b15e:	d820      	bhi.n	800b1a2 <_printf_float+0x18a>
 800b160:	3901      	subs	r1, #1
 800b162:	465a      	mov	r2, fp
 800b164:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800b168:	9109      	str	r1, [sp, #36]	; 0x24
 800b16a:	f7ff ff17 	bl	800af9c <__exponent>
 800b16e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b170:	1813      	adds	r3, r2, r0
 800b172:	2a01      	cmp	r2, #1
 800b174:	4681      	mov	r9, r0
 800b176:	6123      	str	r3, [r4, #16]
 800b178:	dc02      	bgt.n	800b180 <_printf_float+0x168>
 800b17a:	6822      	ldr	r2, [r4, #0]
 800b17c:	07d2      	lsls	r2, r2, #31
 800b17e:	d501      	bpl.n	800b184 <_printf_float+0x16c>
 800b180:	3301      	adds	r3, #1
 800b182:	6123      	str	r3, [r4, #16]
 800b184:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d09c      	beq.n	800b0c6 <_printf_float+0xae>
 800b18c:	232d      	movs	r3, #45	; 0x2d
 800b18e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b192:	e798      	b.n	800b0c6 <_printf_float+0xae>
 800b194:	9a06      	ldr	r2, [sp, #24]
 800b196:	2a47      	cmp	r2, #71	; 0x47
 800b198:	d1be      	bne.n	800b118 <_printf_float+0x100>
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d1bc      	bne.n	800b118 <_printf_float+0x100>
 800b19e:	2301      	movs	r3, #1
 800b1a0:	e7b9      	b.n	800b116 <_printf_float+0xfe>
 800b1a2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800b1a6:	d118      	bne.n	800b1da <_printf_float+0x1c2>
 800b1a8:	2900      	cmp	r1, #0
 800b1aa:	6863      	ldr	r3, [r4, #4]
 800b1ac:	dd0b      	ble.n	800b1c6 <_printf_float+0x1ae>
 800b1ae:	6121      	str	r1, [r4, #16]
 800b1b0:	b913      	cbnz	r3, 800b1b8 <_printf_float+0x1a0>
 800b1b2:	6822      	ldr	r2, [r4, #0]
 800b1b4:	07d0      	lsls	r0, r2, #31
 800b1b6:	d502      	bpl.n	800b1be <_printf_float+0x1a6>
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	440b      	add	r3, r1
 800b1bc:	6123      	str	r3, [r4, #16]
 800b1be:	65a1      	str	r1, [r4, #88]	; 0x58
 800b1c0:	f04f 0900 	mov.w	r9, #0
 800b1c4:	e7de      	b.n	800b184 <_printf_float+0x16c>
 800b1c6:	b913      	cbnz	r3, 800b1ce <_printf_float+0x1b6>
 800b1c8:	6822      	ldr	r2, [r4, #0]
 800b1ca:	07d2      	lsls	r2, r2, #31
 800b1cc:	d501      	bpl.n	800b1d2 <_printf_float+0x1ba>
 800b1ce:	3302      	adds	r3, #2
 800b1d0:	e7f4      	b.n	800b1bc <_printf_float+0x1a4>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e7f2      	b.n	800b1bc <_printf_float+0x1a4>
 800b1d6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800b1da:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b1dc:	4299      	cmp	r1, r3
 800b1de:	db05      	blt.n	800b1ec <_printf_float+0x1d4>
 800b1e0:	6823      	ldr	r3, [r4, #0]
 800b1e2:	6121      	str	r1, [r4, #16]
 800b1e4:	07d8      	lsls	r0, r3, #31
 800b1e6:	d5ea      	bpl.n	800b1be <_printf_float+0x1a6>
 800b1e8:	1c4b      	adds	r3, r1, #1
 800b1ea:	e7e7      	b.n	800b1bc <_printf_float+0x1a4>
 800b1ec:	2900      	cmp	r1, #0
 800b1ee:	bfd4      	ite	le
 800b1f0:	f1c1 0202 	rsble	r2, r1, #2
 800b1f4:	2201      	movgt	r2, #1
 800b1f6:	4413      	add	r3, r2
 800b1f8:	e7e0      	b.n	800b1bc <_printf_float+0x1a4>
 800b1fa:	6823      	ldr	r3, [r4, #0]
 800b1fc:	055a      	lsls	r2, r3, #21
 800b1fe:	d407      	bmi.n	800b210 <_printf_float+0x1f8>
 800b200:	6923      	ldr	r3, [r4, #16]
 800b202:	4642      	mov	r2, r8
 800b204:	4631      	mov	r1, r6
 800b206:	4628      	mov	r0, r5
 800b208:	47b8      	blx	r7
 800b20a:	3001      	adds	r0, #1
 800b20c:	d12c      	bne.n	800b268 <_printf_float+0x250>
 800b20e:	e764      	b.n	800b0da <_printf_float+0xc2>
 800b210:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b214:	f240 80e0 	bls.w	800b3d8 <_printf_float+0x3c0>
 800b218:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b21c:	2200      	movs	r2, #0
 800b21e:	2300      	movs	r3, #0
 800b220:	f7f5 fc5a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b224:	2800      	cmp	r0, #0
 800b226:	d034      	beq.n	800b292 <_printf_float+0x27a>
 800b228:	4a37      	ldr	r2, [pc, #220]	; (800b308 <_printf_float+0x2f0>)
 800b22a:	2301      	movs	r3, #1
 800b22c:	4631      	mov	r1, r6
 800b22e:	4628      	mov	r0, r5
 800b230:	47b8      	blx	r7
 800b232:	3001      	adds	r0, #1
 800b234:	f43f af51 	beq.w	800b0da <_printf_float+0xc2>
 800b238:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b23c:	429a      	cmp	r2, r3
 800b23e:	db02      	blt.n	800b246 <_printf_float+0x22e>
 800b240:	6823      	ldr	r3, [r4, #0]
 800b242:	07d8      	lsls	r0, r3, #31
 800b244:	d510      	bpl.n	800b268 <_printf_float+0x250>
 800b246:	ee18 3a10 	vmov	r3, s16
 800b24a:	4652      	mov	r2, sl
 800b24c:	4631      	mov	r1, r6
 800b24e:	4628      	mov	r0, r5
 800b250:	47b8      	blx	r7
 800b252:	3001      	adds	r0, #1
 800b254:	f43f af41 	beq.w	800b0da <_printf_float+0xc2>
 800b258:	f04f 0800 	mov.w	r8, #0
 800b25c:	f104 091a 	add.w	r9, r4, #26
 800b260:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b262:	3b01      	subs	r3, #1
 800b264:	4543      	cmp	r3, r8
 800b266:	dc09      	bgt.n	800b27c <_printf_float+0x264>
 800b268:	6823      	ldr	r3, [r4, #0]
 800b26a:	079b      	lsls	r3, r3, #30
 800b26c:	f100 8105 	bmi.w	800b47a <_printf_float+0x462>
 800b270:	68e0      	ldr	r0, [r4, #12]
 800b272:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b274:	4298      	cmp	r0, r3
 800b276:	bfb8      	it	lt
 800b278:	4618      	movlt	r0, r3
 800b27a:	e730      	b.n	800b0de <_printf_float+0xc6>
 800b27c:	2301      	movs	r3, #1
 800b27e:	464a      	mov	r2, r9
 800b280:	4631      	mov	r1, r6
 800b282:	4628      	mov	r0, r5
 800b284:	47b8      	blx	r7
 800b286:	3001      	adds	r0, #1
 800b288:	f43f af27 	beq.w	800b0da <_printf_float+0xc2>
 800b28c:	f108 0801 	add.w	r8, r8, #1
 800b290:	e7e6      	b.n	800b260 <_printf_float+0x248>
 800b292:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b294:	2b00      	cmp	r3, #0
 800b296:	dc39      	bgt.n	800b30c <_printf_float+0x2f4>
 800b298:	4a1b      	ldr	r2, [pc, #108]	; (800b308 <_printf_float+0x2f0>)
 800b29a:	2301      	movs	r3, #1
 800b29c:	4631      	mov	r1, r6
 800b29e:	4628      	mov	r0, r5
 800b2a0:	47b8      	blx	r7
 800b2a2:	3001      	adds	r0, #1
 800b2a4:	f43f af19 	beq.w	800b0da <_printf_float+0xc2>
 800b2a8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b2ac:	4313      	orrs	r3, r2
 800b2ae:	d102      	bne.n	800b2b6 <_printf_float+0x29e>
 800b2b0:	6823      	ldr	r3, [r4, #0]
 800b2b2:	07d9      	lsls	r1, r3, #31
 800b2b4:	d5d8      	bpl.n	800b268 <_printf_float+0x250>
 800b2b6:	ee18 3a10 	vmov	r3, s16
 800b2ba:	4652      	mov	r2, sl
 800b2bc:	4631      	mov	r1, r6
 800b2be:	4628      	mov	r0, r5
 800b2c0:	47b8      	blx	r7
 800b2c2:	3001      	adds	r0, #1
 800b2c4:	f43f af09 	beq.w	800b0da <_printf_float+0xc2>
 800b2c8:	f04f 0900 	mov.w	r9, #0
 800b2cc:	f104 0a1a 	add.w	sl, r4, #26
 800b2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2d2:	425b      	negs	r3, r3
 800b2d4:	454b      	cmp	r3, r9
 800b2d6:	dc01      	bgt.n	800b2dc <_printf_float+0x2c4>
 800b2d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b2da:	e792      	b.n	800b202 <_printf_float+0x1ea>
 800b2dc:	2301      	movs	r3, #1
 800b2de:	4652      	mov	r2, sl
 800b2e0:	4631      	mov	r1, r6
 800b2e2:	4628      	mov	r0, r5
 800b2e4:	47b8      	blx	r7
 800b2e6:	3001      	adds	r0, #1
 800b2e8:	f43f aef7 	beq.w	800b0da <_printf_float+0xc2>
 800b2ec:	f109 0901 	add.w	r9, r9, #1
 800b2f0:	e7ee      	b.n	800b2d0 <_printf_float+0x2b8>
 800b2f2:	bf00      	nop
 800b2f4:	7fefffff 	.word	0x7fefffff
 800b2f8:	0800f5a4 	.word	0x0800f5a4
 800b2fc:	0800f5a8 	.word	0x0800f5a8
 800b300:	0800f5b0 	.word	0x0800f5b0
 800b304:	0800f5ac 	.word	0x0800f5ac
 800b308:	0800f5b4 	.word	0x0800f5b4
 800b30c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b30e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b310:	429a      	cmp	r2, r3
 800b312:	bfa8      	it	ge
 800b314:	461a      	movge	r2, r3
 800b316:	2a00      	cmp	r2, #0
 800b318:	4691      	mov	r9, r2
 800b31a:	dc37      	bgt.n	800b38c <_printf_float+0x374>
 800b31c:	f04f 0b00 	mov.w	fp, #0
 800b320:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b324:	f104 021a 	add.w	r2, r4, #26
 800b328:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b32a:	9305      	str	r3, [sp, #20]
 800b32c:	eba3 0309 	sub.w	r3, r3, r9
 800b330:	455b      	cmp	r3, fp
 800b332:	dc33      	bgt.n	800b39c <_printf_float+0x384>
 800b334:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b338:	429a      	cmp	r2, r3
 800b33a:	db3b      	blt.n	800b3b4 <_printf_float+0x39c>
 800b33c:	6823      	ldr	r3, [r4, #0]
 800b33e:	07da      	lsls	r2, r3, #31
 800b340:	d438      	bmi.n	800b3b4 <_printf_float+0x39c>
 800b342:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b344:	9a05      	ldr	r2, [sp, #20]
 800b346:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b348:	1a9a      	subs	r2, r3, r2
 800b34a:	eba3 0901 	sub.w	r9, r3, r1
 800b34e:	4591      	cmp	r9, r2
 800b350:	bfa8      	it	ge
 800b352:	4691      	movge	r9, r2
 800b354:	f1b9 0f00 	cmp.w	r9, #0
 800b358:	dc35      	bgt.n	800b3c6 <_printf_float+0x3ae>
 800b35a:	f04f 0800 	mov.w	r8, #0
 800b35e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b362:	f104 0a1a 	add.w	sl, r4, #26
 800b366:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b36a:	1a9b      	subs	r3, r3, r2
 800b36c:	eba3 0309 	sub.w	r3, r3, r9
 800b370:	4543      	cmp	r3, r8
 800b372:	f77f af79 	ble.w	800b268 <_printf_float+0x250>
 800b376:	2301      	movs	r3, #1
 800b378:	4652      	mov	r2, sl
 800b37a:	4631      	mov	r1, r6
 800b37c:	4628      	mov	r0, r5
 800b37e:	47b8      	blx	r7
 800b380:	3001      	adds	r0, #1
 800b382:	f43f aeaa 	beq.w	800b0da <_printf_float+0xc2>
 800b386:	f108 0801 	add.w	r8, r8, #1
 800b38a:	e7ec      	b.n	800b366 <_printf_float+0x34e>
 800b38c:	4613      	mov	r3, r2
 800b38e:	4631      	mov	r1, r6
 800b390:	4642      	mov	r2, r8
 800b392:	4628      	mov	r0, r5
 800b394:	47b8      	blx	r7
 800b396:	3001      	adds	r0, #1
 800b398:	d1c0      	bne.n	800b31c <_printf_float+0x304>
 800b39a:	e69e      	b.n	800b0da <_printf_float+0xc2>
 800b39c:	2301      	movs	r3, #1
 800b39e:	4631      	mov	r1, r6
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	9205      	str	r2, [sp, #20]
 800b3a4:	47b8      	blx	r7
 800b3a6:	3001      	adds	r0, #1
 800b3a8:	f43f ae97 	beq.w	800b0da <_printf_float+0xc2>
 800b3ac:	9a05      	ldr	r2, [sp, #20]
 800b3ae:	f10b 0b01 	add.w	fp, fp, #1
 800b3b2:	e7b9      	b.n	800b328 <_printf_float+0x310>
 800b3b4:	ee18 3a10 	vmov	r3, s16
 800b3b8:	4652      	mov	r2, sl
 800b3ba:	4631      	mov	r1, r6
 800b3bc:	4628      	mov	r0, r5
 800b3be:	47b8      	blx	r7
 800b3c0:	3001      	adds	r0, #1
 800b3c2:	d1be      	bne.n	800b342 <_printf_float+0x32a>
 800b3c4:	e689      	b.n	800b0da <_printf_float+0xc2>
 800b3c6:	9a05      	ldr	r2, [sp, #20]
 800b3c8:	464b      	mov	r3, r9
 800b3ca:	4442      	add	r2, r8
 800b3cc:	4631      	mov	r1, r6
 800b3ce:	4628      	mov	r0, r5
 800b3d0:	47b8      	blx	r7
 800b3d2:	3001      	adds	r0, #1
 800b3d4:	d1c1      	bne.n	800b35a <_printf_float+0x342>
 800b3d6:	e680      	b.n	800b0da <_printf_float+0xc2>
 800b3d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b3da:	2a01      	cmp	r2, #1
 800b3dc:	dc01      	bgt.n	800b3e2 <_printf_float+0x3ca>
 800b3de:	07db      	lsls	r3, r3, #31
 800b3e0:	d538      	bpl.n	800b454 <_printf_float+0x43c>
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	4642      	mov	r2, r8
 800b3e6:	4631      	mov	r1, r6
 800b3e8:	4628      	mov	r0, r5
 800b3ea:	47b8      	blx	r7
 800b3ec:	3001      	adds	r0, #1
 800b3ee:	f43f ae74 	beq.w	800b0da <_printf_float+0xc2>
 800b3f2:	ee18 3a10 	vmov	r3, s16
 800b3f6:	4652      	mov	r2, sl
 800b3f8:	4631      	mov	r1, r6
 800b3fa:	4628      	mov	r0, r5
 800b3fc:	47b8      	blx	r7
 800b3fe:	3001      	adds	r0, #1
 800b400:	f43f ae6b 	beq.w	800b0da <_printf_float+0xc2>
 800b404:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b408:	2200      	movs	r2, #0
 800b40a:	2300      	movs	r3, #0
 800b40c:	f7f5 fb64 	bl	8000ad8 <__aeabi_dcmpeq>
 800b410:	b9d8      	cbnz	r0, 800b44a <_printf_float+0x432>
 800b412:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b414:	f108 0201 	add.w	r2, r8, #1
 800b418:	3b01      	subs	r3, #1
 800b41a:	4631      	mov	r1, r6
 800b41c:	4628      	mov	r0, r5
 800b41e:	47b8      	blx	r7
 800b420:	3001      	adds	r0, #1
 800b422:	d10e      	bne.n	800b442 <_printf_float+0x42a>
 800b424:	e659      	b.n	800b0da <_printf_float+0xc2>
 800b426:	2301      	movs	r3, #1
 800b428:	4652      	mov	r2, sl
 800b42a:	4631      	mov	r1, r6
 800b42c:	4628      	mov	r0, r5
 800b42e:	47b8      	blx	r7
 800b430:	3001      	adds	r0, #1
 800b432:	f43f ae52 	beq.w	800b0da <_printf_float+0xc2>
 800b436:	f108 0801 	add.w	r8, r8, #1
 800b43a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b43c:	3b01      	subs	r3, #1
 800b43e:	4543      	cmp	r3, r8
 800b440:	dcf1      	bgt.n	800b426 <_printf_float+0x40e>
 800b442:	464b      	mov	r3, r9
 800b444:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b448:	e6dc      	b.n	800b204 <_printf_float+0x1ec>
 800b44a:	f04f 0800 	mov.w	r8, #0
 800b44e:	f104 0a1a 	add.w	sl, r4, #26
 800b452:	e7f2      	b.n	800b43a <_printf_float+0x422>
 800b454:	2301      	movs	r3, #1
 800b456:	4642      	mov	r2, r8
 800b458:	e7df      	b.n	800b41a <_printf_float+0x402>
 800b45a:	2301      	movs	r3, #1
 800b45c:	464a      	mov	r2, r9
 800b45e:	4631      	mov	r1, r6
 800b460:	4628      	mov	r0, r5
 800b462:	47b8      	blx	r7
 800b464:	3001      	adds	r0, #1
 800b466:	f43f ae38 	beq.w	800b0da <_printf_float+0xc2>
 800b46a:	f108 0801 	add.w	r8, r8, #1
 800b46e:	68e3      	ldr	r3, [r4, #12]
 800b470:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b472:	1a5b      	subs	r3, r3, r1
 800b474:	4543      	cmp	r3, r8
 800b476:	dcf0      	bgt.n	800b45a <_printf_float+0x442>
 800b478:	e6fa      	b.n	800b270 <_printf_float+0x258>
 800b47a:	f04f 0800 	mov.w	r8, #0
 800b47e:	f104 0919 	add.w	r9, r4, #25
 800b482:	e7f4      	b.n	800b46e <_printf_float+0x456>

0800b484 <_printf_common>:
 800b484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b488:	4616      	mov	r6, r2
 800b48a:	4699      	mov	r9, r3
 800b48c:	688a      	ldr	r2, [r1, #8]
 800b48e:	690b      	ldr	r3, [r1, #16]
 800b490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b494:	4293      	cmp	r3, r2
 800b496:	bfb8      	it	lt
 800b498:	4613      	movlt	r3, r2
 800b49a:	6033      	str	r3, [r6, #0]
 800b49c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b4a0:	4607      	mov	r7, r0
 800b4a2:	460c      	mov	r4, r1
 800b4a4:	b10a      	cbz	r2, 800b4aa <_printf_common+0x26>
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	6033      	str	r3, [r6, #0]
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	0699      	lsls	r1, r3, #26
 800b4ae:	bf42      	ittt	mi
 800b4b0:	6833      	ldrmi	r3, [r6, #0]
 800b4b2:	3302      	addmi	r3, #2
 800b4b4:	6033      	strmi	r3, [r6, #0]
 800b4b6:	6825      	ldr	r5, [r4, #0]
 800b4b8:	f015 0506 	ands.w	r5, r5, #6
 800b4bc:	d106      	bne.n	800b4cc <_printf_common+0x48>
 800b4be:	f104 0a19 	add.w	sl, r4, #25
 800b4c2:	68e3      	ldr	r3, [r4, #12]
 800b4c4:	6832      	ldr	r2, [r6, #0]
 800b4c6:	1a9b      	subs	r3, r3, r2
 800b4c8:	42ab      	cmp	r3, r5
 800b4ca:	dc26      	bgt.n	800b51a <_printf_common+0x96>
 800b4cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b4d0:	1e13      	subs	r3, r2, #0
 800b4d2:	6822      	ldr	r2, [r4, #0]
 800b4d4:	bf18      	it	ne
 800b4d6:	2301      	movne	r3, #1
 800b4d8:	0692      	lsls	r2, r2, #26
 800b4da:	d42b      	bmi.n	800b534 <_printf_common+0xb0>
 800b4dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b4e0:	4649      	mov	r1, r9
 800b4e2:	4638      	mov	r0, r7
 800b4e4:	47c0      	blx	r8
 800b4e6:	3001      	adds	r0, #1
 800b4e8:	d01e      	beq.n	800b528 <_printf_common+0xa4>
 800b4ea:	6823      	ldr	r3, [r4, #0]
 800b4ec:	68e5      	ldr	r5, [r4, #12]
 800b4ee:	6832      	ldr	r2, [r6, #0]
 800b4f0:	f003 0306 	and.w	r3, r3, #6
 800b4f4:	2b04      	cmp	r3, #4
 800b4f6:	bf08      	it	eq
 800b4f8:	1aad      	subeq	r5, r5, r2
 800b4fa:	68a3      	ldr	r3, [r4, #8]
 800b4fc:	6922      	ldr	r2, [r4, #16]
 800b4fe:	bf0c      	ite	eq
 800b500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b504:	2500      	movne	r5, #0
 800b506:	4293      	cmp	r3, r2
 800b508:	bfc4      	itt	gt
 800b50a:	1a9b      	subgt	r3, r3, r2
 800b50c:	18ed      	addgt	r5, r5, r3
 800b50e:	2600      	movs	r6, #0
 800b510:	341a      	adds	r4, #26
 800b512:	42b5      	cmp	r5, r6
 800b514:	d11a      	bne.n	800b54c <_printf_common+0xc8>
 800b516:	2000      	movs	r0, #0
 800b518:	e008      	b.n	800b52c <_printf_common+0xa8>
 800b51a:	2301      	movs	r3, #1
 800b51c:	4652      	mov	r2, sl
 800b51e:	4649      	mov	r1, r9
 800b520:	4638      	mov	r0, r7
 800b522:	47c0      	blx	r8
 800b524:	3001      	adds	r0, #1
 800b526:	d103      	bne.n	800b530 <_printf_common+0xac>
 800b528:	f04f 30ff 	mov.w	r0, #4294967295
 800b52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b530:	3501      	adds	r5, #1
 800b532:	e7c6      	b.n	800b4c2 <_printf_common+0x3e>
 800b534:	18e1      	adds	r1, r4, r3
 800b536:	1c5a      	adds	r2, r3, #1
 800b538:	2030      	movs	r0, #48	; 0x30
 800b53a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b53e:	4422      	add	r2, r4
 800b540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b548:	3302      	adds	r3, #2
 800b54a:	e7c7      	b.n	800b4dc <_printf_common+0x58>
 800b54c:	2301      	movs	r3, #1
 800b54e:	4622      	mov	r2, r4
 800b550:	4649      	mov	r1, r9
 800b552:	4638      	mov	r0, r7
 800b554:	47c0      	blx	r8
 800b556:	3001      	adds	r0, #1
 800b558:	d0e6      	beq.n	800b528 <_printf_common+0xa4>
 800b55a:	3601      	adds	r6, #1
 800b55c:	e7d9      	b.n	800b512 <_printf_common+0x8e>
	...

0800b560 <_printf_i>:
 800b560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b564:	7e0f      	ldrb	r7, [r1, #24]
 800b566:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b568:	2f78      	cmp	r7, #120	; 0x78
 800b56a:	4691      	mov	r9, r2
 800b56c:	4680      	mov	r8, r0
 800b56e:	460c      	mov	r4, r1
 800b570:	469a      	mov	sl, r3
 800b572:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b576:	d807      	bhi.n	800b588 <_printf_i+0x28>
 800b578:	2f62      	cmp	r7, #98	; 0x62
 800b57a:	d80a      	bhi.n	800b592 <_printf_i+0x32>
 800b57c:	2f00      	cmp	r7, #0
 800b57e:	f000 80d8 	beq.w	800b732 <_printf_i+0x1d2>
 800b582:	2f58      	cmp	r7, #88	; 0x58
 800b584:	f000 80a3 	beq.w	800b6ce <_printf_i+0x16e>
 800b588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b58c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b590:	e03a      	b.n	800b608 <_printf_i+0xa8>
 800b592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b596:	2b15      	cmp	r3, #21
 800b598:	d8f6      	bhi.n	800b588 <_printf_i+0x28>
 800b59a:	a101      	add	r1, pc, #4	; (adr r1, 800b5a0 <_printf_i+0x40>)
 800b59c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b5a0:	0800b5f9 	.word	0x0800b5f9
 800b5a4:	0800b60d 	.word	0x0800b60d
 800b5a8:	0800b589 	.word	0x0800b589
 800b5ac:	0800b589 	.word	0x0800b589
 800b5b0:	0800b589 	.word	0x0800b589
 800b5b4:	0800b589 	.word	0x0800b589
 800b5b8:	0800b60d 	.word	0x0800b60d
 800b5bc:	0800b589 	.word	0x0800b589
 800b5c0:	0800b589 	.word	0x0800b589
 800b5c4:	0800b589 	.word	0x0800b589
 800b5c8:	0800b589 	.word	0x0800b589
 800b5cc:	0800b719 	.word	0x0800b719
 800b5d0:	0800b63d 	.word	0x0800b63d
 800b5d4:	0800b6fb 	.word	0x0800b6fb
 800b5d8:	0800b589 	.word	0x0800b589
 800b5dc:	0800b589 	.word	0x0800b589
 800b5e0:	0800b73b 	.word	0x0800b73b
 800b5e4:	0800b589 	.word	0x0800b589
 800b5e8:	0800b63d 	.word	0x0800b63d
 800b5ec:	0800b589 	.word	0x0800b589
 800b5f0:	0800b589 	.word	0x0800b589
 800b5f4:	0800b703 	.word	0x0800b703
 800b5f8:	682b      	ldr	r3, [r5, #0]
 800b5fa:	1d1a      	adds	r2, r3, #4
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	602a      	str	r2, [r5, #0]
 800b600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b608:	2301      	movs	r3, #1
 800b60a:	e0a3      	b.n	800b754 <_printf_i+0x1f4>
 800b60c:	6820      	ldr	r0, [r4, #0]
 800b60e:	6829      	ldr	r1, [r5, #0]
 800b610:	0606      	lsls	r6, r0, #24
 800b612:	f101 0304 	add.w	r3, r1, #4
 800b616:	d50a      	bpl.n	800b62e <_printf_i+0xce>
 800b618:	680e      	ldr	r6, [r1, #0]
 800b61a:	602b      	str	r3, [r5, #0]
 800b61c:	2e00      	cmp	r6, #0
 800b61e:	da03      	bge.n	800b628 <_printf_i+0xc8>
 800b620:	232d      	movs	r3, #45	; 0x2d
 800b622:	4276      	negs	r6, r6
 800b624:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b628:	485e      	ldr	r0, [pc, #376]	; (800b7a4 <_printf_i+0x244>)
 800b62a:	230a      	movs	r3, #10
 800b62c:	e019      	b.n	800b662 <_printf_i+0x102>
 800b62e:	680e      	ldr	r6, [r1, #0]
 800b630:	602b      	str	r3, [r5, #0]
 800b632:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b636:	bf18      	it	ne
 800b638:	b236      	sxthne	r6, r6
 800b63a:	e7ef      	b.n	800b61c <_printf_i+0xbc>
 800b63c:	682b      	ldr	r3, [r5, #0]
 800b63e:	6820      	ldr	r0, [r4, #0]
 800b640:	1d19      	adds	r1, r3, #4
 800b642:	6029      	str	r1, [r5, #0]
 800b644:	0601      	lsls	r1, r0, #24
 800b646:	d501      	bpl.n	800b64c <_printf_i+0xec>
 800b648:	681e      	ldr	r6, [r3, #0]
 800b64a:	e002      	b.n	800b652 <_printf_i+0xf2>
 800b64c:	0646      	lsls	r6, r0, #25
 800b64e:	d5fb      	bpl.n	800b648 <_printf_i+0xe8>
 800b650:	881e      	ldrh	r6, [r3, #0]
 800b652:	4854      	ldr	r0, [pc, #336]	; (800b7a4 <_printf_i+0x244>)
 800b654:	2f6f      	cmp	r7, #111	; 0x6f
 800b656:	bf0c      	ite	eq
 800b658:	2308      	moveq	r3, #8
 800b65a:	230a      	movne	r3, #10
 800b65c:	2100      	movs	r1, #0
 800b65e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b662:	6865      	ldr	r5, [r4, #4]
 800b664:	60a5      	str	r5, [r4, #8]
 800b666:	2d00      	cmp	r5, #0
 800b668:	bfa2      	ittt	ge
 800b66a:	6821      	ldrge	r1, [r4, #0]
 800b66c:	f021 0104 	bicge.w	r1, r1, #4
 800b670:	6021      	strge	r1, [r4, #0]
 800b672:	b90e      	cbnz	r6, 800b678 <_printf_i+0x118>
 800b674:	2d00      	cmp	r5, #0
 800b676:	d04d      	beq.n	800b714 <_printf_i+0x1b4>
 800b678:	4615      	mov	r5, r2
 800b67a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b67e:	fb03 6711 	mls	r7, r3, r1, r6
 800b682:	5dc7      	ldrb	r7, [r0, r7]
 800b684:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b688:	4637      	mov	r7, r6
 800b68a:	42bb      	cmp	r3, r7
 800b68c:	460e      	mov	r6, r1
 800b68e:	d9f4      	bls.n	800b67a <_printf_i+0x11a>
 800b690:	2b08      	cmp	r3, #8
 800b692:	d10b      	bne.n	800b6ac <_printf_i+0x14c>
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	07de      	lsls	r6, r3, #31
 800b698:	d508      	bpl.n	800b6ac <_printf_i+0x14c>
 800b69a:	6923      	ldr	r3, [r4, #16]
 800b69c:	6861      	ldr	r1, [r4, #4]
 800b69e:	4299      	cmp	r1, r3
 800b6a0:	bfde      	ittt	le
 800b6a2:	2330      	movle	r3, #48	; 0x30
 800b6a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b6a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b6ac:	1b52      	subs	r2, r2, r5
 800b6ae:	6122      	str	r2, [r4, #16]
 800b6b0:	f8cd a000 	str.w	sl, [sp]
 800b6b4:	464b      	mov	r3, r9
 800b6b6:	aa03      	add	r2, sp, #12
 800b6b8:	4621      	mov	r1, r4
 800b6ba:	4640      	mov	r0, r8
 800b6bc:	f7ff fee2 	bl	800b484 <_printf_common>
 800b6c0:	3001      	adds	r0, #1
 800b6c2:	d14c      	bne.n	800b75e <_printf_i+0x1fe>
 800b6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800b6c8:	b004      	add	sp, #16
 800b6ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6ce:	4835      	ldr	r0, [pc, #212]	; (800b7a4 <_printf_i+0x244>)
 800b6d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b6d4:	6829      	ldr	r1, [r5, #0]
 800b6d6:	6823      	ldr	r3, [r4, #0]
 800b6d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800b6dc:	6029      	str	r1, [r5, #0]
 800b6de:	061d      	lsls	r5, r3, #24
 800b6e0:	d514      	bpl.n	800b70c <_printf_i+0x1ac>
 800b6e2:	07df      	lsls	r7, r3, #31
 800b6e4:	bf44      	itt	mi
 800b6e6:	f043 0320 	orrmi.w	r3, r3, #32
 800b6ea:	6023      	strmi	r3, [r4, #0]
 800b6ec:	b91e      	cbnz	r6, 800b6f6 <_printf_i+0x196>
 800b6ee:	6823      	ldr	r3, [r4, #0]
 800b6f0:	f023 0320 	bic.w	r3, r3, #32
 800b6f4:	6023      	str	r3, [r4, #0]
 800b6f6:	2310      	movs	r3, #16
 800b6f8:	e7b0      	b.n	800b65c <_printf_i+0xfc>
 800b6fa:	6823      	ldr	r3, [r4, #0]
 800b6fc:	f043 0320 	orr.w	r3, r3, #32
 800b700:	6023      	str	r3, [r4, #0]
 800b702:	2378      	movs	r3, #120	; 0x78
 800b704:	4828      	ldr	r0, [pc, #160]	; (800b7a8 <_printf_i+0x248>)
 800b706:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b70a:	e7e3      	b.n	800b6d4 <_printf_i+0x174>
 800b70c:	0659      	lsls	r1, r3, #25
 800b70e:	bf48      	it	mi
 800b710:	b2b6      	uxthmi	r6, r6
 800b712:	e7e6      	b.n	800b6e2 <_printf_i+0x182>
 800b714:	4615      	mov	r5, r2
 800b716:	e7bb      	b.n	800b690 <_printf_i+0x130>
 800b718:	682b      	ldr	r3, [r5, #0]
 800b71a:	6826      	ldr	r6, [r4, #0]
 800b71c:	6961      	ldr	r1, [r4, #20]
 800b71e:	1d18      	adds	r0, r3, #4
 800b720:	6028      	str	r0, [r5, #0]
 800b722:	0635      	lsls	r5, r6, #24
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	d501      	bpl.n	800b72c <_printf_i+0x1cc>
 800b728:	6019      	str	r1, [r3, #0]
 800b72a:	e002      	b.n	800b732 <_printf_i+0x1d2>
 800b72c:	0670      	lsls	r0, r6, #25
 800b72e:	d5fb      	bpl.n	800b728 <_printf_i+0x1c8>
 800b730:	8019      	strh	r1, [r3, #0]
 800b732:	2300      	movs	r3, #0
 800b734:	6123      	str	r3, [r4, #16]
 800b736:	4615      	mov	r5, r2
 800b738:	e7ba      	b.n	800b6b0 <_printf_i+0x150>
 800b73a:	682b      	ldr	r3, [r5, #0]
 800b73c:	1d1a      	adds	r2, r3, #4
 800b73e:	602a      	str	r2, [r5, #0]
 800b740:	681d      	ldr	r5, [r3, #0]
 800b742:	6862      	ldr	r2, [r4, #4]
 800b744:	2100      	movs	r1, #0
 800b746:	4628      	mov	r0, r5
 800b748:	f7f4 fd52 	bl	80001f0 <memchr>
 800b74c:	b108      	cbz	r0, 800b752 <_printf_i+0x1f2>
 800b74e:	1b40      	subs	r0, r0, r5
 800b750:	6060      	str	r0, [r4, #4]
 800b752:	6863      	ldr	r3, [r4, #4]
 800b754:	6123      	str	r3, [r4, #16]
 800b756:	2300      	movs	r3, #0
 800b758:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b75c:	e7a8      	b.n	800b6b0 <_printf_i+0x150>
 800b75e:	6923      	ldr	r3, [r4, #16]
 800b760:	462a      	mov	r2, r5
 800b762:	4649      	mov	r1, r9
 800b764:	4640      	mov	r0, r8
 800b766:	47d0      	blx	sl
 800b768:	3001      	adds	r0, #1
 800b76a:	d0ab      	beq.n	800b6c4 <_printf_i+0x164>
 800b76c:	6823      	ldr	r3, [r4, #0]
 800b76e:	079b      	lsls	r3, r3, #30
 800b770:	d413      	bmi.n	800b79a <_printf_i+0x23a>
 800b772:	68e0      	ldr	r0, [r4, #12]
 800b774:	9b03      	ldr	r3, [sp, #12]
 800b776:	4298      	cmp	r0, r3
 800b778:	bfb8      	it	lt
 800b77a:	4618      	movlt	r0, r3
 800b77c:	e7a4      	b.n	800b6c8 <_printf_i+0x168>
 800b77e:	2301      	movs	r3, #1
 800b780:	4632      	mov	r2, r6
 800b782:	4649      	mov	r1, r9
 800b784:	4640      	mov	r0, r8
 800b786:	47d0      	blx	sl
 800b788:	3001      	adds	r0, #1
 800b78a:	d09b      	beq.n	800b6c4 <_printf_i+0x164>
 800b78c:	3501      	adds	r5, #1
 800b78e:	68e3      	ldr	r3, [r4, #12]
 800b790:	9903      	ldr	r1, [sp, #12]
 800b792:	1a5b      	subs	r3, r3, r1
 800b794:	42ab      	cmp	r3, r5
 800b796:	dcf2      	bgt.n	800b77e <_printf_i+0x21e>
 800b798:	e7eb      	b.n	800b772 <_printf_i+0x212>
 800b79a:	2500      	movs	r5, #0
 800b79c:	f104 0619 	add.w	r6, r4, #25
 800b7a0:	e7f5      	b.n	800b78e <_printf_i+0x22e>
 800b7a2:	bf00      	nop
 800b7a4:	0800f5b6 	.word	0x0800f5b6
 800b7a8:	0800f5c7 	.word	0x0800f5c7

0800b7ac <siprintf>:
 800b7ac:	b40e      	push	{r1, r2, r3}
 800b7ae:	b500      	push	{lr}
 800b7b0:	b09c      	sub	sp, #112	; 0x70
 800b7b2:	ab1d      	add	r3, sp, #116	; 0x74
 800b7b4:	9002      	str	r0, [sp, #8]
 800b7b6:	9006      	str	r0, [sp, #24]
 800b7b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b7bc:	4809      	ldr	r0, [pc, #36]	; (800b7e4 <siprintf+0x38>)
 800b7be:	9107      	str	r1, [sp, #28]
 800b7c0:	9104      	str	r1, [sp, #16]
 800b7c2:	4909      	ldr	r1, [pc, #36]	; (800b7e8 <siprintf+0x3c>)
 800b7c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7c8:	9105      	str	r1, [sp, #20]
 800b7ca:	6800      	ldr	r0, [r0, #0]
 800b7cc:	9301      	str	r3, [sp, #4]
 800b7ce:	a902      	add	r1, sp, #8
 800b7d0:	f002 fee4 	bl	800e59c <_svfiprintf_r>
 800b7d4:	9b02      	ldr	r3, [sp, #8]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	701a      	strb	r2, [r3, #0]
 800b7da:	b01c      	add	sp, #112	; 0x70
 800b7dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800b7e0:	b003      	add	sp, #12
 800b7e2:	4770      	bx	lr
 800b7e4:	20000124 	.word	0x20000124
 800b7e8:	ffff0208 	.word	0xffff0208

0800b7ec <sulp>:
 800b7ec:	b570      	push	{r4, r5, r6, lr}
 800b7ee:	4604      	mov	r4, r0
 800b7f0:	460d      	mov	r5, r1
 800b7f2:	ec45 4b10 	vmov	d0, r4, r5
 800b7f6:	4616      	mov	r6, r2
 800b7f8:	f002 fc2e 	bl	800e058 <__ulp>
 800b7fc:	ec51 0b10 	vmov	r0, r1, d0
 800b800:	b17e      	cbz	r6, 800b822 <sulp+0x36>
 800b802:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b806:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	dd09      	ble.n	800b822 <sulp+0x36>
 800b80e:	051b      	lsls	r3, r3, #20
 800b810:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b814:	2400      	movs	r4, #0
 800b816:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b81a:	4622      	mov	r2, r4
 800b81c:	462b      	mov	r3, r5
 800b81e:	f7f4 fef3 	bl	8000608 <__aeabi_dmul>
 800b822:	bd70      	pop	{r4, r5, r6, pc}
 800b824:	0000      	movs	r0, r0
	...

0800b828 <_strtod_l>:
 800b828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b82c:	ed2d 8b02 	vpush	{d8}
 800b830:	b09d      	sub	sp, #116	; 0x74
 800b832:	461f      	mov	r7, r3
 800b834:	2300      	movs	r3, #0
 800b836:	9318      	str	r3, [sp, #96]	; 0x60
 800b838:	4ba2      	ldr	r3, [pc, #648]	; (800bac4 <_strtod_l+0x29c>)
 800b83a:	9213      	str	r2, [sp, #76]	; 0x4c
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	9305      	str	r3, [sp, #20]
 800b840:	4604      	mov	r4, r0
 800b842:	4618      	mov	r0, r3
 800b844:	4688      	mov	r8, r1
 800b846:	f7f4 fccb 	bl	80001e0 <strlen>
 800b84a:	f04f 0a00 	mov.w	sl, #0
 800b84e:	4605      	mov	r5, r0
 800b850:	f04f 0b00 	mov.w	fp, #0
 800b854:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b858:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b85a:	781a      	ldrb	r2, [r3, #0]
 800b85c:	2a2b      	cmp	r2, #43	; 0x2b
 800b85e:	d04e      	beq.n	800b8fe <_strtod_l+0xd6>
 800b860:	d83b      	bhi.n	800b8da <_strtod_l+0xb2>
 800b862:	2a0d      	cmp	r2, #13
 800b864:	d834      	bhi.n	800b8d0 <_strtod_l+0xa8>
 800b866:	2a08      	cmp	r2, #8
 800b868:	d834      	bhi.n	800b8d4 <_strtod_l+0xac>
 800b86a:	2a00      	cmp	r2, #0
 800b86c:	d03e      	beq.n	800b8ec <_strtod_l+0xc4>
 800b86e:	2300      	movs	r3, #0
 800b870:	930a      	str	r3, [sp, #40]	; 0x28
 800b872:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b874:	7833      	ldrb	r3, [r6, #0]
 800b876:	2b30      	cmp	r3, #48	; 0x30
 800b878:	f040 80b0 	bne.w	800b9dc <_strtod_l+0x1b4>
 800b87c:	7873      	ldrb	r3, [r6, #1]
 800b87e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b882:	2b58      	cmp	r3, #88	; 0x58
 800b884:	d168      	bne.n	800b958 <_strtod_l+0x130>
 800b886:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b888:	9301      	str	r3, [sp, #4]
 800b88a:	ab18      	add	r3, sp, #96	; 0x60
 800b88c:	9702      	str	r7, [sp, #8]
 800b88e:	9300      	str	r3, [sp, #0]
 800b890:	4a8d      	ldr	r2, [pc, #564]	; (800bac8 <_strtod_l+0x2a0>)
 800b892:	ab19      	add	r3, sp, #100	; 0x64
 800b894:	a917      	add	r1, sp, #92	; 0x5c
 800b896:	4620      	mov	r0, r4
 800b898:	f001 fd46 	bl	800d328 <__gethex>
 800b89c:	f010 0707 	ands.w	r7, r0, #7
 800b8a0:	4605      	mov	r5, r0
 800b8a2:	d005      	beq.n	800b8b0 <_strtod_l+0x88>
 800b8a4:	2f06      	cmp	r7, #6
 800b8a6:	d12c      	bne.n	800b902 <_strtod_l+0xda>
 800b8a8:	3601      	adds	r6, #1
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	9617      	str	r6, [sp, #92]	; 0x5c
 800b8ae:	930a      	str	r3, [sp, #40]	; 0x28
 800b8b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	f040 8590 	bne.w	800c3d8 <_strtod_l+0xbb0>
 800b8b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8ba:	b1eb      	cbz	r3, 800b8f8 <_strtod_l+0xd0>
 800b8bc:	4652      	mov	r2, sl
 800b8be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b8c2:	ec43 2b10 	vmov	d0, r2, r3
 800b8c6:	b01d      	add	sp, #116	; 0x74
 800b8c8:	ecbd 8b02 	vpop	{d8}
 800b8cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8d0:	2a20      	cmp	r2, #32
 800b8d2:	d1cc      	bne.n	800b86e <_strtod_l+0x46>
 800b8d4:	3301      	adds	r3, #1
 800b8d6:	9317      	str	r3, [sp, #92]	; 0x5c
 800b8d8:	e7be      	b.n	800b858 <_strtod_l+0x30>
 800b8da:	2a2d      	cmp	r2, #45	; 0x2d
 800b8dc:	d1c7      	bne.n	800b86e <_strtod_l+0x46>
 800b8de:	2201      	movs	r2, #1
 800b8e0:	920a      	str	r2, [sp, #40]	; 0x28
 800b8e2:	1c5a      	adds	r2, r3, #1
 800b8e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800b8e6:	785b      	ldrb	r3, [r3, #1]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d1c2      	bne.n	800b872 <_strtod_l+0x4a>
 800b8ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f040 856e 	bne.w	800c3d4 <_strtod_l+0xbac>
 800b8f8:	4652      	mov	r2, sl
 800b8fa:	465b      	mov	r3, fp
 800b8fc:	e7e1      	b.n	800b8c2 <_strtod_l+0x9a>
 800b8fe:	2200      	movs	r2, #0
 800b900:	e7ee      	b.n	800b8e0 <_strtod_l+0xb8>
 800b902:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b904:	b13a      	cbz	r2, 800b916 <_strtod_l+0xee>
 800b906:	2135      	movs	r1, #53	; 0x35
 800b908:	a81a      	add	r0, sp, #104	; 0x68
 800b90a:	f002 fcb0 	bl	800e26e <__copybits>
 800b90e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b910:	4620      	mov	r0, r4
 800b912:	f002 f86f 	bl	800d9f4 <_Bfree>
 800b916:	3f01      	subs	r7, #1
 800b918:	2f04      	cmp	r7, #4
 800b91a:	d806      	bhi.n	800b92a <_strtod_l+0x102>
 800b91c:	e8df f007 	tbb	[pc, r7]
 800b920:	1714030a 	.word	0x1714030a
 800b924:	0a          	.byte	0x0a
 800b925:	00          	.byte	0x00
 800b926:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800b92a:	0728      	lsls	r0, r5, #28
 800b92c:	d5c0      	bpl.n	800b8b0 <_strtod_l+0x88>
 800b92e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800b932:	e7bd      	b.n	800b8b0 <_strtod_l+0x88>
 800b934:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800b938:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b93a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b93e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b942:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800b946:	e7f0      	b.n	800b92a <_strtod_l+0x102>
 800b948:	f8df b180 	ldr.w	fp, [pc, #384]	; 800bacc <_strtod_l+0x2a4>
 800b94c:	e7ed      	b.n	800b92a <_strtod_l+0x102>
 800b94e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800b952:	f04f 3aff 	mov.w	sl, #4294967295
 800b956:	e7e8      	b.n	800b92a <_strtod_l+0x102>
 800b958:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b95a:	1c5a      	adds	r2, r3, #1
 800b95c:	9217      	str	r2, [sp, #92]	; 0x5c
 800b95e:	785b      	ldrb	r3, [r3, #1]
 800b960:	2b30      	cmp	r3, #48	; 0x30
 800b962:	d0f9      	beq.n	800b958 <_strtod_l+0x130>
 800b964:	2b00      	cmp	r3, #0
 800b966:	d0a3      	beq.n	800b8b0 <_strtod_l+0x88>
 800b968:	2301      	movs	r3, #1
 800b96a:	f04f 0900 	mov.w	r9, #0
 800b96e:	9304      	str	r3, [sp, #16]
 800b970:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b972:	9308      	str	r3, [sp, #32]
 800b974:	f8cd 901c 	str.w	r9, [sp, #28]
 800b978:	464f      	mov	r7, r9
 800b97a:	220a      	movs	r2, #10
 800b97c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800b97e:	7806      	ldrb	r6, [r0, #0]
 800b980:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b984:	b2d9      	uxtb	r1, r3
 800b986:	2909      	cmp	r1, #9
 800b988:	d92a      	bls.n	800b9e0 <_strtod_l+0x1b8>
 800b98a:	9905      	ldr	r1, [sp, #20]
 800b98c:	462a      	mov	r2, r5
 800b98e:	f003 f877 	bl	800ea80 <strncmp>
 800b992:	b398      	cbz	r0, 800b9fc <_strtod_l+0x1d4>
 800b994:	2000      	movs	r0, #0
 800b996:	4632      	mov	r2, r6
 800b998:	463d      	mov	r5, r7
 800b99a:	9005      	str	r0, [sp, #20]
 800b99c:	4603      	mov	r3, r0
 800b99e:	2a65      	cmp	r2, #101	; 0x65
 800b9a0:	d001      	beq.n	800b9a6 <_strtod_l+0x17e>
 800b9a2:	2a45      	cmp	r2, #69	; 0x45
 800b9a4:	d118      	bne.n	800b9d8 <_strtod_l+0x1b0>
 800b9a6:	b91d      	cbnz	r5, 800b9b0 <_strtod_l+0x188>
 800b9a8:	9a04      	ldr	r2, [sp, #16]
 800b9aa:	4302      	orrs	r2, r0
 800b9ac:	d09e      	beq.n	800b8ec <_strtod_l+0xc4>
 800b9ae:	2500      	movs	r5, #0
 800b9b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800b9b4:	f108 0201 	add.w	r2, r8, #1
 800b9b8:	9217      	str	r2, [sp, #92]	; 0x5c
 800b9ba:	f898 2001 	ldrb.w	r2, [r8, #1]
 800b9be:	2a2b      	cmp	r2, #43	; 0x2b
 800b9c0:	d075      	beq.n	800baae <_strtod_l+0x286>
 800b9c2:	2a2d      	cmp	r2, #45	; 0x2d
 800b9c4:	d07b      	beq.n	800babe <_strtod_l+0x296>
 800b9c6:	f04f 0c00 	mov.w	ip, #0
 800b9ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b9ce:	2909      	cmp	r1, #9
 800b9d0:	f240 8082 	bls.w	800bad8 <_strtod_l+0x2b0>
 800b9d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800b9d8:	2600      	movs	r6, #0
 800b9da:	e09d      	b.n	800bb18 <_strtod_l+0x2f0>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	e7c4      	b.n	800b96a <_strtod_l+0x142>
 800b9e0:	2f08      	cmp	r7, #8
 800b9e2:	bfd8      	it	le
 800b9e4:	9907      	ldrle	r1, [sp, #28]
 800b9e6:	f100 0001 	add.w	r0, r0, #1
 800b9ea:	bfda      	itte	le
 800b9ec:	fb02 3301 	mlale	r3, r2, r1, r3
 800b9f0:	9307      	strle	r3, [sp, #28]
 800b9f2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800b9f6:	3701      	adds	r7, #1
 800b9f8:	9017      	str	r0, [sp, #92]	; 0x5c
 800b9fa:	e7bf      	b.n	800b97c <_strtod_l+0x154>
 800b9fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b9fe:	195a      	adds	r2, r3, r5
 800ba00:	9217      	str	r2, [sp, #92]	; 0x5c
 800ba02:	5d5a      	ldrb	r2, [r3, r5]
 800ba04:	2f00      	cmp	r7, #0
 800ba06:	d037      	beq.n	800ba78 <_strtod_l+0x250>
 800ba08:	9005      	str	r0, [sp, #20]
 800ba0a:	463d      	mov	r5, r7
 800ba0c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ba10:	2b09      	cmp	r3, #9
 800ba12:	d912      	bls.n	800ba3a <_strtod_l+0x212>
 800ba14:	2301      	movs	r3, #1
 800ba16:	e7c2      	b.n	800b99e <_strtod_l+0x176>
 800ba18:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba1a:	1c5a      	adds	r2, r3, #1
 800ba1c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ba1e:	785a      	ldrb	r2, [r3, #1]
 800ba20:	3001      	adds	r0, #1
 800ba22:	2a30      	cmp	r2, #48	; 0x30
 800ba24:	d0f8      	beq.n	800ba18 <_strtod_l+0x1f0>
 800ba26:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ba2a:	2b08      	cmp	r3, #8
 800ba2c:	f200 84d9 	bhi.w	800c3e2 <_strtod_l+0xbba>
 800ba30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba32:	9005      	str	r0, [sp, #20]
 800ba34:	2000      	movs	r0, #0
 800ba36:	9308      	str	r3, [sp, #32]
 800ba38:	4605      	mov	r5, r0
 800ba3a:	3a30      	subs	r2, #48	; 0x30
 800ba3c:	f100 0301 	add.w	r3, r0, #1
 800ba40:	d014      	beq.n	800ba6c <_strtod_l+0x244>
 800ba42:	9905      	ldr	r1, [sp, #20]
 800ba44:	4419      	add	r1, r3
 800ba46:	9105      	str	r1, [sp, #20]
 800ba48:	462b      	mov	r3, r5
 800ba4a:	eb00 0e05 	add.w	lr, r0, r5
 800ba4e:	210a      	movs	r1, #10
 800ba50:	4573      	cmp	r3, lr
 800ba52:	d113      	bne.n	800ba7c <_strtod_l+0x254>
 800ba54:	182b      	adds	r3, r5, r0
 800ba56:	2b08      	cmp	r3, #8
 800ba58:	f105 0501 	add.w	r5, r5, #1
 800ba5c:	4405      	add	r5, r0
 800ba5e:	dc1c      	bgt.n	800ba9a <_strtod_l+0x272>
 800ba60:	9907      	ldr	r1, [sp, #28]
 800ba62:	230a      	movs	r3, #10
 800ba64:	fb03 2301 	mla	r3, r3, r1, r2
 800ba68:	9307      	str	r3, [sp, #28]
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ba6e:	1c51      	adds	r1, r2, #1
 800ba70:	9117      	str	r1, [sp, #92]	; 0x5c
 800ba72:	7852      	ldrb	r2, [r2, #1]
 800ba74:	4618      	mov	r0, r3
 800ba76:	e7c9      	b.n	800ba0c <_strtod_l+0x1e4>
 800ba78:	4638      	mov	r0, r7
 800ba7a:	e7d2      	b.n	800ba22 <_strtod_l+0x1fa>
 800ba7c:	2b08      	cmp	r3, #8
 800ba7e:	dc04      	bgt.n	800ba8a <_strtod_l+0x262>
 800ba80:	9e07      	ldr	r6, [sp, #28]
 800ba82:	434e      	muls	r6, r1
 800ba84:	9607      	str	r6, [sp, #28]
 800ba86:	3301      	adds	r3, #1
 800ba88:	e7e2      	b.n	800ba50 <_strtod_l+0x228>
 800ba8a:	f103 0c01 	add.w	ip, r3, #1
 800ba8e:	f1bc 0f10 	cmp.w	ip, #16
 800ba92:	bfd8      	it	le
 800ba94:	fb01 f909 	mulle.w	r9, r1, r9
 800ba98:	e7f5      	b.n	800ba86 <_strtod_l+0x25e>
 800ba9a:	2d10      	cmp	r5, #16
 800ba9c:	bfdc      	itt	le
 800ba9e:	230a      	movle	r3, #10
 800baa0:	fb03 2909 	mlale	r9, r3, r9, r2
 800baa4:	e7e1      	b.n	800ba6a <_strtod_l+0x242>
 800baa6:	2300      	movs	r3, #0
 800baa8:	9305      	str	r3, [sp, #20]
 800baaa:	2301      	movs	r3, #1
 800baac:	e77c      	b.n	800b9a8 <_strtod_l+0x180>
 800baae:	f04f 0c00 	mov.w	ip, #0
 800bab2:	f108 0202 	add.w	r2, r8, #2
 800bab6:	9217      	str	r2, [sp, #92]	; 0x5c
 800bab8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800babc:	e785      	b.n	800b9ca <_strtod_l+0x1a2>
 800babe:	f04f 0c01 	mov.w	ip, #1
 800bac2:	e7f6      	b.n	800bab2 <_strtod_l+0x28a>
 800bac4:	0800f7b8 	.word	0x0800f7b8
 800bac8:	0800f5d8 	.word	0x0800f5d8
 800bacc:	7ff00000 	.word	0x7ff00000
 800bad0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bad2:	1c51      	adds	r1, r2, #1
 800bad4:	9117      	str	r1, [sp, #92]	; 0x5c
 800bad6:	7852      	ldrb	r2, [r2, #1]
 800bad8:	2a30      	cmp	r2, #48	; 0x30
 800bada:	d0f9      	beq.n	800bad0 <_strtod_l+0x2a8>
 800badc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bae0:	2908      	cmp	r1, #8
 800bae2:	f63f af79 	bhi.w	800b9d8 <_strtod_l+0x1b0>
 800bae6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800baea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800baec:	9206      	str	r2, [sp, #24]
 800baee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800baf0:	1c51      	adds	r1, r2, #1
 800baf2:	9117      	str	r1, [sp, #92]	; 0x5c
 800baf4:	7852      	ldrb	r2, [r2, #1]
 800baf6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800bafa:	2e09      	cmp	r6, #9
 800bafc:	d937      	bls.n	800bb6e <_strtod_l+0x346>
 800bafe:	9e06      	ldr	r6, [sp, #24]
 800bb00:	1b89      	subs	r1, r1, r6
 800bb02:	2908      	cmp	r1, #8
 800bb04:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800bb08:	dc02      	bgt.n	800bb10 <_strtod_l+0x2e8>
 800bb0a:	4576      	cmp	r6, lr
 800bb0c:	bfa8      	it	ge
 800bb0e:	4676      	movge	r6, lr
 800bb10:	f1bc 0f00 	cmp.w	ip, #0
 800bb14:	d000      	beq.n	800bb18 <_strtod_l+0x2f0>
 800bb16:	4276      	negs	r6, r6
 800bb18:	2d00      	cmp	r5, #0
 800bb1a:	d14d      	bne.n	800bbb8 <_strtod_l+0x390>
 800bb1c:	9904      	ldr	r1, [sp, #16]
 800bb1e:	4301      	orrs	r1, r0
 800bb20:	f47f aec6 	bne.w	800b8b0 <_strtod_l+0x88>
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	f47f aee1 	bne.w	800b8ec <_strtod_l+0xc4>
 800bb2a:	2a69      	cmp	r2, #105	; 0x69
 800bb2c:	d027      	beq.n	800bb7e <_strtod_l+0x356>
 800bb2e:	dc24      	bgt.n	800bb7a <_strtod_l+0x352>
 800bb30:	2a49      	cmp	r2, #73	; 0x49
 800bb32:	d024      	beq.n	800bb7e <_strtod_l+0x356>
 800bb34:	2a4e      	cmp	r2, #78	; 0x4e
 800bb36:	f47f aed9 	bne.w	800b8ec <_strtod_l+0xc4>
 800bb3a:	499f      	ldr	r1, [pc, #636]	; (800bdb8 <_strtod_l+0x590>)
 800bb3c:	a817      	add	r0, sp, #92	; 0x5c
 800bb3e:	f001 fe4b 	bl	800d7d8 <__match>
 800bb42:	2800      	cmp	r0, #0
 800bb44:	f43f aed2 	beq.w	800b8ec <_strtod_l+0xc4>
 800bb48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb4a:	781b      	ldrb	r3, [r3, #0]
 800bb4c:	2b28      	cmp	r3, #40	; 0x28
 800bb4e:	d12d      	bne.n	800bbac <_strtod_l+0x384>
 800bb50:	499a      	ldr	r1, [pc, #616]	; (800bdbc <_strtod_l+0x594>)
 800bb52:	aa1a      	add	r2, sp, #104	; 0x68
 800bb54:	a817      	add	r0, sp, #92	; 0x5c
 800bb56:	f001 fe53 	bl	800d800 <__hexnan>
 800bb5a:	2805      	cmp	r0, #5
 800bb5c:	d126      	bne.n	800bbac <_strtod_l+0x384>
 800bb5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bb60:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800bb64:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bb68:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bb6c:	e6a0      	b.n	800b8b0 <_strtod_l+0x88>
 800bb6e:	210a      	movs	r1, #10
 800bb70:	fb01 2e0e 	mla	lr, r1, lr, r2
 800bb74:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bb78:	e7b9      	b.n	800baee <_strtod_l+0x2c6>
 800bb7a:	2a6e      	cmp	r2, #110	; 0x6e
 800bb7c:	e7db      	b.n	800bb36 <_strtod_l+0x30e>
 800bb7e:	4990      	ldr	r1, [pc, #576]	; (800bdc0 <_strtod_l+0x598>)
 800bb80:	a817      	add	r0, sp, #92	; 0x5c
 800bb82:	f001 fe29 	bl	800d7d8 <__match>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	f43f aeb0 	beq.w	800b8ec <_strtod_l+0xc4>
 800bb8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb8e:	498d      	ldr	r1, [pc, #564]	; (800bdc4 <_strtod_l+0x59c>)
 800bb90:	3b01      	subs	r3, #1
 800bb92:	a817      	add	r0, sp, #92	; 0x5c
 800bb94:	9317      	str	r3, [sp, #92]	; 0x5c
 800bb96:	f001 fe1f 	bl	800d7d8 <__match>
 800bb9a:	b910      	cbnz	r0, 800bba2 <_strtod_l+0x37a>
 800bb9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb9e:	3301      	adds	r3, #1
 800bba0:	9317      	str	r3, [sp, #92]	; 0x5c
 800bba2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800bdd4 <_strtod_l+0x5ac>
 800bba6:	f04f 0a00 	mov.w	sl, #0
 800bbaa:	e681      	b.n	800b8b0 <_strtod_l+0x88>
 800bbac:	4886      	ldr	r0, [pc, #536]	; (800bdc8 <_strtod_l+0x5a0>)
 800bbae:	f002 ff4f 	bl	800ea50 <nan>
 800bbb2:	ec5b ab10 	vmov	sl, fp, d0
 800bbb6:	e67b      	b.n	800b8b0 <_strtod_l+0x88>
 800bbb8:	9b05      	ldr	r3, [sp, #20]
 800bbba:	9807      	ldr	r0, [sp, #28]
 800bbbc:	1af3      	subs	r3, r6, r3
 800bbbe:	2f00      	cmp	r7, #0
 800bbc0:	bf08      	it	eq
 800bbc2:	462f      	moveq	r7, r5
 800bbc4:	2d10      	cmp	r5, #16
 800bbc6:	9306      	str	r3, [sp, #24]
 800bbc8:	46a8      	mov	r8, r5
 800bbca:	bfa8      	it	ge
 800bbcc:	f04f 0810 	movge.w	r8, #16
 800bbd0:	f7f4 fca0 	bl	8000514 <__aeabi_ui2d>
 800bbd4:	2d09      	cmp	r5, #9
 800bbd6:	4682      	mov	sl, r0
 800bbd8:	468b      	mov	fp, r1
 800bbda:	dd13      	ble.n	800bc04 <_strtod_l+0x3dc>
 800bbdc:	4b7b      	ldr	r3, [pc, #492]	; (800bdcc <_strtod_l+0x5a4>)
 800bbde:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bbe2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bbe6:	f7f4 fd0f 	bl	8000608 <__aeabi_dmul>
 800bbea:	4682      	mov	sl, r0
 800bbec:	4648      	mov	r0, r9
 800bbee:	468b      	mov	fp, r1
 800bbf0:	f7f4 fc90 	bl	8000514 <__aeabi_ui2d>
 800bbf4:	4602      	mov	r2, r0
 800bbf6:	460b      	mov	r3, r1
 800bbf8:	4650      	mov	r0, sl
 800bbfa:	4659      	mov	r1, fp
 800bbfc:	f7f4 fb4e 	bl	800029c <__adddf3>
 800bc00:	4682      	mov	sl, r0
 800bc02:	468b      	mov	fp, r1
 800bc04:	2d0f      	cmp	r5, #15
 800bc06:	dc38      	bgt.n	800bc7a <_strtod_l+0x452>
 800bc08:	9b06      	ldr	r3, [sp, #24]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f43f ae50 	beq.w	800b8b0 <_strtod_l+0x88>
 800bc10:	dd24      	ble.n	800bc5c <_strtod_l+0x434>
 800bc12:	2b16      	cmp	r3, #22
 800bc14:	dc0b      	bgt.n	800bc2e <_strtod_l+0x406>
 800bc16:	496d      	ldr	r1, [pc, #436]	; (800bdcc <_strtod_l+0x5a4>)
 800bc18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc20:	4652      	mov	r2, sl
 800bc22:	465b      	mov	r3, fp
 800bc24:	f7f4 fcf0 	bl	8000608 <__aeabi_dmul>
 800bc28:	4682      	mov	sl, r0
 800bc2a:	468b      	mov	fp, r1
 800bc2c:	e640      	b.n	800b8b0 <_strtod_l+0x88>
 800bc2e:	9a06      	ldr	r2, [sp, #24]
 800bc30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800bc34:	4293      	cmp	r3, r2
 800bc36:	db20      	blt.n	800bc7a <_strtod_l+0x452>
 800bc38:	4c64      	ldr	r4, [pc, #400]	; (800bdcc <_strtod_l+0x5a4>)
 800bc3a:	f1c5 050f 	rsb	r5, r5, #15
 800bc3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800bc42:	4652      	mov	r2, sl
 800bc44:	465b      	mov	r3, fp
 800bc46:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc4a:	f7f4 fcdd 	bl	8000608 <__aeabi_dmul>
 800bc4e:	9b06      	ldr	r3, [sp, #24]
 800bc50:	1b5d      	subs	r5, r3, r5
 800bc52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800bc56:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bc5a:	e7e3      	b.n	800bc24 <_strtod_l+0x3fc>
 800bc5c:	9b06      	ldr	r3, [sp, #24]
 800bc5e:	3316      	adds	r3, #22
 800bc60:	db0b      	blt.n	800bc7a <_strtod_l+0x452>
 800bc62:	9b05      	ldr	r3, [sp, #20]
 800bc64:	1b9e      	subs	r6, r3, r6
 800bc66:	4b59      	ldr	r3, [pc, #356]	; (800bdcc <_strtod_l+0x5a4>)
 800bc68:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800bc6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bc70:	4650      	mov	r0, sl
 800bc72:	4659      	mov	r1, fp
 800bc74:	f7f4 fdf2 	bl	800085c <__aeabi_ddiv>
 800bc78:	e7d6      	b.n	800bc28 <_strtod_l+0x400>
 800bc7a:	9b06      	ldr	r3, [sp, #24]
 800bc7c:	eba5 0808 	sub.w	r8, r5, r8
 800bc80:	4498      	add	r8, r3
 800bc82:	f1b8 0f00 	cmp.w	r8, #0
 800bc86:	dd74      	ble.n	800bd72 <_strtod_l+0x54a>
 800bc88:	f018 030f 	ands.w	r3, r8, #15
 800bc8c:	d00a      	beq.n	800bca4 <_strtod_l+0x47c>
 800bc8e:	494f      	ldr	r1, [pc, #316]	; (800bdcc <_strtod_l+0x5a4>)
 800bc90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc94:	4652      	mov	r2, sl
 800bc96:	465b      	mov	r3, fp
 800bc98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc9c:	f7f4 fcb4 	bl	8000608 <__aeabi_dmul>
 800bca0:	4682      	mov	sl, r0
 800bca2:	468b      	mov	fp, r1
 800bca4:	f038 080f 	bics.w	r8, r8, #15
 800bca8:	d04f      	beq.n	800bd4a <_strtod_l+0x522>
 800bcaa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bcae:	dd22      	ble.n	800bcf6 <_strtod_l+0x4ce>
 800bcb0:	2500      	movs	r5, #0
 800bcb2:	462e      	mov	r6, r5
 800bcb4:	9507      	str	r5, [sp, #28]
 800bcb6:	9505      	str	r5, [sp, #20]
 800bcb8:	2322      	movs	r3, #34	; 0x22
 800bcba:	f8df b118 	ldr.w	fp, [pc, #280]	; 800bdd4 <_strtod_l+0x5ac>
 800bcbe:	6023      	str	r3, [r4, #0]
 800bcc0:	f04f 0a00 	mov.w	sl, #0
 800bcc4:	9b07      	ldr	r3, [sp, #28]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	f43f adf2 	beq.w	800b8b0 <_strtod_l+0x88>
 800bccc:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bcce:	4620      	mov	r0, r4
 800bcd0:	f001 fe90 	bl	800d9f4 <_Bfree>
 800bcd4:	9905      	ldr	r1, [sp, #20]
 800bcd6:	4620      	mov	r0, r4
 800bcd8:	f001 fe8c 	bl	800d9f4 <_Bfree>
 800bcdc:	4631      	mov	r1, r6
 800bcde:	4620      	mov	r0, r4
 800bce0:	f001 fe88 	bl	800d9f4 <_Bfree>
 800bce4:	9907      	ldr	r1, [sp, #28]
 800bce6:	4620      	mov	r0, r4
 800bce8:	f001 fe84 	bl	800d9f4 <_Bfree>
 800bcec:	4629      	mov	r1, r5
 800bcee:	4620      	mov	r0, r4
 800bcf0:	f001 fe80 	bl	800d9f4 <_Bfree>
 800bcf4:	e5dc      	b.n	800b8b0 <_strtod_l+0x88>
 800bcf6:	4b36      	ldr	r3, [pc, #216]	; (800bdd0 <_strtod_l+0x5a8>)
 800bcf8:	9304      	str	r3, [sp, #16]
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bd00:	4650      	mov	r0, sl
 800bd02:	4659      	mov	r1, fp
 800bd04:	4699      	mov	r9, r3
 800bd06:	f1b8 0f01 	cmp.w	r8, #1
 800bd0a:	dc21      	bgt.n	800bd50 <_strtod_l+0x528>
 800bd0c:	b10b      	cbz	r3, 800bd12 <_strtod_l+0x4ea>
 800bd0e:	4682      	mov	sl, r0
 800bd10:	468b      	mov	fp, r1
 800bd12:	4b2f      	ldr	r3, [pc, #188]	; (800bdd0 <_strtod_l+0x5a8>)
 800bd14:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bd18:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bd1c:	4652      	mov	r2, sl
 800bd1e:	465b      	mov	r3, fp
 800bd20:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bd24:	f7f4 fc70 	bl	8000608 <__aeabi_dmul>
 800bd28:	4b2a      	ldr	r3, [pc, #168]	; (800bdd4 <_strtod_l+0x5ac>)
 800bd2a:	460a      	mov	r2, r1
 800bd2c:	400b      	ands	r3, r1
 800bd2e:	492a      	ldr	r1, [pc, #168]	; (800bdd8 <_strtod_l+0x5b0>)
 800bd30:	428b      	cmp	r3, r1
 800bd32:	4682      	mov	sl, r0
 800bd34:	d8bc      	bhi.n	800bcb0 <_strtod_l+0x488>
 800bd36:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bd3a:	428b      	cmp	r3, r1
 800bd3c:	bf86      	itte	hi
 800bd3e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bddc <_strtod_l+0x5b4>
 800bd42:	f04f 3aff 	movhi.w	sl, #4294967295
 800bd46:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	9304      	str	r3, [sp, #16]
 800bd4e:	e084      	b.n	800be5a <_strtod_l+0x632>
 800bd50:	f018 0f01 	tst.w	r8, #1
 800bd54:	d005      	beq.n	800bd62 <_strtod_l+0x53a>
 800bd56:	9b04      	ldr	r3, [sp, #16]
 800bd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd5c:	f7f4 fc54 	bl	8000608 <__aeabi_dmul>
 800bd60:	2301      	movs	r3, #1
 800bd62:	9a04      	ldr	r2, [sp, #16]
 800bd64:	3208      	adds	r2, #8
 800bd66:	f109 0901 	add.w	r9, r9, #1
 800bd6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bd6e:	9204      	str	r2, [sp, #16]
 800bd70:	e7c9      	b.n	800bd06 <_strtod_l+0x4de>
 800bd72:	d0ea      	beq.n	800bd4a <_strtod_l+0x522>
 800bd74:	f1c8 0800 	rsb	r8, r8, #0
 800bd78:	f018 020f 	ands.w	r2, r8, #15
 800bd7c:	d00a      	beq.n	800bd94 <_strtod_l+0x56c>
 800bd7e:	4b13      	ldr	r3, [pc, #76]	; (800bdcc <_strtod_l+0x5a4>)
 800bd80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd84:	4650      	mov	r0, sl
 800bd86:	4659      	mov	r1, fp
 800bd88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd8c:	f7f4 fd66 	bl	800085c <__aeabi_ddiv>
 800bd90:	4682      	mov	sl, r0
 800bd92:	468b      	mov	fp, r1
 800bd94:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bd98:	d0d7      	beq.n	800bd4a <_strtod_l+0x522>
 800bd9a:	f1b8 0f1f 	cmp.w	r8, #31
 800bd9e:	dd1f      	ble.n	800bde0 <_strtod_l+0x5b8>
 800bda0:	2500      	movs	r5, #0
 800bda2:	462e      	mov	r6, r5
 800bda4:	9507      	str	r5, [sp, #28]
 800bda6:	9505      	str	r5, [sp, #20]
 800bda8:	2322      	movs	r3, #34	; 0x22
 800bdaa:	f04f 0a00 	mov.w	sl, #0
 800bdae:	f04f 0b00 	mov.w	fp, #0
 800bdb2:	6023      	str	r3, [r4, #0]
 800bdb4:	e786      	b.n	800bcc4 <_strtod_l+0x49c>
 800bdb6:	bf00      	nop
 800bdb8:	0800f5b1 	.word	0x0800f5b1
 800bdbc:	0800f5ec 	.word	0x0800f5ec
 800bdc0:	0800f5a9 	.word	0x0800f5a9
 800bdc4:	0800f6db 	.word	0x0800f6db
 800bdc8:	0800f6d7 	.word	0x0800f6d7
 800bdcc:	0800f850 	.word	0x0800f850
 800bdd0:	0800f828 	.word	0x0800f828
 800bdd4:	7ff00000 	.word	0x7ff00000
 800bdd8:	7ca00000 	.word	0x7ca00000
 800bddc:	7fefffff 	.word	0x7fefffff
 800bde0:	f018 0310 	ands.w	r3, r8, #16
 800bde4:	bf18      	it	ne
 800bde6:	236a      	movne	r3, #106	; 0x6a
 800bde8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c198 <_strtod_l+0x970>
 800bdec:	9304      	str	r3, [sp, #16]
 800bdee:	4650      	mov	r0, sl
 800bdf0:	4659      	mov	r1, fp
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	f018 0f01 	tst.w	r8, #1
 800bdf8:	d004      	beq.n	800be04 <_strtod_l+0x5dc>
 800bdfa:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bdfe:	f7f4 fc03 	bl	8000608 <__aeabi_dmul>
 800be02:	2301      	movs	r3, #1
 800be04:	ea5f 0868 	movs.w	r8, r8, asr #1
 800be08:	f109 0908 	add.w	r9, r9, #8
 800be0c:	d1f2      	bne.n	800bdf4 <_strtod_l+0x5cc>
 800be0e:	b10b      	cbz	r3, 800be14 <_strtod_l+0x5ec>
 800be10:	4682      	mov	sl, r0
 800be12:	468b      	mov	fp, r1
 800be14:	9b04      	ldr	r3, [sp, #16]
 800be16:	b1c3      	cbz	r3, 800be4a <_strtod_l+0x622>
 800be18:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800be1c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800be20:	2b00      	cmp	r3, #0
 800be22:	4659      	mov	r1, fp
 800be24:	dd11      	ble.n	800be4a <_strtod_l+0x622>
 800be26:	2b1f      	cmp	r3, #31
 800be28:	f340 8124 	ble.w	800c074 <_strtod_l+0x84c>
 800be2c:	2b34      	cmp	r3, #52	; 0x34
 800be2e:	bfde      	ittt	le
 800be30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800be34:	f04f 33ff 	movle.w	r3, #4294967295
 800be38:	fa03 f202 	lslle.w	r2, r3, r2
 800be3c:	f04f 0a00 	mov.w	sl, #0
 800be40:	bfcc      	ite	gt
 800be42:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800be46:	ea02 0b01 	andle.w	fp, r2, r1
 800be4a:	2200      	movs	r2, #0
 800be4c:	2300      	movs	r3, #0
 800be4e:	4650      	mov	r0, sl
 800be50:	4659      	mov	r1, fp
 800be52:	f7f4 fe41 	bl	8000ad8 <__aeabi_dcmpeq>
 800be56:	2800      	cmp	r0, #0
 800be58:	d1a2      	bne.n	800bda0 <_strtod_l+0x578>
 800be5a:	9b07      	ldr	r3, [sp, #28]
 800be5c:	9300      	str	r3, [sp, #0]
 800be5e:	9908      	ldr	r1, [sp, #32]
 800be60:	462b      	mov	r3, r5
 800be62:	463a      	mov	r2, r7
 800be64:	4620      	mov	r0, r4
 800be66:	f001 fe2d 	bl	800dac4 <__s2b>
 800be6a:	9007      	str	r0, [sp, #28]
 800be6c:	2800      	cmp	r0, #0
 800be6e:	f43f af1f 	beq.w	800bcb0 <_strtod_l+0x488>
 800be72:	9b05      	ldr	r3, [sp, #20]
 800be74:	1b9e      	subs	r6, r3, r6
 800be76:	9b06      	ldr	r3, [sp, #24]
 800be78:	2b00      	cmp	r3, #0
 800be7a:	bfb4      	ite	lt
 800be7c:	4633      	movlt	r3, r6
 800be7e:	2300      	movge	r3, #0
 800be80:	930c      	str	r3, [sp, #48]	; 0x30
 800be82:	9b06      	ldr	r3, [sp, #24]
 800be84:	2500      	movs	r5, #0
 800be86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800be8a:	9312      	str	r3, [sp, #72]	; 0x48
 800be8c:	462e      	mov	r6, r5
 800be8e:	9b07      	ldr	r3, [sp, #28]
 800be90:	4620      	mov	r0, r4
 800be92:	6859      	ldr	r1, [r3, #4]
 800be94:	f001 fd6e 	bl	800d974 <_Balloc>
 800be98:	9005      	str	r0, [sp, #20]
 800be9a:	2800      	cmp	r0, #0
 800be9c:	f43f af0c 	beq.w	800bcb8 <_strtod_l+0x490>
 800bea0:	9b07      	ldr	r3, [sp, #28]
 800bea2:	691a      	ldr	r2, [r3, #16]
 800bea4:	3202      	adds	r2, #2
 800bea6:	f103 010c 	add.w	r1, r3, #12
 800beaa:	0092      	lsls	r2, r2, #2
 800beac:	300c      	adds	r0, #12
 800beae:	f7fe fffd 	bl	800aeac <memcpy>
 800beb2:	ec4b ab10 	vmov	d0, sl, fp
 800beb6:	aa1a      	add	r2, sp, #104	; 0x68
 800beb8:	a919      	add	r1, sp, #100	; 0x64
 800beba:	4620      	mov	r0, r4
 800bebc:	f002 f948 	bl	800e150 <__d2b>
 800bec0:	ec4b ab18 	vmov	d8, sl, fp
 800bec4:	9018      	str	r0, [sp, #96]	; 0x60
 800bec6:	2800      	cmp	r0, #0
 800bec8:	f43f aef6 	beq.w	800bcb8 <_strtod_l+0x490>
 800becc:	2101      	movs	r1, #1
 800bece:	4620      	mov	r0, r4
 800bed0:	f001 fe92 	bl	800dbf8 <__i2b>
 800bed4:	4606      	mov	r6, r0
 800bed6:	2800      	cmp	r0, #0
 800bed8:	f43f aeee 	beq.w	800bcb8 <_strtod_l+0x490>
 800bedc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bede:	9904      	ldr	r1, [sp, #16]
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	bfab      	itete	ge
 800bee4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800bee6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800bee8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800beea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800beee:	bfac      	ite	ge
 800bef0:	eb03 0902 	addge.w	r9, r3, r2
 800bef4:	1ad7      	sublt	r7, r2, r3
 800bef6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800bef8:	eba3 0801 	sub.w	r8, r3, r1
 800befc:	4490      	add	r8, r2
 800befe:	4ba1      	ldr	r3, [pc, #644]	; (800c184 <_strtod_l+0x95c>)
 800bf00:	f108 38ff 	add.w	r8, r8, #4294967295
 800bf04:	4598      	cmp	r8, r3
 800bf06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bf0a:	f280 80c7 	bge.w	800c09c <_strtod_l+0x874>
 800bf0e:	eba3 0308 	sub.w	r3, r3, r8
 800bf12:	2b1f      	cmp	r3, #31
 800bf14:	eba2 0203 	sub.w	r2, r2, r3
 800bf18:	f04f 0101 	mov.w	r1, #1
 800bf1c:	f300 80b1 	bgt.w	800c082 <_strtod_l+0x85a>
 800bf20:	fa01 f303 	lsl.w	r3, r1, r3
 800bf24:	930d      	str	r3, [sp, #52]	; 0x34
 800bf26:	2300      	movs	r3, #0
 800bf28:	9308      	str	r3, [sp, #32]
 800bf2a:	eb09 0802 	add.w	r8, r9, r2
 800bf2e:	9b04      	ldr	r3, [sp, #16]
 800bf30:	45c1      	cmp	r9, r8
 800bf32:	4417      	add	r7, r2
 800bf34:	441f      	add	r7, r3
 800bf36:	464b      	mov	r3, r9
 800bf38:	bfa8      	it	ge
 800bf3a:	4643      	movge	r3, r8
 800bf3c:	42bb      	cmp	r3, r7
 800bf3e:	bfa8      	it	ge
 800bf40:	463b      	movge	r3, r7
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	bfc2      	ittt	gt
 800bf46:	eba8 0803 	subgt.w	r8, r8, r3
 800bf4a:	1aff      	subgt	r7, r7, r3
 800bf4c:	eba9 0903 	subgt.w	r9, r9, r3
 800bf50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	dd17      	ble.n	800bf86 <_strtod_l+0x75e>
 800bf56:	4631      	mov	r1, r6
 800bf58:	461a      	mov	r2, r3
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f001 ff0c 	bl	800dd78 <__pow5mult>
 800bf60:	4606      	mov	r6, r0
 800bf62:	2800      	cmp	r0, #0
 800bf64:	f43f aea8 	beq.w	800bcb8 <_strtod_l+0x490>
 800bf68:	4601      	mov	r1, r0
 800bf6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bf6c:	4620      	mov	r0, r4
 800bf6e:	f001 fe59 	bl	800dc24 <__multiply>
 800bf72:	900b      	str	r0, [sp, #44]	; 0x2c
 800bf74:	2800      	cmp	r0, #0
 800bf76:	f43f ae9f 	beq.w	800bcb8 <_strtod_l+0x490>
 800bf7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f001 fd39 	bl	800d9f4 <_Bfree>
 800bf82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf84:	9318      	str	r3, [sp, #96]	; 0x60
 800bf86:	f1b8 0f00 	cmp.w	r8, #0
 800bf8a:	f300 808c 	bgt.w	800c0a6 <_strtod_l+0x87e>
 800bf8e:	9b06      	ldr	r3, [sp, #24]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	dd08      	ble.n	800bfa6 <_strtod_l+0x77e>
 800bf94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf96:	9905      	ldr	r1, [sp, #20]
 800bf98:	4620      	mov	r0, r4
 800bf9a:	f001 feed 	bl	800dd78 <__pow5mult>
 800bf9e:	9005      	str	r0, [sp, #20]
 800bfa0:	2800      	cmp	r0, #0
 800bfa2:	f43f ae89 	beq.w	800bcb8 <_strtod_l+0x490>
 800bfa6:	2f00      	cmp	r7, #0
 800bfa8:	dd08      	ble.n	800bfbc <_strtod_l+0x794>
 800bfaa:	9905      	ldr	r1, [sp, #20]
 800bfac:	463a      	mov	r2, r7
 800bfae:	4620      	mov	r0, r4
 800bfb0:	f001 ff3c 	bl	800de2c <__lshift>
 800bfb4:	9005      	str	r0, [sp, #20]
 800bfb6:	2800      	cmp	r0, #0
 800bfb8:	f43f ae7e 	beq.w	800bcb8 <_strtod_l+0x490>
 800bfbc:	f1b9 0f00 	cmp.w	r9, #0
 800bfc0:	dd08      	ble.n	800bfd4 <_strtod_l+0x7ac>
 800bfc2:	4631      	mov	r1, r6
 800bfc4:	464a      	mov	r2, r9
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	f001 ff30 	bl	800de2c <__lshift>
 800bfcc:	4606      	mov	r6, r0
 800bfce:	2800      	cmp	r0, #0
 800bfd0:	f43f ae72 	beq.w	800bcb8 <_strtod_l+0x490>
 800bfd4:	9a05      	ldr	r2, [sp, #20]
 800bfd6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f001 ffb3 	bl	800df44 <__mdiff>
 800bfde:	4605      	mov	r5, r0
 800bfe0:	2800      	cmp	r0, #0
 800bfe2:	f43f ae69 	beq.w	800bcb8 <_strtod_l+0x490>
 800bfe6:	68c3      	ldr	r3, [r0, #12]
 800bfe8:	930b      	str	r3, [sp, #44]	; 0x2c
 800bfea:	2300      	movs	r3, #0
 800bfec:	60c3      	str	r3, [r0, #12]
 800bfee:	4631      	mov	r1, r6
 800bff0:	f001 ff8c 	bl	800df0c <__mcmp>
 800bff4:	2800      	cmp	r0, #0
 800bff6:	da60      	bge.n	800c0ba <_strtod_l+0x892>
 800bff8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bffa:	ea53 030a 	orrs.w	r3, r3, sl
 800bffe:	f040 8082 	bne.w	800c106 <_strtod_l+0x8de>
 800c002:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c006:	2b00      	cmp	r3, #0
 800c008:	d17d      	bne.n	800c106 <_strtod_l+0x8de>
 800c00a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c00e:	0d1b      	lsrs	r3, r3, #20
 800c010:	051b      	lsls	r3, r3, #20
 800c012:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c016:	d976      	bls.n	800c106 <_strtod_l+0x8de>
 800c018:	696b      	ldr	r3, [r5, #20]
 800c01a:	b913      	cbnz	r3, 800c022 <_strtod_l+0x7fa>
 800c01c:	692b      	ldr	r3, [r5, #16]
 800c01e:	2b01      	cmp	r3, #1
 800c020:	dd71      	ble.n	800c106 <_strtod_l+0x8de>
 800c022:	4629      	mov	r1, r5
 800c024:	2201      	movs	r2, #1
 800c026:	4620      	mov	r0, r4
 800c028:	f001 ff00 	bl	800de2c <__lshift>
 800c02c:	4631      	mov	r1, r6
 800c02e:	4605      	mov	r5, r0
 800c030:	f001 ff6c 	bl	800df0c <__mcmp>
 800c034:	2800      	cmp	r0, #0
 800c036:	dd66      	ble.n	800c106 <_strtod_l+0x8de>
 800c038:	9904      	ldr	r1, [sp, #16]
 800c03a:	4a53      	ldr	r2, [pc, #332]	; (800c188 <_strtod_l+0x960>)
 800c03c:	465b      	mov	r3, fp
 800c03e:	2900      	cmp	r1, #0
 800c040:	f000 8081 	beq.w	800c146 <_strtod_l+0x91e>
 800c044:	ea02 010b 	and.w	r1, r2, fp
 800c048:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c04c:	dc7b      	bgt.n	800c146 <_strtod_l+0x91e>
 800c04e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c052:	f77f aea9 	ble.w	800bda8 <_strtod_l+0x580>
 800c056:	4b4d      	ldr	r3, [pc, #308]	; (800c18c <_strtod_l+0x964>)
 800c058:	4650      	mov	r0, sl
 800c05a:	4659      	mov	r1, fp
 800c05c:	2200      	movs	r2, #0
 800c05e:	f7f4 fad3 	bl	8000608 <__aeabi_dmul>
 800c062:	460b      	mov	r3, r1
 800c064:	4303      	orrs	r3, r0
 800c066:	bf08      	it	eq
 800c068:	2322      	moveq	r3, #34	; 0x22
 800c06a:	4682      	mov	sl, r0
 800c06c:	468b      	mov	fp, r1
 800c06e:	bf08      	it	eq
 800c070:	6023      	streq	r3, [r4, #0]
 800c072:	e62b      	b.n	800bccc <_strtod_l+0x4a4>
 800c074:	f04f 32ff 	mov.w	r2, #4294967295
 800c078:	fa02 f303 	lsl.w	r3, r2, r3
 800c07c:	ea03 0a0a 	and.w	sl, r3, sl
 800c080:	e6e3      	b.n	800be4a <_strtod_l+0x622>
 800c082:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c086:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c08a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c08e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c092:	fa01 f308 	lsl.w	r3, r1, r8
 800c096:	9308      	str	r3, [sp, #32]
 800c098:	910d      	str	r1, [sp, #52]	; 0x34
 800c09a:	e746      	b.n	800bf2a <_strtod_l+0x702>
 800c09c:	2300      	movs	r3, #0
 800c09e:	9308      	str	r3, [sp, #32]
 800c0a0:	2301      	movs	r3, #1
 800c0a2:	930d      	str	r3, [sp, #52]	; 0x34
 800c0a4:	e741      	b.n	800bf2a <_strtod_l+0x702>
 800c0a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c0a8:	4642      	mov	r2, r8
 800c0aa:	4620      	mov	r0, r4
 800c0ac:	f001 febe 	bl	800de2c <__lshift>
 800c0b0:	9018      	str	r0, [sp, #96]	; 0x60
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	f47f af6b 	bne.w	800bf8e <_strtod_l+0x766>
 800c0b8:	e5fe      	b.n	800bcb8 <_strtod_l+0x490>
 800c0ba:	465f      	mov	r7, fp
 800c0bc:	d16e      	bne.n	800c19c <_strtod_l+0x974>
 800c0be:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0c0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c0c4:	b342      	cbz	r2, 800c118 <_strtod_l+0x8f0>
 800c0c6:	4a32      	ldr	r2, [pc, #200]	; (800c190 <_strtod_l+0x968>)
 800c0c8:	4293      	cmp	r3, r2
 800c0ca:	d128      	bne.n	800c11e <_strtod_l+0x8f6>
 800c0cc:	9b04      	ldr	r3, [sp, #16]
 800c0ce:	4651      	mov	r1, sl
 800c0d0:	b1eb      	cbz	r3, 800c10e <_strtod_l+0x8e6>
 800c0d2:	4b2d      	ldr	r3, [pc, #180]	; (800c188 <_strtod_l+0x960>)
 800c0d4:	403b      	ands	r3, r7
 800c0d6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c0da:	f04f 32ff 	mov.w	r2, #4294967295
 800c0de:	d819      	bhi.n	800c114 <_strtod_l+0x8ec>
 800c0e0:	0d1b      	lsrs	r3, r3, #20
 800c0e2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c0e6:	fa02 f303 	lsl.w	r3, r2, r3
 800c0ea:	4299      	cmp	r1, r3
 800c0ec:	d117      	bne.n	800c11e <_strtod_l+0x8f6>
 800c0ee:	4b29      	ldr	r3, [pc, #164]	; (800c194 <_strtod_l+0x96c>)
 800c0f0:	429f      	cmp	r7, r3
 800c0f2:	d102      	bne.n	800c0fa <_strtod_l+0x8d2>
 800c0f4:	3101      	adds	r1, #1
 800c0f6:	f43f addf 	beq.w	800bcb8 <_strtod_l+0x490>
 800c0fa:	4b23      	ldr	r3, [pc, #140]	; (800c188 <_strtod_l+0x960>)
 800c0fc:	403b      	ands	r3, r7
 800c0fe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c102:	f04f 0a00 	mov.w	sl, #0
 800c106:	9b04      	ldr	r3, [sp, #16]
 800c108:	2b00      	cmp	r3, #0
 800c10a:	d1a4      	bne.n	800c056 <_strtod_l+0x82e>
 800c10c:	e5de      	b.n	800bccc <_strtod_l+0x4a4>
 800c10e:	f04f 33ff 	mov.w	r3, #4294967295
 800c112:	e7ea      	b.n	800c0ea <_strtod_l+0x8c2>
 800c114:	4613      	mov	r3, r2
 800c116:	e7e8      	b.n	800c0ea <_strtod_l+0x8c2>
 800c118:	ea53 030a 	orrs.w	r3, r3, sl
 800c11c:	d08c      	beq.n	800c038 <_strtod_l+0x810>
 800c11e:	9b08      	ldr	r3, [sp, #32]
 800c120:	b1db      	cbz	r3, 800c15a <_strtod_l+0x932>
 800c122:	423b      	tst	r3, r7
 800c124:	d0ef      	beq.n	800c106 <_strtod_l+0x8de>
 800c126:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c128:	9a04      	ldr	r2, [sp, #16]
 800c12a:	4650      	mov	r0, sl
 800c12c:	4659      	mov	r1, fp
 800c12e:	b1c3      	cbz	r3, 800c162 <_strtod_l+0x93a>
 800c130:	f7ff fb5c 	bl	800b7ec <sulp>
 800c134:	4602      	mov	r2, r0
 800c136:	460b      	mov	r3, r1
 800c138:	ec51 0b18 	vmov	r0, r1, d8
 800c13c:	f7f4 f8ae 	bl	800029c <__adddf3>
 800c140:	4682      	mov	sl, r0
 800c142:	468b      	mov	fp, r1
 800c144:	e7df      	b.n	800c106 <_strtod_l+0x8de>
 800c146:	4013      	ands	r3, r2
 800c148:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c14c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c150:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c154:	f04f 3aff 	mov.w	sl, #4294967295
 800c158:	e7d5      	b.n	800c106 <_strtod_l+0x8de>
 800c15a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c15c:	ea13 0f0a 	tst.w	r3, sl
 800c160:	e7e0      	b.n	800c124 <_strtod_l+0x8fc>
 800c162:	f7ff fb43 	bl	800b7ec <sulp>
 800c166:	4602      	mov	r2, r0
 800c168:	460b      	mov	r3, r1
 800c16a:	ec51 0b18 	vmov	r0, r1, d8
 800c16e:	f7f4 f893 	bl	8000298 <__aeabi_dsub>
 800c172:	2200      	movs	r2, #0
 800c174:	2300      	movs	r3, #0
 800c176:	4682      	mov	sl, r0
 800c178:	468b      	mov	fp, r1
 800c17a:	f7f4 fcad 	bl	8000ad8 <__aeabi_dcmpeq>
 800c17e:	2800      	cmp	r0, #0
 800c180:	d0c1      	beq.n	800c106 <_strtod_l+0x8de>
 800c182:	e611      	b.n	800bda8 <_strtod_l+0x580>
 800c184:	fffffc02 	.word	0xfffffc02
 800c188:	7ff00000 	.word	0x7ff00000
 800c18c:	39500000 	.word	0x39500000
 800c190:	000fffff 	.word	0x000fffff
 800c194:	7fefffff 	.word	0x7fefffff
 800c198:	0800f600 	.word	0x0800f600
 800c19c:	4631      	mov	r1, r6
 800c19e:	4628      	mov	r0, r5
 800c1a0:	f002 f832 	bl	800e208 <__ratio>
 800c1a4:	ec59 8b10 	vmov	r8, r9, d0
 800c1a8:	ee10 0a10 	vmov	r0, s0
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c1b2:	4649      	mov	r1, r9
 800c1b4:	f7f4 fca4 	bl	8000b00 <__aeabi_dcmple>
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	d07a      	beq.n	800c2b2 <_strtod_l+0xa8a>
 800c1bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d04a      	beq.n	800c258 <_strtod_l+0xa30>
 800c1c2:	4b95      	ldr	r3, [pc, #596]	; (800c418 <_strtod_l+0xbf0>)
 800c1c4:	2200      	movs	r2, #0
 800c1c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c1ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c418 <_strtod_l+0xbf0>
 800c1ce:	f04f 0800 	mov.w	r8, #0
 800c1d2:	4b92      	ldr	r3, [pc, #584]	; (800c41c <_strtod_l+0xbf4>)
 800c1d4:	403b      	ands	r3, r7
 800c1d6:	930d      	str	r3, [sp, #52]	; 0x34
 800c1d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c1da:	4b91      	ldr	r3, [pc, #580]	; (800c420 <_strtod_l+0xbf8>)
 800c1dc:	429a      	cmp	r2, r3
 800c1de:	f040 80b0 	bne.w	800c342 <_strtod_l+0xb1a>
 800c1e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c1e6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c1ea:	ec4b ab10 	vmov	d0, sl, fp
 800c1ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c1f2:	f001 ff31 	bl	800e058 <__ulp>
 800c1f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c1fa:	ec53 2b10 	vmov	r2, r3, d0
 800c1fe:	f7f4 fa03 	bl	8000608 <__aeabi_dmul>
 800c202:	4652      	mov	r2, sl
 800c204:	465b      	mov	r3, fp
 800c206:	f7f4 f849 	bl	800029c <__adddf3>
 800c20a:	460b      	mov	r3, r1
 800c20c:	4983      	ldr	r1, [pc, #524]	; (800c41c <_strtod_l+0xbf4>)
 800c20e:	4a85      	ldr	r2, [pc, #532]	; (800c424 <_strtod_l+0xbfc>)
 800c210:	4019      	ands	r1, r3
 800c212:	4291      	cmp	r1, r2
 800c214:	4682      	mov	sl, r0
 800c216:	d960      	bls.n	800c2da <_strtod_l+0xab2>
 800c218:	ee18 3a90 	vmov	r3, s17
 800c21c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c220:	4293      	cmp	r3, r2
 800c222:	d104      	bne.n	800c22e <_strtod_l+0xa06>
 800c224:	ee18 3a10 	vmov	r3, s16
 800c228:	3301      	adds	r3, #1
 800c22a:	f43f ad45 	beq.w	800bcb8 <_strtod_l+0x490>
 800c22e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c430 <_strtod_l+0xc08>
 800c232:	f04f 3aff 	mov.w	sl, #4294967295
 800c236:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c238:	4620      	mov	r0, r4
 800c23a:	f001 fbdb 	bl	800d9f4 <_Bfree>
 800c23e:	9905      	ldr	r1, [sp, #20]
 800c240:	4620      	mov	r0, r4
 800c242:	f001 fbd7 	bl	800d9f4 <_Bfree>
 800c246:	4631      	mov	r1, r6
 800c248:	4620      	mov	r0, r4
 800c24a:	f001 fbd3 	bl	800d9f4 <_Bfree>
 800c24e:	4629      	mov	r1, r5
 800c250:	4620      	mov	r0, r4
 800c252:	f001 fbcf 	bl	800d9f4 <_Bfree>
 800c256:	e61a      	b.n	800be8e <_strtod_l+0x666>
 800c258:	f1ba 0f00 	cmp.w	sl, #0
 800c25c:	d11b      	bne.n	800c296 <_strtod_l+0xa6e>
 800c25e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c262:	b9f3      	cbnz	r3, 800c2a2 <_strtod_l+0xa7a>
 800c264:	4b6c      	ldr	r3, [pc, #432]	; (800c418 <_strtod_l+0xbf0>)
 800c266:	2200      	movs	r2, #0
 800c268:	4640      	mov	r0, r8
 800c26a:	4649      	mov	r1, r9
 800c26c:	f7f4 fc3e 	bl	8000aec <__aeabi_dcmplt>
 800c270:	b9d0      	cbnz	r0, 800c2a8 <_strtod_l+0xa80>
 800c272:	4640      	mov	r0, r8
 800c274:	4649      	mov	r1, r9
 800c276:	4b6c      	ldr	r3, [pc, #432]	; (800c428 <_strtod_l+0xc00>)
 800c278:	2200      	movs	r2, #0
 800c27a:	f7f4 f9c5 	bl	8000608 <__aeabi_dmul>
 800c27e:	4680      	mov	r8, r0
 800c280:	4689      	mov	r9, r1
 800c282:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c286:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c28a:	9315      	str	r3, [sp, #84]	; 0x54
 800c28c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c290:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c294:	e79d      	b.n	800c1d2 <_strtod_l+0x9aa>
 800c296:	f1ba 0f01 	cmp.w	sl, #1
 800c29a:	d102      	bne.n	800c2a2 <_strtod_l+0xa7a>
 800c29c:	2f00      	cmp	r7, #0
 800c29e:	f43f ad83 	beq.w	800bda8 <_strtod_l+0x580>
 800c2a2:	4b62      	ldr	r3, [pc, #392]	; (800c42c <_strtod_l+0xc04>)
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	e78e      	b.n	800c1c6 <_strtod_l+0x99e>
 800c2a8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c428 <_strtod_l+0xc00>
 800c2ac:	f04f 0800 	mov.w	r8, #0
 800c2b0:	e7e7      	b.n	800c282 <_strtod_l+0xa5a>
 800c2b2:	4b5d      	ldr	r3, [pc, #372]	; (800c428 <_strtod_l+0xc00>)
 800c2b4:	4640      	mov	r0, r8
 800c2b6:	4649      	mov	r1, r9
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f7f4 f9a5 	bl	8000608 <__aeabi_dmul>
 800c2be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2c0:	4680      	mov	r8, r0
 800c2c2:	4689      	mov	r9, r1
 800c2c4:	b933      	cbnz	r3, 800c2d4 <_strtod_l+0xaac>
 800c2c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2ca:	900e      	str	r0, [sp, #56]	; 0x38
 800c2cc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c2d2:	e7dd      	b.n	800c290 <_strtod_l+0xa68>
 800c2d4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c2d8:	e7f9      	b.n	800c2ce <_strtod_l+0xaa6>
 800c2da:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c2de:	9b04      	ldr	r3, [sp, #16]
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d1a8      	bne.n	800c236 <_strtod_l+0xa0e>
 800c2e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c2e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2ea:	0d1b      	lsrs	r3, r3, #20
 800c2ec:	051b      	lsls	r3, r3, #20
 800c2ee:	429a      	cmp	r2, r3
 800c2f0:	d1a1      	bne.n	800c236 <_strtod_l+0xa0e>
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	4649      	mov	r1, r9
 800c2f6:	f7f4 fce7 	bl	8000cc8 <__aeabi_d2lz>
 800c2fa:	f7f4 f957 	bl	80005ac <__aeabi_l2d>
 800c2fe:	4602      	mov	r2, r0
 800c300:	460b      	mov	r3, r1
 800c302:	4640      	mov	r0, r8
 800c304:	4649      	mov	r1, r9
 800c306:	f7f3 ffc7 	bl	8000298 <__aeabi_dsub>
 800c30a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c30c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c310:	ea43 030a 	orr.w	r3, r3, sl
 800c314:	4313      	orrs	r3, r2
 800c316:	4680      	mov	r8, r0
 800c318:	4689      	mov	r9, r1
 800c31a:	d055      	beq.n	800c3c8 <_strtod_l+0xba0>
 800c31c:	a336      	add	r3, pc, #216	; (adr r3, 800c3f8 <_strtod_l+0xbd0>)
 800c31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c322:	f7f4 fbe3 	bl	8000aec <__aeabi_dcmplt>
 800c326:	2800      	cmp	r0, #0
 800c328:	f47f acd0 	bne.w	800bccc <_strtod_l+0x4a4>
 800c32c:	a334      	add	r3, pc, #208	; (adr r3, 800c400 <_strtod_l+0xbd8>)
 800c32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c332:	4640      	mov	r0, r8
 800c334:	4649      	mov	r1, r9
 800c336:	f7f4 fbf7 	bl	8000b28 <__aeabi_dcmpgt>
 800c33a:	2800      	cmp	r0, #0
 800c33c:	f43f af7b 	beq.w	800c236 <_strtod_l+0xa0e>
 800c340:	e4c4      	b.n	800bccc <_strtod_l+0x4a4>
 800c342:	9b04      	ldr	r3, [sp, #16]
 800c344:	b333      	cbz	r3, 800c394 <_strtod_l+0xb6c>
 800c346:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c348:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c34c:	d822      	bhi.n	800c394 <_strtod_l+0xb6c>
 800c34e:	a32e      	add	r3, pc, #184	; (adr r3, 800c408 <_strtod_l+0xbe0>)
 800c350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c354:	4640      	mov	r0, r8
 800c356:	4649      	mov	r1, r9
 800c358:	f7f4 fbd2 	bl	8000b00 <__aeabi_dcmple>
 800c35c:	b1a0      	cbz	r0, 800c388 <_strtod_l+0xb60>
 800c35e:	4649      	mov	r1, r9
 800c360:	4640      	mov	r0, r8
 800c362:	f7f4 fc29 	bl	8000bb8 <__aeabi_d2uiz>
 800c366:	2801      	cmp	r0, #1
 800c368:	bf38      	it	cc
 800c36a:	2001      	movcc	r0, #1
 800c36c:	f7f4 f8d2 	bl	8000514 <__aeabi_ui2d>
 800c370:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c372:	4680      	mov	r8, r0
 800c374:	4689      	mov	r9, r1
 800c376:	bb23      	cbnz	r3, 800c3c2 <_strtod_l+0xb9a>
 800c378:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c37c:	9010      	str	r0, [sp, #64]	; 0x40
 800c37e:	9311      	str	r3, [sp, #68]	; 0x44
 800c380:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c384:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c388:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c38a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c38c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c390:	1a9b      	subs	r3, r3, r2
 800c392:	9309      	str	r3, [sp, #36]	; 0x24
 800c394:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c398:	eeb0 0a48 	vmov.f32	s0, s16
 800c39c:	eef0 0a68 	vmov.f32	s1, s17
 800c3a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c3a4:	f001 fe58 	bl	800e058 <__ulp>
 800c3a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c3ac:	ec53 2b10 	vmov	r2, r3, d0
 800c3b0:	f7f4 f92a 	bl	8000608 <__aeabi_dmul>
 800c3b4:	ec53 2b18 	vmov	r2, r3, d8
 800c3b8:	f7f3 ff70 	bl	800029c <__adddf3>
 800c3bc:	4682      	mov	sl, r0
 800c3be:	468b      	mov	fp, r1
 800c3c0:	e78d      	b.n	800c2de <_strtod_l+0xab6>
 800c3c2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c3c6:	e7db      	b.n	800c380 <_strtod_l+0xb58>
 800c3c8:	a311      	add	r3, pc, #68	; (adr r3, 800c410 <_strtod_l+0xbe8>)
 800c3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3ce:	f7f4 fb8d 	bl	8000aec <__aeabi_dcmplt>
 800c3d2:	e7b2      	b.n	800c33a <_strtod_l+0xb12>
 800c3d4:	2300      	movs	r3, #0
 800c3d6:	930a      	str	r3, [sp, #40]	; 0x28
 800c3d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c3da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c3dc:	6013      	str	r3, [r2, #0]
 800c3de:	f7ff ba6b 	b.w	800b8b8 <_strtod_l+0x90>
 800c3e2:	2a65      	cmp	r2, #101	; 0x65
 800c3e4:	f43f ab5f 	beq.w	800baa6 <_strtod_l+0x27e>
 800c3e8:	2a45      	cmp	r2, #69	; 0x45
 800c3ea:	f43f ab5c 	beq.w	800baa6 <_strtod_l+0x27e>
 800c3ee:	2301      	movs	r3, #1
 800c3f0:	f7ff bb94 	b.w	800bb1c <_strtod_l+0x2f4>
 800c3f4:	f3af 8000 	nop.w
 800c3f8:	94a03595 	.word	0x94a03595
 800c3fc:	3fdfffff 	.word	0x3fdfffff
 800c400:	35afe535 	.word	0x35afe535
 800c404:	3fe00000 	.word	0x3fe00000
 800c408:	ffc00000 	.word	0xffc00000
 800c40c:	41dfffff 	.word	0x41dfffff
 800c410:	94a03595 	.word	0x94a03595
 800c414:	3fcfffff 	.word	0x3fcfffff
 800c418:	3ff00000 	.word	0x3ff00000
 800c41c:	7ff00000 	.word	0x7ff00000
 800c420:	7fe00000 	.word	0x7fe00000
 800c424:	7c9fffff 	.word	0x7c9fffff
 800c428:	3fe00000 	.word	0x3fe00000
 800c42c:	bff00000 	.word	0xbff00000
 800c430:	7fefffff 	.word	0x7fefffff

0800c434 <strtod>:
 800c434:	460a      	mov	r2, r1
 800c436:	4601      	mov	r1, r0
 800c438:	4802      	ldr	r0, [pc, #8]	; (800c444 <strtod+0x10>)
 800c43a:	4b03      	ldr	r3, [pc, #12]	; (800c448 <strtod+0x14>)
 800c43c:	6800      	ldr	r0, [r0, #0]
 800c43e:	f7ff b9f3 	b.w	800b828 <_strtod_l>
 800c442:	bf00      	nop
 800c444:	20000124 	.word	0x20000124
 800c448:	2000018c 	.word	0x2000018c

0800c44c <strtok>:
 800c44c:	4b16      	ldr	r3, [pc, #88]	; (800c4a8 <strtok+0x5c>)
 800c44e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c450:	681e      	ldr	r6, [r3, #0]
 800c452:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c454:	4605      	mov	r5, r0
 800c456:	b9fc      	cbnz	r4, 800c498 <strtok+0x4c>
 800c458:	2050      	movs	r0, #80	; 0x50
 800c45a:	9101      	str	r1, [sp, #4]
 800c45c:	f001 fa70 	bl	800d940 <malloc>
 800c460:	9901      	ldr	r1, [sp, #4]
 800c462:	65b0      	str	r0, [r6, #88]	; 0x58
 800c464:	4602      	mov	r2, r0
 800c466:	b920      	cbnz	r0, 800c472 <strtok+0x26>
 800c468:	4b10      	ldr	r3, [pc, #64]	; (800c4ac <strtok+0x60>)
 800c46a:	4811      	ldr	r0, [pc, #68]	; (800c4b0 <strtok+0x64>)
 800c46c:	2157      	movs	r1, #87	; 0x57
 800c46e:	f000 f849 	bl	800c504 <__assert_func>
 800c472:	e9c0 4400 	strd	r4, r4, [r0]
 800c476:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c47a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c47e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c482:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c486:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c48a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c48e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c492:	6184      	str	r4, [r0, #24]
 800c494:	7704      	strb	r4, [r0, #28]
 800c496:	6244      	str	r4, [r0, #36]	; 0x24
 800c498:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c49a:	2301      	movs	r3, #1
 800c49c:	4628      	mov	r0, r5
 800c49e:	b002      	add	sp, #8
 800c4a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c4a4:	f000 b806 	b.w	800c4b4 <__strtok_r>
 800c4a8:	20000124 	.word	0x20000124
 800c4ac:	0800f628 	.word	0x0800f628
 800c4b0:	0800f63f 	.word	0x0800f63f

0800c4b4 <__strtok_r>:
 800c4b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4b6:	b908      	cbnz	r0, 800c4bc <__strtok_r+0x8>
 800c4b8:	6810      	ldr	r0, [r2, #0]
 800c4ba:	b188      	cbz	r0, 800c4e0 <__strtok_r+0x2c>
 800c4bc:	4604      	mov	r4, r0
 800c4be:	4620      	mov	r0, r4
 800c4c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c4c4:	460f      	mov	r7, r1
 800c4c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c4ca:	b91e      	cbnz	r6, 800c4d4 <__strtok_r+0x20>
 800c4cc:	b965      	cbnz	r5, 800c4e8 <__strtok_r+0x34>
 800c4ce:	6015      	str	r5, [r2, #0]
 800c4d0:	4628      	mov	r0, r5
 800c4d2:	e005      	b.n	800c4e0 <__strtok_r+0x2c>
 800c4d4:	42b5      	cmp	r5, r6
 800c4d6:	d1f6      	bne.n	800c4c6 <__strtok_r+0x12>
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1f0      	bne.n	800c4be <__strtok_r+0xa>
 800c4dc:	6014      	str	r4, [r2, #0]
 800c4de:	7003      	strb	r3, [r0, #0]
 800c4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4e2:	461c      	mov	r4, r3
 800c4e4:	e00c      	b.n	800c500 <__strtok_r+0x4c>
 800c4e6:	b915      	cbnz	r5, 800c4ee <__strtok_r+0x3a>
 800c4e8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c4ec:	460e      	mov	r6, r1
 800c4ee:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c4f2:	42ab      	cmp	r3, r5
 800c4f4:	d1f7      	bne.n	800c4e6 <__strtok_r+0x32>
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d0f3      	beq.n	800c4e2 <__strtok_r+0x2e>
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c500:	6014      	str	r4, [r2, #0]
 800c502:	e7ed      	b.n	800c4e0 <__strtok_r+0x2c>

0800c504 <__assert_func>:
 800c504:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c506:	4614      	mov	r4, r2
 800c508:	461a      	mov	r2, r3
 800c50a:	4b09      	ldr	r3, [pc, #36]	; (800c530 <__assert_func+0x2c>)
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	4605      	mov	r5, r0
 800c510:	68d8      	ldr	r0, [r3, #12]
 800c512:	b14c      	cbz	r4, 800c528 <__assert_func+0x24>
 800c514:	4b07      	ldr	r3, [pc, #28]	; (800c534 <__assert_func+0x30>)
 800c516:	9100      	str	r1, [sp, #0]
 800c518:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c51c:	4906      	ldr	r1, [pc, #24]	; (800c538 <__assert_func+0x34>)
 800c51e:	462b      	mov	r3, r5
 800c520:	f000 fe88 	bl	800d234 <fiprintf>
 800c524:	f002 fb8e 	bl	800ec44 <abort>
 800c528:	4b04      	ldr	r3, [pc, #16]	; (800c53c <__assert_func+0x38>)
 800c52a:	461c      	mov	r4, r3
 800c52c:	e7f3      	b.n	800c516 <__assert_func+0x12>
 800c52e:	bf00      	nop
 800c530:	20000124 	.word	0x20000124
 800c534:	0800f69c 	.word	0x0800f69c
 800c538:	0800f6a9 	.word	0x0800f6a9
 800c53c:	0800f6d7 	.word	0x0800f6d7

0800c540 <quorem>:
 800c540:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c544:	6903      	ldr	r3, [r0, #16]
 800c546:	690c      	ldr	r4, [r1, #16]
 800c548:	42a3      	cmp	r3, r4
 800c54a:	4607      	mov	r7, r0
 800c54c:	f2c0 8081 	blt.w	800c652 <quorem+0x112>
 800c550:	3c01      	subs	r4, #1
 800c552:	f101 0814 	add.w	r8, r1, #20
 800c556:	f100 0514 	add.w	r5, r0, #20
 800c55a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c55e:	9301      	str	r3, [sp, #4]
 800c560:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c564:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c568:	3301      	adds	r3, #1
 800c56a:	429a      	cmp	r2, r3
 800c56c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c570:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c574:	fbb2 f6f3 	udiv	r6, r2, r3
 800c578:	d331      	bcc.n	800c5de <quorem+0x9e>
 800c57a:	f04f 0e00 	mov.w	lr, #0
 800c57e:	4640      	mov	r0, r8
 800c580:	46ac      	mov	ip, r5
 800c582:	46f2      	mov	sl, lr
 800c584:	f850 2b04 	ldr.w	r2, [r0], #4
 800c588:	b293      	uxth	r3, r2
 800c58a:	fb06 e303 	mla	r3, r6, r3, lr
 800c58e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c592:	b29b      	uxth	r3, r3
 800c594:	ebaa 0303 	sub.w	r3, sl, r3
 800c598:	f8dc a000 	ldr.w	sl, [ip]
 800c59c:	0c12      	lsrs	r2, r2, #16
 800c59e:	fa13 f38a 	uxtah	r3, r3, sl
 800c5a2:	fb06 e202 	mla	r2, r6, r2, lr
 800c5a6:	9300      	str	r3, [sp, #0]
 800c5a8:	9b00      	ldr	r3, [sp, #0]
 800c5aa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c5ae:	b292      	uxth	r2, r2
 800c5b0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c5b4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c5b8:	f8bd 3000 	ldrh.w	r3, [sp]
 800c5bc:	4581      	cmp	r9, r0
 800c5be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c5c2:	f84c 3b04 	str.w	r3, [ip], #4
 800c5c6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c5ca:	d2db      	bcs.n	800c584 <quorem+0x44>
 800c5cc:	f855 300b 	ldr.w	r3, [r5, fp]
 800c5d0:	b92b      	cbnz	r3, 800c5de <quorem+0x9e>
 800c5d2:	9b01      	ldr	r3, [sp, #4]
 800c5d4:	3b04      	subs	r3, #4
 800c5d6:	429d      	cmp	r5, r3
 800c5d8:	461a      	mov	r2, r3
 800c5da:	d32e      	bcc.n	800c63a <quorem+0xfa>
 800c5dc:	613c      	str	r4, [r7, #16]
 800c5de:	4638      	mov	r0, r7
 800c5e0:	f001 fc94 	bl	800df0c <__mcmp>
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	db24      	blt.n	800c632 <quorem+0xf2>
 800c5e8:	3601      	adds	r6, #1
 800c5ea:	4628      	mov	r0, r5
 800c5ec:	f04f 0c00 	mov.w	ip, #0
 800c5f0:	f858 2b04 	ldr.w	r2, [r8], #4
 800c5f4:	f8d0 e000 	ldr.w	lr, [r0]
 800c5f8:	b293      	uxth	r3, r2
 800c5fa:	ebac 0303 	sub.w	r3, ip, r3
 800c5fe:	0c12      	lsrs	r2, r2, #16
 800c600:	fa13 f38e 	uxtah	r3, r3, lr
 800c604:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c608:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c60c:	b29b      	uxth	r3, r3
 800c60e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c612:	45c1      	cmp	r9, r8
 800c614:	f840 3b04 	str.w	r3, [r0], #4
 800c618:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c61c:	d2e8      	bcs.n	800c5f0 <quorem+0xb0>
 800c61e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c622:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c626:	b922      	cbnz	r2, 800c632 <quorem+0xf2>
 800c628:	3b04      	subs	r3, #4
 800c62a:	429d      	cmp	r5, r3
 800c62c:	461a      	mov	r2, r3
 800c62e:	d30a      	bcc.n	800c646 <quorem+0x106>
 800c630:	613c      	str	r4, [r7, #16]
 800c632:	4630      	mov	r0, r6
 800c634:	b003      	add	sp, #12
 800c636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c63a:	6812      	ldr	r2, [r2, #0]
 800c63c:	3b04      	subs	r3, #4
 800c63e:	2a00      	cmp	r2, #0
 800c640:	d1cc      	bne.n	800c5dc <quorem+0x9c>
 800c642:	3c01      	subs	r4, #1
 800c644:	e7c7      	b.n	800c5d6 <quorem+0x96>
 800c646:	6812      	ldr	r2, [r2, #0]
 800c648:	3b04      	subs	r3, #4
 800c64a:	2a00      	cmp	r2, #0
 800c64c:	d1f0      	bne.n	800c630 <quorem+0xf0>
 800c64e:	3c01      	subs	r4, #1
 800c650:	e7eb      	b.n	800c62a <quorem+0xea>
 800c652:	2000      	movs	r0, #0
 800c654:	e7ee      	b.n	800c634 <quorem+0xf4>
	...

0800c658 <_dtoa_r>:
 800c658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65c:	ed2d 8b04 	vpush	{d8-d9}
 800c660:	ec57 6b10 	vmov	r6, r7, d0
 800c664:	b093      	sub	sp, #76	; 0x4c
 800c666:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c668:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c66c:	9106      	str	r1, [sp, #24]
 800c66e:	ee10 aa10 	vmov	sl, s0
 800c672:	4604      	mov	r4, r0
 800c674:	9209      	str	r2, [sp, #36]	; 0x24
 800c676:	930c      	str	r3, [sp, #48]	; 0x30
 800c678:	46bb      	mov	fp, r7
 800c67a:	b975      	cbnz	r5, 800c69a <_dtoa_r+0x42>
 800c67c:	2010      	movs	r0, #16
 800c67e:	f001 f95f 	bl	800d940 <malloc>
 800c682:	4602      	mov	r2, r0
 800c684:	6260      	str	r0, [r4, #36]	; 0x24
 800c686:	b920      	cbnz	r0, 800c692 <_dtoa_r+0x3a>
 800c688:	4ba7      	ldr	r3, [pc, #668]	; (800c928 <_dtoa_r+0x2d0>)
 800c68a:	21ea      	movs	r1, #234	; 0xea
 800c68c:	48a7      	ldr	r0, [pc, #668]	; (800c92c <_dtoa_r+0x2d4>)
 800c68e:	f7ff ff39 	bl	800c504 <__assert_func>
 800c692:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c696:	6005      	str	r5, [r0, #0]
 800c698:	60c5      	str	r5, [r0, #12]
 800c69a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c69c:	6819      	ldr	r1, [r3, #0]
 800c69e:	b151      	cbz	r1, 800c6b6 <_dtoa_r+0x5e>
 800c6a0:	685a      	ldr	r2, [r3, #4]
 800c6a2:	604a      	str	r2, [r1, #4]
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	4093      	lsls	r3, r2
 800c6a8:	608b      	str	r3, [r1, #8]
 800c6aa:	4620      	mov	r0, r4
 800c6ac:	f001 f9a2 	bl	800d9f4 <_Bfree>
 800c6b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	601a      	str	r2, [r3, #0]
 800c6b6:	1e3b      	subs	r3, r7, #0
 800c6b8:	bfaa      	itet	ge
 800c6ba:	2300      	movge	r3, #0
 800c6bc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c6c0:	f8c8 3000 	strge.w	r3, [r8]
 800c6c4:	4b9a      	ldr	r3, [pc, #616]	; (800c930 <_dtoa_r+0x2d8>)
 800c6c6:	bfbc      	itt	lt
 800c6c8:	2201      	movlt	r2, #1
 800c6ca:	f8c8 2000 	strlt.w	r2, [r8]
 800c6ce:	ea33 030b 	bics.w	r3, r3, fp
 800c6d2:	d11b      	bne.n	800c70c <_dtoa_r+0xb4>
 800c6d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c6d6:	f242 730f 	movw	r3, #9999	; 0x270f
 800c6da:	6013      	str	r3, [r2, #0]
 800c6dc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c6e0:	4333      	orrs	r3, r6
 800c6e2:	f000 8592 	beq.w	800d20a <_dtoa_r+0xbb2>
 800c6e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c6e8:	b963      	cbnz	r3, 800c704 <_dtoa_r+0xac>
 800c6ea:	4b92      	ldr	r3, [pc, #584]	; (800c934 <_dtoa_r+0x2dc>)
 800c6ec:	e022      	b.n	800c734 <_dtoa_r+0xdc>
 800c6ee:	4b92      	ldr	r3, [pc, #584]	; (800c938 <_dtoa_r+0x2e0>)
 800c6f0:	9301      	str	r3, [sp, #4]
 800c6f2:	3308      	adds	r3, #8
 800c6f4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c6f6:	6013      	str	r3, [r2, #0]
 800c6f8:	9801      	ldr	r0, [sp, #4]
 800c6fa:	b013      	add	sp, #76	; 0x4c
 800c6fc:	ecbd 8b04 	vpop	{d8-d9}
 800c700:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c704:	4b8b      	ldr	r3, [pc, #556]	; (800c934 <_dtoa_r+0x2dc>)
 800c706:	9301      	str	r3, [sp, #4]
 800c708:	3303      	adds	r3, #3
 800c70a:	e7f3      	b.n	800c6f4 <_dtoa_r+0x9c>
 800c70c:	2200      	movs	r2, #0
 800c70e:	2300      	movs	r3, #0
 800c710:	4650      	mov	r0, sl
 800c712:	4659      	mov	r1, fp
 800c714:	f7f4 f9e0 	bl	8000ad8 <__aeabi_dcmpeq>
 800c718:	ec4b ab19 	vmov	d9, sl, fp
 800c71c:	4680      	mov	r8, r0
 800c71e:	b158      	cbz	r0, 800c738 <_dtoa_r+0xe0>
 800c720:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c722:	2301      	movs	r3, #1
 800c724:	6013      	str	r3, [r2, #0]
 800c726:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c728:	2b00      	cmp	r3, #0
 800c72a:	f000 856b 	beq.w	800d204 <_dtoa_r+0xbac>
 800c72e:	4883      	ldr	r0, [pc, #524]	; (800c93c <_dtoa_r+0x2e4>)
 800c730:	6018      	str	r0, [r3, #0]
 800c732:	1e43      	subs	r3, r0, #1
 800c734:	9301      	str	r3, [sp, #4]
 800c736:	e7df      	b.n	800c6f8 <_dtoa_r+0xa0>
 800c738:	ec4b ab10 	vmov	d0, sl, fp
 800c73c:	aa10      	add	r2, sp, #64	; 0x40
 800c73e:	a911      	add	r1, sp, #68	; 0x44
 800c740:	4620      	mov	r0, r4
 800c742:	f001 fd05 	bl	800e150 <__d2b>
 800c746:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800c74a:	ee08 0a10 	vmov	s16, r0
 800c74e:	2d00      	cmp	r5, #0
 800c750:	f000 8084 	beq.w	800c85c <_dtoa_r+0x204>
 800c754:	ee19 3a90 	vmov	r3, s19
 800c758:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c75c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800c760:	4656      	mov	r6, sl
 800c762:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800c766:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c76a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800c76e:	4b74      	ldr	r3, [pc, #464]	; (800c940 <_dtoa_r+0x2e8>)
 800c770:	2200      	movs	r2, #0
 800c772:	4630      	mov	r0, r6
 800c774:	4639      	mov	r1, r7
 800c776:	f7f3 fd8f 	bl	8000298 <__aeabi_dsub>
 800c77a:	a365      	add	r3, pc, #404	; (adr r3, 800c910 <_dtoa_r+0x2b8>)
 800c77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c780:	f7f3 ff42 	bl	8000608 <__aeabi_dmul>
 800c784:	a364      	add	r3, pc, #400	; (adr r3, 800c918 <_dtoa_r+0x2c0>)
 800c786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c78a:	f7f3 fd87 	bl	800029c <__adddf3>
 800c78e:	4606      	mov	r6, r0
 800c790:	4628      	mov	r0, r5
 800c792:	460f      	mov	r7, r1
 800c794:	f7f3 fece 	bl	8000534 <__aeabi_i2d>
 800c798:	a361      	add	r3, pc, #388	; (adr r3, 800c920 <_dtoa_r+0x2c8>)
 800c79a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c79e:	f7f3 ff33 	bl	8000608 <__aeabi_dmul>
 800c7a2:	4602      	mov	r2, r0
 800c7a4:	460b      	mov	r3, r1
 800c7a6:	4630      	mov	r0, r6
 800c7a8:	4639      	mov	r1, r7
 800c7aa:	f7f3 fd77 	bl	800029c <__adddf3>
 800c7ae:	4606      	mov	r6, r0
 800c7b0:	460f      	mov	r7, r1
 800c7b2:	f7f4 f9d9 	bl	8000b68 <__aeabi_d2iz>
 800c7b6:	2200      	movs	r2, #0
 800c7b8:	9000      	str	r0, [sp, #0]
 800c7ba:	2300      	movs	r3, #0
 800c7bc:	4630      	mov	r0, r6
 800c7be:	4639      	mov	r1, r7
 800c7c0:	f7f4 f994 	bl	8000aec <__aeabi_dcmplt>
 800c7c4:	b150      	cbz	r0, 800c7dc <_dtoa_r+0x184>
 800c7c6:	9800      	ldr	r0, [sp, #0]
 800c7c8:	f7f3 feb4 	bl	8000534 <__aeabi_i2d>
 800c7cc:	4632      	mov	r2, r6
 800c7ce:	463b      	mov	r3, r7
 800c7d0:	f7f4 f982 	bl	8000ad8 <__aeabi_dcmpeq>
 800c7d4:	b910      	cbnz	r0, 800c7dc <_dtoa_r+0x184>
 800c7d6:	9b00      	ldr	r3, [sp, #0]
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	9300      	str	r3, [sp, #0]
 800c7dc:	9b00      	ldr	r3, [sp, #0]
 800c7de:	2b16      	cmp	r3, #22
 800c7e0:	d85a      	bhi.n	800c898 <_dtoa_r+0x240>
 800c7e2:	9a00      	ldr	r2, [sp, #0]
 800c7e4:	4b57      	ldr	r3, [pc, #348]	; (800c944 <_dtoa_r+0x2ec>)
 800c7e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c7ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7ee:	ec51 0b19 	vmov	r0, r1, d9
 800c7f2:	f7f4 f97b 	bl	8000aec <__aeabi_dcmplt>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d050      	beq.n	800c89c <_dtoa_r+0x244>
 800c7fa:	9b00      	ldr	r3, [sp, #0]
 800c7fc:	3b01      	subs	r3, #1
 800c7fe:	9300      	str	r3, [sp, #0]
 800c800:	2300      	movs	r3, #0
 800c802:	930b      	str	r3, [sp, #44]	; 0x2c
 800c804:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c806:	1b5d      	subs	r5, r3, r5
 800c808:	1e6b      	subs	r3, r5, #1
 800c80a:	9305      	str	r3, [sp, #20]
 800c80c:	bf45      	ittet	mi
 800c80e:	f1c5 0301 	rsbmi	r3, r5, #1
 800c812:	9304      	strmi	r3, [sp, #16]
 800c814:	2300      	movpl	r3, #0
 800c816:	2300      	movmi	r3, #0
 800c818:	bf4c      	ite	mi
 800c81a:	9305      	strmi	r3, [sp, #20]
 800c81c:	9304      	strpl	r3, [sp, #16]
 800c81e:	9b00      	ldr	r3, [sp, #0]
 800c820:	2b00      	cmp	r3, #0
 800c822:	db3d      	blt.n	800c8a0 <_dtoa_r+0x248>
 800c824:	9b05      	ldr	r3, [sp, #20]
 800c826:	9a00      	ldr	r2, [sp, #0]
 800c828:	920a      	str	r2, [sp, #40]	; 0x28
 800c82a:	4413      	add	r3, r2
 800c82c:	9305      	str	r3, [sp, #20]
 800c82e:	2300      	movs	r3, #0
 800c830:	9307      	str	r3, [sp, #28]
 800c832:	9b06      	ldr	r3, [sp, #24]
 800c834:	2b09      	cmp	r3, #9
 800c836:	f200 8089 	bhi.w	800c94c <_dtoa_r+0x2f4>
 800c83a:	2b05      	cmp	r3, #5
 800c83c:	bfc4      	itt	gt
 800c83e:	3b04      	subgt	r3, #4
 800c840:	9306      	strgt	r3, [sp, #24]
 800c842:	9b06      	ldr	r3, [sp, #24]
 800c844:	f1a3 0302 	sub.w	r3, r3, #2
 800c848:	bfcc      	ite	gt
 800c84a:	2500      	movgt	r5, #0
 800c84c:	2501      	movle	r5, #1
 800c84e:	2b03      	cmp	r3, #3
 800c850:	f200 8087 	bhi.w	800c962 <_dtoa_r+0x30a>
 800c854:	e8df f003 	tbb	[pc, r3]
 800c858:	59383a2d 	.word	0x59383a2d
 800c85c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800c860:	441d      	add	r5, r3
 800c862:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800c866:	2b20      	cmp	r3, #32
 800c868:	bfc1      	itttt	gt
 800c86a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800c86e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800c872:	fa0b f303 	lslgt.w	r3, fp, r3
 800c876:	fa26 f000 	lsrgt.w	r0, r6, r0
 800c87a:	bfda      	itte	le
 800c87c:	f1c3 0320 	rsble	r3, r3, #32
 800c880:	fa06 f003 	lslle.w	r0, r6, r3
 800c884:	4318      	orrgt	r0, r3
 800c886:	f7f3 fe45 	bl	8000514 <__aeabi_ui2d>
 800c88a:	2301      	movs	r3, #1
 800c88c:	4606      	mov	r6, r0
 800c88e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800c892:	3d01      	subs	r5, #1
 800c894:	930e      	str	r3, [sp, #56]	; 0x38
 800c896:	e76a      	b.n	800c76e <_dtoa_r+0x116>
 800c898:	2301      	movs	r3, #1
 800c89a:	e7b2      	b.n	800c802 <_dtoa_r+0x1aa>
 800c89c:	900b      	str	r0, [sp, #44]	; 0x2c
 800c89e:	e7b1      	b.n	800c804 <_dtoa_r+0x1ac>
 800c8a0:	9b04      	ldr	r3, [sp, #16]
 800c8a2:	9a00      	ldr	r2, [sp, #0]
 800c8a4:	1a9b      	subs	r3, r3, r2
 800c8a6:	9304      	str	r3, [sp, #16]
 800c8a8:	4253      	negs	r3, r2
 800c8aa:	9307      	str	r3, [sp, #28]
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	930a      	str	r3, [sp, #40]	; 0x28
 800c8b0:	e7bf      	b.n	800c832 <_dtoa_r+0x1da>
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	9308      	str	r3, [sp, #32]
 800c8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	dc55      	bgt.n	800c968 <_dtoa_r+0x310>
 800c8bc:	2301      	movs	r3, #1
 800c8be:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c8c2:	461a      	mov	r2, r3
 800c8c4:	9209      	str	r2, [sp, #36]	; 0x24
 800c8c6:	e00c      	b.n	800c8e2 <_dtoa_r+0x28a>
 800c8c8:	2301      	movs	r3, #1
 800c8ca:	e7f3      	b.n	800c8b4 <_dtoa_r+0x25c>
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8d0:	9308      	str	r3, [sp, #32]
 800c8d2:	9b00      	ldr	r3, [sp, #0]
 800c8d4:	4413      	add	r3, r2
 800c8d6:	9302      	str	r3, [sp, #8]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	2b01      	cmp	r3, #1
 800c8dc:	9303      	str	r3, [sp, #12]
 800c8de:	bfb8      	it	lt
 800c8e0:	2301      	movlt	r3, #1
 800c8e2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800c8e4:	2200      	movs	r2, #0
 800c8e6:	6042      	str	r2, [r0, #4]
 800c8e8:	2204      	movs	r2, #4
 800c8ea:	f102 0614 	add.w	r6, r2, #20
 800c8ee:	429e      	cmp	r6, r3
 800c8f0:	6841      	ldr	r1, [r0, #4]
 800c8f2:	d93d      	bls.n	800c970 <_dtoa_r+0x318>
 800c8f4:	4620      	mov	r0, r4
 800c8f6:	f001 f83d 	bl	800d974 <_Balloc>
 800c8fa:	9001      	str	r0, [sp, #4]
 800c8fc:	2800      	cmp	r0, #0
 800c8fe:	d13b      	bne.n	800c978 <_dtoa_r+0x320>
 800c900:	4b11      	ldr	r3, [pc, #68]	; (800c948 <_dtoa_r+0x2f0>)
 800c902:	4602      	mov	r2, r0
 800c904:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c908:	e6c0      	b.n	800c68c <_dtoa_r+0x34>
 800c90a:	2301      	movs	r3, #1
 800c90c:	e7df      	b.n	800c8ce <_dtoa_r+0x276>
 800c90e:	bf00      	nop
 800c910:	636f4361 	.word	0x636f4361
 800c914:	3fd287a7 	.word	0x3fd287a7
 800c918:	8b60c8b3 	.word	0x8b60c8b3
 800c91c:	3fc68a28 	.word	0x3fc68a28
 800c920:	509f79fb 	.word	0x509f79fb
 800c924:	3fd34413 	.word	0x3fd34413
 800c928:	0800f628 	.word	0x0800f628
 800c92c:	0800f6e5 	.word	0x0800f6e5
 800c930:	7ff00000 	.word	0x7ff00000
 800c934:	0800f6e1 	.word	0x0800f6e1
 800c938:	0800f6d8 	.word	0x0800f6d8
 800c93c:	0800f5b5 	.word	0x0800f5b5
 800c940:	3ff80000 	.word	0x3ff80000
 800c944:	0800f850 	.word	0x0800f850
 800c948:	0800f740 	.word	0x0800f740
 800c94c:	2501      	movs	r5, #1
 800c94e:	2300      	movs	r3, #0
 800c950:	9306      	str	r3, [sp, #24]
 800c952:	9508      	str	r5, [sp, #32]
 800c954:	f04f 33ff 	mov.w	r3, #4294967295
 800c958:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c95c:	2200      	movs	r2, #0
 800c95e:	2312      	movs	r3, #18
 800c960:	e7b0      	b.n	800c8c4 <_dtoa_r+0x26c>
 800c962:	2301      	movs	r3, #1
 800c964:	9308      	str	r3, [sp, #32]
 800c966:	e7f5      	b.n	800c954 <_dtoa_r+0x2fc>
 800c968:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c96a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800c96e:	e7b8      	b.n	800c8e2 <_dtoa_r+0x28a>
 800c970:	3101      	adds	r1, #1
 800c972:	6041      	str	r1, [r0, #4]
 800c974:	0052      	lsls	r2, r2, #1
 800c976:	e7b8      	b.n	800c8ea <_dtoa_r+0x292>
 800c978:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c97a:	9a01      	ldr	r2, [sp, #4]
 800c97c:	601a      	str	r2, [r3, #0]
 800c97e:	9b03      	ldr	r3, [sp, #12]
 800c980:	2b0e      	cmp	r3, #14
 800c982:	f200 809d 	bhi.w	800cac0 <_dtoa_r+0x468>
 800c986:	2d00      	cmp	r5, #0
 800c988:	f000 809a 	beq.w	800cac0 <_dtoa_r+0x468>
 800c98c:	9b00      	ldr	r3, [sp, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	dd32      	ble.n	800c9f8 <_dtoa_r+0x3a0>
 800c992:	4ab7      	ldr	r2, [pc, #732]	; (800cc70 <_dtoa_r+0x618>)
 800c994:	f003 030f 	and.w	r3, r3, #15
 800c998:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c99c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c9a0:	9b00      	ldr	r3, [sp, #0]
 800c9a2:	05d8      	lsls	r0, r3, #23
 800c9a4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800c9a8:	d516      	bpl.n	800c9d8 <_dtoa_r+0x380>
 800c9aa:	4bb2      	ldr	r3, [pc, #712]	; (800cc74 <_dtoa_r+0x61c>)
 800c9ac:	ec51 0b19 	vmov	r0, r1, d9
 800c9b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c9b4:	f7f3 ff52 	bl	800085c <__aeabi_ddiv>
 800c9b8:	f007 070f 	and.w	r7, r7, #15
 800c9bc:	4682      	mov	sl, r0
 800c9be:	468b      	mov	fp, r1
 800c9c0:	2503      	movs	r5, #3
 800c9c2:	4eac      	ldr	r6, [pc, #688]	; (800cc74 <_dtoa_r+0x61c>)
 800c9c4:	b957      	cbnz	r7, 800c9dc <_dtoa_r+0x384>
 800c9c6:	4642      	mov	r2, r8
 800c9c8:	464b      	mov	r3, r9
 800c9ca:	4650      	mov	r0, sl
 800c9cc:	4659      	mov	r1, fp
 800c9ce:	f7f3 ff45 	bl	800085c <__aeabi_ddiv>
 800c9d2:	4682      	mov	sl, r0
 800c9d4:	468b      	mov	fp, r1
 800c9d6:	e028      	b.n	800ca2a <_dtoa_r+0x3d2>
 800c9d8:	2502      	movs	r5, #2
 800c9da:	e7f2      	b.n	800c9c2 <_dtoa_r+0x36a>
 800c9dc:	07f9      	lsls	r1, r7, #31
 800c9de:	d508      	bpl.n	800c9f2 <_dtoa_r+0x39a>
 800c9e0:	4640      	mov	r0, r8
 800c9e2:	4649      	mov	r1, r9
 800c9e4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800c9e8:	f7f3 fe0e 	bl	8000608 <__aeabi_dmul>
 800c9ec:	3501      	adds	r5, #1
 800c9ee:	4680      	mov	r8, r0
 800c9f0:	4689      	mov	r9, r1
 800c9f2:	107f      	asrs	r7, r7, #1
 800c9f4:	3608      	adds	r6, #8
 800c9f6:	e7e5      	b.n	800c9c4 <_dtoa_r+0x36c>
 800c9f8:	f000 809b 	beq.w	800cb32 <_dtoa_r+0x4da>
 800c9fc:	9b00      	ldr	r3, [sp, #0]
 800c9fe:	4f9d      	ldr	r7, [pc, #628]	; (800cc74 <_dtoa_r+0x61c>)
 800ca00:	425e      	negs	r6, r3
 800ca02:	4b9b      	ldr	r3, [pc, #620]	; (800cc70 <_dtoa_r+0x618>)
 800ca04:	f006 020f 	and.w	r2, r6, #15
 800ca08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ca0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca10:	ec51 0b19 	vmov	r0, r1, d9
 800ca14:	f7f3 fdf8 	bl	8000608 <__aeabi_dmul>
 800ca18:	1136      	asrs	r6, r6, #4
 800ca1a:	4682      	mov	sl, r0
 800ca1c:	468b      	mov	fp, r1
 800ca1e:	2300      	movs	r3, #0
 800ca20:	2502      	movs	r5, #2
 800ca22:	2e00      	cmp	r6, #0
 800ca24:	d17a      	bne.n	800cb1c <_dtoa_r+0x4c4>
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d1d3      	bne.n	800c9d2 <_dtoa_r+0x37a>
 800ca2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	f000 8082 	beq.w	800cb36 <_dtoa_r+0x4de>
 800ca32:	4b91      	ldr	r3, [pc, #580]	; (800cc78 <_dtoa_r+0x620>)
 800ca34:	2200      	movs	r2, #0
 800ca36:	4650      	mov	r0, sl
 800ca38:	4659      	mov	r1, fp
 800ca3a:	f7f4 f857 	bl	8000aec <__aeabi_dcmplt>
 800ca3e:	2800      	cmp	r0, #0
 800ca40:	d079      	beq.n	800cb36 <_dtoa_r+0x4de>
 800ca42:	9b03      	ldr	r3, [sp, #12]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d076      	beq.n	800cb36 <_dtoa_r+0x4de>
 800ca48:	9b02      	ldr	r3, [sp, #8]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	dd36      	ble.n	800cabc <_dtoa_r+0x464>
 800ca4e:	9b00      	ldr	r3, [sp, #0]
 800ca50:	4650      	mov	r0, sl
 800ca52:	4659      	mov	r1, fp
 800ca54:	1e5f      	subs	r7, r3, #1
 800ca56:	2200      	movs	r2, #0
 800ca58:	4b88      	ldr	r3, [pc, #544]	; (800cc7c <_dtoa_r+0x624>)
 800ca5a:	f7f3 fdd5 	bl	8000608 <__aeabi_dmul>
 800ca5e:	9e02      	ldr	r6, [sp, #8]
 800ca60:	4682      	mov	sl, r0
 800ca62:	468b      	mov	fp, r1
 800ca64:	3501      	adds	r5, #1
 800ca66:	4628      	mov	r0, r5
 800ca68:	f7f3 fd64 	bl	8000534 <__aeabi_i2d>
 800ca6c:	4652      	mov	r2, sl
 800ca6e:	465b      	mov	r3, fp
 800ca70:	f7f3 fdca 	bl	8000608 <__aeabi_dmul>
 800ca74:	4b82      	ldr	r3, [pc, #520]	; (800cc80 <_dtoa_r+0x628>)
 800ca76:	2200      	movs	r2, #0
 800ca78:	f7f3 fc10 	bl	800029c <__adddf3>
 800ca7c:	46d0      	mov	r8, sl
 800ca7e:	46d9      	mov	r9, fp
 800ca80:	4682      	mov	sl, r0
 800ca82:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ca86:	2e00      	cmp	r6, #0
 800ca88:	d158      	bne.n	800cb3c <_dtoa_r+0x4e4>
 800ca8a:	4b7e      	ldr	r3, [pc, #504]	; (800cc84 <_dtoa_r+0x62c>)
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	4640      	mov	r0, r8
 800ca90:	4649      	mov	r1, r9
 800ca92:	f7f3 fc01 	bl	8000298 <__aeabi_dsub>
 800ca96:	4652      	mov	r2, sl
 800ca98:	465b      	mov	r3, fp
 800ca9a:	4680      	mov	r8, r0
 800ca9c:	4689      	mov	r9, r1
 800ca9e:	f7f4 f843 	bl	8000b28 <__aeabi_dcmpgt>
 800caa2:	2800      	cmp	r0, #0
 800caa4:	f040 8295 	bne.w	800cfd2 <_dtoa_r+0x97a>
 800caa8:	4652      	mov	r2, sl
 800caaa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800caae:	4640      	mov	r0, r8
 800cab0:	4649      	mov	r1, r9
 800cab2:	f7f4 f81b 	bl	8000aec <__aeabi_dcmplt>
 800cab6:	2800      	cmp	r0, #0
 800cab8:	f040 8289 	bne.w	800cfce <_dtoa_r+0x976>
 800cabc:	ec5b ab19 	vmov	sl, fp, d9
 800cac0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	f2c0 8148 	blt.w	800cd58 <_dtoa_r+0x700>
 800cac8:	9a00      	ldr	r2, [sp, #0]
 800caca:	2a0e      	cmp	r2, #14
 800cacc:	f300 8144 	bgt.w	800cd58 <_dtoa_r+0x700>
 800cad0:	4b67      	ldr	r3, [pc, #412]	; (800cc70 <_dtoa_r+0x618>)
 800cad2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cad6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cadc:	2b00      	cmp	r3, #0
 800cade:	f280 80d5 	bge.w	800cc8c <_dtoa_r+0x634>
 800cae2:	9b03      	ldr	r3, [sp, #12]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	f300 80d1 	bgt.w	800cc8c <_dtoa_r+0x634>
 800caea:	f040 826f 	bne.w	800cfcc <_dtoa_r+0x974>
 800caee:	4b65      	ldr	r3, [pc, #404]	; (800cc84 <_dtoa_r+0x62c>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	4640      	mov	r0, r8
 800caf4:	4649      	mov	r1, r9
 800caf6:	f7f3 fd87 	bl	8000608 <__aeabi_dmul>
 800cafa:	4652      	mov	r2, sl
 800cafc:	465b      	mov	r3, fp
 800cafe:	f7f4 f809 	bl	8000b14 <__aeabi_dcmpge>
 800cb02:	9e03      	ldr	r6, [sp, #12]
 800cb04:	4637      	mov	r7, r6
 800cb06:	2800      	cmp	r0, #0
 800cb08:	f040 8245 	bne.w	800cf96 <_dtoa_r+0x93e>
 800cb0c:	9d01      	ldr	r5, [sp, #4]
 800cb0e:	2331      	movs	r3, #49	; 0x31
 800cb10:	f805 3b01 	strb.w	r3, [r5], #1
 800cb14:	9b00      	ldr	r3, [sp, #0]
 800cb16:	3301      	adds	r3, #1
 800cb18:	9300      	str	r3, [sp, #0]
 800cb1a:	e240      	b.n	800cf9e <_dtoa_r+0x946>
 800cb1c:	07f2      	lsls	r2, r6, #31
 800cb1e:	d505      	bpl.n	800cb2c <_dtoa_r+0x4d4>
 800cb20:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb24:	f7f3 fd70 	bl	8000608 <__aeabi_dmul>
 800cb28:	3501      	adds	r5, #1
 800cb2a:	2301      	movs	r3, #1
 800cb2c:	1076      	asrs	r6, r6, #1
 800cb2e:	3708      	adds	r7, #8
 800cb30:	e777      	b.n	800ca22 <_dtoa_r+0x3ca>
 800cb32:	2502      	movs	r5, #2
 800cb34:	e779      	b.n	800ca2a <_dtoa_r+0x3d2>
 800cb36:	9f00      	ldr	r7, [sp, #0]
 800cb38:	9e03      	ldr	r6, [sp, #12]
 800cb3a:	e794      	b.n	800ca66 <_dtoa_r+0x40e>
 800cb3c:	9901      	ldr	r1, [sp, #4]
 800cb3e:	4b4c      	ldr	r3, [pc, #304]	; (800cc70 <_dtoa_r+0x618>)
 800cb40:	4431      	add	r1, r6
 800cb42:	910d      	str	r1, [sp, #52]	; 0x34
 800cb44:	9908      	ldr	r1, [sp, #32]
 800cb46:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cb4a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cb4e:	2900      	cmp	r1, #0
 800cb50:	d043      	beq.n	800cbda <_dtoa_r+0x582>
 800cb52:	494d      	ldr	r1, [pc, #308]	; (800cc88 <_dtoa_r+0x630>)
 800cb54:	2000      	movs	r0, #0
 800cb56:	f7f3 fe81 	bl	800085c <__aeabi_ddiv>
 800cb5a:	4652      	mov	r2, sl
 800cb5c:	465b      	mov	r3, fp
 800cb5e:	f7f3 fb9b 	bl	8000298 <__aeabi_dsub>
 800cb62:	9d01      	ldr	r5, [sp, #4]
 800cb64:	4682      	mov	sl, r0
 800cb66:	468b      	mov	fp, r1
 800cb68:	4649      	mov	r1, r9
 800cb6a:	4640      	mov	r0, r8
 800cb6c:	f7f3 fffc 	bl	8000b68 <__aeabi_d2iz>
 800cb70:	4606      	mov	r6, r0
 800cb72:	f7f3 fcdf 	bl	8000534 <__aeabi_i2d>
 800cb76:	4602      	mov	r2, r0
 800cb78:	460b      	mov	r3, r1
 800cb7a:	4640      	mov	r0, r8
 800cb7c:	4649      	mov	r1, r9
 800cb7e:	f7f3 fb8b 	bl	8000298 <__aeabi_dsub>
 800cb82:	3630      	adds	r6, #48	; 0x30
 800cb84:	f805 6b01 	strb.w	r6, [r5], #1
 800cb88:	4652      	mov	r2, sl
 800cb8a:	465b      	mov	r3, fp
 800cb8c:	4680      	mov	r8, r0
 800cb8e:	4689      	mov	r9, r1
 800cb90:	f7f3 ffac 	bl	8000aec <__aeabi_dcmplt>
 800cb94:	2800      	cmp	r0, #0
 800cb96:	d163      	bne.n	800cc60 <_dtoa_r+0x608>
 800cb98:	4642      	mov	r2, r8
 800cb9a:	464b      	mov	r3, r9
 800cb9c:	4936      	ldr	r1, [pc, #216]	; (800cc78 <_dtoa_r+0x620>)
 800cb9e:	2000      	movs	r0, #0
 800cba0:	f7f3 fb7a 	bl	8000298 <__aeabi_dsub>
 800cba4:	4652      	mov	r2, sl
 800cba6:	465b      	mov	r3, fp
 800cba8:	f7f3 ffa0 	bl	8000aec <__aeabi_dcmplt>
 800cbac:	2800      	cmp	r0, #0
 800cbae:	f040 80b5 	bne.w	800cd1c <_dtoa_r+0x6c4>
 800cbb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbb4:	429d      	cmp	r5, r3
 800cbb6:	d081      	beq.n	800cabc <_dtoa_r+0x464>
 800cbb8:	4b30      	ldr	r3, [pc, #192]	; (800cc7c <_dtoa_r+0x624>)
 800cbba:	2200      	movs	r2, #0
 800cbbc:	4650      	mov	r0, sl
 800cbbe:	4659      	mov	r1, fp
 800cbc0:	f7f3 fd22 	bl	8000608 <__aeabi_dmul>
 800cbc4:	4b2d      	ldr	r3, [pc, #180]	; (800cc7c <_dtoa_r+0x624>)
 800cbc6:	4682      	mov	sl, r0
 800cbc8:	468b      	mov	fp, r1
 800cbca:	4640      	mov	r0, r8
 800cbcc:	4649      	mov	r1, r9
 800cbce:	2200      	movs	r2, #0
 800cbd0:	f7f3 fd1a 	bl	8000608 <__aeabi_dmul>
 800cbd4:	4680      	mov	r8, r0
 800cbd6:	4689      	mov	r9, r1
 800cbd8:	e7c6      	b.n	800cb68 <_dtoa_r+0x510>
 800cbda:	4650      	mov	r0, sl
 800cbdc:	4659      	mov	r1, fp
 800cbde:	f7f3 fd13 	bl	8000608 <__aeabi_dmul>
 800cbe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cbe4:	9d01      	ldr	r5, [sp, #4]
 800cbe6:	930f      	str	r3, [sp, #60]	; 0x3c
 800cbe8:	4682      	mov	sl, r0
 800cbea:	468b      	mov	fp, r1
 800cbec:	4649      	mov	r1, r9
 800cbee:	4640      	mov	r0, r8
 800cbf0:	f7f3 ffba 	bl	8000b68 <__aeabi_d2iz>
 800cbf4:	4606      	mov	r6, r0
 800cbf6:	f7f3 fc9d 	bl	8000534 <__aeabi_i2d>
 800cbfa:	3630      	adds	r6, #48	; 0x30
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	460b      	mov	r3, r1
 800cc00:	4640      	mov	r0, r8
 800cc02:	4649      	mov	r1, r9
 800cc04:	f7f3 fb48 	bl	8000298 <__aeabi_dsub>
 800cc08:	f805 6b01 	strb.w	r6, [r5], #1
 800cc0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cc0e:	429d      	cmp	r5, r3
 800cc10:	4680      	mov	r8, r0
 800cc12:	4689      	mov	r9, r1
 800cc14:	f04f 0200 	mov.w	r2, #0
 800cc18:	d124      	bne.n	800cc64 <_dtoa_r+0x60c>
 800cc1a:	4b1b      	ldr	r3, [pc, #108]	; (800cc88 <_dtoa_r+0x630>)
 800cc1c:	4650      	mov	r0, sl
 800cc1e:	4659      	mov	r1, fp
 800cc20:	f7f3 fb3c 	bl	800029c <__adddf3>
 800cc24:	4602      	mov	r2, r0
 800cc26:	460b      	mov	r3, r1
 800cc28:	4640      	mov	r0, r8
 800cc2a:	4649      	mov	r1, r9
 800cc2c:	f7f3 ff7c 	bl	8000b28 <__aeabi_dcmpgt>
 800cc30:	2800      	cmp	r0, #0
 800cc32:	d173      	bne.n	800cd1c <_dtoa_r+0x6c4>
 800cc34:	4652      	mov	r2, sl
 800cc36:	465b      	mov	r3, fp
 800cc38:	4913      	ldr	r1, [pc, #76]	; (800cc88 <_dtoa_r+0x630>)
 800cc3a:	2000      	movs	r0, #0
 800cc3c:	f7f3 fb2c 	bl	8000298 <__aeabi_dsub>
 800cc40:	4602      	mov	r2, r0
 800cc42:	460b      	mov	r3, r1
 800cc44:	4640      	mov	r0, r8
 800cc46:	4649      	mov	r1, r9
 800cc48:	f7f3 ff50 	bl	8000aec <__aeabi_dcmplt>
 800cc4c:	2800      	cmp	r0, #0
 800cc4e:	f43f af35 	beq.w	800cabc <_dtoa_r+0x464>
 800cc52:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cc54:	1e6b      	subs	r3, r5, #1
 800cc56:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc58:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cc5c:	2b30      	cmp	r3, #48	; 0x30
 800cc5e:	d0f8      	beq.n	800cc52 <_dtoa_r+0x5fa>
 800cc60:	9700      	str	r7, [sp, #0]
 800cc62:	e049      	b.n	800ccf8 <_dtoa_r+0x6a0>
 800cc64:	4b05      	ldr	r3, [pc, #20]	; (800cc7c <_dtoa_r+0x624>)
 800cc66:	f7f3 fccf 	bl	8000608 <__aeabi_dmul>
 800cc6a:	4680      	mov	r8, r0
 800cc6c:	4689      	mov	r9, r1
 800cc6e:	e7bd      	b.n	800cbec <_dtoa_r+0x594>
 800cc70:	0800f850 	.word	0x0800f850
 800cc74:	0800f828 	.word	0x0800f828
 800cc78:	3ff00000 	.word	0x3ff00000
 800cc7c:	40240000 	.word	0x40240000
 800cc80:	401c0000 	.word	0x401c0000
 800cc84:	40140000 	.word	0x40140000
 800cc88:	3fe00000 	.word	0x3fe00000
 800cc8c:	9d01      	ldr	r5, [sp, #4]
 800cc8e:	4656      	mov	r6, sl
 800cc90:	465f      	mov	r7, fp
 800cc92:	4642      	mov	r2, r8
 800cc94:	464b      	mov	r3, r9
 800cc96:	4630      	mov	r0, r6
 800cc98:	4639      	mov	r1, r7
 800cc9a:	f7f3 fddf 	bl	800085c <__aeabi_ddiv>
 800cc9e:	f7f3 ff63 	bl	8000b68 <__aeabi_d2iz>
 800cca2:	4682      	mov	sl, r0
 800cca4:	f7f3 fc46 	bl	8000534 <__aeabi_i2d>
 800cca8:	4642      	mov	r2, r8
 800ccaa:	464b      	mov	r3, r9
 800ccac:	f7f3 fcac 	bl	8000608 <__aeabi_dmul>
 800ccb0:	4602      	mov	r2, r0
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	4630      	mov	r0, r6
 800ccb6:	4639      	mov	r1, r7
 800ccb8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ccbc:	f7f3 faec 	bl	8000298 <__aeabi_dsub>
 800ccc0:	f805 6b01 	strb.w	r6, [r5], #1
 800ccc4:	9e01      	ldr	r6, [sp, #4]
 800ccc6:	9f03      	ldr	r7, [sp, #12]
 800ccc8:	1bae      	subs	r6, r5, r6
 800ccca:	42b7      	cmp	r7, r6
 800cccc:	4602      	mov	r2, r0
 800ccce:	460b      	mov	r3, r1
 800ccd0:	d135      	bne.n	800cd3e <_dtoa_r+0x6e6>
 800ccd2:	f7f3 fae3 	bl	800029c <__adddf3>
 800ccd6:	4642      	mov	r2, r8
 800ccd8:	464b      	mov	r3, r9
 800ccda:	4606      	mov	r6, r0
 800ccdc:	460f      	mov	r7, r1
 800ccde:	f7f3 ff23 	bl	8000b28 <__aeabi_dcmpgt>
 800cce2:	b9d0      	cbnz	r0, 800cd1a <_dtoa_r+0x6c2>
 800cce4:	4642      	mov	r2, r8
 800cce6:	464b      	mov	r3, r9
 800cce8:	4630      	mov	r0, r6
 800ccea:	4639      	mov	r1, r7
 800ccec:	f7f3 fef4 	bl	8000ad8 <__aeabi_dcmpeq>
 800ccf0:	b110      	cbz	r0, 800ccf8 <_dtoa_r+0x6a0>
 800ccf2:	f01a 0f01 	tst.w	sl, #1
 800ccf6:	d110      	bne.n	800cd1a <_dtoa_r+0x6c2>
 800ccf8:	4620      	mov	r0, r4
 800ccfa:	ee18 1a10 	vmov	r1, s16
 800ccfe:	f000 fe79 	bl	800d9f4 <_Bfree>
 800cd02:	2300      	movs	r3, #0
 800cd04:	9800      	ldr	r0, [sp, #0]
 800cd06:	702b      	strb	r3, [r5, #0]
 800cd08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cd0a:	3001      	adds	r0, #1
 800cd0c:	6018      	str	r0, [r3, #0]
 800cd0e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	f43f acf1 	beq.w	800c6f8 <_dtoa_r+0xa0>
 800cd16:	601d      	str	r5, [r3, #0]
 800cd18:	e4ee      	b.n	800c6f8 <_dtoa_r+0xa0>
 800cd1a:	9f00      	ldr	r7, [sp, #0]
 800cd1c:	462b      	mov	r3, r5
 800cd1e:	461d      	mov	r5, r3
 800cd20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800cd24:	2a39      	cmp	r2, #57	; 0x39
 800cd26:	d106      	bne.n	800cd36 <_dtoa_r+0x6de>
 800cd28:	9a01      	ldr	r2, [sp, #4]
 800cd2a:	429a      	cmp	r2, r3
 800cd2c:	d1f7      	bne.n	800cd1e <_dtoa_r+0x6c6>
 800cd2e:	9901      	ldr	r1, [sp, #4]
 800cd30:	2230      	movs	r2, #48	; 0x30
 800cd32:	3701      	adds	r7, #1
 800cd34:	700a      	strb	r2, [r1, #0]
 800cd36:	781a      	ldrb	r2, [r3, #0]
 800cd38:	3201      	adds	r2, #1
 800cd3a:	701a      	strb	r2, [r3, #0]
 800cd3c:	e790      	b.n	800cc60 <_dtoa_r+0x608>
 800cd3e:	4ba6      	ldr	r3, [pc, #664]	; (800cfd8 <_dtoa_r+0x980>)
 800cd40:	2200      	movs	r2, #0
 800cd42:	f7f3 fc61 	bl	8000608 <__aeabi_dmul>
 800cd46:	2200      	movs	r2, #0
 800cd48:	2300      	movs	r3, #0
 800cd4a:	4606      	mov	r6, r0
 800cd4c:	460f      	mov	r7, r1
 800cd4e:	f7f3 fec3 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd52:	2800      	cmp	r0, #0
 800cd54:	d09d      	beq.n	800cc92 <_dtoa_r+0x63a>
 800cd56:	e7cf      	b.n	800ccf8 <_dtoa_r+0x6a0>
 800cd58:	9a08      	ldr	r2, [sp, #32]
 800cd5a:	2a00      	cmp	r2, #0
 800cd5c:	f000 80d7 	beq.w	800cf0e <_dtoa_r+0x8b6>
 800cd60:	9a06      	ldr	r2, [sp, #24]
 800cd62:	2a01      	cmp	r2, #1
 800cd64:	f300 80ba 	bgt.w	800cedc <_dtoa_r+0x884>
 800cd68:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd6a:	2a00      	cmp	r2, #0
 800cd6c:	f000 80b2 	beq.w	800ced4 <_dtoa_r+0x87c>
 800cd70:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800cd74:	9e07      	ldr	r6, [sp, #28]
 800cd76:	9d04      	ldr	r5, [sp, #16]
 800cd78:	9a04      	ldr	r2, [sp, #16]
 800cd7a:	441a      	add	r2, r3
 800cd7c:	9204      	str	r2, [sp, #16]
 800cd7e:	9a05      	ldr	r2, [sp, #20]
 800cd80:	2101      	movs	r1, #1
 800cd82:	441a      	add	r2, r3
 800cd84:	4620      	mov	r0, r4
 800cd86:	9205      	str	r2, [sp, #20]
 800cd88:	f000 ff36 	bl	800dbf8 <__i2b>
 800cd8c:	4607      	mov	r7, r0
 800cd8e:	2d00      	cmp	r5, #0
 800cd90:	dd0c      	ble.n	800cdac <_dtoa_r+0x754>
 800cd92:	9b05      	ldr	r3, [sp, #20]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	dd09      	ble.n	800cdac <_dtoa_r+0x754>
 800cd98:	42ab      	cmp	r3, r5
 800cd9a:	9a04      	ldr	r2, [sp, #16]
 800cd9c:	bfa8      	it	ge
 800cd9e:	462b      	movge	r3, r5
 800cda0:	1ad2      	subs	r2, r2, r3
 800cda2:	9204      	str	r2, [sp, #16]
 800cda4:	9a05      	ldr	r2, [sp, #20]
 800cda6:	1aed      	subs	r5, r5, r3
 800cda8:	1ad3      	subs	r3, r2, r3
 800cdaa:	9305      	str	r3, [sp, #20]
 800cdac:	9b07      	ldr	r3, [sp, #28]
 800cdae:	b31b      	cbz	r3, 800cdf8 <_dtoa_r+0x7a0>
 800cdb0:	9b08      	ldr	r3, [sp, #32]
 800cdb2:	2b00      	cmp	r3, #0
 800cdb4:	f000 80af 	beq.w	800cf16 <_dtoa_r+0x8be>
 800cdb8:	2e00      	cmp	r6, #0
 800cdba:	dd13      	ble.n	800cde4 <_dtoa_r+0x78c>
 800cdbc:	4639      	mov	r1, r7
 800cdbe:	4632      	mov	r2, r6
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	f000 ffd9 	bl	800dd78 <__pow5mult>
 800cdc6:	ee18 2a10 	vmov	r2, s16
 800cdca:	4601      	mov	r1, r0
 800cdcc:	4607      	mov	r7, r0
 800cdce:	4620      	mov	r0, r4
 800cdd0:	f000 ff28 	bl	800dc24 <__multiply>
 800cdd4:	ee18 1a10 	vmov	r1, s16
 800cdd8:	4680      	mov	r8, r0
 800cdda:	4620      	mov	r0, r4
 800cddc:	f000 fe0a 	bl	800d9f4 <_Bfree>
 800cde0:	ee08 8a10 	vmov	s16, r8
 800cde4:	9b07      	ldr	r3, [sp, #28]
 800cde6:	1b9a      	subs	r2, r3, r6
 800cde8:	d006      	beq.n	800cdf8 <_dtoa_r+0x7a0>
 800cdea:	ee18 1a10 	vmov	r1, s16
 800cdee:	4620      	mov	r0, r4
 800cdf0:	f000 ffc2 	bl	800dd78 <__pow5mult>
 800cdf4:	ee08 0a10 	vmov	s16, r0
 800cdf8:	2101      	movs	r1, #1
 800cdfa:	4620      	mov	r0, r4
 800cdfc:	f000 fefc 	bl	800dbf8 <__i2b>
 800ce00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	4606      	mov	r6, r0
 800ce06:	f340 8088 	ble.w	800cf1a <_dtoa_r+0x8c2>
 800ce0a:	461a      	mov	r2, r3
 800ce0c:	4601      	mov	r1, r0
 800ce0e:	4620      	mov	r0, r4
 800ce10:	f000 ffb2 	bl	800dd78 <__pow5mult>
 800ce14:	9b06      	ldr	r3, [sp, #24]
 800ce16:	2b01      	cmp	r3, #1
 800ce18:	4606      	mov	r6, r0
 800ce1a:	f340 8081 	ble.w	800cf20 <_dtoa_r+0x8c8>
 800ce1e:	f04f 0800 	mov.w	r8, #0
 800ce22:	6933      	ldr	r3, [r6, #16]
 800ce24:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ce28:	6918      	ldr	r0, [r3, #16]
 800ce2a:	f000 fe95 	bl	800db58 <__hi0bits>
 800ce2e:	f1c0 0020 	rsb	r0, r0, #32
 800ce32:	9b05      	ldr	r3, [sp, #20]
 800ce34:	4418      	add	r0, r3
 800ce36:	f010 001f 	ands.w	r0, r0, #31
 800ce3a:	f000 8092 	beq.w	800cf62 <_dtoa_r+0x90a>
 800ce3e:	f1c0 0320 	rsb	r3, r0, #32
 800ce42:	2b04      	cmp	r3, #4
 800ce44:	f340 808a 	ble.w	800cf5c <_dtoa_r+0x904>
 800ce48:	f1c0 001c 	rsb	r0, r0, #28
 800ce4c:	9b04      	ldr	r3, [sp, #16]
 800ce4e:	4403      	add	r3, r0
 800ce50:	9304      	str	r3, [sp, #16]
 800ce52:	9b05      	ldr	r3, [sp, #20]
 800ce54:	4403      	add	r3, r0
 800ce56:	4405      	add	r5, r0
 800ce58:	9305      	str	r3, [sp, #20]
 800ce5a:	9b04      	ldr	r3, [sp, #16]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	dd07      	ble.n	800ce70 <_dtoa_r+0x818>
 800ce60:	ee18 1a10 	vmov	r1, s16
 800ce64:	461a      	mov	r2, r3
 800ce66:	4620      	mov	r0, r4
 800ce68:	f000 ffe0 	bl	800de2c <__lshift>
 800ce6c:	ee08 0a10 	vmov	s16, r0
 800ce70:	9b05      	ldr	r3, [sp, #20]
 800ce72:	2b00      	cmp	r3, #0
 800ce74:	dd05      	ble.n	800ce82 <_dtoa_r+0x82a>
 800ce76:	4631      	mov	r1, r6
 800ce78:	461a      	mov	r2, r3
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f000 ffd6 	bl	800de2c <__lshift>
 800ce80:	4606      	mov	r6, r0
 800ce82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d06e      	beq.n	800cf66 <_dtoa_r+0x90e>
 800ce88:	ee18 0a10 	vmov	r0, s16
 800ce8c:	4631      	mov	r1, r6
 800ce8e:	f001 f83d 	bl	800df0c <__mcmp>
 800ce92:	2800      	cmp	r0, #0
 800ce94:	da67      	bge.n	800cf66 <_dtoa_r+0x90e>
 800ce96:	9b00      	ldr	r3, [sp, #0]
 800ce98:	3b01      	subs	r3, #1
 800ce9a:	ee18 1a10 	vmov	r1, s16
 800ce9e:	9300      	str	r3, [sp, #0]
 800cea0:	220a      	movs	r2, #10
 800cea2:	2300      	movs	r3, #0
 800cea4:	4620      	mov	r0, r4
 800cea6:	f000 fdc7 	bl	800da38 <__multadd>
 800ceaa:	9b08      	ldr	r3, [sp, #32]
 800ceac:	ee08 0a10 	vmov	s16, r0
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f000 81b1 	beq.w	800d218 <_dtoa_r+0xbc0>
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	4639      	mov	r1, r7
 800ceba:	220a      	movs	r2, #10
 800cebc:	4620      	mov	r0, r4
 800cebe:	f000 fdbb 	bl	800da38 <__multadd>
 800cec2:	9b02      	ldr	r3, [sp, #8]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	4607      	mov	r7, r0
 800cec8:	f300 808e 	bgt.w	800cfe8 <_dtoa_r+0x990>
 800cecc:	9b06      	ldr	r3, [sp, #24]
 800cece:	2b02      	cmp	r3, #2
 800ced0:	dc51      	bgt.n	800cf76 <_dtoa_r+0x91e>
 800ced2:	e089      	b.n	800cfe8 <_dtoa_r+0x990>
 800ced4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ced6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ceda:	e74b      	b.n	800cd74 <_dtoa_r+0x71c>
 800cedc:	9b03      	ldr	r3, [sp, #12]
 800cede:	1e5e      	subs	r6, r3, #1
 800cee0:	9b07      	ldr	r3, [sp, #28]
 800cee2:	42b3      	cmp	r3, r6
 800cee4:	bfbf      	itttt	lt
 800cee6:	9b07      	ldrlt	r3, [sp, #28]
 800cee8:	9607      	strlt	r6, [sp, #28]
 800ceea:	1af2      	sublt	r2, r6, r3
 800ceec:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ceee:	bfb6      	itet	lt
 800cef0:	189b      	addlt	r3, r3, r2
 800cef2:	1b9e      	subge	r6, r3, r6
 800cef4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800cef6:	9b03      	ldr	r3, [sp, #12]
 800cef8:	bfb8      	it	lt
 800cefa:	2600      	movlt	r6, #0
 800cefc:	2b00      	cmp	r3, #0
 800cefe:	bfb7      	itett	lt
 800cf00:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800cf04:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800cf08:	1a9d      	sublt	r5, r3, r2
 800cf0a:	2300      	movlt	r3, #0
 800cf0c:	e734      	b.n	800cd78 <_dtoa_r+0x720>
 800cf0e:	9e07      	ldr	r6, [sp, #28]
 800cf10:	9d04      	ldr	r5, [sp, #16]
 800cf12:	9f08      	ldr	r7, [sp, #32]
 800cf14:	e73b      	b.n	800cd8e <_dtoa_r+0x736>
 800cf16:	9a07      	ldr	r2, [sp, #28]
 800cf18:	e767      	b.n	800cdea <_dtoa_r+0x792>
 800cf1a:	9b06      	ldr	r3, [sp, #24]
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	dc18      	bgt.n	800cf52 <_dtoa_r+0x8fa>
 800cf20:	f1ba 0f00 	cmp.w	sl, #0
 800cf24:	d115      	bne.n	800cf52 <_dtoa_r+0x8fa>
 800cf26:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf2a:	b993      	cbnz	r3, 800cf52 <_dtoa_r+0x8fa>
 800cf2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cf30:	0d1b      	lsrs	r3, r3, #20
 800cf32:	051b      	lsls	r3, r3, #20
 800cf34:	b183      	cbz	r3, 800cf58 <_dtoa_r+0x900>
 800cf36:	9b04      	ldr	r3, [sp, #16]
 800cf38:	3301      	adds	r3, #1
 800cf3a:	9304      	str	r3, [sp, #16]
 800cf3c:	9b05      	ldr	r3, [sp, #20]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	9305      	str	r3, [sp, #20]
 800cf42:	f04f 0801 	mov.w	r8, #1
 800cf46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	f47f af6a 	bne.w	800ce22 <_dtoa_r+0x7ca>
 800cf4e:	2001      	movs	r0, #1
 800cf50:	e76f      	b.n	800ce32 <_dtoa_r+0x7da>
 800cf52:	f04f 0800 	mov.w	r8, #0
 800cf56:	e7f6      	b.n	800cf46 <_dtoa_r+0x8ee>
 800cf58:	4698      	mov	r8, r3
 800cf5a:	e7f4      	b.n	800cf46 <_dtoa_r+0x8ee>
 800cf5c:	f43f af7d 	beq.w	800ce5a <_dtoa_r+0x802>
 800cf60:	4618      	mov	r0, r3
 800cf62:	301c      	adds	r0, #28
 800cf64:	e772      	b.n	800ce4c <_dtoa_r+0x7f4>
 800cf66:	9b03      	ldr	r3, [sp, #12]
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	dc37      	bgt.n	800cfdc <_dtoa_r+0x984>
 800cf6c:	9b06      	ldr	r3, [sp, #24]
 800cf6e:	2b02      	cmp	r3, #2
 800cf70:	dd34      	ble.n	800cfdc <_dtoa_r+0x984>
 800cf72:	9b03      	ldr	r3, [sp, #12]
 800cf74:	9302      	str	r3, [sp, #8]
 800cf76:	9b02      	ldr	r3, [sp, #8]
 800cf78:	b96b      	cbnz	r3, 800cf96 <_dtoa_r+0x93e>
 800cf7a:	4631      	mov	r1, r6
 800cf7c:	2205      	movs	r2, #5
 800cf7e:	4620      	mov	r0, r4
 800cf80:	f000 fd5a 	bl	800da38 <__multadd>
 800cf84:	4601      	mov	r1, r0
 800cf86:	4606      	mov	r6, r0
 800cf88:	ee18 0a10 	vmov	r0, s16
 800cf8c:	f000 ffbe 	bl	800df0c <__mcmp>
 800cf90:	2800      	cmp	r0, #0
 800cf92:	f73f adbb 	bgt.w	800cb0c <_dtoa_r+0x4b4>
 800cf96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cf98:	9d01      	ldr	r5, [sp, #4]
 800cf9a:	43db      	mvns	r3, r3
 800cf9c:	9300      	str	r3, [sp, #0]
 800cf9e:	f04f 0800 	mov.w	r8, #0
 800cfa2:	4631      	mov	r1, r6
 800cfa4:	4620      	mov	r0, r4
 800cfa6:	f000 fd25 	bl	800d9f4 <_Bfree>
 800cfaa:	2f00      	cmp	r7, #0
 800cfac:	f43f aea4 	beq.w	800ccf8 <_dtoa_r+0x6a0>
 800cfb0:	f1b8 0f00 	cmp.w	r8, #0
 800cfb4:	d005      	beq.n	800cfc2 <_dtoa_r+0x96a>
 800cfb6:	45b8      	cmp	r8, r7
 800cfb8:	d003      	beq.n	800cfc2 <_dtoa_r+0x96a>
 800cfba:	4641      	mov	r1, r8
 800cfbc:	4620      	mov	r0, r4
 800cfbe:	f000 fd19 	bl	800d9f4 <_Bfree>
 800cfc2:	4639      	mov	r1, r7
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	f000 fd15 	bl	800d9f4 <_Bfree>
 800cfca:	e695      	b.n	800ccf8 <_dtoa_r+0x6a0>
 800cfcc:	2600      	movs	r6, #0
 800cfce:	4637      	mov	r7, r6
 800cfd0:	e7e1      	b.n	800cf96 <_dtoa_r+0x93e>
 800cfd2:	9700      	str	r7, [sp, #0]
 800cfd4:	4637      	mov	r7, r6
 800cfd6:	e599      	b.n	800cb0c <_dtoa_r+0x4b4>
 800cfd8:	40240000 	.word	0x40240000
 800cfdc:	9b08      	ldr	r3, [sp, #32]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	f000 80ca 	beq.w	800d178 <_dtoa_r+0xb20>
 800cfe4:	9b03      	ldr	r3, [sp, #12]
 800cfe6:	9302      	str	r3, [sp, #8]
 800cfe8:	2d00      	cmp	r5, #0
 800cfea:	dd05      	ble.n	800cff8 <_dtoa_r+0x9a0>
 800cfec:	4639      	mov	r1, r7
 800cfee:	462a      	mov	r2, r5
 800cff0:	4620      	mov	r0, r4
 800cff2:	f000 ff1b 	bl	800de2c <__lshift>
 800cff6:	4607      	mov	r7, r0
 800cff8:	f1b8 0f00 	cmp.w	r8, #0
 800cffc:	d05b      	beq.n	800d0b6 <_dtoa_r+0xa5e>
 800cffe:	6879      	ldr	r1, [r7, #4]
 800d000:	4620      	mov	r0, r4
 800d002:	f000 fcb7 	bl	800d974 <_Balloc>
 800d006:	4605      	mov	r5, r0
 800d008:	b928      	cbnz	r0, 800d016 <_dtoa_r+0x9be>
 800d00a:	4b87      	ldr	r3, [pc, #540]	; (800d228 <_dtoa_r+0xbd0>)
 800d00c:	4602      	mov	r2, r0
 800d00e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d012:	f7ff bb3b 	b.w	800c68c <_dtoa_r+0x34>
 800d016:	693a      	ldr	r2, [r7, #16]
 800d018:	3202      	adds	r2, #2
 800d01a:	0092      	lsls	r2, r2, #2
 800d01c:	f107 010c 	add.w	r1, r7, #12
 800d020:	300c      	adds	r0, #12
 800d022:	f7fd ff43 	bl	800aeac <memcpy>
 800d026:	2201      	movs	r2, #1
 800d028:	4629      	mov	r1, r5
 800d02a:	4620      	mov	r0, r4
 800d02c:	f000 fefe 	bl	800de2c <__lshift>
 800d030:	9b01      	ldr	r3, [sp, #4]
 800d032:	f103 0901 	add.w	r9, r3, #1
 800d036:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d03a:	4413      	add	r3, r2
 800d03c:	9305      	str	r3, [sp, #20]
 800d03e:	f00a 0301 	and.w	r3, sl, #1
 800d042:	46b8      	mov	r8, r7
 800d044:	9304      	str	r3, [sp, #16]
 800d046:	4607      	mov	r7, r0
 800d048:	4631      	mov	r1, r6
 800d04a:	ee18 0a10 	vmov	r0, s16
 800d04e:	f7ff fa77 	bl	800c540 <quorem>
 800d052:	4641      	mov	r1, r8
 800d054:	9002      	str	r0, [sp, #8]
 800d056:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d05a:	ee18 0a10 	vmov	r0, s16
 800d05e:	f000 ff55 	bl	800df0c <__mcmp>
 800d062:	463a      	mov	r2, r7
 800d064:	9003      	str	r0, [sp, #12]
 800d066:	4631      	mov	r1, r6
 800d068:	4620      	mov	r0, r4
 800d06a:	f000 ff6b 	bl	800df44 <__mdiff>
 800d06e:	68c2      	ldr	r2, [r0, #12]
 800d070:	f109 3bff 	add.w	fp, r9, #4294967295
 800d074:	4605      	mov	r5, r0
 800d076:	bb02      	cbnz	r2, 800d0ba <_dtoa_r+0xa62>
 800d078:	4601      	mov	r1, r0
 800d07a:	ee18 0a10 	vmov	r0, s16
 800d07e:	f000 ff45 	bl	800df0c <__mcmp>
 800d082:	4602      	mov	r2, r0
 800d084:	4629      	mov	r1, r5
 800d086:	4620      	mov	r0, r4
 800d088:	9207      	str	r2, [sp, #28]
 800d08a:	f000 fcb3 	bl	800d9f4 <_Bfree>
 800d08e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d092:	ea43 0102 	orr.w	r1, r3, r2
 800d096:	9b04      	ldr	r3, [sp, #16]
 800d098:	430b      	orrs	r3, r1
 800d09a:	464d      	mov	r5, r9
 800d09c:	d10f      	bne.n	800d0be <_dtoa_r+0xa66>
 800d09e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0a2:	d02a      	beq.n	800d0fa <_dtoa_r+0xaa2>
 800d0a4:	9b03      	ldr	r3, [sp, #12]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	dd02      	ble.n	800d0b0 <_dtoa_r+0xa58>
 800d0aa:	9b02      	ldr	r3, [sp, #8]
 800d0ac:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d0b0:	f88b a000 	strb.w	sl, [fp]
 800d0b4:	e775      	b.n	800cfa2 <_dtoa_r+0x94a>
 800d0b6:	4638      	mov	r0, r7
 800d0b8:	e7ba      	b.n	800d030 <_dtoa_r+0x9d8>
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	e7e2      	b.n	800d084 <_dtoa_r+0xa2c>
 800d0be:	9b03      	ldr	r3, [sp, #12]
 800d0c0:	2b00      	cmp	r3, #0
 800d0c2:	db04      	blt.n	800d0ce <_dtoa_r+0xa76>
 800d0c4:	9906      	ldr	r1, [sp, #24]
 800d0c6:	430b      	orrs	r3, r1
 800d0c8:	9904      	ldr	r1, [sp, #16]
 800d0ca:	430b      	orrs	r3, r1
 800d0cc:	d122      	bne.n	800d114 <_dtoa_r+0xabc>
 800d0ce:	2a00      	cmp	r2, #0
 800d0d0:	ddee      	ble.n	800d0b0 <_dtoa_r+0xa58>
 800d0d2:	ee18 1a10 	vmov	r1, s16
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	4620      	mov	r0, r4
 800d0da:	f000 fea7 	bl	800de2c <__lshift>
 800d0de:	4631      	mov	r1, r6
 800d0e0:	ee08 0a10 	vmov	s16, r0
 800d0e4:	f000 ff12 	bl	800df0c <__mcmp>
 800d0e8:	2800      	cmp	r0, #0
 800d0ea:	dc03      	bgt.n	800d0f4 <_dtoa_r+0xa9c>
 800d0ec:	d1e0      	bne.n	800d0b0 <_dtoa_r+0xa58>
 800d0ee:	f01a 0f01 	tst.w	sl, #1
 800d0f2:	d0dd      	beq.n	800d0b0 <_dtoa_r+0xa58>
 800d0f4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d0f8:	d1d7      	bne.n	800d0aa <_dtoa_r+0xa52>
 800d0fa:	2339      	movs	r3, #57	; 0x39
 800d0fc:	f88b 3000 	strb.w	r3, [fp]
 800d100:	462b      	mov	r3, r5
 800d102:	461d      	mov	r5, r3
 800d104:	3b01      	subs	r3, #1
 800d106:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d10a:	2a39      	cmp	r2, #57	; 0x39
 800d10c:	d071      	beq.n	800d1f2 <_dtoa_r+0xb9a>
 800d10e:	3201      	adds	r2, #1
 800d110:	701a      	strb	r2, [r3, #0]
 800d112:	e746      	b.n	800cfa2 <_dtoa_r+0x94a>
 800d114:	2a00      	cmp	r2, #0
 800d116:	dd07      	ble.n	800d128 <_dtoa_r+0xad0>
 800d118:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d11c:	d0ed      	beq.n	800d0fa <_dtoa_r+0xaa2>
 800d11e:	f10a 0301 	add.w	r3, sl, #1
 800d122:	f88b 3000 	strb.w	r3, [fp]
 800d126:	e73c      	b.n	800cfa2 <_dtoa_r+0x94a>
 800d128:	9b05      	ldr	r3, [sp, #20]
 800d12a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d12e:	4599      	cmp	r9, r3
 800d130:	d047      	beq.n	800d1c2 <_dtoa_r+0xb6a>
 800d132:	ee18 1a10 	vmov	r1, s16
 800d136:	2300      	movs	r3, #0
 800d138:	220a      	movs	r2, #10
 800d13a:	4620      	mov	r0, r4
 800d13c:	f000 fc7c 	bl	800da38 <__multadd>
 800d140:	45b8      	cmp	r8, r7
 800d142:	ee08 0a10 	vmov	s16, r0
 800d146:	f04f 0300 	mov.w	r3, #0
 800d14a:	f04f 020a 	mov.w	r2, #10
 800d14e:	4641      	mov	r1, r8
 800d150:	4620      	mov	r0, r4
 800d152:	d106      	bne.n	800d162 <_dtoa_r+0xb0a>
 800d154:	f000 fc70 	bl	800da38 <__multadd>
 800d158:	4680      	mov	r8, r0
 800d15a:	4607      	mov	r7, r0
 800d15c:	f109 0901 	add.w	r9, r9, #1
 800d160:	e772      	b.n	800d048 <_dtoa_r+0x9f0>
 800d162:	f000 fc69 	bl	800da38 <__multadd>
 800d166:	4639      	mov	r1, r7
 800d168:	4680      	mov	r8, r0
 800d16a:	2300      	movs	r3, #0
 800d16c:	220a      	movs	r2, #10
 800d16e:	4620      	mov	r0, r4
 800d170:	f000 fc62 	bl	800da38 <__multadd>
 800d174:	4607      	mov	r7, r0
 800d176:	e7f1      	b.n	800d15c <_dtoa_r+0xb04>
 800d178:	9b03      	ldr	r3, [sp, #12]
 800d17a:	9302      	str	r3, [sp, #8]
 800d17c:	9d01      	ldr	r5, [sp, #4]
 800d17e:	ee18 0a10 	vmov	r0, s16
 800d182:	4631      	mov	r1, r6
 800d184:	f7ff f9dc 	bl	800c540 <quorem>
 800d188:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d18c:	9b01      	ldr	r3, [sp, #4]
 800d18e:	f805 ab01 	strb.w	sl, [r5], #1
 800d192:	1aea      	subs	r2, r5, r3
 800d194:	9b02      	ldr	r3, [sp, #8]
 800d196:	4293      	cmp	r3, r2
 800d198:	dd09      	ble.n	800d1ae <_dtoa_r+0xb56>
 800d19a:	ee18 1a10 	vmov	r1, s16
 800d19e:	2300      	movs	r3, #0
 800d1a0:	220a      	movs	r2, #10
 800d1a2:	4620      	mov	r0, r4
 800d1a4:	f000 fc48 	bl	800da38 <__multadd>
 800d1a8:	ee08 0a10 	vmov	s16, r0
 800d1ac:	e7e7      	b.n	800d17e <_dtoa_r+0xb26>
 800d1ae:	9b02      	ldr	r3, [sp, #8]
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	bfc8      	it	gt
 800d1b4:	461d      	movgt	r5, r3
 800d1b6:	9b01      	ldr	r3, [sp, #4]
 800d1b8:	bfd8      	it	le
 800d1ba:	2501      	movle	r5, #1
 800d1bc:	441d      	add	r5, r3
 800d1be:	f04f 0800 	mov.w	r8, #0
 800d1c2:	ee18 1a10 	vmov	r1, s16
 800d1c6:	2201      	movs	r2, #1
 800d1c8:	4620      	mov	r0, r4
 800d1ca:	f000 fe2f 	bl	800de2c <__lshift>
 800d1ce:	4631      	mov	r1, r6
 800d1d0:	ee08 0a10 	vmov	s16, r0
 800d1d4:	f000 fe9a 	bl	800df0c <__mcmp>
 800d1d8:	2800      	cmp	r0, #0
 800d1da:	dc91      	bgt.n	800d100 <_dtoa_r+0xaa8>
 800d1dc:	d102      	bne.n	800d1e4 <_dtoa_r+0xb8c>
 800d1de:	f01a 0f01 	tst.w	sl, #1
 800d1e2:	d18d      	bne.n	800d100 <_dtoa_r+0xaa8>
 800d1e4:	462b      	mov	r3, r5
 800d1e6:	461d      	mov	r5, r3
 800d1e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d1ec:	2a30      	cmp	r2, #48	; 0x30
 800d1ee:	d0fa      	beq.n	800d1e6 <_dtoa_r+0xb8e>
 800d1f0:	e6d7      	b.n	800cfa2 <_dtoa_r+0x94a>
 800d1f2:	9a01      	ldr	r2, [sp, #4]
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d184      	bne.n	800d102 <_dtoa_r+0xaaa>
 800d1f8:	9b00      	ldr	r3, [sp, #0]
 800d1fa:	3301      	adds	r3, #1
 800d1fc:	9300      	str	r3, [sp, #0]
 800d1fe:	2331      	movs	r3, #49	; 0x31
 800d200:	7013      	strb	r3, [r2, #0]
 800d202:	e6ce      	b.n	800cfa2 <_dtoa_r+0x94a>
 800d204:	4b09      	ldr	r3, [pc, #36]	; (800d22c <_dtoa_r+0xbd4>)
 800d206:	f7ff ba95 	b.w	800c734 <_dtoa_r+0xdc>
 800d20a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	f47f aa6e 	bne.w	800c6ee <_dtoa_r+0x96>
 800d212:	4b07      	ldr	r3, [pc, #28]	; (800d230 <_dtoa_r+0xbd8>)
 800d214:	f7ff ba8e 	b.w	800c734 <_dtoa_r+0xdc>
 800d218:	9b02      	ldr	r3, [sp, #8]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	dcae      	bgt.n	800d17c <_dtoa_r+0xb24>
 800d21e:	9b06      	ldr	r3, [sp, #24]
 800d220:	2b02      	cmp	r3, #2
 800d222:	f73f aea8 	bgt.w	800cf76 <_dtoa_r+0x91e>
 800d226:	e7a9      	b.n	800d17c <_dtoa_r+0xb24>
 800d228:	0800f740 	.word	0x0800f740
 800d22c:	0800f5b4 	.word	0x0800f5b4
 800d230:	0800f6d8 	.word	0x0800f6d8

0800d234 <fiprintf>:
 800d234:	b40e      	push	{r1, r2, r3}
 800d236:	b503      	push	{r0, r1, lr}
 800d238:	4601      	mov	r1, r0
 800d23a:	ab03      	add	r3, sp, #12
 800d23c:	4805      	ldr	r0, [pc, #20]	; (800d254 <fiprintf+0x20>)
 800d23e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d242:	6800      	ldr	r0, [r0, #0]
 800d244:	9301      	str	r3, [sp, #4]
 800d246:	f001 fad3 	bl	800e7f0 <_vfiprintf_r>
 800d24a:	b002      	add	sp, #8
 800d24c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d250:	b003      	add	sp, #12
 800d252:	4770      	bx	lr
 800d254:	20000124 	.word	0x20000124

0800d258 <rshift>:
 800d258:	6903      	ldr	r3, [r0, #16]
 800d25a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d25e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d262:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d266:	f100 0414 	add.w	r4, r0, #20
 800d26a:	dd45      	ble.n	800d2f8 <rshift+0xa0>
 800d26c:	f011 011f 	ands.w	r1, r1, #31
 800d270:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d274:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d278:	d10c      	bne.n	800d294 <rshift+0x3c>
 800d27a:	f100 0710 	add.w	r7, r0, #16
 800d27e:	4629      	mov	r1, r5
 800d280:	42b1      	cmp	r1, r6
 800d282:	d334      	bcc.n	800d2ee <rshift+0x96>
 800d284:	1a9b      	subs	r3, r3, r2
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	1eea      	subs	r2, r5, #3
 800d28a:	4296      	cmp	r6, r2
 800d28c:	bf38      	it	cc
 800d28e:	2300      	movcc	r3, #0
 800d290:	4423      	add	r3, r4
 800d292:	e015      	b.n	800d2c0 <rshift+0x68>
 800d294:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d298:	f1c1 0820 	rsb	r8, r1, #32
 800d29c:	40cf      	lsrs	r7, r1
 800d29e:	f105 0e04 	add.w	lr, r5, #4
 800d2a2:	46a1      	mov	r9, r4
 800d2a4:	4576      	cmp	r6, lr
 800d2a6:	46f4      	mov	ip, lr
 800d2a8:	d815      	bhi.n	800d2d6 <rshift+0x7e>
 800d2aa:	1a9a      	subs	r2, r3, r2
 800d2ac:	0092      	lsls	r2, r2, #2
 800d2ae:	3a04      	subs	r2, #4
 800d2b0:	3501      	adds	r5, #1
 800d2b2:	42ae      	cmp	r6, r5
 800d2b4:	bf38      	it	cc
 800d2b6:	2200      	movcc	r2, #0
 800d2b8:	18a3      	adds	r3, r4, r2
 800d2ba:	50a7      	str	r7, [r4, r2]
 800d2bc:	b107      	cbz	r7, 800d2c0 <rshift+0x68>
 800d2be:	3304      	adds	r3, #4
 800d2c0:	1b1a      	subs	r2, r3, r4
 800d2c2:	42a3      	cmp	r3, r4
 800d2c4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d2c8:	bf08      	it	eq
 800d2ca:	2300      	moveq	r3, #0
 800d2cc:	6102      	str	r2, [r0, #16]
 800d2ce:	bf08      	it	eq
 800d2d0:	6143      	streq	r3, [r0, #20]
 800d2d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2d6:	f8dc c000 	ldr.w	ip, [ip]
 800d2da:	fa0c fc08 	lsl.w	ip, ip, r8
 800d2de:	ea4c 0707 	orr.w	r7, ip, r7
 800d2e2:	f849 7b04 	str.w	r7, [r9], #4
 800d2e6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d2ea:	40cf      	lsrs	r7, r1
 800d2ec:	e7da      	b.n	800d2a4 <rshift+0x4c>
 800d2ee:	f851 cb04 	ldr.w	ip, [r1], #4
 800d2f2:	f847 cf04 	str.w	ip, [r7, #4]!
 800d2f6:	e7c3      	b.n	800d280 <rshift+0x28>
 800d2f8:	4623      	mov	r3, r4
 800d2fa:	e7e1      	b.n	800d2c0 <rshift+0x68>

0800d2fc <__hexdig_fun>:
 800d2fc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d300:	2b09      	cmp	r3, #9
 800d302:	d802      	bhi.n	800d30a <__hexdig_fun+0xe>
 800d304:	3820      	subs	r0, #32
 800d306:	b2c0      	uxtb	r0, r0
 800d308:	4770      	bx	lr
 800d30a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d30e:	2b05      	cmp	r3, #5
 800d310:	d801      	bhi.n	800d316 <__hexdig_fun+0x1a>
 800d312:	3847      	subs	r0, #71	; 0x47
 800d314:	e7f7      	b.n	800d306 <__hexdig_fun+0xa>
 800d316:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d31a:	2b05      	cmp	r3, #5
 800d31c:	d801      	bhi.n	800d322 <__hexdig_fun+0x26>
 800d31e:	3827      	subs	r0, #39	; 0x27
 800d320:	e7f1      	b.n	800d306 <__hexdig_fun+0xa>
 800d322:	2000      	movs	r0, #0
 800d324:	4770      	bx	lr
	...

0800d328 <__gethex>:
 800d328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d32c:	ed2d 8b02 	vpush	{d8}
 800d330:	b089      	sub	sp, #36	; 0x24
 800d332:	ee08 0a10 	vmov	s16, r0
 800d336:	9304      	str	r3, [sp, #16]
 800d338:	4bb4      	ldr	r3, [pc, #720]	; (800d60c <__gethex+0x2e4>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	9301      	str	r3, [sp, #4]
 800d33e:	4618      	mov	r0, r3
 800d340:	468b      	mov	fp, r1
 800d342:	4690      	mov	r8, r2
 800d344:	f7f2 ff4c 	bl	80001e0 <strlen>
 800d348:	9b01      	ldr	r3, [sp, #4]
 800d34a:	f8db 2000 	ldr.w	r2, [fp]
 800d34e:	4403      	add	r3, r0
 800d350:	4682      	mov	sl, r0
 800d352:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d356:	9305      	str	r3, [sp, #20]
 800d358:	1c93      	adds	r3, r2, #2
 800d35a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d35e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d362:	32fe      	adds	r2, #254	; 0xfe
 800d364:	18d1      	adds	r1, r2, r3
 800d366:	461f      	mov	r7, r3
 800d368:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d36c:	9100      	str	r1, [sp, #0]
 800d36e:	2830      	cmp	r0, #48	; 0x30
 800d370:	d0f8      	beq.n	800d364 <__gethex+0x3c>
 800d372:	f7ff ffc3 	bl	800d2fc <__hexdig_fun>
 800d376:	4604      	mov	r4, r0
 800d378:	2800      	cmp	r0, #0
 800d37a:	d13a      	bne.n	800d3f2 <__gethex+0xca>
 800d37c:	9901      	ldr	r1, [sp, #4]
 800d37e:	4652      	mov	r2, sl
 800d380:	4638      	mov	r0, r7
 800d382:	f001 fb7d 	bl	800ea80 <strncmp>
 800d386:	4605      	mov	r5, r0
 800d388:	2800      	cmp	r0, #0
 800d38a:	d168      	bne.n	800d45e <__gethex+0x136>
 800d38c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d390:	eb07 060a 	add.w	r6, r7, sl
 800d394:	f7ff ffb2 	bl	800d2fc <__hexdig_fun>
 800d398:	2800      	cmp	r0, #0
 800d39a:	d062      	beq.n	800d462 <__gethex+0x13a>
 800d39c:	4633      	mov	r3, r6
 800d39e:	7818      	ldrb	r0, [r3, #0]
 800d3a0:	2830      	cmp	r0, #48	; 0x30
 800d3a2:	461f      	mov	r7, r3
 800d3a4:	f103 0301 	add.w	r3, r3, #1
 800d3a8:	d0f9      	beq.n	800d39e <__gethex+0x76>
 800d3aa:	f7ff ffa7 	bl	800d2fc <__hexdig_fun>
 800d3ae:	2301      	movs	r3, #1
 800d3b0:	fab0 f480 	clz	r4, r0
 800d3b4:	0964      	lsrs	r4, r4, #5
 800d3b6:	4635      	mov	r5, r6
 800d3b8:	9300      	str	r3, [sp, #0]
 800d3ba:	463a      	mov	r2, r7
 800d3bc:	4616      	mov	r6, r2
 800d3be:	3201      	adds	r2, #1
 800d3c0:	7830      	ldrb	r0, [r6, #0]
 800d3c2:	f7ff ff9b 	bl	800d2fc <__hexdig_fun>
 800d3c6:	2800      	cmp	r0, #0
 800d3c8:	d1f8      	bne.n	800d3bc <__gethex+0x94>
 800d3ca:	9901      	ldr	r1, [sp, #4]
 800d3cc:	4652      	mov	r2, sl
 800d3ce:	4630      	mov	r0, r6
 800d3d0:	f001 fb56 	bl	800ea80 <strncmp>
 800d3d4:	b980      	cbnz	r0, 800d3f8 <__gethex+0xd0>
 800d3d6:	b94d      	cbnz	r5, 800d3ec <__gethex+0xc4>
 800d3d8:	eb06 050a 	add.w	r5, r6, sl
 800d3dc:	462a      	mov	r2, r5
 800d3de:	4616      	mov	r6, r2
 800d3e0:	3201      	adds	r2, #1
 800d3e2:	7830      	ldrb	r0, [r6, #0]
 800d3e4:	f7ff ff8a 	bl	800d2fc <__hexdig_fun>
 800d3e8:	2800      	cmp	r0, #0
 800d3ea:	d1f8      	bne.n	800d3de <__gethex+0xb6>
 800d3ec:	1bad      	subs	r5, r5, r6
 800d3ee:	00ad      	lsls	r5, r5, #2
 800d3f0:	e004      	b.n	800d3fc <__gethex+0xd4>
 800d3f2:	2400      	movs	r4, #0
 800d3f4:	4625      	mov	r5, r4
 800d3f6:	e7e0      	b.n	800d3ba <__gethex+0x92>
 800d3f8:	2d00      	cmp	r5, #0
 800d3fa:	d1f7      	bne.n	800d3ec <__gethex+0xc4>
 800d3fc:	7833      	ldrb	r3, [r6, #0]
 800d3fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d402:	2b50      	cmp	r3, #80	; 0x50
 800d404:	d13b      	bne.n	800d47e <__gethex+0x156>
 800d406:	7873      	ldrb	r3, [r6, #1]
 800d408:	2b2b      	cmp	r3, #43	; 0x2b
 800d40a:	d02c      	beq.n	800d466 <__gethex+0x13e>
 800d40c:	2b2d      	cmp	r3, #45	; 0x2d
 800d40e:	d02e      	beq.n	800d46e <__gethex+0x146>
 800d410:	1c71      	adds	r1, r6, #1
 800d412:	f04f 0900 	mov.w	r9, #0
 800d416:	7808      	ldrb	r0, [r1, #0]
 800d418:	f7ff ff70 	bl	800d2fc <__hexdig_fun>
 800d41c:	1e43      	subs	r3, r0, #1
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	2b18      	cmp	r3, #24
 800d422:	d82c      	bhi.n	800d47e <__gethex+0x156>
 800d424:	f1a0 0210 	sub.w	r2, r0, #16
 800d428:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d42c:	f7ff ff66 	bl	800d2fc <__hexdig_fun>
 800d430:	1e43      	subs	r3, r0, #1
 800d432:	b2db      	uxtb	r3, r3
 800d434:	2b18      	cmp	r3, #24
 800d436:	d91d      	bls.n	800d474 <__gethex+0x14c>
 800d438:	f1b9 0f00 	cmp.w	r9, #0
 800d43c:	d000      	beq.n	800d440 <__gethex+0x118>
 800d43e:	4252      	negs	r2, r2
 800d440:	4415      	add	r5, r2
 800d442:	f8cb 1000 	str.w	r1, [fp]
 800d446:	b1e4      	cbz	r4, 800d482 <__gethex+0x15a>
 800d448:	9b00      	ldr	r3, [sp, #0]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	bf14      	ite	ne
 800d44e:	2700      	movne	r7, #0
 800d450:	2706      	moveq	r7, #6
 800d452:	4638      	mov	r0, r7
 800d454:	b009      	add	sp, #36	; 0x24
 800d456:	ecbd 8b02 	vpop	{d8}
 800d45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d45e:	463e      	mov	r6, r7
 800d460:	4625      	mov	r5, r4
 800d462:	2401      	movs	r4, #1
 800d464:	e7ca      	b.n	800d3fc <__gethex+0xd4>
 800d466:	f04f 0900 	mov.w	r9, #0
 800d46a:	1cb1      	adds	r1, r6, #2
 800d46c:	e7d3      	b.n	800d416 <__gethex+0xee>
 800d46e:	f04f 0901 	mov.w	r9, #1
 800d472:	e7fa      	b.n	800d46a <__gethex+0x142>
 800d474:	230a      	movs	r3, #10
 800d476:	fb03 0202 	mla	r2, r3, r2, r0
 800d47a:	3a10      	subs	r2, #16
 800d47c:	e7d4      	b.n	800d428 <__gethex+0x100>
 800d47e:	4631      	mov	r1, r6
 800d480:	e7df      	b.n	800d442 <__gethex+0x11a>
 800d482:	1bf3      	subs	r3, r6, r7
 800d484:	3b01      	subs	r3, #1
 800d486:	4621      	mov	r1, r4
 800d488:	2b07      	cmp	r3, #7
 800d48a:	dc0b      	bgt.n	800d4a4 <__gethex+0x17c>
 800d48c:	ee18 0a10 	vmov	r0, s16
 800d490:	f000 fa70 	bl	800d974 <_Balloc>
 800d494:	4604      	mov	r4, r0
 800d496:	b940      	cbnz	r0, 800d4aa <__gethex+0x182>
 800d498:	4b5d      	ldr	r3, [pc, #372]	; (800d610 <__gethex+0x2e8>)
 800d49a:	4602      	mov	r2, r0
 800d49c:	21de      	movs	r1, #222	; 0xde
 800d49e:	485d      	ldr	r0, [pc, #372]	; (800d614 <__gethex+0x2ec>)
 800d4a0:	f7ff f830 	bl	800c504 <__assert_func>
 800d4a4:	3101      	adds	r1, #1
 800d4a6:	105b      	asrs	r3, r3, #1
 800d4a8:	e7ee      	b.n	800d488 <__gethex+0x160>
 800d4aa:	f100 0914 	add.w	r9, r0, #20
 800d4ae:	f04f 0b00 	mov.w	fp, #0
 800d4b2:	f1ca 0301 	rsb	r3, sl, #1
 800d4b6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d4ba:	f8cd b000 	str.w	fp, [sp]
 800d4be:	9306      	str	r3, [sp, #24]
 800d4c0:	42b7      	cmp	r7, r6
 800d4c2:	d340      	bcc.n	800d546 <__gethex+0x21e>
 800d4c4:	9802      	ldr	r0, [sp, #8]
 800d4c6:	9b00      	ldr	r3, [sp, #0]
 800d4c8:	f840 3b04 	str.w	r3, [r0], #4
 800d4cc:	eba0 0009 	sub.w	r0, r0, r9
 800d4d0:	1080      	asrs	r0, r0, #2
 800d4d2:	0146      	lsls	r6, r0, #5
 800d4d4:	6120      	str	r0, [r4, #16]
 800d4d6:	4618      	mov	r0, r3
 800d4d8:	f000 fb3e 	bl	800db58 <__hi0bits>
 800d4dc:	1a30      	subs	r0, r6, r0
 800d4de:	f8d8 6000 	ldr.w	r6, [r8]
 800d4e2:	42b0      	cmp	r0, r6
 800d4e4:	dd63      	ble.n	800d5ae <__gethex+0x286>
 800d4e6:	1b87      	subs	r7, r0, r6
 800d4e8:	4639      	mov	r1, r7
 800d4ea:	4620      	mov	r0, r4
 800d4ec:	f000 fee2 	bl	800e2b4 <__any_on>
 800d4f0:	4682      	mov	sl, r0
 800d4f2:	b1a8      	cbz	r0, 800d520 <__gethex+0x1f8>
 800d4f4:	1e7b      	subs	r3, r7, #1
 800d4f6:	1159      	asrs	r1, r3, #5
 800d4f8:	f003 021f 	and.w	r2, r3, #31
 800d4fc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d500:	f04f 0a01 	mov.w	sl, #1
 800d504:	fa0a f202 	lsl.w	r2, sl, r2
 800d508:	420a      	tst	r2, r1
 800d50a:	d009      	beq.n	800d520 <__gethex+0x1f8>
 800d50c:	4553      	cmp	r3, sl
 800d50e:	dd05      	ble.n	800d51c <__gethex+0x1f4>
 800d510:	1eb9      	subs	r1, r7, #2
 800d512:	4620      	mov	r0, r4
 800d514:	f000 fece 	bl	800e2b4 <__any_on>
 800d518:	2800      	cmp	r0, #0
 800d51a:	d145      	bne.n	800d5a8 <__gethex+0x280>
 800d51c:	f04f 0a02 	mov.w	sl, #2
 800d520:	4639      	mov	r1, r7
 800d522:	4620      	mov	r0, r4
 800d524:	f7ff fe98 	bl	800d258 <rshift>
 800d528:	443d      	add	r5, r7
 800d52a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d52e:	42ab      	cmp	r3, r5
 800d530:	da4c      	bge.n	800d5cc <__gethex+0x2a4>
 800d532:	ee18 0a10 	vmov	r0, s16
 800d536:	4621      	mov	r1, r4
 800d538:	f000 fa5c 	bl	800d9f4 <_Bfree>
 800d53c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d53e:	2300      	movs	r3, #0
 800d540:	6013      	str	r3, [r2, #0]
 800d542:	27a3      	movs	r7, #163	; 0xa3
 800d544:	e785      	b.n	800d452 <__gethex+0x12a>
 800d546:	1e73      	subs	r3, r6, #1
 800d548:	9a05      	ldr	r2, [sp, #20]
 800d54a:	9303      	str	r3, [sp, #12]
 800d54c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d550:	4293      	cmp	r3, r2
 800d552:	d019      	beq.n	800d588 <__gethex+0x260>
 800d554:	f1bb 0f20 	cmp.w	fp, #32
 800d558:	d107      	bne.n	800d56a <__gethex+0x242>
 800d55a:	9b02      	ldr	r3, [sp, #8]
 800d55c:	9a00      	ldr	r2, [sp, #0]
 800d55e:	f843 2b04 	str.w	r2, [r3], #4
 800d562:	9302      	str	r3, [sp, #8]
 800d564:	2300      	movs	r3, #0
 800d566:	9300      	str	r3, [sp, #0]
 800d568:	469b      	mov	fp, r3
 800d56a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d56e:	f7ff fec5 	bl	800d2fc <__hexdig_fun>
 800d572:	9b00      	ldr	r3, [sp, #0]
 800d574:	f000 000f 	and.w	r0, r0, #15
 800d578:	fa00 f00b 	lsl.w	r0, r0, fp
 800d57c:	4303      	orrs	r3, r0
 800d57e:	9300      	str	r3, [sp, #0]
 800d580:	f10b 0b04 	add.w	fp, fp, #4
 800d584:	9b03      	ldr	r3, [sp, #12]
 800d586:	e00d      	b.n	800d5a4 <__gethex+0x27c>
 800d588:	9b03      	ldr	r3, [sp, #12]
 800d58a:	9a06      	ldr	r2, [sp, #24]
 800d58c:	4413      	add	r3, r2
 800d58e:	42bb      	cmp	r3, r7
 800d590:	d3e0      	bcc.n	800d554 <__gethex+0x22c>
 800d592:	4618      	mov	r0, r3
 800d594:	9901      	ldr	r1, [sp, #4]
 800d596:	9307      	str	r3, [sp, #28]
 800d598:	4652      	mov	r2, sl
 800d59a:	f001 fa71 	bl	800ea80 <strncmp>
 800d59e:	9b07      	ldr	r3, [sp, #28]
 800d5a0:	2800      	cmp	r0, #0
 800d5a2:	d1d7      	bne.n	800d554 <__gethex+0x22c>
 800d5a4:	461e      	mov	r6, r3
 800d5a6:	e78b      	b.n	800d4c0 <__gethex+0x198>
 800d5a8:	f04f 0a03 	mov.w	sl, #3
 800d5ac:	e7b8      	b.n	800d520 <__gethex+0x1f8>
 800d5ae:	da0a      	bge.n	800d5c6 <__gethex+0x29e>
 800d5b0:	1a37      	subs	r7, r6, r0
 800d5b2:	4621      	mov	r1, r4
 800d5b4:	ee18 0a10 	vmov	r0, s16
 800d5b8:	463a      	mov	r2, r7
 800d5ba:	f000 fc37 	bl	800de2c <__lshift>
 800d5be:	1bed      	subs	r5, r5, r7
 800d5c0:	4604      	mov	r4, r0
 800d5c2:	f100 0914 	add.w	r9, r0, #20
 800d5c6:	f04f 0a00 	mov.w	sl, #0
 800d5ca:	e7ae      	b.n	800d52a <__gethex+0x202>
 800d5cc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d5d0:	42a8      	cmp	r0, r5
 800d5d2:	dd72      	ble.n	800d6ba <__gethex+0x392>
 800d5d4:	1b45      	subs	r5, r0, r5
 800d5d6:	42ae      	cmp	r6, r5
 800d5d8:	dc36      	bgt.n	800d648 <__gethex+0x320>
 800d5da:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d5de:	2b02      	cmp	r3, #2
 800d5e0:	d02a      	beq.n	800d638 <__gethex+0x310>
 800d5e2:	2b03      	cmp	r3, #3
 800d5e4:	d02c      	beq.n	800d640 <__gethex+0x318>
 800d5e6:	2b01      	cmp	r3, #1
 800d5e8:	d11c      	bne.n	800d624 <__gethex+0x2fc>
 800d5ea:	42ae      	cmp	r6, r5
 800d5ec:	d11a      	bne.n	800d624 <__gethex+0x2fc>
 800d5ee:	2e01      	cmp	r6, #1
 800d5f0:	d112      	bne.n	800d618 <__gethex+0x2f0>
 800d5f2:	9a04      	ldr	r2, [sp, #16]
 800d5f4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d5f8:	6013      	str	r3, [r2, #0]
 800d5fa:	2301      	movs	r3, #1
 800d5fc:	6123      	str	r3, [r4, #16]
 800d5fe:	f8c9 3000 	str.w	r3, [r9]
 800d602:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d604:	2762      	movs	r7, #98	; 0x62
 800d606:	601c      	str	r4, [r3, #0]
 800d608:	e723      	b.n	800d452 <__gethex+0x12a>
 800d60a:	bf00      	nop
 800d60c:	0800f7b8 	.word	0x0800f7b8
 800d610:	0800f740 	.word	0x0800f740
 800d614:	0800f751 	.word	0x0800f751
 800d618:	1e71      	subs	r1, r6, #1
 800d61a:	4620      	mov	r0, r4
 800d61c:	f000 fe4a 	bl	800e2b4 <__any_on>
 800d620:	2800      	cmp	r0, #0
 800d622:	d1e6      	bne.n	800d5f2 <__gethex+0x2ca>
 800d624:	ee18 0a10 	vmov	r0, s16
 800d628:	4621      	mov	r1, r4
 800d62a:	f000 f9e3 	bl	800d9f4 <_Bfree>
 800d62e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d630:	2300      	movs	r3, #0
 800d632:	6013      	str	r3, [r2, #0]
 800d634:	2750      	movs	r7, #80	; 0x50
 800d636:	e70c      	b.n	800d452 <__gethex+0x12a>
 800d638:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d1f2      	bne.n	800d624 <__gethex+0x2fc>
 800d63e:	e7d8      	b.n	800d5f2 <__gethex+0x2ca>
 800d640:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d642:	2b00      	cmp	r3, #0
 800d644:	d1d5      	bne.n	800d5f2 <__gethex+0x2ca>
 800d646:	e7ed      	b.n	800d624 <__gethex+0x2fc>
 800d648:	1e6f      	subs	r7, r5, #1
 800d64a:	f1ba 0f00 	cmp.w	sl, #0
 800d64e:	d131      	bne.n	800d6b4 <__gethex+0x38c>
 800d650:	b127      	cbz	r7, 800d65c <__gethex+0x334>
 800d652:	4639      	mov	r1, r7
 800d654:	4620      	mov	r0, r4
 800d656:	f000 fe2d 	bl	800e2b4 <__any_on>
 800d65a:	4682      	mov	sl, r0
 800d65c:	117b      	asrs	r3, r7, #5
 800d65e:	2101      	movs	r1, #1
 800d660:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d664:	f007 071f 	and.w	r7, r7, #31
 800d668:	fa01 f707 	lsl.w	r7, r1, r7
 800d66c:	421f      	tst	r7, r3
 800d66e:	4629      	mov	r1, r5
 800d670:	4620      	mov	r0, r4
 800d672:	bf18      	it	ne
 800d674:	f04a 0a02 	orrne.w	sl, sl, #2
 800d678:	1b76      	subs	r6, r6, r5
 800d67a:	f7ff fded 	bl	800d258 <rshift>
 800d67e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d682:	2702      	movs	r7, #2
 800d684:	f1ba 0f00 	cmp.w	sl, #0
 800d688:	d048      	beq.n	800d71c <__gethex+0x3f4>
 800d68a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d68e:	2b02      	cmp	r3, #2
 800d690:	d015      	beq.n	800d6be <__gethex+0x396>
 800d692:	2b03      	cmp	r3, #3
 800d694:	d017      	beq.n	800d6c6 <__gethex+0x39e>
 800d696:	2b01      	cmp	r3, #1
 800d698:	d109      	bne.n	800d6ae <__gethex+0x386>
 800d69a:	f01a 0f02 	tst.w	sl, #2
 800d69e:	d006      	beq.n	800d6ae <__gethex+0x386>
 800d6a0:	f8d9 0000 	ldr.w	r0, [r9]
 800d6a4:	ea4a 0a00 	orr.w	sl, sl, r0
 800d6a8:	f01a 0f01 	tst.w	sl, #1
 800d6ac:	d10e      	bne.n	800d6cc <__gethex+0x3a4>
 800d6ae:	f047 0710 	orr.w	r7, r7, #16
 800d6b2:	e033      	b.n	800d71c <__gethex+0x3f4>
 800d6b4:	f04f 0a01 	mov.w	sl, #1
 800d6b8:	e7d0      	b.n	800d65c <__gethex+0x334>
 800d6ba:	2701      	movs	r7, #1
 800d6bc:	e7e2      	b.n	800d684 <__gethex+0x35c>
 800d6be:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6c0:	f1c3 0301 	rsb	r3, r3, #1
 800d6c4:	9315      	str	r3, [sp, #84]	; 0x54
 800d6c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d0f0      	beq.n	800d6ae <__gethex+0x386>
 800d6cc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800d6d0:	f104 0314 	add.w	r3, r4, #20
 800d6d4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800d6d8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800d6dc:	f04f 0c00 	mov.w	ip, #0
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d6e6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800d6ea:	d01c      	beq.n	800d726 <__gethex+0x3fe>
 800d6ec:	3201      	adds	r2, #1
 800d6ee:	6002      	str	r2, [r0, #0]
 800d6f0:	2f02      	cmp	r7, #2
 800d6f2:	f104 0314 	add.w	r3, r4, #20
 800d6f6:	d13f      	bne.n	800d778 <__gethex+0x450>
 800d6f8:	f8d8 2000 	ldr.w	r2, [r8]
 800d6fc:	3a01      	subs	r2, #1
 800d6fe:	42b2      	cmp	r2, r6
 800d700:	d10a      	bne.n	800d718 <__gethex+0x3f0>
 800d702:	1171      	asrs	r1, r6, #5
 800d704:	2201      	movs	r2, #1
 800d706:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d70a:	f006 061f 	and.w	r6, r6, #31
 800d70e:	fa02 f606 	lsl.w	r6, r2, r6
 800d712:	421e      	tst	r6, r3
 800d714:	bf18      	it	ne
 800d716:	4617      	movne	r7, r2
 800d718:	f047 0720 	orr.w	r7, r7, #32
 800d71c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d71e:	601c      	str	r4, [r3, #0]
 800d720:	9b04      	ldr	r3, [sp, #16]
 800d722:	601d      	str	r5, [r3, #0]
 800d724:	e695      	b.n	800d452 <__gethex+0x12a>
 800d726:	4299      	cmp	r1, r3
 800d728:	f843 cc04 	str.w	ip, [r3, #-4]
 800d72c:	d8d8      	bhi.n	800d6e0 <__gethex+0x3b8>
 800d72e:	68a3      	ldr	r3, [r4, #8]
 800d730:	459b      	cmp	fp, r3
 800d732:	db19      	blt.n	800d768 <__gethex+0x440>
 800d734:	6861      	ldr	r1, [r4, #4]
 800d736:	ee18 0a10 	vmov	r0, s16
 800d73a:	3101      	adds	r1, #1
 800d73c:	f000 f91a 	bl	800d974 <_Balloc>
 800d740:	4681      	mov	r9, r0
 800d742:	b918      	cbnz	r0, 800d74c <__gethex+0x424>
 800d744:	4b1a      	ldr	r3, [pc, #104]	; (800d7b0 <__gethex+0x488>)
 800d746:	4602      	mov	r2, r0
 800d748:	2184      	movs	r1, #132	; 0x84
 800d74a:	e6a8      	b.n	800d49e <__gethex+0x176>
 800d74c:	6922      	ldr	r2, [r4, #16]
 800d74e:	3202      	adds	r2, #2
 800d750:	f104 010c 	add.w	r1, r4, #12
 800d754:	0092      	lsls	r2, r2, #2
 800d756:	300c      	adds	r0, #12
 800d758:	f7fd fba8 	bl	800aeac <memcpy>
 800d75c:	4621      	mov	r1, r4
 800d75e:	ee18 0a10 	vmov	r0, s16
 800d762:	f000 f947 	bl	800d9f4 <_Bfree>
 800d766:	464c      	mov	r4, r9
 800d768:	6923      	ldr	r3, [r4, #16]
 800d76a:	1c5a      	adds	r2, r3, #1
 800d76c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d770:	6122      	str	r2, [r4, #16]
 800d772:	2201      	movs	r2, #1
 800d774:	615a      	str	r2, [r3, #20]
 800d776:	e7bb      	b.n	800d6f0 <__gethex+0x3c8>
 800d778:	6922      	ldr	r2, [r4, #16]
 800d77a:	455a      	cmp	r2, fp
 800d77c:	dd0b      	ble.n	800d796 <__gethex+0x46e>
 800d77e:	2101      	movs	r1, #1
 800d780:	4620      	mov	r0, r4
 800d782:	f7ff fd69 	bl	800d258 <rshift>
 800d786:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d78a:	3501      	adds	r5, #1
 800d78c:	42ab      	cmp	r3, r5
 800d78e:	f6ff aed0 	blt.w	800d532 <__gethex+0x20a>
 800d792:	2701      	movs	r7, #1
 800d794:	e7c0      	b.n	800d718 <__gethex+0x3f0>
 800d796:	f016 061f 	ands.w	r6, r6, #31
 800d79a:	d0fa      	beq.n	800d792 <__gethex+0x46a>
 800d79c:	4453      	add	r3, sl
 800d79e:	f1c6 0620 	rsb	r6, r6, #32
 800d7a2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800d7a6:	f000 f9d7 	bl	800db58 <__hi0bits>
 800d7aa:	42b0      	cmp	r0, r6
 800d7ac:	dbe7      	blt.n	800d77e <__gethex+0x456>
 800d7ae:	e7f0      	b.n	800d792 <__gethex+0x46a>
 800d7b0:	0800f740 	.word	0x0800f740

0800d7b4 <L_shift>:
 800d7b4:	f1c2 0208 	rsb	r2, r2, #8
 800d7b8:	0092      	lsls	r2, r2, #2
 800d7ba:	b570      	push	{r4, r5, r6, lr}
 800d7bc:	f1c2 0620 	rsb	r6, r2, #32
 800d7c0:	6843      	ldr	r3, [r0, #4]
 800d7c2:	6804      	ldr	r4, [r0, #0]
 800d7c4:	fa03 f506 	lsl.w	r5, r3, r6
 800d7c8:	432c      	orrs	r4, r5
 800d7ca:	40d3      	lsrs	r3, r2
 800d7cc:	6004      	str	r4, [r0, #0]
 800d7ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800d7d2:	4288      	cmp	r0, r1
 800d7d4:	d3f4      	bcc.n	800d7c0 <L_shift+0xc>
 800d7d6:	bd70      	pop	{r4, r5, r6, pc}

0800d7d8 <__match>:
 800d7d8:	b530      	push	{r4, r5, lr}
 800d7da:	6803      	ldr	r3, [r0, #0]
 800d7dc:	3301      	adds	r3, #1
 800d7de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d7e2:	b914      	cbnz	r4, 800d7ea <__match+0x12>
 800d7e4:	6003      	str	r3, [r0, #0]
 800d7e6:	2001      	movs	r0, #1
 800d7e8:	bd30      	pop	{r4, r5, pc}
 800d7ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d7ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800d7f2:	2d19      	cmp	r5, #25
 800d7f4:	bf98      	it	ls
 800d7f6:	3220      	addls	r2, #32
 800d7f8:	42a2      	cmp	r2, r4
 800d7fa:	d0f0      	beq.n	800d7de <__match+0x6>
 800d7fc:	2000      	movs	r0, #0
 800d7fe:	e7f3      	b.n	800d7e8 <__match+0x10>

0800d800 <__hexnan>:
 800d800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d804:	680b      	ldr	r3, [r1, #0]
 800d806:	115e      	asrs	r6, r3, #5
 800d808:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800d80c:	f013 031f 	ands.w	r3, r3, #31
 800d810:	b087      	sub	sp, #28
 800d812:	bf18      	it	ne
 800d814:	3604      	addne	r6, #4
 800d816:	2500      	movs	r5, #0
 800d818:	1f37      	subs	r7, r6, #4
 800d81a:	4690      	mov	r8, r2
 800d81c:	6802      	ldr	r2, [r0, #0]
 800d81e:	9301      	str	r3, [sp, #4]
 800d820:	4682      	mov	sl, r0
 800d822:	f846 5c04 	str.w	r5, [r6, #-4]
 800d826:	46b9      	mov	r9, r7
 800d828:	463c      	mov	r4, r7
 800d82a:	9502      	str	r5, [sp, #8]
 800d82c:	46ab      	mov	fp, r5
 800d82e:	7851      	ldrb	r1, [r2, #1]
 800d830:	1c53      	adds	r3, r2, #1
 800d832:	9303      	str	r3, [sp, #12]
 800d834:	b341      	cbz	r1, 800d888 <__hexnan+0x88>
 800d836:	4608      	mov	r0, r1
 800d838:	9205      	str	r2, [sp, #20]
 800d83a:	9104      	str	r1, [sp, #16]
 800d83c:	f7ff fd5e 	bl	800d2fc <__hexdig_fun>
 800d840:	2800      	cmp	r0, #0
 800d842:	d14f      	bne.n	800d8e4 <__hexnan+0xe4>
 800d844:	9904      	ldr	r1, [sp, #16]
 800d846:	9a05      	ldr	r2, [sp, #20]
 800d848:	2920      	cmp	r1, #32
 800d84a:	d818      	bhi.n	800d87e <__hexnan+0x7e>
 800d84c:	9b02      	ldr	r3, [sp, #8]
 800d84e:	459b      	cmp	fp, r3
 800d850:	dd13      	ble.n	800d87a <__hexnan+0x7a>
 800d852:	454c      	cmp	r4, r9
 800d854:	d206      	bcs.n	800d864 <__hexnan+0x64>
 800d856:	2d07      	cmp	r5, #7
 800d858:	dc04      	bgt.n	800d864 <__hexnan+0x64>
 800d85a:	462a      	mov	r2, r5
 800d85c:	4649      	mov	r1, r9
 800d85e:	4620      	mov	r0, r4
 800d860:	f7ff ffa8 	bl	800d7b4 <L_shift>
 800d864:	4544      	cmp	r4, r8
 800d866:	d950      	bls.n	800d90a <__hexnan+0x10a>
 800d868:	2300      	movs	r3, #0
 800d86a:	f1a4 0904 	sub.w	r9, r4, #4
 800d86e:	f844 3c04 	str.w	r3, [r4, #-4]
 800d872:	f8cd b008 	str.w	fp, [sp, #8]
 800d876:	464c      	mov	r4, r9
 800d878:	461d      	mov	r5, r3
 800d87a:	9a03      	ldr	r2, [sp, #12]
 800d87c:	e7d7      	b.n	800d82e <__hexnan+0x2e>
 800d87e:	2929      	cmp	r1, #41	; 0x29
 800d880:	d156      	bne.n	800d930 <__hexnan+0x130>
 800d882:	3202      	adds	r2, #2
 800d884:	f8ca 2000 	str.w	r2, [sl]
 800d888:	f1bb 0f00 	cmp.w	fp, #0
 800d88c:	d050      	beq.n	800d930 <__hexnan+0x130>
 800d88e:	454c      	cmp	r4, r9
 800d890:	d206      	bcs.n	800d8a0 <__hexnan+0xa0>
 800d892:	2d07      	cmp	r5, #7
 800d894:	dc04      	bgt.n	800d8a0 <__hexnan+0xa0>
 800d896:	462a      	mov	r2, r5
 800d898:	4649      	mov	r1, r9
 800d89a:	4620      	mov	r0, r4
 800d89c:	f7ff ff8a 	bl	800d7b4 <L_shift>
 800d8a0:	4544      	cmp	r4, r8
 800d8a2:	d934      	bls.n	800d90e <__hexnan+0x10e>
 800d8a4:	f1a8 0204 	sub.w	r2, r8, #4
 800d8a8:	4623      	mov	r3, r4
 800d8aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800d8ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800d8b2:	429f      	cmp	r7, r3
 800d8b4:	d2f9      	bcs.n	800d8aa <__hexnan+0xaa>
 800d8b6:	1b3b      	subs	r3, r7, r4
 800d8b8:	f023 0303 	bic.w	r3, r3, #3
 800d8bc:	3304      	adds	r3, #4
 800d8be:	3401      	adds	r4, #1
 800d8c0:	3e03      	subs	r6, #3
 800d8c2:	42b4      	cmp	r4, r6
 800d8c4:	bf88      	it	hi
 800d8c6:	2304      	movhi	r3, #4
 800d8c8:	4443      	add	r3, r8
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f843 2b04 	str.w	r2, [r3], #4
 800d8d0:	429f      	cmp	r7, r3
 800d8d2:	d2fb      	bcs.n	800d8cc <__hexnan+0xcc>
 800d8d4:	683b      	ldr	r3, [r7, #0]
 800d8d6:	b91b      	cbnz	r3, 800d8e0 <__hexnan+0xe0>
 800d8d8:	4547      	cmp	r7, r8
 800d8da:	d127      	bne.n	800d92c <__hexnan+0x12c>
 800d8dc:	2301      	movs	r3, #1
 800d8de:	603b      	str	r3, [r7, #0]
 800d8e0:	2005      	movs	r0, #5
 800d8e2:	e026      	b.n	800d932 <__hexnan+0x132>
 800d8e4:	3501      	adds	r5, #1
 800d8e6:	2d08      	cmp	r5, #8
 800d8e8:	f10b 0b01 	add.w	fp, fp, #1
 800d8ec:	dd06      	ble.n	800d8fc <__hexnan+0xfc>
 800d8ee:	4544      	cmp	r4, r8
 800d8f0:	d9c3      	bls.n	800d87a <__hexnan+0x7a>
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	f844 3c04 	str.w	r3, [r4, #-4]
 800d8f8:	2501      	movs	r5, #1
 800d8fa:	3c04      	subs	r4, #4
 800d8fc:	6822      	ldr	r2, [r4, #0]
 800d8fe:	f000 000f 	and.w	r0, r0, #15
 800d902:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800d906:	6022      	str	r2, [r4, #0]
 800d908:	e7b7      	b.n	800d87a <__hexnan+0x7a>
 800d90a:	2508      	movs	r5, #8
 800d90c:	e7b5      	b.n	800d87a <__hexnan+0x7a>
 800d90e:	9b01      	ldr	r3, [sp, #4]
 800d910:	2b00      	cmp	r3, #0
 800d912:	d0df      	beq.n	800d8d4 <__hexnan+0xd4>
 800d914:	f04f 32ff 	mov.w	r2, #4294967295
 800d918:	f1c3 0320 	rsb	r3, r3, #32
 800d91c:	fa22 f303 	lsr.w	r3, r2, r3
 800d920:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d924:	401a      	ands	r2, r3
 800d926:	f846 2c04 	str.w	r2, [r6, #-4]
 800d92a:	e7d3      	b.n	800d8d4 <__hexnan+0xd4>
 800d92c:	3f04      	subs	r7, #4
 800d92e:	e7d1      	b.n	800d8d4 <__hexnan+0xd4>
 800d930:	2004      	movs	r0, #4
 800d932:	b007      	add	sp, #28
 800d934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d938 <_localeconv_r>:
 800d938:	4800      	ldr	r0, [pc, #0]	; (800d93c <_localeconv_r+0x4>)
 800d93a:	4770      	bx	lr
 800d93c:	2000027c 	.word	0x2000027c

0800d940 <malloc>:
 800d940:	4b02      	ldr	r3, [pc, #8]	; (800d94c <malloc+0xc>)
 800d942:	4601      	mov	r1, r0
 800d944:	6818      	ldr	r0, [r3, #0]
 800d946:	f000 bd59 	b.w	800e3fc <_malloc_r>
 800d94a:	bf00      	nop
 800d94c:	20000124 	.word	0x20000124

0800d950 <__ascii_mbtowc>:
 800d950:	b082      	sub	sp, #8
 800d952:	b901      	cbnz	r1, 800d956 <__ascii_mbtowc+0x6>
 800d954:	a901      	add	r1, sp, #4
 800d956:	b142      	cbz	r2, 800d96a <__ascii_mbtowc+0x1a>
 800d958:	b14b      	cbz	r3, 800d96e <__ascii_mbtowc+0x1e>
 800d95a:	7813      	ldrb	r3, [r2, #0]
 800d95c:	600b      	str	r3, [r1, #0]
 800d95e:	7812      	ldrb	r2, [r2, #0]
 800d960:	1e10      	subs	r0, r2, #0
 800d962:	bf18      	it	ne
 800d964:	2001      	movne	r0, #1
 800d966:	b002      	add	sp, #8
 800d968:	4770      	bx	lr
 800d96a:	4610      	mov	r0, r2
 800d96c:	e7fb      	b.n	800d966 <__ascii_mbtowc+0x16>
 800d96e:	f06f 0001 	mvn.w	r0, #1
 800d972:	e7f8      	b.n	800d966 <__ascii_mbtowc+0x16>

0800d974 <_Balloc>:
 800d974:	b570      	push	{r4, r5, r6, lr}
 800d976:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d978:	4604      	mov	r4, r0
 800d97a:	460d      	mov	r5, r1
 800d97c:	b976      	cbnz	r6, 800d99c <_Balloc+0x28>
 800d97e:	2010      	movs	r0, #16
 800d980:	f7ff ffde 	bl	800d940 <malloc>
 800d984:	4602      	mov	r2, r0
 800d986:	6260      	str	r0, [r4, #36]	; 0x24
 800d988:	b920      	cbnz	r0, 800d994 <_Balloc+0x20>
 800d98a:	4b18      	ldr	r3, [pc, #96]	; (800d9ec <_Balloc+0x78>)
 800d98c:	4818      	ldr	r0, [pc, #96]	; (800d9f0 <_Balloc+0x7c>)
 800d98e:	2166      	movs	r1, #102	; 0x66
 800d990:	f7fe fdb8 	bl	800c504 <__assert_func>
 800d994:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d998:	6006      	str	r6, [r0, #0]
 800d99a:	60c6      	str	r6, [r0, #12]
 800d99c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d99e:	68f3      	ldr	r3, [r6, #12]
 800d9a0:	b183      	cbz	r3, 800d9c4 <_Balloc+0x50>
 800d9a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9a4:	68db      	ldr	r3, [r3, #12]
 800d9a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d9aa:	b9b8      	cbnz	r0, 800d9dc <_Balloc+0x68>
 800d9ac:	2101      	movs	r1, #1
 800d9ae:	fa01 f605 	lsl.w	r6, r1, r5
 800d9b2:	1d72      	adds	r2, r6, #5
 800d9b4:	0092      	lsls	r2, r2, #2
 800d9b6:	4620      	mov	r0, r4
 800d9b8:	f000 fc9d 	bl	800e2f6 <_calloc_r>
 800d9bc:	b160      	cbz	r0, 800d9d8 <_Balloc+0x64>
 800d9be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d9c2:	e00e      	b.n	800d9e2 <_Balloc+0x6e>
 800d9c4:	2221      	movs	r2, #33	; 0x21
 800d9c6:	2104      	movs	r1, #4
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	f000 fc94 	bl	800e2f6 <_calloc_r>
 800d9ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9d0:	60f0      	str	r0, [r6, #12]
 800d9d2:	68db      	ldr	r3, [r3, #12]
 800d9d4:	2b00      	cmp	r3, #0
 800d9d6:	d1e4      	bne.n	800d9a2 <_Balloc+0x2e>
 800d9d8:	2000      	movs	r0, #0
 800d9da:	bd70      	pop	{r4, r5, r6, pc}
 800d9dc:	6802      	ldr	r2, [r0, #0]
 800d9de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d9e8:	e7f7      	b.n	800d9da <_Balloc+0x66>
 800d9ea:	bf00      	nop
 800d9ec:	0800f628 	.word	0x0800f628
 800d9f0:	0800f7cc 	.word	0x0800f7cc

0800d9f4 <_Bfree>:
 800d9f4:	b570      	push	{r4, r5, r6, lr}
 800d9f6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d9f8:	4605      	mov	r5, r0
 800d9fa:	460c      	mov	r4, r1
 800d9fc:	b976      	cbnz	r6, 800da1c <_Bfree+0x28>
 800d9fe:	2010      	movs	r0, #16
 800da00:	f7ff ff9e 	bl	800d940 <malloc>
 800da04:	4602      	mov	r2, r0
 800da06:	6268      	str	r0, [r5, #36]	; 0x24
 800da08:	b920      	cbnz	r0, 800da14 <_Bfree+0x20>
 800da0a:	4b09      	ldr	r3, [pc, #36]	; (800da30 <_Bfree+0x3c>)
 800da0c:	4809      	ldr	r0, [pc, #36]	; (800da34 <_Bfree+0x40>)
 800da0e:	218a      	movs	r1, #138	; 0x8a
 800da10:	f7fe fd78 	bl	800c504 <__assert_func>
 800da14:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800da18:	6006      	str	r6, [r0, #0]
 800da1a:	60c6      	str	r6, [r0, #12]
 800da1c:	b13c      	cbz	r4, 800da2e <_Bfree+0x3a>
 800da1e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800da20:	6862      	ldr	r2, [r4, #4]
 800da22:	68db      	ldr	r3, [r3, #12]
 800da24:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800da28:	6021      	str	r1, [r4, #0]
 800da2a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800da2e:	bd70      	pop	{r4, r5, r6, pc}
 800da30:	0800f628 	.word	0x0800f628
 800da34:	0800f7cc 	.word	0x0800f7cc

0800da38 <__multadd>:
 800da38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da3c:	690d      	ldr	r5, [r1, #16]
 800da3e:	4607      	mov	r7, r0
 800da40:	460c      	mov	r4, r1
 800da42:	461e      	mov	r6, r3
 800da44:	f101 0c14 	add.w	ip, r1, #20
 800da48:	2000      	movs	r0, #0
 800da4a:	f8dc 3000 	ldr.w	r3, [ip]
 800da4e:	b299      	uxth	r1, r3
 800da50:	fb02 6101 	mla	r1, r2, r1, r6
 800da54:	0c1e      	lsrs	r6, r3, #16
 800da56:	0c0b      	lsrs	r3, r1, #16
 800da58:	fb02 3306 	mla	r3, r2, r6, r3
 800da5c:	b289      	uxth	r1, r1
 800da5e:	3001      	adds	r0, #1
 800da60:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800da64:	4285      	cmp	r5, r0
 800da66:	f84c 1b04 	str.w	r1, [ip], #4
 800da6a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800da6e:	dcec      	bgt.n	800da4a <__multadd+0x12>
 800da70:	b30e      	cbz	r6, 800dab6 <__multadd+0x7e>
 800da72:	68a3      	ldr	r3, [r4, #8]
 800da74:	42ab      	cmp	r3, r5
 800da76:	dc19      	bgt.n	800daac <__multadd+0x74>
 800da78:	6861      	ldr	r1, [r4, #4]
 800da7a:	4638      	mov	r0, r7
 800da7c:	3101      	adds	r1, #1
 800da7e:	f7ff ff79 	bl	800d974 <_Balloc>
 800da82:	4680      	mov	r8, r0
 800da84:	b928      	cbnz	r0, 800da92 <__multadd+0x5a>
 800da86:	4602      	mov	r2, r0
 800da88:	4b0c      	ldr	r3, [pc, #48]	; (800dabc <__multadd+0x84>)
 800da8a:	480d      	ldr	r0, [pc, #52]	; (800dac0 <__multadd+0x88>)
 800da8c:	21b5      	movs	r1, #181	; 0xb5
 800da8e:	f7fe fd39 	bl	800c504 <__assert_func>
 800da92:	6922      	ldr	r2, [r4, #16]
 800da94:	3202      	adds	r2, #2
 800da96:	f104 010c 	add.w	r1, r4, #12
 800da9a:	0092      	lsls	r2, r2, #2
 800da9c:	300c      	adds	r0, #12
 800da9e:	f7fd fa05 	bl	800aeac <memcpy>
 800daa2:	4621      	mov	r1, r4
 800daa4:	4638      	mov	r0, r7
 800daa6:	f7ff ffa5 	bl	800d9f4 <_Bfree>
 800daaa:	4644      	mov	r4, r8
 800daac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dab0:	3501      	adds	r5, #1
 800dab2:	615e      	str	r6, [r3, #20]
 800dab4:	6125      	str	r5, [r4, #16]
 800dab6:	4620      	mov	r0, r4
 800dab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dabc:	0800f740 	.word	0x0800f740
 800dac0:	0800f7cc 	.word	0x0800f7cc

0800dac4 <__s2b>:
 800dac4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dac8:	460c      	mov	r4, r1
 800daca:	4615      	mov	r5, r2
 800dacc:	461f      	mov	r7, r3
 800dace:	2209      	movs	r2, #9
 800dad0:	3308      	adds	r3, #8
 800dad2:	4606      	mov	r6, r0
 800dad4:	fb93 f3f2 	sdiv	r3, r3, r2
 800dad8:	2100      	movs	r1, #0
 800dada:	2201      	movs	r2, #1
 800dadc:	429a      	cmp	r2, r3
 800dade:	db09      	blt.n	800daf4 <__s2b+0x30>
 800dae0:	4630      	mov	r0, r6
 800dae2:	f7ff ff47 	bl	800d974 <_Balloc>
 800dae6:	b940      	cbnz	r0, 800dafa <__s2b+0x36>
 800dae8:	4602      	mov	r2, r0
 800daea:	4b19      	ldr	r3, [pc, #100]	; (800db50 <__s2b+0x8c>)
 800daec:	4819      	ldr	r0, [pc, #100]	; (800db54 <__s2b+0x90>)
 800daee:	21ce      	movs	r1, #206	; 0xce
 800daf0:	f7fe fd08 	bl	800c504 <__assert_func>
 800daf4:	0052      	lsls	r2, r2, #1
 800daf6:	3101      	adds	r1, #1
 800daf8:	e7f0      	b.n	800dadc <__s2b+0x18>
 800dafa:	9b08      	ldr	r3, [sp, #32]
 800dafc:	6143      	str	r3, [r0, #20]
 800dafe:	2d09      	cmp	r5, #9
 800db00:	f04f 0301 	mov.w	r3, #1
 800db04:	6103      	str	r3, [r0, #16]
 800db06:	dd16      	ble.n	800db36 <__s2b+0x72>
 800db08:	f104 0909 	add.w	r9, r4, #9
 800db0c:	46c8      	mov	r8, r9
 800db0e:	442c      	add	r4, r5
 800db10:	f818 3b01 	ldrb.w	r3, [r8], #1
 800db14:	4601      	mov	r1, r0
 800db16:	3b30      	subs	r3, #48	; 0x30
 800db18:	220a      	movs	r2, #10
 800db1a:	4630      	mov	r0, r6
 800db1c:	f7ff ff8c 	bl	800da38 <__multadd>
 800db20:	45a0      	cmp	r8, r4
 800db22:	d1f5      	bne.n	800db10 <__s2b+0x4c>
 800db24:	f1a5 0408 	sub.w	r4, r5, #8
 800db28:	444c      	add	r4, r9
 800db2a:	1b2d      	subs	r5, r5, r4
 800db2c:	1963      	adds	r3, r4, r5
 800db2e:	42bb      	cmp	r3, r7
 800db30:	db04      	blt.n	800db3c <__s2b+0x78>
 800db32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db36:	340a      	adds	r4, #10
 800db38:	2509      	movs	r5, #9
 800db3a:	e7f6      	b.n	800db2a <__s2b+0x66>
 800db3c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800db40:	4601      	mov	r1, r0
 800db42:	3b30      	subs	r3, #48	; 0x30
 800db44:	220a      	movs	r2, #10
 800db46:	4630      	mov	r0, r6
 800db48:	f7ff ff76 	bl	800da38 <__multadd>
 800db4c:	e7ee      	b.n	800db2c <__s2b+0x68>
 800db4e:	bf00      	nop
 800db50:	0800f740 	.word	0x0800f740
 800db54:	0800f7cc 	.word	0x0800f7cc

0800db58 <__hi0bits>:
 800db58:	0c03      	lsrs	r3, r0, #16
 800db5a:	041b      	lsls	r3, r3, #16
 800db5c:	b9d3      	cbnz	r3, 800db94 <__hi0bits+0x3c>
 800db5e:	0400      	lsls	r0, r0, #16
 800db60:	2310      	movs	r3, #16
 800db62:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800db66:	bf04      	itt	eq
 800db68:	0200      	lsleq	r0, r0, #8
 800db6a:	3308      	addeq	r3, #8
 800db6c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800db70:	bf04      	itt	eq
 800db72:	0100      	lsleq	r0, r0, #4
 800db74:	3304      	addeq	r3, #4
 800db76:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800db7a:	bf04      	itt	eq
 800db7c:	0080      	lsleq	r0, r0, #2
 800db7e:	3302      	addeq	r3, #2
 800db80:	2800      	cmp	r0, #0
 800db82:	db05      	blt.n	800db90 <__hi0bits+0x38>
 800db84:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800db88:	f103 0301 	add.w	r3, r3, #1
 800db8c:	bf08      	it	eq
 800db8e:	2320      	moveq	r3, #32
 800db90:	4618      	mov	r0, r3
 800db92:	4770      	bx	lr
 800db94:	2300      	movs	r3, #0
 800db96:	e7e4      	b.n	800db62 <__hi0bits+0xa>

0800db98 <__lo0bits>:
 800db98:	6803      	ldr	r3, [r0, #0]
 800db9a:	f013 0207 	ands.w	r2, r3, #7
 800db9e:	4601      	mov	r1, r0
 800dba0:	d00b      	beq.n	800dbba <__lo0bits+0x22>
 800dba2:	07da      	lsls	r2, r3, #31
 800dba4:	d423      	bmi.n	800dbee <__lo0bits+0x56>
 800dba6:	0798      	lsls	r0, r3, #30
 800dba8:	bf49      	itett	mi
 800dbaa:	085b      	lsrmi	r3, r3, #1
 800dbac:	089b      	lsrpl	r3, r3, #2
 800dbae:	2001      	movmi	r0, #1
 800dbb0:	600b      	strmi	r3, [r1, #0]
 800dbb2:	bf5c      	itt	pl
 800dbb4:	600b      	strpl	r3, [r1, #0]
 800dbb6:	2002      	movpl	r0, #2
 800dbb8:	4770      	bx	lr
 800dbba:	b298      	uxth	r0, r3
 800dbbc:	b9a8      	cbnz	r0, 800dbea <__lo0bits+0x52>
 800dbbe:	0c1b      	lsrs	r3, r3, #16
 800dbc0:	2010      	movs	r0, #16
 800dbc2:	b2da      	uxtb	r2, r3
 800dbc4:	b90a      	cbnz	r2, 800dbca <__lo0bits+0x32>
 800dbc6:	3008      	adds	r0, #8
 800dbc8:	0a1b      	lsrs	r3, r3, #8
 800dbca:	071a      	lsls	r2, r3, #28
 800dbcc:	bf04      	itt	eq
 800dbce:	091b      	lsreq	r3, r3, #4
 800dbd0:	3004      	addeq	r0, #4
 800dbd2:	079a      	lsls	r2, r3, #30
 800dbd4:	bf04      	itt	eq
 800dbd6:	089b      	lsreq	r3, r3, #2
 800dbd8:	3002      	addeq	r0, #2
 800dbda:	07da      	lsls	r2, r3, #31
 800dbdc:	d403      	bmi.n	800dbe6 <__lo0bits+0x4e>
 800dbde:	085b      	lsrs	r3, r3, #1
 800dbe0:	f100 0001 	add.w	r0, r0, #1
 800dbe4:	d005      	beq.n	800dbf2 <__lo0bits+0x5a>
 800dbe6:	600b      	str	r3, [r1, #0]
 800dbe8:	4770      	bx	lr
 800dbea:	4610      	mov	r0, r2
 800dbec:	e7e9      	b.n	800dbc2 <__lo0bits+0x2a>
 800dbee:	2000      	movs	r0, #0
 800dbf0:	4770      	bx	lr
 800dbf2:	2020      	movs	r0, #32
 800dbf4:	4770      	bx	lr
	...

0800dbf8 <__i2b>:
 800dbf8:	b510      	push	{r4, lr}
 800dbfa:	460c      	mov	r4, r1
 800dbfc:	2101      	movs	r1, #1
 800dbfe:	f7ff feb9 	bl	800d974 <_Balloc>
 800dc02:	4602      	mov	r2, r0
 800dc04:	b928      	cbnz	r0, 800dc12 <__i2b+0x1a>
 800dc06:	4b05      	ldr	r3, [pc, #20]	; (800dc1c <__i2b+0x24>)
 800dc08:	4805      	ldr	r0, [pc, #20]	; (800dc20 <__i2b+0x28>)
 800dc0a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800dc0e:	f7fe fc79 	bl	800c504 <__assert_func>
 800dc12:	2301      	movs	r3, #1
 800dc14:	6144      	str	r4, [r0, #20]
 800dc16:	6103      	str	r3, [r0, #16]
 800dc18:	bd10      	pop	{r4, pc}
 800dc1a:	bf00      	nop
 800dc1c:	0800f740 	.word	0x0800f740
 800dc20:	0800f7cc 	.word	0x0800f7cc

0800dc24 <__multiply>:
 800dc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc28:	4691      	mov	r9, r2
 800dc2a:	690a      	ldr	r2, [r1, #16]
 800dc2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dc30:	429a      	cmp	r2, r3
 800dc32:	bfb8      	it	lt
 800dc34:	460b      	movlt	r3, r1
 800dc36:	460c      	mov	r4, r1
 800dc38:	bfbc      	itt	lt
 800dc3a:	464c      	movlt	r4, r9
 800dc3c:	4699      	movlt	r9, r3
 800dc3e:	6927      	ldr	r7, [r4, #16]
 800dc40:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dc44:	68a3      	ldr	r3, [r4, #8]
 800dc46:	6861      	ldr	r1, [r4, #4]
 800dc48:	eb07 060a 	add.w	r6, r7, sl
 800dc4c:	42b3      	cmp	r3, r6
 800dc4e:	b085      	sub	sp, #20
 800dc50:	bfb8      	it	lt
 800dc52:	3101      	addlt	r1, #1
 800dc54:	f7ff fe8e 	bl	800d974 <_Balloc>
 800dc58:	b930      	cbnz	r0, 800dc68 <__multiply+0x44>
 800dc5a:	4602      	mov	r2, r0
 800dc5c:	4b44      	ldr	r3, [pc, #272]	; (800dd70 <__multiply+0x14c>)
 800dc5e:	4845      	ldr	r0, [pc, #276]	; (800dd74 <__multiply+0x150>)
 800dc60:	f240 115d 	movw	r1, #349	; 0x15d
 800dc64:	f7fe fc4e 	bl	800c504 <__assert_func>
 800dc68:	f100 0514 	add.w	r5, r0, #20
 800dc6c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dc70:	462b      	mov	r3, r5
 800dc72:	2200      	movs	r2, #0
 800dc74:	4543      	cmp	r3, r8
 800dc76:	d321      	bcc.n	800dcbc <__multiply+0x98>
 800dc78:	f104 0314 	add.w	r3, r4, #20
 800dc7c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dc80:	f109 0314 	add.w	r3, r9, #20
 800dc84:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dc88:	9202      	str	r2, [sp, #8]
 800dc8a:	1b3a      	subs	r2, r7, r4
 800dc8c:	3a15      	subs	r2, #21
 800dc8e:	f022 0203 	bic.w	r2, r2, #3
 800dc92:	3204      	adds	r2, #4
 800dc94:	f104 0115 	add.w	r1, r4, #21
 800dc98:	428f      	cmp	r7, r1
 800dc9a:	bf38      	it	cc
 800dc9c:	2204      	movcc	r2, #4
 800dc9e:	9201      	str	r2, [sp, #4]
 800dca0:	9a02      	ldr	r2, [sp, #8]
 800dca2:	9303      	str	r3, [sp, #12]
 800dca4:	429a      	cmp	r2, r3
 800dca6:	d80c      	bhi.n	800dcc2 <__multiply+0x9e>
 800dca8:	2e00      	cmp	r6, #0
 800dcaa:	dd03      	ble.n	800dcb4 <__multiply+0x90>
 800dcac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d05a      	beq.n	800dd6a <__multiply+0x146>
 800dcb4:	6106      	str	r6, [r0, #16]
 800dcb6:	b005      	add	sp, #20
 800dcb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcbc:	f843 2b04 	str.w	r2, [r3], #4
 800dcc0:	e7d8      	b.n	800dc74 <__multiply+0x50>
 800dcc2:	f8b3 a000 	ldrh.w	sl, [r3]
 800dcc6:	f1ba 0f00 	cmp.w	sl, #0
 800dcca:	d024      	beq.n	800dd16 <__multiply+0xf2>
 800dccc:	f104 0e14 	add.w	lr, r4, #20
 800dcd0:	46a9      	mov	r9, r5
 800dcd2:	f04f 0c00 	mov.w	ip, #0
 800dcd6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800dcda:	f8d9 1000 	ldr.w	r1, [r9]
 800dcde:	fa1f fb82 	uxth.w	fp, r2
 800dce2:	b289      	uxth	r1, r1
 800dce4:	fb0a 110b 	mla	r1, sl, fp, r1
 800dce8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800dcec:	f8d9 2000 	ldr.w	r2, [r9]
 800dcf0:	4461      	add	r1, ip
 800dcf2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dcf6:	fb0a c20b 	mla	r2, sl, fp, ip
 800dcfa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dcfe:	b289      	uxth	r1, r1
 800dd00:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800dd04:	4577      	cmp	r7, lr
 800dd06:	f849 1b04 	str.w	r1, [r9], #4
 800dd0a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800dd0e:	d8e2      	bhi.n	800dcd6 <__multiply+0xb2>
 800dd10:	9a01      	ldr	r2, [sp, #4]
 800dd12:	f845 c002 	str.w	ip, [r5, r2]
 800dd16:	9a03      	ldr	r2, [sp, #12]
 800dd18:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800dd1c:	3304      	adds	r3, #4
 800dd1e:	f1b9 0f00 	cmp.w	r9, #0
 800dd22:	d020      	beq.n	800dd66 <__multiply+0x142>
 800dd24:	6829      	ldr	r1, [r5, #0]
 800dd26:	f104 0c14 	add.w	ip, r4, #20
 800dd2a:	46ae      	mov	lr, r5
 800dd2c:	f04f 0a00 	mov.w	sl, #0
 800dd30:	f8bc b000 	ldrh.w	fp, [ip]
 800dd34:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800dd38:	fb09 220b 	mla	r2, r9, fp, r2
 800dd3c:	4492      	add	sl, r2
 800dd3e:	b289      	uxth	r1, r1
 800dd40:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800dd44:	f84e 1b04 	str.w	r1, [lr], #4
 800dd48:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dd4c:	f8be 1000 	ldrh.w	r1, [lr]
 800dd50:	0c12      	lsrs	r2, r2, #16
 800dd52:	fb09 1102 	mla	r1, r9, r2, r1
 800dd56:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800dd5a:	4567      	cmp	r7, ip
 800dd5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800dd60:	d8e6      	bhi.n	800dd30 <__multiply+0x10c>
 800dd62:	9a01      	ldr	r2, [sp, #4]
 800dd64:	50a9      	str	r1, [r5, r2]
 800dd66:	3504      	adds	r5, #4
 800dd68:	e79a      	b.n	800dca0 <__multiply+0x7c>
 800dd6a:	3e01      	subs	r6, #1
 800dd6c:	e79c      	b.n	800dca8 <__multiply+0x84>
 800dd6e:	bf00      	nop
 800dd70:	0800f740 	.word	0x0800f740
 800dd74:	0800f7cc 	.word	0x0800f7cc

0800dd78 <__pow5mult>:
 800dd78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd7c:	4615      	mov	r5, r2
 800dd7e:	f012 0203 	ands.w	r2, r2, #3
 800dd82:	4606      	mov	r6, r0
 800dd84:	460f      	mov	r7, r1
 800dd86:	d007      	beq.n	800dd98 <__pow5mult+0x20>
 800dd88:	4c25      	ldr	r4, [pc, #148]	; (800de20 <__pow5mult+0xa8>)
 800dd8a:	3a01      	subs	r2, #1
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dd92:	f7ff fe51 	bl	800da38 <__multadd>
 800dd96:	4607      	mov	r7, r0
 800dd98:	10ad      	asrs	r5, r5, #2
 800dd9a:	d03d      	beq.n	800de18 <__pow5mult+0xa0>
 800dd9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dd9e:	b97c      	cbnz	r4, 800ddc0 <__pow5mult+0x48>
 800dda0:	2010      	movs	r0, #16
 800dda2:	f7ff fdcd 	bl	800d940 <malloc>
 800dda6:	4602      	mov	r2, r0
 800dda8:	6270      	str	r0, [r6, #36]	; 0x24
 800ddaa:	b928      	cbnz	r0, 800ddb8 <__pow5mult+0x40>
 800ddac:	4b1d      	ldr	r3, [pc, #116]	; (800de24 <__pow5mult+0xac>)
 800ddae:	481e      	ldr	r0, [pc, #120]	; (800de28 <__pow5mult+0xb0>)
 800ddb0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ddb4:	f7fe fba6 	bl	800c504 <__assert_func>
 800ddb8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddbc:	6004      	str	r4, [r0, #0]
 800ddbe:	60c4      	str	r4, [r0, #12]
 800ddc0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ddc4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ddc8:	b94c      	cbnz	r4, 800ddde <__pow5mult+0x66>
 800ddca:	f240 2171 	movw	r1, #625	; 0x271
 800ddce:	4630      	mov	r0, r6
 800ddd0:	f7ff ff12 	bl	800dbf8 <__i2b>
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	f8c8 0008 	str.w	r0, [r8, #8]
 800ddda:	4604      	mov	r4, r0
 800dddc:	6003      	str	r3, [r0, #0]
 800ddde:	f04f 0900 	mov.w	r9, #0
 800dde2:	07eb      	lsls	r3, r5, #31
 800dde4:	d50a      	bpl.n	800ddfc <__pow5mult+0x84>
 800dde6:	4639      	mov	r1, r7
 800dde8:	4622      	mov	r2, r4
 800ddea:	4630      	mov	r0, r6
 800ddec:	f7ff ff1a 	bl	800dc24 <__multiply>
 800ddf0:	4639      	mov	r1, r7
 800ddf2:	4680      	mov	r8, r0
 800ddf4:	4630      	mov	r0, r6
 800ddf6:	f7ff fdfd 	bl	800d9f4 <_Bfree>
 800ddfa:	4647      	mov	r7, r8
 800ddfc:	106d      	asrs	r5, r5, #1
 800ddfe:	d00b      	beq.n	800de18 <__pow5mult+0xa0>
 800de00:	6820      	ldr	r0, [r4, #0]
 800de02:	b938      	cbnz	r0, 800de14 <__pow5mult+0x9c>
 800de04:	4622      	mov	r2, r4
 800de06:	4621      	mov	r1, r4
 800de08:	4630      	mov	r0, r6
 800de0a:	f7ff ff0b 	bl	800dc24 <__multiply>
 800de0e:	6020      	str	r0, [r4, #0]
 800de10:	f8c0 9000 	str.w	r9, [r0]
 800de14:	4604      	mov	r4, r0
 800de16:	e7e4      	b.n	800dde2 <__pow5mult+0x6a>
 800de18:	4638      	mov	r0, r7
 800de1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de1e:	bf00      	nop
 800de20:	0800f918 	.word	0x0800f918
 800de24:	0800f628 	.word	0x0800f628
 800de28:	0800f7cc 	.word	0x0800f7cc

0800de2c <__lshift>:
 800de2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de30:	460c      	mov	r4, r1
 800de32:	6849      	ldr	r1, [r1, #4]
 800de34:	6923      	ldr	r3, [r4, #16]
 800de36:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800de3a:	68a3      	ldr	r3, [r4, #8]
 800de3c:	4607      	mov	r7, r0
 800de3e:	4691      	mov	r9, r2
 800de40:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de44:	f108 0601 	add.w	r6, r8, #1
 800de48:	42b3      	cmp	r3, r6
 800de4a:	db0b      	blt.n	800de64 <__lshift+0x38>
 800de4c:	4638      	mov	r0, r7
 800de4e:	f7ff fd91 	bl	800d974 <_Balloc>
 800de52:	4605      	mov	r5, r0
 800de54:	b948      	cbnz	r0, 800de6a <__lshift+0x3e>
 800de56:	4602      	mov	r2, r0
 800de58:	4b2a      	ldr	r3, [pc, #168]	; (800df04 <__lshift+0xd8>)
 800de5a:	482b      	ldr	r0, [pc, #172]	; (800df08 <__lshift+0xdc>)
 800de5c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800de60:	f7fe fb50 	bl	800c504 <__assert_func>
 800de64:	3101      	adds	r1, #1
 800de66:	005b      	lsls	r3, r3, #1
 800de68:	e7ee      	b.n	800de48 <__lshift+0x1c>
 800de6a:	2300      	movs	r3, #0
 800de6c:	f100 0114 	add.w	r1, r0, #20
 800de70:	f100 0210 	add.w	r2, r0, #16
 800de74:	4618      	mov	r0, r3
 800de76:	4553      	cmp	r3, sl
 800de78:	db37      	blt.n	800deea <__lshift+0xbe>
 800de7a:	6920      	ldr	r0, [r4, #16]
 800de7c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de80:	f104 0314 	add.w	r3, r4, #20
 800de84:	f019 091f 	ands.w	r9, r9, #31
 800de88:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de8c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800de90:	d02f      	beq.n	800def2 <__lshift+0xc6>
 800de92:	f1c9 0e20 	rsb	lr, r9, #32
 800de96:	468a      	mov	sl, r1
 800de98:	f04f 0c00 	mov.w	ip, #0
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	fa02 f209 	lsl.w	r2, r2, r9
 800dea2:	ea42 020c 	orr.w	r2, r2, ip
 800dea6:	f84a 2b04 	str.w	r2, [sl], #4
 800deaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800deae:	4298      	cmp	r0, r3
 800deb0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800deb4:	d8f2      	bhi.n	800de9c <__lshift+0x70>
 800deb6:	1b03      	subs	r3, r0, r4
 800deb8:	3b15      	subs	r3, #21
 800deba:	f023 0303 	bic.w	r3, r3, #3
 800debe:	3304      	adds	r3, #4
 800dec0:	f104 0215 	add.w	r2, r4, #21
 800dec4:	4290      	cmp	r0, r2
 800dec6:	bf38      	it	cc
 800dec8:	2304      	movcc	r3, #4
 800deca:	f841 c003 	str.w	ip, [r1, r3]
 800dece:	f1bc 0f00 	cmp.w	ip, #0
 800ded2:	d001      	beq.n	800ded8 <__lshift+0xac>
 800ded4:	f108 0602 	add.w	r6, r8, #2
 800ded8:	3e01      	subs	r6, #1
 800deda:	4638      	mov	r0, r7
 800dedc:	612e      	str	r6, [r5, #16]
 800dede:	4621      	mov	r1, r4
 800dee0:	f7ff fd88 	bl	800d9f4 <_Bfree>
 800dee4:	4628      	mov	r0, r5
 800dee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deea:	f842 0f04 	str.w	r0, [r2, #4]!
 800deee:	3301      	adds	r3, #1
 800def0:	e7c1      	b.n	800de76 <__lshift+0x4a>
 800def2:	3904      	subs	r1, #4
 800def4:	f853 2b04 	ldr.w	r2, [r3], #4
 800def8:	f841 2f04 	str.w	r2, [r1, #4]!
 800defc:	4298      	cmp	r0, r3
 800defe:	d8f9      	bhi.n	800def4 <__lshift+0xc8>
 800df00:	e7ea      	b.n	800ded8 <__lshift+0xac>
 800df02:	bf00      	nop
 800df04:	0800f740 	.word	0x0800f740
 800df08:	0800f7cc 	.word	0x0800f7cc

0800df0c <__mcmp>:
 800df0c:	b530      	push	{r4, r5, lr}
 800df0e:	6902      	ldr	r2, [r0, #16]
 800df10:	690c      	ldr	r4, [r1, #16]
 800df12:	1b12      	subs	r2, r2, r4
 800df14:	d10e      	bne.n	800df34 <__mcmp+0x28>
 800df16:	f100 0314 	add.w	r3, r0, #20
 800df1a:	3114      	adds	r1, #20
 800df1c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800df20:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800df24:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800df28:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800df2c:	42a5      	cmp	r5, r4
 800df2e:	d003      	beq.n	800df38 <__mcmp+0x2c>
 800df30:	d305      	bcc.n	800df3e <__mcmp+0x32>
 800df32:	2201      	movs	r2, #1
 800df34:	4610      	mov	r0, r2
 800df36:	bd30      	pop	{r4, r5, pc}
 800df38:	4283      	cmp	r3, r0
 800df3a:	d3f3      	bcc.n	800df24 <__mcmp+0x18>
 800df3c:	e7fa      	b.n	800df34 <__mcmp+0x28>
 800df3e:	f04f 32ff 	mov.w	r2, #4294967295
 800df42:	e7f7      	b.n	800df34 <__mcmp+0x28>

0800df44 <__mdiff>:
 800df44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df48:	460c      	mov	r4, r1
 800df4a:	4606      	mov	r6, r0
 800df4c:	4611      	mov	r1, r2
 800df4e:	4620      	mov	r0, r4
 800df50:	4690      	mov	r8, r2
 800df52:	f7ff ffdb 	bl	800df0c <__mcmp>
 800df56:	1e05      	subs	r5, r0, #0
 800df58:	d110      	bne.n	800df7c <__mdiff+0x38>
 800df5a:	4629      	mov	r1, r5
 800df5c:	4630      	mov	r0, r6
 800df5e:	f7ff fd09 	bl	800d974 <_Balloc>
 800df62:	b930      	cbnz	r0, 800df72 <__mdiff+0x2e>
 800df64:	4b3a      	ldr	r3, [pc, #232]	; (800e050 <__mdiff+0x10c>)
 800df66:	4602      	mov	r2, r0
 800df68:	f240 2132 	movw	r1, #562	; 0x232
 800df6c:	4839      	ldr	r0, [pc, #228]	; (800e054 <__mdiff+0x110>)
 800df6e:	f7fe fac9 	bl	800c504 <__assert_func>
 800df72:	2301      	movs	r3, #1
 800df74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800df78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df7c:	bfa4      	itt	ge
 800df7e:	4643      	movge	r3, r8
 800df80:	46a0      	movge	r8, r4
 800df82:	4630      	mov	r0, r6
 800df84:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800df88:	bfa6      	itte	ge
 800df8a:	461c      	movge	r4, r3
 800df8c:	2500      	movge	r5, #0
 800df8e:	2501      	movlt	r5, #1
 800df90:	f7ff fcf0 	bl	800d974 <_Balloc>
 800df94:	b920      	cbnz	r0, 800dfa0 <__mdiff+0x5c>
 800df96:	4b2e      	ldr	r3, [pc, #184]	; (800e050 <__mdiff+0x10c>)
 800df98:	4602      	mov	r2, r0
 800df9a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800df9e:	e7e5      	b.n	800df6c <__mdiff+0x28>
 800dfa0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dfa4:	6926      	ldr	r6, [r4, #16]
 800dfa6:	60c5      	str	r5, [r0, #12]
 800dfa8:	f104 0914 	add.w	r9, r4, #20
 800dfac:	f108 0514 	add.w	r5, r8, #20
 800dfb0:	f100 0e14 	add.w	lr, r0, #20
 800dfb4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800dfb8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800dfbc:	f108 0210 	add.w	r2, r8, #16
 800dfc0:	46f2      	mov	sl, lr
 800dfc2:	2100      	movs	r1, #0
 800dfc4:	f859 3b04 	ldr.w	r3, [r9], #4
 800dfc8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dfcc:	fa1f f883 	uxth.w	r8, r3
 800dfd0:	fa11 f18b 	uxtah	r1, r1, fp
 800dfd4:	0c1b      	lsrs	r3, r3, #16
 800dfd6:	eba1 0808 	sub.w	r8, r1, r8
 800dfda:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800dfde:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800dfe2:	fa1f f888 	uxth.w	r8, r8
 800dfe6:	1419      	asrs	r1, r3, #16
 800dfe8:	454e      	cmp	r6, r9
 800dfea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800dfee:	f84a 3b04 	str.w	r3, [sl], #4
 800dff2:	d8e7      	bhi.n	800dfc4 <__mdiff+0x80>
 800dff4:	1b33      	subs	r3, r6, r4
 800dff6:	3b15      	subs	r3, #21
 800dff8:	f023 0303 	bic.w	r3, r3, #3
 800dffc:	3304      	adds	r3, #4
 800dffe:	3415      	adds	r4, #21
 800e000:	42a6      	cmp	r6, r4
 800e002:	bf38      	it	cc
 800e004:	2304      	movcc	r3, #4
 800e006:	441d      	add	r5, r3
 800e008:	4473      	add	r3, lr
 800e00a:	469e      	mov	lr, r3
 800e00c:	462e      	mov	r6, r5
 800e00e:	4566      	cmp	r6, ip
 800e010:	d30e      	bcc.n	800e030 <__mdiff+0xec>
 800e012:	f10c 0203 	add.w	r2, ip, #3
 800e016:	1b52      	subs	r2, r2, r5
 800e018:	f022 0203 	bic.w	r2, r2, #3
 800e01c:	3d03      	subs	r5, #3
 800e01e:	45ac      	cmp	ip, r5
 800e020:	bf38      	it	cc
 800e022:	2200      	movcc	r2, #0
 800e024:	441a      	add	r2, r3
 800e026:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e02a:	b17b      	cbz	r3, 800e04c <__mdiff+0x108>
 800e02c:	6107      	str	r7, [r0, #16]
 800e02e:	e7a3      	b.n	800df78 <__mdiff+0x34>
 800e030:	f856 8b04 	ldr.w	r8, [r6], #4
 800e034:	fa11 f288 	uxtah	r2, r1, r8
 800e038:	1414      	asrs	r4, r2, #16
 800e03a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e03e:	b292      	uxth	r2, r2
 800e040:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e044:	f84e 2b04 	str.w	r2, [lr], #4
 800e048:	1421      	asrs	r1, r4, #16
 800e04a:	e7e0      	b.n	800e00e <__mdiff+0xca>
 800e04c:	3f01      	subs	r7, #1
 800e04e:	e7ea      	b.n	800e026 <__mdiff+0xe2>
 800e050:	0800f740 	.word	0x0800f740
 800e054:	0800f7cc 	.word	0x0800f7cc

0800e058 <__ulp>:
 800e058:	b082      	sub	sp, #8
 800e05a:	ed8d 0b00 	vstr	d0, [sp]
 800e05e:	9b01      	ldr	r3, [sp, #4]
 800e060:	4912      	ldr	r1, [pc, #72]	; (800e0ac <__ulp+0x54>)
 800e062:	4019      	ands	r1, r3
 800e064:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e068:	2900      	cmp	r1, #0
 800e06a:	dd05      	ble.n	800e078 <__ulp+0x20>
 800e06c:	2200      	movs	r2, #0
 800e06e:	460b      	mov	r3, r1
 800e070:	ec43 2b10 	vmov	d0, r2, r3
 800e074:	b002      	add	sp, #8
 800e076:	4770      	bx	lr
 800e078:	4249      	negs	r1, r1
 800e07a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e07e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e082:	f04f 0200 	mov.w	r2, #0
 800e086:	f04f 0300 	mov.w	r3, #0
 800e08a:	da04      	bge.n	800e096 <__ulp+0x3e>
 800e08c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e090:	fa41 f300 	asr.w	r3, r1, r0
 800e094:	e7ec      	b.n	800e070 <__ulp+0x18>
 800e096:	f1a0 0114 	sub.w	r1, r0, #20
 800e09a:	291e      	cmp	r1, #30
 800e09c:	bfda      	itte	le
 800e09e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e0a2:	fa20 f101 	lsrle.w	r1, r0, r1
 800e0a6:	2101      	movgt	r1, #1
 800e0a8:	460a      	mov	r2, r1
 800e0aa:	e7e1      	b.n	800e070 <__ulp+0x18>
 800e0ac:	7ff00000 	.word	0x7ff00000

0800e0b0 <__b2d>:
 800e0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0b2:	6905      	ldr	r5, [r0, #16]
 800e0b4:	f100 0714 	add.w	r7, r0, #20
 800e0b8:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e0bc:	1f2e      	subs	r6, r5, #4
 800e0be:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e0c2:	4620      	mov	r0, r4
 800e0c4:	f7ff fd48 	bl	800db58 <__hi0bits>
 800e0c8:	f1c0 0320 	rsb	r3, r0, #32
 800e0cc:	280a      	cmp	r0, #10
 800e0ce:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e14c <__b2d+0x9c>
 800e0d2:	600b      	str	r3, [r1, #0]
 800e0d4:	dc14      	bgt.n	800e100 <__b2d+0x50>
 800e0d6:	f1c0 0e0b 	rsb	lr, r0, #11
 800e0da:	fa24 f10e 	lsr.w	r1, r4, lr
 800e0de:	42b7      	cmp	r7, r6
 800e0e0:	ea41 030c 	orr.w	r3, r1, ip
 800e0e4:	bf34      	ite	cc
 800e0e6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e0ea:	2100      	movcs	r1, #0
 800e0ec:	3015      	adds	r0, #21
 800e0ee:	fa04 f000 	lsl.w	r0, r4, r0
 800e0f2:	fa21 f10e 	lsr.w	r1, r1, lr
 800e0f6:	ea40 0201 	orr.w	r2, r0, r1
 800e0fa:	ec43 2b10 	vmov	d0, r2, r3
 800e0fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e100:	42b7      	cmp	r7, r6
 800e102:	bf3a      	itte	cc
 800e104:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e108:	f1a5 0608 	subcc.w	r6, r5, #8
 800e10c:	2100      	movcs	r1, #0
 800e10e:	380b      	subs	r0, #11
 800e110:	d017      	beq.n	800e142 <__b2d+0x92>
 800e112:	f1c0 0c20 	rsb	ip, r0, #32
 800e116:	fa04 f500 	lsl.w	r5, r4, r0
 800e11a:	42be      	cmp	r6, r7
 800e11c:	fa21 f40c 	lsr.w	r4, r1, ip
 800e120:	ea45 0504 	orr.w	r5, r5, r4
 800e124:	bf8c      	ite	hi
 800e126:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e12a:	2400      	movls	r4, #0
 800e12c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e130:	fa01 f000 	lsl.w	r0, r1, r0
 800e134:	fa24 f40c 	lsr.w	r4, r4, ip
 800e138:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e13c:	ea40 0204 	orr.w	r2, r0, r4
 800e140:	e7db      	b.n	800e0fa <__b2d+0x4a>
 800e142:	ea44 030c 	orr.w	r3, r4, ip
 800e146:	460a      	mov	r2, r1
 800e148:	e7d7      	b.n	800e0fa <__b2d+0x4a>
 800e14a:	bf00      	nop
 800e14c:	3ff00000 	.word	0x3ff00000

0800e150 <__d2b>:
 800e150:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e154:	4689      	mov	r9, r1
 800e156:	2101      	movs	r1, #1
 800e158:	ec57 6b10 	vmov	r6, r7, d0
 800e15c:	4690      	mov	r8, r2
 800e15e:	f7ff fc09 	bl	800d974 <_Balloc>
 800e162:	4604      	mov	r4, r0
 800e164:	b930      	cbnz	r0, 800e174 <__d2b+0x24>
 800e166:	4602      	mov	r2, r0
 800e168:	4b25      	ldr	r3, [pc, #148]	; (800e200 <__d2b+0xb0>)
 800e16a:	4826      	ldr	r0, [pc, #152]	; (800e204 <__d2b+0xb4>)
 800e16c:	f240 310a 	movw	r1, #778	; 0x30a
 800e170:	f7fe f9c8 	bl	800c504 <__assert_func>
 800e174:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e178:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e17c:	bb35      	cbnz	r5, 800e1cc <__d2b+0x7c>
 800e17e:	2e00      	cmp	r6, #0
 800e180:	9301      	str	r3, [sp, #4]
 800e182:	d028      	beq.n	800e1d6 <__d2b+0x86>
 800e184:	4668      	mov	r0, sp
 800e186:	9600      	str	r6, [sp, #0]
 800e188:	f7ff fd06 	bl	800db98 <__lo0bits>
 800e18c:	9900      	ldr	r1, [sp, #0]
 800e18e:	b300      	cbz	r0, 800e1d2 <__d2b+0x82>
 800e190:	9a01      	ldr	r2, [sp, #4]
 800e192:	f1c0 0320 	rsb	r3, r0, #32
 800e196:	fa02 f303 	lsl.w	r3, r2, r3
 800e19a:	430b      	orrs	r3, r1
 800e19c:	40c2      	lsrs	r2, r0
 800e19e:	6163      	str	r3, [r4, #20]
 800e1a0:	9201      	str	r2, [sp, #4]
 800e1a2:	9b01      	ldr	r3, [sp, #4]
 800e1a4:	61a3      	str	r3, [r4, #24]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	bf14      	ite	ne
 800e1aa:	2202      	movne	r2, #2
 800e1ac:	2201      	moveq	r2, #1
 800e1ae:	6122      	str	r2, [r4, #16]
 800e1b0:	b1d5      	cbz	r5, 800e1e8 <__d2b+0x98>
 800e1b2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e1b6:	4405      	add	r5, r0
 800e1b8:	f8c9 5000 	str.w	r5, [r9]
 800e1bc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e1c0:	f8c8 0000 	str.w	r0, [r8]
 800e1c4:	4620      	mov	r0, r4
 800e1c6:	b003      	add	sp, #12
 800e1c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e1cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e1d0:	e7d5      	b.n	800e17e <__d2b+0x2e>
 800e1d2:	6161      	str	r1, [r4, #20]
 800e1d4:	e7e5      	b.n	800e1a2 <__d2b+0x52>
 800e1d6:	a801      	add	r0, sp, #4
 800e1d8:	f7ff fcde 	bl	800db98 <__lo0bits>
 800e1dc:	9b01      	ldr	r3, [sp, #4]
 800e1de:	6163      	str	r3, [r4, #20]
 800e1e0:	2201      	movs	r2, #1
 800e1e2:	6122      	str	r2, [r4, #16]
 800e1e4:	3020      	adds	r0, #32
 800e1e6:	e7e3      	b.n	800e1b0 <__d2b+0x60>
 800e1e8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e1ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e1f0:	f8c9 0000 	str.w	r0, [r9]
 800e1f4:	6918      	ldr	r0, [r3, #16]
 800e1f6:	f7ff fcaf 	bl	800db58 <__hi0bits>
 800e1fa:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e1fe:	e7df      	b.n	800e1c0 <__d2b+0x70>
 800e200:	0800f740 	.word	0x0800f740
 800e204:	0800f7cc 	.word	0x0800f7cc

0800e208 <__ratio>:
 800e208:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e20c:	4688      	mov	r8, r1
 800e20e:	4669      	mov	r1, sp
 800e210:	4681      	mov	r9, r0
 800e212:	f7ff ff4d 	bl	800e0b0 <__b2d>
 800e216:	a901      	add	r1, sp, #4
 800e218:	4640      	mov	r0, r8
 800e21a:	ec55 4b10 	vmov	r4, r5, d0
 800e21e:	f7ff ff47 	bl	800e0b0 <__b2d>
 800e222:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e226:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e22a:	eba3 0c02 	sub.w	ip, r3, r2
 800e22e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e232:	1a9b      	subs	r3, r3, r2
 800e234:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e238:	ec51 0b10 	vmov	r0, r1, d0
 800e23c:	2b00      	cmp	r3, #0
 800e23e:	bfd6      	itet	le
 800e240:	460a      	movle	r2, r1
 800e242:	462a      	movgt	r2, r5
 800e244:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e248:	468b      	mov	fp, r1
 800e24a:	462f      	mov	r7, r5
 800e24c:	bfd4      	ite	le
 800e24e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e252:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e256:	4620      	mov	r0, r4
 800e258:	ee10 2a10 	vmov	r2, s0
 800e25c:	465b      	mov	r3, fp
 800e25e:	4639      	mov	r1, r7
 800e260:	f7f2 fafc 	bl	800085c <__aeabi_ddiv>
 800e264:	ec41 0b10 	vmov	d0, r0, r1
 800e268:	b003      	add	sp, #12
 800e26a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e26e <__copybits>:
 800e26e:	3901      	subs	r1, #1
 800e270:	b570      	push	{r4, r5, r6, lr}
 800e272:	1149      	asrs	r1, r1, #5
 800e274:	6914      	ldr	r4, [r2, #16]
 800e276:	3101      	adds	r1, #1
 800e278:	f102 0314 	add.w	r3, r2, #20
 800e27c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e280:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e284:	1f05      	subs	r5, r0, #4
 800e286:	42a3      	cmp	r3, r4
 800e288:	d30c      	bcc.n	800e2a4 <__copybits+0x36>
 800e28a:	1aa3      	subs	r3, r4, r2
 800e28c:	3b11      	subs	r3, #17
 800e28e:	f023 0303 	bic.w	r3, r3, #3
 800e292:	3211      	adds	r2, #17
 800e294:	42a2      	cmp	r2, r4
 800e296:	bf88      	it	hi
 800e298:	2300      	movhi	r3, #0
 800e29a:	4418      	add	r0, r3
 800e29c:	2300      	movs	r3, #0
 800e29e:	4288      	cmp	r0, r1
 800e2a0:	d305      	bcc.n	800e2ae <__copybits+0x40>
 800e2a2:	bd70      	pop	{r4, r5, r6, pc}
 800e2a4:	f853 6b04 	ldr.w	r6, [r3], #4
 800e2a8:	f845 6f04 	str.w	r6, [r5, #4]!
 800e2ac:	e7eb      	b.n	800e286 <__copybits+0x18>
 800e2ae:	f840 3b04 	str.w	r3, [r0], #4
 800e2b2:	e7f4      	b.n	800e29e <__copybits+0x30>

0800e2b4 <__any_on>:
 800e2b4:	f100 0214 	add.w	r2, r0, #20
 800e2b8:	6900      	ldr	r0, [r0, #16]
 800e2ba:	114b      	asrs	r3, r1, #5
 800e2bc:	4298      	cmp	r0, r3
 800e2be:	b510      	push	{r4, lr}
 800e2c0:	db11      	blt.n	800e2e6 <__any_on+0x32>
 800e2c2:	dd0a      	ble.n	800e2da <__any_on+0x26>
 800e2c4:	f011 011f 	ands.w	r1, r1, #31
 800e2c8:	d007      	beq.n	800e2da <__any_on+0x26>
 800e2ca:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e2ce:	fa24 f001 	lsr.w	r0, r4, r1
 800e2d2:	fa00 f101 	lsl.w	r1, r0, r1
 800e2d6:	428c      	cmp	r4, r1
 800e2d8:	d10b      	bne.n	800e2f2 <__any_on+0x3e>
 800e2da:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e2de:	4293      	cmp	r3, r2
 800e2e0:	d803      	bhi.n	800e2ea <__any_on+0x36>
 800e2e2:	2000      	movs	r0, #0
 800e2e4:	bd10      	pop	{r4, pc}
 800e2e6:	4603      	mov	r3, r0
 800e2e8:	e7f7      	b.n	800e2da <__any_on+0x26>
 800e2ea:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e2ee:	2900      	cmp	r1, #0
 800e2f0:	d0f5      	beq.n	800e2de <__any_on+0x2a>
 800e2f2:	2001      	movs	r0, #1
 800e2f4:	e7f6      	b.n	800e2e4 <__any_on+0x30>

0800e2f6 <_calloc_r>:
 800e2f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e2f8:	fba1 2402 	umull	r2, r4, r1, r2
 800e2fc:	b94c      	cbnz	r4, 800e312 <_calloc_r+0x1c>
 800e2fe:	4611      	mov	r1, r2
 800e300:	9201      	str	r2, [sp, #4]
 800e302:	f000 f87b 	bl	800e3fc <_malloc_r>
 800e306:	9a01      	ldr	r2, [sp, #4]
 800e308:	4605      	mov	r5, r0
 800e30a:	b930      	cbnz	r0, 800e31a <_calloc_r+0x24>
 800e30c:	4628      	mov	r0, r5
 800e30e:	b003      	add	sp, #12
 800e310:	bd30      	pop	{r4, r5, pc}
 800e312:	220c      	movs	r2, #12
 800e314:	6002      	str	r2, [r0, #0]
 800e316:	2500      	movs	r5, #0
 800e318:	e7f8      	b.n	800e30c <_calloc_r+0x16>
 800e31a:	4621      	mov	r1, r4
 800e31c:	f7fc fdd4 	bl	800aec8 <memset>
 800e320:	e7f4      	b.n	800e30c <_calloc_r+0x16>
	...

0800e324 <_free_r>:
 800e324:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e326:	2900      	cmp	r1, #0
 800e328:	d044      	beq.n	800e3b4 <_free_r+0x90>
 800e32a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e32e:	9001      	str	r0, [sp, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	f1a1 0404 	sub.w	r4, r1, #4
 800e336:	bfb8      	it	lt
 800e338:	18e4      	addlt	r4, r4, r3
 800e33a:	f000 fec5 	bl	800f0c8 <__malloc_lock>
 800e33e:	4a1e      	ldr	r2, [pc, #120]	; (800e3b8 <_free_r+0x94>)
 800e340:	9801      	ldr	r0, [sp, #4]
 800e342:	6813      	ldr	r3, [r2, #0]
 800e344:	b933      	cbnz	r3, 800e354 <_free_r+0x30>
 800e346:	6063      	str	r3, [r4, #4]
 800e348:	6014      	str	r4, [r2, #0]
 800e34a:	b003      	add	sp, #12
 800e34c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e350:	f000 bec0 	b.w	800f0d4 <__malloc_unlock>
 800e354:	42a3      	cmp	r3, r4
 800e356:	d908      	bls.n	800e36a <_free_r+0x46>
 800e358:	6825      	ldr	r5, [r4, #0]
 800e35a:	1961      	adds	r1, r4, r5
 800e35c:	428b      	cmp	r3, r1
 800e35e:	bf01      	itttt	eq
 800e360:	6819      	ldreq	r1, [r3, #0]
 800e362:	685b      	ldreq	r3, [r3, #4]
 800e364:	1949      	addeq	r1, r1, r5
 800e366:	6021      	streq	r1, [r4, #0]
 800e368:	e7ed      	b.n	800e346 <_free_r+0x22>
 800e36a:	461a      	mov	r2, r3
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	b10b      	cbz	r3, 800e374 <_free_r+0x50>
 800e370:	42a3      	cmp	r3, r4
 800e372:	d9fa      	bls.n	800e36a <_free_r+0x46>
 800e374:	6811      	ldr	r1, [r2, #0]
 800e376:	1855      	adds	r5, r2, r1
 800e378:	42a5      	cmp	r5, r4
 800e37a:	d10b      	bne.n	800e394 <_free_r+0x70>
 800e37c:	6824      	ldr	r4, [r4, #0]
 800e37e:	4421      	add	r1, r4
 800e380:	1854      	adds	r4, r2, r1
 800e382:	42a3      	cmp	r3, r4
 800e384:	6011      	str	r1, [r2, #0]
 800e386:	d1e0      	bne.n	800e34a <_free_r+0x26>
 800e388:	681c      	ldr	r4, [r3, #0]
 800e38a:	685b      	ldr	r3, [r3, #4]
 800e38c:	6053      	str	r3, [r2, #4]
 800e38e:	4421      	add	r1, r4
 800e390:	6011      	str	r1, [r2, #0]
 800e392:	e7da      	b.n	800e34a <_free_r+0x26>
 800e394:	d902      	bls.n	800e39c <_free_r+0x78>
 800e396:	230c      	movs	r3, #12
 800e398:	6003      	str	r3, [r0, #0]
 800e39a:	e7d6      	b.n	800e34a <_free_r+0x26>
 800e39c:	6825      	ldr	r5, [r4, #0]
 800e39e:	1961      	adds	r1, r4, r5
 800e3a0:	428b      	cmp	r3, r1
 800e3a2:	bf04      	itt	eq
 800e3a4:	6819      	ldreq	r1, [r3, #0]
 800e3a6:	685b      	ldreq	r3, [r3, #4]
 800e3a8:	6063      	str	r3, [r4, #4]
 800e3aa:	bf04      	itt	eq
 800e3ac:	1949      	addeq	r1, r1, r5
 800e3ae:	6021      	streq	r1, [r4, #0]
 800e3b0:	6054      	str	r4, [r2, #4]
 800e3b2:	e7ca      	b.n	800e34a <_free_r+0x26>
 800e3b4:	b003      	add	sp, #12
 800e3b6:	bd30      	pop	{r4, r5, pc}
 800e3b8:	200022cc 	.word	0x200022cc

0800e3bc <sbrk_aligned>:
 800e3bc:	b570      	push	{r4, r5, r6, lr}
 800e3be:	4e0e      	ldr	r6, [pc, #56]	; (800e3f8 <sbrk_aligned+0x3c>)
 800e3c0:	460c      	mov	r4, r1
 800e3c2:	6831      	ldr	r1, [r6, #0]
 800e3c4:	4605      	mov	r5, r0
 800e3c6:	b911      	cbnz	r1, 800e3ce <sbrk_aligned+0x12>
 800e3c8:	f000 fb4a 	bl	800ea60 <_sbrk_r>
 800e3cc:	6030      	str	r0, [r6, #0]
 800e3ce:	4621      	mov	r1, r4
 800e3d0:	4628      	mov	r0, r5
 800e3d2:	f000 fb45 	bl	800ea60 <_sbrk_r>
 800e3d6:	1c43      	adds	r3, r0, #1
 800e3d8:	d00a      	beq.n	800e3f0 <sbrk_aligned+0x34>
 800e3da:	1cc4      	adds	r4, r0, #3
 800e3dc:	f024 0403 	bic.w	r4, r4, #3
 800e3e0:	42a0      	cmp	r0, r4
 800e3e2:	d007      	beq.n	800e3f4 <sbrk_aligned+0x38>
 800e3e4:	1a21      	subs	r1, r4, r0
 800e3e6:	4628      	mov	r0, r5
 800e3e8:	f000 fb3a 	bl	800ea60 <_sbrk_r>
 800e3ec:	3001      	adds	r0, #1
 800e3ee:	d101      	bne.n	800e3f4 <sbrk_aligned+0x38>
 800e3f0:	f04f 34ff 	mov.w	r4, #4294967295
 800e3f4:	4620      	mov	r0, r4
 800e3f6:	bd70      	pop	{r4, r5, r6, pc}
 800e3f8:	200022d0 	.word	0x200022d0

0800e3fc <_malloc_r>:
 800e3fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e400:	1ccd      	adds	r5, r1, #3
 800e402:	f025 0503 	bic.w	r5, r5, #3
 800e406:	3508      	adds	r5, #8
 800e408:	2d0c      	cmp	r5, #12
 800e40a:	bf38      	it	cc
 800e40c:	250c      	movcc	r5, #12
 800e40e:	2d00      	cmp	r5, #0
 800e410:	4607      	mov	r7, r0
 800e412:	db01      	blt.n	800e418 <_malloc_r+0x1c>
 800e414:	42a9      	cmp	r1, r5
 800e416:	d905      	bls.n	800e424 <_malloc_r+0x28>
 800e418:	230c      	movs	r3, #12
 800e41a:	603b      	str	r3, [r7, #0]
 800e41c:	2600      	movs	r6, #0
 800e41e:	4630      	mov	r0, r6
 800e420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e424:	4e2e      	ldr	r6, [pc, #184]	; (800e4e0 <_malloc_r+0xe4>)
 800e426:	f000 fe4f 	bl	800f0c8 <__malloc_lock>
 800e42a:	6833      	ldr	r3, [r6, #0]
 800e42c:	461c      	mov	r4, r3
 800e42e:	bb34      	cbnz	r4, 800e47e <_malloc_r+0x82>
 800e430:	4629      	mov	r1, r5
 800e432:	4638      	mov	r0, r7
 800e434:	f7ff ffc2 	bl	800e3bc <sbrk_aligned>
 800e438:	1c43      	adds	r3, r0, #1
 800e43a:	4604      	mov	r4, r0
 800e43c:	d14d      	bne.n	800e4da <_malloc_r+0xde>
 800e43e:	6834      	ldr	r4, [r6, #0]
 800e440:	4626      	mov	r6, r4
 800e442:	2e00      	cmp	r6, #0
 800e444:	d140      	bne.n	800e4c8 <_malloc_r+0xcc>
 800e446:	6823      	ldr	r3, [r4, #0]
 800e448:	4631      	mov	r1, r6
 800e44a:	4638      	mov	r0, r7
 800e44c:	eb04 0803 	add.w	r8, r4, r3
 800e450:	f000 fb06 	bl	800ea60 <_sbrk_r>
 800e454:	4580      	cmp	r8, r0
 800e456:	d13a      	bne.n	800e4ce <_malloc_r+0xd2>
 800e458:	6821      	ldr	r1, [r4, #0]
 800e45a:	3503      	adds	r5, #3
 800e45c:	1a6d      	subs	r5, r5, r1
 800e45e:	f025 0503 	bic.w	r5, r5, #3
 800e462:	3508      	adds	r5, #8
 800e464:	2d0c      	cmp	r5, #12
 800e466:	bf38      	it	cc
 800e468:	250c      	movcc	r5, #12
 800e46a:	4629      	mov	r1, r5
 800e46c:	4638      	mov	r0, r7
 800e46e:	f7ff ffa5 	bl	800e3bc <sbrk_aligned>
 800e472:	3001      	adds	r0, #1
 800e474:	d02b      	beq.n	800e4ce <_malloc_r+0xd2>
 800e476:	6823      	ldr	r3, [r4, #0]
 800e478:	442b      	add	r3, r5
 800e47a:	6023      	str	r3, [r4, #0]
 800e47c:	e00e      	b.n	800e49c <_malloc_r+0xa0>
 800e47e:	6822      	ldr	r2, [r4, #0]
 800e480:	1b52      	subs	r2, r2, r5
 800e482:	d41e      	bmi.n	800e4c2 <_malloc_r+0xc6>
 800e484:	2a0b      	cmp	r2, #11
 800e486:	d916      	bls.n	800e4b6 <_malloc_r+0xba>
 800e488:	1961      	adds	r1, r4, r5
 800e48a:	42a3      	cmp	r3, r4
 800e48c:	6025      	str	r5, [r4, #0]
 800e48e:	bf18      	it	ne
 800e490:	6059      	strne	r1, [r3, #4]
 800e492:	6863      	ldr	r3, [r4, #4]
 800e494:	bf08      	it	eq
 800e496:	6031      	streq	r1, [r6, #0]
 800e498:	5162      	str	r2, [r4, r5]
 800e49a:	604b      	str	r3, [r1, #4]
 800e49c:	4638      	mov	r0, r7
 800e49e:	f104 060b 	add.w	r6, r4, #11
 800e4a2:	f000 fe17 	bl	800f0d4 <__malloc_unlock>
 800e4a6:	f026 0607 	bic.w	r6, r6, #7
 800e4aa:	1d23      	adds	r3, r4, #4
 800e4ac:	1af2      	subs	r2, r6, r3
 800e4ae:	d0b6      	beq.n	800e41e <_malloc_r+0x22>
 800e4b0:	1b9b      	subs	r3, r3, r6
 800e4b2:	50a3      	str	r3, [r4, r2]
 800e4b4:	e7b3      	b.n	800e41e <_malloc_r+0x22>
 800e4b6:	6862      	ldr	r2, [r4, #4]
 800e4b8:	42a3      	cmp	r3, r4
 800e4ba:	bf0c      	ite	eq
 800e4bc:	6032      	streq	r2, [r6, #0]
 800e4be:	605a      	strne	r2, [r3, #4]
 800e4c0:	e7ec      	b.n	800e49c <_malloc_r+0xa0>
 800e4c2:	4623      	mov	r3, r4
 800e4c4:	6864      	ldr	r4, [r4, #4]
 800e4c6:	e7b2      	b.n	800e42e <_malloc_r+0x32>
 800e4c8:	4634      	mov	r4, r6
 800e4ca:	6876      	ldr	r6, [r6, #4]
 800e4cc:	e7b9      	b.n	800e442 <_malloc_r+0x46>
 800e4ce:	230c      	movs	r3, #12
 800e4d0:	603b      	str	r3, [r7, #0]
 800e4d2:	4638      	mov	r0, r7
 800e4d4:	f000 fdfe 	bl	800f0d4 <__malloc_unlock>
 800e4d8:	e7a1      	b.n	800e41e <_malloc_r+0x22>
 800e4da:	6025      	str	r5, [r4, #0]
 800e4dc:	e7de      	b.n	800e49c <_malloc_r+0xa0>
 800e4de:	bf00      	nop
 800e4e0:	200022cc 	.word	0x200022cc

0800e4e4 <__ssputs_r>:
 800e4e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4e8:	688e      	ldr	r6, [r1, #8]
 800e4ea:	429e      	cmp	r6, r3
 800e4ec:	4682      	mov	sl, r0
 800e4ee:	460c      	mov	r4, r1
 800e4f0:	4690      	mov	r8, r2
 800e4f2:	461f      	mov	r7, r3
 800e4f4:	d838      	bhi.n	800e568 <__ssputs_r+0x84>
 800e4f6:	898a      	ldrh	r2, [r1, #12]
 800e4f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e4fc:	d032      	beq.n	800e564 <__ssputs_r+0x80>
 800e4fe:	6825      	ldr	r5, [r4, #0]
 800e500:	6909      	ldr	r1, [r1, #16]
 800e502:	eba5 0901 	sub.w	r9, r5, r1
 800e506:	6965      	ldr	r5, [r4, #20]
 800e508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e50c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e510:	3301      	adds	r3, #1
 800e512:	444b      	add	r3, r9
 800e514:	106d      	asrs	r5, r5, #1
 800e516:	429d      	cmp	r5, r3
 800e518:	bf38      	it	cc
 800e51a:	461d      	movcc	r5, r3
 800e51c:	0553      	lsls	r3, r2, #21
 800e51e:	d531      	bpl.n	800e584 <__ssputs_r+0xa0>
 800e520:	4629      	mov	r1, r5
 800e522:	f7ff ff6b 	bl	800e3fc <_malloc_r>
 800e526:	4606      	mov	r6, r0
 800e528:	b950      	cbnz	r0, 800e540 <__ssputs_r+0x5c>
 800e52a:	230c      	movs	r3, #12
 800e52c:	f8ca 3000 	str.w	r3, [sl]
 800e530:	89a3      	ldrh	r3, [r4, #12]
 800e532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e536:	81a3      	strh	r3, [r4, #12]
 800e538:	f04f 30ff 	mov.w	r0, #4294967295
 800e53c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e540:	6921      	ldr	r1, [r4, #16]
 800e542:	464a      	mov	r2, r9
 800e544:	f7fc fcb2 	bl	800aeac <memcpy>
 800e548:	89a3      	ldrh	r3, [r4, #12]
 800e54a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e54e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e552:	81a3      	strh	r3, [r4, #12]
 800e554:	6126      	str	r6, [r4, #16]
 800e556:	6165      	str	r5, [r4, #20]
 800e558:	444e      	add	r6, r9
 800e55a:	eba5 0509 	sub.w	r5, r5, r9
 800e55e:	6026      	str	r6, [r4, #0]
 800e560:	60a5      	str	r5, [r4, #8]
 800e562:	463e      	mov	r6, r7
 800e564:	42be      	cmp	r6, r7
 800e566:	d900      	bls.n	800e56a <__ssputs_r+0x86>
 800e568:	463e      	mov	r6, r7
 800e56a:	6820      	ldr	r0, [r4, #0]
 800e56c:	4632      	mov	r2, r6
 800e56e:	4641      	mov	r1, r8
 800e570:	f000 fd90 	bl	800f094 <memmove>
 800e574:	68a3      	ldr	r3, [r4, #8]
 800e576:	1b9b      	subs	r3, r3, r6
 800e578:	60a3      	str	r3, [r4, #8]
 800e57a:	6823      	ldr	r3, [r4, #0]
 800e57c:	4433      	add	r3, r6
 800e57e:	6023      	str	r3, [r4, #0]
 800e580:	2000      	movs	r0, #0
 800e582:	e7db      	b.n	800e53c <__ssputs_r+0x58>
 800e584:	462a      	mov	r2, r5
 800e586:	f000 fdab 	bl	800f0e0 <_realloc_r>
 800e58a:	4606      	mov	r6, r0
 800e58c:	2800      	cmp	r0, #0
 800e58e:	d1e1      	bne.n	800e554 <__ssputs_r+0x70>
 800e590:	6921      	ldr	r1, [r4, #16]
 800e592:	4650      	mov	r0, sl
 800e594:	f7ff fec6 	bl	800e324 <_free_r>
 800e598:	e7c7      	b.n	800e52a <__ssputs_r+0x46>
	...

0800e59c <_svfiprintf_r>:
 800e59c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5a0:	4698      	mov	r8, r3
 800e5a2:	898b      	ldrh	r3, [r1, #12]
 800e5a4:	061b      	lsls	r3, r3, #24
 800e5a6:	b09d      	sub	sp, #116	; 0x74
 800e5a8:	4607      	mov	r7, r0
 800e5aa:	460d      	mov	r5, r1
 800e5ac:	4614      	mov	r4, r2
 800e5ae:	d50e      	bpl.n	800e5ce <_svfiprintf_r+0x32>
 800e5b0:	690b      	ldr	r3, [r1, #16]
 800e5b2:	b963      	cbnz	r3, 800e5ce <_svfiprintf_r+0x32>
 800e5b4:	2140      	movs	r1, #64	; 0x40
 800e5b6:	f7ff ff21 	bl	800e3fc <_malloc_r>
 800e5ba:	6028      	str	r0, [r5, #0]
 800e5bc:	6128      	str	r0, [r5, #16]
 800e5be:	b920      	cbnz	r0, 800e5ca <_svfiprintf_r+0x2e>
 800e5c0:	230c      	movs	r3, #12
 800e5c2:	603b      	str	r3, [r7, #0]
 800e5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e5c8:	e0d1      	b.n	800e76e <_svfiprintf_r+0x1d2>
 800e5ca:	2340      	movs	r3, #64	; 0x40
 800e5cc:	616b      	str	r3, [r5, #20]
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	9309      	str	r3, [sp, #36]	; 0x24
 800e5d2:	2320      	movs	r3, #32
 800e5d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e5d8:	f8cd 800c 	str.w	r8, [sp, #12]
 800e5dc:	2330      	movs	r3, #48	; 0x30
 800e5de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e788 <_svfiprintf_r+0x1ec>
 800e5e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e5e6:	f04f 0901 	mov.w	r9, #1
 800e5ea:	4623      	mov	r3, r4
 800e5ec:	469a      	mov	sl, r3
 800e5ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e5f2:	b10a      	cbz	r2, 800e5f8 <_svfiprintf_r+0x5c>
 800e5f4:	2a25      	cmp	r2, #37	; 0x25
 800e5f6:	d1f9      	bne.n	800e5ec <_svfiprintf_r+0x50>
 800e5f8:	ebba 0b04 	subs.w	fp, sl, r4
 800e5fc:	d00b      	beq.n	800e616 <_svfiprintf_r+0x7a>
 800e5fe:	465b      	mov	r3, fp
 800e600:	4622      	mov	r2, r4
 800e602:	4629      	mov	r1, r5
 800e604:	4638      	mov	r0, r7
 800e606:	f7ff ff6d 	bl	800e4e4 <__ssputs_r>
 800e60a:	3001      	adds	r0, #1
 800e60c:	f000 80aa 	beq.w	800e764 <_svfiprintf_r+0x1c8>
 800e610:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e612:	445a      	add	r2, fp
 800e614:	9209      	str	r2, [sp, #36]	; 0x24
 800e616:	f89a 3000 	ldrb.w	r3, [sl]
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	f000 80a2 	beq.w	800e764 <_svfiprintf_r+0x1c8>
 800e620:	2300      	movs	r3, #0
 800e622:	f04f 32ff 	mov.w	r2, #4294967295
 800e626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e62a:	f10a 0a01 	add.w	sl, sl, #1
 800e62e:	9304      	str	r3, [sp, #16]
 800e630:	9307      	str	r3, [sp, #28]
 800e632:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e636:	931a      	str	r3, [sp, #104]	; 0x68
 800e638:	4654      	mov	r4, sl
 800e63a:	2205      	movs	r2, #5
 800e63c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e640:	4851      	ldr	r0, [pc, #324]	; (800e788 <_svfiprintf_r+0x1ec>)
 800e642:	f7f1 fdd5 	bl	80001f0 <memchr>
 800e646:	9a04      	ldr	r2, [sp, #16]
 800e648:	b9d8      	cbnz	r0, 800e682 <_svfiprintf_r+0xe6>
 800e64a:	06d0      	lsls	r0, r2, #27
 800e64c:	bf44      	itt	mi
 800e64e:	2320      	movmi	r3, #32
 800e650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e654:	0711      	lsls	r1, r2, #28
 800e656:	bf44      	itt	mi
 800e658:	232b      	movmi	r3, #43	; 0x2b
 800e65a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e65e:	f89a 3000 	ldrb.w	r3, [sl]
 800e662:	2b2a      	cmp	r3, #42	; 0x2a
 800e664:	d015      	beq.n	800e692 <_svfiprintf_r+0xf6>
 800e666:	9a07      	ldr	r2, [sp, #28]
 800e668:	4654      	mov	r4, sl
 800e66a:	2000      	movs	r0, #0
 800e66c:	f04f 0c0a 	mov.w	ip, #10
 800e670:	4621      	mov	r1, r4
 800e672:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e676:	3b30      	subs	r3, #48	; 0x30
 800e678:	2b09      	cmp	r3, #9
 800e67a:	d94e      	bls.n	800e71a <_svfiprintf_r+0x17e>
 800e67c:	b1b0      	cbz	r0, 800e6ac <_svfiprintf_r+0x110>
 800e67e:	9207      	str	r2, [sp, #28]
 800e680:	e014      	b.n	800e6ac <_svfiprintf_r+0x110>
 800e682:	eba0 0308 	sub.w	r3, r0, r8
 800e686:	fa09 f303 	lsl.w	r3, r9, r3
 800e68a:	4313      	orrs	r3, r2
 800e68c:	9304      	str	r3, [sp, #16]
 800e68e:	46a2      	mov	sl, r4
 800e690:	e7d2      	b.n	800e638 <_svfiprintf_r+0x9c>
 800e692:	9b03      	ldr	r3, [sp, #12]
 800e694:	1d19      	adds	r1, r3, #4
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	9103      	str	r1, [sp, #12]
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	bfbb      	ittet	lt
 800e69e:	425b      	neglt	r3, r3
 800e6a0:	f042 0202 	orrlt.w	r2, r2, #2
 800e6a4:	9307      	strge	r3, [sp, #28]
 800e6a6:	9307      	strlt	r3, [sp, #28]
 800e6a8:	bfb8      	it	lt
 800e6aa:	9204      	strlt	r2, [sp, #16]
 800e6ac:	7823      	ldrb	r3, [r4, #0]
 800e6ae:	2b2e      	cmp	r3, #46	; 0x2e
 800e6b0:	d10c      	bne.n	800e6cc <_svfiprintf_r+0x130>
 800e6b2:	7863      	ldrb	r3, [r4, #1]
 800e6b4:	2b2a      	cmp	r3, #42	; 0x2a
 800e6b6:	d135      	bne.n	800e724 <_svfiprintf_r+0x188>
 800e6b8:	9b03      	ldr	r3, [sp, #12]
 800e6ba:	1d1a      	adds	r2, r3, #4
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	9203      	str	r2, [sp, #12]
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	bfb8      	it	lt
 800e6c4:	f04f 33ff 	movlt.w	r3, #4294967295
 800e6c8:	3402      	adds	r4, #2
 800e6ca:	9305      	str	r3, [sp, #20]
 800e6cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e798 <_svfiprintf_r+0x1fc>
 800e6d0:	7821      	ldrb	r1, [r4, #0]
 800e6d2:	2203      	movs	r2, #3
 800e6d4:	4650      	mov	r0, sl
 800e6d6:	f7f1 fd8b 	bl	80001f0 <memchr>
 800e6da:	b140      	cbz	r0, 800e6ee <_svfiprintf_r+0x152>
 800e6dc:	2340      	movs	r3, #64	; 0x40
 800e6de:	eba0 000a 	sub.w	r0, r0, sl
 800e6e2:	fa03 f000 	lsl.w	r0, r3, r0
 800e6e6:	9b04      	ldr	r3, [sp, #16]
 800e6e8:	4303      	orrs	r3, r0
 800e6ea:	3401      	adds	r4, #1
 800e6ec:	9304      	str	r3, [sp, #16]
 800e6ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6f2:	4826      	ldr	r0, [pc, #152]	; (800e78c <_svfiprintf_r+0x1f0>)
 800e6f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e6f8:	2206      	movs	r2, #6
 800e6fa:	f7f1 fd79 	bl	80001f0 <memchr>
 800e6fe:	2800      	cmp	r0, #0
 800e700:	d038      	beq.n	800e774 <_svfiprintf_r+0x1d8>
 800e702:	4b23      	ldr	r3, [pc, #140]	; (800e790 <_svfiprintf_r+0x1f4>)
 800e704:	bb1b      	cbnz	r3, 800e74e <_svfiprintf_r+0x1b2>
 800e706:	9b03      	ldr	r3, [sp, #12]
 800e708:	3307      	adds	r3, #7
 800e70a:	f023 0307 	bic.w	r3, r3, #7
 800e70e:	3308      	adds	r3, #8
 800e710:	9303      	str	r3, [sp, #12]
 800e712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e714:	4433      	add	r3, r6
 800e716:	9309      	str	r3, [sp, #36]	; 0x24
 800e718:	e767      	b.n	800e5ea <_svfiprintf_r+0x4e>
 800e71a:	fb0c 3202 	mla	r2, ip, r2, r3
 800e71e:	460c      	mov	r4, r1
 800e720:	2001      	movs	r0, #1
 800e722:	e7a5      	b.n	800e670 <_svfiprintf_r+0xd4>
 800e724:	2300      	movs	r3, #0
 800e726:	3401      	adds	r4, #1
 800e728:	9305      	str	r3, [sp, #20]
 800e72a:	4619      	mov	r1, r3
 800e72c:	f04f 0c0a 	mov.w	ip, #10
 800e730:	4620      	mov	r0, r4
 800e732:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e736:	3a30      	subs	r2, #48	; 0x30
 800e738:	2a09      	cmp	r2, #9
 800e73a:	d903      	bls.n	800e744 <_svfiprintf_r+0x1a8>
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d0c5      	beq.n	800e6cc <_svfiprintf_r+0x130>
 800e740:	9105      	str	r1, [sp, #20]
 800e742:	e7c3      	b.n	800e6cc <_svfiprintf_r+0x130>
 800e744:	fb0c 2101 	mla	r1, ip, r1, r2
 800e748:	4604      	mov	r4, r0
 800e74a:	2301      	movs	r3, #1
 800e74c:	e7f0      	b.n	800e730 <_svfiprintf_r+0x194>
 800e74e:	ab03      	add	r3, sp, #12
 800e750:	9300      	str	r3, [sp, #0]
 800e752:	462a      	mov	r2, r5
 800e754:	4b0f      	ldr	r3, [pc, #60]	; (800e794 <_svfiprintf_r+0x1f8>)
 800e756:	a904      	add	r1, sp, #16
 800e758:	4638      	mov	r0, r7
 800e75a:	f7fc fc5d 	bl	800b018 <_printf_float>
 800e75e:	1c42      	adds	r2, r0, #1
 800e760:	4606      	mov	r6, r0
 800e762:	d1d6      	bne.n	800e712 <_svfiprintf_r+0x176>
 800e764:	89ab      	ldrh	r3, [r5, #12]
 800e766:	065b      	lsls	r3, r3, #25
 800e768:	f53f af2c 	bmi.w	800e5c4 <_svfiprintf_r+0x28>
 800e76c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e76e:	b01d      	add	sp, #116	; 0x74
 800e770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e774:	ab03      	add	r3, sp, #12
 800e776:	9300      	str	r3, [sp, #0]
 800e778:	462a      	mov	r2, r5
 800e77a:	4b06      	ldr	r3, [pc, #24]	; (800e794 <_svfiprintf_r+0x1f8>)
 800e77c:	a904      	add	r1, sp, #16
 800e77e:	4638      	mov	r0, r7
 800e780:	f7fc feee 	bl	800b560 <_printf_i>
 800e784:	e7eb      	b.n	800e75e <_svfiprintf_r+0x1c2>
 800e786:	bf00      	nop
 800e788:	0800f924 	.word	0x0800f924
 800e78c:	0800f92e 	.word	0x0800f92e
 800e790:	0800b019 	.word	0x0800b019
 800e794:	0800e4e5 	.word	0x0800e4e5
 800e798:	0800f92a 	.word	0x0800f92a

0800e79c <__sfputc_r>:
 800e79c:	6893      	ldr	r3, [r2, #8]
 800e79e:	3b01      	subs	r3, #1
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	b410      	push	{r4}
 800e7a4:	6093      	str	r3, [r2, #8]
 800e7a6:	da08      	bge.n	800e7ba <__sfputc_r+0x1e>
 800e7a8:	6994      	ldr	r4, [r2, #24]
 800e7aa:	42a3      	cmp	r3, r4
 800e7ac:	db01      	blt.n	800e7b2 <__sfputc_r+0x16>
 800e7ae:	290a      	cmp	r1, #10
 800e7b0:	d103      	bne.n	800e7ba <__sfputc_r+0x1e>
 800e7b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7b6:	f000 b977 	b.w	800eaa8 <__swbuf_r>
 800e7ba:	6813      	ldr	r3, [r2, #0]
 800e7bc:	1c58      	adds	r0, r3, #1
 800e7be:	6010      	str	r0, [r2, #0]
 800e7c0:	7019      	strb	r1, [r3, #0]
 800e7c2:	4608      	mov	r0, r1
 800e7c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e7c8:	4770      	bx	lr

0800e7ca <__sfputs_r>:
 800e7ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e7cc:	4606      	mov	r6, r0
 800e7ce:	460f      	mov	r7, r1
 800e7d0:	4614      	mov	r4, r2
 800e7d2:	18d5      	adds	r5, r2, r3
 800e7d4:	42ac      	cmp	r4, r5
 800e7d6:	d101      	bne.n	800e7dc <__sfputs_r+0x12>
 800e7d8:	2000      	movs	r0, #0
 800e7da:	e007      	b.n	800e7ec <__sfputs_r+0x22>
 800e7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e7e0:	463a      	mov	r2, r7
 800e7e2:	4630      	mov	r0, r6
 800e7e4:	f7ff ffda 	bl	800e79c <__sfputc_r>
 800e7e8:	1c43      	adds	r3, r0, #1
 800e7ea:	d1f3      	bne.n	800e7d4 <__sfputs_r+0xa>
 800e7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e7f0 <_vfiprintf_r>:
 800e7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f4:	460d      	mov	r5, r1
 800e7f6:	b09d      	sub	sp, #116	; 0x74
 800e7f8:	4614      	mov	r4, r2
 800e7fa:	4698      	mov	r8, r3
 800e7fc:	4606      	mov	r6, r0
 800e7fe:	b118      	cbz	r0, 800e808 <_vfiprintf_r+0x18>
 800e800:	6983      	ldr	r3, [r0, #24]
 800e802:	b90b      	cbnz	r3, 800e808 <_vfiprintf_r+0x18>
 800e804:	f000 fb40 	bl	800ee88 <__sinit>
 800e808:	4b89      	ldr	r3, [pc, #548]	; (800ea30 <_vfiprintf_r+0x240>)
 800e80a:	429d      	cmp	r5, r3
 800e80c:	d11b      	bne.n	800e846 <_vfiprintf_r+0x56>
 800e80e:	6875      	ldr	r5, [r6, #4]
 800e810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e812:	07d9      	lsls	r1, r3, #31
 800e814:	d405      	bmi.n	800e822 <_vfiprintf_r+0x32>
 800e816:	89ab      	ldrh	r3, [r5, #12]
 800e818:	059a      	lsls	r2, r3, #22
 800e81a:	d402      	bmi.n	800e822 <_vfiprintf_r+0x32>
 800e81c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e81e:	f000 fbd1 	bl	800efc4 <__retarget_lock_acquire_recursive>
 800e822:	89ab      	ldrh	r3, [r5, #12]
 800e824:	071b      	lsls	r3, r3, #28
 800e826:	d501      	bpl.n	800e82c <_vfiprintf_r+0x3c>
 800e828:	692b      	ldr	r3, [r5, #16]
 800e82a:	b9eb      	cbnz	r3, 800e868 <_vfiprintf_r+0x78>
 800e82c:	4629      	mov	r1, r5
 800e82e:	4630      	mov	r0, r6
 800e830:	f000 f99a 	bl	800eb68 <__swsetup_r>
 800e834:	b1c0      	cbz	r0, 800e868 <_vfiprintf_r+0x78>
 800e836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e838:	07dc      	lsls	r4, r3, #31
 800e83a:	d50e      	bpl.n	800e85a <_vfiprintf_r+0x6a>
 800e83c:	f04f 30ff 	mov.w	r0, #4294967295
 800e840:	b01d      	add	sp, #116	; 0x74
 800e842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e846:	4b7b      	ldr	r3, [pc, #492]	; (800ea34 <_vfiprintf_r+0x244>)
 800e848:	429d      	cmp	r5, r3
 800e84a:	d101      	bne.n	800e850 <_vfiprintf_r+0x60>
 800e84c:	68b5      	ldr	r5, [r6, #8]
 800e84e:	e7df      	b.n	800e810 <_vfiprintf_r+0x20>
 800e850:	4b79      	ldr	r3, [pc, #484]	; (800ea38 <_vfiprintf_r+0x248>)
 800e852:	429d      	cmp	r5, r3
 800e854:	bf08      	it	eq
 800e856:	68f5      	ldreq	r5, [r6, #12]
 800e858:	e7da      	b.n	800e810 <_vfiprintf_r+0x20>
 800e85a:	89ab      	ldrh	r3, [r5, #12]
 800e85c:	0598      	lsls	r0, r3, #22
 800e85e:	d4ed      	bmi.n	800e83c <_vfiprintf_r+0x4c>
 800e860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e862:	f000 fbb0 	bl	800efc6 <__retarget_lock_release_recursive>
 800e866:	e7e9      	b.n	800e83c <_vfiprintf_r+0x4c>
 800e868:	2300      	movs	r3, #0
 800e86a:	9309      	str	r3, [sp, #36]	; 0x24
 800e86c:	2320      	movs	r3, #32
 800e86e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e872:	f8cd 800c 	str.w	r8, [sp, #12]
 800e876:	2330      	movs	r3, #48	; 0x30
 800e878:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ea3c <_vfiprintf_r+0x24c>
 800e87c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e880:	f04f 0901 	mov.w	r9, #1
 800e884:	4623      	mov	r3, r4
 800e886:	469a      	mov	sl, r3
 800e888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e88c:	b10a      	cbz	r2, 800e892 <_vfiprintf_r+0xa2>
 800e88e:	2a25      	cmp	r2, #37	; 0x25
 800e890:	d1f9      	bne.n	800e886 <_vfiprintf_r+0x96>
 800e892:	ebba 0b04 	subs.w	fp, sl, r4
 800e896:	d00b      	beq.n	800e8b0 <_vfiprintf_r+0xc0>
 800e898:	465b      	mov	r3, fp
 800e89a:	4622      	mov	r2, r4
 800e89c:	4629      	mov	r1, r5
 800e89e:	4630      	mov	r0, r6
 800e8a0:	f7ff ff93 	bl	800e7ca <__sfputs_r>
 800e8a4:	3001      	adds	r0, #1
 800e8a6:	f000 80aa 	beq.w	800e9fe <_vfiprintf_r+0x20e>
 800e8aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e8ac:	445a      	add	r2, fp
 800e8ae:	9209      	str	r2, [sp, #36]	; 0x24
 800e8b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e8b4:	2b00      	cmp	r3, #0
 800e8b6:	f000 80a2 	beq.w	800e9fe <_vfiprintf_r+0x20e>
 800e8ba:	2300      	movs	r3, #0
 800e8bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e8c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e8c4:	f10a 0a01 	add.w	sl, sl, #1
 800e8c8:	9304      	str	r3, [sp, #16]
 800e8ca:	9307      	str	r3, [sp, #28]
 800e8cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e8d0:	931a      	str	r3, [sp, #104]	; 0x68
 800e8d2:	4654      	mov	r4, sl
 800e8d4:	2205      	movs	r2, #5
 800e8d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e8da:	4858      	ldr	r0, [pc, #352]	; (800ea3c <_vfiprintf_r+0x24c>)
 800e8dc:	f7f1 fc88 	bl	80001f0 <memchr>
 800e8e0:	9a04      	ldr	r2, [sp, #16]
 800e8e2:	b9d8      	cbnz	r0, 800e91c <_vfiprintf_r+0x12c>
 800e8e4:	06d1      	lsls	r1, r2, #27
 800e8e6:	bf44      	itt	mi
 800e8e8:	2320      	movmi	r3, #32
 800e8ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8ee:	0713      	lsls	r3, r2, #28
 800e8f0:	bf44      	itt	mi
 800e8f2:	232b      	movmi	r3, #43	; 0x2b
 800e8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e8f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e8fc:	2b2a      	cmp	r3, #42	; 0x2a
 800e8fe:	d015      	beq.n	800e92c <_vfiprintf_r+0x13c>
 800e900:	9a07      	ldr	r2, [sp, #28]
 800e902:	4654      	mov	r4, sl
 800e904:	2000      	movs	r0, #0
 800e906:	f04f 0c0a 	mov.w	ip, #10
 800e90a:	4621      	mov	r1, r4
 800e90c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e910:	3b30      	subs	r3, #48	; 0x30
 800e912:	2b09      	cmp	r3, #9
 800e914:	d94e      	bls.n	800e9b4 <_vfiprintf_r+0x1c4>
 800e916:	b1b0      	cbz	r0, 800e946 <_vfiprintf_r+0x156>
 800e918:	9207      	str	r2, [sp, #28]
 800e91a:	e014      	b.n	800e946 <_vfiprintf_r+0x156>
 800e91c:	eba0 0308 	sub.w	r3, r0, r8
 800e920:	fa09 f303 	lsl.w	r3, r9, r3
 800e924:	4313      	orrs	r3, r2
 800e926:	9304      	str	r3, [sp, #16]
 800e928:	46a2      	mov	sl, r4
 800e92a:	e7d2      	b.n	800e8d2 <_vfiprintf_r+0xe2>
 800e92c:	9b03      	ldr	r3, [sp, #12]
 800e92e:	1d19      	adds	r1, r3, #4
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	9103      	str	r1, [sp, #12]
 800e934:	2b00      	cmp	r3, #0
 800e936:	bfbb      	ittet	lt
 800e938:	425b      	neglt	r3, r3
 800e93a:	f042 0202 	orrlt.w	r2, r2, #2
 800e93e:	9307      	strge	r3, [sp, #28]
 800e940:	9307      	strlt	r3, [sp, #28]
 800e942:	bfb8      	it	lt
 800e944:	9204      	strlt	r2, [sp, #16]
 800e946:	7823      	ldrb	r3, [r4, #0]
 800e948:	2b2e      	cmp	r3, #46	; 0x2e
 800e94a:	d10c      	bne.n	800e966 <_vfiprintf_r+0x176>
 800e94c:	7863      	ldrb	r3, [r4, #1]
 800e94e:	2b2a      	cmp	r3, #42	; 0x2a
 800e950:	d135      	bne.n	800e9be <_vfiprintf_r+0x1ce>
 800e952:	9b03      	ldr	r3, [sp, #12]
 800e954:	1d1a      	adds	r2, r3, #4
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	9203      	str	r2, [sp, #12]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	bfb8      	it	lt
 800e95e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e962:	3402      	adds	r4, #2
 800e964:	9305      	str	r3, [sp, #20]
 800e966:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ea4c <_vfiprintf_r+0x25c>
 800e96a:	7821      	ldrb	r1, [r4, #0]
 800e96c:	2203      	movs	r2, #3
 800e96e:	4650      	mov	r0, sl
 800e970:	f7f1 fc3e 	bl	80001f0 <memchr>
 800e974:	b140      	cbz	r0, 800e988 <_vfiprintf_r+0x198>
 800e976:	2340      	movs	r3, #64	; 0x40
 800e978:	eba0 000a 	sub.w	r0, r0, sl
 800e97c:	fa03 f000 	lsl.w	r0, r3, r0
 800e980:	9b04      	ldr	r3, [sp, #16]
 800e982:	4303      	orrs	r3, r0
 800e984:	3401      	adds	r4, #1
 800e986:	9304      	str	r3, [sp, #16]
 800e988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e98c:	482c      	ldr	r0, [pc, #176]	; (800ea40 <_vfiprintf_r+0x250>)
 800e98e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e992:	2206      	movs	r2, #6
 800e994:	f7f1 fc2c 	bl	80001f0 <memchr>
 800e998:	2800      	cmp	r0, #0
 800e99a:	d03f      	beq.n	800ea1c <_vfiprintf_r+0x22c>
 800e99c:	4b29      	ldr	r3, [pc, #164]	; (800ea44 <_vfiprintf_r+0x254>)
 800e99e:	bb1b      	cbnz	r3, 800e9e8 <_vfiprintf_r+0x1f8>
 800e9a0:	9b03      	ldr	r3, [sp, #12]
 800e9a2:	3307      	adds	r3, #7
 800e9a4:	f023 0307 	bic.w	r3, r3, #7
 800e9a8:	3308      	adds	r3, #8
 800e9aa:	9303      	str	r3, [sp, #12]
 800e9ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9ae:	443b      	add	r3, r7
 800e9b0:	9309      	str	r3, [sp, #36]	; 0x24
 800e9b2:	e767      	b.n	800e884 <_vfiprintf_r+0x94>
 800e9b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800e9b8:	460c      	mov	r4, r1
 800e9ba:	2001      	movs	r0, #1
 800e9bc:	e7a5      	b.n	800e90a <_vfiprintf_r+0x11a>
 800e9be:	2300      	movs	r3, #0
 800e9c0:	3401      	adds	r4, #1
 800e9c2:	9305      	str	r3, [sp, #20]
 800e9c4:	4619      	mov	r1, r3
 800e9c6:	f04f 0c0a 	mov.w	ip, #10
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e9d0:	3a30      	subs	r2, #48	; 0x30
 800e9d2:	2a09      	cmp	r2, #9
 800e9d4:	d903      	bls.n	800e9de <_vfiprintf_r+0x1ee>
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d0c5      	beq.n	800e966 <_vfiprintf_r+0x176>
 800e9da:	9105      	str	r1, [sp, #20]
 800e9dc:	e7c3      	b.n	800e966 <_vfiprintf_r+0x176>
 800e9de:	fb0c 2101 	mla	r1, ip, r1, r2
 800e9e2:	4604      	mov	r4, r0
 800e9e4:	2301      	movs	r3, #1
 800e9e6:	e7f0      	b.n	800e9ca <_vfiprintf_r+0x1da>
 800e9e8:	ab03      	add	r3, sp, #12
 800e9ea:	9300      	str	r3, [sp, #0]
 800e9ec:	462a      	mov	r2, r5
 800e9ee:	4b16      	ldr	r3, [pc, #88]	; (800ea48 <_vfiprintf_r+0x258>)
 800e9f0:	a904      	add	r1, sp, #16
 800e9f2:	4630      	mov	r0, r6
 800e9f4:	f7fc fb10 	bl	800b018 <_printf_float>
 800e9f8:	4607      	mov	r7, r0
 800e9fa:	1c78      	adds	r0, r7, #1
 800e9fc:	d1d6      	bne.n	800e9ac <_vfiprintf_r+0x1bc>
 800e9fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ea00:	07d9      	lsls	r1, r3, #31
 800ea02:	d405      	bmi.n	800ea10 <_vfiprintf_r+0x220>
 800ea04:	89ab      	ldrh	r3, [r5, #12]
 800ea06:	059a      	lsls	r2, r3, #22
 800ea08:	d402      	bmi.n	800ea10 <_vfiprintf_r+0x220>
 800ea0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ea0c:	f000 fadb 	bl	800efc6 <__retarget_lock_release_recursive>
 800ea10:	89ab      	ldrh	r3, [r5, #12]
 800ea12:	065b      	lsls	r3, r3, #25
 800ea14:	f53f af12 	bmi.w	800e83c <_vfiprintf_r+0x4c>
 800ea18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ea1a:	e711      	b.n	800e840 <_vfiprintf_r+0x50>
 800ea1c:	ab03      	add	r3, sp, #12
 800ea1e:	9300      	str	r3, [sp, #0]
 800ea20:	462a      	mov	r2, r5
 800ea22:	4b09      	ldr	r3, [pc, #36]	; (800ea48 <_vfiprintf_r+0x258>)
 800ea24:	a904      	add	r1, sp, #16
 800ea26:	4630      	mov	r0, r6
 800ea28:	f7fc fd9a 	bl	800b560 <_printf_i>
 800ea2c:	e7e4      	b.n	800e9f8 <_vfiprintf_r+0x208>
 800ea2e:	bf00      	nop
 800ea30:	0800fa58 	.word	0x0800fa58
 800ea34:	0800fa78 	.word	0x0800fa78
 800ea38:	0800fa38 	.word	0x0800fa38
 800ea3c:	0800f924 	.word	0x0800f924
 800ea40:	0800f92e 	.word	0x0800f92e
 800ea44:	0800b019 	.word	0x0800b019
 800ea48:	0800e7cb 	.word	0x0800e7cb
 800ea4c:	0800f92a 	.word	0x0800f92a

0800ea50 <nan>:
 800ea50:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ea58 <nan+0x8>
 800ea54:	4770      	bx	lr
 800ea56:	bf00      	nop
 800ea58:	00000000 	.word	0x00000000
 800ea5c:	7ff80000 	.word	0x7ff80000

0800ea60 <_sbrk_r>:
 800ea60:	b538      	push	{r3, r4, r5, lr}
 800ea62:	4d06      	ldr	r5, [pc, #24]	; (800ea7c <_sbrk_r+0x1c>)
 800ea64:	2300      	movs	r3, #0
 800ea66:	4604      	mov	r4, r0
 800ea68:	4608      	mov	r0, r1
 800ea6a:	602b      	str	r3, [r5, #0]
 800ea6c:	f7f3 fc2a 	bl	80022c4 <_sbrk>
 800ea70:	1c43      	adds	r3, r0, #1
 800ea72:	d102      	bne.n	800ea7a <_sbrk_r+0x1a>
 800ea74:	682b      	ldr	r3, [r5, #0]
 800ea76:	b103      	cbz	r3, 800ea7a <_sbrk_r+0x1a>
 800ea78:	6023      	str	r3, [r4, #0]
 800ea7a:	bd38      	pop	{r3, r4, r5, pc}
 800ea7c:	200022d8 	.word	0x200022d8

0800ea80 <strncmp>:
 800ea80:	b510      	push	{r4, lr}
 800ea82:	b17a      	cbz	r2, 800eaa4 <strncmp+0x24>
 800ea84:	4603      	mov	r3, r0
 800ea86:	3901      	subs	r1, #1
 800ea88:	1884      	adds	r4, r0, r2
 800ea8a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ea8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ea92:	4290      	cmp	r0, r2
 800ea94:	d101      	bne.n	800ea9a <strncmp+0x1a>
 800ea96:	42a3      	cmp	r3, r4
 800ea98:	d101      	bne.n	800ea9e <strncmp+0x1e>
 800ea9a:	1a80      	subs	r0, r0, r2
 800ea9c:	bd10      	pop	{r4, pc}
 800ea9e:	2800      	cmp	r0, #0
 800eaa0:	d1f3      	bne.n	800ea8a <strncmp+0xa>
 800eaa2:	e7fa      	b.n	800ea9a <strncmp+0x1a>
 800eaa4:	4610      	mov	r0, r2
 800eaa6:	e7f9      	b.n	800ea9c <strncmp+0x1c>

0800eaa8 <__swbuf_r>:
 800eaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaaa:	460e      	mov	r6, r1
 800eaac:	4614      	mov	r4, r2
 800eaae:	4605      	mov	r5, r0
 800eab0:	b118      	cbz	r0, 800eaba <__swbuf_r+0x12>
 800eab2:	6983      	ldr	r3, [r0, #24]
 800eab4:	b90b      	cbnz	r3, 800eaba <__swbuf_r+0x12>
 800eab6:	f000 f9e7 	bl	800ee88 <__sinit>
 800eaba:	4b21      	ldr	r3, [pc, #132]	; (800eb40 <__swbuf_r+0x98>)
 800eabc:	429c      	cmp	r4, r3
 800eabe:	d12b      	bne.n	800eb18 <__swbuf_r+0x70>
 800eac0:	686c      	ldr	r4, [r5, #4]
 800eac2:	69a3      	ldr	r3, [r4, #24]
 800eac4:	60a3      	str	r3, [r4, #8]
 800eac6:	89a3      	ldrh	r3, [r4, #12]
 800eac8:	071a      	lsls	r2, r3, #28
 800eaca:	d52f      	bpl.n	800eb2c <__swbuf_r+0x84>
 800eacc:	6923      	ldr	r3, [r4, #16]
 800eace:	b36b      	cbz	r3, 800eb2c <__swbuf_r+0x84>
 800ead0:	6923      	ldr	r3, [r4, #16]
 800ead2:	6820      	ldr	r0, [r4, #0]
 800ead4:	1ac0      	subs	r0, r0, r3
 800ead6:	6963      	ldr	r3, [r4, #20]
 800ead8:	b2f6      	uxtb	r6, r6
 800eada:	4283      	cmp	r3, r0
 800eadc:	4637      	mov	r7, r6
 800eade:	dc04      	bgt.n	800eaea <__swbuf_r+0x42>
 800eae0:	4621      	mov	r1, r4
 800eae2:	4628      	mov	r0, r5
 800eae4:	f000 f93c 	bl	800ed60 <_fflush_r>
 800eae8:	bb30      	cbnz	r0, 800eb38 <__swbuf_r+0x90>
 800eaea:	68a3      	ldr	r3, [r4, #8]
 800eaec:	3b01      	subs	r3, #1
 800eaee:	60a3      	str	r3, [r4, #8]
 800eaf0:	6823      	ldr	r3, [r4, #0]
 800eaf2:	1c5a      	adds	r2, r3, #1
 800eaf4:	6022      	str	r2, [r4, #0]
 800eaf6:	701e      	strb	r6, [r3, #0]
 800eaf8:	6963      	ldr	r3, [r4, #20]
 800eafa:	3001      	adds	r0, #1
 800eafc:	4283      	cmp	r3, r0
 800eafe:	d004      	beq.n	800eb0a <__swbuf_r+0x62>
 800eb00:	89a3      	ldrh	r3, [r4, #12]
 800eb02:	07db      	lsls	r3, r3, #31
 800eb04:	d506      	bpl.n	800eb14 <__swbuf_r+0x6c>
 800eb06:	2e0a      	cmp	r6, #10
 800eb08:	d104      	bne.n	800eb14 <__swbuf_r+0x6c>
 800eb0a:	4621      	mov	r1, r4
 800eb0c:	4628      	mov	r0, r5
 800eb0e:	f000 f927 	bl	800ed60 <_fflush_r>
 800eb12:	b988      	cbnz	r0, 800eb38 <__swbuf_r+0x90>
 800eb14:	4638      	mov	r0, r7
 800eb16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb18:	4b0a      	ldr	r3, [pc, #40]	; (800eb44 <__swbuf_r+0x9c>)
 800eb1a:	429c      	cmp	r4, r3
 800eb1c:	d101      	bne.n	800eb22 <__swbuf_r+0x7a>
 800eb1e:	68ac      	ldr	r4, [r5, #8]
 800eb20:	e7cf      	b.n	800eac2 <__swbuf_r+0x1a>
 800eb22:	4b09      	ldr	r3, [pc, #36]	; (800eb48 <__swbuf_r+0xa0>)
 800eb24:	429c      	cmp	r4, r3
 800eb26:	bf08      	it	eq
 800eb28:	68ec      	ldreq	r4, [r5, #12]
 800eb2a:	e7ca      	b.n	800eac2 <__swbuf_r+0x1a>
 800eb2c:	4621      	mov	r1, r4
 800eb2e:	4628      	mov	r0, r5
 800eb30:	f000 f81a 	bl	800eb68 <__swsetup_r>
 800eb34:	2800      	cmp	r0, #0
 800eb36:	d0cb      	beq.n	800ead0 <__swbuf_r+0x28>
 800eb38:	f04f 37ff 	mov.w	r7, #4294967295
 800eb3c:	e7ea      	b.n	800eb14 <__swbuf_r+0x6c>
 800eb3e:	bf00      	nop
 800eb40:	0800fa58 	.word	0x0800fa58
 800eb44:	0800fa78 	.word	0x0800fa78
 800eb48:	0800fa38 	.word	0x0800fa38

0800eb4c <__ascii_wctomb>:
 800eb4c:	b149      	cbz	r1, 800eb62 <__ascii_wctomb+0x16>
 800eb4e:	2aff      	cmp	r2, #255	; 0xff
 800eb50:	bf85      	ittet	hi
 800eb52:	238a      	movhi	r3, #138	; 0x8a
 800eb54:	6003      	strhi	r3, [r0, #0]
 800eb56:	700a      	strbls	r2, [r1, #0]
 800eb58:	f04f 30ff 	movhi.w	r0, #4294967295
 800eb5c:	bf98      	it	ls
 800eb5e:	2001      	movls	r0, #1
 800eb60:	4770      	bx	lr
 800eb62:	4608      	mov	r0, r1
 800eb64:	4770      	bx	lr
	...

0800eb68 <__swsetup_r>:
 800eb68:	4b32      	ldr	r3, [pc, #200]	; (800ec34 <__swsetup_r+0xcc>)
 800eb6a:	b570      	push	{r4, r5, r6, lr}
 800eb6c:	681d      	ldr	r5, [r3, #0]
 800eb6e:	4606      	mov	r6, r0
 800eb70:	460c      	mov	r4, r1
 800eb72:	b125      	cbz	r5, 800eb7e <__swsetup_r+0x16>
 800eb74:	69ab      	ldr	r3, [r5, #24]
 800eb76:	b913      	cbnz	r3, 800eb7e <__swsetup_r+0x16>
 800eb78:	4628      	mov	r0, r5
 800eb7a:	f000 f985 	bl	800ee88 <__sinit>
 800eb7e:	4b2e      	ldr	r3, [pc, #184]	; (800ec38 <__swsetup_r+0xd0>)
 800eb80:	429c      	cmp	r4, r3
 800eb82:	d10f      	bne.n	800eba4 <__swsetup_r+0x3c>
 800eb84:	686c      	ldr	r4, [r5, #4]
 800eb86:	89a3      	ldrh	r3, [r4, #12]
 800eb88:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eb8c:	0719      	lsls	r1, r3, #28
 800eb8e:	d42c      	bmi.n	800ebea <__swsetup_r+0x82>
 800eb90:	06dd      	lsls	r5, r3, #27
 800eb92:	d411      	bmi.n	800ebb8 <__swsetup_r+0x50>
 800eb94:	2309      	movs	r3, #9
 800eb96:	6033      	str	r3, [r6, #0]
 800eb98:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eb9c:	81a3      	strh	r3, [r4, #12]
 800eb9e:	f04f 30ff 	mov.w	r0, #4294967295
 800eba2:	e03e      	b.n	800ec22 <__swsetup_r+0xba>
 800eba4:	4b25      	ldr	r3, [pc, #148]	; (800ec3c <__swsetup_r+0xd4>)
 800eba6:	429c      	cmp	r4, r3
 800eba8:	d101      	bne.n	800ebae <__swsetup_r+0x46>
 800ebaa:	68ac      	ldr	r4, [r5, #8]
 800ebac:	e7eb      	b.n	800eb86 <__swsetup_r+0x1e>
 800ebae:	4b24      	ldr	r3, [pc, #144]	; (800ec40 <__swsetup_r+0xd8>)
 800ebb0:	429c      	cmp	r4, r3
 800ebb2:	bf08      	it	eq
 800ebb4:	68ec      	ldreq	r4, [r5, #12]
 800ebb6:	e7e6      	b.n	800eb86 <__swsetup_r+0x1e>
 800ebb8:	0758      	lsls	r0, r3, #29
 800ebba:	d512      	bpl.n	800ebe2 <__swsetup_r+0x7a>
 800ebbc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ebbe:	b141      	cbz	r1, 800ebd2 <__swsetup_r+0x6a>
 800ebc0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ebc4:	4299      	cmp	r1, r3
 800ebc6:	d002      	beq.n	800ebce <__swsetup_r+0x66>
 800ebc8:	4630      	mov	r0, r6
 800ebca:	f7ff fbab 	bl	800e324 <_free_r>
 800ebce:	2300      	movs	r3, #0
 800ebd0:	6363      	str	r3, [r4, #52]	; 0x34
 800ebd2:	89a3      	ldrh	r3, [r4, #12]
 800ebd4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ebd8:	81a3      	strh	r3, [r4, #12]
 800ebda:	2300      	movs	r3, #0
 800ebdc:	6063      	str	r3, [r4, #4]
 800ebde:	6923      	ldr	r3, [r4, #16]
 800ebe0:	6023      	str	r3, [r4, #0]
 800ebe2:	89a3      	ldrh	r3, [r4, #12]
 800ebe4:	f043 0308 	orr.w	r3, r3, #8
 800ebe8:	81a3      	strh	r3, [r4, #12]
 800ebea:	6923      	ldr	r3, [r4, #16]
 800ebec:	b94b      	cbnz	r3, 800ec02 <__swsetup_r+0x9a>
 800ebee:	89a3      	ldrh	r3, [r4, #12]
 800ebf0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ebf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ebf8:	d003      	beq.n	800ec02 <__swsetup_r+0x9a>
 800ebfa:	4621      	mov	r1, r4
 800ebfc:	4630      	mov	r0, r6
 800ebfe:	f000 fa09 	bl	800f014 <__smakebuf_r>
 800ec02:	89a0      	ldrh	r0, [r4, #12]
 800ec04:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ec08:	f010 0301 	ands.w	r3, r0, #1
 800ec0c:	d00a      	beq.n	800ec24 <__swsetup_r+0xbc>
 800ec0e:	2300      	movs	r3, #0
 800ec10:	60a3      	str	r3, [r4, #8]
 800ec12:	6963      	ldr	r3, [r4, #20]
 800ec14:	425b      	negs	r3, r3
 800ec16:	61a3      	str	r3, [r4, #24]
 800ec18:	6923      	ldr	r3, [r4, #16]
 800ec1a:	b943      	cbnz	r3, 800ec2e <__swsetup_r+0xc6>
 800ec1c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ec20:	d1ba      	bne.n	800eb98 <__swsetup_r+0x30>
 800ec22:	bd70      	pop	{r4, r5, r6, pc}
 800ec24:	0781      	lsls	r1, r0, #30
 800ec26:	bf58      	it	pl
 800ec28:	6963      	ldrpl	r3, [r4, #20]
 800ec2a:	60a3      	str	r3, [r4, #8]
 800ec2c:	e7f4      	b.n	800ec18 <__swsetup_r+0xb0>
 800ec2e:	2000      	movs	r0, #0
 800ec30:	e7f7      	b.n	800ec22 <__swsetup_r+0xba>
 800ec32:	bf00      	nop
 800ec34:	20000124 	.word	0x20000124
 800ec38:	0800fa58 	.word	0x0800fa58
 800ec3c:	0800fa78 	.word	0x0800fa78
 800ec40:	0800fa38 	.word	0x0800fa38

0800ec44 <abort>:
 800ec44:	b508      	push	{r3, lr}
 800ec46:	2006      	movs	r0, #6
 800ec48:	f000 faa2 	bl	800f190 <raise>
 800ec4c:	2001      	movs	r0, #1
 800ec4e:	f7f3 fac1 	bl	80021d4 <_exit>
	...

0800ec54 <__sflush_r>:
 800ec54:	898a      	ldrh	r2, [r1, #12]
 800ec56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec5a:	4605      	mov	r5, r0
 800ec5c:	0710      	lsls	r0, r2, #28
 800ec5e:	460c      	mov	r4, r1
 800ec60:	d458      	bmi.n	800ed14 <__sflush_r+0xc0>
 800ec62:	684b      	ldr	r3, [r1, #4]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	dc05      	bgt.n	800ec74 <__sflush_r+0x20>
 800ec68:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	dc02      	bgt.n	800ec74 <__sflush_r+0x20>
 800ec6e:	2000      	movs	r0, #0
 800ec70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ec76:	2e00      	cmp	r6, #0
 800ec78:	d0f9      	beq.n	800ec6e <__sflush_r+0x1a>
 800ec7a:	2300      	movs	r3, #0
 800ec7c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ec80:	682f      	ldr	r7, [r5, #0]
 800ec82:	602b      	str	r3, [r5, #0]
 800ec84:	d032      	beq.n	800ecec <__sflush_r+0x98>
 800ec86:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ec88:	89a3      	ldrh	r3, [r4, #12]
 800ec8a:	075a      	lsls	r2, r3, #29
 800ec8c:	d505      	bpl.n	800ec9a <__sflush_r+0x46>
 800ec8e:	6863      	ldr	r3, [r4, #4]
 800ec90:	1ac0      	subs	r0, r0, r3
 800ec92:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ec94:	b10b      	cbz	r3, 800ec9a <__sflush_r+0x46>
 800ec96:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ec98:	1ac0      	subs	r0, r0, r3
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eca0:	6a21      	ldr	r1, [r4, #32]
 800eca2:	4628      	mov	r0, r5
 800eca4:	47b0      	blx	r6
 800eca6:	1c43      	adds	r3, r0, #1
 800eca8:	89a3      	ldrh	r3, [r4, #12]
 800ecaa:	d106      	bne.n	800ecba <__sflush_r+0x66>
 800ecac:	6829      	ldr	r1, [r5, #0]
 800ecae:	291d      	cmp	r1, #29
 800ecb0:	d82c      	bhi.n	800ed0c <__sflush_r+0xb8>
 800ecb2:	4a2a      	ldr	r2, [pc, #168]	; (800ed5c <__sflush_r+0x108>)
 800ecb4:	40ca      	lsrs	r2, r1
 800ecb6:	07d6      	lsls	r6, r2, #31
 800ecb8:	d528      	bpl.n	800ed0c <__sflush_r+0xb8>
 800ecba:	2200      	movs	r2, #0
 800ecbc:	6062      	str	r2, [r4, #4]
 800ecbe:	04d9      	lsls	r1, r3, #19
 800ecc0:	6922      	ldr	r2, [r4, #16]
 800ecc2:	6022      	str	r2, [r4, #0]
 800ecc4:	d504      	bpl.n	800ecd0 <__sflush_r+0x7c>
 800ecc6:	1c42      	adds	r2, r0, #1
 800ecc8:	d101      	bne.n	800ecce <__sflush_r+0x7a>
 800ecca:	682b      	ldr	r3, [r5, #0]
 800eccc:	b903      	cbnz	r3, 800ecd0 <__sflush_r+0x7c>
 800ecce:	6560      	str	r0, [r4, #84]	; 0x54
 800ecd0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ecd2:	602f      	str	r7, [r5, #0]
 800ecd4:	2900      	cmp	r1, #0
 800ecd6:	d0ca      	beq.n	800ec6e <__sflush_r+0x1a>
 800ecd8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ecdc:	4299      	cmp	r1, r3
 800ecde:	d002      	beq.n	800ece6 <__sflush_r+0x92>
 800ece0:	4628      	mov	r0, r5
 800ece2:	f7ff fb1f 	bl	800e324 <_free_r>
 800ece6:	2000      	movs	r0, #0
 800ece8:	6360      	str	r0, [r4, #52]	; 0x34
 800ecea:	e7c1      	b.n	800ec70 <__sflush_r+0x1c>
 800ecec:	6a21      	ldr	r1, [r4, #32]
 800ecee:	2301      	movs	r3, #1
 800ecf0:	4628      	mov	r0, r5
 800ecf2:	47b0      	blx	r6
 800ecf4:	1c41      	adds	r1, r0, #1
 800ecf6:	d1c7      	bne.n	800ec88 <__sflush_r+0x34>
 800ecf8:	682b      	ldr	r3, [r5, #0]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d0c4      	beq.n	800ec88 <__sflush_r+0x34>
 800ecfe:	2b1d      	cmp	r3, #29
 800ed00:	d001      	beq.n	800ed06 <__sflush_r+0xb2>
 800ed02:	2b16      	cmp	r3, #22
 800ed04:	d101      	bne.n	800ed0a <__sflush_r+0xb6>
 800ed06:	602f      	str	r7, [r5, #0]
 800ed08:	e7b1      	b.n	800ec6e <__sflush_r+0x1a>
 800ed0a:	89a3      	ldrh	r3, [r4, #12]
 800ed0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed10:	81a3      	strh	r3, [r4, #12]
 800ed12:	e7ad      	b.n	800ec70 <__sflush_r+0x1c>
 800ed14:	690f      	ldr	r7, [r1, #16]
 800ed16:	2f00      	cmp	r7, #0
 800ed18:	d0a9      	beq.n	800ec6e <__sflush_r+0x1a>
 800ed1a:	0793      	lsls	r3, r2, #30
 800ed1c:	680e      	ldr	r6, [r1, #0]
 800ed1e:	bf08      	it	eq
 800ed20:	694b      	ldreq	r3, [r1, #20]
 800ed22:	600f      	str	r7, [r1, #0]
 800ed24:	bf18      	it	ne
 800ed26:	2300      	movne	r3, #0
 800ed28:	eba6 0807 	sub.w	r8, r6, r7
 800ed2c:	608b      	str	r3, [r1, #8]
 800ed2e:	f1b8 0f00 	cmp.w	r8, #0
 800ed32:	dd9c      	ble.n	800ec6e <__sflush_r+0x1a>
 800ed34:	6a21      	ldr	r1, [r4, #32]
 800ed36:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ed38:	4643      	mov	r3, r8
 800ed3a:	463a      	mov	r2, r7
 800ed3c:	4628      	mov	r0, r5
 800ed3e:	47b0      	blx	r6
 800ed40:	2800      	cmp	r0, #0
 800ed42:	dc06      	bgt.n	800ed52 <__sflush_r+0xfe>
 800ed44:	89a3      	ldrh	r3, [r4, #12]
 800ed46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed4a:	81a3      	strh	r3, [r4, #12]
 800ed4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed50:	e78e      	b.n	800ec70 <__sflush_r+0x1c>
 800ed52:	4407      	add	r7, r0
 800ed54:	eba8 0800 	sub.w	r8, r8, r0
 800ed58:	e7e9      	b.n	800ed2e <__sflush_r+0xda>
 800ed5a:	bf00      	nop
 800ed5c:	20400001 	.word	0x20400001

0800ed60 <_fflush_r>:
 800ed60:	b538      	push	{r3, r4, r5, lr}
 800ed62:	690b      	ldr	r3, [r1, #16]
 800ed64:	4605      	mov	r5, r0
 800ed66:	460c      	mov	r4, r1
 800ed68:	b913      	cbnz	r3, 800ed70 <_fflush_r+0x10>
 800ed6a:	2500      	movs	r5, #0
 800ed6c:	4628      	mov	r0, r5
 800ed6e:	bd38      	pop	{r3, r4, r5, pc}
 800ed70:	b118      	cbz	r0, 800ed7a <_fflush_r+0x1a>
 800ed72:	6983      	ldr	r3, [r0, #24]
 800ed74:	b90b      	cbnz	r3, 800ed7a <_fflush_r+0x1a>
 800ed76:	f000 f887 	bl	800ee88 <__sinit>
 800ed7a:	4b14      	ldr	r3, [pc, #80]	; (800edcc <_fflush_r+0x6c>)
 800ed7c:	429c      	cmp	r4, r3
 800ed7e:	d11b      	bne.n	800edb8 <_fflush_r+0x58>
 800ed80:	686c      	ldr	r4, [r5, #4]
 800ed82:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d0ef      	beq.n	800ed6a <_fflush_r+0xa>
 800ed8a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ed8c:	07d0      	lsls	r0, r2, #31
 800ed8e:	d404      	bmi.n	800ed9a <_fflush_r+0x3a>
 800ed90:	0599      	lsls	r1, r3, #22
 800ed92:	d402      	bmi.n	800ed9a <_fflush_r+0x3a>
 800ed94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ed96:	f000 f915 	bl	800efc4 <__retarget_lock_acquire_recursive>
 800ed9a:	4628      	mov	r0, r5
 800ed9c:	4621      	mov	r1, r4
 800ed9e:	f7ff ff59 	bl	800ec54 <__sflush_r>
 800eda2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800eda4:	07da      	lsls	r2, r3, #31
 800eda6:	4605      	mov	r5, r0
 800eda8:	d4e0      	bmi.n	800ed6c <_fflush_r+0xc>
 800edaa:	89a3      	ldrh	r3, [r4, #12]
 800edac:	059b      	lsls	r3, r3, #22
 800edae:	d4dd      	bmi.n	800ed6c <_fflush_r+0xc>
 800edb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800edb2:	f000 f908 	bl	800efc6 <__retarget_lock_release_recursive>
 800edb6:	e7d9      	b.n	800ed6c <_fflush_r+0xc>
 800edb8:	4b05      	ldr	r3, [pc, #20]	; (800edd0 <_fflush_r+0x70>)
 800edba:	429c      	cmp	r4, r3
 800edbc:	d101      	bne.n	800edc2 <_fflush_r+0x62>
 800edbe:	68ac      	ldr	r4, [r5, #8]
 800edc0:	e7df      	b.n	800ed82 <_fflush_r+0x22>
 800edc2:	4b04      	ldr	r3, [pc, #16]	; (800edd4 <_fflush_r+0x74>)
 800edc4:	429c      	cmp	r4, r3
 800edc6:	bf08      	it	eq
 800edc8:	68ec      	ldreq	r4, [r5, #12]
 800edca:	e7da      	b.n	800ed82 <_fflush_r+0x22>
 800edcc:	0800fa58 	.word	0x0800fa58
 800edd0:	0800fa78 	.word	0x0800fa78
 800edd4:	0800fa38 	.word	0x0800fa38

0800edd8 <std>:
 800edd8:	2300      	movs	r3, #0
 800edda:	b510      	push	{r4, lr}
 800eddc:	4604      	mov	r4, r0
 800edde:	e9c0 3300 	strd	r3, r3, [r0]
 800ede2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ede6:	6083      	str	r3, [r0, #8]
 800ede8:	8181      	strh	r1, [r0, #12]
 800edea:	6643      	str	r3, [r0, #100]	; 0x64
 800edec:	81c2      	strh	r2, [r0, #14]
 800edee:	6183      	str	r3, [r0, #24]
 800edf0:	4619      	mov	r1, r3
 800edf2:	2208      	movs	r2, #8
 800edf4:	305c      	adds	r0, #92	; 0x5c
 800edf6:	f7fc f867 	bl	800aec8 <memset>
 800edfa:	4b05      	ldr	r3, [pc, #20]	; (800ee10 <std+0x38>)
 800edfc:	6263      	str	r3, [r4, #36]	; 0x24
 800edfe:	4b05      	ldr	r3, [pc, #20]	; (800ee14 <std+0x3c>)
 800ee00:	62a3      	str	r3, [r4, #40]	; 0x28
 800ee02:	4b05      	ldr	r3, [pc, #20]	; (800ee18 <std+0x40>)
 800ee04:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ee06:	4b05      	ldr	r3, [pc, #20]	; (800ee1c <std+0x44>)
 800ee08:	6224      	str	r4, [r4, #32]
 800ee0a:	6323      	str	r3, [r4, #48]	; 0x30
 800ee0c:	bd10      	pop	{r4, pc}
 800ee0e:	bf00      	nop
 800ee10:	0800f1c9 	.word	0x0800f1c9
 800ee14:	0800f1eb 	.word	0x0800f1eb
 800ee18:	0800f223 	.word	0x0800f223
 800ee1c:	0800f247 	.word	0x0800f247

0800ee20 <_cleanup_r>:
 800ee20:	4901      	ldr	r1, [pc, #4]	; (800ee28 <_cleanup_r+0x8>)
 800ee22:	f000 b8af 	b.w	800ef84 <_fwalk_reent>
 800ee26:	bf00      	nop
 800ee28:	0800ed61 	.word	0x0800ed61

0800ee2c <__sfmoreglue>:
 800ee2c:	b570      	push	{r4, r5, r6, lr}
 800ee2e:	2268      	movs	r2, #104	; 0x68
 800ee30:	1e4d      	subs	r5, r1, #1
 800ee32:	4355      	muls	r5, r2
 800ee34:	460e      	mov	r6, r1
 800ee36:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ee3a:	f7ff fadf 	bl	800e3fc <_malloc_r>
 800ee3e:	4604      	mov	r4, r0
 800ee40:	b140      	cbz	r0, 800ee54 <__sfmoreglue+0x28>
 800ee42:	2100      	movs	r1, #0
 800ee44:	e9c0 1600 	strd	r1, r6, [r0]
 800ee48:	300c      	adds	r0, #12
 800ee4a:	60a0      	str	r0, [r4, #8]
 800ee4c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ee50:	f7fc f83a 	bl	800aec8 <memset>
 800ee54:	4620      	mov	r0, r4
 800ee56:	bd70      	pop	{r4, r5, r6, pc}

0800ee58 <__sfp_lock_acquire>:
 800ee58:	4801      	ldr	r0, [pc, #4]	; (800ee60 <__sfp_lock_acquire+0x8>)
 800ee5a:	f000 b8b3 	b.w	800efc4 <__retarget_lock_acquire_recursive>
 800ee5e:	bf00      	nop
 800ee60:	200022d5 	.word	0x200022d5

0800ee64 <__sfp_lock_release>:
 800ee64:	4801      	ldr	r0, [pc, #4]	; (800ee6c <__sfp_lock_release+0x8>)
 800ee66:	f000 b8ae 	b.w	800efc6 <__retarget_lock_release_recursive>
 800ee6a:	bf00      	nop
 800ee6c:	200022d5 	.word	0x200022d5

0800ee70 <__sinit_lock_acquire>:
 800ee70:	4801      	ldr	r0, [pc, #4]	; (800ee78 <__sinit_lock_acquire+0x8>)
 800ee72:	f000 b8a7 	b.w	800efc4 <__retarget_lock_acquire_recursive>
 800ee76:	bf00      	nop
 800ee78:	200022d6 	.word	0x200022d6

0800ee7c <__sinit_lock_release>:
 800ee7c:	4801      	ldr	r0, [pc, #4]	; (800ee84 <__sinit_lock_release+0x8>)
 800ee7e:	f000 b8a2 	b.w	800efc6 <__retarget_lock_release_recursive>
 800ee82:	bf00      	nop
 800ee84:	200022d6 	.word	0x200022d6

0800ee88 <__sinit>:
 800ee88:	b510      	push	{r4, lr}
 800ee8a:	4604      	mov	r4, r0
 800ee8c:	f7ff fff0 	bl	800ee70 <__sinit_lock_acquire>
 800ee90:	69a3      	ldr	r3, [r4, #24]
 800ee92:	b11b      	cbz	r3, 800ee9c <__sinit+0x14>
 800ee94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ee98:	f7ff bff0 	b.w	800ee7c <__sinit_lock_release>
 800ee9c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800eea0:	6523      	str	r3, [r4, #80]	; 0x50
 800eea2:	4b13      	ldr	r3, [pc, #76]	; (800eef0 <__sinit+0x68>)
 800eea4:	4a13      	ldr	r2, [pc, #76]	; (800eef4 <__sinit+0x6c>)
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	62a2      	str	r2, [r4, #40]	; 0x28
 800eeaa:	42a3      	cmp	r3, r4
 800eeac:	bf04      	itt	eq
 800eeae:	2301      	moveq	r3, #1
 800eeb0:	61a3      	streq	r3, [r4, #24]
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	f000 f820 	bl	800eef8 <__sfp>
 800eeb8:	6060      	str	r0, [r4, #4]
 800eeba:	4620      	mov	r0, r4
 800eebc:	f000 f81c 	bl	800eef8 <__sfp>
 800eec0:	60a0      	str	r0, [r4, #8]
 800eec2:	4620      	mov	r0, r4
 800eec4:	f000 f818 	bl	800eef8 <__sfp>
 800eec8:	2200      	movs	r2, #0
 800eeca:	60e0      	str	r0, [r4, #12]
 800eecc:	2104      	movs	r1, #4
 800eece:	6860      	ldr	r0, [r4, #4]
 800eed0:	f7ff ff82 	bl	800edd8 <std>
 800eed4:	68a0      	ldr	r0, [r4, #8]
 800eed6:	2201      	movs	r2, #1
 800eed8:	2109      	movs	r1, #9
 800eeda:	f7ff ff7d 	bl	800edd8 <std>
 800eede:	68e0      	ldr	r0, [r4, #12]
 800eee0:	2202      	movs	r2, #2
 800eee2:	2112      	movs	r1, #18
 800eee4:	f7ff ff78 	bl	800edd8 <std>
 800eee8:	2301      	movs	r3, #1
 800eeea:	61a3      	str	r3, [r4, #24]
 800eeec:	e7d2      	b.n	800ee94 <__sinit+0xc>
 800eeee:	bf00      	nop
 800eef0:	0800f5a0 	.word	0x0800f5a0
 800eef4:	0800ee21 	.word	0x0800ee21

0800eef8 <__sfp>:
 800eef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eefa:	4607      	mov	r7, r0
 800eefc:	f7ff ffac 	bl	800ee58 <__sfp_lock_acquire>
 800ef00:	4b1e      	ldr	r3, [pc, #120]	; (800ef7c <__sfp+0x84>)
 800ef02:	681e      	ldr	r6, [r3, #0]
 800ef04:	69b3      	ldr	r3, [r6, #24]
 800ef06:	b913      	cbnz	r3, 800ef0e <__sfp+0x16>
 800ef08:	4630      	mov	r0, r6
 800ef0a:	f7ff ffbd 	bl	800ee88 <__sinit>
 800ef0e:	3648      	adds	r6, #72	; 0x48
 800ef10:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ef14:	3b01      	subs	r3, #1
 800ef16:	d503      	bpl.n	800ef20 <__sfp+0x28>
 800ef18:	6833      	ldr	r3, [r6, #0]
 800ef1a:	b30b      	cbz	r3, 800ef60 <__sfp+0x68>
 800ef1c:	6836      	ldr	r6, [r6, #0]
 800ef1e:	e7f7      	b.n	800ef10 <__sfp+0x18>
 800ef20:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ef24:	b9d5      	cbnz	r5, 800ef5c <__sfp+0x64>
 800ef26:	4b16      	ldr	r3, [pc, #88]	; (800ef80 <__sfp+0x88>)
 800ef28:	60e3      	str	r3, [r4, #12]
 800ef2a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ef2e:	6665      	str	r5, [r4, #100]	; 0x64
 800ef30:	f000 f847 	bl	800efc2 <__retarget_lock_init_recursive>
 800ef34:	f7ff ff96 	bl	800ee64 <__sfp_lock_release>
 800ef38:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800ef3c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800ef40:	6025      	str	r5, [r4, #0]
 800ef42:	61a5      	str	r5, [r4, #24]
 800ef44:	2208      	movs	r2, #8
 800ef46:	4629      	mov	r1, r5
 800ef48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ef4c:	f7fb ffbc 	bl	800aec8 <memset>
 800ef50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800ef54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800ef58:	4620      	mov	r0, r4
 800ef5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ef5c:	3468      	adds	r4, #104	; 0x68
 800ef5e:	e7d9      	b.n	800ef14 <__sfp+0x1c>
 800ef60:	2104      	movs	r1, #4
 800ef62:	4638      	mov	r0, r7
 800ef64:	f7ff ff62 	bl	800ee2c <__sfmoreglue>
 800ef68:	4604      	mov	r4, r0
 800ef6a:	6030      	str	r0, [r6, #0]
 800ef6c:	2800      	cmp	r0, #0
 800ef6e:	d1d5      	bne.n	800ef1c <__sfp+0x24>
 800ef70:	f7ff ff78 	bl	800ee64 <__sfp_lock_release>
 800ef74:	230c      	movs	r3, #12
 800ef76:	603b      	str	r3, [r7, #0]
 800ef78:	e7ee      	b.n	800ef58 <__sfp+0x60>
 800ef7a:	bf00      	nop
 800ef7c:	0800f5a0 	.word	0x0800f5a0
 800ef80:	ffff0001 	.word	0xffff0001

0800ef84 <_fwalk_reent>:
 800ef84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ef88:	4606      	mov	r6, r0
 800ef8a:	4688      	mov	r8, r1
 800ef8c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800ef90:	2700      	movs	r7, #0
 800ef92:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ef96:	f1b9 0901 	subs.w	r9, r9, #1
 800ef9a:	d505      	bpl.n	800efa8 <_fwalk_reent+0x24>
 800ef9c:	6824      	ldr	r4, [r4, #0]
 800ef9e:	2c00      	cmp	r4, #0
 800efa0:	d1f7      	bne.n	800ef92 <_fwalk_reent+0xe>
 800efa2:	4638      	mov	r0, r7
 800efa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800efa8:	89ab      	ldrh	r3, [r5, #12]
 800efaa:	2b01      	cmp	r3, #1
 800efac:	d907      	bls.n	800efbe <_fwalk_reent+0x3a>
 800efae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800efb2:	3301      	adds	r3, #1
 800efb4:	d003      	beq.n	800efbe <_fwalk_reent+0x3a>
 800efb6:	4629      	mov	r1, r5
 800efb8:	4630      	mov	r0, r6
 800efba:	47c0      	blx	r8
 800efbc:	4307      	orrs	r7, r0
 800efbe:	3568      	adds	r5, #104	; 0x68
 800efc0:	e7e9      	b.n	800ef96 <_fwalk_reent+0x12>

0800efc2 <__retarget_lock_init_recursive>:
 800efc2:	4770      	bx	lr

0800efc4 <__retarget_lock_acquire_recursive>:
 800efc4:	4770      	bx	lr

0800efc6 <__retarget_lock_release_recursive>:
 800efc6:	4770      	bx	lr

0800efc8 <__swhatbuf_r>:
 800efc8:	b570      	push	{r4, r5, r6, lr}
 800efca:	460e      	mov	r6, r1
 800efcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efd0:	2900      	cmp	r1, #0
 800efd2:	b096      	sub	sp, #88	; 0x58
 800efd4:	4614      	mov	r4, r2
 800efd6:	461d      	mov	r5, r3
 800efd8:	da08      	bge.n	800efec <__swhatbuf_r+0x24>
 800efda:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800efde:	2200      	movs	r2, #0
 800efe0:	602a      	str	r2, [r5, #0]
 800efe2:	061a      	lsls	r2, r3, #24
 800efe4:	d410      	bmi.n	800f008 <__swhatbuf_r+0x40>
 800efe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800efea:	e00e      	b.n	800f00a <__swhatbuf_r+0x42>
 800efec:	466a      	mov	r2, sp
 800efee:	f000 f951 	bl	800f294 <_fstat_r>
 800eff2:	2800      	cmp	r0, #0
 800eff4:	dbf1      	blt.n	800efda <__swhatbuf_r+0x12>
 800eff6:	9a01      	ldr	r2, [sp, #4]
 800eff8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800effc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f000:	425a      	negs	r2, r3
 800f002:	415a      	adcs	r2, r3
 800f004:	602a      	str	r2, [r5, #0]
 800f006:	e7ee      	b.n	800efe6 <__swhatbuf_r+0x1e>
 800f008:	2340      	movs	r3, #64	; 0x40
 800f00a:	2000      	movs	r0, #0
 800f00c:	6023      	str	r3, [r4, #0]
 800f00e:	b016      	add	sp, #88	; 0x58
 800f010:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f014 <__smakebuf_r>:
 800f014:	898b      	ldrh	r3, [r1, #12]
 800f016:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f018:	079d      	lsls	r5, r3, #30
 800f01a:	4606      	mov	r6, r0
 800f01c:	460c      	mov	r4, r1
 800f01e:	d507      	bpl.n	800f030 <__smakebuf_r+0x1c>
 800f020:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f024:	6023      	str	r3, [r4, #0]
 800f026:	6123      	str	r3, [r4, #16]
 800f028:	2301      	movs	r3, #1
 800f02a:	6163      	str	r3, [r4, #20]
 800f02c:	b002      	add	sp, #8
 800f02e:	bd70      	pop	{r4, r5, r6, pc}
 800f030:	ab01      	add	r3, sp, #4
 800f032:	466a      	mov	r2, sp
 800f034:	f7ff ffc8 	bl	800efc8 <__swhatbuf_r>
 800f038:	9900      	ldr	r1, [sp, #0]
 800f03a:	4605      	mov	r5, r0
 800f03c:	4630      	mov	r0, r6
 800f03e:	f7ff f9dd 	bl	800e3fc <_malloc_r>
 800f042:	b948      	cbnz	r0, 800f058 <__smakebuf_r+0x44>
 800f044:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f048:	059a      	lsls	r2, r3, #22
 800f04a:	d4ef      	bmi.n	800f02c <__smakebuf_r+0x18>
 800f04c:	f023 0303 	bic.w	r3, r3, #3
 800f050:	f043 0302 	orr.w	r3, r3, #2
 800f054:	81a3      	strh	r3, [r4, #12]
 800f056:	e7e3      	b.n	800f020 <__smakebuf_r+0xc>
 800f058:	4b0d      	ldr	r3, [pc, #52]	; (800f090 <__smakebuf_r+0x7c>)
 800f05a:	62b3      	str	r3, [r6, #40]	; 0x28
 800f05c:	89a3      	ldrh	r3, [r4, #12]
 800f05e:	6020      	str	r0, [r4, #0]
 800f060:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f064:	81a3      	strh	r3, [r4, #12]
 800f066:	9b00      	ldr	r3, [sp, #0]
 800f068:	6163      	str	r3, [r4, #20]
 800f06a:	9b01      	ldr	r3, [sp, #4]
 800f06c:	6120      	str	r0, [r4, #16]
 800f06e:	b15b      	cbz	r3, 800f088 <__smakebuf_r+0x74>
 800f070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f074:	4630      	mov	r0, r6
 800f076:	f000 f91f 	bl	800f2b8 <_isatty_r>
 800f07a:	b128      	cbz	r0, 800f088 <__smakebuf_r+0x74>
 800f07c:	89a3      	ldrh	r3, [r4, #12]
 800f07e:	f023 0303 	bic.w	r3, r3, #3
 800f082:	f043 0301 	orr.w	r3, r3, #1
 800f086:	81a3      	strh	r3, [r4, #12]
 800f088:	89a0      	ldrh	r0, [r4, #12]
 800f08a:	4305      	orrs	r5, r0
 800f08c:	81a5      	strh	r5, [r4, #12]
 800f08e:	e7cd      	b.n	800f02c <__smakebuf_r+0x18>
 800f090:	0800ee21 	.word	0x0800ee21

0800f094 <memmove>:
 800f094:	4288      	cmp	r0, r1
 800f096:	b510      	push	{r4, lr}
 800f098:	eb01 0402 	add.w	r4, r1, r2
 800f09c:	d902      	bls.n	800f0a4 <memmove+0x10>
 800f09e:	4284      	cmp	r4, r0
 800f0a0:	4623      	mov	r3, r4
 800f0a2:	d807      	bhi.n	800f0b4 <memmove+0x20>
 800f0a4:	1e43      	subs	r3, r0, #1
 800f0a6:	42a1      	cmp	r1, r4
 800f0a8:	d008      	beq.n	800f0bc <memmove+0x28>
 800f0aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f0ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f0b2:	e7f8      	b.n	800f0a6 <memmove+0x12>
 800f0b4:	4402      	add	r2, r0
 800f0b6:	4601      	mov	r1, r0
 800f0b8:	428a      	cmp	r2, r1
 800f0ba:	d100      	bne.n	800f0be <memmove+0x2a>
 800f0bc:	bd10      	pop	{r4, pc}
 800f0be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f0c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f0c6:	e7f7      	b.n	800f0b8 <memmove+0x24>

0800f0c8 <__malloc_lock>:
 800f0c8:	4801      	ldr	r0, [pc, #4]	; (800f0d0 <__malloc_lock+0x8>)
 800f0ca:	f7ff bf7b 	b.w	800efc4 <__retarget_lock_acquire_recursive>
 800f0ce:	bf00      	nop
 800f0d0:	200022d4 	.word	0x200022d4

0800f0d4 <__malloc_unlock>:
 800f0d4:	4801      	ldr	r0, [pc, #4]	; (800f0dc <__malloc_unlock+0x8>)
 800f0d6:	f7ff bf76 	b.w	800efc6 <__retarget_lock_release_recursive>
 800f0da:	bf00      	nop
 800f0dc:	200022d4 	.word	0x200022d4

0800f0e0 <_realloc_r>:
 800f0e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f0e4:	4680      	mov	r8, r0
 800f0e6:	4614      	mov	r4, r2
 800f0e8:	460e      	mov	r6, r1
 800f0ea:	b921      	cbnz	r1, 800f0f6 <_realloc_r+0x16>
 800f0ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0f0:	4611      	mov	r1, r2
 800f0f2:	f7ff b983 	b.w	800e3fc <_malloc_r>
 800f0f6:	b92a      	cbnz	r2, 800f104 <_realloc_r+0x24>
 800f0f8:	f7ff f914 	bl	800e324 <_free_r>
 800f0fc:	4625      	mov	r5, r4
 800f0fe:	4628      	mov	r0, r5
 800f100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f104:	f000 f8fa 	bl	800f2fc <_malloc_usable_size_r>
 800f108:	4284      	cmp	r4, r0
 800f10a:	4607      	mov	r7, r0
 800f10c:	d802      	bhi.n	800f114 <_realloc_r+0x34>
 800f10e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f112:	d812      	bhi.n	800f13a <_realloc_r+0x5a>
 800f114:	4621      	mov	r1, r4
 800f116:	4640      	mov	r0, r8
 800f118:	f7ff f970 	bl	800e3fc <_malloc_r>
 800f11c:	4605      	mov	r5, r0
 800f11e:	2800      	cmp	r0, #0
 800f120:	d0ed      	beq.n	800f0fe <_realloc_r+0x1e>
 800f122:	42bc      	cmp	r4, r7
 800f124:	4622      	mov	r2, r4
 800f126:	4631      	mov	r1, r6
 800f128:	bf28      	it	cs
 800f12a:	463a      	movcs	r2, r7
 800f12c:	f7fb febe 	bl	800aeac <memcpy>
 800f130:	4631      	mov	r1, r6
 800f132:	4640      	mov	r0, r8
 800f134:	f7ff f8f6 	bl	800e324 <_free_r>
 800f138:	e7e1      	b.n	800f0fe <_realloc_r+0x1e>
 800f13a:	4635      	mov	r5, r6
 800f13c:	e7df      	b.n	800f0fe <_realloc_r+0x1e>

0800f13e <_raise_r>:
 800f13e:	291f      	cmp	r1, #31
 800f140:	b538      	push	{r3, r4, r5, lr}
 800f142:	4604      	mov	r4, r0
 800f144:	460d      	mov	r5, r1
 800f146:	d904      	bls.n	800f152 <_raise_r+0x14>
 800f148:	2316      	movs	r3, #22
 800f14a:	6003      	str	r3, [r0, #0]
 800f14c:	f04f 30ff 	mov.w	r0, #4294967295
 800f150:	bd38      	pop	{r3, r4, r5, pc}
 800f152:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f154:	b112      	cbz	r2, 800f15c <_raise_r+0x1e>
 800f156:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f15a:	b94b      	cbnz	r3, 800f170 <_raise_r+0x32>
 800f15c:	4620      	mov	r0, r4
 800f15e:	f000 f831 	bl	800f1c4 <_getpid_r>
 800f162:	462a      	mov	r2, r5
 800f164:	4601      	mov	r1, r0
 800f166:	4620      	mov	r0, r4
 800f168:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f16c:	f000 b818 	b.w	800f1a0 <_kill_r>
 800f170:	2b01      	cmp	r3, #1
 800f172:	d00a      	beq.n	800f18a <_raise_r+0x4c>
 800f174:	1c59      	adds	r1, r3, #1
 800f176:	d103      	bne.n	800f180 <_raise_r+0x42>
 800f178:	2316      	movs	r3, #22
 800f17a:	6003      	str	r3, [r0, #0]
 800f17c:	2001      	movs	r0, #1
 800f17e:	e7e7      	b.n	800f150 <_raise_r+0x12>
 800f180:	2400      	movs	r4, #0
 800f182:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f186:	4628      	mov	r0, r5
 800f188:	4798      	blx	r3
 800f18a:	2000      	movs	r0, #0
 800f18c:	e7e0      	b.n	800f150 <_raise_r+0x12>
	...

0800f190 <raise>:
 800f190:	4b02      	ldr	r3, [pc, #8]	; (800f19c <raise+0xc>)
 800f192:	4601      	mov	r1, r0
 800f194:	6818      	ldr	r0, [r3, #0]
 800f196:	f7ff bfd2 	b.w	800f13e <_raise_r>
 800f19a:	bf00      	nop
 800f19c:	20000124 	.word	0x20000124

0800f1a0 <_kill_r>:
 800f1a0:	b538      	push	{r3, r4, r5, lr}
 800f1a2:	4d07      	ldr	r5, [pc, #28]	; (800f1c0 <_kill_r+0x20>)
 800f1a4:	2300      	movs	r3, #0
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	4608      	mov	r0, r1
 800f1aa:	4611      	mov	r1, r2
 800f1ac:	602b      	str	r3, [r5, #0]
 800f1ae:	f7f3 f801 	bl	80021b4 <_kill>
 800f1b2:	1c43      	adds	r3, r0, #1
 800f1b4:	d102      	bne.n	800f1bc <_kill_r+0x1c>
 800f1b6:	682b      	ldr	r3, [r5, #0]
 800f1b8:	b103      	cbz	r3, 800f1bc <_kill_r+0x1c>
 800f1ba:	6023      	str	r3, [r4, #0]
 800f1bc:	bd38      	pop	{r3, r4, r5, pc}
 800f1be:	bf00      	nop
 800f1c0:	200022d8 	.word	0x200022d8

0800f1c4 <_getpid_r>:
 800f1c4:	f7f2 bfee 	b.w	80021a4 <_getpid>

0800f1c8 <__sread>:
 800f1c8:	b510      	push	{r4, lr}
 800f1ca:	460c      	mov	r4, r1
 800f1cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f1d0:	f000 f89c 	bl	800f30c <_read_r>
 800f1d4:	2800      	cmp	r0, #0
 800f1d6:	bfab      	itete	ge
 800f1d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f1da:	89a3      	ldrhlt	r3, [r4, #12]
 800f1dc:	181b      	addge	r3, r3, r0
 800f1de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f1e2:	bfac      	ite	ge
 800f1e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800f1e6:	81a3      	strhlt	r3, [r4, #12]
 800f1e8:	bd10      	pop	{r4, pc}

0800f1ea <__swrite>:
 800f1ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f1ee:	461f      	mov	r7, r3
 800f1f0:	898b      	ldrh	r3, [r1, #12]
 800f1f2:	05db      	lsls	r3, r3, #23
 800f1f4:	4605      	mov	r5, r0
 800f1f6:	460c      	mov	r4, r1
 800f1f8:	4616      	mov	r6, r2
 800f1fa:	d505      	bpl.n	800f208 <__swrite+0x1e>
 800f1fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f200:	2302      	movs	r3, #2
 800f202:	2200      	movs	r2, #0
 800f204:	f000 f868 	bl	800f2d8 <_lseek_r>
 800f208:	89a3      	ldrh	r3, [r4, #12]
 800f20a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f20e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f212:	81a3      	strh	r3, [r4, #12]
 800f214:	4632      	mov	r2, r6
 800f216:	463b      	mov	r3, r7
 800f218:	4628      	mov	r0, r5
 800f21a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f21e:	f000 b817 	b.w	800f250 <_write_r>

0800f222 <__sseek>:
 800f222:	b510      	push	{r4, lr}
 800f224:	460c      	mov	r4, r1
 800f226:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f22a:	f000 f855 	bl	800f2d8 <_lseek_r>
 800f22e:	1c43      	adds	r3, r0, #1
 800f230:	89a3      	ldrh	r3, [r4, #12]
 800f232:	bf15      	itete	ne
 800f234:	6560      	strne	r0, [r4, #84]	; 0x54
 800f236:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f23a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f23e:	81a3      	strheq	r3, [r4, #12]
 800f240:	bf18      	it	ne
 800f242:	81a3      	strhne	r3, [r4, #12]
 800f244:	bd10      	pop	{r4, pc}

0800f246 <__sclose>:
 800f246:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f24a:	f000 b813 	b.w	800f274 <_close_r>
	...

0800f250 <_write_r>:
 800f250:	b538      	push	{r3, r4, r5, lr}
 800f252:	4d07      	ldr	r5, [pc, #28]	; (800f270 <_write_r+0x20>)
 800f254:	4604      	mov	r4, r0
 800f256:	4608      	mov	r0, r1
 800f258:	4611      	mov	r1, r2
 800f25a:	2200      	movs	r2, #0
 800f25c:	602a      	str	r2, [r5, #0]
 800f25e:	461a      	mov	r2, r3
 800f260:	f7f2 ffdf 	bl	8002222 <_write>
 800f264:	1c43      	adds	r3, r0, #1
 800f266:	d102      	bne.n	800f26e <_write_r+0x1e>
 800f268:	682b      	ldr	r3, [r5, #0]
 800f26a:	b103      	cbz	r3, 800f26e <_write_r+0x1e>
 800f26c:	6023      	str	r3, [r4, #0]
 800f26e:	bd38      	pop	{r3, r4, r5, pc}
 800f270:	200022d8 	.word	0x200022d8

0800f274 <_close_r>:
 800f274:	b538      	push	{r3, r4, r5, lr}
 800f276:	4d06      	ldr	r5, [pc, #24]	; (800f290 <_close_r+0x1c>)
 800f278:	2300      	movs	r3, #0
 800f27a:	4604      	mov	r4, r0
 800f27c:	4608      	mov	r0, r1
 800f27e:	602b      	str	r3, [r5, #0]
 800f280:	f7f2 ffeb 	bl	800225a <_close>
 800f284:	1c43      	adds	r3, r0, #1
 800f286:	d102      	bne.n	800f28e <_close_r+0x1a>
 800f288:	682b      	ldr	r3, [r5, #0]
 800f28a:	b103      	cbz	r3, 800f28e <_close_r+0x1a>
 800f28c:	6023      	str	r3, [r4, #0]
 800f28e:	bd38      	pop	{r3, r4, r5, pc}
 800f290:	200022d8 	.word	0x200022d8

0800f294 <_fstat_r>:
 800f294:	b538      	push	{r3, r4, r5, lr}
 800f296:	4d07      	ldr	r5, [pc, #28]	; (800f2b4 <_fstat_r+0x20>)
 800f298:	2300      	movs	r3, #0
 800f29a:	4604      	mov	r4, r0
 800f29c:	4608      	mov	r0, r1
 800f29e:	4611      	mov	r1, r2
 800f2a0:	602b      	str	r3, [r5, #0]
 800f2a2:	f7f2 ffe6 	bl	8002272 <_fstat>
 800f2a6:	1c43      	adds	r3, r0, #1
 800f2a8:	d102      	bne.n	800f2b0 <_fstat_r+0x1c>
 800f2aa:	682b      	ldr	r3, [r5, #0]
 800f2ac:	b103      	cbz	r3, 800f2b0 <_fstat_r+0x1c>
 800f2ae:	6023      	str	r3, [r4, #0]
 800f2b0:	bd38      	pop	{r3, r4, r5, pc}
 800f2b2:	bf00      	nop
 800f2b4:	200022d8 	.word	0x200022d8

0800f2b8 <_isatty_r>:
 800f2b8:	b538      	push	{r3, r4, r5, lr}
 800f2ba:	4d06      	ldr	r5, [pc, #24]	; (800f2d4 <_isatty_r+0x1c>)
 800f2bc:	2300      	movs	r3, #0
 800f2be:	4604      	mov	r4, r0
 800f2c0:	4608      	mov	r0, r1
 800f2c2:	602b      	str	r3, [r5, #0]
 800f2c4:	f7f2 ffe5 	bl	8002292 <_isatty>
 800f2c8:	1c43      	adds	r3, r0, #1
 800f2ca:	d102      	bne.n	800f2d2 <_isatty_r+0x1a>
 800f2cc:	682b      	ldr	r3, [r5, #0]
 800f2ce:	b103      	cbz	r3, 800f2d2 <_isatty_r+0x1a>
 800f2d0:	6023      	str	r3, [r4, #0]
 800f2d2:	bd38      	pop	{r3, r4, r5, pc}
 800f2d4:	200022d8 	.word	0x200022d8

0800f2d8 <_lseek_r>:
 800f2d8:	b538      	push	{r3, r4, r5, lr}
 800f2da:	4d07      	ldr	r5, [pc, #28]	; (800f2f8 <_lseek_r+0x20>)
 800f2dc:	4604      	mov	r4, r0
 800f2de:	4608      	mov	r0, r1
 800f2e0:	4611      	mov	r1, r2
 800f2e2:	2200      	movs	r2, #0
 800f2e4:	602a      	str	r2, [r5, #0]
 800f2e6:	461a      	mov	r2, r3
 800f2e8:	f7f2 ffde 	bl	80022a8 <_lseek>
 800f2ec:	1c43      	adds	r3, r0, #1
 800f2ee:	d102      	bne.n	800f2f6 <_lseek_r+0x1e>
 800f2f0:	682b      	ldr	r3, [r5, #0]
 800f2f2:	b103      	cbz	r3, 800f2f6 <_lseek_r+0x1e>
 800f2f4:	6023      	str	r3, [r4, #0]
 800f2f6:	bd38      	pop	{r3, r4, r5, pc}
 800f2f8:	200022d8 	.word	0x200022d8

0800f2fc <_malloc_usable_size_r>:
 800f2fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f300:	1f18      	subs	r0, r3, #4
 800f302:	2b00      	cmp	r3, #0
 800f304:	bfbc      	itt	lt
 800f306:	580b      	ldrlt	r3, [r1, r0]
 800f308:	18c0      	addlt	r0, r0, r3
 800f30a:	4770      	bx	lr

0800f30c <_read_r>:
 800f30c:	b538      	push	{r3, r4, r5, lr}
 800f30e:	4d07      	ldr	r5, [pc, #28]	; (800f32c <_read_r+0x20>)
 800f310:	4604      	mov	r4, r0
 800f312:	4608      	mov	r0, r1
 800f314:	4611      	mov	r1, r2
 800f316:	2200      	movs	r2, #0
 800f318:	602a      	str	r2, [r5, #0]
 800f31a:	461a      	mov	r2, r3
 800f31c:	f7f2 ff64 	bl	80021e8 <_read>
 800f320:	1c43      	adds	r3, r0, #1
 800f322:	d102      	bne.n	800f32a <_read_r+0x1e>
 800f324:	682b      	ldr	r3, [r5, #0]
 800f326:	b103      	cbz	r3, 800f32a <_read_r+0x1e>
 800f328:	6023      	str	r3, [r4, #0]
 800f32a:	bd38      	pop	{r3, r4, r5, pc}
 800f32c:	200022d8 	.word	0x200022d8

0800f330 <sqrt>:
 800f330:	b538      	push	{r3, r4, r5, lr}
 800f332:	ed2d 8b02 	vpush	{d8}
 800f336:	ec55 4b10 	vmov	r4, r5, d0
 800f33a:	f000 f825 	bl	800f388 <__ieee754_sqrt>
 800f33e:	4622      	mov	r2, r4
 800f340:	462b      	mov	r3, r5
 800f342:	4620      	mov	r0, r4
 800f344:	4629      	mov	r1, r5
 800f346:	eeb0 8a40 	vmov.f32	s16, s0
 800f34a:	eef0 8a60 	vmov.f32	s17, s1
 800f34e:	f7f1 fbf5 	bl	8000b3c <__aeabi_dcmpun>
 800f352:	b990      	cbnz	r0, 800f37a <sqrt+0x4a>
 800f354:	2200      	movs	r2, #0
 800f356:	2300      	movs	r3, #0
 800f358:	4620      	mov	r0, r4
 800f35a:	4629      	mov	r1, r5
 800f35c:	f7f1 fbc6 	bl	8000aec <__aeabi_dcmplt>
 800f360:	b158      	cbz	r0, 800f37a <sqrt+0x4a>
 800f362:	f7fb fd79 	bl	800ae58 <__errno>
 800f366:	2321      	movs	r3, #33	; 0x21
 800f368:	6003      	str	r3, [r0, #0]
 800f36a:	2200      	movs	r2, #0
 800f36c:	2300      	movs	r3, #0
 800f36e:	4610      	mov	r0, r2
 800f370:	4619      	mov	r1, r3
 800f372:	f7f1 fa73 	bl	800085c <__aeabi_ddiv>
 800f376:	ec41 0b18 	vmov	d8, r0, r1
 800f37a:	eeb0 0a48 	vmov.f32	s0, s16
 800f37e:	eef0 0a68 	vmov.f32	s1, s17
 800f382:	ecbd 8b02 	vpop	{d8}
 800f386:	bd38      	pop	{r3, r4, r5, pc}

0800f388 <__ieee754_sqrt>:
 800f388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f38c:	ec55 4b10 	vmov	r4, r5, d0
 800f390:	4e55      	ldr	r6, [pc, #340]	; (800f4e8 <__ieee754_sqrt+0x160>)
 800f392:	43ae      	bics	r6, r5
 800f394:	ee10 0a10 	vmov	r0, s0
 800f398:	ee10 3a10 	vmov	r3, s0
 800f39c:	462a      	mov	r2, r5
 800f39e:	4629      	mov	r1, r5
 800f3a0:	d110      	bne.n	800f3c4 <__ieee754_sqrt+0x3c>
 800f3a2:	ee10 2a10 	vmov	r2, s0
 800f3a6:	462b      	mov	r3, r5
 800f3a8:	f7f1 f92e 	bl	8000608 <__aeabi_dmul>
 800f3ac:	4602      	mov	r2, r0
 800f3ae:	460b      	mov	r3, r1
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	4629      	mov	r1, r5
 800f3b4:	f7f0 ff72 	bl	800029c <__adddf3>
 800f3b8:	4604      	mov	r4, r0
 800f3ba:	460d      	mov	r5, r1
 800f3bc:	ec45 4b10 	vmov	d0, r4, r5
 800f3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3c4:	2d00      	cmp	r5, #0
 800f3c6:	dc10      	bgt.n	800f3ea <__ieee754_sqrt+0x62>
 800f3c8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f3cc:	4330      	orrs	r0, r6
 800f3ce:	d0f5      	beq.n	800f3bc <__ieee754_sqrt+0x34>
 800f3d0:	b15d      	cbz	r5, 800f3ea <__ieee754_sqrt+0x62>
 800f3d2:	ee10 2a10 	vmov	r2, s0
 800f3d6:	462b      	mov	r3, r5
 800f3d8:	ee10 0a10 	vmov	r0, s0
 800f3dc:	f7f0 ff5c 	bl	8000298 <__aeabi_dsub>
 800f3e0:	4602      	mov	r2, r0
 800f3e2:	460b      	mov	r3, r1
 800f3e4:	f7f1 fa3a 	bl	800085c <__aeabi_ddiv>
 800f3e8:	e7e6      	b.n	800f3b8 <__ieee754_sqrt+0x30>
 800f3ea:	1512      	asrs	r2, r2, #20
 800f3ec:	d074      	beq.n	800f4d8 <__ieee754_sqrt+0x150>
 800f3ee:	07d4      	lsls	r4, r2, #31
 800f3f0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f3f4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f3f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f3fc:	bf5e      	ittt	pl
 800f3fe:	0fda      	lsrpl	r2, r3, #31
 800f400:	005b      	lslpl	r3, r3, #1
 800f402:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f406:	2400      	movs	r4, #0
 800f408:	0fda      	lsrs	r2, r3, #31
 800f40a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f40e:	107f      	asrs	r7, r7, #1
 800f410:	005b      	lsls	r3, r3, #1
 800f412:	2516      	movs	r5, #22
 800f414:	4620      	mov	r0, r4
 800f416:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f41a:	1886      	adds	r6, r0, r2
 800f41c:	428e      	cmp	r6, r1
 800f41e:	bfde      	ittt	le
 800f420:	1b89      	suble	r1, r1, r6
 800f422:	18b0      	addle	r0, r6, r2
 800f424:	18a4      	addle	r4, r4, r2
 800f426:	0049      	lsls	r1, r1, #1
 800f428:	3d01      	subs	r5, #1
 800f42a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f42e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f432:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f436:	d1f0      	bne.n	800f41a <__ieee754_sqrt+0x92>
 800f438:	462a      	mov	r2, r5
 800f43a:	f04f 0e20 	mov.w	lr, #32
 800f43e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f442:	4281      	cmp	r1, r0
 800f444:	eb06 0c05 	add.w	ip, r6, r5
 800f448:	dc02      	bgt.n	800f450 <__ieee754_sqrt+0xc8>
 800f44a:	d113      	bne.n	800f474 <__ieee754_sqrt+0xec>
 800f44c:	459c      	cmp	ip, r3
 800f44e:	d811      	bhi.n	800f474 <__ieee754_sqrt+0xec>
 800f450:	f1bc 0f00 	cmp.w	ip, #0
 800f454:	eb0c 0506 	add.w	r5, ip, r6
 800f458:	da43      	bge.n	800f4e2 <__ieee754_sqrt+0x15a>
 800f45a:	2d00      	cmp	r5, #0
 800f45c:	db41      	blt.n	800f4e2 <__ieee754_sqrt+0x15a>
 800f45e:	f100 0801 	add.w	r8, r0, #1
 800f462:	1a09      	subs	r1, r1, r0
 800f464:	459c      	cmp	ip, r3
 800f466:	bf88      	it	hi
 800f468:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f46c:	eba3 030c 	sub.w	r3, r3, ip
 800f470:	4432      	add	r2, r6
 800f472:	4640      	mov	r0, r8
 800f474:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f478:	f1be 0e01 	subs.w	lr, lr, #1
 800f47c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f480:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f484:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f488:	d1db      	bne.n	800f442 <__ieee754_sqrt+0xba>
 800f48a:	430b      	orrs	r3, r1
 800f48c:	d006      	beq.n	800f49c <__ieee754_sqrt+0x114>
 800f48e:	1c50      	adds	r0, r2, #1
 800f490:	bf13      	iteet	ne
 800f492:	3201      	addne	r2, #1
 800f494:	3401      	addeq	r4, #1
 800f496:	4672      	moveq	r2, lr
 800f498:	f022 0201 	bicne.w	r2, r2, #1
 800f49c:	1063      	asrs	r3, r4, #1
 800f49e:	0852      	lsrs	r2, r2, #1
 800f4a0:	07e1      	lsls	r1, r4, #31
 800f4a2:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f4a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f4aa:	bf48      	it	mi
 800f4ac:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f4b0:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f4b4:	4614      	mov	r4, r2
 800f4b6:	e781      	b.n	800f3bc <__ieee754_sqrt+0x34>
 800f4b8:	0ad9      	lsrs	r1, r3, #11
 800f4ba:	3815      	subs	r0, #21
 800f4bc:	055b      	lsls	r3, r3, #21
 800f4be:	2900      	cmp	r1, #0
 800f4c0:	d0fa      	beq.n	800f4b8 <__ieee754_sqrt+0x130>
 800f4c2:	02cd      	lsls	r5, r1, #11
 800f4c4:	d50a      	bpl.n	800f4dc <__ieee754_sqrt+0x154>
 800f4c6:	f1c2 0420 	rsb	r4, r2, #32
 800f4ca:	fa23 f404 	lsr.w	r4, r3, r4
 800f4ce:	1e55      	subs	r5, r2, #1
 800f4d0:	4093      	lsls	r3, r2
 800f4d2:	4321      	orrs	r1, r4
 800f4d4:	1b42      	subs	r2, r0, r5
 800f4d6:	e78a      	b.n	800f3ee <__ieee754_sqrt+0x66>
 800f4d8:	4610      	mov	r0, r2
 800f4da:	e7f0      	b.n	800f4be <__ieee754_sqrt+0x136>
 800f4dc:	0049      	lsls	r1, r1, #1
 800f4de:	3201      	adds	r2, #1
 800f4e0:	e7ef      	b.n	800f4c2 <__ieee754_sqrt+0x13a>
 800f4e2:	4680      	mov	r8, r0
 800f4e4:	e7bd      	b.n	800f462 <__ieee754_sqrt+0xda>
 800f4e6:	bf00      	nop
 800f4e8:	7ff00000 	.word	0x7ff00000

0800f4ec <_init>:
 800f4ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ee:	bf00      	nop
 800f4f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4f2:	bc08      	pop	{r3}
 800f4f4:	469e      	mov	lr, r3
 800f4f6:	4770      	bx	lr

0800f4f8 <_fini>:
 800f4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4fa:	bf00      	nop
 800f4fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4fe:	bc08      	pop	{r3}
 800f500:	469e      	mov	lr, r3
 800f502:	4770      	bx	lr
