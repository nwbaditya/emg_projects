
emg_projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  0800d678  0800d678  0001d678  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dacc  0800dacc  0002030c  2**0
                  CONTENTS
  4 .ARM          00000008  0800dacc  0800dacc  0001dacc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dad4  0800dad4  0002030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dad4  0800dad4  0001dad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dad8  0800dad8  0001dad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000030c  20000000  0800dadc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fec  2000030c  0800dde8  0002030c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200022f8  0800dde8  000222f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b7e2  00000000  00000000  0002033c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044fc  00000000  00000000  0003bb1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00040020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001548  00000000  00000000  00041778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001caa2  00000000  00000000  00042cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eea2  00000000  00000000  0005f762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f786  00000000  00000000  0007e604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011dd8a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007218  00000000  00000000  0011dddc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000030c 	.word	0x2000030c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d660 	.word	0x0800d660

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000310 	.word	0x20000310
 80001dc:	0800d660 	.word	0x0800d660

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <FIRFilter_Init>:
#include "FIRFilter.h"

//static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {-0.027313375519213704,-0.02397030968726964,-0.07322923821766152,-0.17458688342254686,-0.23710222197190461,-0.11556723292677823,0.1941226814572781,0.4717067279432907,0.4717067279432907,0.1941226814572781,-0.11556723292677823,-0.23710222197190461,-0.17458688342254686,-0.07322923821766152,-0.02397030968726964,-0.027313375519213704};
static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f , 0.1f , 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};

void FIRFilter_Init(FIRFilter *fir){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	//Clear Filter Buffer
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++){
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e009      	b.n	8000ede <FIRFilter_Init+0x22>
		fir->buf[n] = 0.0f;
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++){
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	3301      	adds	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	2b09      	cmp	r3, #9
 8000ee2:	d9f2      	bls.n	8000eca <FIRFilter_Init+0xe>
	}

	//Clear Buf Index
	fir->bufIndex = 0;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	//Clear Filter Output
	fir->out = 0.0f;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *fir, float inp){
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	ed87 0a00 	vstr	s0, [r7]
	/*Store Latest Sample in buffer */
	fir->buf[fir->bufIndex] = inp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	601a      	str	r2, [r3, #0]

	/*increment buffer index and wrap around if necessary*/
	fir->bufIndex++;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f22:	3301      	adds	r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	if(fir->bufIndex == FIR_FILTER_LENGTH - 1){
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f32:	2b09      	cmp	r3, #9
 8000f34:	d103      	bne.n	8000f3e <FIRFilter_Update+0x3e>
		fir->bufIndex = 0;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}

	/*Compute New Output Sample (Via Convolution)*/
	fir->out = 0.0f;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	62da      	str	r2, [r3, #44]	; 0x2c

	uint8_t sumIndex = fir->bufIndex;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f4c:	73fb      	strb	r3, [r7, #15]

	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++){
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73bb      	strb	r3, [r7, #14]
 8000f52:	e021      	b.n	8000f98 <FIRFilter_Update+0x98>
		/*Decrement Index and Wrap if Necessary*/
		if(sumIndex > 0){
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <FIRFilter_Update+0x62>
			sumIndex--;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e001      	b.n	8000f66 <FIRFilter_Update+0x66>
		}else{
			sumIndex = FIR_FILTER_LENGTH - 1;
 8000f62:	2309      	movs	r3, #9
 8000f64:	73fb      	strb	r3, [r7, #15]
		}

		/*Multiply Impulse Response with Shifted input sample and add to output*/
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000f6c:	7bbb      	ldrb	r3, [r7, #14]
 8000f6e:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <FIRFilter_Update+0xb4>)
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	edd3 6a00 	vldr	s13, [r3]
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	edd3 7a00 	vldr	s15, [r3]
 8000f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++){
 8000f92:	7bbb      	ldrb	r3, [r7, #14]
 8000f94:	3301      	adds	r3, #1
 8000f96:	73bb      	strb	r3, [r7, #14]
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
 8000f9a:	2b09      	cmp	r3, #9
 8000f9c:	d9da      	bls.n	8000f54 <FIRFilter_Update+0x54>
	}

	/*return filtered output*/
	return fir->out;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa2:	ee07 3a90 	vmov	s15, r3
}
 8000fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fca:	4b29      	ldr	r3, [pc, #164]	; (8001070 <MX_ADC1_Init+0xb8>)
 8000fcc:	4a29      	ldr	r2, [pc, #164]	; (8001074 <MX_ADC1_Init+0xbc>)
 8000fce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <MX_ADC1_Init+0xb8>)
 8000fd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd8:	4b25      	ldr	r3, [pc, #148]	; (8001070 <MX_ADC1_Init+0xb8>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fde:	4b24      	ldr	r3, [pc, #144]	; (8001070 <MX_ADC1_Init+0xb8>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fe4:	4b22      	ldr	r3, [pc, #136]	; (8001070 <MX_ADC1_Init+0xb8>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fea:	4b21      	ldr	r3, [pc, #132]	; (8001070 <MX_ADC1_Init+0xb8>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff2:	4b1f      	ldr	r3, [pc, #124]	; (8001070 <MX_ADC1_Init+0xb8>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff8:	4b1d      	ldr	r3, [pc, #116]	; (8001070 <MX_ADC1_Init+0xb8>)
 8000ffa:	4a1f      	ldr	r2, [pc, #124]	; (8001078 <MX_ADC1_Init+0xc0>)
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffe:	4b1c      	ldr	r3, [pc, #112]	; (8001070 <MX_ADC1_Init+0xb8>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001004:	4b1a      	ldr	r3, [pc, #104]	; (8001070 <MX_ADC1_Init+0xb8>)
 8001006:	2202      	movs	r2, #2
 8001008:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800100a:	4b19      	ldr	r3, [pc, #100]	; (8001070 <MX_ADC1_Init+0xb8>)
 800100c:	2201      	movs	r2, #1
 800100e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001012:	4b17      	ldr	r3, [pc, #92]	; (8001070 <MX_ADC1_Init+0xb8>)
 8001014:	2201      	movs	r2, #1
 8001016:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001018:	4815      	ldr	r0, [pc, #84]	; (8001070 <MX_ADC1_Init+0xb8>)
 800101a:	f001 f857 	bl	80020cc <HAL_ADC_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001024:	f000 fc68 	bl	80018f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001028:	2301      	movs	r3, #1
 800102a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800102c:	2301      	movs	r3, #1
 800102e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001030:	2302      	movs	r3, #2
 8001032:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	4619      	mov	r1, r3
 8001038:	480d      	ldr	r0, [pc, #52]	; (8001070 <MX_ADC1_Init+0xb8>)
 800103a:	f001 faa9 	bl	8002590 <HAL_ADC_ConfigChannel>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001044:	f000 fc58 	bl	80018f8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001048:	2303      	movs	r3, #3
 800104a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800104c:	2302      	movs	r3, #2
 800104e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001050:	2303      	movs	r3, #3
 8001052:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001054:	463b      	mov	r3, r7
 8001056:	4619      	mov	r1, r3
 8001058:	4805      	ldr	r0, [pc, #20]	; (8001070 <MX_ADC1_Init+0xb8>)
 800105a:	f001 fa99 	bl	8002590 <HAL_ADC_ConfigChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001064:	f000 fc48 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001068:	bf00      	nop
 800106a:	3710      	adds	r7, #16
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20000328 	.word	0x20000328
 8001074:	40012000 	.word	0x40012000
 8001078:	0f000001 	.word	0x0f000001

0800107c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08a      	sub	sp, #40	; 0x28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	2200      	movs	r2, #0
 800108a:	601a      	str	r2, [r3, #0]
 800108c:	605a      	str	r2, [r3, #4]
 800108e:	609a      	str	r2, [r3, #8]
 8001090:	60da      	str	r2, [r3, #12]
 8001092:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a33      	ldr	r2, [pc, #204]	; (8001168 <HAL_ADC_MspInit+0xec>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d15f      	bne.n	800115e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800109e:	2300      	movs	r3, #0
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	4b32      	ldr	r3, [pc, #200]	; (800116c <HAL_ADC_MspInit+0xf0>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a31      	ldr	r2, [pc, #196]	; (800116c <HAL_ADC_MspInit+0xf0>)
 80010a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
 80010ae:	4b2f      	ldr	r3, [pc, #188]	; (800116c <HAL_ADC_MspInit+0xf0>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b6:	613b      	str	r3, [r7, #16]
 80010b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
 80010be:	4b2b      	ldr	r3, [pc, #172]	; (800116c <HAL_ADC_MspInit+0xf0>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	4a2a      	ldr	r2, [pc, #168]	; (800116c <HAL_ADC_MspInit+0xf0>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ca:	4b28      	ldr	r3, [pc, #160]	; (800116c <HAL_ADC_MspInit+0xf0>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80010d6:	230a      	movs	r3, #10
 80010d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010da:	2303      	movs	r3, #3
 80010dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010de:	2300      	movs	r3, #0
 80010e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010e2:	f107 0314 	add.w	r3, r7, #20
 80010e6:	4619      	mov	r1, r3
 80010e8:	4821      	ldr	r0, [pc, #132]	; (8001170 <HAL_ADC_MspInit+0xf4>)
 80010ea:	f002 f97d 	bl	80033e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010ee:	4b21      	ldr	r3, [pc, #132]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 80010f0:	4a21      	ldr	r2, [pc, #132]	; (8001178 <HAL_ADC_MspInit+0xfc>)
 80010f2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010fa:	4b1e      	ldr	r3, [pc, #120]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001100:	4b1c      	ldr	r3, [pc, #112]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 8001102:	2200      	movs	r2, #0
 8001104:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001106:	4b1b      	ldr	r3, [pc, #108]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 8001108:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800110c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800110e:	4b19      	ldr	r3, [pc, #100]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 8001110:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001114:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001116:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 8001118:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800111c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800111e:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 8001120:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001124:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001126:	4b13      	ldr	r3, [pc, #76]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 8001128:	2200      	movs	r2, #0
 800112a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800112c:	4b11      	ldr	r3, [pc, #68]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 800112e:	2200      	movs	r2, #0
 8001130:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001132:	4810      	ldr	r0, [pc, #64]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 8001134:	f001 fde8 	bl	8002d08 <HAL_DMA_Init>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800113e:	f000 fbdb 	bl	80018f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4a0b      	ldr	r2, [pc, #44]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 8001146:	639a      	str	r2, [r3, #56]	; 0x38
 8001148:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <HAL_ADC_MspInit+0xf8>)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800114e:	2200      	movs	r2, #0
 8001150:	2100      	movs	r1, #0
 8001152:	2012      	movs	r0, #18
 8001154:	f001 fda1 	bl	8002c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001158:	2012      	movs	r0, #18
 800115a:	f001 fdba 	bl	8002cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40012000 	.word	0x40012000
 800116c:	40023800 	.word	0x40023800
 8001170:	40020000 	.word	0x40020000
 8001174:	20000370 	.word	0x20000370
 8001178:	40026410 	.word	0x40026410

0800117c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	607b      	str	r3, [r7, #4]
 8001186:	4b0c      	ldr	r3, [pc, #48]	; (80011b8 <MX_DMA_Init+0x3c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	4a0b      	ldr	r2, [pc, #44]	; (80011b8 <MX_DMA_Init+0x3c>)
 800118c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001190:	6313      	str	r3, [r2, #48]	; 0x30
 8001192:	4b09      	ldr	r3, [pc, #36]	; (80011b8 <MX_DMA_Init+0x3c>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800119a:	607b      	str	r3, [r7, #4]
 800119c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800119e:	2200      	movs	r2, #0
 80011a0:	2100      	movs	r1, #0
 80011a2:	2038      	movs	r0, #56	; 0x38
 80011a4:	f001 fd79 	bl	8002c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011a8:	2038      	movs	r0, #56	; 0x38
 80011aa:	f001 fd92 	bl	8002cd2 <HAL_NVIC_EnableIRQ>

}
 80011ae:	bf00      	nop
 80011b0:	3708      	adds	r7, #8
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	40023800 	.word	0x40023800

080011bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b08a      	sub	sp, #40	; 0x28
 80011c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
 80011d6:	4b2e      	ldr	r3, [pc, #184]	; (8001290 <MX_GPIO_Init+0xd4>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011da:	4a2d      	ldr	r2, [pc, #180]	; (8001290 <MX_GPIO_Init+0xd4>)
 80011dc:	f043 0304 	orr.w	r3, r3, #4
 80011e0:	6313      	str	r3, [r2, #48]	; 0x30
 80011e2:	4b2b      	ldr	r3, [pc, #172]	; (8001290 <MX_GPIO_Init+0xd4>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	f003 0304 	and.w	r3, r3, #4
 80011ea:	613b      	str	r3, [r7, #16]
 80011ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
 80011f2:	4b27      	ldr	r3, [pc, #156]	; (8001290 <MX_GPIO_Init+0xd4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a26      	ldr	r2, [pc, #152]	; (8001290 <MX_GPIO_Init+0xd4>)
 80011f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b24      	ldr	r3, [pc, #144]	; (8001290 <MX_GPIO_Init+0xd4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <MX_GPIO_Init+0xd4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a1f      	ldr	r2, [pc, #124]	; (8001290 <MX_GPIO_Init+0xd4>)
 8001214:	f043 0301 	orr.w	r3, r3, #1
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b1d      	ldr	r3, [pc, #116]	; (8001290 <MX_GPIO_Init+0xd4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	60bb      	str	r3, [r7, #8]
 8001224:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	4b19      	ldr	r3, [pc, #100]	; (8001290 <MX_GPIO_Init+0xd4>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a18      	ldr	r2, [pc, #96]	; (8001290 <MX_GPIO_Init+0xd4>)
 8001230:	f043 0302 	orr.w	r3, r3, #2
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <MX_GPIO_Init+0xd4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	607b      	str	r3, [r7, #4]
 8001240:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001242:	2301      	movs	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001246:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800124a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800124c:	2301      	movs	r3, #1
 800124e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001250:	f107 0314 	add.w	r3, r7, #20
 8001254:	4619      	mov	r1, r3
 8001256:	480f      	ldr	r0, [pc, #60]	; (8001294 <MX_GPIO_Init+0xd8>)
 8001258:	f002 f8c6 	bl	80033e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800125c:	231e      	movs	r3, #30
 800125e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001260:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001264:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800126a:	f107 0314 	add.w	r3, r7, #20
 800126e:	4619      	mov	r1, r3
 8001270:	4809      	ldr	r0, [pc, #36]	; (8001298 <MX_GPIO_Init+0xdc>)
 8001272:	f002 f8b9 	bl	80033e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	2006      	movs	r0, #6
 800127c:	f001 fd0d 	bl	8002c9a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001280:	2006      	movs	r0, #6
 8001282:	f001 fd26 	bl	8002cd2 <HAL_NVIC_EnableIRQ>

}
 8001286:	bf00      	nop
 8001288:	3728      	adds	r7, #40	; 0x28
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}
 800128e:	bf00      	nop
 8001290:	40023800 	.word	0x40023800
 8001294:	40020000 	.word	0x40020000
 8001298:	40020400 	.word	0x40020400

0800129c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012a0:	4b12      	ldr	r3, [pc, #72]	; (80012ec <MX_I2C1_Init+0x50>)
 80012a2:	4a13      	ldr	r2, [pc, #76]	; (80012f0 <MX_I2C1_Init+0x54>)
 80012a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012a6:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_I2C1_Init+0x50>)
 80012a8:	4a12      	ldr	r2, [pc, #72]	; (80012f4 <MX_I2C1_Init+0x58>)
 80012aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012ac:	4b0f      	ldr	r3, [pc, #60]	; (80012ec <MX_I2C1_Init+0x50>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_I2C1_Init+0x50>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_I2C1_Init+0x50>)
 80012ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012c0:	4b0a      	ldr	r3, [pc, #40]	; (80012ec <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012c6:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012cc:	4b07      	ldr	r3, [pc, #28]	; (80012ec <MX_I2C1_Init+0x50>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012d2:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_I2C1_Init+0x50>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012d8:	4804      	ldr	r0, [pc, #16]	; (80012ec <MX_I2C1_Init+0x50>)
 80012da:	f002 fa21 	bl	8003720 <HAL_I2C_Init>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d001      	beq.n	80012e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012e4:	f000 fb08 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	200003d0 	.word	0x200003d0
 80012f0:	40005400 	.word	0x40005400
 80012f4:	000186a0 	.word	0x000186a0

080012f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b08a      	sub	sp, #40	; 0x28
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001300:	f107 0314 	add.w	r3, r7, #20
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
 800130e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a19      	ldr	r2, [pc, #100]	; (800137c <HAL_I2C_MspInit+0x84>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d12b      	bne.n	8001372 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
 800131e:	4b18      	ldr	r3, [pc, #96]	; (8001380 <HAL_I2C_MspInit+0x88>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	4a17      	ldr	r2, [pc, #92]	; (8001380 <HAL_I2C_MspInit+0x88>)
 8001324:	f043 0302 	orr.w	r3, r3, #2
 8001328:	6313      	str	r3, [r2, #48]	; 0x30
 800132a:	4b15      	ldr	r3, [pc, #84]	; (8001380 <HAL_I2C_MspInit+0x88>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132e:	f003 0302 	and.w	r3, r3, #2
 8001332:	613b      	str	r3, [r7, #16]
 8001334:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001336:	23c0      	movs	r3, #192	; 0xc0
 8001338:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800133a:	2312      	movs	r3, #18
 800133c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001342:	2303      	movs	r3, #3
 8001344:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001346:	2304      	movs	r3, #4
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800134a:	f107 0314 	add.w	r3, r7, #20
 800134e:	4619      	mov	r1, r3
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <HAL_I2C_MspInit+0x8c>)
 8001352:	f002 f849 	bl	80033e8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_I2C_MspInit+0x88>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a08      	ldr	r2, [pc, #32]	; (8001380 <HAL_I2C_MspInit+0x88>)
 8001360:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <HAL_I2C_MspInit+0x88>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40005400 	.word	0x40005400
 8001380:	40023800 	.word	0x40023800
 8001384:	40020400 	.word	0x40020400

08001388 <Signal_Buf_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Signal_Buf_Init(SignalFeature_t *signal){
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	//Clear Filter Buffer
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 8001390:	2300      	movs	r3, #0
 8001392:	73fb      	strb	r3, [r7, #15]
 8001394:	e009      	b.n	80013aa <Signal_Buf_Init+0x22>
		signal->buf[n] = 0.0f;
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	687a      	ldr	r2, [r7, #4]
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	f04f 0200 	mov.w	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 80013a4:	7bfb      	ldrb	r3, [r7, #15]
 80013a6:	3301      	adds	r3, #1
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	7bfb      	ldrb	r3, [r7, #15]
 80013ac:	2b63      	cmp	r3, #99	; 0x63
 80013ae:	d9f2      	bls.n	8001396 <Signal_Buf_Init+0xe>
	}

	//Clear Buf Index
	signal->bufIndex = 0;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	2200      	movs	r2, #0
 80013b4:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190

	//Clear Filter Output
	signal->energy = 0.0f;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
}
 80013c2:	bf00      	nop
 80013c4:	3714      	adds	r7, #20
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <Signal_Buf_Update>:

void Signal_Buf_Update(SignalFeature_t *signal, float inp){
 80013ce:	b480      	push	{r7}
 80013d0:	b083      	sub	sp, #12
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
 80013d6:	ed87 0a00 	vstr	s0, [r7]
	/*Store Latest Sample in buffer */
	signal->buf[signal->bufIndex] = inp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	683a      	ldr	r2, [r7, #0]
 80013e8:	601a      	str	r2, [r3, #0]

	/*increment buffer index and wrap around if necessary*/
	signal->bufIndex++;
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 80013f0:	3301      	adds	r3, #1
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190

	if(signal->bufIndex == SIGNAL_SAMPLES_LENGTH){
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8001400:	2b64      	cmp	r3, #100	; 0x64
 8001402:	d103      	bne.n	800140c <Signal_Buf_Update+0x3e>
		signal->bufIndex = 0;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
	}
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr

08001418 <Signal_Energy_Calculate>:

float Signal_Energy_Calculate(SignalFeature_t *signal){
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
	signal->energy = 0.0f;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	f04f 0200 	mov.w	r2, #0
 8001426:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

	uint8_t sumIndex = signal->bufIndex;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 8001430:	73fb      	strb	r3, [r7, #15]
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 8001432:	2300      	movs	r3, #0
 8001434:	73bb      	strb	r3, [r7, #14]
 8001436:	e021      	b.n	800147c <Signal_Energy_Calculate+0x64>
		/*Decrement Index and Wrap if Necessary*/
		if(sumIndex < SIGNAL_SAMPLES_LENGTH -1){
 8001438:	7bfb      	ldrb	r3, [r7, #15]
 800143a:	2b62      	cmp	r3, #98	; 0x62
 800143c:	d803      	bhi.n	8001446 <Signal_Energy_Calculate+0x2e>
			sumIndex++;
 800143e:	7bfb      	ldrb	r3, [r7, #15]
 8001440:	3301      	adds	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
 8001444:	e001      	b.n	800144a <Signal_Energy_Calculate+0x32>
		}else{
			sumIndex = 0;
 8001446:	2300      	movs	r3, #0
 8001448:	73fb      	strb	r3, [r7, #15]
		}

		/*Multiply Impulse Response with Shifted input sample and add to output*/
		signal->energy += (signal->buf[n] * signal->buf[n]);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	ed93 7a65 	vldr	s14, [r3, #404]	; 0x194
 8001450:	7bbb      	ldrb	r3, [r7, #14]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	edd3 6a00 	vldr	s13, [r3]
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	009b      	lsls	r3, r3, #2
 8001462:	4413      	add	r3, r2
 8001464:	edd3 7a00 	vldr	s15, [r3]
 8001468:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800146c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	edc3 7a65 	vstr	s15, [r3, #404]	; 0x194
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 8001476:	7bbb      	ldrb	r3, [r7, #14]
 8001478:	3301      	adds	r3, #1
 800147a:	73bb      	strb	r3, [r7, #14]
 800147c:	7bbb      	ldrb	r3, [r7, #14]
 800147e:	2b63      	cmp	r3, #99	; 0x63
 8001480:	d9da      	bls.n	8001438 <Signal_Energy_Calculate+0x20>
	}
	return signal->energy;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 8001488:	ee07 3a90 	vmov	s15, r3
}
 800148c:	eeb0 0a67 	vmov.f32	s0, s15
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
	...

0800149c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
   PID_Init(&pid, kp, ti, td, dt);
 80014a0:	4b1d      	ldr	r3, [pc, #116]	; (8001518 <main+0x7c>)
 80014a2:	edd3 7a00 	vldr	s15, [r3]
 80014a6:	4b1d      	ldr	r3, [pc, #116]	; (800151c <main+0x80>)
 80014a8:	ed93 7a00 	vldr	s14, [r3]
 80014ac:	4b1c      	ldr	r3, [pc, #112]	; (8001520 <main+0x84>)
 80014ae:	edd3 6a00 	vldr	s13, [r3]
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <main+0x88>)
 80014b4:	ed93 6a00 	vldr	s12, [r3]
 80014b8:	eef0 1a46 	vmov.f32	s3, s12
 80014bc:	eeb0 1a66 	vmov.f32	s2, s13
 80014c0:	eef0 0a47 	vmov.f32	s1, s14
 80014c4:	eeb0 0a67 	vmov.f32	s0, s15
 80014c8:	4817      	ldr	r0, [pc, #92]	; (8001528 <main+0x8c>)
 80014ca:	f000 fa1a 	bl	8001902 <PID_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ce:	f000 fd67 	bl	8001fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014d2:	f000 f837 	bl	8001544 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014d6:	f7ff fe71 	bl	80011bc <MX_GPIO_Init>
  MX_DMA_Init();
 80014da:	f7ff fe4f 	bl	800117c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80014de:	f008 fc8f 	bl	8009e00 <MX_USB_DEVICE_Init>
  MX_TIM10_Init();
 80014e2:	f000 fc97 	bl	8001e14 <MX_TIM10_Init>
  MX_ADC1_Init();
 80014e6:	f7ff fd67 	bl	8000fb8 <MX_ADC1_Init>
  MX_TIM9_Init();
 80014ea:	f000 fc2f 	bl	8001d4c <MX_TIM9_Init>
  MX_I2C1_Init();
 80014ee:	f7ff fed5 	bl	800129c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 80014f2:	480e      	ldr	r0, [pc, #56]	; (800152c <main+0x90>)
 80014f4:	f004 f96a 	bl	80057cc <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 80014f8:	2100      	movs	r1, #0
 80014fa:	480d      	ldr	r0, [pc, #52]	; (8001530 <main+0x94>)
 80014fc:	f004 fa22 	bl	8005944 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 2);
 8001500:	2202      	movs	r2, #2
 8001502:	490c      	ldr	r1, [pc, #48]	; (8001534 <main+0x98>)
 8001504:	480c      	ldr	r0, [pc, #48]	; (8001538 <main+0x9c>)
 8001506:	f000 ff35 	bl	8002374 <HAL_ADC_Start_DMA>

  FIRFilter_Init(&mav);
 800150a:	480c      	ldr	r0, [pc, #48]	; (800153c <main+0xa0>)
 800150c:	f7ff fcd6 	bl	8000ebc <FIRFilter_Init>
  Signal_Buf_Init(&sig);
 8001510:	480b      	ldr	r0, [pc, #44]	; (8001540 <main+0xa4>)
 8001512:	f7ff ff39 	bl	8001388 <Signal_Buf_Init>
//  pid.dt = dt;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001516:	e7fe      	b.n	8001516 <main+0x7a>
 8001518:	20000030 	.word	0x20000030
 800151c:	20000034 	.word	0x20000034
 8001520:	20000038 	.word	0x20000038
 8001524:	2000003c 	.word	0x2000003c
 8001528:	2000061c 	.word	0x2000061c
 800152c:	20000690 	.word	0x20000690
 8001530:	20000648 	.word	0x20000648
 8001534:	2000042c 	.word	0x2000042c
 8001538:	20000328 	.word	0x20000328
 800153c:	20000454 	.word	0x20000454
 8001540:	20000484 	.word	0x20000484

08001544 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b094      	sub	sp, #80	; 0x50
 8001548:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154a:	f107 0320 	add.w	r3, r7, #32
 800154e:	2230      	movs	r2, #48	; 0x30
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f009 f998 	bl	800a888 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001558:	f107 030c 	add.w	r3, r7, #12
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001568:	2300      	movs	r3, #0
 800156a:	60bb      	str	r3, [r7, #8]
 800156c:	4b29      	ldr	r3, [pc, #164]	; (8001614 <SystemClock_Config+0xd0>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	4a28      	ldr	r2, [pc, #160]	; (8001614 <SystemClock_Config+0xd0>)
 8001572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001576:	6413      	str	r3, [r2, #64]	; 0x40
 8001578:	4b26      	ldr	r3, [pc, #152]	; (8001614 <SystemClock_Config+0xd0>)
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001584:	2300      	movs	r3, #0
 8001586:	607b      	str	r3, [r7, #4]
 8001588:	4b23      	ldr	r3, [pc, #140]	; (8001618 <SystemClock_Config+0xd4>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001590:	4a21      	ldr	r2, [pc, #132]	; (8001618 <SystemClock_Config+0xd4>)
 8001592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <SystemClock_Config+0xd4>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015a4:	2301      	movs	r3, #1
 80015a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ae:	2302      	movs	r3, #2
 80015b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80015b8:	2319      	movs	r3, #25
 80015ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015bc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015c0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015c2:	2304      	movs	r3, #4
 80015c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015c6:	2307      	movs	r3, #7
 80015c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ca:	f107 0320 	add.w	r3, r7, #32
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 fc68 	bl	8004ea4 <HAL_RCC_OscConfig>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015da:	f000 f98d 	bl	80018f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015de:	230f      	movs	r3, #15
 80015e0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e2:	2302      	movs	r3, #2
 80015e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	2102      	movs	r1, #2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 feca 	bl	8005394 <HAL_RCC_ClockConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001606:	f000 f977 	bl	80018f8 <Error_Handler>
  }
}
 800160a:	bf00      	nop
 800160c:	3750      	adds	r7, #80	; 0x50
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800
 8001618:	40007000 	.word	0x40007000

0800161c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 800161c:	b5b0      	push	{r4, r5, r7, lr}
 800161e:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8001622:	af02      	add	r7, sp, #8
 8001624:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001628:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800162c:	6018      	str	r0, [r3, #0]
	if(htim->Instance == TIM10){
 800162e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001632:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a76      	ldr	r2, [pc, #472]	; (8001814 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 800163c:	4293      	cmp	r3, r2
 800163e:	f040 80e4 	bne.w	800180a <HAL_TIM_PeriodElapsedCallback+0x1ee>
//		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, servo_pwm);

		char logbuf[1024];
		FIRFilter_Update(&mav, emg_raw);
 8001642:	4b75      	ldr	r3, [pc, #468]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 8001644:	881b      	ldrh	r3, [r3, #0]
 8001646:	ee07 3a90 	vmov	s15, r3
 800164a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800164e:	eeb0 0a67 	vmov.f32	s0, s15
 8001652:	4872      	ldr	r0, [pc, #456]	; (800181c <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001654:	f7ff fc54 	bl	8000f00 <FIRFilter_Update>
		pid_out = PID_Update(&pid, arm_pressure, fsr);
 8001658:	4b71      	ldr	r3, [pc, #452]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x204>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4a71      	ldr	r2, [pc, #452]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x208>)
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	4619      	mov	r1, r3
 8001662:	4871      	ldr	r0, [pc, #452]	; (8001828 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001664:	f000 f984 	bl	8001970 <PID_Update>
 8001668:	eef0 7a40 	vmov.f32	s15, s0
 800166c:	4b6f      	ldr	r3, [pc, #444]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x210>)
 800166e:	edc3 7a00 	vstr	s15, [r3]

		if(pid_out > 2000){
 8001672:	4b6e      	ldr	r3, [pc, #440]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001674:	edd3 7a00 	vldr	s15, [r3]
 8001678:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8001830 <HAL_TIM_PeriodElapsedCallback+0x214>
 800167c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001684:	dd03      	ble.n	800168e <HAL_TIM_PeriodElapsedCallback+0x72>
			pid_out = 2000;
 8001686:	4b69      	ldr	r3, [pc, #420]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001688:	4a6a      	ldr	r2, [pc, #424]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x218>)
 800168a:	601a      	str	r2, [r3, #0]
 800168c:	e00c      	b.n	80016a8 <HAL_TIM_PeriodElapsedCallback+0x8c>
		}else if(pid_out < 1000){
 800168e:	4b67      	ldr	r3, [pc, #412]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x210>)
 8001690:	edd3 7a00 	vldr	s15, [r3]
 8001694:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001838 <HAL_TIM_PeriodElapsedCallback+0x21c>
 8001698:	eef4 7ac7 	vcmpe.f32	s15, s14
 800169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a0:	d502      	bpl.n	80016a8 <HAL_TIM_PeriodElapsedCallback+0x8c>
			pid_out = 1000;
 80016a2:	4b62      	ldr	r3, [pc, #392]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x210>)
 80016a4:	4a65      	ldr	r2, [pc, #404]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x220>)
 80016a6:	601a      	str	r2, [r3, #0]
		}

		if(arm_state_manual == 1){
 80016a8:	4b65      	ldr	r3, [pc, #404]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x224>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d10a      	bne.n	80016c6 <HAL_TIM_PeriodElapsedCallback+0xaa>
		  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, pid_out);
 80016b0:	4b5e      	ldr	r3, [pc, #376]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x210>)
 80016b2:	edd3 7a00 	vldr	s15, [r3]
 80016b6:	4b63      	ldr	r3, [pc, #396]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016be:	ee17 2a90 	vmov	r2, s15
 80016c2:	635a      	str	r2, [r3, #52]	; 0x34
 80016c4:	e004      	b.n	80016d0 <HAL_TIM_PeriodElapsedCallback+0xb4>
		}else{
		  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 1000);
 80016c6:	4b5f      	ldr	r3, [pc, #380]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016ce:	635a      	str	r2, [r3, #52]	; 0x34
		}

//		emg_rawdiff = mav.out - emg_rawbfr;
		emg_rawdiff = emg_raw - emg_rawbfr;
 80016d0:	4b51      	ldr	r3, [pc, #324]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	ee07 3a90 	vmov	s15, r3
 80016d8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016dc:	4b5a      	ldr	r3, [pc, #360]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e6:	4b59      	ldr	r3, [pc, #356]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x230>)
 80016e8:	edc3 7a00 	vstr	s15, [r3]
//		emg_rawdiff = abs(emg_rawdiff);
		if(emg_rawdiff < 0){
 80016ec:	4b57      	ldr	r3, [pc, #348]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x230>)
 80016ee:	edd3 7a00 	vldr	s15, [r3]
 80016f2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80016f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016fa:	d507      	bpl.n	800170c <HAL_TIM_PeriodElapsedCallback+0xf0>
			emg_rawdiff = emg_rawdiff * -1;
 80016fc:	4b53      	ldr	r3, [pc, #332]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x230>)
 80016fe:	edd3 7a00 	vldr	s15, [r3]
 8001702:	eef1 7a67 	vneg.f32	s15, s15
 8001706:	4b51      	ldr	r3, [pc, #324]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x230>)
 8001708:	edc3 7a00 	vstr	s15, [r3]
		}
		Signal_Buf_Update(&sig, emg_rawdiff);
 800170c:	4b4f      	ldr	r3, [pc, #316]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x230>)
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	eeb0 0a67 	vmov.f32	s0, s15
 8001716:	484e      	ldr	r0, [pc, #312]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001718:	f7ff fe59 	bl	80013ce <Signal_Buf_Update>
		Signal_Energy_Calculate(&sig);
 800171c:	484c      	ldr	r0, [pc, #304]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x234>)
 800171e:	f7ff fe7b 	bl	8001418 <Signal_Energy_Calculate>

		if(sig.energy > arm_condition_thresh){
 8001722:	4b4b      	ldr	r3, [pc, #300]	; (8001850 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8001724:	ed93 7a65 	vldr	s14, [r3, #404]	; 0x194
 8001728:	4b4a      	ldr	r3, [pc, #296]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x238>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001734:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800173c:	dd1c      	ble.n	8001778 <HAL_TIM_PeriodElapsedCallback+0x15c>
			if(prosthetic_statebfr == true){
 800173e:	4b46      	ldr	r3, [pc, #280]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d014      	beq.n	8001770 <HAL_TIM_PeriodElapsedCallback+0x154>
				truth_counter_thresh++;
 8001746:	4b45      	ldr	r3, [pc, #276]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	3301      	adds	r3, #1
 800174c:	b2da      	uxtb	r2, r3
 800174e:	4b43      	ldr	r3, [pc, #268]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001750:	701a      	strb	r2, [r3, #0]
				if(truth_counter_thresh >= truth_counter_maxval){
 8001752:	4b42      	ldr	r3, [pc, #264]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001754:	781a      	ldrb	r2, [r3, #0]
 8001756:	4b42      	ldr	r3, [pc, #264]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001758:	781b      	ldrb	r3, [r3, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d308      	bcc.n	8001770 <HAL_TIM_PeriodElapsedCallback+0x154>
					prosthetic_state = true;
 800175e:	4b41      	ldr	r3, [pc, #260]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001760:	2201      	movs	r2, #1
 8001762:	701a      	strb	r2, [r3, #0]
					arm_state = 1;
 8001764:	4b40      	ldr	r3, [pc, #256]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
					truth_counter_thresh = 0;
 800176a:	4b3c      	ldr	r3, [pc, #240]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x240>)
 800176c:	2200      	movs	r2, #0
 800176e:	701a      	strb	r2, [r3, #0]
				}
			}
			prosthetic_statebfr = true;
 8001770:	4b39      	ldr	r3, [pc, #228]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
 8001776:	e01e      	b.n	80017b6 <HAL_TIM_PeriodElapsedCallback+0x19a>
		}else{
			if(prosthetic_statebfr == false){
 8001778:	4b37      	ldr	r3, [pc, #220]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	f083 0301 	eor.w	r3, r3, #1
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b00      	cmp	r3, #0
 8001784:	d014      	beq.n	80017b0 <HAL_TIM_PeriodElapsedCallback+0x194>
				truth_counter_thresh++;
 8001786:	4b35      	ldr	r3, [pc, #212]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001788:	781b      	ldrb	r3, [r3, #0]
 800178a:	3301      	adds	r3, #1
 800178c:	b2da      	uxtb	r2, r3
 800178e:	4b33      	ldr	r3, [pc, #204]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001790:	701a      	strb	r2, [r3, #0]
				if(truth_counter_thresh >= truth_counter_maxval){
 8001792:	4b32      	ldr	r3, [pc, #200]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	4b32      	ldr	r3, [pc, #200]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	429a      	cmp	r2, r3
 800179c:	d308      	bcc.n	80017b0 <HAL_TIM_PeriodElapsedCallback+0x194>
					prosthetic_state = false;
 800179e:	4b31      	ldr	r3, [pc, #196]	; (8001864 <HAL_TIM_PeriodElapsedCallback+0x248>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	701a      	strb	r2, [r3, #0]
					arm_state = 0;
 80017a4:	4b30      	ldr	r3, [pc, #192]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	701a      	strb	r2, [r3, #0]
					truth_counter_thresh = 0;
 80017aa:	4b2c      	ldr	r3, [pc, #176]	; (800185c <HAL_TIM_PeriodElapsedCallback+0x240>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
				}
			}
			prosthetic_statebfr = false;
 80017b0:	4b29      	ldr	r3, [pc, #164]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	701a      	strb	r2, [r3, #0]
		}

//		sprintf(logbuf, "%.2f,%d,%.2f,%.2f\r\n",emg_raw, fsr, arm_pressure, pid_out);
		sprintf(logbuf, "%d,%d,%.2f\r\n", arm_pressure,fsr, pid_out);
 80017b6:	4b1a      	ldr	r3, [pc, #104]	; (8001820 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80017b8:	681c      	ldr	r4, [r3, #0]
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80017bc:	681d      	ldr	r5, [r3, #0]
 80017be:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_TIM_PeriodElapsedCallback+0x210>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fec8 	bl	8000558 <__aeabi_f2d>
 80017c8:	4602      	mov	r2, r0
 80017ca:	460b      	mov	r3, r1
 80017cc:	f107 0008 	add.w	r0, r7, #8
 80017d0:	e9cd 2300 	strd	r2, r3, [sp]
 80017d4:	462b      	mov	r3, r5
 80017d6:	4622      	mov	r2, r4
 80017d8:	4924      	ldr	r1, [pc, #144]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x250>)
 80017da:	f009 fcc7 	bl	800b16c <siprintf>
		CDC_Transmit_FS((uint8_t*)logbuf, strlen(logbuf));
 80017de:	f107 0308 	add.w	r3, r7, #8
 80017e2:	4618      	mov	r0, r3
 80017e4:	f7fe fcfc 	bl	80001e0 <strlen>
 80017e8:	4603      	mov	r3, r0
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	f107 0308 	add.w	r3, r7, #8
 80017f0:	4611      	mov	r1, r2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f008 fbc2 	bl	8009f7c <CDC_Transmit_FS>

//		emg_rawbfr = mav.out;
		emg_rawbfr = emg_raw;
 80017f8:	4b07      	ldr	r3, [pc, #28]	; (8001818 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80017fa:	881b      	ldrh	r3, [r3, #0]
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001804:	4b10      	ldr	r3, [pc, #64]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8001806:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800180a:	bf00      	nop
 800180c:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8001810:	46bd      	mov	sp, r7
 8001812:	bdb0      	pop	{r4, r5, r7, pc}
 8001814:	40014400 	.word	0x40014400
 8001818:	2000043c 	.word	0x2000043c
 800181c:	20000454 	.word	0x20000454
 8001820:	20000438 	.word	0x20000438
 8001824:	20000434 	.word	0x20000434
 8001828:	2000061c 	.word	0x2000061c
 800182c:	20000450 	.word	0x20000450
 8001830:	44fa0000 	.word	0x44fa0000
 8001834:	44fa0000 	.word	0x44fa0000
 8001838:	447a0000 	.word	0x447a0000
 800183c:	447a0000 	.word	0x447a0000
 8001840:	2000043f 	.word	0x2000043f
 8001844:	20000648 	.word	0x20000648
 8001848:	20000444 	.word	0x20000444
 800184c:	20000448 	.word	0x20000448
 8001850:	20000484 	.word	0x20000484
 8001854:	2000002c 	.word	0x2000002c
 8001858:	2000044e 	.word	0x2000044e
 800185c:	2000044c 	.word	0x2000044c
 8001860:	20000028 	.word	0x20000028
 8001864:	2000044d 	.word	0x2000044d
 8001868:	2000043e 	.word	0x2000043e
 800186c:	0800d678 	.word	0x0800d678

08001870 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	for(int i =0; i < 2; i++){
 8001878:	2300      	movs	r3, #0
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e00a      	b.n	8001894 <HAL_ADC_ConvCpltCallback+0x24>
		adc[i] = adc_buffer[i];
 800187e:	4a0f      	ldr	r2, [pc, #60]	; (80018bc <HAL_ADC_ConvCpltCallback+0x4c>)
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001886:	490e      	ldr	r1, [pc, #56]	; (80018c0 <HAL_ADC_ConvCpltCallback+0x50>)
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i =0; i < 2; i++){
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	3301      	adds	r3, #1
 8001892:	60fb      	str	r3, [r7, #12]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	2b01      	cmp	r3, #1
 8001898:	ddf1      	ble.n	800187e <HAL_ADC_ConvCpltCallback+0xe>
	}
	emg_raw = adc[0];
 800189a:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <HAL_ADC_ConvCpltCallback+0x50>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	b29a      	uxth	r2, r3
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_ADC_ConvCpltCallback+0x54>)
 80018a2:	801a      	strh	r2, [r3, #0]
	fsr = adc[1];
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <HAL_ADC_ConvCpltCallback+0x50>)
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b07      	ldr	r3, [pc, #28]	; (80018c8 <HAL_ADC_ConvCpltCallback+0x58>)
 80018ac:	601a      	str	r2, [r3, #0]
}
 80018ae:	bf00      	nop
 80018b0:	3714      	adds	r7, #20
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	2000042c 	.word	0x2000042c
 80018c0:	20000424 	.word	0x20000424
 80018c4:	2000043c 	.word	0x2000043c
 80018c8:	20000434 	.word	0x20000434

080018cc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d105      	bne.n	80018e8 <HAL_GPIO_EXTI_Callback+0x1c>
		calibration_counter++;
 80018dc:	4b05      	ldr	r3, [pc, #20]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x28>)
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	3301      	adds	r3, #1
 80018e2:	b2da      	uxtb	r2, r3
 80018e4:	4b03      	ldr	r3, [pc, #12]	; (80018f4 <HAL_GPIO_EXTI_Callback+0x28>)
 80018e6:	701a      	strb	r2, [r3, #0]
	}
}
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	20000440 	.word	0x20000440

080018f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018fc:	b672      	cpsid	i
}
 80018fe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001900:	e7fe      	b.n	8001900 <Error_Handler+0x8>

08001902 <PID_Init>:
 *      Author: Nawab
 */

#include "pid.h"

void PID_Init(PID_t *pid, float _kp, float _ti, float _td, float _dt){
 8001902:	b480      	push	{r7}
 8001904:	b087      	sub	sp, #28
 8001906:	af00      	add	r7, sp, #0
 8001908:	6178      	str	r0, [r7, #20]
 800190a:	ed87 0a04 	vstr	s0, [r7, #16]
 800190e:	edc7 0a03 	vstr	s1, [r7, #12]
 8001912:	ed87 1a02 	vstr	s2, [r7, #8]
 8001916:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->kp = _kp;
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	693a      	ldr	r2, [r7, #16]
 800191e:	601a      	str	r2, [r3, #0]
	pid->ti = _ti;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	605a      	str	r2, [r3, #4]
	pid->td = _td;
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	609a      	str	r2, [r3, #8]

	pid->p = 0;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	f04f 0200 	mov.w	r2, #0
 8001932:	60da      	str	r2, [r3, #12]
	pid->i = 0;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	f04f 0200 	mov.w	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
	pid->d = 0;
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	f04f 0200 	mov.w	r2, #0
 8001942:	615a      	str	r2, [r3, #20]

	pid->e_now = 0;
 8001944:	697b      	ldr	r3, [r7, #20]
 8001946:	f04f 0200 	mov.w	r2, #0
 800194a:	619a      	str	r2, [r3, #24]
	pid->e_prev = 0;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	61da      	str	r2, [r3, #28]
	pid->de = 0;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	621a      	str	r2, [r3, #32]
	pid->dt = _dt;
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001962:	bf00      	nop
 8001964:	371c      	adds	r7, #28
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
	...

08001970 <PID_Update>:

float PID_Update(PID_t *pid, int reference, int input){
 8001970:	b480      	push	{r7}
 8001972:	b087      	sub	sp, #28
 8001974:	af00      	add	r7, sp, #0
 8001976:	60f8      	str	r0, [r7, #12]
 8001978:	60b9      	str	r1, [r7, #8]
 800197a:	607a      	str	r2, [r7, #4]
	float out;
	pid->e_now = reference - input;
 800197c:	68ba      	ldr	r2, [r7, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	ee07 3a90 	vmov	s15, r3
 8001986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->de = pid->e_now - pid->e_prev;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	ed93 7a06 	vldr	s14, [r3, #24]
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	edd3 7a07 	vldr	s15, [r3, #28]
 800199c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	edc3 7a08 	vstr	s15, [r3, #32]

	pid->p = pid->kp * pid->e_now;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	ed93 7a00 	vldr	s14, [r3]
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	edd3 7a06 	vldr	s15, [r3, #24]
 80019b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->i = pid->i + (pid->e_now * pid->dt);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	ed93 7a04 	vldr	s14, [r3, #16]
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	edd3 6a06 	vldr	s13, [r3, #24]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80019ce:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	edc3 7a04 	vstr	s15, [r3, #16]
	if(pid->i > 1000){
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	edd3 7a04 	vldr	s15, [r3, #16]
 80019e2:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001a88 <PID_Update+0x118>
 80019e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019ee:	dd03      	ble.n	80019f8 <PID_Update+0x88>
		pid->i = 1000;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4a26      	ldr	r2, [pc, #152]	; (8001a8c <PID_Update+0x11c>)
 80019f4:	611a      	str	r2, [r3, #16]
 80019f6:	e00c      	b.n	8001a12 <PID_Update+0xa2>
	}else if(pid->i < -1000){
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	edd3 7a04 	vldr	s15, [r3, #16]
 80019fe:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001a90 <PID_Update+0x120>
 8001a02:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0a:	d502      	bpl.n	8001a12 <PID_Update+0xa2>
		pid->i = -1000;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4a21      	ldr	r2, [pc, #132]	; (8001a94 <PID_Update+0x124>)
 8001a10:	611a      	str	r2, [r3, #16]
	}
	pid->d = pid->de / pid->dt;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	edd3 6a08 	vldr	s13, [r3, #32]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	edc3 7a05 	vstr	s15, [r3, #20]

	out = pid->kp * (pid->p + (1 / pid->ti) * pid->i + pid->td * pid->d);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	ed93 7a00 	vldr	s14, [r3]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a3a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8001a3e:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a48:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a4c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	ed93 6a02 	vldr	s12, [r3, #8]
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a5c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a68:	edc7 7a05 	vstr	s15, [r7, #20]
	pid->e_prev = pid->e_now;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	699a      	ldr	r2, [r3, #24]
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	61da      	str	r2, [r3, #28]
	return out;
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	ee07 3a90 	vmov	s15, r3
}
 8001a7a:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7e:	371c      	adds	r7, #28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	447a0000 	.word	0x447a0000
 8001a8c:	447a0000 	.word	0x447a0000
 8001a90:	c47a0000 	.word	0xc47a0000
 8001a94:	c47a0000 	.word	0xc47a0000

08001a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	4b10      	ldr	r3, [pc, #64]	; (8001ae4 <HAL_MspInit+0x4c>)
 8001aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa6:	4a0f      	ldr	r2, [pc, #60]	; (8001ae4 <HAL_MspInit+0x4c>)
 8001aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aac:	6453      	str	r3, [r2, #68]	; 0x44
 8001aae:	4b0d      	ldr	r3, [pc, #52]	; (8001ae4 <HAL_MspInit+0x4c>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aba:	2300      	movs	r3, #0
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	4b09      	ldr	r3, [pc, #36]	; (8001ae4 <HAL_MspInit+0x4c>)
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	4a08      	ldr	r2, [pc, #32]	; (8001ae4 <HAL_MspInit+0x4c>)
 8001ac4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac8:	6413      	str	r3, [r2, #64]	; 0x40
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_MspInit+0x4c>)
 8001acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ace:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ad2:	603b      	str	r3, [r7, #0]
 8001ad4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
 8001ae2:	bf00      	nop
 8001ae4:	40023800 	.word	0x40023800

08001ae8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001aec:	e7fe      	b.n	8001aec <NMI_Handler+0x4>

08001aee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001aee:	b480      	push	{r7}
 8001af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001af2:	e7fe      	b.n	8001af2 <HardFault_Handler+0x4>

08001af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001af8:	e7fe      	b.n	8001af8 <MemManage_Handler+0x4>

08001afa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001afa:	b480      	push	{r7}
 8001afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001afe:	e7fe      	b.n	8001afe <BusFault_Handler+0x4>

08001b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b04:	e7fe      	b.n	8001b04 <UsageFault_Handler+0x4>

08001b06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b06:	b480      	push	{r7}
 8001b08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b34:	f000 fa86 	bl	8002044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b38:	bf00      	nop
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b40:	2001      	movs	r0, #1
 8001b42:	f001 fdd5 	bl	80036f0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b50:	4802      	ldr	r0, [pc, #8]	; (8001b5c <ADC_IRQHandler+0x10>)
 8001b52:	f000 fafe 	bl	8002152 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b56:	bf00      	nop
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	20000328 	.word	0x20000328

08001b60 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001b64:	4802      	ldr	r0, [pc, #8]	; (8001b70 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b66:	f003 ff9d 	bl	8005aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000690 	.word	0x20000690

08001b74 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b78:	4802      	ldr	r0, [pc, #8]	; (8001b84 <DMA2_Stream0_IRQHandler+0x10>)
 8001b7a:	f001 f9cb 	bl	8002f14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000370 	.word	0x20000370

08001b88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001b8c:	4802      	ldr	r0, [pc, #8]	; (8001b98 <OTG_FS_IRQHandler+0x10>)
 8001b8e:	f002 f85b 	bl	8003c48 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001b92:	bf00      	nop
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	20001bbc 	.word	0x20001bbc

08001b9c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	af00      	add	r7, sp, #0
	return 1;
 8001ba0:	2301      	movs	r3, #1
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <_kill>:

int _kill(int pid, int sig)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bb6:	f008 fe3d 	bl	800a834 <__errno>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2216      	movs	r2, #22
 8001bbe:	601a      	str	r2, [r3, #0]
	return -1;
 8001bc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <_exit>:

void _exit (int status)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001bd4:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ffe7 	bl	8001bac <_kill>
	while (1) {}		/* Make sure we hang here */
 8001bde:	e7fe      	b.n	8001bde <_exit+0x12>

08001be0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b086      	sub	sp, #24
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	e00a      	b.n	8001c08 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001bf2:	f3af 8000 	nop.w
 8001bf6:	4601      	mov	r1, r0
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	1c5a      	adds	r2, r3, #1
 8001bfc:	60ba      	str	r2, [r7, #8]
 8001bfe:	b2ca      	uxtb	r2, r1
 8001c00:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c02:	697b      	ldr	r3, [r7, #20]
 8001c04:	3301      	adds	r3, #1
 8001c06:	617b      	str	r3, [r7, #20]
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	dbf0      	blt.n	8001bf2 <_read+0x12>
	}

return len;
 8001c10:	687b      	ldr	r3, [r7, #4]
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3718      	adds	r7, #24
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}

08001c1a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b086      	sub	sp, #24
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
 8001c2a:	e009      	b.n	8001c40 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	60ba      	str	r2, [r7, #8]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	4618      	mov	r0, r3
 8001c36:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	dbf1      	blt.n	8001c2c <_write+0x12>
	}
	return len;
 8001c48:	687b      	ldr	r3, [r7, #4]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}

08001c52 <_close>:

int _close(int file)
{
 8001c52:	b480      	push	{r7}
 8001c54:	b083      	sub	sp, #12
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
	return -1;
 8001c5a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c7a:	605a      	str	r2, [r3, #4]
	return 0;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr

08001c8a <_isatty>:

int _isatty(int file)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
	return 1;
 8001c92:	2301      	movs	r3, #1
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	60f8      	str	r0, [r7, #12]
 8001ca8:	60b9      	str	r1, [r7, #8]
 8001caa:	607a      	str	r2, [r7, #4]
	return 0;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
	...

08001cbc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b086      	sub	sp, #24
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cc4:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <_sbrk+0x5c>)
 8001cc6:	4b15      	ldr	r3, [pc, #84]	; (8001d1c <_sbrk+0x60>)
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cd0:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <_sbrk+0x64>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d102      	bne.n	8001cde <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <_sbrk+0x64>)
 8001cda:	4a12      	ldr	r2, [pc, #72]	; (8001d24 <_sbrk+0x68>)
 8001cdc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cde:	4b10      	ldr	r3, [pc, #64]	; (8001d20 <_sbrk+0x64>)
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d207      	bcs.n	8001cfc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001cec:	f008 fda2 	bl	800a834 <__errno>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	220c      	movs	r2, #12
 8001cf4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	e009      	b.n	8001d10 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cfc:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <_sbrk+0x64>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d02:	4b07      	ldr	r3, [pc, #28]	; (8001d20 <_sbrk+0x64>)
 8001d04:	681a      	ldr	r2, [r3, #0]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4413      	add	r3, r2
 8001d0a:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <_sbrk+0x64>)
 8001d0c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3718      	adds	r7, #24
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20018000 	.word	0x20018000
 8001d1c:	00000400 	.word	0x00000400
 8001d20:	20000644 	.word	0x20000644
 8001d24:	200022f8 	.word	0x200022f8

08001d28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d2c:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <SystemInit+0x20>)
 8001d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d32:	4a05      	ldr	r2, [pc, #20]	; (8001d48 <SystemInit+0x20>)
 8001d34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d3c:	bf00      	nop
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000ed00 	.word	0xe000ed00

08001d4c <MX_TIM9_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b08c      	sub	sp, #48	; 0x30
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d52:	f107 0320 	add.w	r3, r7, #32
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
 8001d5a:	605a      	str	r2, [r3, #4]
 8001d5c:	609a      	str	r2, [r3, #8]
 8001d5e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d60:	1d3b      	adds	r3, r7, #4
 8001d62:	2200      	movs	r2, #0
 8001d64:	601a      	str	r2, [r3, #0]
 8001d66:	605a      	str	r2, [r3, #4]
 8001d68:	609a      	str	r2, [r3, #8]
 8001d6a:	60da      	str	r2, [r3, #12]
 8001d6c:	611a      	str	r2, [r3, #16]
 8001d6e:	615a      	str	r2, [r3, #20]
 8001d70:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001d72:	4b26      	ldr	r3, [pc, #152]	; (8001e0c <MX_TIM9_Init+0xc0>)
 8001d74:	4a26      	ldr	r2, [pc, #152]	; (8001e10 <MX_TIM9_Init+0xc4>)
 8001d76:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 8001d78:	4b24      	ldr	r3, [pc, #144]	; (8001e0c <MX_TIM9_Init+0xc0>)
 8001d7a:	2253      	movs	r2, #83	; 0x53
 8001d7c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <MX_TIM9_Init+0xc0>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 8001d84:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <MX_TIM9_Init+0xc0>)
 8001d86:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001d8a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <MX_TIM9_Init+0xc0>)
 8001d8e:	2200      	movs	r2, #0
 8001d90:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d92:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <MX_TIM9_Init+0xc0>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001d98:	481c      	ldr	r0, [pc, #112]	; (8001e0c <MX_TIM9_Init+0xc0>)
 8001d9a:	f003 fcc7 	bl	800572c <HAL_TIM_Base_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001da4:	f7ff fda8 	bl	80018f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dac:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001dae:	f107 0320 	add.w	r3, r7, #32
 8001db2:	4619      	mov	r1, r3
 8001db4:	4815      	ldr	r0, [pc, #84]	; (8001e0c <MX_TIM9_Init+0xc0>)
 8001db6:	f004 f83f 	bl	8005e38 <HAL_TIM_ConfigClockSource>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001dc0:	f7ff fd9a 	bl	80018f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001dc4:	4811      	ldr	r0, [pc, #68]	; (8001e0c <MX_TIM9_Init+0xc0>)
 8001dc6:	f003 fd63 	bl	8005890 <HAL_TIM_PWM_Init>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001dd0:	f7ff fd92 	bl	80018f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd4:	2360      	movs	r3, #96	; 0x60
 8001dd6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8001dd8:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001ddc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de6:	1d3b      	adds	r3, r7, #4
 8001de8:	2200      	movs	r2, #0
 8001dea:	4619      	mov	r1, r3
 8001dec:	4807      	ldr	r0, [pc, #28]	; (8001e0c <MX_TIM9_Init+0xc0>)
 8001dee:	f003 ff61 	bl	8005cb4 <HAL_TIM_PWM_ConfigChannel>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8001df8:	f7ff fd7e 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001dfc:	4803      	ldr	r0, [pc, #12]	; (8001e0c <MX_TIM9_Init+0xc0>)
 8001dfe:	f000 f86b 	bl	8001ed8 <HAL_TIM_MspPostInit>

}
 8001e02:	bf00      	nop
 8001e04:	3730      	adds	r7, #48	; 0x30
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000648 	.word	0x20000648
 8001e10:	40014000 	.word	0x40014000

08001e14 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <MX_TIM10_Init+0x40>)
 8001e1a:	4a0f      	ldr	r2, [pc, #60]	; (8001e58 <MX_TIM10_Init+0x44>)
 8001e1c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 8001e1e:	4b0d      	ldr	r3, [pc, #52]	; (8001e54 <MX_TIM10_Init+0x40>)
 8001e20:	2253      	movs	r2, #83	; 0x53
 8001e22:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <MX_TIM10_Init+0x40>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 500-1;
 8001e2a:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <MX_TIM10_Init+0x40>)
 8001e2c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001e30:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <MX_TIM10_Init+0x40>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <MX_TIM10_Init+0x40>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001e3e:	4805      	ldr	r0, [pc, #20]	; (8001e54 <MX_TIM10_Init+0x40>)
 8001e40:	f003 fc74 	bl	800572c <HAL_TIM_Base_Init>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001e4a:	f7ff fd55 	bl	80018f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001e4e:	bf00      	nop
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	20000690 	.word	0x20000690
 8001e58:	40014400 	.word	0x40014400

08001e5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <HAL_TIM_Base_MspInit+0x70>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d10e      	bne.n	8001e8c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	60fb      	str	r3, [r7, #12]
 8001e72:	4b17      	ldr	r3, [pc, #92]	; (8001ed0 <HAL_TIM_Base_MspInit+0x74>)
 8001e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e76:	4a16      	ldr	r2, [pc, #88]	; (8001ed0 <HAL_TIM_Base_MspInit+0x74>)
 8001e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e7e:	4b14      	ldr	r3, [pc, #80]	; (8001ed0 <HAL_TIM_Base_MspInit+0x74>)
 8001e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e86:	60fb      	str	r3, [r7, #12]
 8001e88:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001e8a:	e01a      	b.n	8001ec2 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a10      	ldr	r2, [pc, #64]	; (8001ed4 <HAL_TIM_Base_MspInit+0x78>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d115      	bne.n	8001ec2 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	60bb      	str	r3, [r7, #8]
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <HAL_TIM_Base_MspInit+0x74>)
 8001e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9e:	4a0c      	ldr	r2, [pc, #48]	; (8001ed0 <HAL_TIM_Base_MspInit+0x74>)
 8001ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_TIM_Base_MspInit+0x74>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2019      	movs	r0, #25
 8001eb8:	f000 feef 	bl	8002c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ebc:	2019      	movs	r0, #25
 8001ebe:	f000 ff08 	bl	8002cd2 <HAL_NVIC_EnableIRQ>
}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	40014000 	.word	0x40014000
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40014400 	.word	0x40014400

08001ed8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b088      	sub	sp, #32
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 030c 	add.w	r3, r7, #12
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <HAL_TIM_MspPostInit+0x68>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d11d      	bne.n	8001f36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	60bb      	str	r3, [r7, #8]
 8001efe:	4b11      	ldr	r3, [pc, #68]	; (8001f44 <HAL_TIM_MspPostInit+0x6c>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	4a10      	ldr	r2, [pc, #64]	; (8001f44 <HAL_TIM_MspPostInit+0x6c>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6313      	str	r3, [r2, #48]	; 0x30
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <HAL_TIM_MspPostInit+0x6c>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	60bb      	str	r3, [r7, #8]
 8001f14:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PA2     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f16:	2304      	movs	r3, #4
 8001f18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001f26:	2303      	movs	r3, #3
 8001f28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f2a:	f107 030c 	add.w	r3, r7, #12
 8001f2e:	4619      	mov	r1, r3
 8001f30:	4805      	ldr	r0, [pc, #20]	; (8001f48 <HAL_TIM_MspPostInit+0x70>)
 8001f32:	f001 fa59 	bl	80033e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001f36:	bf00      	nop
 8001f38:	3720      	adds	r7, #32
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	40014000 	.word	0x40014000
 8001f44:	40023800 	.word	0x40023800
 8001f48:	40020000 	.word	0x40020000

08001f4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f50:	480d      	ldr	r0, [pc, #52]	; (8001f88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f52:	490e      	ldr	r1, [pc, #56]	; (8001f8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f54:	4a0e      	ldr	r2, [pc, #56]	; (8001f90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f58:	e002      	b.n	8001f60 <LoopCopyDataInit>

08001f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f5e:	3304      	adds	r3, #4

08001f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f64:	d3f9      	bcc.n	8001f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f66:	4a0b      	ldr	r2, [pc, #44]	; (8001f94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f68:	4c0b      	ldr	r4, [pc, #44]	; (8001f98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f6c:	e001      	b.n	8001f72 <LoopFillZerobss>

08001f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f70:	3204      	adds	r2, #4

08001f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f74:	d3fb      	bcc.n	8001f6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f76:	f7ff fed7 	bl	8001d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f7a:	f008 fc61 	bl	800a840 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f7e:	f7ff fa8d 	bl	800149c <main>
  bx  lr    
 8001f82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001f88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f8c:	2000030c 	.word	0x2000030c
  ldr r2, =_sidata
 8001f90:	0800dadc 	.word	0x0800dadc
  ldr r2, =_sbss
 8001f94:	2000030c 	.word	0x2000030c
  ldr r4, =_ebss
 8001f98:	200022f8 	.word	0x200022f8

08001f9c <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f9c:	e7fe      	b.n	8001f9c <DMA1_Stream0_IRQHandler>
	...

08001fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fa4:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <HAL_Init+0x40>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a0d      	ldr	r2, [pc, #52]	; (8001fe0 <HAL_Init+0x40>)
 8001faa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fb0:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <HAL_Init+0x40>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a0a      	ldr	r2, [pc, #40]	; (8001fe0 <HAL_Init+0x40>)
 8001fb6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fbc:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <HAL_Init+0x40>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a07      	ldr	r2, [pc, #28]	; (8001fe0 <HAL_Init+0x40>)
 8001fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fc8:	2003      	movs	r0, #3
 8001fca:	f000 fe5b 	bl	8002c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fce:	200f      	movs	r0, #15
 8001fd0:	f000 f808 	bl	8001fe4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd4:	f7ff fd60 	bl	8001a98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	40023c00 	.word	0x40023c00

08001fe4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001fec:	4b12      	ldr	r3, [pc, #72]	; (8002038 <HAL_InitTick+0x54>)
 8001fee:	681a      	ldr	r2, [r3, #0]
 8001ff0:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_InitTick+0x58>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ffa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002002:	4618      	mov	r0, r3
 8002004:	f000 fe73 	bl	8002cee <HAL_SYSTICK_Config>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800200e:	2301      	movs	r3, #1
 8002010:	e00e      	b.n	8002030 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b0f      	cmp	r3, #15
 8002016:	d80a      	bhi.n	800202e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002018:	2200      	movs	r2, #0
 800201a:	6879      	ldr	r1, [r7, #4]
 800201c:	f04f 30ff 	mov.w	r0, #4294967295
 8002020:	f000 fe3b 	bl	8002c9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002024:	4a06      	ldr	r2, [pc, #24]	; (8002040 <HAL_InitTick+0x5c>)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800202a:	2300      	movs	r3, #0
 800202c:	e000      	b.n	8002030 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800202e:	2301      	movs	r3, #1
}
 8002030:	4618      	mov	r0, r3
 8002032:	3708      	adds	r7, #8
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}
 8002038:	20000040 	.word	0x20000040
 800203c:	20000048 	.word	0x20000048
 8002040:	20000044 	.word	0x20000044

08002044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002048:	4b06      	ldr	r3, [pc, #24]	; (8002064 <HAL_IncTick+0x20>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	461a      	mov	r2, r3
 800204e:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_IncTick+0x24>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4413      	add	r3, r2
 8002054:	4a04      	ldr	r2, [pc, #16]	; (8002068 <HAL_IncTick+0x24>)
 8002056:	6013      	str	r3, [r2, #0]
}
 8002058:	bf00      	nop
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	20000048 	.word	0x20000048
 8002068:	200006d8 	.word	0x200006d8

0800206c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return uwTick;
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <HAL_GetTick+0x14>)
 8002072:	681b      	ldr	r3, [r3, #0]
}
 8002074:	4618      	mov	r0, r3
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	200006d8 	.word	0x200006d8

08002084 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800208c:	f7ff ffee 	bl	800206c <HAL_GetTick>
 8002090:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800209c:	d005      	beq.n	80020aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_Delay+0x44>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	461a      	mov	r2, r3
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	4413      	add	r3, r2
 80020a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020aa:	bf00      	nop
 80020ac:	f7ff ffde 	bl	800206c <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d8f7      	bhi.n	80020ac <HAL_Delay+0x28>
  {
  }
}
 80020bc:	bf00      	nop
 80020be:	bf00      	nop
 80020c0:	3710      	adds	r7, #16
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	20000048 	.word	0x20000048

080020cc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b084      	sub	sp, #16
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020d4:	2300      	movs	r3, #0
 80020d6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d101      	bne.n	80020e2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e033      	b.n	800214a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d109      	bne.n	80020fe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	f7fe ffc6 	bl	800107c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f003 0310 	and.w	r3, r3, #16
 8002106:	2b00      	cmp	r3, #0
 8002108:	d118      	bne.n	800213c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002112:	f023 0302 	bic.w	r3, r3, #2
 8002116:	f043 0202 	orr.w	r2, r3, #2
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fb58 	bl	80027d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	f023 0303 	bic.w	r3, r3, #3
 8002132:	f043 0201 	orr.w	r2, r3, #1
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	641a      	str	r2, [r3, #64]	; 0x40
 800213a:	e001      	b.n	8002140 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002148:	7bfb      	ldrb	r3, [r7, #15]
}
 800214a:	4618      	mov	r0, r3
 800214c:	3710      	adds	r7, #16
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800215a:	2300      	movs	r3, #0
 800215c:	617b      	str	r3, [r7, #20]
 800215e:	2300      	movs	r3, #0
 8002160:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	f003 0320 	and.w	r3, r3, #32
 8002180:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d049      	beq.n	800221c <HAL_ADC_IRQHandler+0xca>
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d046      	beq.n	800221c <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b00      	cmp	r3, #0
 8002198:	d105      	bne.n	80021a6 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d12b      	bne.n	800220c <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d127      	bne.n	800220c <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d006      	beq.n	80021d8 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d119      	bne.n	800220c <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f022 0220 	bic.w	r2, r2, #32
 80021e6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002204:	f043 0201 	orr.w	r2, r3, #1
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f7ff fb2f 	bl	8001870 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f06f 0212 	mvn.w	r2, #18
 800221a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f003 0304 	and.w	r3, r3, #4
 8002222:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222a:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d057      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x190>
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d054      	beq.n	80022e2 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	d105      	bne.n	8002250 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800225a:	2b00      	cmp	r3, #0
 800225c:	d139      	bne.n	80022d2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002264:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002268:	2b00      	cmp	r3, #0
 800226a:	d006      	beq.n	800227a <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002276:	2b00      	cmp	r3, #0
 8002278:	d12b      	bne.n	80022d2 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002284:	2b00      	cmp	r3, #0
 8002286:	d124      	bne.n	80022d2 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002292:	2b00      	cmp	r3, #0
 8002294:	d11d      	bne.n	80022d2 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800229a:	2b00      	cmp	r3, #0
 800229c:	d119      	bne.n	80022d2 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685a      	ldr	r2, [r3, #4]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022ac:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d105      	bne.n	80022d2 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f043 0201 	orr.w	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f000 fbfc 	bl	8002ad0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f06f 020c 	mvn.w	r2, #12
 80022e0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f003 0301 	and.w	r3, r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022f0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80022f2:	697b      	ldr	r3, [r7, #20]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d017      	beq.n	8002328 <HAL_ADC_IRQHandler+0x1d6>
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d014      	beq.n	8002328 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0301 	and.w	r3, r3, #1
 8002308:	2b01      	cmp	r3, #1
 800230a:	d10d      	bne.n	8002328 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002310:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f000 f925 	bl	8002568 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f06f 0201 	mvn.w	r2, #1
 8002326:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f003 0320 	and.w	r3, r3, #32
 800232e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002336:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b00      	cmp	r3, #0
 800233c:	d015      	beq.n	800236a <HAL_ADC_IRQHandler+0x218>
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d012      	beq.n	800236a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002348:	f043 0202 	orr.w	r2, r3, #2
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0220 	mvn.w	r2, #32
 8002358:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f000 f90e 	bl	800257c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f06f 0220 	mvn.w	r2, #32
 8002368:	601a      	str	r2, [r3, #0]
  }
}
 800236a:	bf00      	nop
 800236c:	3718      	adds	r7, #24
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
	...

08002374 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b086      	sub	sp, #24
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002380:	2300      	movs	r3, #0
 8002382:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800238a:	2b01      	cmp	r3, #1
 800238c:	d101      	bne.n	8002392 <HAL_ADC_Start_DMA+0x1e>
 800238e:	2302      	movs	r3, #2
 8002390:	e0ce      	b.n	8002530 <HAL_ADC_Start_DMA+0x1bc>
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	689b      	ldr	r3, [r3, #8]
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d018      	beq.n	80023da <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0201 	orr.w	r2, r2, #1
 80023b6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023b8:	4b5f      	ldr	r3, [pc, #380]	; (8002538 <HAL_ADC_Start_DMA+0x1c4>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a5f      	ldr	r2, [pc, #380]	; (800253c <HAL_ADC_Start_DMA+0x1c8>)
 80023be:	fba2 2303 	umull	r2, r3, r2, r3
 80023c2:	0c9a      	lsrs	r2, r3, #18
 80023c4:	4613      	mov	r3, r2
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	4413      	add	r3, r2
 80023ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023cc:	e002      	b.n	80023d4 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80023ce:	693b      	ldr	r3, [r7, #16]
 80023d0:	3b01      	subs	r3, #1
 80023d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f9      	bne.n	80023ce <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023e8:	d107      	bne.n	80023fa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	f003 0301 	and.w	r3, r3, #1
 8002404:	2b01      	cmp	r3, #1
 8002406:	f040 8086 	bne.w	8002516 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002412:	f023 0301 	bic.w	r3, r3, #1
 8002416:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002428:	2b00      	cmp	r3, #0
 800242a:	d007      	beq.n	800243c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002434:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002448:	d106      	bne.n	8002458 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244e:	f023 0206 	bic.w	r2, r3, #6
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	645a      	str	r2, [r3, #68]	; 0x44
 8002456:	e002      	b.n	800245e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002466:	4b36      	ldr	r3, [pc, #216]	; (8002540 <HAL_ADC_Start_DMA+0x1cc>)
 8002468:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800246e:	4a35      	ldr	r2, [pc, #212]	; (8002544 <HAL_ADC_Start_DMA+0x1d0>)
 8002470:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002476:	4a34      	ldr	r2, [pc, #208]	; (8002548 <HAL_ADC_Start_DMA+0x1d4>)
 8002478:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800247e:	4a33      	ldr	r2, [pc, #204]	; (800254c <HAL_ADC_Start_DMA+0x1d8>)
 8002480:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800248a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800249a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	689a      	ldr	r2, [r3, #8]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024aa:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	334c      	adds	r3, #76	; 0x4c
 80024b6:	4619      	mov	r1, r3
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	f000 fcd2 	bl	8002e64 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f003 031f 	and.w	r3, r3, #31
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d10f      	bne.n	80024ec <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689b      	ldr	r3, [r3, #8]
 80024d2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d129      	bne.n	800252e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689a      	ldr	r2, [r3, #8]
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80024e8:	609a      	str	r2, [r3, #8]
 80024ea:	e020      	b.n	800252e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a17      	ldr	r2, [pc, #92]	; (8002550 <HAL_ADC_Start_DMA+0x1dc>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d11b      	bne.n	800252e <HAL_ADC_Start_DMA+0x1ba>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002500:	2b00      	cmp	r3, #0
 8002502:	d114      	bne.n	800252e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002512:	609a      	str	r2, [r3, #8]
 8002514:	e00b      	b.n	800252e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	f043 0210 	orr.w	r2, r3, #16
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f043 0201 	orr.w	r2, r3, #1
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800252e:	2300      	movs	r3, #0
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000040 	.word	0x20000040
 800253c:	431bde83 	.word	0x431bde83
 8002540:	40012300 	.word	0x40012300
 8002544:	080029cd 	.word	0x080029cd
 8002548:	08002a87 	.word	0x08002a87
 800254c:	08002aa3 	.word	0x08002aa3
 8002550:	40012000 	.word	0x40012000

08002554 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800255c:	bf00      	nop
 800255e:	370c      	adds	r7, #12
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr

0800257c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002584:	bf00      	nop
 8002586:	370c      	adds	r7, #12
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025a4:	2b01      	cmp	r3, #1
 80025a6:	d101      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x1c>
 80025a8:	2302      	movs	r3, #2
 80025aa:	e105      	b.n	80027b8 <HAL_ADC_ConfigChannel+0x228>
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b09      	cmp	r3, #9
 80025ba:	d925      	bls.n	8002608 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68d9      	ldr	r1, [r3, #12]
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	b29b      	uxth	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	4613      	mov	r3, r2
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	4413      	add	r3, r2
 80025d0:	3b1e      	subs	r3, #30
 80025d2:	2207      	movs	r2, #7
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43da      	mvns	r2, r3
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	400a      	ands	r2, r1
 80025e0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68d9      	ldr	r1, [r3, #12]
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	4618      	mov	r0, r3
 80025f4:	4603      	mov	r3, r0
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	4403      	add	r3, r0
 80025fa:	3b1e      	subs	r3, #30
 80025fc:	409a      	lsls	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	430a      	orrs	r2, r1
 8002604:	60da      	str	r2, [r3, #12]
 8002606:	e022      	b.n	800264e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	6919      	ldr	r1, [r3, #16]
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	b29b      	uxth	r3, r3
 8002614:	461a      	mov	r2, r3
 8002616:	4613      	mov	r3, r2
 8002618:	005b      	lsls	r3, r3, #1
 800261a:	4413      	add	r3, r2
 800261c:	2207      	movs	r2, #7
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43da      	mvns	r2, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	400a      	ands	r2, r1
 800262a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6919      	ldr	r1, [r3, #16]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	4618      	mov	r0, r3
 800263e:	4603      	mov	r3, r0
 8002640:	005b      	lsls	r3, r3, #1
 8002642:	4403      	add	r3, r0
 8002644:	409a      	lsls	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	430a      	orrs	r2, r1
 800264c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b06      	cmp	r3, #6
 8002654:	d824      	bhi.n	80026a0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	009b      	lsls	r3, r3, #2
 8002664:	4413      	add	r3, r2
 8002666:	3b05      	subs	r3, #5
 8002668:	221f      	movs	r2, #31
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43da      	mvns	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	400a      	ands	r2, r1
 8002676:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	b29b      	uxth	r3, r3
 8002684:	4618      	mov	r0, r3
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685a      	ldr	r2, [r3, #4]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	3b05      	subs	r3, #5
 8002692:	fa00 f203 	lsl.w	r2, r0, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	430a      	orrs	r2, r1
 800269c:	635a      	str	r2, [r3, #52]	; 0x34
 800269e:	e04c      	b.n	800273a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	2b0c      	cmp	r3, #12
 80026a6:	d824      	bhi.n	80026f2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	685a      	ldr	r2, [r3, #4]
 80026b2:	4613      	mov	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	4413      	add	r3, r2
 80026b8:	3b23      	subs	r3, #35	; 0x23
 80026ba:	221f      	movs	r2, #31
 80026bc:	fa02 f303 	lsl.w	r3, r2, r3
 80026c0:	43da      	mvns	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	400a      	ands	r2, r1
 80026c8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	b29b      	uxth	r3, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	685a      	ldr	r2, [r3, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	4413      	add	r3, r2
 80026e2:	3b23      	subs	r3, #35	; 0x23
 80026e4:	fa00 f203 	lsl.w	r2, r0, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	430a      	orrs	r2, r1
 80026ee:	631a      	str	r2, [r3, #48]	; 0x30
 80026f0:	e023      	b.n	800273a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	3b41      	subs	r3, #65	; 0x41
 8002704:	221f      	movs	r2, #31
 8002706:	fa02 f303 	lsl.w	r3, r2, r3
 800270a:	43da      	mvns	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	400a      	ands	r2, r1
 8002712:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	b29b      	uxth	r3, r3
 8002720:	4618      	mov	r0, r3
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	685a      	ldr	r2, [r3, #4]
 8002726:	4613      	mov	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4413      	add	r3, r2
 800272c:	3b41      	subs	r3, #65	; 0x41
 800272e:	fa00 f203 	lsl.w	r2, r0, r3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	430a      	orrs	r2, r1
 8002738:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800273a:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <HAL_ADC_ConfigChannel+0x234>)
 800273c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a21      	ldr	r2, [pc, #132]	; (80027c8 <HAL_ADC_ConfigChannel+0x238>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d109      	bne.n	800275c <HAL_ADC_ConfigChannel+0x1cc>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2b12      	cmp	r3, #18
 800274e:	d105      	bne.n	800275c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a19      	ldr	r2, [pc, #100]	; (80027c8 <HAL_ADC_ConfigChannel+0x238>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d123      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x21e>
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2b10      	cmp	r3, #16
 800276c:	d003      	beq.n	8002776 <HAL_ADC_ConfigChannel+0x1e6>
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2b11      	cmp	r3, #17
 8002774:	d11b      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	2b10      	cmp	r3, #16
 8002788:	d111      	bne.n	80027ae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800278a:	4b10      	ldr	r3, [pc, #64]	; (80027cc <HAL_ADC_ConfigChannel+0x23c>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a10      	ldr	r2, [pc, #64]	; (80027d0 <HAL_ADC_ConfigChannel+0x240>)
 8002790:	fba2 2303 	umull	r2, r3, r2, r3
 8002794:	0c9a      	lsrs	r2, r3, #18
 8002796:	4613      	mov	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	4413      	add	r3, r2
 800279c:	005b      	lsls	r3, r3, #1
 800279e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027a0:	e002      	b.n	80027a8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d1f9      	bne.n	80027a2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027b6:	2300      	movs	r3, #0
}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	40012300 	.word	0x40012300
 80027c8:	40012000 	.word	0x40012000
 80027cc:	20000040 	.word	0x20000040
 80027d0:	431bde83 	.word	0x431bde83

080027d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b085      	sub	sp, #20
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027dc:	4b79      	ldr	r3, [pc, #484]	; (80029c4 <ADC_Init+0x1f0>)
 80027de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	685a      	ldr	r2, [r3, #4]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	431a      	orrs	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	685a      	ldr	r2, [r3, #4]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002808:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	691b      	ldr	r3, [r3, #16]
 8002814:	021a      	lsls	r2, r3, #8
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800282c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	6859      	ldr	r1, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	430a      	orrs	r2, r1
 800283e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	689a      	ldr	r2, [r3, #8]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800284e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6899      	ldr	r1, [r3, #8]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	68da      	ldr	r2, [r3, #12]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	4a58      	ldr	r2, [pc, #352]	; (80029c8 <ADC_Init+0x1f4>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d022      	beq.n	80028b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689a      	ldr	r2, [r3, #8]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800287a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	6899      	ldr	r1, [r3, #8]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	430a      	orrs	r2, r1
 800288c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800289c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	6899      	ldr	r1, [r3, #8]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	430a      	orrs	r2, r1
 80028ae:	609a      	str	r2, [r3, #8]
 80028b0:	e00f      	b.n	80028d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f022 0202 	bic.w	r2, r2, #2
 80028e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	6899      	ldr	r1, [r3, #8]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	7e1b      	ldrb	r3, [r3, #24]
 80028ec:	005a      	lsls	r2, r3, #1
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01b      	beq.n	8002938 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800290e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685a      	ldr	r2, [r3, #4]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800291e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6859      	ldr	r1, [r3, #4]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800292a:	3b01      	subs	r3, #1
 800292c:	035a      	lsls	r2, r3, #13
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	430a      	orrs	r2, r1
 8002934:	605a      	str	r2, [r3, #4]
 8002936:	e007      	b.n	8002948 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	685a      	ldr	r2, [r3, #4]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002946:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	3b01      	subs	r3, #1
 8002964:	051a      	lsls	r2, r3, #20
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	430a      	orrs	r2, r1
 800296c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800297c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	6899      	ldr	r1, [r3, #8]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800298a:	025a      	lsls	r2, r3, #9
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	430a      	orrs	r2, r1
 8002992:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689a      	ldr	r2, [r3, #8]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6899      	ldr	r1, [r3, #8]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	029a      	lsls	r2, r3, #10
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	430a      	orrs	r2, r1
 80029b6:	609a      	str	r2, [r3, #8]
}
 80029b8:	bf00      	nop
 80029ba:	3714      	adds	r7, #20
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr
 80029c4:	40012300 	.word	0x40012300
 80029c8:	0f000001 	.word	0x0f000001

080029cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d13c      	bne.n	8002a60 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d12b      	bne.n	8002a58 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d127      	bne.n	8002a58 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a0e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d006      	beq.n	8002a24 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d119      	bne.n	8002a58 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0220 	bic.w	r2, r2, #32
 8002a32:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a38:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f043 0201 	orr.w	r2, r3, #1
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a58:	68f8      	ldr	r0, [r7, #12]
 8002a5a:	f7fe ff09 	bl	8001870 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a5e:	e00e      	b.n	8002a7e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d003      	beq.n	8002a74 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f7ff fd85 	bl	800257c <HAL_ADC_ErrorCallback>
}
 8002a72:	e004      	b.n	8002a7e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	4798      	blx	r3
}
 8002a7e:	bf00      	nop
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b084      	sub	sp, #16
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002a94:	68f8      	ldr	r0, [r7, #12]
 8002a96:	f7ff fd5d 	bl	8002554 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002a9a:	bf00      	nop
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002aa2:	b580      	push	{r7, lr}
 8002aa4:	b084      	sub	sp, #16
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	2240      	movs	r2, #64	; 0x40
 8002ab4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f043 0204 	orr.w	r2, r3, #4
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002ac2:	68f8      	ldr	r0, [r7, #12]
 8002ac4:	f7ff fd5a 	bl	800257c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ac8:	bf00      	nop
 8002aca:	3710      	adds	r7, #16
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}

08002ad0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b085      	sub	sp, #20
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002af4:	4b0c      	ldr	r3, [pc, #48]	; (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002afa:	68ba      	ldr	r2, [r7, #8]
 8002afc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b00:	4013      	ands	r3, r2
 8002b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b16:	4a04      	ldr	r2, [pc, #16]	; (8002b28 <__NVIC_SetPriorityGrouping+0x44>)
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	60d3      	str	r3, [r2, #12]
}
 8002b1c:	bf00      	nop
 8002b1e:	3714      	adds	r7, #20
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b30:	4b04      	ldr	r3, [pc, #16]	; (8002b44 <__NVIC_GetPriorityGrouping+0x18>)
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	0a1b      	lsrs	r3, r3, #8
 8002b36:	f003 0307 	and.w	r3, r3, #7
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00

08002b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	db0b      	blt.n	8002b72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	f003 021f 	and.w	r2, r3, #31
 8002b60:	4907      	ldr	r1, [pc, #28]	; (8002b80 <__NVIC_EnableIRQ+0x38>)
 8002b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b66:	095b      	lsrs	r3, r3, #5
 8002b68:	2001      	movs	r0, #1
 8002b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b72:	bf00      	nop
 8002b74:	370c      	adds	r7, #12
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	e000e100 	.word	0xe000e100

08002b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	6039      	str	r1, [r7, #0]
 8002b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	db0a      	blt.n	8002bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	490c      	ldr	r1, [pc, #48]	; (8002bd0 <__NVIC_SetPriority+0x4c>)
 8002b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba2:	0112      	lsls	r2, r2, #4
 8002ba4:	b2d2      	uxtb	r2, r2
 8002ba6:	440b      	add	r3, r1
 8002ba8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bac:	e00a      	b.n	8002bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	4908      	ldr	r1, [pc, #32]	; (8002bd4 <__NVIC_SetPriority+0x50>)
 8002bb4:	79fb      	ldrb	r3, [r7, #7]
 8002bb6:	f003 030f 	and.w	r3, r3, #15
 8002bba:	3b04      	subs	r3, #4
 8002bbc:	0112      	lsls	r2, r2, #4
 8002bbe:	b2d2      	uxtb	r2, r2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	761a      	strb	r2, [r3, #24]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	e000e100 	.word	0xe000e100
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	b089      	sub	sp, #36	; 0x24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f003 0307 	and.w	r3, r3, #7
 8002bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bec:	69fb      	ldr	r3, [r7, #28]
 8002bee:	f1c3 0307 	rsb	r3, r3, #7
 8002bf2:	2b04      	cmp	r3, #4
 8002bf4:	bf28      	it	cs
 8002bf6:	2304      	movcs	r3, #4
 8002bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	3304      	adds	r3, #4
 8002bfe:	2b06      	cmp	r3, #6
 8002c00:	d902      	bls.n	8002c08 <NVIC_EncodePriority+0x30>
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	3b03      	subs	r3, #3
 8002c06:	e000      	b.n	8002c0a <NVIC_EncodePriority+0x32>
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c10:	69bb      	ldr	r3, [r7, #24]
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43da      	mvns	r2, r3
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	401a      	ands	r2, r3
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c20:	f04f 31ff 	mov.w	r1, #4294967295
 8002c24:	697b      	ldr	r3, [r7, #20]
 8002c26:	fa01 f303 	lsl.w	r3, r1, r3
 8002c2a:	43d9      	mvns	r1, r3
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c30:	4313      	orrs	r3, r2
         );
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3724      	adds	r7, #36	; 0x24
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr
	...

08002c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b082      	sub	sp, #8
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	3b01      	subs	r3, #1
 8002c4c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c50:	d301      	bcc.n	8002c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c52:	2301      	movs	r3, #1
 8002c54:	e00f      	b.n	8002c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c56:	4a0a      	ldr	r2, [pc, #40]	; (8002c80 <SysTick_Config+0x40>)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c5e:	210f      	movs	r1, #15
 8002c60:	f04f 30ff 	mov.w	r0, #4294967295
 8002c64:	f7ff ff8e 	bl	8002b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c68:	4b05      	ldr	r3, [pc, #20]	; (8002c80 <SysTick_Config+0x40>)
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c6e:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <SysTick_Config+0x40>)
 8002c70:	2207      	movs	r2, #7
 8002c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	e000e010 	.word	0xe000e010

08002c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff ff29 	bl	8002ae4 <__NVIC_SetPriorityGrouping>
}
 8002c92:	bf00      	nop
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b086      	sub	sp, #24
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	60b9      	str	r1, [r7, #8]
 8002ca4:	607a      	str	r2, [r7, #4]
 8002ca6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002cac:	f7ff ff3e 	bl	8002b2c <__NVIC_GetPriorityGrouping>
 8002cb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	68b9      	ldr	r1, [r7, #8]
 8002cb6:	6978      	ldr	r0, [r7, #20]
 8002cb8:	f7ff ff8e 	bl	8002bd8 <NVIC_EncodePriority>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc2:	4611      	mov	r1, r2
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff5d 	bl	8002b84 <__NVIC_SetPriority>
}
 8002cca:	bf00      	nop
 8002ccc:	3718      	adds	r7, #24
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	4603      	mov	r3, r0
 8002cda:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff31 	bl	8002b48 <__NVIC_EnableIRQ>
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f7ff ffa2 	bl	8002c40 <SysTick_Config>
 8002cfc:	4603      	mov	r3, r0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	3708      	adds	r7, #8
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}
	...

08002d08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b086      	sub	sp, #24
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d14:	f7ff f9aa 	bl	800206c <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d101      	bne.n	8002d24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d20:	2301      	movs	r3, #1
 8002d22:	e099      	b.n	8002e58 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0201 	bic.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d44:	e00f      	b.n	8002d66 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d46:	f7ff f991 	bl	800206c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b05      	cmp	r3, #5
 8002d52:	d908      	bls.n	8002d66 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2203      	movs	r2, #3
 8002d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d62:	2303      	movs	r3, #3
 8002d64:	e078      	b.n	8002e58 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1e8      	bne.n	8002d46 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	4b38      	ldr	r3, [pc, #224]	; (8002e60 <HAL_DMA_Init+0x158>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685a      	ldr	r2, [r3, #4]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d92:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d9e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002daa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a1b      	ldr	r3, [r3, #32]
 8002db0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	4313      	orrs	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dbc:	2b04      	cmp	r3, #4
 8002dbe:	d107      	bne.n	8002dd0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	697a      	ldr	r2, [r7, #20]
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	f023 0307 	bic.w	r3, r3, #7
 8002de6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d117      	bne.n	8002e2a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00e      	beq.n	8002e2a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e0c:	6878      	ldr	r0, [r7, #4]
 8002e0e:	f000 fa6f 	bl	80032f0 <DMA_CheckFifoParam>
 8002e12:	4603      	mov	r3, r0
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2240      	movs	r2, #64	; 0x40
 8002e1c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2201      	movs	r2, #1
 8002e22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e26:	2301      	movs	r3, #1
 8002e28:	e016      	b.n	8002e58 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	697a      	ldr	r2, [r7, #20]
 8002e30:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 fa26 	bl	8003284 <DMA_CalcBaseAndBitshift>
 8002e38:	4603      	mov	r3, r0
 8002e3a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e40:	223f      	movs	r2, #63	; 0x3f
 8002e42:	409a      	lsls	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3718      	adds	r7, #24
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	f010803f 	.word	0xf010803f

08002e64 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d101      	bne.n	8002e8a <HAL_DMA_Start_IT+0x26>
 8002e86:	2302      	movs	r3, #2
 8002e88:	e040      	b.n	8002f0c <HAL_DMA_Start_IT+0xa8>
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2201      	movs	r2, #1
 8002e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d12f      	bne.n	8002efe <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2202      	movs	r2, #2
 8002ea2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f000 f9b8 	bl	8003228 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebc:	223f      	movs	r2, #63	; 0x3f
 8002ebe:	409a      	lsls	r2, r3
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0216 	orr.w	r2, r2, #22
 8002ed2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d007      	beq.n	8002eec <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f042 0208 	orr.w	r2, r2, #8
 8002eea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f042 0201 	orr.w	r2, r2, #1
 8002efa:	601a      	str	r2, [r3, #0]
 8002efc:	e005      	b.n	8002f0a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
 8002f08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3718      	adds	r7, #24
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f20:	4b8e      	ldr	r3, [pc, #568]	; (800315c <HAL_DMA_IRQHandler+0x248>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a8e      	ldr	r2, [pc, #568]	; (8003160 <HAL_DMA_IRQHandler+0x24c>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	0a9b      	lsrs	r3, r3, #10
 8002f2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f3e:	2208      	movs	r2, #8
 8002f40:	409a      	lsls	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d01a      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0304 	and.w	r3, r3, #4
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d013      	beq.n	8002f80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f022 0204 	bic.w	r2, r2, #4
 8002f66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f6c:	2208      	movs	r2, #8
 8002f6e:	409a      	lsls	r2, r3
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f78:	f043 0201 	orr.w	r2, r3, #1
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f84:	2201      	movs	r2, #1
 8002f86:	409a      	lsls	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d012      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	695b      	ldr	r3, [r3, #20]
 8002f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fae:	f043 0202 	orr.w	r2, r3, #2
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	2204      	movs	r2, #4
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d012      	beq.n	8002fec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f003 0302 	and.w	r3, r3, #2
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d00b      	beq.n	8002fec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd8:	2204      	movs	r2, #4
 8002fda:	409a      	lsls	r2, r3
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe4:	f043 0204 	orr.w	r2, r3, #4
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff0:	2210      	movs	r2, #16
 8002ff2:	409a      	lsls	r2, r3
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d043      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d03c      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	2210      	movs	r2, #16
 8003010:	409a      	lsls	r2, r3
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d018      	beq.n	8003056 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800302e:	2b00      	cmp	r3, #0
 8003030:	d108      	bne.n	8003044 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003036:	2b00      	cmp	r3, #0
 8003038:	d024      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	6878      	ldr	r0, [r7, #4]
 8003040:	4798      	blx	r3
 8003042:	e01f      	b.n	8003084 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01b      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003050:	6878      	ldr	r0, [r7, #4]
 8003052:	4798      	blx	r3
 8003054:	e016      	b.n	8003084 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003060:	2b00      	cmp	r3, #0
 8003062:	d107      	bne.n	8003074 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 0208 	bic.w	r2, r2, #8
 8003072:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	2b00      	cmp	r3, #0
 800307a:	d003      	beq.n	8003084 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003088:	2220      	movs	r2, #32
 800308a:	409a      	lsls	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4013      	ands	r3, r2
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 808f 	beq.w	80031b4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0310 	and.w	r3, r3, #16
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8087 	beq.w	80031b4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030aa:	2220      	movs	r2, #32
 80030ac:	409a      	lsls	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b05      	cmp	r3, #5
 80030bc:	d136      	bne.n	800312c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0216 	bic.w	r2, r2, #22
 80030cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695a      	ldr	r2, [r3, #20]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d103      	bne.n	80030ee <HAL_DMA_IRQHandler+0x1da>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	681a      	ldr	r2, [r3, #0]
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f022 0208 	bic.w	r2, r2, #8
 80030fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	223f      	movs	r2, #63	; 0x3f
 8003104:	409a      	lsls	r2, r3
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2201      	movs	r2, #1
 800310e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2200      	movs	r2, #0
 8003116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800311e:	2b00      	cmp	r3, #0
 8003120:	d07e      	beq.n	8003220 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	4798      	blx	r3
        }
        return;
 800312a:	e079      	b.n	8003220 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d01d      	beq.n	8003176 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10d      	bne.n	8003164 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800314c:	2b00      	cmp	r3, #0
 800314e:	d031      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
 8003158:	e02c      	b.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
 800315a:	bf00      	nop
 800315c:	20000040 	.word	0x20000040
 8003160:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003168:	2b00      	cmp	r3, #0
 800316a:	d023      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	4798      	blx	r3
 8003174:	e01e      	b.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10f      	bne.n	80031a4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0210 	bic.w	r2, r2, #16
 8003192:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d003      	beq.n	80031b4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b0:	6878      	ldr	r0, [r7, #4]
 80031b2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d032      	beq.n	8003222 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c0:	f003 0301 	and.w	r3, r3, #1
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d022      	beq.n	800320e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2205      	movs	r2, #5
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	3301      	adds	r3, #1
 80031e4:	60bb      	str	r3, [r7, #8]
 80031e6:	697a      	ldr	r2, [r7, #20]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d307      	bcc.n	80031fc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0301 	and.w	r3, r3, #1
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d1f2      	bne.n	80031e0 <HAL_DMA_IRQHandler+0x2cc>
 80031fa:	e000      	b.n	80031fe <HAL_DMA_IRQHandler+0x2ea>
          break;
 80031fc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2201      	movs	r2, #1
 8003202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2200      	movs	r2, #0
 800320a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d005      	beq.n	8003222 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	4798      	blx	r3
 800321e:	e000      	b.n	8003222 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003220:	bf00      	nop
    }
  }
}
 8003222:	3718      	adds	r7, #24
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003228:	b480      	push	{r7}
 800322a:	b085      	sub	sp, #20
 800322c:	af00      	add	r7, sp, #0
 800322e:	60f8      	str	r0, [r7, #12]
 8003230:	60b9      	str	r1, [r7, #8]
 8003232:	607a      	str	r2, [r7, #4]
 8003234:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003244:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	689b      	ldr	r3, [r3, #8]
 8003252:	2b40      	cmp	r3, #64	; 0x40
 8003254:	d108      	bne.n	8003268 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	687a      	ldr	r2, [r7, #4]
 800325c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	68ba      	ldr	r2, [r7, #8]
 8003264:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003266:	e007      	b.n	8003278 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68ba      	ldr	r2, [r7, #8]
 800326e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	60da      	str	r2, [r3, #12]
}
 8003278:	bf00      	nop
 800327a:	3714      	adds	r7, #20
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003284:	b480      	push	{r7}
 8003286:	b085      	sub	sp, #20
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	b2db      	uxtb	r3, r3
 8003292:	3b10      	subs	r3, #16
 8003294:	4a14      	ldr	r2, [pc, #80]	; (80032e8 <DMA_CalcBaseAndBitshift+0x64>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	091b      	lsrs	r3, r3, #4
 800329c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800329e:	4a13      	ldr	r2, [pc, #76]	; (80032ec <DMA_CalcBaseAndBitshift+0x68>)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	4413      	add	r3, r2
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	461a      	mov	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2b03      	cmp	r3, #3
 80032b0:	d909      	bls.n	80032c6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032ba:	f023 0303 	bic.w	r3, r3, #3
 80032be:	1d1a      	adds	r2, r3, #4
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	659a      	str	r2, [r3, #88]	; 0x58
 80032c4:	e007      	b.n	80032d6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032ce:	f023 0303 	bic.w	r3, r3, #3
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3714      	adds	r7, #20
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	aaaaaaab 	.word	0xaaaaaaab
 80032ec:	0800d6e8 	.word	0x0800d6e8

080032f0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80032f0:	b480      	push	{r7}
 80032f2:	b085      	sub	sp, #20
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003300:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699b      	ldr	r3, [r3, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d11f      	bne.n	800334a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2b03      	cmp	r3, #3
 800330e:	d856      	bhi.n	80033be <DMA_CheckFifoParam+0xce>
 8003310:	a201      	add	r2, pc, #4	; (adr r2, 8003318 <DMA_CheckFifoParam+0x28>)
 8003312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003316:	bf00      	nop
 8003318:	08003329 	.word	0x08003329
 800331c:	0800333b 	.word	0x0800333b
 8003320:	08003329 	.word	0x08003329
 8003324:	080033bf 	.word	0x080033bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800332c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d046      	beq.n	80033c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003338:	e043      	b.n	80033c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800333e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003342:	d140      	bne.n	80033c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003348:	e03d      	b.n	80033c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003352:	d121      	bne.n	8003398 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	2b03      	cmp	r3, #3
 8003358:	d837      	bhi.n	80033ca <DMA_CheckFifoParam+0xda>
 800335a:	a201      	add	r2, pc, #4	; (adr r2, 8003360 <DMA_CheckFifoParam+0x70>)
 800335c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003360:	08003371 	.word	0x08003371
 8003364:	08003377 	.word	0x08003377
 8003368:	08003371 	.word	0x08003371
 800336c:	08003389 	.word	0x08003389
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003370:	2301      	movs	r3, #1
 8003372:	73fb      	strb	r3, [r7, #15]
      break;
 8003374:	e030      	b.n	80033d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d025      	beq.n	80033ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003386:	e022      	b.n	80033ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003390:	d11f      	bne.n	80033d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003396:	e01c      	b.n	80033d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d903      	bls.n	80033a6 <DMA_CheckFifoParam+0xb6>
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	2b03      	cmp	r3, #3
 80033a2:	d003      	beq.n	80033ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033a4:	e018      	b.n	80033d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	73fb      	strb	r3, [r7, #15]
      break;
 80033aa:	e015      	b.n	80033d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00e      	beq.n	80033d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	73fb      	strb	r3, [r7, #15]
      break;
 80033bc:	e00b      	b.n	80033d6 <DMA_CheckFifoParam+0xe6>
      break;
 80033be:	bf00      	nop
 80033c0:	e00a      	b.n	80033d8 <DMA_CheckFifoParam+0xe8>
      break;
 80033c2:	bf00      	nop
 80033c4:	e008      	b.n	80033d8 <DMA_CheckFifoParam+0xe8>
      break;
 80033c6:	bf00      	nop
 80033c8:	e006      	b.n	80033d8 <DMA_CheckFifoParam+0xe8>
      break;
 80033ca:	bf00      	nop
 80033cc:	e004      	b.n	80033d8 <DMA_CheckFifoParam+0xe8>
      break;
 80033ce:	bf00      	nop
 80033d0:	e002      	b.n	80033d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80033d2:	bf00      	nop
 80033d4:	e000      	b.n	80033d8 <DMA_CheckFifoParam+0xe8>
      break;
 80033d6:	bf00      	nop
    }
  } 
  
  return status; 
 80033d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr
 80033e6:	bf00      	nop

080033e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b089      	sub	sp, #36	; 0x24
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033fe:	2300      	movs	r3, #0
 8003400:	61fb      	str	r3, [r7, #28]
 8003402:	e159      	b.n	80036b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003404:	2201      	movs	r2, #1
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	697a      	ldr	r2, [r7, #20]
 8003414:	4013      	ands	r3, r2
 8003416:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003418:	693a      	ldr	r2, [r7, #16]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	429a      	cmp	r2, r3
 800341e:	f040 8148 	bne.w	80036b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	2b01      	cmp	r3, #1
 800342c:	d005      	beq.n	800343a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	685b      	ldr	r3, [r3, #4]
 8003432:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003436:	2b02      	cmp	r3, #2
 8003438:	d130      	bne.n	800349c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003440:	69fb      	ldr	r3, [r7, #28]
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	2203      	movs	r2, #3
 8003446:	fa02 f303 	lsl.w	r3, r2, r3
 800344a:	43db      	mvns	r3, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4013      	ands	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68da      	ldr	r2, [r3, #12]
 8003456:	69fb      	ldr	r3, [r7, #28]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	fa02 f303 	lsl.w	r3, r2, r3
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	4313      	orrs	r3, r2
 8003462:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003470:	2201      	movs	r2, #1
 8003472:	69fb      	ldr	r3, [r7, #28]
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	091b      	lsrs	r3, r3, #4
 8003486:	f003 0201 	and.w	r2, r3, #1
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 0303 	and.w	r3, r3, #3
 80034a4:	2b03      	cmp	r3, #3
 80034a6:	d017      	beq.n	80034d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	005b      	lsls	r3, r3, #1
 80034b2:	2203      	movs	r2, #3
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	689a      	ldr	r2, [r3, #8]
 80034c4:	69fb      	ldr	r3, [r7, #28]
 80034c6:	005b      	lsls	r3, r3, #1
 80034c8:	fa02 f303 	lsl.w	r3, r2, r3
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0303 	and.w	r3, r3, #3
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d123      	bne.n	800352c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	08da      	lsrs	r2, r3, #3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	3208      	adds	r2, #8
 80034ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	f003 0307 	and.w	r3, r3, #7
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	220f      	movs	r2, #15
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	43db      	mvns	r3, r3
 8003502:	69ba      	ldr	r2, [r7, #24]
 8003504:	4013      	ands	r3, r2
 8003506:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	691a      	ldr	r2, [r3, #16]
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	69ba      	ldr	r2, [r7, #24]
 800351a:	4313      	orrs	r3, r2
 800351c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	08da      	lsrs	r2, r3, #3
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	3208      	adds	r2, #8
 8003526:	69b9      	ldr	r1, [r7, #24]
 8003528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	005b      	lsls	r3, r3, #1
 8003536:	2203      	movs	r2, #3
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	43db      	mvns	r3, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4013      	ands	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f003 0203 	and.w	r2, r3, #3
 800354c:	69fb      	ldr	r3, [r7, #28]
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	69ba      	ldr	r2, [r7, #24]
 8003556:	4313      	orrs	r3, r2
 8003558:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	69ba      	ldr	r2, [r7, #24]
 800355e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 80a2 	beq.w	80036b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800356e:	2300      	movs	r3, #0
 8003570:	60fb      	str	r3, [r7, #12]
 8003572:	4b57      	ldr	r3, [pc, #348]	; (80036d0 <HAL_GPIO_Init+0x2e8>)
 8003574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003576:	4a56      	ldr	r2, [pc, #344]	; (80036d0 <HAL_GPIO_Init+0x2e8>)
 8003578:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800357c:	6453      	str	r3, [r2, #68]	; 0x44
 800357e:	4b54      	ldr	r3, [pc, #336]	; (80036d0 <HAL_GPIO_Init+0x2e8>)
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800358a:	4a52      	ldr	r2, [pc, #328]	; (80036d4 <HAL_GPIO_Init+0x2ec>)
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	089b      	lsrs	r3, r3, #2
 8003590:	3302      	adds	r3, #2
 8003592:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003596:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003598:	69fb      	ldr	r3, [r7, #28]
 800359a:	f003 0303 	and.w	r3, r3, #3
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	220f      	movs	r2, #15
 80035a2:	fa02 f303 	lsl.w	r3, r2, r3
 80035a6:	43db      	mvns	r3, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4013      	ands	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a49      	ldr	r2, [pc, #292]	; (80036d8 <HAL_GPIO_Init+0x2f0>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d019      	beq.n	80035ea <HAL_GPIO_Init+0x202>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a48      	ldr	r2, [pc, #288]	; (80036dc <HAL_GPIO_Init+0x2f4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <HAL_GPIO_Init+0x1fe>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a47      	ldr	r2, [pc, #284]	; (80036e0 <HAL_GPIO_Init+0x2f8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00d      	beq.n	80035e2 <HAL_GPIO_Init+0x1fa>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a46      	ldr	r2, [pc, #280]	; (80036e4 <HAL_GPIO_Init+0x2fc>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d007      	beq.n	80035de <HAL_GPIO_Init+0x1f6>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a45      	ldr	r2, [pc, #276]	; (80036e8 <HAL_GPIO_Init+0x300>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d101      	bne.n	80035da <HAL_GPIO_Init+0x1f2>
 80035d6:	2304      	movs	r3, #4
 80035d8:	e008      	b.n	80035ec <HAL_GPIO_Init+0x204>
 80035da:	2307      	movs	r3, #7
 80035dc:	e006      	b.n	80035ec <HAL_GPIO_Init+0x204>
 80035de:	2303      	movs	r3, #3
 80035e0:	e004      	b.n	80035ec <HAL_GPIO_Init+0x204>
 80035e2:	2302      	movs	r3, #2
 80035e4:	e002      	b.n	80035ec <HAL_GPIO_Init+0x204>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <HAL_GPIO_Init+0x204>
 80035ea:	2300      	movs	r3, #0
 80035ec:	69fa      	ldr	r2, [r7, #28]
 80035ee:	f002 0203 	and.w	r2, r2, #3
 80035f2:	0092      	lsls	r2, r2, #2
 80035f4:	4093      	lsls	r3, r2
 80035f6:	69ba      	ldr	r2, [r7, #24]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80035fc:	4935      	ldr	r1, [pc, #212]	; (80036d4 <HAL_GPIO_Init+0x2ec>)
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	089b      	lsrs	r3, r3, #2
 8003602:	3302      	adds	r3, #2
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800360a:	4b38      	ldr	r3, [pc, #224]	; (80036ec <HAL_GPIO_Init+0x304>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	43db      	mvns	r3, r3
 8003614:	69ba      	ldr	r2, [r7, #24]
 8003616:	4013      	ands	r3, r2
 8003618:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4313      	orrs	r3, r2
 800362c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800362e:	4a2f      	ldr	r2, [pc, #188]	; (80036ec <HAL_GPIO_Init+0x304>)
 8003630:	69bb      	ldr	r3, [r7, #24]
 8003632:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003634:	4b2d      	ldr	r3, [pc, #180]	; (80036ec <HAL_GPIO_Init+0x304>)
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800364c:	2b00      	cmp	r3, #0
 800364e:	d003      	beq.n	8003658 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4313      	orrs	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003658:	4a24      	ldr	r2, [pc, #144]	; (80036ec <HAL_GPIO_Init+0x304>)
 800365a:	69bb      	ldr	r3, [r7, #24]
 800365c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800365e:	4b23      	ldr	r3, [pc, #140]	; (80036ec <HAL_GPIO_Init+0x304>)
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	43db      	mvns	r3, r3
 8003668:	69ba      	ldr	r2, [r7, #24]
 800366a:	4013      	ands	r3, r2
 800366c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4313      	orrs	r3, r2
 8003680:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003682:	4a1a      	ldr	r2, [pc, #104]	; (80036ec <HAL_GPIO_Init+0x304>)
 8003684:	69bb      	ldr	r3, [r7, #24]
 8003686:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003688:	4b18      	ldr	r3, [pc, #96]	; (80036ec <HAL_GPIO_Init+0x304>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	43db      	mvns	r3, r3
 8003692:	69ba      	ldr	r2, [r7, #24]
 8003694:	4013      	ands	r3, r2
 8003696:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d003      	beq.n	80036ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036ac:	4a0f      	ldr	r2, [pc, #60]	; (80036ec <HAL_GPIO_Init+0x304>)
 80036ae:	69bb      	ldr	r3, [r7, #24]
 80036b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	3301      	adds	r3, #1
 80036b6:	61fb      	str	r3, [r7, #28]
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	2b0f      	cmp	r3, #15
 80036bc:	f67f aea2 	bls.w	8003404 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	3724      	adds	r7, #36	; 0x24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40023800 	.word	0x40023800
 80036d4:	40013800 	.word	0x40013800
 80036d8:	40020000 	.word	0x40020000
 80036dc:	40020400 	.word	0x40020400
 80036e0:	40020800 	.word	0x40020800
 80036e4:	40020c00 	.word	0x40020c00
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40013c00 	.word	0x40013c00

080036f0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80036fa:	4b08      	ldr	r3, [pc, #32]	; (800371c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036fc:	695a      	ldr	r2, [r3, #20]
 80036fe:	88fb      	ldrh	r3, [r7, #6]
 8003700:	4013      	ands	r3, r2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d006      	beq.n	8003714 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003706:	4a05      	ldr	r2, [pc, #20]	; (800371c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003708:	88fb      	ldrh	r3, [r7, #6]
 800370a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800370c:	88fb      	ldrh	r3, [r7, #6]
 800370e:	4618      	mov	r0, r3
 8003710:	f7fe f8dc 	bl	80018cc <HAL_GPIO_EXTI_Callback>
  }
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	40013c00 	.word	0x40013c00

08003720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d101      	bne.n	8003732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e12b      	b.n	800398a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd fdd6 	bl	80012f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2224      	movs	r2, #36	; 0x24
 8003750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681a      	ldr	r2, [r3, #0]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f022 0201 	bic.w	r2, r2, #1
 8003762:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681a      	ldr	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003772:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003782:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003784:	f001 ffbe 	bl	8005704 <HAL_RCC_GetPCLK1Freq>
 8003788:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4a81      	ldr	r2, [pc, #516]	; (8003994 <HAL_I2C_Init+0x274>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d807      	bhi.n	80037a4 <HAL_I2C_Init+0x84>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4a80      	ldr	r2, [pc, #512]	; (8003998 <HAL_I2C_Init+0x278>)
 8003798:	4293      	cmp	r3, r2
 800379a:	bf94      	ite	ls
 800379c:	2301      	movls	r3, #1
 800379e:	2300      	movhi	r3, #0
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	e006      	b.n	80037b2 <HAL_I2C_Init+0x92>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4a7d      	ldr	r2, [pc, #500]	; (800399c <HAL_I2C_Init+0x27c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	bf94      	ite	ls
 80037ac:	2301      	movls	r3, #1
 80037ae:	2300      	movhi	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e0e7      	b.n	800398a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	4a78      	ldr	r2, [pc, #480]	; (80039a0 <HAL_I2C_Init+0x280>)
 80037be:	fba2 2303 	umull	r2, r3, r2, r3
 80037c2:	0c9b      	lsrs	r3, r3, #18
 80037c4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68ba      	ldr	r2, [r7, #8]
 80037d6:	430a      	orrs	r2, r1
 80037d8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	4a6a      	ldr	r2, [pc, #424]	; (8003994 <HAL_I2C_Init+0x274>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d802      	bhi.n	80037f4 <HAL_I2C_Init+0xd4>
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	3301      	adds	r3, #1
 80037f2:	e009      	b.n	8003808 <HAL_I2C_Init+0xe8>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037fa:	fb02 f303 	mul.w	r3, r2, r3
 80037fe:	4a69      	ldr	r2, [pc, #420]	; (80039a4 <HAL_I2C_Init+0x284>)
 8003800:	fba2 2303 	umull	r2, r3, r2, r3
 8003804:	099b      	lsrs	r3, r3, #6
 8003806:	3301      	adds	r3, #1
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	6812      	ldr	r2, [r2, #0]
 800380c:	430b      	orrs	r3, r1
 800380e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	69db      	ldr	r3, [r3, #28]
 8003816:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800381a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	495c      	ldr	r1, [pc, #368]	; (8003994 <HAL_I2C_Init+0x274>)
 8003824:	428b      	cmp	r3, r1
 8003826:	d819      	bhi.n	800385c <HAL_I2C_Init+0x13c>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1e59      	subs	r1, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	005b      	lsls	r3, r3, #1
 8003832:	fbb1 f3f3 	udiv	r3, r1, r3
 8003836:	1c59      	adds	r1, r3, #1
 8003838:	f640 73fc 	movw	r3, #4092	; 0xffc
 800383c:	400b      	ands	r3, r1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00a      	beq.n	8003858 <HAL_I2C_Init+0x138>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	1e59      	subs	r1, r3, #1
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	005b      	lsls	r3, r3, #1
 800384c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003850:	3301      	adds	r3, #1
 8003852:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003856:	e051      	b.n	80038fc <HAL_I2C_Init+0x1dc>
 8003858:	2304      	movs	r3, #4
 800385a:	e04f      	b.n	80038fc <HAL_I2C_Init+0x1dc>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d111      	bne.n	8003888 <HAL_I2C_Init+0x168>
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	1e58      	subs	r0, r3, #1
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6859      	ldr	r1, [r3, #4]
 800386c:	460b      	mov	r3, r1
 800386e:	005b      	lsls	r3, r3, #1
 8003870:	440b      	add	r3, r1
 8003872:	fbb0 f3f3 	udiv	r3, r0, r3
 8003876:	3301      	adds	r3, #1
 8003878:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800387c:	2b00      	cmp	r3, #0
 800387e:	bf0c      	ite	eq
 8003880:	2301      	moveq	r3, #1
 8003882:	2300      	movne	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	e012      	b.n	80038ae <HAL_I2C_Init+0x18e>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	1e58      	subs	r0, r3, #1
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6859      	ldr	r1, [r3, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	440b      	add	r3, r1
 8003896:	0099      	lsls	r1, r3, #2
 8003898:	440b      	add	r3, r1
 800389a:	fbb0 f3f3 	udiv	r3, r0, r3
 800389e:	3301      	adds	r3, #1
 80038a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bf0c      	ite	eq
 80038a8:	2301      	moveq	r3, #1
 80038aa:	2300      	movne	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <HAL_I2C_Init+0x196>
 80038b2:	2301      	movs	r3, #1
 80038b4:	e022      	b.n	80038fc <HAL_I2C_Init+0x1dc>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d10e      	bne.n	80038dc <HAL_I2C_Init+0x1bc>
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	1e58      	subs	r0, r3, #1
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6859      	ldr	r1, [r3, #4]
 80038c6:	460b      	mov	r3, r1
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	440b      	add	r3, r1
 80038cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80038d0:	3301      	adds	r3, #1
 80038d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038da:	e00f      	b.n	80038fc <HAL_I2C_Init+0x1dc>
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	1e58      	subs	r0, r3, #1
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6859      	ldr	r1, [r3, #4]
 80038e4:	460b      	mov	r3, r1
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	440b      	add	r3, r1
 80038ea:	0099      	lsls	r1, r3, #2
 80038ec:	440b      	add	r3, r1
 80038ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80038f2:	3301      	adds	r3, #1
 80038f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038fc:	6879      	ldr	r1, [r7, #4]
 80038fe:	6809      	ldr	r1, [r1, #0]
 8003900:	4313      	orrs	r3, r2
 8003902:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	69da      	ldr	r2, [r3, #28]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	431a      	orrs	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	430a      	orrs	r2, r1
 800391e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800392a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6911      	ldr	r1, [r2, #16]
 8003932:	687a      	ldr	r2, [r7, #4]
 8003934:	68d2      	ldr	r2, [r2, #12]
 8003936:	4311      	orrs	r1, r2
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	6812      	ldr	r2, [r2, #0]
 800393c:	430b      	orrs	r3, r1
 800393e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	431a      	orrs	r2, r3
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f042 0201 	orr.w	r2, r2, #1
 800396a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	2200      	movs	r2, #0
 800397e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	000186a0 	.word	0x000186a0
 8003998:	001e847f 	.word	0x001e847f
 800399c:	003d08ff 	.word	0x003d08ff
 80039a0:	431bde83 	.word	0x431bde83
 80039a4:	10624dd3 	.word	0x10624dd3

080039a8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039aa:	b08f      	sub	sp, #60	; 0x3c
 80039ac:	af0a      	add	r7, sp, #40	; 0x28
 80039ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d101      	bne.n	80039ba <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e10f      	b.n	8003bda <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d106      	bne.n	80039da <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f006 fc19 	bl	800a20c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2203      	movs	r2, #3
 80039de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d102      	bne.n	80039f4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f002 ff00 	bl	80067fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	603b      	str	r3, [r7, #0]
 8003a04:	687e      	ldr	r6, [r7, #4]
 8003a06:	466d      	mov	r5, sp
 8003a08:	f106 0410 	add.w	r4, r6, #16
 8003a0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a14:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a18:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a1c:	1d33      	adds	r3, r6, #4
 8003a1e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a20:	6838      	ldr	r0, [r7, #0]
 8003a22:	f002 fdd8 	bl	80065d6 <USB_CoreInit>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d005      	beq.n	8003a38 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e0d0      	b.n	8003bda <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2100      	movs	r1, #0
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f002 feee 	bl	8006820 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a44:	2300      	movs	r3, #0
 8003a46:	73fb      	strb	r3, [r7, #15]
 8003a48:	e04a      	b.n	8003ae0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a4a:	7bfa      	ldrb	r2, [r7, #15]
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	00db      	lsls	r3, r3, #3
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	333d      	adds	r3, #61	; 0x3d
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a5e:	7bfa      	ldrb	r2, [r7, #15]
 8003a60:	6879      	ldr	r1, [r7, #4]
 8003a62:	4613      	mov	r3, r2
 8003a64:	00db      	lsls	r3, r3, #3
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	440b      	add	r3, r1
 8003a6c:	333c      	adds	r3, #60	; 0x3c
 8003a6e:	7bfa      	ldrb	r2, [r7, #15]
 8003a70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003a72:	7bfa      	ldrb	r2, [r7, #15]
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	b298      	uxth	r0, r3
 8003a78:	6879      	ldr	r1, [r7, #4]
 8003a7a:	4613      	mov	r3, r2
 8003a7c:	00db      	lsls	r3, r3, #3
 8003a7e:	4413      	add	r3, r2
 8003a80:	009b      	lsls	r3, r3, #2
 8003a82:	440b      	add	r3, r1
 8003a84:	3344      	adds	r3, #68	; 0x44
 8003a86:	4602      	mov	r2, r0
 8003a88:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003a8a:	7bfa      	ldrb	r2, [r7, #15]
 8003a8c:	6879      	ldr	r1, [r7, #4]
 8003a8e:	4613      	mov	r3, r2
 8003a90:	00db      	lsls	r3, r3, #3
 8003a92:	4413      	add	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	440b      	add	r3, r1
 8003a98:	3340      	adds	r3, #64	; 0x40
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003a9e:	7bfa      	ldrb	r2, [r7, #15]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	00db      	lsls	r3, r3, #3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	3348      	adds	r3, #72	; 0x48
 8003aae:	2200      	movs	r2, #0
 8003ab0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ab2:	7bfa      	ldrb	r2, [r7, #15]
 8003ab4:	6879      	ldr	r1, [r7, #4]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	334c      	adds	r3, #76	; 0x4c
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003ac6:	7bfa      	ldrb	r2, [r7, #15]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	3354      	adds	r3, #84	; 0x54
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	3301      	adds	r3, #1
 8003ade:	73fb      	strb	r3, [r7, #15]
 8003ae0:	7bfa      	ldrb	r2, [r7, #15]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	429a      	cmp	r2, r3
 8003ae8:	d3af      	bcc.n	8003a4a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]
 8003aee:	e044      	b.n	8003b7a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003af0:	7bfa      	ldrb	r2, [r7, #15]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	4413      	add	r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003b02:	2200      	movs	r2, #0
 8003b04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b06:	7bfa      	ldrb	r2, [r7, #15]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	00db      	lsls	r3, r3, #3
 8003b0e:	4413      	add	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b18:	7bfa      	ldrb	r2, [r7, #15]
 8003b1a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b1c:	7bfa      	ldrb	r2, [r7, #15]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	4413      	add	r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b2e:	2200      	movs	r2, #0
 8003b30:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b32:	7bfa      	ldrb	r2, [r7, #15]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	00db      	lsls	r3, r3, #3
 8003b3a:	4413      	add	r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b48:	7bfa      	ldrb	r2, [r7, #15]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4413      	add	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b5e:	7bfa      	ldrb	r2, [r7, #15]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4413      	add	r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b70:	2200      	movs	r2, #0
 8003b72:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b74:	7bfb      	ldrb	r3, [r7, #15]
 8003b76:	3301      	adds	r3, #1
 8003b78:	73fb      	strb	r3, [r7, #15]
 8003b7a:	7bfa      	ldrb	r2, [r7, #15]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d3b5      	bcc.n	8003af0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	603b      	str	r3, [r7, #0]
 8003b8a:	687e      	ldr	r6, [r7, #4]
 8003b8c:	466d      	mov	r5, sp
 8003b8e:	f106 0410 	add.w	r4, r6, #16
 8003b92:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003b98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003b9a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003b9e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003ba2:	1d33      	adds	r3, r6, #4
 8003ba4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ba6:	6838      	ldr	r0, [r7, #0]
 8003ba8:	f002 fe86 	bl	80068b8 <USB_DevInit>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d005      	beq.n	8003bbe <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2202      	movs	r2, #2
 8003bb6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e00d      	b.n	8003bda <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2201      	movs	r2, #1
 8003bca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f003 ffd5 	bl	8007b82 <USB_DevDisconnect>

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3714      	adds	r7, #20
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003be2 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b084      	sub	sp, #16
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d101      	bne.n	8003bfe <HAL_PCD_Start+0x1c>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	e020      	b.n	8003c40 <HAL_PCD_Start+0x5e>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2201      	movs	r2, #1
 8003c02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d109      	bne.n	8003c22 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003c12:	2b01      	cmp	r3, #1
 8003c14:	d005      	beq.n	8003c22 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f002 fdd8 	bl	80067dc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4618      	mov	r0, r3
 8003c32:	f003 ff85 	bl	8007b40 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3710      	adds	r7, #16
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c48:	b590      	push	{r4, r7, lr}
 8003c4a:	b08d      	sub	sp, #52	; 0x34
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c56:	6a3b      	ldr	r3, [r7, #32]
 8003c58:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f004 f843 	bl	8007cea <USB_GetMode>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	f040 848a 	bne.w	8004580 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4618      	mov	r0, r3
 8003c72:	f003 ffa7 	bl	8007bc4 <USB_ReadInterrupts>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8480 	beq.w	800457e <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	0a1b      	lsrs	r3, r3, #8
 8003c88:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4618      	mov	r0, r3
 8003c98:	f003 ff94 	bl	8007bc4 <USB_ReadInterrupts>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d107      	bne.n	8003cb6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	695a      	ldr	r2, [r3, #20]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f002 0202 	and.w	r2, r2, #2
 8003cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4618      	mov	r0, r3
 8003cbc:	f003 ff82 	bl	8007bc4 <USB_ReadInterrupts>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	f003 0310 	and.w	r3, r3, #16
 8003cc6:	2b10      	cmp	r3, #16
 8003cc8:	d161      	bne.n	8003d8e <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699a      	ldr	r2, [r3, #24]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f022 0210 	bic.w	r2, r2, #16
 8003cd8:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003cda:	6a3b      	ldr	r3, [r7, #32]
 8003cdc:	6a1b      	ldr	r3, [r3, #32]
 8003cde:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	f003 020f 	and.w	r2, r3, #15
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	00db      	lsls	r3, r3, #3
 8003cea:	4413      	add	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	4413      	add	r3, r2
 8003cf6:	3304      	adds	r3, #4
 8003cf8:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	0c5b      	lsrs	r3, r3, #17
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d124      	bne.n	8003d50 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d035      	beq.n	8003d7e <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	091b      	lsrs	r3, r3, #4
 8003d1a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d20:	b29b      	uxth	r3, r3
 8003d22:	461a      	mov	r2, r3
 8003d24:	6a38      	ldr	r0, [r7, #32]
 8003d26:	f003 fdb9 	bl	800789c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d2a:	697b      	ldr	r3, [r7, #20]
 8003d2c:	691a      	ldr	r2, [r3, #16]
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d36:	441a      	add	r2, r3
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	6a1a      	ldr	r2, [r3, #32]
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	091b      	lsrs	r3, r3, #4
 8003d44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d48:	441a      	add	r2, r3
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	621a      	str	r2, [r3, #32]
 8003d4e:	e016      	b.n	8003d7e <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	0c5b      	lsrs	r3, r3, #17
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	2b06      	cmp	r3, #6
 8003d5a:	d110      	bne.n	8003d7e <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d62:	2208      	movs	r2, #8
 8003d64:	4619      	mov	r1, r3
 8003d66:	6a38      	ldr	r0, [r7, #32]
 8003d68:	f003 fd98 	bl	800789c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	6a1a      	ldr	r2, [r3, #32]
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	091b      	lsrs	r3, r3, #4
 8003d74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d78:	441a      	add	r2, r3
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	699a      	ldr	r2, [r3, #24]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f042 0210 	orr.w	r2, r2, #16
 8003d8c:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f003 ff16 	bl	8007bc4 <USB_ReadInterrupts>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d9e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003da2:	f040 80a7 	bne.w	8003ef4 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003da6:	2300      	movs	r3, #0
 8003da8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4618      	mov	r0, r3
 8003db0:	f003 ff1b 	bl	8007bea <USB_ReadDevAllOutEpInterrupt>
 8003db4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003db6:	e099      	b.n	8003eec <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 808e 	beq.w	8003ee0 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dca:	b2d2      	uxtb	r2, r2
 8003dcc:	4611      	mov	r1, r2
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f003 ff3f 	bl	8007c52 <USB_ReadDevOutEPInterrupt>
 8003dd4:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f003 0301 	and.w	r3, r3, #1
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d00c      	beq.n	8003dfa <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dec:	461a      	mov	r2, r3
 8003dee:	2301      	movs	r3, #1
 8003df0:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003df2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 fec3 	bl	8004b80 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003dfa:	693b      	ldr	r3, [r7, #16]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d00c      	beq.n	8003e1e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e06:	015a      	lsls	r2, r3, #5
 8003e08:	69fb      	ldr	r3, [r7, #28]
 8003e0a:	4413      	add	r3, r2
 8003e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e10:	461a      	mov	r2, r3
 8003e12:	2308      	movs	r3, #8
 8003e14:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 ff99 	bl	8004d50 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	f003 0310 	and.w	r3, r3, #16
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d008      	beq.n	8003e3a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e34:	461a      	mov	r2, r3
 8003e36:	2310      	movs	r3, #16
 8003e38:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f003 0302 	and.w	r3, r3, #2
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d030      	beq.n	8003ea6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e44:	6a3b      	ldr	r3, [r7, #32]
 8003e46:	695b      	ldr	r3, [r3, #20]
 8003e48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4c:	2b80      	cmp	r3, #128	; 0x80
 8003e4e:	d109      	bne.n	8003e64 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	69fa      	ldr	r2, [r7, #28]
 8003e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e62:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e66:	4613      	mov	r3, r2
 8003e68:	00db      	lsls	r3, r3, #3
 8003e6a:	4413      	add	r3, r2
 8003e6c:	009b      	lsls	r3, r3, #2
 8003e6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	4413      	add	r3, r2
 8003e76:	3304      	adds	r3, #4
 8003e78:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	78db      	ldrb	r3, [r3, #3]
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d108      	bne.n	8003e94 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	2200      	movs	r2, #0
 8003e86:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f006 fac2 	bl	800a418 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	69fb      	ldr	r3, [r7, #28]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	f003 0320 	and.w	r3, r3, #32
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d008      	beq.n	8003ec2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	015a      	lsls	r2, r3, #5
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	4413      	add	r3, r2
 8003eb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	2320      	movs	r3, #32
 8003ec0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d009      	beq.n	8003ee0 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed8:	461a      	mov	r2, r3
 8003eda:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003ede:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ee8:	085b      	lsrs	r3, r3, #1
 8003eea:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f47f af62 	bne.w	8003db8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f003 fe63 	bl	8007bc4 <USB_ReadInterrupts>
 8003efe:	4603      	mov	r3, r0
 8003f00:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f04:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f08:	f040 80db 	bne.w	80040c2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f003 fe84 	bl	8007c1e <USB_ReadDevAllInEpInterrupt>
 8003f16:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f1c:	e0cd      	b.n	80040ba <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 80c2 	beq.w	80040ae <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	4611      	mov	r1, r2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f003 feaa 	bl	8007c8e <USB_ReadDevInEPInterrupt>
 8003f3a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d057      	beq.n	8003ff6 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f5a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	43db      	mvns	r3, r3
 8003f60:	69f9      	ldr	r1, [r7, #28]
 8003f62:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f66:	4013      	ands	r3, r2
 8003f68:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6c:	015a      	lsls	r2, r3, #5
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	4413      	add	r3, r2
 8003f72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f76:	461a      	mov	r2, r3
 8003f78:	2301      	movs	r3, #1
 8003f7a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d132      	bne.n	8003fea <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f88:	4613      	mov	r3, r2
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4413      	add	r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	334c      	adds	r3, #76	; 0x4c
 8003f94:	6819      	ldr	r1, [r3, #0]
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f9a:	4613      	mov	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	4413      	add	r3, r2
 8003fa0:	009b      	lsls	r3, r3, #2
 8003fa2:	4403      	add	r3, r0
 8003fa4:	3348      	adds	r3, #72	; 0x48
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	4419      	add	r1, r3
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fae:	4613      	mov	r3, r2
 8003fb0:	00db      	lsls	r3, r3, #3
 8003fb2:	4413      	add	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4403      	add	r3, r0
 8003fb8:	334c      	adds	r3, #76	; 0x4c
 8003fba:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d113      	bne.n	8003fea <HAL_PCD_IRQHandler+0x3a2>
 8003fc2:	6879      	ldr	r1, [r7, #4]
 8003fc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	4413      	add	r3, r2
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	440b      	add	r3, r1
 8003fd0:	3354      	adds	r3, #84	; 0x54
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d108      	bne.n	8003fea <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	6818      	ldr	r0, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003fe2:	461a      	mov	r2, r3
 8003fe4:	2101      	movs	r1, #1
 8003fe6:	f003 feb1 	bl	8007d4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	4619      	mov	r1, r3
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f006 f98c 	bl	800a30e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f003 0308 	and.w	r3, r3, #8
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d008      	beq.n	8004012 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	69fb      	ldr	r3, [r7, #28]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800400c:	461a      	mov	r2, r3
 800400e:	2308      	movs	r3, #8
 8004010:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b00      	cmp	r3, #0
 800401a:	d008      	beq.n	800402e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800401c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004028:	461a      	mov	r2, r3
 800402a:	2310      	movs	r3, #16
 800402c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800402e:	693b      	ldr	r3, [r7, #16]
 8004030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004034:	2b00      	cmp	r3, #0
 8004036:	d008      	beq.n	800404a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	015a      	lsls	r2, r3, #5
 800403c:	69fb      	ldr	r3, [r7, #28]
 800403e:	4413      	add	r3, r2
 8004040:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004044:	461a      	mov	r2, r3
 8004046:	2340      	movs	r3, #64	; 0x40
 8004048:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800404a:	693b      	ldr	r3, [r7, #16]
 800404c:	f003 0302 	and.w	r3, r3, #2
 8004050:	2b00      	cmp	r3, #0
 8004052:	d023      	beq.n	800409c <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004054:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004056:	6a38      	ldr	r0, [r7, #32]
 8004058:	f002 fd92 	bl	8006b80 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800405c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800405e:	4613      	mov	r3, r2
 8004060:	00db      	lsls	r3, r3, #3
 8004062:	4413      	add	r3, r2
 8004064:	009b      	lsls	r3, r3, #2
 8004066:	3338      	adds	r3, #56	; 0x38
 8004068:	687a      	ldr	r2, [r7, #4]
 800406a:	4413      	add	r3, r2
 800406c:	3304      	adds	r3, #4
 800406e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	78db      	ldrb	r3, [r3, #3]
 8004074:	2b01      	cmp	r3, #1
 8004076:	d108      	bne.n	800408a <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	2200      	movs	r2, #0
 800407c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	b2db      	uxtb	r3, r3
 8004082:	4619      	mov	r1, r3
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f006 f9d9 	bl	800a43c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004096:	461a      	mov	r2, r3
 8004098:	2302      	movs	r3, #2
 800409a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d003      	beq.n	80040ae <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80040a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 fcdb 	bl	8004a64 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80040ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b0:	3301      	adds	r3, #1
 80040b2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b6:	085b      	lsrs	r3, r3, #1
 80040b8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f47f af2e 	bne.w	8003f1e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	4618      	mov	r0, r3
 80040c8:	f003 fd7c 	bl	8007bc4 <USB_ReadInterrupts>
 80040cc:	4603      	mov	r3, r0
 80040ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040d6:	d122      	bne.n	800411e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	69fa      	ldr	r2, [r7, #28]
 80040e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80040e6:	f023 0301 	bic.w	r3, r3, #1
 80040ea:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d108      	bne.n	8004108 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80040fe:	2100      	movs	r1, #0
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 fec3 	bl	8004e8c <HAL_PCDEx_LPM_Callback>
 8004106:	e002      	b.n	800410e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f006 f977 	bl	800a3fc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	695a      	ldr	r2, [r3, #20]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800411c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f003 fd4e 	bl	8007bc4 <USB_ReadInterrupts>
 8004128:	4603      	mov	r3, r0
 800412a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800412e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004132:	d112      	bne.n	800415a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	f003 0301 	and.w	r3, r3, #1
 8004140:	2b01      	cmp	r3, #1
 8004142:	d102      	bne.n	800414a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f006 f933 	bl	800a3b0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	695a      	ldr	r2, [r3, #20]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004158:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4618      	mov	r0, r3
 8004160:	f003 fd30 	bl	8007bc4 <USB_ReadInterrupts>
 8004164:	4603      	mov	r3, r0
 8004166:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800416a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800416e:	f040 80b7 	bne.w	80042e0 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	69fa      	ldr	r2, [r7, #28]
 800417c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004180:	f023 0301 	bic.w	r3, r3, #1
 8004184:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2110      	movs	r1, #16
 800418c:	4618      	mov	r0, r3
 800418e:	f002 fcf7 	bl	8006b80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004192:	2300      	movs	r3, #0
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004196:	e046      	b.n	8004226 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a4:	461a      	mov	r2, r3
 80041a6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041aa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041bc:	0151      	lsls	r1, r2, #5
 80041be:	69fa      	ldr	r2, [r7, #28]
 80041c0:	440a      	add	r2, r1
 80041c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041ca:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80041cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d8:	461a      	mov	r2, r3
 80041da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041de:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f0:	0151      	lsls	r1, r2, #5
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	440a      	add	r2, r1
 80041f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004210:	0151      	lsls	r1, r2, #5
 8004212:	69fa      	ldr	r2, [r7, #28]
 8004214:	440a      	add	r2, r1
 8004216:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800421a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800421e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004222:	3301      	adds	r3, #1
 8004224:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800422c:	429a      	cmp	r2, r3
 800422e:	d3b3      	bcc.n	8004198 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800423e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004242:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	2b00      	cmp	r3, #0
 800424a:	d016      	beq.n	800427a <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004252:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004256:	69fa      	ldr	r2, [r7, #28]
 8004258:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800425c:	f043 030b 	orr.w	r3, r3, #11
 8004260:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004272:	f043 030b 	orr.w	r3, r3, #11
 8004276:	6453      	str	r3, [r2, #68]	; 0x44
 8004278:	e015      	b.n	80042a6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004280:	695b      	ldr	r3, [r3, #20]
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004288:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800428c:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004290:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004292:	69fb      	ldr	r3, [r7, #28]
 8004294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	69fa      	ldr	r2, [r7, #28]
 800429c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a0:	f043 030b 	orr.w	r3, r3, #11
 80042a4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80042a6:	69fb      	ldr	r3, [r7, #28]
 80042a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042b4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042b8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6818      	ldr	r0, [r3, #0]
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	691b      	ldr	r3, [r3, #16]
 80042c2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042ca:	461a      	mov	r2, r3
 80042cc:	f003 fd3e 	bl	8007d4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	695a      	ldr	r2, [r3, #20]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80042de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f003 fc6d 	bl	8007bc4 <USB_ReadInterrupts>
 80042ea:	4603      	mov	r3, r0
 80042ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042f4:	d124      	bne.n	8004340 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4618      	mov	r0, r3
 80042fc:	f003 fd03 	bl	8007d06 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f002 fcb8 	bl	8006c7a <USB_GetDevSpeed>
 800430a:	4603      	mov	r3, r0
 800430c:	461a      	mov	r2, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681c      	ldr	r4, [r3, #0]
 8004316:	f001 f9e9 	bl	80056ec <HAL_RCC_GetHCLKFreq>
 800431a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004320:	b2db      	uxtb	r3, r3
 8004322:	461a      	mov	r2, r3
 8004324:	4620      	mov	r0, r4
 8004326:	f002 f9b7 	bl	8006698 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f006 f817 	bl	800a35e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695a      	ldr	r2, [r3, #20]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800433e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4618      	mov	r0, r3
 8004346:	f003 fc3d 	bl	8007bc4 <USB_ReadInterrupts>
 800434a:	4603      	mov	r3, r0
 800434c:	f003 0308 	and.w	r3, r3, #8
 8004350:	2b08      	cmp	r3, #8
 8004352:	d10a      	bne.n	800436a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004354:	6878      	ldr	r0, [r7, #4]
 8004356:	f005 fff4 	bl	800a342 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	695a      	ldr	r2, [r3, #20]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f002 0208 	and.w	r2, r2, #8
 8004368:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4618      	mov	r0, r3
 8004370:	f003 fc28 	bl	8007bc4 <USB_ReadInterrupts>
 8004374:	4603      	mov	r3, r0
 8004376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800437a:	2b80      	cmp	r3, #128	; 0x80
 800437c:	d122      	bne.n	80043c4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800437e:	6a3b      	ldr	r3, [r7, #32]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004386:	6a3b      	ldr	r3, [r7, #32]
 8004388:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800438a:	2301      	movs	r3, #1
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
 800438e:	e014      	b.n	80043ba <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004390:	6879      	ldr	r1, [r7, #4]
 8004392:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004394:	4613      	mov	r3, r2
 8004396:	00db      	lsls	r3, r3, #3
 8004398:	4413      	add	r3, r2
 800439a:	009b      	lsls	r3, r3, #2
 800439c:	440b      	add	r3, r1
 800439e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d105      	bne.n	80043b4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	b2db      	uxtb	r3, r3
 80043ac:	4619      	mov	r1, r3
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f000 fb27 	bl	8004a02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b6:	3301      	adds	r3, #1
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c0:	429a      	cmp	r2, r3
 80043c2:	d3e5      	bcc.n	8004390 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4618      	mov	r0, r3
 80043ca:	f003 fbfb 	bl	8007bc4 <USB_ReadInterrupts>
 80043ce:	4603      	mov	r3, r0
 80043d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043d8:	d13b      	bne.n	8004452 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043da:	2301      	movs	r3, #1
 80043dc:	627b      	str	r3, [r7, #36]	; 0x24
 80043de:	e02b      	b.n	8004438 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80043f0:	6879      	ldr	r1, [r7, #4]
 80043f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f4:	4613      	mov	r3, r2
 80043f6:	00db      	lsls	r3, r3, #3
 80043f8:	4413      	add	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	440b      	add	r3, r1
 80043fe:	3340      	adds	r3, #64	; 0x40
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	2b01      	cmp	r3, #1
 8004404:	d115      	bne.n	8004432 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004406:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004408:	2b00      	cmp	r3, #0
 800440a:	da12      	bge.n	8004432 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800440c:	6879      	ldr	r1, [r7, #4]
 800440e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004410:	4613      	mov	r3, r2
 8004412:	00db      	lsls	r3, r3, #3
 8004414:	4413      	add	r3, r2
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	333f      	adds	r3, #63	; 0x3f
 800441c:	2201      	movs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004422:	b2db      	uxtb	r3, r3
 8004424:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004428:	b2db      	uxtb	r3, r3
 800442a:	4619      	mov	r1, r3
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f000 fae8 	bl	8004a02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004434:	3301      	adds	r3, #1
 8004436:	627b      	str	r3, [r7, #36]	; 0x24
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443e:	429a      	cmp	r2, r3
 8004440:	d3ce      	bcc.n	80043e0 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004450:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f003 fbb4 	bl	8007bc4 <USB_ReadInterrupts>
 800445c:	4603      	mov	r3, r0
 800445e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004462:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004466:	d155      	bne.n	8004514 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004468:	2301      	movs	r3, #1
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
 800446c:	e045      	b.n	80044fa <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	015a      	lsls	r2, r3, #5
 8004472:	69fb      	ldr	r3, [r7, #28]
 8004474:	4413      	add	r3, r2
 8004476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004482:	4613      	mov	r3, r2
 8004484:	00db      	lsls	r3, r3, #3
 8004486:	4413      	add	r3, r2
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	440b      	add	r3, r1
 800448c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	2b01      	cmp	r3, #1
 8004494:	d12e      	bne.n	80044f4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004496:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004498:	2b00      	cmp	r3, #0
 800449a:	da2b      	bge.n	80044f4 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80044a8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d121      	bne.n	80044f4 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80044b0:	6879      	ldr	r1, [r7, #4]
 80044b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80044c2:	2201      	movs	r2, #1
 80044c4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044c6:	6a3b      	ldr	r3, [r7, #32]
 80044c8:	699b      	ldr	r3, [r3, #24]
 80044ca:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80044ce:	6a3b      	ldr	r3, [r7, #32]
 80044d0:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80044d2:	6a3b      	ldr	r3, [r7, #32]
 80044d4:	695b      	ldr	r3, [r3, #20]
 80044d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d10a      	bne.n	80044f4 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80044f0:	6053      	str	r3, [r2, #4]
            break;
 80044f2:	e007      	b.n	8004504 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	3301      	adds	r3, #1
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004500:	429a      	cmp	r2, r3
 8004502:	d3b4      	bcc.n	800446e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	695a      	ldr	r2, [r3, #20]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004512:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f003 fb53 	bl	8007bc4 <USB_ReadInterrupts>
 800451e:	4603      	mov	r3, r0
 8004520:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004524:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004528:	d10a      	bne.n	8004540 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f005 ff98 	bl	800a460 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	695a      	ldr	r2, [r3, #20]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800453e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4618      	mov	r0, r3
 8004546:	f003 fb3d 	bl	8007bc4 <USB_ReadInterrupts>
 800454a:	4603      	mov	r3, r0
 800454c:	f003 0304 	and.w	r3, r3, #4
 8004550:	2b04      	cmp	r3, #4
 8004552:	d115      	bne.n	8004580 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f005 ff88 	bl	800a47c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	6859      	ldr	r1, [r3, #4]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	69ba      	ldr	r2, [r7, #24]
 8004578:	430a      	orrs	r2, r1
 800457a:	605a      	str	r2, [r3, #4]
 800457c:	e000      	b.n	8004580 <HAL_PCD_IRQHandler+0x938>
      return;
 800457e:	bf00      	nop
    }
  }
}
 8004580:	3734      	adds	r7, #52	; 0x34
 8004582:	46bd      	mov	sp, r7
 8004584:	bd90      	pop	{r4, r7, pc}

08004586 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b082      	sub	sp, #8
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
 800458e:	460b      	mov	r3, r1
 8004590:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_PCD_SetAddress+0x1a>
 800459c:	2302      	movs	r3, #2
 800459e:	e013      	b.n	80045c8 <HAL_PCD_SetAddress+0x42>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	78fa      	ldrb	r2, [r7, #3]
 80045ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	78fa      	ldrb	r2, [r7, #3]
 80045b6:	4611      	mov	r1, r2
 80045b8:	4618      	mov	r0, r3
 80045ba:	f003 fa9b 	bl	8007af4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	3708      	adds	r7, #8
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
 80045d8:	4608      	mov	r0, r1
 80045da:	4611      	mov	r1, r2
 80045dc:	461a      	mov	r2, r3
 80045de:	4603      	mov	r3, r0
 80045e0:	70fb      	strb	r3, [r7, #3]
 80045e2:	460b      	mov	r3, r1
 80045e4:	803b      	strh	r3, [r7, #0]
 80045e6:	4613      	mov	r3, r2
 80045e8:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80045ea:	2300      	movs	r3, #0
 80045ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80045ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	da0f      	bge.n	8004616 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80045f6:	78fb      	ldrb	r3, [r7, #3]
 80045f8:	f003 020f 	and.w	r2, r3, #15
 80045fc:	4613      	mov	r3, r2
 80045fe:	00db      	lsls	r3, r3, #3
 8004600:	4413      	add	r3, r2
 8004602:	009b      	lsls	r3, r3, #2
 8004604:	3338      	adds	r3, #56	; 0x38
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	4413      	add	r3, r2
 800460a:	3304      	adds	r3, #4
 800460c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2201      	movs	r2, #1
 8004612:	705a      	strb	r2, [r3, #1]
 8004614:	e00f      	b.n	8004636 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004616:	78fb      	ldrb	r3, [r7, #3]
 8004618:	f003 020f 	and.w	r2, r3, #15
 800461c:	4613      	mov	r3, r2
 800461e:	00db      	lsls	r3, r3, #3
 8004620:	4413      	add	r3, r2
 8004622:	009b      	lsls	r3, r3, #2
 8004624:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	4413      	add	r3, r2
 800462c:	3304      	adds	r3, #4
 800462e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004636:	78fb      	ldrb	r3, [r7, #3]
 8004638:	f003 030f 	and.w	r3, r3, #15
 800463c:	b2da      	uxtb	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004642:	883a      	ldrh	r2, [r7, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	78ba      	ldrb	r2, [r7, #2]
 800464c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	785b      	ldrb	r3, [r3, #1]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d004      	beq.n	8004660 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	b29a      	uxth	r2, r3
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004660:	78bb      	ldrb	r3, [r7, #2]
 8004662:	2b02      	cmp	r3, #2
 8004664:	d102      	bne.n	800466c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2200      	movs	r2, #0
 800466a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004672:	2b01      	cmp	r3, #1
 8004674:	d101      	bne.n	800467a <HAL_PCD_EP_Open+0xaa>
 8004676:	2302      	movs	r3, #2
 8004678:	e00e      	b.n	8004698 <HAL_PCD_EP_Open+0xc8>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68f9      	ldr	r1, [r7, #12]
 8004688:	4618      	mov	r0, r3
 800468a:	f002 fb1b 	bl	8006cc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004696:	7afb      	ldrb	r3, [r7, #11]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b084      	sub	sp, #16
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
 80046a8:	460b      	mov	r3, r1
 80046aa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	da0f      	bge.n	80046d4 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046b4:	78fb      	ldrb	r3, [r7, #3]
 80046b6:	f003 020f 	and.w	r2, r3, #15
 80046ba:	4613      	mov	r3, r2
 80046bc:	00db      	lsls	r3, r3, #3
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	3338      	adds	r3, #56	; 0x38
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	4413      	add	r3, r2
 80046c8:	3304      	adds	r3, #4
 80046ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	705a      	strb	r2, [r3, #1]
 80046d2:	e00f      	b.n	80046f4 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	f003 020f 	and.w	r2, r3, #15
 80046da:	4613      	mov	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	4413      	add	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	4413      	add	r3, r2
 80046ea:	3304      	adds	r3, #4
 80046ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	f003 030f 	and.w	r3, r3, #15
 80046fa:	b2da      	uxtb	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004706:	2b01      	cmp	r3, #1
 8004708:	d101      	bne.n	800470e <HAL_PCD_EP_Close+0x6e>
 800470a:	2302      	movs	r3, #2
 800470c:	e00e      	b.n	800472c <HAL_PCD_EP_Close+0x8c>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2201      	movs	r2, #1
 8004712:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	68f9      	ldr	r1, [r7, #12]
 800471c:	4618      	mov	r0, r3
 800471e:	f002 fb59 	bl	8006dd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b086      	sub	sp, #24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	607a      	str	r2, [r7, #4]
 800473e:	603b      	str	r3, [r7, #0]
 8004740:	460b      	mov	r3, r1
 8004742:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004744:	7afb      	ldrb	r3, [r7, #11]
 8004746:	f003 020f 	and.w	r2, r3, #15
 800474a:	4613      	mov	r3, r2
 800474c:	00db      	lsls	r3, r3, #3
 800474e:	4413      	add	r3, r2
 8004750:	009b      	lsls	r3, r3, #2
 8004752:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004756:	68fa      	ldr	r2, [r7, #12]
 8004758:	4413      	add	r3, r2
 800475a:	3304      	adds	r3, #4
 800475c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	2200      	movs	r2, #0
 800476e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2200      	movs	r2, #0
 8004774:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004776:	7afb      	ldrb	r3, [r7, #11]
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	b2da      	uxtb	r2, r3
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	691b      	ldr	r3, [r3, #16]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d102      	bne.n	8004790 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	697b      	ldr	r3, [r7, #20]
 800478e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004790:	7afb      	ldrb	r3, [r7, #11]
 8004792:	f003 030f 	and.w	r3, r3, #15
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	6818      	ldr	r0, [r3, #0]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	461a      	mov	r2, r3
 80047a6:	6979      	ldr	r1, [r7, #20]
 80047a8:	f002 fe38 	bl	800741c <USB_EP0StartXfer>
 80047ac:	e008      	b.n	80047c0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6818      	ldr	r0, [r3, #0]
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	461a      	mov	r2, r3
 80047ba:	6979      	ldr	r1, [r7, #20]
 80047bc:	f002 fbe6 	bl	8006f8c <USB_EPStartXfer>
  }

  return HAL_OK;
 80047c0:	2300      	movs	r3, #0
}
 80047c2:	4618      	mov	r0, r3
 80047c4:	3718      	adds	r7, #24
 80047c6:	46bd      	mov	sp, r7
 80047c8:	bd80      	pop	{r7, pc}

080047ca <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80047d6:	78fb      	ldrb	r3, [r7, #3]
 80047d8:	f003 020f 	and.w	r2, r3, #15
 80047dc:	6879      	ldr	r1, [r7, #4]
 80047de:	4613      	mov	r3, r2
 80047e0:	00db      	lsls	r3, r3, #3
 80047e2:	4413      	add	r3, r2
 80047e4:	009b      	lsls	r3, r3, #2
 80047e6:	440b      	add	r3, r1
 80047e8:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80047ec:	681b      	ldr	r3, [r3, #0]
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f8:	4770      	bx	lr

080047fa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b086      	sub	sp, #24
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	607a      	str	r2, [r7, #4]
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	460b      	mov	r3, r1
 8004808:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800480a:	7afb      	ldrb	r3, [r7, #11]
 800480c:	f003 020f 	and.w	r2, r3, #15
 8004810:	4613      	mov	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	4413      	add	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	3338      	adds	r3, #56	; 0x38
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	4413      	add	r3, r2
 800481e:	3304      	adds	r3, #4
 8004820:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	2200      	movs	r2, #0
 8004832:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	2201      	movs	r2, #1
 8004838:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800483a:	7afb      	ldrb	r3, [r7, #11]
 800483c:	f003 030f 	and.w	r3, r3, #15
 8004840:	b2da      	uxtb	r2, r3
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d102      	bne.n	8004854 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004854:	7afb      	ldrb	r3, [r7, #11]
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	2b00      	cmp	r3, #0
 800485c:	d109      	bne.n	8004872 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6818      	ldr	r0, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	b2db      	uxtb	r3, r3
 8004868:	461a      	mov	r2, r3
 800486a:	6979      	ldr	r1, [r7, #20]
 800486c:	f002 fdd6 	bl	800741c <USB_EP0StartXfer>
 8004870:	e008      	b.n	8004884 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6818      	ldr	r0, [r3, #0]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	b2db      	uxtb	r3, r3
 800487c:	461a      	mov	r2, r3
 800487e:	6979      	ldr	r1, [r7, #20]
 8004880:	f002 fb84 	bl	8006f8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800488e:	b580      	push	{r7, lr}
 8004890:	b084      	sub	sp, #16
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	460b      	mov	r3, r1
 8004898:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800489a:	78fb      	ldrb	r3, [r7, #3]
 800489c:	f003 020f 	and.w	r2, r3, #15
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	429a      	cmp	r2, r3
 80048a6:	d901      	bls.n	80048ac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048a8:	2301      	movs	r3, #1
 80048aa:	e050      	b.n	800494e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	da0f      	bge.n	80048d4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	f003 020f 	and.w	r2, r3, #15
 80048ba:	4613      	mov	r3, r2
 80048bc:	00db      	lsls	r3, r3, #3
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	3338      	adds	r3, #56	; 0x38
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	4413      	add	r3, r2
 80048c8:	3304      	adds	r3, #4
 80048ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2201      	movs	r2, #1
 80048d0:	705a      	strb	r2, [r3, #1]
 80048d2:	e00d      	b.n	80048f0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80048d4:	78fa      	ldrb	r2, [r7, #3]
 80048d6:	4613      	mov	r3, r2
 80048d8:	00db      	lsls	r3, r3, #3
 80048da:	4413      	add	r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	4413      	add	r3, r2
 80048e6:	3304      	adds	r3, #4
 80048e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2201      	movs	r2, #1
 80048f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80048f6:	78fb      	ldrb	r3, [r7, #3]
 80048f8:	f003 030f 	and.w	r3, r3, #15
 80048fc:	b2da      	uxtb	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004908:	2b01      	cmp	r3, #1
 800490a:	d101      	bne.n	8004910 <HAL_PCD_EP_SetStall+0x82>
 800490c:	2302      	movs	r3, #2
 800490e:	e01e      	b.n	800494e <HAL_PCD_EP_SetStall+0xc0>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68f9      	ldr	r1, [r7, #12]
 800491e:	4618      	mov	r0, r3
 8004920:	f003 f814 	bl	800794c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	f003 030f 	and.w	r3, r3, #15
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10a      	bne.n	8004944 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	b2d9      	uxtb	r1, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800493e:	461a      	mov	r2, r3
 8004940:	f003 fa04 	bl	8007d4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2200      	movs	r2, #0
 8004948:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b084      	sub	sp, #16
 800495a:	af00      	add	r7, sp, #0
 800495c:	6078      	str	r0, [r7, #4]
 800495e:	460b      	mov	r3, r1
 8004960:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004962:	78fb      	ldrb	r3, [r7, #3]
 8004964:	f003 020f 	and.w	r2, r3, #15
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	429a      	cmp	r2, r3
 800496e:	d901      	bls.n	8004974 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004970:	2301      	movs	r3, #1
 8004972:	e042      	b.n	80049fa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004974:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004978:	2b00      	cmp	r3, #0
 800497a:	da0f      	bge.n	800499c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800497c:	78fb      	ldrb	r3, [r7, #3]
 800497e:	f003 020f 	and.w	r2, r3, #15
 8004982:	4613      	mov	r3, r2
 8004984:	00db      	lsls	r3, r3, #3
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	3338      	adds	r3, #56	; 0x38
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	4413      	add	r3, r2
 8004990:	3304      	adds	r3, #4
 8004992:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2201      	movs	r2, #1
 8004998:	705a      	strb	r2, [r3, #1]
 800499a:	e00f      	b.n	80049bc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	f003 020f 	and.w	r2, r3, #15
 80049a2:	4613      	mov	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	4413      	add	r3, r2
 80049b2:	3304      	adds	r3, #4
 80049b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	2200      	movs	r2, #0
 80049ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049c2:	78fb      	ldrb	r3, [r7, #3]
 80049c4:	f003 030f 	and.w	r3, r3, #15
 80049c8:	b2da      	uxtb	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_PCD_EP_ClrStall+0x86>
 80049d8:	2302      	movs	r3, #2
 80049da:	e00e      	b.n	80049fa <HAL_PCD_EP_ClrStall+0xa4>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68f9      	ldr	r1, [r7, #12]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f003 f81c 	bl	8007a28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}

08004a02 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a02:	b580      	push	{r7, lr}
 8004a04:	b084      	sub	sp, #16
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
 8004a0a:	460b      	mov	r3, r1
 8004a0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004a0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	da0c      	bge.n	8004a30 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a16:	78fb      	ldrb	r3, [r7, #3]
 8004a18:	f003 020f 	and.w	r2, r3, #15
 8004a1c:	4613      	mov	r3, r2
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4413      	add	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	3338      	adds	r3, #56	; 0x38
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	4413      	add	r3, r2
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	60fb      	str	r3, [r7, #12]
 8004a2e:	e00c      	b.n	8004a4a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	f003 020f 	and.w	r2, r3, #15
 8004a36:	4613      	mov	r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	4413      	add	r3, r2
 8004a46:	3304      	adds	r3, #4
 8004a48:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68f9      	ldr	r1, [r7, #12]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f002 fe3b 	bl	80076cc <USB_EPStopXfer>
 8004a56:	4603      	mov	r3, r0
 8004a58:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a5a:	7afb      	ldrb	r3, [r7, #11]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b08a      	sub	sp, #40	; 0x28
 8004a68:	af02      	add	r7, sp, #8
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004a78:	683a      	ldr	r2, [r7, #0]
 8004a7a:	4613      	mov	r3, r2
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	4413      	add	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	3338      	adds	r3, #56	; 0x38
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	4413      	add	r3, r2
 8004a88:	3304      	adds	r3, #4
 8004a8a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	6a1a      	ldr	r2, [r3, #32]
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	699b      	ldr	r3, [r3, #24]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	d901      	bls.n	8004a9c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	e06c      	b.n	8004b76 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	699a      	ldr	r2, [r3, #24]
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6a1b      	ldr	r3, [r3, #32]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	68db      	ldr	r3, [r3, #12]
 8004aac:	69fa      	ldr	r2, [r7, #28]
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d902      	bls.n	8004ab8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	3303      	adds	r3, #3
 8004abc:	089b      	lsrs	r3, r3, #2
 8004abe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ac0:	e02b      	b.n	8004b1a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	699a      	ldr	r2, [r3, #24]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	6a1b      	ldr	r3, [r3, #32]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	429a      	cmp	r2, r3
 8004ad6:	d902      	bls.n	8004ade <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	3303      	adds	r3, #3
 8004ae2:	089b      	lsrs	r3, r3, #2
 8004ae4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6919      	ldr	r1, [r3, #16]
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	b2da      	uxtb	r2, r3
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004af6:	b2db      	uxtb	r3, r3
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	4603      	mov	r3, r0
 8004afc:	6978      	ldr	r0, [r7, #20]
 8004afe:	f002 fe8f 	bl	8007820 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	691a      	ldr	r2, [r3, #16]
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	441a      	add	r2, r3
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6a1a      	ldr	r2, [r3, #32]
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	441a      	add	r2, r3
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	015a      	lsls	r2, r3, #5
 8004b1e:	693b      	ldr	r3, [r7, #16]
 8004b20:	4413      	add	r3, r2
 8004b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	429a      	cmp	r2, r3
 8004b2e:	d809      	bhi.n	8004b44 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	6a1a      	ldr	r2, [r3, #32]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d203      	bcs.n	8004b44 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	699b      	ldr	r3, [r3, #24]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d1be      	bne.n	8004ac2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	699a      	ldr	r2, [r3, #24]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	6a1b      	ldr	r3, [r3, #32]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d811      	bhi.n	8004b74 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	f003 030f 	and.w	r3, r3, #15
 8004b56:	2201      	movs	r2, #1
 8004b58:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	6939      	ldr	r1, [r7, #16]
 8004b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b70:	4013      	ands	r3, r2
 8004b72:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004b74:	2300      	movs	r3, #0
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3720      	adds	r7, #32
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
	...

08004b80 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b088      	sub	sp, #32
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
 8004b88:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b90:	69fb      	ldr	r3, [r7, #28]
 8004b92:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004b94:	69fb      	ldr	r3, [r7, #28]
 8004b96:	333c      	adds	r3, #60	; 0x3c
 8004b98:	3304      	adds	r3, #4
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	015a      	lsls	r2, r3, #5
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d17b      	bne.n	8004cae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	f003 0308 	and.w	r3, r3, #8
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d015      	beq.n	8004bec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	4a61      	ldr	r2, [pc, #388]	; (8004d48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	f240 80b9 	bls.w	8004d3c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	f000 80b3 	beq.w	8004d3c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be2:	461a      	mov	r2, r3
 8004be4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004be8:	6093      	str	r3, [r2, #8]
 8004bea:	e0a7      	b.n	8004d3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d009      	beq.n	8004c0a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	015a      	lsls	r2, r3, #5
 8004bfa:	69bb      	ldr	r3, [r7, #24]
 8004bfc:	4413      	add	r3, r2
 8004bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c02:	461a      	mov	r2, r3
 8004c04:	2320      	movs	r3, #32
 8004c06:	6093      	str	r3, [r2, #8]
 8004c08:	e098      	b.n	8004d3c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f040 8093 	bne.w	8004d3c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	4a4b      	ldr	r2, [pc, #300]	; (8004d48 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d90f      	bls.n	8004c3e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00a      	beq.n	8004c3e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	69bb      	ldr	r3, [r7, #24]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c34:	461a      	mov	r2, r3
 8004c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c3a:	6093      	str	r3, [r2, #8]
 8004c3c:	e07e      	b.n	8004d3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004c3e:	683a      	ldr	r2, [r7, #0]
 8004c40:	4613      	mov	r3, r2
 8004c42:	00db      	lsls	r3, r3, #3
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	4413      	add	r3, r2
 8004c50:	3304      	adds	r3, #4
 8004c52:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	69da      	ldr	r2, [r3, #28]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	0159      	lsls	r1, r3, #5
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	440b      	add	r3, r1
 8004c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c6a:	1ad2      	subs	r2, r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d114      	bne.n	8004ca0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d109      	bne.n	8004c92 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6818      	ldr	r0, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004c88:	461a      	mov	r2, r3
 8004c8a:	2101      	movs	r1, #1
 8004c8c:	f003 f85e 	bl	8007d4c <USB_EP0_OutStart>
 8004c90:	e006      	b.n	8004ca0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	691a      	ldr	r2, [r3, #16]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6a1b      	ldr	r3, [r3, #32]
 8004c9a:	441a      	add	r2, r3
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	4619      	mov	r1, r3
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f005 fb16 	bl	800a2d8 <HAL_PCD_DataOutStageCallback>
 8004cac:	e046      	b.n	8004d3c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	4a26      	ldr	r2, [pc, #152]	; (8004d4c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d124      	bne.n	8004d00 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d00a      	beq.n	8004cd6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ccc:	461a      	mov	r2, r3
 8004cce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cd2:	6093      	str	r3, [r2, #8]
 8004cd4:	e032      	b.n	8004d3c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	f003 0320 	and.w	r3, r3, #32
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d008      	beq.n	8004cf2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cec:	461a      	mov	r2, r3
 8004cee:	2320      	movs	r3, #32
 8004cf0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	4619      	mov	r1, r3
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f005 faed 	bl	800a2d8 <HAL_PCD_DataOutStageCallback>
 8004cfe:	e01d      	b.n	8004d3c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d114      	bne.n	8004d30 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004d06:	6879      	ldr	r1, [r7, #4]
 8004d08:	683a      	ldr	r2, [r7, #0]
 8004d0a:	4613      	mov	r3, r2
 8004d0c:	00db      	lsls	r3, r3, #3
 8004d0e:	4413      	add	r3, r2
 8004d10:	009b      	lsls	r3, r3, #2
 8004d12:	440b      	add	r3, r1
 8004d14:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d108      	bne.n	8004d30 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6818      	ldr	r0, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d28:	461a      	mov	r2, r3
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	f003 f80e 	bl	8007d4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	4619      	mov	r1, r3
 8004d36:	6878      	ldr	r0, [r7, #4]
 8004d38:	f005 face 	bl	800a2d8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3720      	adds	r7, #32
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	4f54300a 	.word	0x4f54300a
 8004d4c:	4f54310a 	.word	0x4f54310a

08004d50 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b086      	sub	sp, #24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d60:	697b      	ldr	r3, [r7, #20]
 8004d62:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	333c      	adds	r3, #60	; 0x3c
 8004d68:	3304      	adds	r3, #4
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	4a15      	ldr	r2, [pc, #84]	; (8004dd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d90e      	bls.n	8004da4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d86:	68bb      	ldr	r3, [r7, #8]
 8004d88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d009      	beq.n	8004da4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	015a      	lsls	r2, r3, #5
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	4413      	add	r3, r2
 8004d98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004da2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f005 fa85 	bl	800a2b4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	4a0a      	ldr	r2, [pc, #40]	; (8004dd8 <PCD_EP_OutSetupPacket_int+0x88>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d90c      	bls.n	8004dcc <PCD_EP_OutSetupPacket_int+0x7c>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d108      	bne.n	8004dcc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6818      	ldr	r0, [r3, #0]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	2101      	movs	r1, #1
 8004dc8:	f002 ffc0 	bl	8007d4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004dcc:	2300      	movs	r3, #0
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3718      	adds	r7, #24
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	4f54300a 	.word	0x4f54300a

08004ddc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b085      	sub	sp, #20
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	70fb      	strb	r3, [r7, #3]
 8004de8:	4613      	mov	r3, r2
 8004dea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004df2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004df4:	78fb      	ldrb	r3, [r7, #3]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d107      	bne.n	8004e0a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004dfa:	883b      	ldrh	r3, [r7, #0]
 8004dfc:	0419      	lsls	r1, r3, #16
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	629a      	str	r2, [r3, #40]	; 0x28
 8004e08:	e028      	b.n	8004e5c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e10:	0c1b      	lsrs	r3, r3, #16
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	4413      	add	r3, r2
 8004e16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e18:	2300      	movs	r3, #0
 8004e1a:	73fb      	strb	r3, [r7, #15]
 8004e1c:	e00d      	b.n	8004e3a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	7bfb      	ldrb	r3, [r7, #15]
 8004e24:	3340      	adds	r3, #64	; 0x40
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	0c1b      	lsrs	r3, r3, #16
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	4413      	add	r3, r2
 8004e32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e34:	7bfb      	ldrb	r3, [r7, #15]
 8004e36:	3301      	adds	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
 8004e3a:	7bfa      	ldrb	r2, [r7, #15]
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	3b01      	subs	r3, #1
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d3ec      	bcc.n	8004e1e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e44:	883b      	ldrh	r3, [r7, #0]
 8004e46:	0418      	lsls	r0, r3, #16
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6819      	ldr	r1, [r3, #0]
 8004e4c:	78fb      	ldrb	r3, [r7, #3]
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	68ba      	ldr	r2, [r7, #8]
 8004e52:	4302      	orrs	r2, r0
 8004e54:	3340      	adds	r3, #64	; 0x40
 8004e56:	009b      	lsls	r3, r3, #2
 8004e58:	440b      	add	r3, r1
 8004e5a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e5c:	2300      	movs	r3, #0
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3714      	adds	r7, #20
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	460b      	mov	r3, r1
 8004e74:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	887a      	ldrh	r2, [r7, #2]
 8004e7c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	370c      	adds	r7, #12
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr

08004e8c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	460b      	mov	r3, r1
 8004e96:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e267      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d075      	beq.n	8004fae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ec2:	4b88      	ldr	r3, [pc, #544]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 030c 	and.w	r3, r3, #12
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d00c      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ece:	4b85      	ldr	r3, [pc, #532]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	d112      	bne.n	8004f00 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004eda:	4b82      	ldr	r3, [pc, #520]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ee2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ee6:	d10b      	bne.n	8004f00 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee8:	4b7e      	ldr	r3, [pc, #504]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d05b      	beq.n	8004fac <HAL_RCC_OscConfig+0x108>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d157      	bne.n	8004fac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e242      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f08:	d106      	bne.n	8004f18 <HAL_RCC_OscConfig+0x74>
 8004f0a:	4b76      	ldr	r3, [pc, #472]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a75      	ldr	r2, [pc, #468]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e01d      	b.n	8004f54 <HAL_RCC_OscConfig+0xb0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f20:	d10c      	bne.n	8004f3c <HAL_RCC_OscConfig+0x98>
 8004f22:	4b70      	ldr	r3, [pc, #448]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a6f      	ldr	r2, [pc, #444]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	4b6d      	ldr	r3, [pc, #436]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a6c      	ldr	r2, [pc, #432]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	e00b      	b.n	8004f54 <HAL_RCC_OscConfig+0xb0>
 8004f3c:	4b69      	ldr	r3, [pc, #420]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a68      	ldr	r2, [pc, #416]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	4b66      	ldr	r3, [pc, #408]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a65      	ldr	r2, [pc, #404]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d013      	beq.n	8004f84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5c:	f7fd f886 	bl	800206c <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f64:	f7fd f882 	bl	800206c <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b64      	cmp	r3, #100	; 0x64
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e207      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f76:	4b5b      	ldr	r3, [pc, #364]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0f0      	beq.n	8004f64 <HAL_RCC_OscConfig+0xc0>
 8004f82:	e014      	b.n	8004fae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f84:	f7fd f872 	bl	800206c <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f8c:	f7fd f86e 	bl	800206c <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b64      	cmp	r3, #100	; 0x64
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e1f3      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f9e:	4b51      	ldr	r3, [pc, #324]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1f0      	bne.n	8004f8c <HAL_RCC_OscConfig+0xe8>
 8004faa:	e000      	b.n	8004fae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d063      	beq.n	8005082 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fba:	4b4a      	ldr	r3, [pc, #296]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00b      	beq.n	8004fde <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fc6:	4b47      	ldr	r3, [pc, #284]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	d11c      	bne.n	800500c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fd2:	4b44      	ldr	r3, [pc, #272]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d116      	bne.n	800500c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fde:	4b41      	ldr	r3, [pc, #260]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d005      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x152>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d001      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e1c7      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff6:	4b3b      	ldr	r3, [pc, #236]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	4937      	ldr	r1, [pc, #220]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8005006:	4313      	orrs	r3, r2
 8005008:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800500a:	e03a      	b.n	8005082 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d020      	beq.n	8005056 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005014:	4b34      	ldr	r3, [pc, #208]	; (80050e8 <HAL_RCC_OscConfig+0x244>)
 8005016:	2201      	movs	r2, #1
 8005018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501a:	f7fd f827 	bl	800206c <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005022:	f7fd f823 	bl	800206c <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005030:	2303      	movs	r3, #3
 8005032:	e1a8      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005034:	4b2b      	ldr	r3, [pc, #172]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f0      	beq.n	8005022 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005040:	4b28      	ldr	r3, [pc, #160]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	4925      	ldr	r1, [pc, #148]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8005050:	4313      	orrs	r3, r2
 8005052:	600b      	str	r3, [r1, #0]
 8005054:	e015      	b.n	8005082 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005056:	4b24      	ldr	r3, [pc, #144]	; (80050e8 <HAL_RCC_OscConfig+0x244>)
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800505c:	f7fd f806 	bl	800206c <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005064:	f7fd f802 	bl	800206c <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e187      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005076:	4b1b      	ldr	r3, [pc, #108]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d036      	beq.n	80050fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d016      	beq.n	80050c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005096:	4b15      	ldr	r3, [pc, #84]	; (80050ec <HAL_RCC_OscConfig+0x248>)
 8005098:	2201      	movs	r2, #1
 800509a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800509c:	f7fc ffe6 	bl	800206c <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050a4:	f7fc ffe2 	bl	800206c <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050b2:	2303      	movs	r3, #3
 80050b4:	e167      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <HAL_RCC_OscConfig+0x240>)
 80050b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0f0      	beq.n	80050a4 <HAL_RCC_OscConfig+0x200>
 80050c2:	e01b      	b.n	80050fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050c4:	4b09      	ldr	r3, [pc, #36]	; (80050ec <HAL_RCC_OscConfig+0x248>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ca:	f7fc ffcf 	bl	800206c <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d0:	e00e      	b.n	80050f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050d2:	f7fc ffcb 	bl	800206c <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d907      	bls.n	80050f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e150      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 80050e4:	40023800 	.word	0x40023800
 80050e8:	42470000 	.word	0x42470000
 80050ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f0:	4b88      	ldr	r3, [pc, #544]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 80050f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1ea      	bne.n	80050d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 8097 	beq.w	8005238 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800510a:	2300      	movs	r3, #0
 800510c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800510e:	4b81      	ldr	r3, [pc, #516]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10f      	bne.n	800513a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800511a:	2300      	movs	r3, #0
 800511c:	60bb      	str	r3, [r7, #8]
 800511e:	4b7d      	ldr	r3, [pc, #500]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	4a7c      	ldr	r2, [pc, #496]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 8005124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005128:	6413      	str	r3, [r2, #64]	; 0x40
 800512a:	4b7a      	ldr	r3, [pc, #488]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800512e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005132:	60bb      	str	r3, [r7, #8]
 8005134:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005136:	2301      	movs	r3, #1
 8005138:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513a:	4b77      	ldr	r3, [pc, #476]	; (8005318 <HAL_RCC_OscConfig+0x474>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005142:	2b00      	cmp	r3, #0
 8005144:	d118      	bne.n	8005178 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005146:	4b74      	ldr	r3, [pc, #464]	; (8005318 <HAL_RCC_OscConfig+0x474>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a73      	ldr	r2, [pc, #460]	; (8005318 <HAL_RCC_OscConfig+0x474>)
 800514c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005150:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005152:	f7fc ff8b 	bl	800206c <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800515a:	f7fc ff87 	bl	800206c <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005168:	2303      	movs	r3, #3
 800516a:	e10c      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800516c:	4b6a      	ldr	r3, [pc, #424]	; (8005318 <HAL_RCC_OscConfig+0x474>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0f0      	beq.n	800515a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d106      	bne.n	800518e <HAL_RCC_OscConfig+0x2ea>
 8005180:	4b64      	ldr	r3, [pc, #400]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 8005182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005184:	4a63      	ldr	r2, [pc, #396]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 8005186:	f043 0301 	orr.w	r3, r3, #1
 800518a:	6713      	str	r3, [r2, #112]	; 0x70
 800518c:	e01c      	b.n	80051c8 <HAL_RCC_OscConfig+0x324>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2b05      	cmp	r3, #5
 8005194:	d10c      	bne.n	80051b0 <HAL_RCC_OscConfig+0x30c>
 8005196:	4b5f      	ldr	r3, [pc, #380]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519a:	4a5e      	ldr	r2, [pc, #376]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 800519c:	f043 0304 	orr.w	r3, r3, #4
 80051a0:	6713      	str	r3, [r2, #112]	; 0x70
 80051a2:	4b5c      	ldr	r3, [pc, #368]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 80051a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a6:	4a5b      	ldr	r2, [pc, #364]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	6713      	str	r3, [r2, #112]	; 0x70
 80051ae:	e00b      	b.n	80051c8 <HAL_RCC_OscConfig+0x324>
 80051b0:	4b58      	ldr	r3, [pc, #352]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 80051b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b4:	4a57      	ldr	r2, [pc, #348]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 80051b6:	f023 0301 	bic.w	r3, r3, #1
 80051ba:	6713      	str	r3, [r2, #112]	; 0x70
 80051bc:	4b55      	ldr	r3, [pc, #340]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 80051be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c0:	4a54      	ldr	r2, [pc, #336]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 80051c2:	f023 0304 	bic.w	r3, r3, #4
 80051c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d015      	beq.n	80051fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d0:	f7fc ff4c 	bl	800206c <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d6:	e00a      	b.n	80051ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d8:	f7fc ff48 	bl	800206c <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051ea:	2303      	movs	r3, #3
 80051ec:	e0cb      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ee:	4b49      	ldr	r3, [pc, #292]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 80051f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0ee      	beq.n	80051d8 <HAL_RCC_OscConfig+0x334>
 80051fa:	e014      	b.n	8005226 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051fc:	f7fc ff36 	bl	800206c <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005202:	e00a      	b.n	800521a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005204:	f7fc ff32 	bl	800206c <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005212:	4293      	cmp	r3, r2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e0b5      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800521a:	4b3e      	ldr	r3, [pc, #248]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 800521c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1ee      	bne.n	8005204 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005226:	7dfb      	ldrb	r3, [r7, #23]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d105      	bne.n	8005238 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800522c:	4b39      	ldr	r3, [pc, #228]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 800522e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005230:	4a38      	ldr	r2, [pc, #224]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 8005232:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005236:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 80a1 	beq.w	8005384 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005242:	4b34      	ldr	r3, [pc, #208]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 030c 	and.w	r3, r3, #12
 800524a:	2b08      	cmp	r3, #8
 800524c:	d05c      	beq.n	8005308 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	2b02      	cmp	r3, #2
 8005254:	d141      	bne.n	80052da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005256:	4b31      	ldr	r3, [pc, #196]	; (800531c <HAL_RCC_OscConfig+0x478>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800525c:	f7fc ff06 	bl	800206c <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005264:	f7fc ff02 	bl	800206c <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e087      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005276:	4b27      	ldr	r3, [pc, #156]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f0      	bne.n	8005264 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69da      	ldr	r2, [r3, #28]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	019b      	lsls	r3, r3, #6
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005298:	085b      	lsrs	r3, r3, #1
 800529a:	3b01      	subs	r3, #1
 800529c:	041b      	lsls	r3, r3, #16
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a4:	061b      	lsls	r3, r3, #24
 80052a6:	491b      	ldr	r1, [pc, #108]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052ac:	4b1b      	ldr	r3, [pc, #108]	; (800531c <HAL_RCC_OscConfig+0x478>)
 80052ae:	2201      	movs	r2, #1
 80052b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b2:	f7fc fedb 	bl	800206c <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ba:	f7fc fed7 	bl	800206c <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052c8:	2303      	movs	r3, #3
 80052ca:	e05c      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052cc:	4b11      	ldr	r3, [pc, #68]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f0      	beq.n	80052ba <HAL_RCC_OscConfig+0x416>
 80052d8:	e054      	b.n	8005384 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052da:	4b10      	ldr	r3, [pc, #64]	; (800531c <HAL_RCC_OscConfig+0x478>)
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e0:	f7fc fec4 	bl	800206c <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052e8:	f7fc fec0 	bl	800206c <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e045      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fa:	4b06      	ldr	r3, [pc, #24]	; (8005314 <HAL_RCC_OscConfig+0x470>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f0      	bne.n	80052e8 <HAL_RCC_OscConfig+0x444>
 8005306:	e03d      	b.n	8005384 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d107      	bne.n	8005320 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e038      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 8005314:	40023800 	.word	0x40023800
 8005318:	40007000 	.word	0x40007000
 800531c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005320:	4b1b      	ldr	r3, [pc, #108]	; (8005390 <HAL_RCC_OscConfig+0x4ec>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d028      	beq.n	8005380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005338:	429a      	cmp	r2, r3
 800533a:	d121      	bne.n	8005380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005346:	429a      	cmp	r2, r3
 8005348:	d11a      	bne.n	8005380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005350:	4013      	ands	r3, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005356:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005358:	4293      	cmp	r3, r2
 800535a:	d111      	bne.n	8005380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005366:	085b      	lsrs	r3, r3, #1
 8005368:	3b01      	subs	r3, #1
 800536a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800536c:	429a      	cmp	r2, r3
 800536e:	d107      	bne.n	8005380 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800537c:	429a      	cmp	r2, r3
 800537e:	d001      	beq.n	8005384 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e000      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005384:	2300      	movs	r3, #0
}
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	40023800 	.word	0x40023800

08005394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e0cc      	b.n	8005542 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053a8:	4b68      	ldr	r3, [pc, #416]	; (800554c <HAL_RCC_ClockConfig+0x1b8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 0307 	and.w	r3, r3, #7
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d90c      	bls.n	80053d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053b6:	4b65      	ldr	r3, [pc, #404]	; (800554c <HAL_RCC_ClockConfig+0x1b8>)
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053be:	4b63      	ldr	r3, [pc, #396]	; (800554c <HAL_RCC_ClockConfig+0x1b8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 0307 	and.w	r3, r3, #7
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d001      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0b8      	b.n	8005542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d020      	beq.n	800541e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053e8:	4b59      	ldr	r3, [pc, #356]	; (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	4a58      	ldr	r2, [pc, #352]	; (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d005      	beq.n	800540c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005400:	4b53      	ldr	r3, [pc, #332]	; (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	4a52      	ldr	r2, [pc, #328]	; (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800540a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800540c:	4b50      	ldr	r3, [pc, #320]	; (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	494d      	ldr	r1, [pc, #308]	; (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 800541a:	4313      	orrs	r3, r2
 800541c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d044      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d107      	bne.n	8005442 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005432:	4b47      	ldr	r3, [pc, #284]	; (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d119      	bne.n	8005472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e07f      	b.n	8005542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b02      	cmp	r3, #2
 8005448:	d003      	beq.n	8005452 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800544e:	2b03      	cmp	r3, #3
 8005450:	d107      	bne.n	8005462 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005452:	4b3f      	ldr	r3, [pc, #252]	; (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d109      	bne.n	8005472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	e06f      	b.n	8005542 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005462:	4b3b      	ldr	r3, [pc, #236]	; (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800546e:	2301      	movs	r3, #1
 8005470:	e067      	b.n	8005542 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005472:	4b37      	ldr	r3, [pc, #220]	; (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f023 0203 	bic.w	r2, r3, #3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	4934      	ldr	r1, [pc, #208]	; (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005480:	4313      	orrs	r3, r2
 8005482:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005484:	f7fc fdf2 	bl	800206c <HAL_GetTick>
 8005488:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548a:	e00a      	b.n	80054a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800548c:	f7fc fdee 	bl	800206c <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	f241 3288 	movw	r2, #5000	; 0x1388
 800549a:	4293      	cmp	r3, r2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e04f      	b.n	8005542 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054a2:	4b2b      	ldr	r3, [pc, #172]	; (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 020c 	and.w	r2, r3, #12
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d1eb      	bne.n	800548c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054b4:	4b25      	ldr	r3, [pc, #148]	; (800554c <HAL_RCC_ClockConfig+0x1b8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 0307 	and.w	r3, r3, #7
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d20c      	bcs.n	80054dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c2:	4b22      	ldr	r3, [pc, #136]	; (800554c <HAL_RCC_ClockConfig+0x1b8>)
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ca:	4b20      	ldr	r3, [pc, #128]	; (800554c <HAL_RCC_ClockConfig+0x1b8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 0307 	and.w	r3, r3, #7
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d001      	beq.n	80054dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054d8:	2301      	movs	r3, #1
 80054da:	e032      	b.n	8005542 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d008      	beq.n	80054fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054e8:	4b19      	ldr	r3, [pc, #100]	; (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4916      	ldr	r1, [pc, #88]	; (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0308 	and.w	r3, r3, #8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d009      	beq.n	800551a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005506:	4b12      	ldr	r3, [pc, #72]	; (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	490e      	ldr	r1, [pc, #56]	; (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	4313      	orrs	r3, r2
 8005518:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800551a:	f000 f821 	bl	8005560 <HAL_RCC_GetSysClockFreq>
 800551e:	4602      	mov	r2, r0
 8005520:	4b0b      	ldr	r3, [pc, #44]	; (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	091b      	lsrs	r3, r3, #4
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	490a      	ldr	r1, [pc, #40]	; (8005554 <HAL_RCC_ClockConfig+0x1c0>)
 800552c:	5ccb      	ldrb	r3, [r1, r3]
 800552e:	fa22 f303 	lsr.w	r3, r2, r3
 8005532:	4a09      	ldr	r2, [pc, #36]	; (8005558 <HAL_RCC_ClockConfig+0x1c4>)
 8005534:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005536:	4b09      	ldr	r3, [pc, #36]	; (800555c <HAL_RCC_ClockConfig+0x1c8>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f7fc fd52 	bl	8001fe4 <HAL_InitTick>

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40023c00 	.word	0x40023c00
 8005550:	40023800 	.word	0x40023800
 8005554:	0800d6d0 	.word	0x0800d6d0
 8005558:	20000040 	.word	0x20000040
 800555c:	20000044 	.word	0x20000044

08005560 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005564:	b090      	sub	sp, #64	; 0x40
 8005566:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	637b      	str	r3, [r7, #52]	; 0x34
 800556c:	2300      	movs	r3, #0
 800556e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005570:	2300      	movs	r3, #0
 8005572:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005574:	2300      	movs	r3, #0
 8005576:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005578:	4b59      	ldr	r3, [pc, #356]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 030c 	and.w	r3, r3, #12
 8005580:	2b08      	cmp	r3, #8
 8005582:	d00d      	beq.n	80055a0 <HAL_RCC_GetSysClockFreq+0x40>
 8005584:	2b08      	cmp	r3, #8
 8005586:	f200 80a1 	bhi.w	80056cc <HAL_RCC_GetSysClockFreq+0x16c>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <HAL_RCC_GetSysClockFreq+0x34>
 800558e:	2b04      	cmp	r3, #4
 8005590:	d003      	beq.n	800559a <HAL_RCC_GetSysClockFreq+0x3a>
 8005592:	e09b      	b.n	80056cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005594:	4b53      	ldr	r3, [pc, #332]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8005596:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8005598:	e09b      	b.n	80056d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800559a:	4b53      	ldr	r3, [pc, #332]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800559c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800559e:	e098      	b.n	80056d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055a0:	4b4f      	ldr	r3, [pc, #316]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055a8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055aa:	4b4d      	ldr	r3, [pc, #308]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d028      	beq.n	8005608 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055b6:	4b4a      	ldr	r3, [pc, #296]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	099b      	lsrs	r3, r3, #6
 80055bc:	2200      	movs	r2, #0
 80055be:	623b      	str	r3, [r7, #32]
 80055c0:	627a      	str	r2, [r7, #36]	; 0x24
 80055c2:	6a3b      	ldr	r3, [r7, #32]
 80055c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80055c8:	2100      	movs	r1, #0
 80055ca:	4b47      	ldr	r3, [pc, #284]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80055cc:	fb03 f201 	mul.w	r2, r3, r1
 80055d0:	2300      	movs	r3, #0
 80055d2:	fb00 f303 	mul.w	r3, r0, r3
 80055d6:	4413      	add	r3, r2
 80055d8:	4a43      	ldr	r2, [pc, #268]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80055da:	fba0 1202 	umull	r1, r2, r0, r2
 80055de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055e0:	460a      	mov	r2, r1
 80055e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80055e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055e6:	4413      	add	r3, r2
 80055e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ec:	2200      	movs	r2, #0
 80055ee:	61bb      	str	r3, [r7, #24]
 80055f0:	61fa      	str	r2, [r7, #28]
 80055f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80055fa:	f7fb fadd 	bl	8000bb8 <__aeabi_uldivmod>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4613      	mov	r3, r2
 8005604:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005606:	e053      	b.n	80056b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005608:	4b35      	ldr	r3, [pc, #212]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	099b      	lsrs	r3, r3, #6
 800560e:	2200      	movs	r2, #0
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	617a      	str	r2, [r7, #20]
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800561a:	f04f 0b00 	mov.w	fp, #0
 800561e:	4652      	mov	r2, sl
 8005620:	465b      	mov	r3, fp
 8005622:	f04f 0000 	mov.w	r0, #0
 8005626:	f04f 0100 	mov.w	r1, #0
 800562a:	0159      	lsls	r1, r3, #5
 800562c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005630:	0150      	lsls	r0, r2, #5
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	ebb2 080a 	subs.w	r8, r2, sl
 800563a:	eb63 090b 	sbc.w	r9, r3, fp
 800563e:	f04f 0200 	mov.w	r2, #0
 8005642:	f04f 0300 	mov.w	r3, #0
 8005646:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800564a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800564e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005652:	ebb2 0408 	subs.w	r4, r2, r8
 8005656:	eb63 0509 	sbc.w	r5, r3, r9
 800565a:	f04f 0200 	mov.w	r2, #0
 800565e:	f04f 0300 	mov.w	r3, #0
 8005662:	00eb      	lsls	r3, r5, #3
 8005664:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005668:	00e2      	lsls	r2, r4, #3
 800566a:	4614      	mov	r4, r2
 800566c:	461d      	mov	r5, r3
 800566e:	eb14 030a 	adds.w	r3, r4, sl
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	eb45 030b 	adc.w	r3, r5, fp
 8005678:	607b      	str	r3, [r7, #4]
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005686:	4629      	mov	r1, r5
 8005688:	028b      	lsls	r3, r1, #10
 800568a:	4621      	mov	r1, r4
 800568c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005690:	4621      	mov	r1, r4
 8005692:	028a      	lsls	r2, r1, #10
 8005694:	4610      	mov	r0, r2
 8005696:	4619      	mov	r1, r3
 8005698:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569a:	2200      	movs	r2, #0
 800569c:	60bb      	str	r3, [r7, #8]
 800569e:	60fa      	str	r2, [r7, #12]
 80056a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056a4:	f7fb fa88 	bl	8000bb8 <__aeabi_uldivmod>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4613      	mov	r3, r2
 80056ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056b0:	4b0b      	ldr	r3, [pc, #44]	; (80056e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80056b2:	685b      	ldr	r3, [r3, #4]
 80056b4:	0c1b      	lsrs	r3, r3, #16
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	3301      	adds	r3, #1
 80056bc:	005b      	lsls	r3, r3, #1
 80056be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80056c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80056ca:	e002      	b.n	80056d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056cc:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80056ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80056d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3740      	adds	r7, #64	; 0x40
 80056d8:	46bd      	mov	sp, r7
 80056da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056de:	bf00      	nop
 80056e0:	40023800 	.word	0x40023800
 80056e4:	00f42400 	.word	0x00f42400
 80056e8:	017d7840 	.word	0x017d7840

080056ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056ec:	b480      	push	{r7}
 80056ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f0:	4b03      	ldr	r3, [pc, #12]	; (8005700 <HAL_RCC_GetHCLKFreq+0x14>)
 80056f2:	681b      	ldr	r3, [r3, #0]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	20000040 	.word	0x20000040

08005704 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005708:	f7ff fff0 	bl	80056ec <HAL_RCC_GetHCLKFreq>
 800570c:	4602      	mov	r2, r0
 800570e:	4b05      	ldr	r3, [pc, #20]	; (8005724 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005710:	689b      	ldr	r3, [r3, #8]
 8005712:	0a9b      	lsrs	r3, r3, #10
 8005714:	f003 0307 	and.w	r3, r3, #7
 8005718:	4903      	ldr	r1, [pc, #12]	; (8005728 <HAL_RCC_GetPCLK1Freq+0x24>)
 800571a:	5ccb      	ldrb	r3, [r1, r3]
 800571c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005720:	4618      	mov	r0, r3
 8005722:	bd80      	pop	{r7, pc}
 8005724:	40023800 	.word	0x40023800
 8005728:	0800d6e0 	.word	0x0800d6e0

0800572c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800573a:	2301      	movs	r3, #1
 800573c:	e041      	b.n	80057c2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005744:	b2db      	uxtb	r3, r3
 8005746:	2b00      	cmp	r3, #0
 8005748:	d106      	bne.n	8005758 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	2200      	movs	r2, #0
 800574e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f7fc fb82 	bl	8001e5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	3304      	adds	r3, #4
 8005768:	4619      	mov	r1, r3
 800576a:	4610      	mov	r0, r2
 800576c:	f000 fc54 	bl	8006018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2201      	movs	r2, #1
 8005774:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2201      	movs	r2, #1
 800577c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2201      	movs	r2, #1
 8005784:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2201      	movs	r2, #1
 8005794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2201      	movs	r2, #1
 80057ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3708      	adds	r7, #8
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
	...

080057cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b085      	sub	sp, #20
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057da:	b2db      	uxtb	r3, r3
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d001      	beq.n	80057e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80057e0:	2301      	movs	r3, #1
 80057e2:	e044      	b.n	800586e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2202      	movs	r2, #2
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0201 	orr.w	r2, r2, #1
 80057fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4a1e      	ldr	r2, [pc, #120]	; (800587c <HAL_TIM_Base_Start_IT+0xb0>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d018      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0x6c>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800580e:	d013      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0x6c>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4a1a      	ldr	r2, [pc, #104]	; (8005880 <HAL_TIM_Base_Start_IT+0xb4>)
 8005816:	4293      	cmp	r3, r2
 8005818:	d00e      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0x6c>
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a19      	ldr	r2, [pc, #100]	; (8005884 <HAL_TIM_Base_Start_IT+0xb8>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d009      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0x6c>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a17      	ldr	r2, [pc, #92]	; (8005888 <HAL_TIM_Base_Start_IT+0xbc>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d004      	beq.n	8005838 <HAL_TIM_Base_Start_IT+0x6c>
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	4a16      	ldr	r2, [pc, #88]	; (800588c <HAL_TIM_Base_Start_IT+0xc0>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d111      	bne.n	800585c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2b06      	cmp	r3, #6
 8005848:	d010      	beq.n	800586c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f042 0201 	orr.w	r2, r2, #1
 8005858:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585a:	e007      	b.n	800586c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	681a      	ldr	r2, [r3, #0]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f042 0201 	orr.w	r2, r2, #1
 800586a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800586c:	2300      	movs	r3, #0
}
 800586e:	4618      	mov	r0, r3
 8005870:	3714      	adds	r7, #20
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	40010000 	.word	0x40010000
 8005880:	40000400 	.word	0x40000400
 8005884:	40000800 	.word	0x40000800
 8005888:	40000c00 	.word	0x40000c00
 800588c:	40014000 	.word	0x40014000

08005890 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e041      	b.n	8005926 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 f839 	bl	800592e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3304      	adds	r3, #4
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f000 fba2 	bl	8006018 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3708      	adds	r7, #8
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800592e:	b480      	push	{r7}
 8005930:	b083      	sub	sp, #12
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
	...

08005944 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
 800594c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	2b00      	cmp	r3, #0
 8005952:	d109      	bne.n	8005968 <HAL_TIM_PWM_Start+0x24>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b01      	cmp	r3, #1
 800595e:	bf14      	ite	ne
 8005960:	2301      	movne	r3, #1
 8005962:	2300      	moveq	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	e022      	b.n	80059ae <HAL_TIM_PWM_Start+0x6a>
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	2b04      	cmp	r3, #4
 800596c:	d109      	bne.n	8005982 <HAL_TIM_PWM_Start+0x3e>
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b01      	cmp	r3, #1
 8005978:	bf14      	ite	ne
 800597a:	2301      	movne	r3, #1
 800597c:	2300      	moveq	r3, #0
 800597e:	b2db      	uxtb	r3, r3
 8005980:	e015      	b.n	80059ae <HAL_TIM_PWM_Start+0x6a>
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b08      	cmp	r3, #8
 8005986:	d109      	bne.n	800599c <HAL_TIM_PWM_Start+0x58>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b01      	cmp	r3, #1
 8005992:	bf14      	ite	ne
 8005994:	2301      	movne	r3, #1
 8005996:	2300      	moveq	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	e008      	b.n	80059ae <HAL_TIM_PWM_Start+0x6a>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	bf14      	ite	ne
 80059a8:	2301      	movne	r3, #1
 80059aa:	2300      	moveq	r3, #0
 80059ac:	b2db      	uxtb	r3, r3
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059b2:	2301      	movs	r3, #1
 80059b4:	e068      	b.n	8005a88 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d104      	bne.n	80059c6 <HAL_TIM_PWM_Start+0x82>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059c4:	e013      	b.n	80059ee <HAL_TIM_PWM_Start+0xaa>
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	2b04      	cmp	r3, #4
 80059ca:	d104      	bne.n	80059d6 <HAL_TIM_PWM_Start+0x92>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059d4:	e00b      	b.n	80059ee <HAL_TIM_PWM_Start+0xaa>
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d104      	bne.n	80059e6 <HAL_TIM_PWM_Start+0xa2>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059e4:	e003      	b.n	80059ee <HAL_TIM_PWM_Start+0xaa>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2202      	movs	r2, #2
 80059ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2201      	movs	r2, #1
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 fdb4 	bl	8006564 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4a23      	ldr	r2, [pc, #140]	; (8005a90 <HAL_TIM_PWM_Start+0x14c>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d107      	bne.n	8005a16 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a14:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a1d      	ldr	r2, [pc, #116]	; (8005a90 <HAL_TIM_PWM_Start+0x14c>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d018      	beq.n	8005a52 <HAL_TIM_PWM_Start+0x10e>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a28:	d013      	beq.n	8005a52 <HAL_TIM_PWM_Start+0x10e>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a19      	ldr	r2, [pc, #100]	; (8005a94 <HAL_TIM_PWM_Start+0x150>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d00e      	beq.n	8005a52 <HAL_TIM_PWM_Start+0x10e>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <HAL_TIM_PWM_Start+0x154>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d009      	beq.n	8005a52 <HAL_TIM_PWM_Start+0x10e>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	4a16      	ldr	r2, [pc, #88]	; (8005a9c <HAL_TIM_PWM_Start+0x158>)
 8005a44:	4293      	cmp	r3, r2
 8005a46:	d004      	beq.n	8005a52 <HAL_TIM_PWM_Start+0x10e>
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	4a14      	ldr	r2, [pc, #80]	; (8005aa0 <HAL_TIM_PWM_Start+0x15c>)
 8005a4e:	4293      	cmp	r3, r2
 8005a50:	d111      	bne.n	8005a76 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 0307 	and.w	r3, r3, #7
 8005a5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	2b06      	cmp	r3, #6
 8005a62:	d010      	beq.n	8005a86 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f042 0201 	orr.w	r2, r2, #1
 8005a72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a74:	e007      	b.n	8005a86 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	681a      	ldr	r2, [r3, #0]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f042 0201 	orr.w	r2, r2, #1
 8005a84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3710      	adds	r7, #16
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	40010000 	.word	0x40010000
 8005a94:	40000400 	.word	0x40000400
 8005a98:	40000800 	.word	0x40000800
 8005a9c:	40000c00 	.word	0x40000c00
 8005aa0:	40014000 	.word	0x40014000

08005aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b082      	sub	sp, #8
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	691b      	ldr	r3, [r3, #16]
 8005ab2:	f003 0302 	and.w	r3, r3, #2
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d122      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b02      	cmp	r3, #2
 8005ac6:	d11b      	bne.n	8005b00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f06f 0202 	mvn.w	r2, #2
 8005ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	699b      	ldr	r3, [r3, #24]
 8005ade:	f003 0303 	and.w	r3, r3, #3
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d003      	beq.n	8005aee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fa77 	bl	8005fda <HAL_TIM_IC_CaptureCallback>
 8005aec:	e005      	b.n	8005afa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 fa69 	bl	8005fc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af4:	6878      	ldr	r0, [r7, #4]
 8005af6:	f000 fa7a 	bl	8005fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	691b      	ldr	r3, [r3, #16]
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b04      	cmp	r3, #4
 8005b0c:	d122      	bne.n	8005b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	68db      	ldr	r3, [r3, #12]
 8005b14:	f003 0304 	and.w	r3, r3, #4
 8005b18:	2b04      	cmp	r3, #4
 8005b1a:	d11b      	bne.n	8005b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f06f 0204 	mvn.w	r2, #4
 8005b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2202      	movs	r2, #2
 8005b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3a:	6878      	ldr	r0, [r7, #4]
 8005b3c:	f000 fa4d 	bl	8005fda <HAL_TIM_IC_CaptureCallback>
 8005b40:	e005      	b.n	8005b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fa3f 	bl	8005fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 fa50 	bl	8005fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2200      	movs	r2, #0
 8005b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	691b      	ldr	r3, [r3, #16]
 8005b5a:	f003 0308 	and.w	r3, r3, #8
 8005b5e:	2b08      	cmp	r3, #8
 8005b60:	d122      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f003 0308 	and.w	r3, r3, #8
 8005b6c:	2b08      	cmp	r3, #8
 8005b6e:	d11b      	bne.n	8005ba8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f06f 0208 	mvn.w	r2, #8
 8005b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2204      	movs	r2, #4
 8005b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	69db      	ldr	r3, [r3, #28]
 8005b86:	f003 0303 	and.w	r3, r3, #3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d003      	beq.n	8005b96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fa23 	bl	8005fda <HAL_TIM_IC_CaptureCallback>
 8005b94:	e005      	b.n	8005ba2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f000 fa15 	bl	8005fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b9c:	6878      	ldr	r0, [r7, #4]
 8005b9e:	f000 fa26 	bl	8005fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	691b      	ldr	r3, [r3, #16]
 8005bae:	f003 0310 	and.w	r3, r3, #16
 8005bb2:	2b10      	cmp	r3, #16
 8005bb4:	d122      	bne.n	8005bfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f003 0310 	and.w	r3, r3, #16
 8005bc0:	2b10      	cmp	r3, #16
 8005bc2:	d11b      	bne.n	8005bfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f06f 0210 	mvn.w	r2, #16
 8005bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2208      	movs	r2, #8
 8005bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	69db      	ldr	r3, [r3, #28]
 8005bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d003      	beq.n	8005bea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f000 f9f9 	bl	8005fda <HAL_TIM_IC_CaptureCallback>
 8005be8:	e005      	b.n	8005bf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f9eb 	bl	8005fc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 f9fc 	bl	8005fee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d10e      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d107      	bne.n	8005c28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f06f 0201 	mvn.w	r2, #1
 8005c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7fb fcfa 	bl	800161c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c32:	2b80      	cmp	r3, #128	; 0x80
 8005c34:	d10e      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c40:	2b80      	cmp	r3, #128	; 0x80
 8005c42:	d107      	bne.n	8005c54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f000 fcb7 	bl	80065c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	691b      	ldr	r3, [r3, #16]
 8005c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c5e:	2b40      	cmp	r3, #64	; 0x40
 8005c60:	d10e      	bne.n	8005c80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c6c:	2b40      	cmp	r3, #64	; 0x40
 8005c6e:	d107      	bne.n	8005c80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f000 f9c1 	bl	8006002 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0320 	and.w	r3, r3, #32
 8005c8a:	2b20      	cmp	r3, #32
 8005c8c:	d10e      	bne.n	8005cac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f003 0320 	and.w	r3, r3, #32
 8005c98:	2b20      	cmp	r3, #32
 8005c9a:	d107      	bne.n	8005cac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f06f 0220 	mvn.w	r2, #32
 8005ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	f000 fc81 	bl	80065ae <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cac:	bf00      	nop
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}

08005cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b086      	sub	sp, #24
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	60f8      	str	r0, [r7, #12]
 8005cbc:	60b9      	str	r1, [r7, #8]
 8005cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d101      	bne.n	8005cd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cce:	2302      	movs	r3, #2
 8005cd0:	e0ae      	b.n	8005e30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b0c      	cmp	r3, #12
 8005cde:	f200 809f 	bhi.w	8005e20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ce2:	a201      	add	r2, pc, #4	; (adr r2, 8005ce8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce8:	08005d1d 	.word	0x08005d1d
 8005cec:	08005e21 	.word	0x08005e21
 8005cf0:	08005e21 	.word	0x08005e21
 8005cf4:	08005e21 	.word	0x08005e21
 8005cf8:	08005d5d 	.word	0x08005d5d
 8005cfc:	08005e21 	.word	0x08005e21
 8005d00:	08005e21 	.word	0x08005e21
 8005d04:	08005e21 	.word	0x08005e21
 8005d08:	08005d9f 	.word	0x08005d9f
 8005d0c:	08005e21 	.word	0x08005e21
 8005d10:	08005e21 	.word	0x08005e21
 8005d14:	08005e21 	.word	0x08005e21
 8005d18:	08005ddf 	.word	0x08005ddf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68b9      	ldr	r1, [r7, #8]
 8005d22:	4618      	mov	r0, r3
 8005d24:	f000 f9f8 	bl	8006118 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	699a      	ldr	r2, [r3, #24]
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f042 0208 	orr.w	r2, r2, #8
 8005d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	699a      	ldr	r2, [r3, #24]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0204 	bic.w	r2, r2, #4
 8005d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6999      	ldr	r1, [r3, #24]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	691a      	ldr	r2, [r3, #16]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	430a      	orrs	r2, r1
 8005d58:	619a      	str	r2, [r3, #24]
      break;
 8005d5a:	e064      	b.n	8005e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68b9      	ldr	r1, [r7, #8]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f000 fa3e 	bl	80061e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	699a      	ldr	r2, [r3, #24]
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	699a      	ldr	r2, [r3, #24]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	6999      	ldr	r1, [r3, #24]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	021a      	lsls	r2, r3, #8
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	430a      	orrs	r2, r1
 8005d9a:	619a      	str	r2, [r3, #24]
      break;
 8005d9c:	e043      	b.n	8005e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68b9      	ldr	r1, [r7, #8]
 8005da4:	4618      	mov	r0, r3
 8005da6:	f000 fa89 	bl	80062bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	69da      	ldr	r2, [r3, #28]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0208 	orr.w	r2, r2, #8
 8005db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	69da      	ldr	r2, [r3, #28]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f022 0204 	bic.w	r2, r2, #4
 8005dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	69d9      	ldr	r1, [r3, #28]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	691a      	ldr	r2, [r3, #16]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	430a      	orrs	r2, r1
 8005dda:	61da      	str	r2, [r3, #28]
      break;
 8005ddc:	e023      	b.n	8005e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68b9      	ldr	r1, [r7, #8]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f000 fad3 	bl	8006390 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	69da      	ldr	r2, [r3, #28]
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69da      	ldr	r2, [r3, #28]
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	69d9      	ldr	r1, [r3, #28]
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	691b      	ldr	r3, [r3, #16]
 8005e14:	021a      	lsls	r2, r3, #8
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	430a      	orrs	r2, r1
 8005e1c:	61da      	str	r2, [r3, #28]
      break;
 8005e1e:	e002      	b.n	8005e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	75fb      	strb	r3, [r7, #23]
      break;
 8005e24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3718      	adds	r7, #24
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_TIM_ConfigClockSource+0x1c>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e0b4      	b.n	8005fbe <HAL_TIM_ConfigClockSource+0x186>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	68ba      	ldr	r2, [r7, #8]
 8005e82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e8c:	d03e      	beq.n	8005f0c <HAL_TIM_ConfigClockSource+0xd4>
 8005e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e92:	f200 8087 	bhi.w	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e9a:	f000 8086 	beq.w	8005faa <HAL_TIM_ConfigClockSource+0x172>
 8005e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea2:	d87f      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea4:	2b70      	cmp	r3, #112	; 0x70
 8005ea6:	d01a      	beq.n	8005ede <HAL_TIM_ConfigClockSource+0xa6>
 8005ea8:	2b70      	cmp	r3, #112	; 0x70
 8005eaa:	d87b      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005eac:	2b60      	cmp	r3, #96	; 0x60
 8005eae:	d050      	beq.n	8005f52 <HAL_TIM_ConfigClockSource+0x11a>
 8005eb0:	2b60      	cmp	r3, #96	; 0x60
 8005eb2:	d877      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb4:	2b50      	cmp	r3, #80	; 0x50
 8005eb6:	d03c      	beq.n	8005f32 <HAL_TIM_ConfigClockSource+0xfa>
 8005eb8:	2b50      	cmp	r3, #80	; 0x50
 8005eba:	d873      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ebc:	2b40      	cmp	r3, #64	; 0x40
 8005ebe:	d058      	beq.n	8005f72 <HAL_TIM_ConfigClockSource+0x13a>
 8005ec0:	2b40      	cmp	r3, #64	; 0x40
 8005ec2:	d86f      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec4:	2b30      	cmp	r3, #48	; 0x30
 8005ec6:	d064      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0x15a>
 8005ec8:	2b30      	cmp	r3, #48	; 0x30
 8005eca:	d86b      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ecc:	2b20      	cmp	r3, #32
 8005ece:	d060      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0x15a>
 8005ed0:	2b20      	cmp	r3, #32
 8005ed2:	d867      	bhi.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d05c      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0x15a>
 8005ed8:	2b10      	cmp	r3, #16
 8005eda:	d05a      	beq.n	8005f92 <HAL_TIM_ConfigClockSource+0x15a>
 8005edc:	e062      	b.n	8005fa4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6818      	ldr	r0, [r3, #0]
 8005ee2:	683b      	ldr	r3, [r7, #0]
 8005ee4:	6899      	ldr	r1, [r3, #8]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f000 fb19 	bl	8006524 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005efa:	68bb      	ldr	r3, [r7, #8]
 8005efc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68ba      	ldr	r2, [r7, #8]
 8005f08:	609a      	str	r2, [r3, #8]
      break;
 8005f0a:	e04f      	b.n	8005fac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6818      	ldr	r0, [r3, #0]
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	6899      	ldr	r1, [r3, #8]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f000 fb02 	bl	8006524 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689a      	ldr	r2, [r3, #8]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f2e:	609a      	str	r2, [r3, #8]
      break;
 8005f30:	e03c      	b.n	8005fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6818      	ldr	r0, [r3, #0]
 8005f36:	683b      	ldr	r3, [r7, #0]
 8005f38:	6859      	ldr	r1, [r3, #4]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f000 fa76 	bl	8006430 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	2150      	movs	r1, #80	; 0x50
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 facf 	bl	80064ee <TIM_ITRx_SetConfig>
      break;
 8005f50:	e02c      	b.n	8005fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6818      	ldr	r0, [r3, #0]
 8005f56:	683b      	ldr	r3, [r7, #0]
 8005f58:	6859      	ldr	r1, [r3, #4]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	461a      	mov	r2, r3
 8005f60:	f000 fa95 	bl	800648e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	2160      	movs	r1, #96	; 0x60
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f000 fabf 	bl	80064ee <TIM_ITRx_SetConfig>
      break;
 8005f70:	e01c      	b.n	8005fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6818      	ldr	r0, [r3, #0]
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	6859      	ldr	r1, [r3, #4]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	68db      	ldr	r3, [r3, #12]
 8005f7e:	461a      	mov	r2, r3
 8005f80:	f000 fa56 	bl	8006430 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2140      	movs	r1, #64	; 0x40
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f000 faaf 	bl	80064ee <TIM_ITRx_SetConfig>
      break;
 8005f90:	e00c      	b.n	8005fac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	4610      	mov	r0, r2
 8005f9e:	f000 faa6 	bl	80064ee <TIM_ITRx_SetConfig>
      break;
 8005fa2:	e003      	b.n	8005fac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8005fa8:	e000      	b.n	8005fac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005faa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b083      	sub	sp, #12
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fce:	bf00      	nop
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005fe2:	bf00      	nop
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b083      	sub	sp, #12
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005ff6:	bf00      	nop
 8005ff8:	370c      	adds	r7, #12
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006000:	4770      	bx	lr

08006002 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006002:	b480      	push	{r7}
 8006004:	b083      	sub	sp, #12
 8006006:	af00      	add	r7, sp, #0
 8006008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800600a:	bf00      	nop
 800600c:	370c      	adds	r7, #12
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr
	...

08006018 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	4a34      	ldr	r2, [pc, #208]	; (80060fc <TIM_Base_SetConfig+0xe4>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d00f      	beq.n	8006050 <TIM_Base_SetConfig+0x38>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006036:	d00b      	beq.n	8006050 <TIM_Base_SetConfig+0x38>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	4a31      	ldr	r2, [pc, #196]	; (8006100 <TIM_Base_SetConfig+0xe8>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d007      	beq.n	8006050 <TIM_Base_SetConfig+0x38>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a30      	ldr	r2, [pc, #192]	; (8006104 <TIM_Base_SetConfig+0xec>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d003      	beq.n	8006050 <TIM_Base_SetConfig+0x38>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	4a2f      	ldr	r2, [pc, #188]	; (8006108 <TIM_Base_SetConfig+0xf0>)
 800604c:	4293      	cmp	r3, r2
 800604e:	d108      	bne.n	8006062 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006056:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006058:	683b      	ldr	r3, [r7, #0]
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	68fa      	ldr	r2, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	4a25      	ldr	r2, [pc, #148]	; (80060fc <TIM_Base_SetConfig+0xe4>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d01b      	beq.n	80060a2 <TIM_Base_SetConfig+0x8a>
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006070:	d017      	beq.n	80060a2 <TIM_Base_SetConfig+0x8a>
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	4a22      	ldr	r2, [pc, #136]	; (8006100 <TIM_Base_SetConfig+0xe8>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d013      	beq.n	80060a2 <TIM_Base_SetConfig+0x8a>
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a21      	ldr	r2, [pc, #132]	; (8006104 <TIM_Base_SetConfig+0xec>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d00f      	beq.n	80060a2 <TIM_Base_SetConfig+0x8a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	4a20      	ldr	r2, [pc, #128]	; (8006108 <TIM_Base_SetConfig+0xf0>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d00b      	beq.n	80060a2 <TIM_Base_SetConfig+0x8a>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a1f      	ldr	r2, [pc, #124]	; (800610c <TIM_Base_SetConfig+0xf4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d007      	beq.n	80060a2 <TIM_Base_SetConfig+0x8a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a1e      	ldr	r2, [pc, #120]	; (8006110 <TIM_Base_SetConfig+0xf8>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d003      	beq.n	80060a2 <TIM_Base_SetConfig+0x8a>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a1d      	ldr	r2, [pc, #116]	; (8006114 <TIM_Base_SetConfig+0xfc>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d108      	bne.n	80060b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	68db      	ldr	r3, [r3, #12]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	4313      	orrs	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	695b      	ldr	r3, [r3, #20]
 80060be:	4313      	orrs	r3, r2
 80060c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	689a      	ldr	r2, [r3, #8]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	681a      	ldr	r2, [r3, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4a08      	ldr	r2, [pc, #32]	; (80060fc <TIM_Base_SetConfig+0xe4>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d103      	bne.n	80060e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	691a      	ldr	r2, [r3, #16]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2201      	movs	r2, #1
 80060ec:	615a      	str	r2, [r3, #20]
}
 80060ee:	bf00      	nop
 80060f0:	3714      	adds	r7, #20
 80060f2:	46bd      	mov	sp, r7
 80060f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop
 80060fc:	40010000 	.word	0x40010000
 8006100:	40000400 	.word	0x40000400
 8006104:	40000800 	.word	0x40000800
 8006108:	40000c00 	.word	0x40000c00
 800610c:	40014000 	.word	0x40014000
 8006110:	40014400 	.word	0x40014400
 8006114:	40014800 	.word	0x40014800

08006118 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006118:	b480      	push	{r7}
 800611a:	b087      	sub	sp, #28
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	f023 0201 	bic.w	r2, r3, #1
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	f023 0303 	bic.w	r3, r3, #3
 800614e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	68fa      	ldr	r2, [r7, #12]
 8006156:	4313      	orrs	r3, r2
 8006158:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800615a:	697b      	ldr	r3, [r7, #20]
 800615c:	f023 0302 	bic.w	r3, r3, #2
 8006160:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006162:	683b      	ldr	r3, [r7, #0]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a1c      	ldr	r2, [pc, #112]	; (80061e0 <TIM_OC1_SetConfig+0xc8>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d10c      	bne.n	800618e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f023 0308 	bic.w	r3, r3, #8
 800617a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	697a      	ldr	r2, [r7, #20]
 8006182:	4313      	orrs	r3, r2
 8006184:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f023 0304 	bic.w	r3, r3, #4
 800618c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	4a13      	ldr	r2, [pc, #76]	; (80061e0 <TIM_OC1_SetConfig+0xc8>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d111      	bne.n	80061ba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800619c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	4313      	orrs	r3, r2
 80061ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	68fa      	ldr	r2, [r7, #12]
 80061c4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	685a      	ldr	r2, [r3, #4]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	697a      	ldr	r2, [r7, #20]
 80061d2:	621a      	str	r2, [r3, #32]
}
 80061d4:	bf00      	nop
 80061d6:	371c      	adds	r7, #28
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr
 80061e0:	40010000 	.word	0x40010000

080061e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b087      	sub	sp, #28
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
 80061ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	f023 0210 	bic.w	r2, r3, #16
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a1b      	ldr	r3, [r3, #32]
 80061fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	699b      	ldr	r3, [r3, #24]
 800620a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006212:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800621a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	021b      	lsls	r3, r3, #8
 8006222:	68fa      	ldr	r2, [r7, #12]
 8006224:	4313      	orrs	r3, r2
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006228:	697b      	ldr	r3, [r7, #20]
 800622a:	f023 0320 	bic.w	r3, r3, #32
 800622e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	011b      	lsls	r3, r3, #4
 8006236:	697a      	ldr	r2, [r7, #20]
 8006238:	4313      	orrs	r3, r2
 800623a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4a1e      	ldr	r2, [pc, #120]	; (80062b8 <TIM_OC2_SetConfig+0xd4>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d10d      	bne.n	8006260 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006244:	697b      	ldr	r3, [r7, #20]
 8006246:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800624a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	697a      	ldr	r2, [r7, #20]
 8006254:	4313      	orrs	r3, r2
 8006256:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800625e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	4a15      	ldr	r2, [pc, #84]	; (80062b8 <TIM_OC2_SetConfig+0xd4>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d113      	bne.n	8006290 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006268:	693b      	ldr	r3, [r7, #16]
 800626a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800626e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006276:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	009b      	lsls	r3, r3, #2
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	4313      	orrs	r3, r2
 8006282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	699b      	ldr	r3, [r3, #24]
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	4313      	orrs	r3, r2
 800628e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	693a      	ldr	r2, [r7, #16]
 8006294:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685a      	ldr	r2, [r3, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	621a      	str	r2, [r3, #32]
}
 80062aa:	bf00      	nop
 80062ac:	371c      	adds	r7, #28
 80062ae:	46bd      	mov	sp, r7
 80062b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b4:	4770      	bx	lr
 80062b6:	bf00      	nop
 80062b8:	40010000 	.word	0x40010000

080062bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062bc:	b480      	push	{r7}
 80062be:	b087      	sub	sp, #28
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a1b      	ldr	r3, [r3, #32]
 80062ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1b      	ldr	r3, [r3, #32]
 80062d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	f023 0303 	bic.w	r3, r3, #3
 80062f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	68fa      	ldr	r2, [r7, #12]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	021b      	lsls	r3, r3, #8
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	4313      	orrs	r3, r2
 8006310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a1d      	ldr	r2, [pc, #116]	; (800638c <TIM_OC3_SetConfig+0xd0>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d10d      	bne.n	8006336 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006320:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a14      	ldr	r2, [pc, #80]	; (800638c <TIM_OC3_SetConfig+0xd0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d113      	bne.n	8006366 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800634c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	695b      	ldr	r3, [r3, #20]
 8006352:	011b      	lsls	r3, r3, #4
 8006354:	693a      	ldr	r2, [r7, #16]
 8006356:	4313      	orrs	r3, r2
 8006358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800635a:	683b      	ldr	r3, [r7, #0]
 800635c:	699b      	ldr	r3, [r3, #24]
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	693a      	ldr	r2, [r7, #16]
 8006362:	4313      	orrs	r3, r2
 8006364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68fa      	ldr	r2, [r7, #12]
 8006370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	697a      	ldr	r2, [r7, #20]
 800637e:	621a      	str	r2, [r3, #32]
}
 8006380:	bf00      	nop
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	40010000 	.word	0x40010000

08006390 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6a1b      	ldr	r3, [r3, #32]
 800639e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a1b      	ldr	r3, [r3, #32]
 80063aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	69db      	ldr	r3, [r3, #28]
 80063b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063c8:	683b      	ldr	r3, [r7, #0]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	021b      	lsls	r3, r3, #8
 80063ce:	68fa      	ldr	r2, [r7, #12]
 80063d0:	4313      	orrs	r3, r2
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	031b      	lsls	r3, r3, #12
 80063e2:	693a      	ldr	r2, [r7, #16]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	4a10      	ldr	r2, [pc, #64]	; (800642c <TIM_OC4_SetConfig+0x9c>)
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d109      	bne.n	8006404 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	019b      	lsls	r3, r3, #6
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4313      	orrs	r3, r2
 8006402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	697a      	ldr	r2, [r7, #20]
 8006408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68fa      	ldr	r2, [r7, #12]
 800640e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	685a      	ldr	r2, [r3, #4]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	693a      	ldr	r2, [r7, #16]
 800641c:	621a      	str	r2, [r3, #32]
}
 800641e:	bf00      	nop
 8006420:	371c      	adds	r7, #28
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
 800642a:	bf00      	nop
 800642c:	40010000 	.word	0x40010000

08006430 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006430:	b480      	push	{r7}
 8006432:	b087      	sub	sp, #28
 8006434:	af00      	add	r7, sp, #0
 8006436:	60f8      	str	r0, [r7, #12]
 8006438:	60b9      	str	r1, [r7, #8]
 800643a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6a1b      	ldr	r3, [r3, #32]
 8006440:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6a1b      	ldr	r3, [r3, #32]
 8006446:	f023 0201 	bic.w	r2, r3, #1
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800645a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	011b      	lsls	r3, r3, #4
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	4313      	orrs	r3, r2
 8006464:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	f023 030a 	bic.w	r3, r3, #10
 800646c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	4313      	orrs	r3, r2
 8006474:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	697a      	ldr	r2, [r7, #20]
 8006480:	621a      	str	r2, [r3, #32]
}
 8006482:	bf00      	nop
 8006484:	371c      	adds	r7, #28
 8006486:	46bd      	mov	sp, r7
 8006488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800648c:	4770      	bx	lr

0800648e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800648e:	b480      	push	{r7}
 8006490:	b087      	sub	sp, #28
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	f023 0210 	bic.w	r2, r3, #16
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	699b      	ldr	r3, [r3, #24]
 80064aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6a1b      	ldr	r3, [r3, #32]
 80064b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	031b      	lsls	r3, r3, #12
 80064be:	697a      	ldr	r2, [r7, #20]
 80064c0:	4313      	orrs	r3, r2
 80064c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	011b      	lsls	r3, r3, #4
 80064d0:	693a      	ldr	r2, [r7, #16]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	697a      	ldr	r2, [r7, #20]
 80064da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	621a      	str	r2, [r3, #32]
}
 80064e2:	bf00      	nop
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b085      	sub	sp, #20
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
 80064f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006504:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006506:	683a      	ldr	r2, [r7, #0]
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4313      	orrs	r3, r2
 800650c:	f043 0307 	orr.w	r3, r3, #7
 8006510:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	68fa      	ldr	r2, [r7, #12]
 8006516:	609a      	str	r2, [r3, #8]
}
 8006518:	bf00      	nop
 800651a:	3714      	adds	r7, #20
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006524:	b480      	push	{r7}
 8006526:	b087      	sub	sp, #28
 8006528:	af00      	add	r7, sp, #0
 800652a:	60f8      	str	r0, [r7, #12]
 800652c:	60b9      	str	r1, [r7, #8]
 800652e:	607a      	str	r2, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800653e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	021a      	lsls	r2, r3, #8
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	431a      	orrs	r2, r3
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	4313      	orrs	r3, r2
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	697a      	ldr	r2, [r7, #20]
 8006556:	609a      	str	r2, [r3, #8]
}
 8006558:	bf00      	nop
 800655a:	371c      	adds	r7, #28
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr

08006564 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006564:	b480      	push	{r7}
 8006566:	b087      	sub	sp, #28
 8006568:	af00      	add	r7, sp, #0
 800656a:	60f8      	str	r0, [r7, #12]
 800656c:	60b9      	str	r1, [r7, #8]
 800656e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	f003 031f 	and.w	r3, r3, #31
 8006576:	2201      	movs	r2, #1
 8006578:	fa02 f303 	lsl.w	r3, r2, r3
 800657c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6a1a      	ldr	r2, [r3, #32]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	43db      	mvns	r3, r3
 8006586:	401a      	ands	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	6a1a      	ldr	r2, [r3, #32]
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	f003 031f 	and.w	r3, r3, #31
 8006596:	6879      	ldr	r1, [r7, #4]
 8006598:	fa01 f303 	lsl.w	r3, r1, r3
 800659c:	431a      	orrs	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	621a      	str	r2, [r3, #32]
}
 80065a2:	bf00      	nop
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ac:	4770      	bx	lr

080065ae <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065ae:	b480      	push	{r7}
 80065b0:	b083      	sub	sp, #12
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065b6:	bf00      	nop
 80065b8:	370c      	adds	r7, #12
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr

080065c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065ca:	bf00      	nop
 80065cc:	370c      	adds	r7, #12
 80065ce:	46bd      	mov	sp, r7
 80065d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d4:	4770      	bx	lr

080065d6 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80065d6:	b084      	sub	sp, #16
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	f107 001c 	add.w	r0, r7, #28
 80065e4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80065e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ea:	2b01      	cmp	r3, #1
 80065ec:	d122      	bne.n	8006634 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065f2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006602:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	68db      	ldr	r3, [r3, #12]
 800660e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006618:	2b01      	cmp	r3, #1
 800661a:	d105      	bne.n	8006628 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	68db      	ldr	r3, [r3, #12]
 8006620:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f001 fbed 	bl	8007e08 <USB_CoreReset>
 800662e:	4603      	mov	r3, r0
 8006630:	73fb      	strb	r3, [r7, #15]
 8006632:	e01a      	b.n	800666a <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	68db      	ldr	r3, [r3, #12]
 8006638:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f001 fbe1 	bl	8007e08 <USB_CoreReset>
 8006646:	4603      	mov	r3, r0
 8006648:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800664a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800664c:	2b00      	cmp	r3, #0
 800664e:	d106      	bne.n	800665e <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006654:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	639a      	str	r2, [r3, #56]	; 0x38
 800665c:	e005      	b.n	800666a <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006662:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800666a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800666c:	2b01      	cmp	r3, #1
 800666e:	d10b      	bne.n	8006688 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f043 0206 	orr.w	r2, r3, #6
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	689b      	ldr	r3, [r3, #8]
 8006680:	f043 0220 	orr.w	r2, r3, #32
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006688:	7bfb      	ldrb	r3, [r7, #15]
}
 800668a:	4618      	mov	r0, r3
 800668c:	3710      	adds	r7, #16
 800668e:	46bd      	mov	sp, r7
 8006690:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006694:	b004      	add	sp, #16
 8006696:	4770      	bx	lr

08006698 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006698:	b480      	push	{r7}
 800669a:	b087      	sub	sp, #28
 800669c:	af00      	add	r7, sp, #0
 800669e:	60f8      	str	r0, [r7, #12]
 80066a0:	60b9      	str	r1, [r7, #8]
 80066a2:	4613      	mov	r3, r2
 80066a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80066a6:	79fb      	ldrb	r3, [r7, #7]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d165      	bne.n	8006778 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80066ac:	68bb      	ldr	r3, [r7, #8]
 80066ae:	4a41      	ldr	r2, [pc, #260]	; (80067b4 <USB_SetTurnaroundTime+0x11c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d906      	bls.n	80066c2 <USB_SetTurnaroundTime+0x2a>
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	4a40      	ldr	r2, [pc, #256]	; (80067b8 <USB_SetTurnaroundTime+0x120>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d202      	bcs.n	80066c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80066bc:	230f      	movs	r3, #15
 80066be:	617b      	str	r3, [r7, #20]
 80066c0:	e062      	b.n	8006788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	4a3c      	ldr	r2, [pc, #240]	; (80067b8 <USB_SetTurnaroundTime+0x120>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d306      	bcc.n	80066d8 <USB_SetTurnaroundTime+0x40>
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	4a3b      	ldr	r2, [pc, #236]	; (80067bc <USB_SetTurnaroundTime+0x124>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d202      	bcs.n	80066d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80066d2:	230e      	movs	r3, #14
 80066d4:	617b      	str	r3, [r7, #20]
 80066d6:	e057      	b.n	8006788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	4a38      	ldr	r2, [pc, #224]	; (80067bc <USB_SetTurnaroundTime+0x124>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d306      	bcc.n	80066ee <USB_SetTurnaroundTime+0x56>
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4a37      	ldr	r2, [pc, #220]	; (80067c0 <USB_SetTurnaroundTime+0x128>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d202      	bcs.n	80066ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80066e8:	230d      	movs	r3, #13
 80066ea:	617b      	str	r3, [r7, #20]
 80066ec:	e04c      	b.n	8006788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	4a33      	ldr	r2, [pc, #204]	; (80067c0 <USB_SetTurnaroundTime+0x128>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d306      	bcc.n	8006704 <USB_SetTurnaroundTime+0x6c>
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	4a32      	ldr	r2, [pc, #200]	; (80067c4 <USB_SetTurnaroundTime+0x12c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d802      	bhi.n	8006704 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80066fe:	230c      	movs	r3, #12
 8006700:	617b      	str	r3, [r7, #20]
 8006702:	e041      	b.n	8006788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	4a2f      	ldr	r2, [pc, #188]	; (80067c4 <USB_SetTurnaroundTime+0x12c>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d906      	bls.n	800671a <USB_SetTurnaroundTime+0x82>
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4a2e      	ldr	r2, [pc, #184]	; (80067c8 <USB_SetTurnaroundTime+0x130>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d802      	bhi.n	800671a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006714:	230b      	movs	r3, #11
 8006716:	617b      	str	r3, [r7, #20]
 8006718:	e036      	b.n	8006788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	4a2a      	ldr	r2, [pc, #168]	; (80067c8 <USB_SetTurnaroundTime+0x130>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d906      	bls.n	8006730 <USB_SetTurnaroundTime+0x98>
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	4a29      	ldr	r2, [pc, #164]	; (80067cc <USB_SetTurnaroundTime+0x134>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d802      	bhi.n	8006730 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800672a:	230a      	movs	r3, #10
 800672c:	617b      	str	r3, [r7, #20]
 800672e:	e02b      	b.n	8006788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	4a26      	ldr	r2, [pc, #152]	; (80067cc <USB_SetTurnaroundTime+0x134>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d906      	bls.n	8006746 <USB_SetTurnaroundTime+0xae>
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4a25      	ldr	r2, [pc, #148]	; (80067d0 <USB_SetTurnaroundTime+0x138>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d202      	bcs.n	8006746 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006740:	2309      	movs	r3, #9
 8006742:	617b      	str	r3, [r7, #20]
 8006744:	e020      	b.n	8006788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	4a21      	ldr	r2, [pc, #132]	; (80067d0 <USB_SetTurnaroundTime+0x138>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d306      	bcc.n	800675c <USB_SetTurnaroundTime+0xc4>
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	4a20      	ldr	r2, [pc, #128]	; (80067d4 <USB_SetTurnaroundTime+0x13c>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d802      	bhi.n	800675c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006756:	2308      	movs	r3, #8
 8006758:	617b      	str	r3, [r7, #20]
 800675a:	e015      	b.n	8006788 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	4a1d      	ldr	r2, [pc, #116]	; (80067d4 <USB_SetTurnaroundTime+0x13c>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d906      	bls.n	8006772 <USB_SetTurnaroundTime+0xda>
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	4a1c      	ldr	r2, [pc, #112]	; (80067d8 <USB_SetTurnaroundTime+0x140>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d202      	bcs.n	8006772 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800676c:	2307      	movs	r3, #7
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	e00a      	b.n	8006788 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006772:	2306      	movs	r3, #6
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	e007      	b.n	8006788 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006778:	79fb      	ldrb	r3, [r7, #7]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d102      	bne.n	8006784 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800677e:	2309      	movs	r3, #9
 8006780:	617b      	str	r3, [r7, #20]
 8006782:	e001      	b.n	8006788 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006784:	2309      	movs	r3, #9
 8006786:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	68da      	ldr	r2, [r3, #12]
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	029b      	lsls	r3, r3, #10
 800679c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80067a0:	431a      	orrs	r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	371c      	adds	r7, #28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	00d8acbf 	.word	0x00d8acbf
 80067b8:	00e4e1c0 	.word	0x00e4e1c0
 80067bc:	00f42400 	.word	0x00f42400
 80067c0:	01067380 	.word	0x01067380
 80067c4:	011a499f 	.word	0x011a499f
 80067c8:	01312cff 	.word	0x01312cff
 80067cc:	014ca43f 	.word	0x014ca43f
 80067d0:	016e3600 	.word	0x016e3600
 80067d4:	01a6ab1f 	.word	0x01a6ab1f
 80067d8:	01e84800 	.word	0x01e84800

080067dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	f043 0201 	orr.w	r2, r3, #1
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80067f0:	2300      	movs	r3, #0
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	f023 0201 	bic.w	r2, r3, #1
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	370c      	adds	r7, #12
 8006818:	46bd      	mov	sp, r7
 800681a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681e:	4770      	bx	lr

08006820 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
 8006828:	460b      	mov	r3, r1
 800682a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800683c:	78fb      	ldrb	r3, [r7, #3]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d115      	bne.n	800686e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800684e:	2001      	movs	r0, #1
 8006850:	f7fb fc18 	bl	8002084 <HAL_Delay>
      ms++;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	3301      	adds	r3, #1
 8006858:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f001 fa45 	bl	8007cea <USB_GetMode>
 8006860:	4603      	mov	r3, r0
 8006862:	2b01      	cmp	r3, #1
 8006864:	d01e      	beq.n	80068a4 <USB_SetCurrentMode+0x84>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b31      	cmp	r3, #49	; 0x31
 800686a:	d9f0      	bls.n	800684e <USB_SetCurrentMode+0x2e>
 800686c:	e01a      	b.n	80068a4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800686e:	78fb      	ldrb	r3, [r7, #3]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d115      	bne.n	80068a0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006880:	2001      	movs	r0, #1
 8006882:	f7fb fbff 	bl	8002084 <HAL_Delay>
      ms++;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	3301      	adds	r3, #1
 800688a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f001 fa2c 	bl	8007cea <USB_GetMode>
 8006892:	4603      	mov	r3, r0
 8006894:	2b00      	cmp	r3, #0
 8006896:	d005      	beq.n	80068a4 <USB_SetCurrentMode+0x84>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2b31      	cmp	r3, #49	; 0x31
 800689c:	d9f0      	bls.n	8006880 <USB_SetCurrentMode+0x60>
 800689e:	e001      	b.n	80068a4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	e005      	b.n	80068b0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2b32      	cmp	r3, #50	; 0x32
 80068a8:	d101      	bne.n	80068ae <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80068aa:	2301      	movs	r3, #1
 80068ac:	e000      	b.n	80068b0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068b8:	b084      	sub	sp, #16
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b086      	sub	sp, #24
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
 80068c2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80068c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068ca:	2300      	movs	r3, #0
 80068cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80068d2:	2300      	movs	r3, #0
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	e009      	b.n	80068ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	3340      	adds	r3, #64	; 0x40
 80068de:	009b      	lsls	r3, r3, #2
 80068e0:	4413      	add	r3, r2
 80068e2:	2200      	movs	r2, #0
 80068e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80068e6:	693b      	ldr	r3, [r7, #16]
 80068e8:	3301      	adds	r3, #1
 80068ea:	613b      	str	r3, [r7, #16]
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	2b0e      	cmp	r3, #14
 80068f0:	d9f2      	bls.n	80068d8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80068f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d11c      	bne.n	8006932 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006906:	f043 0302 	orr.w	r3, r3, #2
 800690a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006910:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800691c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006928:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	639a      	str	r2, [r3, #56]	; 0x38
 8006930:	e00b      	b.n	800694a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006936:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006942:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006950:	461a      	mov	r2, r3
 8006952:	2300      	movs	r3, #0
 8006954:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800695c:	4619      	mov	r1, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006964:	461a      	mov	r2, r3
 8006966:	680b      	ldr	r3, [r1, #0]
 8006968:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800696a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800696c:	2b01      	cmp	r3, #1
 800696e:	d10c      	bne.n	800698a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006972:	2b00      	cmp	r3, #0
 8006974:	d104      	bne.n	8006980 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006976:	2100      	movs	r1, #0
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	f000 f965 	bl	8006c48 <USB_SetDevSpeed>
 800697e:	e008      	b.n	8006992 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006980:	2101      	movs	r1, #1
 8006982:	6878      	ldr	r0, [r7, #4]
 8006984:	f000 f960 	bl	8006c48 <USB_SetDevSpeed>
 8006988:	e003      	b.n	8006992 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800698a:	2103      	movs	r1, #3
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f000 f95b 	bl	8006c48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006992:	2110      	movs	r1, #16
 8006994:	6878      	ldr	r0, [r7, #4]
 8006996:	f000 f8f3 	bl	8006b80 <USB_FlushTxFifo>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d001      	beq.n	80069a4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80069a0:	2301      	movs	r3, #1
 80069a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f91f 	bl	8006be8 <USB_FlushRxFifo>
 80069aa:	4603      	mov	r3, r0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ba:	461a      	mov	r2, r3
 80069bc:	2300      	movs	r3, #0
 80069be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069c6:	461a      	mov	r2, r3
 80069c8:	2300      	movs	r3, #0
 80069ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069d2:	461a      	mov	r2, r3
 80069d4:	2300      	movs	r3, #0
 80069d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80069d8:	2300      	movs	r3, #0
 80069da:	613b      	str	r3, [r7, #16]
 80069dc:	e043      	b.n	8006a66 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	015a      	lsls	r2, r3, #5
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	4413      	add	r3, r2
 80069e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069f4:	d118      	bne.n	8006a28 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d10a      	bne.n	8006a12 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	015a      	lsls	r2, r3, #5
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a08:	461a      	mov	r2, r3
 8006a0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a0e:	6013      	str	r3, [r2, #0]
 8006a10:	e013      	b.n	8006a3a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a24:	6013      	str	r3, [r2, #0]
 8006a26:	e008      	b.n	8006a3a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	015a      	lsls	r2, r3, #5
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	4413      	add	r3, r2
 8006a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a34:	461a      	mov	r2, r3
 8006a36:	2300      	movs	r3, #0
 8006a38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	015a      	lsls	r2, r3, #5
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	4413      	add	r3, r2
 8006a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a46:	461a      	mov	r2, r3
 8006a48:	2300      	movs	r3, #0
 8006a4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	015a      	lsls	r2, r3, #5
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	4413      	add	r3, r2
 8006a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a58:	461a      	mov	r2, r3
 8006a5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	3301      	adds	r3, #1
 8006a64:	613b      	str	r3, [r7, #16]
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	693a      	ldr	r2, [r7, #16]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d3b7      	bcc.n	80069de <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a6e:	2300      	movs	r3, #0
 8006a70:	613b      	str	r3, [r7, #16]
 8006a72:	e043      	b.n	8006afc <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a8a:	d118      	bne.n	8006abe <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10a      	bne.n	8006aa8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006aa4:	6013      	str	r3, [r2, #0]
 8006aa6:	e013      	b.n	8006ad0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006aba:	6013      	str	r3, [r2, #0]
 8006abc:	e008      	b.n	8006ad0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aca:	461a      	mov	r2, r3
 8006acc:	2300      	movs	r3, #0
 8006ace:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	015a      	lsls	r2, r3, #5
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	4413      	add	r3, r2
 8006ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006adc:	461a      	mov	r2, r3
 8006ade:	2300      	movs	r3, #0
 8006ae0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	015a      	lsls	r2, r3, #5
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	4413      	add	r3, r2
 8006aea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006aee:	461a      	mov	r2, r3
 8006af0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006af4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	3301      	adds	r3, #1
 8006afa:	613b      	str	r3, [r7, #16]
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	693a      	ldr	r2, [r7, #16]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d3b7      	bcc.n	8006a74 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b0a:	691b      	ldr	r3, [r3, #16]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d105      	bne.n	8006b38 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	f043 0210 	orr.w	r2, r3, #16
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	699a      	ldr	r2, [r3, #24]
 8006b3c:	4b0f      	ldr	r3, [pc, #60]	; (8006b7c <USB_DevInit+0x2c4>)
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	687a      	ldr	r2, [r7, #4]
 8006b42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d005      	beq.n	8006b56 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	f043 0208 	orr.w	r2, r3, #8
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d107      	bne.n	8006b6c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	699b      	ldr	r3, [r3, #24]
 8006b60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b64:	f043 0304 	orr.w	r3, r3, #4
 8006b68:	687a      	ldr	r2, [r7, #4]
 8006b6a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3718      	adds	r7, #24
 8006b72:	46bd      	mov	sp, r7
 8006b74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b78:	b004      	add	sp, #16
 8006b7a:	4770      	bx	lr
 8006b7c:	803c3800 	.word	0x803c3800

08006b80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b085      	sub	sp, #20
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006b8a:	2300      	movs	r3, #0
 8006b8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	3301      	adds	r3, #1
 8006b92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4a13      	ldr	r2, [pc, #76]	; (8006be4 <USB_FlushTxFifo+0x64>)
 8006b98:	4293      	cmp	r3, r2
 8006b9a:	d901      	bls.n	8006ba0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e01b      	b.n	8006bd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	691b      	ldr	r3, [r3, #16]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	daf2      	bge.n	8006b8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006ba8:	2300      	movs	r3, #0
 8006baa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	019b      	lsls	r3, r3, #6
 8006bb0:	f043 0220 	orr.w	r2, r3, #32
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	3301      	adds	r3, #1
 8006bbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	4a08      	ldr	r2, [pc, #32]	; (8006be4 <USB_FlushTxFifo+0x64>)
 8006bc2:	4293      	cmp	r3, r2
 8006bc4:	d901      	bls.n	8006bca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006bc6:	2303      	movs	r3, #3
 8006bc8:	e006      	b.n	8006bd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	f003 0320 	and.w	r3, r3, #32
 8006bd2:	2b20      	cmp	r3, #32
 8006bd4:	d0f0      	beq.n	8006bb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3714      	adds	r7, #20
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be2:	4770      	bx	lr
 8006be4:	00030d40 	.word	0x00030d40

08006be8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006be8:	b480      	push	{r7}
 8006bea:	b085      	sub	sp, #20
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	3301      	adds	r3, #1
 8006bf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	4a11      	ldr	r2, [pc, #68]	; (8006c44 <USB_FlushRxFifo+0x5c>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d901      	bls.n	8006c06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e018      	b.n	8006c38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	691b      	ldr	r3, [r3, #16]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	daf2      	bge.n	8006bf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c0e:	2300      	movs	r3, #0
 8006c10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2210      	movs	r2, #16
 8006c16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	3301      	adds	r3, #1
 8006c1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4a08      	ldr	r2, [pc, #32]	; (8006c44 <USB_FlushRxFifo+0x5c>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d901      	bls.n	8006c2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e006      	b.n	8006c38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f003 0310 	and.w	r3, r3, #16
 8006c32:	2b10      	cmp	r3, #16
 8006c34:	d0f0      	beq.n	8006c18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c36:	2300      	movs	r3, #0
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3714      	adds	r7, #20
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c42:	4770      	bx	lr
 8006c44:	00030d40 	.word	0x00030d40

08006c48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b085      	sub	sp, #20
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c5e:	681a      	ldr	r2, [r3, #0]
 8006c60:	78fb      	ldrb	r3, [r7, #3]
 8006c62:	68f9      	ldr	r1, [r7, #12]
 8006c64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3714      	adds	r7, #20
 8006c72:	46bd      	mov	sp, r7
 8006c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c78:	4770      	bx	lr

08006c7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006c7a:	b480      	push	{r7}
 8006c7c:	b087      	sub	sp, #28
 8006c7e:	af00      	add	r7, sp, #0
 8006c80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f003 0306 	and.w	r3, r3, #6
 8006c92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d102      	bne.n	8006ca0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006c9a:	2300      	movs	r3, #0
 8006c9c:	75fb      	strb	r3, [r7, #23]
 8006c9e:	e00a      	b.n	8006cb6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	2b02      	cmp	r3, #2
 8006ca4:	d002      	beq.n	8006cac <USB_GetDevSpeed+0x32>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2b06      	cmp	r3, #6
 8006caa:	d102      	bne.n	8006cb2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006cac:	2302      	movs	r3, #2
 8006cae:	75fb      	strb	r3, [r7, #23]
 8006cb0:	e001      	b.n	8006cb6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006cb2:	230f      	movs	r3, #15
 8006cb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006cb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cb8:	4618      	mov	r0, r3
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b085      	sub	sp, #20
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	785b      	ldrb	r3, [r3, #1]
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d13a      	bne.n	8006d56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ce6:	69da      	ldr	r2, [r3, #28]
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	781b      	ldrb	r3, [r3, #0]
 8006cec:	f003 030f 	and.w	r3, r3, #15
 8006cf0:	2101      	movs	r1, #1
 8006cf2:	fa01 f303 	lsl.w	r3, r1, r3
 8006cf6:	b29b      	uxth	r3, r3
 8006cf8:	68f9      	ldr	r1, [r7, #12]
 8006cfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	015a      	lsls	r2, r3, #5
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	4413      	add	r3, r2
 8006d0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d155      	bne.n	8006dc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	015a      	lsls	r2, r3, #5
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4413      	add	r3, r2
 8006d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	68db      	ldr	r3, [r3, #12]
 8006d2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	791b      	ldrb	r3, [r3, #4]
 8006d32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	059b      	lsls	r3, r3, #22
 8006d3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d3c:	4313      	orrs	r3, r2
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	0151      	lsls	r1, r2, #5
 8006d42:	68fa      	ldr	r2, [r7, #12]
 8006d44:	440a      	add	r2, r1
 8006d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d52:	6013      	str	r3, [r2, #0]
 8006d54:	e036      	b.n	8006dc4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d5c:	69da      	ldr	r2, [r3, #28]
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	f003 030f 	and.w	r3, r3, #15
 8006d66:	2101      	movs	r1, #1
 8006d68:	fa01 f303 	lsl.w	r3, r1, r3
 8006d6c:	041b      	lsls	r3, r3, #16
 8006d6e:	68f9      	ldr	r1, [r7, #12]
 8006d70:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d74:	4313      	orrs	r3, r2
 8006d76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006d78:	68bb      	ldr	r3, [r7, #8]
 8006d7a:	015a      	lsls	r2, r3, #5
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4413      	add	r3, r2
 8006d80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d11a      	bne.n	8006dc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	015a      	lsls	r2, r3, #5
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	4413      	add	r3, r2
 8006d96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006d9a:	681a      	ldr	r2, [r3, #0]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	68db      	ldr	r3, [r3, #12]
 8006da0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	791b      	ldrb	r3, [r3, #4]
 8006da8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006daa:	430b      	orrs	r3, r1
 8006dac:	4313      	orrs	r3, r2
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	0151      	lsls	r1, r2, #5
 8006db2:	68fa      	ldr	r2, [r7, #12]
 8006db4:	440a      	add	r2, r1
 8006db6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006dbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dc2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr
	...

08006dd4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006dd4:	b480      	push	{r7}
 8006dd6:	b085      	sub	sp, #20
 8006dd8:	af00      	add	r7, sp, #0
 8006dda:	6078      	str	r0, [r7, #4]
 8006ddc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	785b      	ldrb	r3, [r3, #1]
 8006dec:	2b01      	cmp	r3, #1
 8006dee:	d161      	bne.n	8006eb4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	015a      	lsls	r2, r3, #5
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	4413      	add	r3, r2
 8006df8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e06:	d11f      	bne.n	8006e48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	015a      	lsls	r2, r3, #5
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	4413      	add	r3, r2
 8006e10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68ba      	ldr	r2, [r7, #8]
 8006e18:	0151      	lsls	r1, r2, #5
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	440a      	add	r2, r1
 8006e1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006e28:	68bb      	ldr	r3, [r7, #8]
 8006e2a:	015a      	lsls	r2, r3, #5
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	4413      	add	r3, r2
 8006e30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	68ba      	ldr	r2, [r7, #8]
 8006e38:	0151      	lsls	r1, r2, #5
 8006e3a:	68fa      	ldr	r2, [r7, #12]
 8006e3c:	440a      	add	r2, r1
 8006e3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	781b      	ldrb	r3, [r3, #0]
 8006e54:	f003 030f 	and.w	r3, r3, #15
 8006e58:	2101      	movs	r1, #1
 8006e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8006e5e:	b29b      	uxth	r3, r3
 8006e60:	43db      	mvns	r3, r3
 8006e62:	68f9      	ldr	r1, [r7, #12]
 8006e64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e68:	4013      	ands	r3, r2
 8006e6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e72:	69da      	ldr	r2, [r3, #28]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	f003 030f 	and.w	r3, r3, #15
 8006e7c:	2101      	movs	r1, #1
 8006e7e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	43db      	mvns	r3, r3
 8006e86:	68f9      	ldr	r1, [r7, #12]
 8006e88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e8c:	4013      	ands	r3, r2
 8006e8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	015a      	lsls	r2, r3, #5
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	4413      	add	r3, r2
 8006e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e9c:	681a      	ldr	r2, [r3, #0]
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	0159      	lsls	r1, r3, #5
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	440b      	add	r3, r1
 8006ea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eaa:	4619      	mov	r1, r3
 8006eac:	4b35      	ldr	r3, [pc, #212]	; (8006f84 <USB_DeactivateEndpoint+0x1b0>)
 8006eae:	4013      	ands	r3, r2
 8006eb0:	600b      	str	r3, [r1, #0]
 8006eb2:	e060      	b.n	8006f76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	015a      	lsls	r2, r3, #5
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4413      	add	r3, r2
 8006ebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006eca:	d11f      	bne.n	8006f0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	015a      	lsls	r2, r3, #5
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68ba      	ldr	r2, [r7, #8]
 8006edc:	0151      	lsls	r1, r2, #5
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	440a      	add	r2, r1
 8006ee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006ee6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006eea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006eec:	68bb      	ldr	r3, [r7, #8]
 8006eee:	015a      	lsls	r2, r3, #5
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	68ba      	ldr	r2, [r7, #8]
 8006efc:	0151      	lsls	r1, r2, #5
 8006efe:	68fa      	ldr	r2, [r7, #12]
 8006f00:	440a      	add	r2, r1
 8006f02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	f003 030f 	and.w	r3, r3, #15
 8006f1c:	2101      	movs	r1, #1
 8006f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8006f22:	041b      	lsls	r3, r3, #16
 8006f24:	43db      	mvns	r3, r3
 8006f26:	68f9      	ldr	r1, [r7, #12]
 8006f28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f36:	69da      	ldr	r2, [r3, #28]
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	f003 030f 	and.w	r3, r3, #15
 8006f40:	2101      	movs	r1, #1
 8006f42:	fa01 f303 	lsl.w	r3, r1, r3
 8006f46:	041b      	lsls	r3, r3, #16
 8006f48:	43db      	mvns	r3, r3
 8006f4a:	68f9      	ldr	r1, [r7, #12]
 8006f4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f50:	4013      	ands	r3, r2
 8006f52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	015a      	lsls	r2, r3, #5
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4413      	add	r3, r2
 8006f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	0159      	lsls	r1, r3, #5
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	440b      	add	r3, r1
 8006f6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f6e:	4619      	mov	r1, r3
 8006f70:	4b05      	ldr	r3, [pc, #20]	; (8006f88 <USB_DeactivateEndpoint+0x1b4>)
 8006f72:	4013      	ands	r3, r2
 8006f74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006f76:	2300      	movs	r3, #0
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr
 8006f84:	ec337800 	.word	0xec337800
 8006f88:	eff37800 	.word	0xeff37800

08006f8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b08a      	sub	sp, #40	; 0x28
 8006f90:	af02      	add	r7, sp, #8
 8006f92:	60f8      	str	r0, [r7, #12]
 8006f94:	60b9      	str	r1, [r7, #8]
 8006f96:	4613      	mov	r3, r2
 8006f98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006f9e:	68bb      	ldr	r3, [r7, #8]
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	785b      	ldrb	r3, [r3, #1]
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	f040 815c 	bne.w	8007266 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006fae:	68bb      	ldr	r3, [r7, #8]
 8006fb0:	699b      	ldr	r3, [r3, #24]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d132      	bne.n	800701c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fb6:	69bb      	ldr	r3, [r7, #24]
 8006fb8:	015a      	lsls	r2, r3, #5
 8006fba:	69fb      	ldr	r3, [r7, #28]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	69ba      	ldr	r2, [r7, #24]
 8006fc6:	0151      	lsls	r1, r2, #5
 8006fc8:	69fa      	ldr	r2, [r7, #28]
 8006fca:	440a      	add	r2, r1
 8006fcc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fd0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006fd4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006fd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	015a      	lsls	r2, r3, #5
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fe6:	691b      	ldr	r3, [r3, #16]
 8006fe8:	69ba      	ldr	r2, [r7, #24]
 8006fea:	0151      	lsls	r1, r2, #5
 8006fec:	69fa      	ldr	r2, [r7, #28]
 8006fee:	440a      	add	r2, r1
 8006ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ff4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ff8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006ffa:	69bb      	ldr	r3, [r7, #24]
 8006ffc:	015a      	lsls	r2, r3, #5
 8006ffe:	69fb      	ldr	r3, [r7, #28]
 8007000:	4413      	add	r3, r2
 8007002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	69ba      	ldr	r2, [r7, #24]
 800700a:	0151      	lsls	r1, r2, #5
 800700c:	69fa      	ldr	r2, [r7, #28]
 800700e:	440a      	add	r2, r1
 8007010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007014:	0cdb      	lsrs	r3, r3, #19
 8007016:	04db      	lsls	r3, r3, #19
 8007018:	6113      	str	r3, [r2, #16]
 800701a:	e074      	b.n	8007106 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800701c:	69bb      	ldr	r3, [r7, #24]
 800701e:	015a      	lsls	r2, r3, #5
 8007020:	69fb      	ldr	r3, [r7, #28]
 8007022:	4413      	add	r3, r2
 8007024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007028:	691b      	ldr	r3, [r3, #16]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	0151      	lsls	r1, r2, #5
 800702e:	69fa      	ldr	r2, [r7, #28]
 8007030:	440a      	add	r2, r1
 8007032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007036:	0cdb      	lsrs	r3, r3, #19
 8007038:	04db      	lsls	r3, r3, #19
 800703a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800703c:	69bb      	ldr	r3, [r7, #24]
 800703e:	015a      	lsls	r2, r3, #5
 8007040:	69fb      	ldr	r3, [r7, #28]
 8007042:	4413      	add	r3, r2
 8007044:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	69ba      	ldr	r2, [r7, #24]
 800704c:	0151      	lsls	r1, r2, #5
 800704e:	69fa      	ldr	r2, [r7, #28]
 8007050:	440a      	add	r2, r1
 8007052:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007056:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800705a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800705e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	015a      	lsls	r2, r3, #5
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	4413      	add	r3, r2
 8007068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	6999      	ldr	r1, [r3, #24]
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	68db      	ldr	r3, [r3, #12]
 8007076:	440b      	add	r3, r1
 8007078:	1e59      	subs	r1, r3, #1
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	fbb1 f3f3 	udiv	r3, r1, r3
 8007082:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007084:	4b9d      	ldr	r3, [pc, #628]	; (80072fc <USB_EPStartXfer+0x370>)
 8007086:	400b      	ands	r3, r1
 8007088:	69b9      	ldr	r1, [r7, #24]
 800708a:	0148      	lsls	r0, r1, #5
 800708c:	69f9      	ldr	r1, [r7, #28]
 800708e:	4401      	add	r1, r0
 8007090:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007094:	4313      	orrs	r3, r2
 8007096:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	015a      	lsls	r2, r3, #5
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	4413      	add	r3, r2
 80070a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a4:	691a      	ldr	r2, [r3, #16]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	699b      	ldr	r3, [r3, #24]
 80070aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070ae:	69b9      	ldr	r1, [r7, #24]
 80070b0:	0148      	lsls	r0, r1, #5
 80070b2:	69f9      	ldr	r1, [r7, #28]
 80070b4:	4401      	add	r1, r0
 80070b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070ba:	4313      	orrs	r3, r2
 80070bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	791b      	ldrb	r3, [r3, #4]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d11f      	bne.n	8007106 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80070c6:	69bb      	ldr	r3, [r7, #24]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	0151      	lsls	r1, r2, #5
 80070d8:	69fa      	ldr	r2, [r7, #28]
 80070da:	440a      	add	r2, r1
 80070dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80070e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80070e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80070e6:	69bb      	ldr	r3, [r7, #24]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	69ba      	ldr	r2, [r7, #24]
 80070f6:	0151      	lsls	r1, r2, #5
 80070f8:	69fa      	ldr	r2, [r7, #28]
 80070fa:	440a      	add	r2, r1
 80070fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007100:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007104:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	2b01      	cmp	r3, #1
 800710a:	d14b      	bne.n	80071a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	695b      	ldr	r3, [r3, #20]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d009      	beq.n	8007128 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007114:	69bb      	ldr	r3, [r7, #24]
 8007116:	015a      	lsls	r2, r3, #5
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	4413      	add	r3, r2
 800711c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007120:	461a      	mov	r2, r3
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	695b      	ldr	r3, [r3, #20]
 8007126:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	791b      	ldrb	r3, [r3, #4]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d128      	bne.n	8007182 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007136:	689b      	ldr	r3, [r3, #8]
 8007138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800713c:	2b00      	cmp	r3, #0
 800713e:	d110      	bne.n	8007162 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007140:	69bb      	ldr	r3, [r7, #24]
 8007142:	015a      	lsls	r2, r3, #5
 8007144:	69fb      	ldr	r3, [r7, #28]
 8007146:	4413      	add	r3, r2
 8007148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	0151      	lsls	r1, r2, #5
 8007152:	69fa      	ldr	r2, [r7, #28]
 8007154:	440a      	add	r2, r1
 8007156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800715a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800715e:	6013      	str	r3, [r2, #0]
 8007160:	e00f      	b.n	8007182 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007162:	69bb      	ldr	r3, [r7, #24]
 8007164:	015a      	lsls	r2, r3, #5
 8007166:	69fb      	ldr	r3, [r7, #28]
 8007168:	4413      	add	r3, r2
 800716a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	69ba      	ldr	r2, [r7, #24]
 8007172:	0151      	lsls	r1, r2, #5
 8007174:	69fa      	ldr	r2, [r7, #28]
 8007176:	440a      	add	r2, r1
 8007178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800717c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007180:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007182:	69bb      	ldr	r3, [r7, #24]
 8007184:	015a      	lsls	r2, r3, #5
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	4413      	add	r3, r2
 800718a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	69ba      	ldr	r2, [r7, #24]
 8007192:	0151      	lsls	r1, r2, #5
 8007194:	69fa      	ldr	r2, [r7, #28]
 8007196:	440a      	add	r2, r1
 8007198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800719c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	e133      	b.n	800740c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071a4:	69bb      	ldr	r3, [r7, #24]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	69fb      	ldr	r3, [r7, #28]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	69ba      	ldr	r2, [r7, #24]
 80071b4:	0151      	lsls	r1, r2, #5
 80071b6:	69fa      	ldr	r2, [r7, #28]
 80071b8:	440a      	add	r2, r1
 80071ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	791b      	ldrb	r3, [r3, #4]
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d015      	beq.n	80071f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	699b      	ldr	r3, [r3, #24]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	f000 811b 	beq.w	800740c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071de:	68bb      	ldr	r3, [r7, #8]
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	f003 030f 	and.w	r3, r3, #15
 80071e6:	2101      	movs	r1, #1
 80071e8:	fa01 f303 	lsl.w	r3, r1, r3
 80071ec:	69f9      	ldr	r1, [r7, #28]
 80071ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80071f2:	4313      	orrs	r3, r2
 80071f4:	634b      	str	r3, [r1, #52]	; 0x34
 80071f6:	e109      	b.n	800740c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007204:	2b00      	cmp	r3, #0
 8007206:	d110      	bne.n	800722a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	015a      	lsls	r2, r3, #5
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	4413      	add	r3, r2
 8007210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	0151      	lsls	r1, r2, #5
 800721a:	69fa      	ldr	r2, [r7, #28]
 800721c:	440a      	add	r2, r1
 800721e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007222:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007226:	6013      	str	r3, [r2, #0]
 8007228:	e00f      	b.n	800724a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	015a      	lsls	r2, r3, #5
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	4413      	add	r3, r2
 8007232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	69ba      	ldr	r2, [r7, #24]
 800723a:	0151      	lsls	r1, r2, #5
 800723c:	69fa      	ldr	r2, [r7, #28]
 800723e:	440a      	add	r2, r1
 8007240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007248:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	6919      	ldr	r1, [r3, #16]
 800724e:	68bb      	ldr	r3, [r7, #8]
 8007250:	781a      	ldrb	r2, [r3, #0]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	699b      	ldr	r3, [r3, #24]
 8007256:	b298      	uxth	r0, r3
 8007258:	79fb      	ldrb	r3, [r7, #7]
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	4603      	mov	r3, r0
 800725e:	68f8      	ldr	r0, [r7, #12]
 8007260:	f000 fade 	bl	8007820 <USB_WritePacket>
 8007264:	e0d2      	b.n	800740c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	69fb      	ldr	r3, [r7, #28]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007272:	691b      	ldr	r3, [r3, #16]
 8007274:	69ba      	ldr	r2, [r7, #24]
 8007276:	0151      	lsls	r1, r2, #5
 8007278:	69fa      	ldr	r2, [r7, #28]
 800727a:	440a      	add	r2, r1
 800727c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007280:	0cdb      	lsrs	r3, r3, #19
 8007282:	04db      	lsls	r3, r3, #19
 8007284:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007286:	69bb      	ldr	r3, [r7, #24]
 8007288:	015a      	lsls	r2, r3, #5
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	4413      	add	r3, r2
 800728e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	69ba      	ldr	r2, [r7, #24]
 8007296:	0151      	lsls	r1, r2, #5
 8007298:	69fa      	ldr	r2, [r7, #28]
 800729a:	440a      	add	r2, r1
 800729c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072a0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072a4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072a8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80072aa:	68bb      	ldr	r3, [r7, #8]
 80072ac:	699b      	ldr	r3, [r3, #24]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d126      	bne.n	8007300 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80072b2:	69bb      	ldr	r3, [r7, #24]
 80072b4:	015a      	lsls	r2, r3, #5
 80072b6:	69fb      	ldr	r3, [r7, #28]
 80072b8:	4413      	add	r3, r2
 80072ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072be:	691a      	ldr	r2, [r3, #16]
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072c8:	69b9      	ldr	r1, [r7, #24]
 80072ca:	0148      	lsls	r0, r1, #5
 80072cc:	69f9      	ldr	r1, [r7, #28]
 80072ce:	4401      	add	r1, r0
 80072d0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80072d4:	4313      	orrs	r3, r2
 80072d6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072e4:	691b      	ldr	r3, [r3, #16]
 80072e6:	69ba      	ldr	r2, [r7, #24]
 80072e8:	0151      	lsls	r1, r2, #5
 80072ea:	69fa      	ldr	r2, [r7, #28]
 80072ec:	440a      	add	r2, r1
 80072ee:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80072f6:	6113      	str	r3, [r2, #16]
 80072f8:	e03a      	b.n	8007370 <USB_EPStartXfer+0x3e4>
 80072fa:	bf00      	nop
 80072fc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	699a      	ldr	r2, [r3, #24]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	68db      	ldr	r3, [r3, #12]
 8007308:	4413      	add	r3, r2
 800730a:	1e5a      	subs	r2, r3, #1
 800730c:	68bb      	ldr	r3, [r7, #8]
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	fbb2 f3f3 	udiv	r3, r2, r3
 8007314:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	8afa      	ldrh	r2, [r7, #22]
 800731c:	fb03 f202 	mul.w	r2, r3, r2
 8007320:	68bb      	ldr	r3, [r7, #8]
 8007322:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	015a      	lsls	r2, r3, #5
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	4413      	add	r3, r2
 800732c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007330:	691a      	ldr	r2, [r3, #16]
 8007332:	8afb      	ldrh	r3, [r7, #22]
 8007334:	04d9      	lsls	r1, r3, #19
 8007336:	4b38      	ldr	r3, [pc, #224]	; (8007418 <USB_EPStartXfer+0x48c>)
 8007338:	400b      	ands	r3, r1
 800733a:	69b9      	ldr	r1, [r7, #24]
 800733c:	0148      	lsls	r0, r1, #5
 800733e:	69f9      	ldr	r1, [r7, #28]
 8007340:	4401      	add	r1, r0
 8007342:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007346:	4313      	orrs	r3, r2
 8007348:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	015a      	lsls	r2, r3, #5
 800734e:	69fb      	ldr	r3, [r7, #28]
 8007350:	4413      	add	r3, r2
 8007352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007356:	691a      	ldr	r2, [r3, #16]
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	69db      	ldr	r3, [r3, #28]
 800735c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007360:	69b9      	ldr	r1, [r7, #24]
 8007362:	0148      	lsls	r0, r1, #5
 8007364:	69f9      	ldr	r1, [r7, #28]
 8007366:	4401      	add	r1, r0
 8007368:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800736c:	4313      	orrs	r3, r2
 800736e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007370:	79fb      	ldrb	r3, [r7, #7]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d10d      	bne.n	8007392 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	691b      	ldr	r3, [r3, #16]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d009      	beq.n	8007392 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	6919      	ldr	r1, [r3, #16]
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	015a      	lsls	r2, r3, #5
 8007386:	69fb      	ldr	r3, [r7, #28]
 8007388:	4413      	add	r3, r2
 800738a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738e:	460a      	mov	r2, r1
 8007390:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	791b      	ldrb	r3, [r3, #4]
 8007396:	2b01      	cmp	r3, #1
 8007398:	d128      	bne.n	80073ec <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a0:	689b      	ldr	r3, [r3, #8]
 80073a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d110      	bne.n	80073cc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	0151      	lsls	r1, r2, #5
 80073bc:	69fa      	ldr	r2, [r7, #28]
 80073be:	440a      	add	r2, r1
 80073c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073c8:	6013      	str	r3, [r2, #0]
 80073ca:	e00f      	b.n	80073ec <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	015a      	lsls	r2, r3, #5
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	0151      	lsls	r1, r2, #5
 80073de:	69fa      	ldr	r2, [r7, #28]
 80073e0:	440a      	add	r2, r1
 80073e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073ea:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80073ec:	69bb      	ldr	r3, [r7, #24]
 80073ee:	015a      	lsls	r2, r3, #5
 80073f0:	69fb      	ldr	r3, [r7, #28]
 80073f2:	4413      	add	r3, r2
 80073f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69ba      	ldr	r2, [r7, #24]
 80073fc:	0151      	lsls	r1, r2, #5
 80073fe:	69fa      	ldr	r2, [r7, #28]
 8007400:	440a      	add	r2, r1
 8007402:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007406:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800740a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
}
 800740e:	4618      	mov	r0, r3
 8007410:	3720      	adds	r7, #32
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	1ff80000 	.word	0x1ff80000

0800741c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800741c:	b480      	push	{r7}
 800741e:	b087      	sub	sp, #28
 8007420:	af00      	add	r7, sp, #0
 8007422:	60f8      	str	r0, [r7, #12]
 8007424:	60b9      	str	r1, [r7, #8]
 8007426:	4613      	mov	r3, r2
 8007428:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	785b      	ldrb	r3, [r3, #1]
 8007438:	2b01      	cmp	r3, #1
 800743a:	f040 80ce 	bne.w	80075da <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	699b      	ldr	r3, [r3, #24]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d132      	bne.n	80074ac <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	015a      	lsls	r2, r3, #5
 800744a:	697b      	ldr	r3, [r7, #20]
 800744c:	4413      	add	r3, r2
 800744e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	693a      	ldr	r2, [r7, #16]
 8007456:	0151      	lsls	r1, r2, #5
 8007458:	697a      	ldr	r2, [r7, #20]
 800745a:	440a      	add	r2, r1
 800745c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007460:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007464:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007468:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	697b      	ldr	r3, [r7, #20]
 8007470:	4413      	add	r3, r2
 8007472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	0151      	lsls	r1, r2, #5
 800747c:	697a      	ldr	r2, [r7, #20]
 800747e:	440a      	add	r2, r1
 8007480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007484:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007488:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	015a      	lsls	r2, r3, #5
 800748e:	697b      	ldr	r3, [r7, #20]
 8007490:	4413      	add	r3, r2
 8007492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	693a      	ldr	r2, [r7, #16]
 800749a:	0151      	lsls	r1, r2, #5
 800749c:	697a      	ldr	r2, [r7, #20]
 800749e:	440a      	add	r2, r1
 80074a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074a4:	0cdb      	lsrs	r3, r3, #19
 80074a6:	04db      	lsls	r3, r3, #19
 80074a8:	6113      	str	r3, [r2, #16]
 80074aa:	e04e      	b.n	800754a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074ac:	693b      	ldr	r3, [r7, #16]
 80074ae:	015a      	lsls	r2, r3, #5
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	4413      	add	r3, r2
 80074b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	0151      	lsls	r1, r2, #5
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	440a      	add	r2, r1
 80074c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074c6:	0cdb      	lsrs	r3, r3, #19
 80074c8:	04db      	lsls	r3, r3, #19
 80074ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	015a      	lsls	r2, r3, #5
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	4413      	add	r3, r2
 80074d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074d8:	691b      	ldr	r3, [r3, #16]
 80074da:	693a      	ldr	r2, [r7, #16]
 80074dc:	0151      	lsls	r1, r2, #5
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	440a      	add	r2, r1
 80074e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074e6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80074ea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80074ee:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	699a      	ldr	r2, [r3, #24]
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	68db      	ldr	r3, [r3, #12]
 80074f8:	429a      	cmp	r2, r3
 80074fa:	d903      	bls.n	8007504 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80074fc:	68bb      	ldr	r3, [r7, #8]
 80074fe:	68da      	ldr	r2, [r3, #12]
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	015a      	lsls	r2, r3, #5
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	4413      	add	r3, r2
 800750c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007510:	691b      	ldr	r3, [r3, #16]
 8007512:	693a      	ldr	r2, [r7, #16]
 8007514:	0151      	lsls	r1, r2, #5
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	440a      	add	r2, r1
 800751a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800751e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007522:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	015a      	lsls	r2, r3, #5
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	4413      	add	r3, r2
 800752c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007530:	691a      	ldr	r2, [r3, #16]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	699b      	ldr	r3, [r3, #24]
 8007536:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800753a:	6939      	ldr	r1, [r7, #16]
 800753c:	0148      	lsls	r0, r1, #5
 800753e:	6979      	ldr	r1, [r7, #20]
 8007540:	4401      	add	r1, r0
 8007542:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007546:	4313      	orrs	r3, r2
 8007548:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800754a:	79fb      	ldrb	r3, [r7, #7]
 800754c:	2b01      	cmp	r3, #1
 800754e:	d11e      	bne.n	800758e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d009      	beq.n	800756c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007564:	461a      	mov	r2, r3
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	695b      	ldr	r3, [r3, #20]
 800756a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	015a      	lsls	r2, r3, #5
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	4413      	add	r3, r2
 8007574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	0151      	lsls	r1, r2, #5
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	440a      	add	r2, r1
 8007582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007586:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800758a:	6013      	str	r3, [r2, #0]
 800758c:	e097      	b.n	80076be <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	015a      	lsls	r2, r3, #5
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	4413      	add	r3, r2
 8007596:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	0151      	lsls	r1, r2, #5
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	440a      	add	r2, r1
 80075a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075a8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075ac:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	699b      	ldr	r3, [r3, #24]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	f000 8083 	beq.w	80076be <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	f003 030f 	and.w	r3, r3, #15
 80075c8:	2101      	movs	r1, #1
 80075ca:	fa01 f303 	lsl.w	r3, r1, r3
 80075ce:	6979      	ldr	r1, [r7, #20]
 80075d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80075d4:	4313      	orrs	r3, r2
 80075d6:	634b      	str	r3, [r1, #52]	; 0x34
 80075d8:	e071      	b.n	80076be <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	693a      	ldr	r2, [r7, #16]
 80075ea:	0151      	lsls	r1, r2, #5
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	440a      	add	r2, r1
 80075f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075f4:	0cdb      	lsrs	r3, r3, #19
 80075f6:	04db      	lsls	r3, r3, #19
 80075f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80075fa:	693b      	ldr	r3, [r7, #16]
 80075fc:	015a      	lsls	r2, r3, #5
 80075fe:	697b      	ldr	r3, [r7, #20]
 8007600:	4413      	add	r3, r2
 8007602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007606:	691b      	ldr	r3, [r3, #16]
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	0151      	lsls	r1, r2, #5
 800760c:	697a      	ldr	r2, [r7, #20]
 800760e:	440a      	add	r2, r1
 8007610:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007614:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007618:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800761c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800761e:	68bb      	ldr	r3, [r7, #8]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d003      	beq.n	800762e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007626:	68bb      	ldr	r3, [r7, #8]
 8007628:	68da      	ldr	r2, [r3, #12]
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	68da      	ldr	r2, [r3, #12]
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	4413      	add	r3, r2
 800763e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	0151      	lsls	r1, r2, #5
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	440a      	add	r2, r1
 800764c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007650:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007654:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	697b      	ldr	r3, [r7, #20]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007662:	691a      	ldr	r2, [r3, #16]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	69db      	ldr	r3, [r3, #28]
 8007668:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800766c:	6939      	ldr	r1, [r7, #16]
 800766e:	0148      	lsls	r0, r1, #5
 8007670:	6979      	ldr	r1, [r7, #20]
 8007672:	4401      	add	r1, r0
 8007674:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007678:	4313      	orrs	r3, r2
 800767a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800767c:	79fb      	ldrb	r3, [r7, #7]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d10d      	bne.n	800769e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	691b      	ldr	r3, [r3, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d009      	beq.n	800769e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	6919      	ldr	r1, [r3, #16]
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	015a      	lsls	r2, r3, #5
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	4413      	add	r3, r2
 8007696:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800769a:	460a      	mov	r2, r1
 800769c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	015a      	lsls	r2, r3, #5
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	4413      	add	r3, r2
 80076a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	693a      	ldr	r2, [r7, #16]
 80076ae:	0151      	lsls	r1, r2, #5
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	440a      	add	r2, r1
 80076b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076be:	2300      	movs	r3, #0
}
 80076c0:	4618      	mov	r0, r3
 80076c2:	371c      	adds	r7, #28
 80076c4:	46bd      	mov	sp, r7
 80076c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ca:	4770      	bx	lr

080076cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80076cc:	b480      	push	{r7}
 80076ce:	b087      	sub	sp, #28
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	785b      	ldrb	r3, [r3, #1]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d14a      	bne.n	8007780 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	781b      	ldrb	r3, [r3, #0]
 80076ee:	015a      	lsls	r2, r3, #5
 80076f0:	693b      	ldr	r3, [r7, #16]
 80076f2:	4413      	add	r3, r2
 80076f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80076fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007702:	f040 8086 	bne.w	8007812 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007706:	683b      	ldr	r3, [r7, #0]
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	015a      	lsls	r2, r3, #5
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	4413      	add	r3, r2
 8007710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	683a      	ldr	r2, [r7, #0]
 8007718:	7812      	ldrb	r2, [r2, #0]
 800771a:	0151      	lsls	r1, r2, #5
 800771c:	693a      	ldr	r2, [r7, #16]
 800771e:	440a      	add	r2, r1
 8007720:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007724:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007728:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	015a      	lsls	r2, r3, #5
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	4413      	add	r3, r2
 8007734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	683a      	ldr	r2, [r7, #0]
 800773c:	7812      	ldrb	r2, [r2, #0]
 800773e:	0151      	lsls	r1, r2, #5
 8007740:	693a      	ldr	r2, [r7, #16]
 8007742:	440a      	add	r2, r1
 8007744:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007748:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800774c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	3301      	adds	r3, #1
 8007752:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f242 7210 	movw	r2, #10000	; 0x2710
 800775a:	4293      	cmp	r3, r2
 800775c:	d902      	bls.n	8007764 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800775e:	2301      	movs	r3, #1
 8007760:	75fb      	strb	r3, [r7, #23]
          break;
 8007762:	e056      	b.n	8007812 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	781b      	ldrb	r3, [r3, #0]
 8007768:	015a      	lsls	r2, r3, #5
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	4413      	add	r3, r2
 800776e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007778:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800777c:	d0e7      	beq.n	800774e <USB_EPStopXfer+0x82>
 800777e:	e048      	b.n	8007812 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007780:	683b      	ldr	r3, [r7, #0]
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	015a      	lsls	r2, r3, #5
 8007786:	693b      	ldr	r3, [r7, #16]
 8007788:	4413      	add	r3, r2
 800778a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007794:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007798:	d13b      	bne.n	8007812 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800779a:	683b      	ldr	r3, [r7, #0]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	015a      	lsls	r2, r3, #5
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	4413      	add	r3, r2
 80077a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	7812      	ldrb	r2, [r2, #0]
 80077ae:	0151      	lsls	r1, r2, #5
 80077b0:	693a      	ldr	r2, [r7, #16]
 80077b2:	440a      	add	r2, r1
 80077b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077b8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	015a      	lsls	r2, r3, #5
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	4413      	add	r3, r2
 80077c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	683a      	ldr	r2, [r7, #0]
 80077d0:	7812      	ldrb	r2, [r2, #0]
 80077d2:	0151      	lsls	r1, r2, #5
 80077d4:	693a      	ldr	r2, [r7, #16]
 80077d6:	440a      	add	r2, r1
 80077d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	3301      	adds	r3, #1
 80077e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	f242 7210 	movw	r2, #10000	; 0x2710
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d902      	bls.n	80077f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80077f2:	2301      	movs	r3, #1
 80077f4:	75fb      	strb	r3, [r7, #23]
          break;
 80077f6:	e00c      	b.n	8007812 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80077f8:	683b      	ldr	r3, [r7, #0]
 80077fa:	781b      	ldrb	r3, [r3, #0]
 80077fc:	015a      	lsls	r2, r3, #5
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	4413      	add	r3, r2
 8007802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800780c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007810:	d0e7      	beq.n	80077e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007812:	7dfb      	ldrb	r3, [r7, #23]
}
 8007814:	4618      	mov	r0, r3
 8007816:	371c      	adds	r7, #28
 8007818:	46bd      	mov	sp, r7
 800781a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781e:	4770      	bx	lr

08007820 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007820:	b480      	push	{r7}
 8007822:	b089      	sub	sp, #36	; 0x24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	60b9      	str	r1, [r7, #8]
 800782a:	4611      	mov	r1, r2
 800782c:	461a      	mov	r2, r3
 800782e:	460b      	mov	r3, r1
 8007830:	71fb      	strb	r3, [r7, #7]
 8007832:	4613      	mov	r3, r2
 8007834:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800783a:	68bb      	ldr	r3, [r7, #8]
 800783c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800783e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007842:	2b00      	cmp	r3, #0
 8007844:	d123      	bne.n	800788e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007846:	88bb      	ldrh	r3, [r7, #4]
 8007848:	3303      	adds	r3, #3
 800784a:	089b      	lsrs	r3, r3, #2
 800784c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800784e:	2300      	movs	r3, #0
 8007850:	61bb      	str	r3, [r7, #24]
 8007852:	e018      	b.n	8007886 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007854:	79fb      	ldrb	r3, [r7, #7]
 8007856:	031a      	lsls	r2, r3, #12
 8007858:	697b      	ldr	r3, [r7, #20]
 800785a:	4413      	add	r3, r2
 800785c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007860:	461a      	mov	r2, r3
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	3301      	adds	r3, #1
 800786c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800786e:	69fb      	ldr	r3, [r7, #28]
 8007870:	3301      	adds	r3, #1
 8007872:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	3301      	adds	r3, #1
 8007878:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800787a:	69fb      	ldr	r3, [r7, #28]
 800787c:	3301      	adds	r3, #1
 800787e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	3301      	adds	r3, #1
 8007884:	61bb      	str	r3, [r7, #24]
 8007886:	69ba      	ldr	r2, [r7, #24]
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	429a      	cmp	r2, r3
 800788c:	d3e2      	bcc.n	8007854 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800788e:	2300      	movs	r3, #0
}
 8007890:	4618      	mov	r0, r3
 8007892:	3724      	adds	r7, #36	; 0x24
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800789c:	b480      	push	{r7}
 800789e:	b08b      	sub	sp, #44	; 0x2c
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	60f8      	str	r0, [r7, #12]
 80078a4:	60b9      	str	r1, [r7, #8]
 80078a6:	4613      	mov	r3, r2
 80078a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80078b2:	88fb      	ldrh	r3, [r7, #6]
 80078b4:	089b      	lsrs	r3, r3, #2
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80078ba:	88fb      	ldrh	r3, [r7, #6]
 80078bc:	f003 0303 	and.w	r3, r3, #3
 80078c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80078c2:	2300      	movs	r3, #0
 80078c4:	623b      	str	r3, [r7, #32]
 80078c6:	e014      	b.n	80078f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80078c8:	69bb      	ldr	r3, [r7, #24]
 80078ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	3301      	adds	r3, #1
 80078d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078dc:	3301      	adds	r3, #1
 80078de:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e2:	3301      	adds	r3, #1
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	3301      	adds	r3, #1
 80078ea:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	3301      	adds	r3, #1
 80078f0:	623b      	str	r3, [r7, #32]
 80078f2:	6a3a      	ldr	r2, [r7, #32]
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d3e6      	bcc.n	80078c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80078fa:	8bfb      	ldrh	r3, [r7, #30]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d01e      	beq.n	800793e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007900:	2300      	movs	r3, #0
 8007902:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800790a:	461a      	mov	r2, r3
 800790c:	f107 0310 	add.w	r3, r7, #16
 8007910:	6812      	ldr	r2, [r2, #0]
 8007912:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007914:	693a      	ldr	r2, [r7, #16]
 8007916:	6a3b      	ldr	r3, [r7, #32]
 8007918:	b2db      	uxtb	r3, r3
 800791a:	00db      	lsls	r3, r3, #3
 800791c:	fa22 f303 	lsr.w	r3, r2, r3
 8007920:	b2da      	uxtb	r2, r3
 8007922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007924:	701a      	strb	r2, [r3, #0]
      i++;
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	3301      	adds	r3, #1
 800792a:	623b      	str	r3, [r7, #32]
      pDest++;
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	3301      	adds	r3, #1
 8007930:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007932:	8bfb      	ldrh	r3, [r7, #30]
 8007934:	3b01      	subs	r3, #1
 8007936:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007938:	8bfb      	ldrh	r3, [r7, #30]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d1ea      	bne.n	8007914 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800793e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007940:	4618      	mov	r0, r3
 8007942:	372c      	adds	r7, #44	; 0x2c
 8007944:	46bd      	mov	sp, r7
 8007946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794a:	4770      	bx	lr

0800794c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800794c:	b480      	push	{r7}
 800794e:	b085      	sub	sp, #20
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	781b      	ldrb	r3, [r3, #0]
 800795e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	785b      	ldrb	r3, [r3, #1]
 8007964:	2b01      	cmp	r3, #1
 8007966:	d12c      	bne.n	80079c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007968:	68bb      	ldr	r3, [r7, #8]
 800796a:	015a      	lsls	r2, r3, #5
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	4413      	add	r3, r2
 8007970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	2b00      	cmp	r3, #0
 8007978:	db12      	blt.n	80079a0 <USB_EPSetStall+0x54>
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d00f      	beq.n	80079a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	015a      	lsls	r2, r3, #5
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	4413      	add	r3, r2
 8007988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68ba      	ldr	r2, [r7, #8]
 8007990:	0151      	lsls	r1, r2, #5
 8007992:	68fa      	ldr	r2, [r7, #12]
 8007994:	440a      	add	r2, r1
 8007996:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800799a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800799e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68ba      	ldr	r2, [r7, #8]
 80079b0:	0151      	lsls	r1, r2, #5
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	440a      	add	r2, r1
 80079b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079be:	6013      	str	r3, [r2, #0]
 80079c0:	e02b      	b.n	8007a1a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	015a      	lsls	r2, r3, #5
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	4413      	add	r3, r2
 80079ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	db12      	blt.n	80079fa <USB_EPSetStall+0xae>
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00f      	beq.n	80079fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80079da:	68bb      	ldr	r3, [r7, #8]
 80079dc:	015a      	lsls	r2, r3, #5
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	4413      	add	r3, r2
 80079e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68ba      	ldr	r2, [r7, #8]
 80079ea:	0151      	lsls	r1, r2, #5
 80079ec:	68fa      	ldr	r2, [r7, #12]
 80079ee:	440a      	add	r2, r1
 80079f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079f4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80079fa:	68bb      	ldr	r3, [r7, #8]
 80079fc:	015a      	lsls	r2, r3, #5
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	4413      	add	r3, r2
 8007a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68ba      	ldr	r2, [r7, #8]
 8007a0a:	0151      	lsls	r1, r2, #5
 8007a0c:	68fa      	ldr	r2, [r7, #12]
 8007a0e:	440a      	add	r2, r1
 8007a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a14:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a18:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a28:	b480      	push	{r7}
 8007a2a:	b085      	sub	sp, #20
 8007a2c:	af00      	add	r7, sp, #0
 8007a2e:	6078      	str	r0, [r7, #4]
 8007a30:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	785b      	ldrb	r3, [r3, #1]
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d128      	bne.n	8007a96 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a44:	68bb      	ldr	r3, [r7, #8]
 8007a46:	015a      	lsls	r2, r3, #5
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	4413      	add	r3, r2
 8007a4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	0151      	lsls	r1, r2, #5
 8007a56:	68fa      	ldr	r2, [r7, #12]
 8007a58:	440a      	add	r2, r1
 8007a5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a5e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a62:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a64:	683b      	ldr	r3, [r7, #0]
 8007a66:	791b      	ldrb	r3, [r3, #4]
 8007a68:	2b03      	cmp	r3, #3
 8007a6a:	d003      	beq.n	8007a74 <USB_EPClearStall+0x4c>
 8007a6c:	683b      	ldr	r3, [r7, #0]
 8007a6e:	791b      	ldrb	r3, [r3, #4]
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d138      	bne.n	8007ae6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	015a      	lsls	r2, r3, #5
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	4413      	add	r3, r2
 8007a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	68ba      	ldr	r2, [r7, #8]
 8007a84:	0151      	lsls	r1, r2, #5
 8007a86:	68fa      	ldr	r2, [r7, #12]
 8007a88:	440a      	add	r2, r1
 8007a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a92:	6013      	str	r3, [r2, #0]
 8007a94:	e027      	b.n	8007ae6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007a96:	68bb      	ldr	r3, [r7, #8]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	0151      	lsls	r1, r2, #5
 8007aa8:	68fa      	ldr	r2, [r7, #12]
 8007aaa:	440a      	add	r2, r1
 8007aac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ab0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ab4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	791b      	ldrb	r3, [r3, #4]
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	d003      	beq.n	8007ac6 <USB_EPClearStall+0x9e>
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	791b      	ldrb	r3, [r3, #4]
 8007ac2:	2b02      	cmp	r3, #2
 8007ac4:	d10f      	bne.n	8007ae6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	015a      	lsls	r2, r3, #5
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	4413      	add	r3, r2
 8007ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68ba      	ldr	r2, [r7, #8]
 8007ad6:	0151      	lsls	r1, r2, #5
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	440a      	add	r2, r1
 8007adc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ae4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	460b      	mov	r3, r1
 8007afe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b12:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007b16:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	78fb      	ldrb	r3, [r7, #3]
 8007b22:	011b      	lsls	r3, r3, #4
 8007b24:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007b28:	68f9      	ldr	r1, [r7, #12]
 8007b2a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007b32:	2300      	movs	r3, #0
}
 8007b34:	4618      	mov	r0, r3
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr

08007b40 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b40:	b480      	push	{r7}
 8007b42:	b085      	sub	sp, #20
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b5a:	f023 0303 	bic.w	r3, r3, #3
 8007b5e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b66:	685b      	ldr	r3, [r3, #4]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b6e:	f023 0302 	bic.w	r3, r3, #2
 8007b72:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007b74:	2300      	movs	r3, #0
}
 8007b76:	4618      	mov	r0, r3
 8007b78:	3714      	adds	r7, #20
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b80:	4770      	bx	lr

08007b82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b82:	b480      	push	{r7}
 8007b84:	b085      	sub	sp, #20
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68fa      	ldr	r2, [r7, #12]
 8007b98:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b9c:	f023 0303 	bic.w	r3, r3, #3
 8007ba0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007bb0:	f043 0302 	orr.w	r3, r3, #2
 8007bb4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bb6:	2300      	movs	r3, #0
}
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3714      	adds	r7, #20
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc2:	4770      	bx	lr

08007bc4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007bc4:	b480      	push	{r7}
 8007bc6:	b085      	sub	sp, #20
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	695b      	ldr	r3, [r3, #20]
 8007bd0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	4013      	ands	r3, r2
 8007bda:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007bea:	b480      	push	{r7}
 8007bec:	b085      	sub	sp, #20
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bfc:	699b      	ldr	r3, [r3, #24]
 8007bfe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c06:	69db      	ldr	r3, [r3, #28]
 8007c08:	68ba      	ldr	r2, [r7, #8]
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007c0e:	68bb      	ldr	r3, [r7, #8]
 8007c10:	0c1b      	lsrs	r3, r3, #16
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b085      	sub	sp, #20
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	b29b      	uxth	r3, r3
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b085      	sub	sp, #20
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
 8007c5a:	460b      	mov	r3, r1
 8007c5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c62:	78fb      	ldrb	r3, [r7, #3]
 8007c64:	015a      	lsls	r2, r3, #5
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	4413      	add	r3, r2
 8007c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c78:	695b      	ldr	r3, [r3, #20]
 8007c7a:	68ba      	ldr	r2, [r7, #8]
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007c80:	68bb      	ldr	r3, [r7, #8]
}
 8007c82:	4618      	mov	r0, r3
 8007c84:	3714      	adds	r7, #20
 8007c86:	46bd      	mov	sp, r7
 8007c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8c:	4770      	bx	lr

08007c8e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c8e:	b480      	push	{r7}
 8007c90:	b087      	sub	sp, #28
 8007c92:	af00      	add	r7, sp, #0
 8007c94:	6078      	str	r0, [r7, #4]
 8007c96:	460b      	mov	r3, r1
 8007c98:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cb0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007cb2:	78fb      	ldrb	r3, [r7, #3]
 8007cb4:	f003 030f 	and.w	r3, r3, #15
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	fa22 f303 	lsr.w	r3, r2, r3
 8007cbe:	01db      	lsls	r3, r3, #7
 8007cc0:	b2db      	uxtb	r3, r3
 8007cc2:	693a      	ldr	r2, [r7, #16]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007cc8:	78fb      	ldrb	r3, [r7, #3]
 8007cca:	015a      	lsls	r2, r3, #5
 8007ccc:	697b      	ldr	r3, [r7, #20]
 8007cce:	4413      	add	r3, r2
 8007cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	4013      	ands	r3, r2
 8007cda:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007cdc:	68bb      	ldr	r3, [r7, #8]
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	371c      	adds	r7, #28
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr

08007cea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007cea:	b480      	push	{r7}
 8007cec:	b083      	sub	sp, #12
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	695b      	ldr	r3, [r3, #20]
 8007cf6:	f003 0301 	and.w	r3, r3, #1
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	370c      	adds	r7, #12
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr

08007d06 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007d06:	b480      	push	{r7}
 8007d08:	b085      	sub	sp, #20
 8007d0a:	af00      	add	r7, sp, #0
 8007d0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	68fa      	ldr	r2, [r7, #12]
 8007d1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d20:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007d24:	f023 0307 	bic.w	r3, r3, #7
 8007d28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d30:	685b      	ldr	r3, [r3, #4]
 8007d32:	68fa      	ldr	r2, [r7, #12]
 8007d34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b087      	sub	sp, #28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	460b      	mov	r3, r1
 8007d56:	607a      	str	r2, [r7, #4]
 8007d58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	333c      	adds	r3, #60	; 0x3c
 8007d62:	3304      	adds	r3, #4
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	4a26      	ldr	r2, [pc, #152]	; (8007e04 <USB_EP0_OutStart+0xb8>)
 8007d6c:	4293      	cmp	r3, r2
 8007d6e:	d90a      	bls.n	8007d86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007d7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007d80:	d101      	bne.n	8007d86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007d82:	2300      	movs	r3, #0
 8007d84:	e037      	b.n	8007df6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007d86:	697b      	ldr	r3, [r7, #20]
 8007d88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	2300      	movs	r3, #0
 8007d90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007d92:	697b      	ldr	r3, [r7, #20]
 8007d94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	697a      	ldr	r2, [r7, #20]
 8007d9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007da0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007da4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	697a      	ldr	r2, [r7, #20]
 8007db0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007db4:	f043 0318 	orr.w	r3, r3, #24
 8007db8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	697a      	ldr	r2, [r7, #20]
 8007dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dc8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007dcc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007dce:	7afb      	ldrb	r3, [r7, #11]
 8007dd0:	2b01      	cmp	r3, #1
 8007dd2:	d10f      	bne.n	8007df4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dda:	461a      	mov	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	697a      	ldr	r2, [r7, #20]
 8007dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dee:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007df2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	371c      	adds	r7, #28
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr
 8007e02:	bf00      	nop
 8007e04:	4f54300a 	.word	0x4f54300a

08007e08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e10:	2300      	movs	r3, #0
 8007e12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	3301      	adds	r3, #1
 8007e18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	4a13      	ldr	r2, [pc, #76]	; (8007e6c <USB_CoreReset+0x64>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d901      	bls.n	8007e26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e22:	2303      	movs	r3, #3
 8007e24:	e01b      	b.n	8007e5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	691b      	ldr	r3, [r3, #16]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	daf2      	bge.n	8007e14 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	691b      	ldr	r3, [r3, #16]
 8007e36:	f043 0201 	orr.w	r2, r3, #1
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	3301      	adds	r3, #1
 8007e42:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4a09      	ldr	r2, [pc, #36]	; (8007e6c <USB_CoreReset+0x64>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d901      	bls.n	8007e50 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e4c:	2303      	movs	r3, #3
 8007e4e:	e006      	b.n	8007e5e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	691b      	ldr	r3, [r3, #16]
 8007e54:	f003 0301 	and.w	r3, r3, #1
 8007e58:	2b01      	cmp	r3, #1
 8007e5a:	d0f0      	beq.n	8007e3e <USB_CoreReset+0x36>

  return HAL_OK;
 8007e5c:	2300      	movs	r3, #0
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3714      	adds	r7, #20
 8007e62:	46bd      	mov	sp, r7
 8007e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e68:	4770      	bx	lr
 8007e6a:	bf00      	nop
 8007e6c:	00030d40 	.word	0x00030d40

08007e70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	460b      	mov	r3, r1
 8007e7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007e7c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007e80:	f002 fc94 	bl	800a7ac <USBD_static_malloc>
 8007e84:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d109      	bne.n	8007ea0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	32b0      	adds	r2, #176	; 0xb0
 8007e96:	2100      	movs	r1, #0
 8007e98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007e9c:	2302      	movs	r3, #2
 8007e9e:	e0d4      	b.n	800804a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007ea0:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007ea4:	2100      	movs	r1, #0
 8007ea6:	68f8      	ldr	r0, [r7, #12]
 8007ea8:	f002 fcee 	bl	800a888 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	32b0      	adds	r2, #176	; 0xb0
 8007eb6:	68f9      	ldr	r1, [r7, #12]
 8007eb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	32b0      	adds	r2, #176	; 0xb0
 8007ec6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	7c1b      	ldrb	r3, [r3, #16]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d138      	bne.n	8007f4a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007ed8:	4b5e      	ldr	r3, [pc, #376]	; (8008054 <USBD_CDC_Init+0x1e4>)
 8007eda:	7819      	ldrb	r1, [r3, #0]
 8007edc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ee0:	2202      	movs	r2, #2
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f002 fb3f 	bl	800a566 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007ee8:	4b5a      	ldr	r3, [pc, #360]	; (8008054 <USBD_CDC_Init+0x1e4>)
 8007eea:	781b      	ldrb	r3, [r3, #0]
 8007eec:	f003 020f 	and.w	r2, r3, #15
 8007ef0:	6879      	ldr	r1, [r7, #4]
 8007ef2:	4613      	mov	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4413      	add	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	440b      	add	r3, r1
 8007efc:	3324      	adds	r3, #36	; 0x24
 8007efe:	2201      	movs	r2, #1
 8007f00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007f02:	4b55      	ldr	r3, [pc, #340]	; (8008058 <USBD_CDC_Init+0x1e8>)
 8007f04:	7819      	ldrb	r1, [r3, #0]
 8007f06:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f0a:	2202      	movs	r2, #2
 8007f0c:	6878      	ldr	r0, [r7, #4]
 8007f0e:	f002 fb2a 	bl	800a566 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007f12:	4b51      	ldr	r3, [pc, #324]	; (8008058 <USBD_CDC_Init+0x1e8>)
 8007f14:	781b      	ldrb	r3, [r3, #0]
 8007f16:	f003 020f 	and.w	r2, r3, #15
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	009b      	lsls	r3, r3, #2
 8007f20:	4413      	add	r3, r2
 8007f22:	009b      	lsls	r3, r3, #2
 8007f24:	440b      	add	r3, r1
 8007f26:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007f2e:	4b4b      	ldr	r3, [pc, #300]	; (800805c <USBD_CDC_Init+0x1ec>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	f003 020f 	and.w	r2, r3, #15
 8007f36:	6879      	ldr	r1, [r7, #4]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	009b      	lsls	r3, r3, #2
 8007f3c:	4413      	add	r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	440b      	add	r3, r1
 8007f42:	3326      	adds	r3, #38	; 0x26
 8007f44:	2210      	movs	r2, #16
 8007f46:	801a      	strh	r2, [r3, #0]
 8007f48:	e035      	b.n	8007fb6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f4a:	4b42      	ldr	r3, [pc, #264]	; (8008054 <USBD_CDC_Init+0x1e4>)
 8007f4c:	7819      	ldrb	r1, [r3, #0]
 8007f4e:	2340      	movs	r3, #64	; 0x40
 8007f50:	2202      	movs	r2, #2
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f002 fb07 	bl	800a566 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f58:	4b3e      	ldr	r3, [pc, #248]	; (8008054 <USBD_CDC_Init+0x1e4>)
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	f003 020f 	and.w	r2, r3, #15
 8007f60:	6879      	ldr	r1, [r7, #4]
 8007f62:	4613      	mov	r3, r2
 8007f64:	009b      	lsls	r3, r3, #2
 8007f66:	4413      	add	r3, r2
 8007f68:	009b      	lsls	r3, r3, #2
 8007f6a:	440b      	add	r3, r1
 8007f6c:	3324      	adds	r3, #36	; 0x24
 8007f6e:	2201      	movs	r2, #1
 8007f70:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007f72:	4b39      	ldr	r3, [pc, #228]	; (8008058 <USBD_CDC_Init+0x1e8>)
 8007f74:	7819      	ldrb	r1, [r3, #0]
 8007f76:	2340      	movs	r3, #64	; 0x40
 8007f78:	2202      	movs	r2, #2
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f002 faf3 	bl	800a566 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007f80:	4b35      	ldr	r3, [pc, #212]	; (8008058 <USBD_CDC_Init+0x1e8>)
 8007f82:	781b      	ldrb	r3, [r3, #0]
 8007f84:	f003 020f 	and.w	r2, r3, #15
 8007f88:	6879      	ldr	r1, [r7, #4]
 8007f8a:	4613      	mov	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4413      	add	r3, r2
 8007f90:	009b      	lsls	r3, r3, #2
 8007f92:	440b      	add	r3, r1
 8007f94:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f98:	2201      	movs	r2, #1
 8007f9a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007f9c:	4b2f      	ldr	r3, [pc, #188]	; (800805c <USBD_CDC_Init+0x1ec>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	f003 020f 	and.w	r2, r3, #15
 8007fa4:	6879      	ldr	r1, [r7, #4]
 8007fa6:	4613      	mov	r3, r2
 8007fa8:	009b      	lsls	r3, r3, #2
 8007faa:	4413      	add	r3, r2
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	440b      	add	r3, r1
 8007fb0:	3326      	adds	r3, #38	; 0x26
 8007fb2:	2210      	movs	r2, #16
 8007fb4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007fb6:	4b29      	ldr	r3, [pc, #164]	; (800805c <USBD_CDC_Init+0x1ec>)
 8007fb8:	7819      	ldrb	r1, [r3, #0]
 8007fba:	2308      	movs	r3, #8
 8007fbc:	2203      	movs	r2, #3
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f002 fad1 	bl	800a566 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007fc4:	4b25      	ldr	r3, [pc, #148]	; (800805c <USBD_CDC_Init+0x1ec>)
 8007fc6:	781b      	ldrb	r3, [r3, #0]
 8007fc8:	f003 020f 	and.w	r2, r3, #15
 8007fcc:	6879      	ldr	r1, [r7, #4]
 8007fce:	4613      	mov	r3, r2
 8007fd0:	009b      	lsls	r3, r3, #2
 8007fd2:	4413      	add	r3, r2
 8007fd4:	009b      	lsls	r3, r3, #2
 8007fd6:	440b      	add	r3, r1
 8007fd8:	3324      	adds	r3, #36	; 0x24
 8007fda:	2201      	movs	r2, #1
 8007fdc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	33b0      	adds	r3, #176	; 0xb0
 8007ff0:	009b      	lsls	r3, r3, #2
 8007ff2:	4413      	add	r3, r2
 8007ff4:	685b      	ldr	r3, [r3, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	2200      	movs	r2, #0
 8008006:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008014:	2302      	movs	r3, #2
 8008016:	e018      	b.n	800804a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	7c1b      	ldrb	r3, [r3, #16]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d10a      	bne.n	8008036 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008020:	4b0d      	ldr	r3, [pc, #52]	; (8008058 <USBD_CDC_Init+0x1e8>)
 8008022:	7819      	ldrb	r1, [r3, #0]
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800802a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800802e:	6878      	ldr	r0, [r7, #4]
 8008030:	f002 fb88 	bl	800a744 <USBD_LL_PrepareReceive>
 8008034:	e008      	b.n	8008048 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008036:	4b08      	ldr	r3, [pc, #32]	; (8008058 <USBD_CDC_Init+0x1e8>)
 8008038:	7819      	ldrb	r1, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008040:	2340      	movs	r3, #64	; 0x40
 8008042:	6878      	ldr	r0, [r7, #4]
 8008044:	f002 fb7e 	bl	800a744 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008048:	2300      	movs	r3, #0
}
 800804a:	4618      	mov	r0, r3
 800804c:	3710      	adds	r7, #16
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	200000d3 	.word	0x200000d3
 8008058:	200000d4 	.word	0x200000d4
 800805c:	200000d5 	.word	0x200000d5

08008060 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008060:	b580      	push	{r7, lr}
 8008062:	b082      	sub	sp, #8
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	460b      	mov	r3, r1
 800806a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800806c:	4b3a      	ldr	r3, [pc, #232]	; (8008158 <USBD_CDC_DeInit+0xf8>)
 800806e:	781b      	ldrb	r3, [r3, #0]
 8008070:	4619      	mov	r1, r3
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f002 fa9d 	bl	800a5b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008078:	4b37      	ldr	r3, [pc, #220]	; (8008158 <USBD_CDC_DeInit+0xf8>)
 800807a:	781b      	ldrb	r3, [r3, #0]
 800807c:	f003 020f 	and.w	r2, r3, #15
 8008080:	6879      	ldr	r1, [r7, #4]
 8008082:	4613      	mov	r3, r2
 8008084:	009b      	lsls	r3, r3, #2
 8008086:	4413      	add	r3, r2
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	440b      	add	r3, r1
 800808c:	3324      	adds	r3, #36	; 0x24
 800808e:	2200      	movs	r2, #0
 8008090:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008092:	4b32      	ldr	r3, [pc, #200]	; (800815c <USBD_CDC_DeInit+0xfc>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	4619      	mov	r1, r3
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f002 fa8a 	bl	800a5b2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800809e:	4b2f      	ldr	r3, [pc, #188]	; (800815c <USBD_CDC_DeInit+0xfc>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	f003 020f 	and.w	r2, r3, #15
 80080a6:	6879      	ldr	r1, [r7, #4]
 80080a8:	4613      	mov	r3, r2
 80080aa:	009b      	lsls	r3, r3, #2
 80080ac:	4413      	add	r3, r2
 80080ae:	009b      	lsls	r3, r3, #2
 80080b0:	440b      	add	r3, r1
 80080b2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080b6:	2200      	movs	r2, #0
 80080b8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80080ba:	4b29      	ldr	r3, [pc, #164]	; (8008160 <USBD_CDC_DeInit+0x100>)
 80080bc:	781b      	ldrb	r3, [r3, #0]
 80080be:	4619      	mov	r1, r3
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f002 fa76 	bl	800a5b2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80080c6:	4b26      	ldr	r3, [pc, #152]	; (8008160 <USBD_CDC_DeInit+0x100>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	f003 020f 	and.w	r2, r3, #15
 80080ce:	6879      	ldr	r1, [r7, #4]
 80080d0:	4613      	mov	r3, r2
 80080d2:	009b      	lsls	r3, r3, #2
 80080d4:	4413      	add	r3, r2
 80080d6:	009b      	lsls	r3, r3, #2
 80080d8:	440b      	add	r3, r1
 80080da:	3324      	adds	r3, #36	; 0x24
 80080dc:	2200      	movs	r2, #0
 80080de:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80080e0:	4b1f      	ldr	r3, [pc, #124]	; (8008160 <USBD_CDC_DeInit+0x100>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	f003 020f 	and.w	r2, r3, #15
 80080e8:	6879      	ldr	r1, [r7, #4]
 80080ea:	4613      	mov	r3, r2
 80080ec:	009b      	lsls	r3, r3, #2
 80080ee:	4413      	add	r3, r2
 80080f0:	009b      	lsls	r3, r3, #2
 80080f2:	440b      	add	r3, r1
 80080f4:	3326      	adds	r3, #38	; 0x26
 80080f6:	2200      	movs	r2, #0
 80080f8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	32b0      	adds	r2, #176	; 0xb0
 8008104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d01f      	beq.n	800814c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008112:	687a      	ldr	r2, [r7, #4]
 8008114:	33b0      	adds	r3, #176	; 0xb0
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	685b      	ldr	r3, [r3, #4]
 800811e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	32b0      	adds	r2, #176	; 0xb0
 800812a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800812e:	4618      	mov	r0, r3
 8008130:	f002 fb4a 	bl	800a7c8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	32b0      	adds	r2, #176	; 0xb0
 800813e:	2100      	movs	r1, #0
 8008140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2200      	movs	r2, #0
 8008148:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3708      	adds	r7, #8
 8008152:	46bd      	mov	sp, r7
 8008154:	bd80      	pop	{r7, pc}
 8008156:	bf00      	nop
 8008158:	200000d3 	.word	0x200000d3
 800815c:	200000d4 	.word	0x200000d4
 8008160:	200000d5 	.word	0x200000d5

08008164 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b086      	sub	sp, #24
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
 800816c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	32b0      	adds	r2, #176	; 0xb0
 8008178:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800817c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800817e:	2300      	movs	r3, #0
 8008180:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008182:	2300      	movs	r3, #0
 8008184:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008186:	2300      	movs	r3, #0
 8008188:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800818a:	693b      	ldr	r3, [r7, #16]
 800818c:	2b00      	cmp	r3, #0
 800818e:	d101      	bne.n	8008194 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008190:	2303      	movs	r3, #3
 8008192:	e0bf      	b.n	8008314 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800819c:	2b00      	cmp	r3, #0
 800819e:	d050      	beq.n	8008242 <USBD_CDC_Setup+0xde>
 80081a0:	2b20      	cmp	r3, #32
 80081a2:	f040 80af 	bne.w	8008304 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	88db      	ldrh	r3, [r3, #6]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d03a      	beq.n	8008224 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	b25b      	sxtb	r3, r3
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	da1b      	bge.n	80081f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	33b0      	adds	r3, #176	; 0xb0
 80081c2:	009b      	lsls	r3, r3, #2
 80081c4:	4413      	add	r3, r2
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	689b      	ldr	r3, [r3, #8]
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80081ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80081d0:	683a      	ldr	r2, [r7, #0]
 80081d2:	88d2      	ldrh	r2, [r2, #6]
 80081d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	88db      	ldrh	r3, [r3, #6]
 80081da:	2b07      	cmp	r3, #7
 80081dc:	bf28      	it	cs
 80081de:	2307      	movcs	r3, #7
 80081e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	89fa      	ldrh	r2, [r7, #14]
 80081e6:	4619      	mov	r1, r3
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f001 fd89 	bl	8009d00 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80081ee:	e090      	b.n	8008312 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	785a      	ldrb	r2, [r3, #1]
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80081fa:	683b      	ldr	r3, [r7, #0]
 80081fc:	88db      	ldrh	r3, [r3, #6]
 80081fe:	2b3f      	cmp	r3, #63	; 0x3f
 8008200:	d803      	bhi.n	800820a <USBD_CDC_Setup+0xa6>
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	88db      	ldrh	r3, [r3, #6]
 8008206:	b2da      	uxtb	r2, r3
 8008208:	e000      	b.n	800820c <USBD_CDC_Setup+0xa8>
 800820a:	2240      	movs	r2, #64	; 0x40
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008212:	6939      	ldr	r1, [r7, #16]
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800821a:	461a      	mov	r2, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f001 fd9b 	bl	8009d58 <USBD_CtlPrepareRx>
      break;
 8008222:	e076      	b.n	8008312 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800822a:	687a      	ldr	r2, [r7, #4]
 800822c:	33b0      	adds	r3, #176	; 0xb0
 800822e:	009b      	lsls	r3, r3, #2
 8008230:	4413      	add	r3, r2
 8008232:	685b      	ldr	r3, [r3, #4]
 8008234:	689b      	ldr	r3, [r3, #8]
 8008236:	683a      	ldr	r2, [r7, #0]
 8008238:	7850      	ldrb	r0, [r2, #1]
 800823a:	2200      	movs	r2, #0
 800823c:	6839      	ldr	r1, [r7, #0]
 800823e:	4798      	blx	r3
      break;
 8008240:	e067      	b.n	8008312 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008242:	683b      	ldr	r3, [r7, #0]
 8008244:	785b      	ldrb	r3, [r3, #1]
 8008246:	2b0b      	cmp	r3, #11
 8008248:	d851      	bhi.n	80082ee <USBD_CDC_Setup+0x18a>
 800824a:	a201      	add	r2, pc, #4	; (adr r2, 8008250 <USBD_CDC_Setup+0xec>)
 800824c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008250:	08008281 	.word	0x08008281
 8008254:	080082fd 	.word	0x080082fd
 8008258:	080082ef 	.word	0x080082ef
 800825c:	080082ef 	.word	0x080082ef
 8008260:	080082ef 	.word	0x080082ef
 8008264:	080082ef 	.word	0x080082ef
 8008268:	080082ef 	.word	0x080082ef
 800826c:	080082ef 	.word	0x080082ef
 8008270:	080082ef 	.word	0x080082ef
 8008274:	080082ef 	.word	0x080082ef
 8008278:	080082ab 	.word	0x080082ab
 800827c:	080082d5 	.word	0x080082d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008286:	b2db      	uxtb	r3, r3
 8008288:	2b03      	cmp	r3, #3
 800828a:	d107      	bne.n	800829c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800828c:	f107 030a 	add.w	r3, r7, #10
 8008290:	2202      	movs	r2, #2
 8008292:	4619      	mov	r1, r3
 8008294:	6878      	ldr	r0, [r7, #4]
 8008296:	f001 fd33 	bl	8009d00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800829a:	e032      	b.n	8008302 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800829c:	6839      	ldr	r1, [r7, #0]
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f001 fcbd 	bl	8009c1e <USBD_CtlError>
            ret = USBD_FAIL;
 80082a4:	2303      	movs	r3, #3
 80082a6:	75fb      	strb	r3, [r7, #23]
          break;
 80082a8:	e02b      	b.n	8008302 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	2b03      	cmp	r3, #3
 80082b4:	d107      	bne.n	80082c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80082b6:	f107 030d 	add.w	r3, r7, #13
 80082ba:	2201      	movs	r2, #1
 80082bc:	4619      	mov	r1, r3
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f001 fd1e 	bl	8009d00 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082c4:	e01d      	b.n	8008302 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f001 fca8 	bl	8009c1e <USBD_CtlError>
            ret = USBD_FAIL;
 80082ce:	2303      	movs	r3, #3
 80082d0:	75fb      	strb	r3, [r7, #23]
          break;
 80082d2:	e016      	b.n	8008302 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b03      	cmp	r3, #3
 80082de:	d00f      	beq.n	8008300 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80082e0:	6839      	ldr	r1, [r7, #0]
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f001 fc9b 	bl	8009c1e <USBD_CtlError>
            ret = USBD_FAIL;
 80082e8:	2303      	movs	r3, #3
 80082ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80082ec:	e008      	b.n	8008300 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80082ee:	6839      	ldr	r1, [r7, #0]
 80082f0:	6878      	ldr	r0, [r7, #4]
 80082f2:	f001 fc94 	bl	8009c1e <USBD_CtlError>
          ret = USBD_FAIL;
 80082f6:	2303      	movs	r3, #3
 80082f8:	75fb      	strb	r3, [r7, #23]
          break;
 80082fa:	e002      	b.n	8008302 <USBD_CDC_Setup+0x19e>
          break;
 80082fc:	bf00      	nop
 80082fe:	e008      	b.n	8008312 <USBD_CDC_Setup+0x1ae>
          break;
 8008300:	bf00      	nop
      }
      break;
 8008302:	e006      	b.n	8008312 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008304:	6839      	ldr	r1, [r7, #0]
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f001 fc89 	bl	8009c1e <USBD_CtlError>
      ret = USBD_FAIL;
 800830c:	2303      	movs	r3, #3
 800830e:	75fb      	strb	r3, [r7, #23]
      break;
 8008310:	bf00      	nop
  }

  return (uint8_t)ret;
 8008312:	7dfb      	ldrb	r3, [r7, #23]
}
 8008314:	4618      	mov	r0, r3
 8008316:	3718      	adds	r7, #24
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800831c:	b580      	push	{r7, lr}
 800831e:	b084      	sub	sp, #16
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	460b      	mov	r3, r1
 8008326:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800832e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	32b0      	adds	r2, #176	; 0xb0
 800833a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d101      	bne.n	8008346 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008342:	2303      	movs	r3, #3
 8008344:	e065      	b.n	8008412 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	32b0      	adds	r2, #176	; 0xb0
 8008350:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008354:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008356:	78fb      	ldrb	r3, [r7, #3]
 8008358:	f003 020f 	and.w	r2, r3, #15
 800835c:	6879      	ldr	r1, [r7, #4]
 800835e:	4613      	mov	r3, r2
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	4413      	add	r3, r2
 8008364:	009b      	lsls	r3, r3, #2
 8008366:	440b      	add	r3, r1
 8008368:	3318      	adds	r3, #24
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d02f      	beq.n	80083d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008370:	78fb      	ldrb	r3, [r7, #3]
 8008372:	f003 020f 	and.w	r2, r3, #15
 8008376:	6879      	ldr	r1, [r7, #4]
 8008378:	4613      	mov	r3, r2
 800837a:	009b      	lsls	r3, r3, #2
 800837c:	4413      	add	r3, r2
 800837e:	009b      	lsls	r3, r3, #2
 8008380:	440b      	add	r3, r1
 8008382:	3318      	adds	r3, #24
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	78fb      	ldrb	r3, [r7, #3]
 8008388:	f003 010f 	and.w	r1, r3, #15
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	460b      	mov	r3, r1
 8008390:	00db      	lsls	r3, r3, #3
 8008392:	440b      	add	r3, r1
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4403      	add	r3, r0
 8008398:	3348      	adds	r3, #72	; 0x48
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	fbb2 f1f3 	udiv	r1, r2, r3
 80083a0:	fb01 f303 	mul.w	r3, r1, r3
 80083a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d112      	bne.n	80083d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80083aa:	78fb      	ldrb	r3, [r7, #3]
 80083ac:	f003 020f 	and.w	r2, r3, #15
 80083b0:	6879      	ldr	r1, [r7, #4]
 80083b2:	4613      	mov	r3, r2
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	009b      	lsls	r3, r3, #2
 80083ba:	440b      	add	r3, r1
 80083bc:	3318      	adds	r3, #24
 80083be:	2200      	movs	r2, #0
 80083c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80083c2:	78f9      	ldrb	r1, [r7, #3]
 80083c4:	2300      	movs	r3, #0
 80083c6:	2200      	movs	r2, #0
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f002 f99a 	bl	800a702 <USBD_LL_Transmit>
 80083ce:	e01f      	b.n	8008410 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80083d0:	68bb      	ldr	r3, [r7, #8]
 80083d2:	2200      	movs	r2, #0
 80083d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	33b0      	adds	r3, #176	; 0xb0
 80083e2:	009b      	lsls	r3, r3, #2
 80083e4:	4413      	add	r3, r2
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	691b      	ldr	r3, [r3, #16]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d010      	beq.n	8008410 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083f4:	687a      	ldr	r2, [r7, #4]
 80083f6:	33b0      	adds	r3, #176	; 0xb0
 80083f8:	009b      	lsls	r3, r3, #2
 80083fa:	4413      	add	r3, r2
 80083fc:	685b      	ldr	r3, [r3, #4]
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	68ba      	ldr	r2, [r7, #8]
 8008402:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008406:	68ba      	ldr	r2, [r7, #8]
 8008408:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800840c:	78fa      	ldrb	r2, [r7, #3]
 800840e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008410:	2300      	movs	r3, #0
}
 8008412:	4618      	mov	r0, r3
 8008414:	3710      	adds	r7, #16
 8008416:	46bd      	mov	sp, r7
 8008418:	bd80      	pop	{r7, pc}

0800841a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800841a:	b580      	push	{r7, lr}
 800841c:	b084      	sub	sp, #16
 800841e:	af00      	add	r7, sp, #0
 8008420:	6078      	str	r0, [r7, #4]
 8008422:	460b      	mov	r3, r1
 8008424:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	32b0      	adds	r2, #176	; 0xb0
 8008430:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008434:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	32b0      	adds	r2, #176	; 0xb0
 8008440:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d101      	bne.n	800844c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008448:	2303      	movs	r3, #3
 800844a:	e01a      	b.n	8008482 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800844c:	78fb      	ldrb	r3, [r7, #3]
 800844e:	4619      	mov	r1, r3
 8008450:	6878      	ldr	r0, [r7, #4]
 8008452:	f002 f998 	bl	800a786 <USBD_LL_GetRxDataSize>
 8008456:	4602      	mov	r2, r0
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008464:	687a      	ldr	r2, [r7, #4]
 8008466:	33b0      	adds	r3, #176	; 0xb0
 8008468:	009b      	lsls	r3, r3, #2
 800846a:	4413      	add	r3, r2
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	68fa      	ldr	r2, [r7, #12]
 8008472:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008476:	68fa      	ldr	r2, [r7, #12]
 8008478:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800847c:	4611      	mov	r1, r2
 800847e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008480:	2300      	movs	r3, #0
}
 8008482:	4618      	mov	r0, r3
 8008484:	3710      	adds	r7, #16
 8008486:	46bd      	mov	sp, r7
 8008488:	bd80      	pop	{r7, pc}

0800848a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800848a:	b580      	push	{r7, lr}
 800848c:	b084      	sub	sp, #16
 800848e:	af00      	add	r7, sp, #0
 8008490:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	32b0      	adds	r2, #176	; 0xb0
 800849c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d101      	bne.n	80084ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80084a8:	2303      	movs	r3, #3
 80084aa:	e025      	b.n	80084f8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084b2:	687a      	ldr	r2, [r7, #4]
 80084b4:	33b0      	adds	r3, #176	; 0xb0
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d01a      	beq.n	80084f6 <USBD_CDC_EP0_RxReady+0x6c>
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80084c6:	2bff      	cmp	r3, #255	; 0xff
 80084c8:	d015      	beq.n	80084f6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084d0:	687a      	ldr	r2, [r7, #4]
 80084d2:	33b0      	adds	r3, #176	; 0xb0
 80084d4:	009b      	lsls	r3, r3, #2
 80084d6:	4413      	add	r3, r2
 80084d8:	685b      	ldr	r3, [r3, #4]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80084e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80084ea:	b292      	uxth	r2, r2
 80084ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	22ff      	movs	r2, #255	; 0xff
 80084f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3710      	adds	r7, #16
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b086      	sub	sp, #24
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008508:	2182      	movs	r1, #130	; 0x82
 800850a:	4818      	ldr	r0, [pc, #96]	; (800856c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800850c:	f000 fd4f 	bl	8008fae <USBD_GetEpDesc>
 8008510:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008512:	2101      	movs	r1, #1
 8008514:	4815      	ldr	r0, [pc, #84]	; (800856c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008516:	f000 fd4a 	bl	8008fae <USBD_GetEpDesc>
 800851a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800851c:	2181      	movs	r1, #129	; 0x81
 800851e:	4813      	ldr	r0, [pc, #76]	; (800856c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008520:	f000 fd45 	bl	8008fae <USBD_GetEpDesc>
 8008524:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	2b00      	cmp	r3, #0
 800852a:	d002      	beq.n	8008532 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800852c:	697b      	ldr	r3, [r7, #20]
 800852e:	2210      	movs	r2, #16
 8008530:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d006      	beq.n	8008546 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	2200      	movs	r2, #0
 800853c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008540:	711a      	strb	r2, [r3, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d006      	beq.n	800855a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2200      	movs	r2, #0
 8008550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008554:	711a      	strb	r2, [r3, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2243      	movs	r2, #67	; 0x43
 800855e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008560:	4b02      	ldr	r3, [pc, #8]	; (800856c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008562:	4618      	mov	r0, r3
 8008564:	3718      	adds	r7, #24
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20000090 	.word	0x20000090

08008570 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b086      	sub	sp, #24
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008578:	2182      	movs	r1, #130	; 0x82
 800857a:	4818      	ldr	r0, [pc, #96]	; (80085dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800857c:	f000 fd17 	bl	8008fae <USBD_GetEpDesc>
 8008580:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008582:	2101      	movs	r1, #1
 8008584:	4815      	ldr	r0, [pc, #84]	; (80085dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008586:	f000 fd12 	bl	8008fae <USBD_GetEpDesc>
 800858a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800858c:	2181      	movs	r1, #129	; 0x81
 800858e:	4813      	ldr	r0, [pc, #76]	; (80085dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008590:	f000 fd0d 	bl	8008fae <USBD_GetEpDesc>
 8008594:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d002      	beq.n	80085a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	2210      	movs	r2, #16
 80085a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80085a2:	693b      	ldr	r3, [r7, #16]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d006      	beq.n	80085b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80085a8:	693b      	ldr	r3, [r7, #16]
 80085aa:	2200      	movs	r2, #0
 80085ac:	711a      	strb	r2, [r3, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f042 0202 	orr.w	r2, r2, #2
 80085b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d006      	beq.n	80085ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	711a      	strb	r2, [r3, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f042 0202 	orr.w	r2, r2, #2
 80085c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2243      	movs	r2, #67	; 0x43
 80085ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80085d0:	4b02      	ldr	r3, [pc, #8]	; (80085dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80085d2:	4618      	mov	r0, r3
 80085d4:	3718      	adds	r7, #24
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bd80      	pop	{r7, pc}
 80085da:	bf00      	nop
 80085dc:	20000090 	.word	0x20000090

080085e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	b086      	sub	sp, #24
 80085e4:	af00      	add	r7, sp, #0
 80085e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80085e8:	2182      	movs	r1, #130	; 0x82
 80085ea:	4818      	ldr	r0, [pc, #96]	; (800864c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80085ec:	f000 fcdf 	bl	8008fae <USBD_GetEpDesc>
 80085f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80085f2:	2101      	movs	r1, #1
 80085f4:	4815      	ldr	r0, [pc, #84]	; (800864c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80085f6:	f000 fcda 	bl	8008fae <USBD_GetEpDesc>
 80085fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80085fc:	2181      	movs	r1, #129	; 0x81
 80085fe:	4813      	ldr	r0, [pc, #76]	; (800864c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008600:	f000 fcd5 	bl	8008fae <USBD_GetEpDesc>
 8008604:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008606:	697b      	ldr	r3, [r7, #20]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d002      	beq.n	8008612 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800860c:	697b      	ldr	r3, [r7, #20]
 800860e:	2210      	movs	r2, #16
 8008610:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008612:	693b      	ldr	r3, [r7, #16]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d006      	beq.n	8008626 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	2200      	movs	r2, #0
 800861c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008620:	711a      	strb	r2, [r3, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d006      	beq.n	800863a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2200      	movs	r2, #0
 8008630:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008634:	711a      	strb	r2, [r3, #4]
 8008636:	2200      	movs	r2, #0
 8008638:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2243      	movs	r2, #67	; 0x43
 800863e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008640:	4b02      	ldr	r3, [pc, #8]	; (800864c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008642:	4618      	mov	r0, r3
 8008644:	3718      	adds	r7, #24
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20000090 	.word	0x20000090

08008650 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	220a      	movs	r2, #10
 800865c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800865e:	4b03      	ldr	r3, [pc, #12]	; (800866c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008660:	4618      	mov	r0, r3
 8008662:	370c      	adds	r7, #12
 8008664:	46bd      	mov	sp, r7
 8008666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866a:	4770      	bx	lr
 800866c:	2000004c 	.word	0x2000004c

08008670 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008670:	b480      	push	{r7}
 8008672:	b083      	sub	sp, #12
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d101      	bne.n	8008684 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008680:	2303      	movs	r3, #3
 8008682:	e009      	b.n	8008698 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	33b0      	adds	r3, #176	; 0xb0
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	683a      	ldr	r2, [r7, #0]
 8008694:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008696:	2300      	movs	r3, #0
}
 8008698:	4618      	mov	r0, r3
 800869a:	370c      	adds	r7, #12
 800869c:	46bd      	mov	sp, r7
 800869e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a2:	4770      	bx	lr

080086a4 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b087      	sub	sp, #28
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	32b0      	adds	r2, #176	; 0xb0
 80086ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086be:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d101      	bne.n	80086ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e008      	b.n	80086dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	371c      	adds	r7, #28
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr

080086e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80086e8:	b480      	push	{r7}
 80086ea:	b085      	sub	sp, #20
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
 80086f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	32b0      	adds	r2, #176	; 0xb0
 80086fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008700:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d101      	bne.n	800870c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8008708:	2303      	movs	r3, #3
 800870a:	e004      	b.n	8008716 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	683a      	ldr	r2, [r7, #0]
 8008710:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008714:	2300      	movs	r3, #0
}
 8008716:	4618      	mov	r0, r3
 8008718:	3714      	adds	r7, #20
 800871a:	46bd      	mov	sp, r7
 800871c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008720:	4770      	bx	lr
	...

08008724 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	32b0      	adds	r2, #176	; 0xb0
 8008736:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800873a:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 800873c:	2301      	movs	r3, #1
 800873e:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	32b0      	adds	r2, #176	; 0xb0
 800874a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008752:	2303      	movs	r3, #3
 8008754:	e025      	b.n	80087a2 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800875c:	2b00      	cmp	r3, #0
 800875e:	d11f      	bne.n	80087a0 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	2201      	movs	r2, #1
 8008764:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8008768:	4b10      	ldr	r3, [pc, #64]	; (80087ac <USBD_CDC_TransmitPacket+0x88>)
 800876a:	781b      	ldrb	r3, [r3, #0]
 800876c:	f003 020f 	and.w	r2, r3, #15
 8008770:	68bb      	ldr	r3, [r7, #8]
 8008772:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	4613      	mov	r3, r2
 800877a:	009b      	lsls	r3, r3, #2
 800877c:	4413      	add	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4403      	add	r3, r0
 8008782:	3318      	adds	r3, #24
 8008784:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8008786:	4b09      	ldr	r3, [pc, #36]	; (80087ac <USBD_CDC_TransmitPacket+0x88>)
 8008788:	7819      	ldrb	r1, [r3, #0]
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f001 ffb3 	bl	800a702 <USBD_LL_Transmit>

    ret = USBD_OK;
 800879c:	2300      	movs	r3, #0
 800879e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80087a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80087a2:	4618      	mov	r0, r3
 80087a4:	3710      	adds	r7, #16
 80087a6:	46bd      	mov	sp, r7
 80087a8:	bd80      	pop	{r7, pc}
 80087aa:	bf00      	nop
 80087ac:	200000d3 	.word	0x200000d3

080087b0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	32b0      	adds	r2, #176	; 0xb0
 80087c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087c6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	32b0      	adds	r2, #176	; 0xb0
 80087d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d101      	bne.n	80087de <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80087da:	2303      	movs	r3, #3
 80087dc:	e018      	b.n	8008810 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	7c1b      	ldrb	r3, [r3, #16]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10a      	bne.n	80087fc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087e6:	4b0c      	ldr	r3, [pc, #48]	; (8008818 <USBD_CDC_ReceivePacket+0x68>)
 80087e8:	7819      	ldrb	r1, [r3, #0]
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80087f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	f001 ffa5 	bl	800a744 <USBD_LL_PrepareReceive>
 80087fa:	e008      	b.n	800880e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80087fc:	4b06      	ldr	r3, [pc, #24]	; (8008818 <USBD_CDC_ReceivePacket+0x68>)
 80087fe:	7819      	ldrb	r1, [r3, #0]
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008806:	2340      	movs	r3, #64	; 0x40
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f001 ff9b 	bl	800a744 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800880e:	2300      	movs	r3, #0
}
 8008810:	4618      	mov	r0, r3
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	200000d4 	.word	0x200000d4

0800881c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	60f8      	str	r0, [r7, #12]
 8008824:	60b9      	str	r1, [r7, #8]
 8008826:	4613      	mov	r3, r2
 8008828:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d101      	bne.n	8008834 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008830:	2303      	movs	r3, #3
 8008832:	e01f      	b.n	8008874 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	2200      	movs	r2, #0
 8008838:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2200      	movs	r2, #0
 8008840:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	2200      	movs	r2, #0
 8008848:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d003      	beq.n	800885a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	79fa      	ldrb	r2, [r7, #7]
 8008866:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008868:	68f8      	ldr	r0, [r7, #12]
 800886a:	f001 fe15 	bl	800a498 <USBD_LL_Init>
 800886e:	4603      	mov	r3, r0
 8008870:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008872:	7dfb      	ldrb	r3, [r7, #23]
}
 8008874:	4618      	mov	r0, r3
 8008876:	3718      	adds	r7, #24
 8008878:	46bd      	mov	sp, r7
 800887a:	bd80      	pop	{r7, pc}

0800887c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b084      	sub	sp, #16
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
 8008884:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008886:	2300      	movs	r3, #0
 8008888:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800888a:	683b      	ldr	r3, [r7, #0]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d101      	bne.n	8008894 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008890:	2303      	movs	r3, #3
 8008892:	e025      	b.n	80088e0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	683a      	ldr	r2, [r7, #0]
 8008898:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	32ae      	adds	r2, #174	; 0xae
 80088a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d00f      	beq.n	80088d0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	32ae      	adds	r2, #174	; 0xae
 80088ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088c0:	f107 020e 	add.w	r2, r7, #14
 80088c4:	4610      	mov	r0, r2
 80088c6:	4798      	blx	r3
 80088c8:	4602      	mov	r2, r0
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80088d6:	1c5a      	adds	r2, r3, #1
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80088de:	2300      	movs	r3, #0
}
 80088e0:	4618      	mov	r0, r3
 80088e2:	3710      	adds	r7, #16
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f001 fe1d 	bl	800a530 <USBD_LL_Start>
 80088f6:	4603      	mov	r3, r0
}
 80088f8:	4618      	mov	r0, r3
 80088fa:	3708      	adds	r7, #8
 80088fc:	46bd      	mov	sp, r7
 80088fe:	bd80      	pop	{r7, pc}

08008900 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008908:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800890a:	4618      	mov	r0, r3
 800890c:	370c      	adds	r7, #12
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008916:	b580      	push	{r7, lr}
 8008918:	b084      	sub	sp, #16
 800891a:	af00      	add	r7, sp, #0
 800891c:	6078      	str	r0, [r7, #4]
 800891e:	460b      	mov	r3, r1
 8008920:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008922:	2300      	movs	r3, #0
 8008924:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800892c:	2b00      	cmp	r3, #0
 800892e:	d009      	beq.n	8008944 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	78fa      	ldrb	r2, [r7, #3]
 800893a:	4611      	mov	r1, r2
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	4798      	blx	r3
 8008940:	4603      	mov	r3, r0
 8008942:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008944:	7bfb      	ldrb	r3, [r7, #15]
}
 8008946:	4618      	mov	r0, r3
 8008948:	3710      	adds	r7, #16
 800894a:	46bd      	mov	sp, r7
 800894c:	bd80      	pop	{r7, pc}

0800894e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800894e:	b580      	push	{r7, lr}
 8008950:	b084      	sub	sp, #16
 8008952:	af00      	add	r7, sp, #0
 8008954:	6078      	str	r0, [r7, #4]
 8008956:	460b      	mov	r3, r1
 8008958:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800895a:	2300      	movs	r3, #0
 800895c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	78fa      	ldrb	r2, [r7, #3]
 8008968:	4611      	mov	r1, r2
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	4798      	blx	r3
 800896e:	4603      	mov	r3, r0
 8008970:	2b00      	cmp	r3, #0
 8008972:	d001      	beq.n	8008978 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008974:	2303      	movs	r3, #3
 8008976:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008978:	7bfb      	ldrb	r3, [r7, #15]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b084      	sub	sp, #16
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008992:	6839      	ldr	r1, [r7, #0]
 8008994:	4618      	mov	r0, r3
 8008996:	f001 f908 	bl	8009baa <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2201      	movs	r2, #1
 800899e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80089a8:	461a      	mov	r2, r3
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089b6:	f003 031f 	and.w	r3, r3, #31
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d01a      	beq.n	80089f4 <USBD_LL_SetupStage+0x72>
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d822      	bhi.n	8008a08 <USBD_LL_SetupStage+0x86>
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d002      	beq.n	80089cc <USBD_LL_SetupStage+0x4a>
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d00a      	beq.n	80089e0 <USBD_LL_SetupStage+0x5e>
 80089ca:	e01d      	b.n	8008a08 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089d2:	4619      	mov	r1, r3
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fb5f 	bl	8009098 <USBD_StdDevReq>
 80089da:	4603      	mov	r3, r0
 80089dc:	73fb      	strb	r3, [r7, #15]
      break;
 80089de:	e020      	b.n	8008a22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fbc7 	bl	800917c <USBD_StdItfReq>
 80089ee:	4603      	mov	r3, r0
 80089f0:	73fb      	strb	r3, [r7, #15]
      break;
 80089f2:	e016      	b.n	8008a22 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089fa:	4619      	mov	r1, r3
 80089fc:	6878      	ldr	r0, [r7, #4]
 80089fe:	f000 fc29 	bl	8009254 <USBD_StdEPReq>
 8008a02:	4603      	mov	r3, r0
 8008a04:	73fb      	strb	r3, [r7, #15]
      break;
 8008a06:	e00c      	b.n	8008a22 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a0e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a12:	b2db      	uxtb	r3, r3
 8008a14:	4619      	mov	r1, r3
 8008a16:	6878      	ldr	r0, [r7, #4]
 8008a18:	f001 fdea 	bl	800a5f0 <USBD_LL_StallEP>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008a20:	bf00      	nop
  }

  return ret;
 8008a22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a24:	4618      	mov	r0, r3
 8008a26:	3710      	adds	r7, #16
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b086      	sub	sp, #24
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	60f8      	str	r0, [r7, #12]
 8008a34:	460b      	mov	r3, r1
 8008a36:	607a      	str	r2, [r7, #4]
 8008a38:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008a3e:	7afb      	ldrb	r3, [r7, #11]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d16e      	bne.n	8008b22 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008a4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a52:	2b03      	cmp	r3, #3
 8008a54:	f040 8098 	bne.w	8008b88 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	689a      	ldr	r2, [r3, #8]
 8008a5c:	693b      	ldr	r3, [r7, #16]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d913      	bls.n	8008a8c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	689a      	ldr	r2, [r3, #8]
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	68db      	ldr	r3, [r3, #12]
 8008a6c:	1ad2      	subs	r2, r2, r3
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008a72:	693b      	ldr	r3, [r7, #16]
 8008a74:	68da      	ldr	r2, [r3, #12]
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	bf28      	it	cs
 8008a7e:	4613      	movcs	r3, r2
 8008a80:	461a      	mov	r2, r3
 8008a82:	6879      	ldr	r1, [r7, #4]
 8008a84:	68f8      	ldr	r0, [r7, #12]
 8008a86:	f001 f984 	bl	8009d92 <USBD_CtlContinueRx>
 8008a8a:	e07d      	b.n	8008b88 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a92:	f003 031f 	and.w	r3, r3, #31
 8008a96:	2b02      	cmp	r3, #2
 8008a98:	d014      	beq.n	8008ac4 <USBD_LL_DataOutStage+0x98>
 8008a9a:	2b02      	cmp	r3, #2
 8008a9c:	d81d      	bhi.n	8008ada <USBD_LL_DataOutStage+0xae>
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d002      	beq.n	8008aa8 <USBD_LL_DataOutStage+0x7c>
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d003      	beq.n	8008aae <USBD_LL_DataOutStage+0x82>
 8008aa6:	e018      	b.n	8008ada <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	75bb      	strb	r3, [r7, #22]
            break;
 8008aac:	e018      	b.n	8008ae0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008ab4:	b2db      	uxtb	r3, r3
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f000 fa5e 	bl	8008f7a <USBD_CoreFindIF>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	75bb      	strb	r3, [r7, #22]
            break;
 8008ac2:	e00d      	b.n	8008ae0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008aca:	b2db      	uxtb	r3, r3
 8008acc:	4619      	mov	r1, r3
 8008ace:	68f8      	ldr	r0, [r7, #12]
 8008ad0:	f000 fa60 	bl	8008f94 <USBD_CoreFindEP>
 8008ad4:	4603      	mov	r3, r0
 8008ad6:	75bb      	strb	r3, [r7, #22]
            break;
 8008ad8:	e002      	b.n	8008ae0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008ada:	2300      	movs	r3, #0
 8008adc:	75bb      	strb	r3, [r7, #22]
            break;
 8008ade:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008ae0:	7dbb      	ldrb	r3, [r7, #22]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d119      	bne.n	8008b1a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b03      	cmp	r3, #3
 8008af0:	d113      	bne.n	8008b1a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008af2:	7dba      	ldrb	r2, [r7, #22]
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	32ae      	adds	r2, #174	; 0xae
 8008af8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d00b      	beq.n	8008b1a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008b02:	7dba      	ldrb	r2, [r7, #22]
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008b0a:	7dba      	ldrb	r2, [r7, #22]
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	32ae      	adds	r2, #174	; 0xae
 8008b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b14:	691b      	ldr	r3, [r3, #16]
 8008b16:	68f8      	ldr	r0, [r7, #12]
 8008b18:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f001 f94a 	bl	8009db4 <USBD_CtlSendStatus>
 8008b20:	e032      	b.n	8008b88 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008b22:	7afb      	ldrb	r3, [r7, #11]
 8008b24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	4619      	mov	r1, r3
 8008b2c:	68f8      	ldr	r0, [r7, #12]
 8008b2e:	f000 fa31 	bl	8008f94 <USBD_CoreFindEP>
 8008b32:	4603      	mov	r3, r0
 8008b34:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b36:	7dbb      	ldrb	r3, [r7, #22]
 8008b38:	2bff      	cmp	r3, #255	; 0xff
 8008b3a:	d025      	beq.n	8008b88 <USBD_LL_DataOutStage+0x15c>
 8008b3c:	7dbb      	ldrb	r3, [r7, #22]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d122      	bne.n	8008b88 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b03      	cmp	r3, #3
 8008b4c:	d117      	bne.n	8008b7e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008b4e:	7dba      	ldrb	r2, [r7, #22]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	32ae      	adds	r2, #174	; 0xae
 8008b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b58:	699b      	ldr	r3, [r3, #24]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d00f      	beq.n	8008b7e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008b5e:	7dba      	ldrb	r2, [r7, #22]
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008b66:	7dba      	ldrb	r2, [r7, #22]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	32ae      	adds	r2, #174	; 0xae
 8008b6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b70:	699b      	ldr	r3, [r3, #24]
 8008b72:	7afa      	ldrb	r2, [r7, #11]
 8008b74:	4611      	mov	r1, r2
 8008b76:	68f8      	ldr	r0, [r7, #12]
 8008b78:	4798      	blx	r3
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008b7e:	7dfb      	ldrb	r3, [r7, #23]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d001      	beq.n	8008b88 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008b84:	7dfb      	ldrb	r3, [r7, #23]
 8008b86:	e000      	b.n	8008b8a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008b88:	2300      	movs	r3, #0
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3718      	adds	r7, #24
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	bd80      	pop	{r7, pc}

08008b92 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b086      	sub	sp, #24
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	60f8      	str	r0, [r7, #12]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	607a      	str	r2, [r7, #4]
 8008b9e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008ba0:	7afb      	ldrb	r3, [r7, #11]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d16f      	bne.n	8008c86 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	3314      	adds	r3, #20
 8008baa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008bb2:	2b02      	cmp	r3, #2
 8008bb4:	d15a      	bne.n	8008c6c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bb6:	693b      	ldr	r3, [r7, #16]
 8008bb8:	689a      	ldr	r2, [r3, #8]
 8008bba:	693b      	ldr	r3, [r7, #16]
 8008bbc:	68db      	ldr	r3, [r3, #12]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d914      	bls.n	8008bec <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	689a      	ldr	r2, [r3, #8]
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	68db      	ldr	r3, [r3, #12]
 8008bca:	1ad2      	subs	r2, r2, r3
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	461a      	mov	r2, r3
 8008bd6:	6879      	ldr	r1, [r7, #4]
 8008bd8:	68f8      	ldr	r0, [r7, #12]
 8008bda:	f001 f8ac 	bl	8009d36 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008bde:	2300      	movs	r3, #0
 8008be0:	2200      	movs	r2, #0
 8008be2:	2100      	movs	r1, #0
 8008be4:	68f8      	ldr	r0, [r7, #12]
 8008be6:	f001 fdad 	bl	800a744 <USBD_LL_PrepareReceive>
 8008bea:	e03f      	b.n	8008c6c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	68da      	ldr	r2, [r3, #12]
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	689b      	ldr	r3, [r3, #8]
 8008bf4:	429a      	cmp	r2, r3
 8008bf6:	d11c      	bne.n	8008c32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	685a      	ldr	r2, [r3, #4]
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d316      	bcc.n	8008c32 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	685a      	ldr	r2, [r3, #4]
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d20f      	bcs.n	8008c32 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c12:	2200      	movs	r2, #0
 8008c14:	2100      	movs	r1, #0
 8008c16:	68f8      	ldr	r0, [r7, #12]
 8008c18:	f001 f88d 	bl	8009d36 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c24:	2300      	movs	r3, #0
 8008c26:	2200      	movs	r2, #0
 8008c28:	2100      	movs	r1, #0
 8008c2a:	68f8      	ldr	r0, [r7, #12]
 8008c2c:	f001 fd8a 	bl	800a744 <USBD_LL_PrepareReceive>
 8008c30:	e01c      	b.n	8008c6c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c38:	b2db      	uxtb	r3, r3
 8008c3a:	2b03      	cmp	r3, #3
 8008c3c:	d10f      	bne.n	8008c5e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c44:	68db      	ldr	r3, [r3, #12]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d009      	beq.n	8008c5e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	68f8      	ldr	r0, [r7, #12]
 8008c5c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c5e:	2180      	movs	r1, #128	; 0x80
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	f001 fcc5 	bl	800a5f0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008c66:	68f8      	ldr	r0, [r7, #12]
 8008c68:	f001 f8b7 	bl	8009dda <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d03a      	beq.n	8008cec <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	f7ff fe42 	bl	8008900 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008c84:	e032      	b.n	8008cec <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008c86:	7afb      	ldrb	r3, [r7, #11]
 8008c88:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	4619      	mov	r1, r3
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 f97f 	bl	8008f94 <USBD_CoreFindEP>
 8008c96:	4603      	mov	r3, r0
 8008c98:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008c9a:	7dfb      	ldrb	r3, [r7, #23]
 8008c9c:	2bff      	cmp	r3, #255	; 0xff
 8008c9e:	d025      	beq.n	8008cec <USBD_LL_DataInStage+0x15a>
 8008ca0:	7dfb      	ldrb	r3, [r7, #23]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d122      	bne.n	8008cec <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cac:	b2db      	uxtb	r3, r3
 8008cae:	2b03      	cmp	r3, #3
 8008cb0:	d11c      	bne.n	8008cec <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008cb2:	7dfa      	ldrb	r2, [r7, #23]
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	32ae      	adds	r2, #174	; 0xae
 8008cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cbc:	695b      	ldr	r3, [r3, #20]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d014      	beq.n	8008cec <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008cc2:	7dfa      	ldrb	r2, [r7, #23]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008cca:	7dfa      	ldrb	r2, [r7, #23]
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	32ae      	adds	r2, #174	; 0xae
 8008cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd4:	695b      	ldr	r3, [r3, #20]
 8008cd6:	7afa      	ldrb	r2, [r7, #11]
 8008cd8:	4611      	mov	r1, r2
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	4798      	blx	r3
 8008cde:	4603      	mov	r3, r0
 8008ce0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008ce2:	7dbb      	ldrb	r3, [r7, #22]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d001      	beq.n	8008cec <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008ce8:	7dbb      	ldrb	r3, [r7, #22]
 8008cea:	e000      	b.n	8008cee <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008cec:	2300      	movs	r3, #0
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3718      	adds	r7, #24
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}

08008cf6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008cf6:	b580      	push	{r7, lr}
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	af00      	add	r7, sp, #0
 8008cfc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2201      	movs	r2, #1
 8008d06:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	2200      	movs	r2, #0
 8008d0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d014      	beq.n	8008d5c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d00e      	beq.n	8008d5c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	687a      	ldr	r2, [r7, #4]
 8008d48:	6852      	ldr	r2, [r2, #4]
 8008d4a:	b2d2      	uxtb	r2, r2
 8008d4c:	4611      	mov	r1, r2
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	4798      	blx	r3
 8008d52:	4603      	mov	r3, r0
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d001      	beq.n	8008d5c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008d58:	2303      	movs	r3, #3
 8008d5a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d5c:	2340      	movs	r3, #64	; 0x40
 8008d5e:	2200      	movs	r2, #0
 8008d60:	2100      	movs	r1, #0
 8008d62:	6878      	ldr	r0, [r7, #4]
 8008d64:	f001 fbff 	bl	800a566 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2240      	movs	r2, #64	; 0x40
 8008d74:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d78:	2340      	movs	r3, #64	; 0x40
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	2180      	movs	r1, #128	; 0x80
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f001 fbf1 	bl	800a566 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2201      	movs	r2, #1
 8008d88:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2240      	movs	r2, #64	; 0x40
 8008d8e:	621a      	str	r2, [r3, #32]

  return ret;
 8008d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3710      	adds	r7, #16
 8008d96:	46bd      	mov	sp, r7
 8008d98:	bd80      	pop	{r7, pc}

08008d9a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008d9a:	b480      	push	{r7}
 8008d9c:	b083      	sub	sp, #12
 8008d9e:	af00      	add	r7, sp, #0
 8008da0:	6078      	str	r0, [r7, #4]
 8008da2:	460b      	mov	r3, r1
 8008da4:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	78fa      	ldrb	r2, [r7, #3]
 8008daa:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	370c      	adds	r7, #12
 8008db2:	46bd      	mov	sp, r7
 8008db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db8:	4770      	bx	lr

08008dba <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008dba:	b480      	push	{r7}
 8008dbc:	b083      	sub	sp, #12
 8008dbe:	af00      	add	r7, sp, #0
 8008dc0:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc8:	b2da      	uxtb	r2, r3
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2204      	movs	r2, #4
 8008dd4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008dd8:	2300      	movs	r3, #0
}
 8008dda:	4618      	mov	r0, r3
 8008ddc:	370c      	adds	r7, #12
 8008dde:	46bd      	mov	sp, r7
 8008de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de4:	4770      	bx	lr

08008de6 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008de6:	b480      	push	{r7}
 8008de8:	b083      	sub	sp, #12
 8008dea:	af00      	add	r7, sp, #0
 8008dec:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	2b04      	cmp	r3, #4
 8008df8:	d106      	bne.n	8008e08 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008e00:	b2da      	uxtb	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	370c      	adds	r7, #12
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e14:	4770      	bx	lr

08008e16 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e16:	b580      	push	{r7, lr}
 8008e18:	b082      	sub	sp, #8
 8008e1a:	af00      	add	r7, sp, #0
 8008e1c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	2b03      	cmp	r3, #3
 8008e28:	d110      	bne.n	8008e4c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00b      	beq.n	8008e4c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e3a:	69db      	ldr	r3, [r3, #28]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d005      	beq.n	8008e4c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e46:	69db      	ldr	r3, [r3, #28]
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008e4c:	2300      	movs	r3, #0
}
 8008e4e:	4618      	mov	r0, r3
 8008e50:	3708      	adds	r7, #8
 8008e52:	46bd      	mov	sp, r7
 8008e54:	bd80      	pop	{r7, pc}

08008e56 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008e56:	b580      	push	{r7, lr}
 8008e58:	b082      	sub	sp, #8
 8008e5a:	af00      	add	r7, sp, #0
 8008e5c:	6078      	str	r0, [r7, #4]
 8008e5e:	460b      	mov	r3, r1
 8008e60:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	32ae      	adds	r2, #174	; 0xae
 8008e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d101      	bne.n	8008e78 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008e74:	2303      	movs	r3, #3
 8008e76:	e01c      	b.n	8008eb2 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e7e:	b2db      	uxtb	r3, r3
 8008e80:	2b03      	cmp	r3, #3
 8008e82:	d115      	bne.n	8008eb0 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	32ae      	adds	r2, #174	; 0xae
 8008e8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e92:	6a1b      	ldr	r3, [r3, #32]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d00b      	beq.n	8008eb0 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	32ae      	adds	r2, #174	; 0xae
 8008ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea6:	6a1b      	ldr	r3, [r3, #32]
 8008ea8:	78fa      	ldrb	r2, [r7, #3]
 8008eaa:	4611      	mov	r1, r2
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b082      	sub	sp, #8
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	32ae      	adds	r2, #174	; 0xae
 8008ed0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d101      	bne.n	8008edc <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ed8:	2303      	movs	r3, #3
 8008eda:	e01c      	b.n	8008f16 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee2:	b2db      	uxtb	r3, r3
 8008ee4:	2b03      	cmp	r3, #3
 8008ee6:	d115      	bne.n	8008f14 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	32ae      	adds	r2, #174	; 0xae
 8008ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d00b      	beq.n	8008f14 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	32ae      	adds	r2, #174	; 0xae
 8008f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f0c:	78fa      	ldrb	r2, [r7, #3]
 8008f0e:	4611      	mov	r1, r2
 8008f10:	6878      	ldr	r0, [r7, #4]
 8008f12:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008f1e:	b480      	push	{r7}
 8008f20:	b083      	sub	sp, #12
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f26:	2300      	movs	r3, #0
}
 8008f28:	4618      	mov	r0, r3
 8008f2a:	370c      	adds	r7, #12
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f32:	4770      	bx	lr

08008f34 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008f3c:	2300      	movs	r3, #0
 8008f3e:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	2201      	movs	r2, #1
 8008f44:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00e      	beq.n	8008f70 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	687a      	ldr	r2, [r7, #4]
 8008f5c:	6852      	ldr	r2, [r2, #4]
 8008f5e:	b2d2      	uxtb	r2, r2
 8008f60:	4611      	mov	r1, r2
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	4798      	blx	r3
 8008f66:	4603      	mov	r3, r0
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d001      	beq.n	8008f70 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008f6c:	2303      	movs	r3, #3
 8008f6e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f7a:	b480      	push	{r7}
 8008f7c:	b083      	sub	sp, #12
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	6078      	str	r0, [r7, #4]
 8008f82:	460b      	mov	r3, r1
 8008f84:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008f86:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008f88:	4618      	mov	r0, r3
 8008f8a:	370c      	adds	r7, #12
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f92:	4770      	bx	lr

08008f94 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008f94:	b480      	push	{r7}
 8008f96:	b083      	sub	sp, #12
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008fa0:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	370c      	adds	r7, #12
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fac:	4770      	bx	lr

08008fae <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008fae:	b580      	push	{r7, lr}
 8008fb0:	b086      	sub	sp, #24
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008fc2:	2300      	movs	r3, #0
 8008fc4:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	885b      	ldrh	r3, [r3, #2]
 8008fca:	b29a      	uxth	r2, r3
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	781b      	ldrb	r3, [r3, #0]
 8008fd0:	b29b      	uxth	r3, r3
 8008fd2:	429a      	cmp	r2, r3
 8008fd4:	d920      	bls.n	8009018 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8008fde:	e013      	b.n	8009008 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8008fe0:	f107 030a 	add.w	r3, r7, #10
 8008fe4:	4619      	mov	r1, r3
 8008fe6:	6978      	ldr	r0, [r7, #20]
 8008fe8:	f000 f81b 	bl	8009022 <USBD_GetNextDesc>
 8008fec:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8008fee:	697b      	ldr	r3, [r7, #20]
 8008ff0:	785b      	ldrb	r3, [r3, #1]
 8008ff2:	2b05      	cmp	r3, #5
 8008ff4:	d108      	bne.n	8009008 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8008ffa:	693b      	ldr	r3, [r7, #16]
 8008ffc:	789b      	ldrb	r3, [r3, #2]
 8008ffe:	78fa      	ldrb	r2, [r7, #3]
 8009000:	429a      	cmp	r2, r3
 8009002:	d008      	beq.n	8009016 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009004:	2300      	movs	r3, #0
 8009006:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	885b      	ldrh	r3, [r3, #2]
 800900c:	b29a      	uxth	r2, r3
 800900e:	897b      	ldrh	r3, [r7, #10]
 8009010:	429a      	cmp	r2, r3
 8009012:	d8e5      	bhi.n	8008fe0 <USBD_GetEpDesc+0x32>
 8009014:	e000      	b.n	8009018 <USBD_GetEpDesc+0x6a>
          break;
 8009016:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009018:	693b      	ldr	r3, [r7, #16]
}
 800901a:	4618      	mov	r0, r3
 800901c:	3718      	adds	r7, #24
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}

08009022 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009022:	b480      	push	{r7}
 8009024:	b085      	sub	sp, #20
 8009026:	af00      	add	r7, sp, #0
 8009028:	6078      	str	r0, [r7, #4]
 800902a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	881a      	ldrh	r2, [r3, #0]
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	781b      	ldrb	r3, [r3, #0]
 8009038:	b29b      	uxth	r3, r3
 800903a:	4413      	add	r3, r2
 800903c:	b29a      	uxth	r2, r3
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	781b      	ldrb	r3, [r3, #0]
 8009046:	461a      	mov	r2, r3
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	4413      	add	r3, r2
 800904c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800904e:	68fb      	ldr	r3, [r7, #12]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3714      	adds	r7, #20
 8009054:	46bd      	mov	sp, r7
 8009056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800905a:	4770      	bx	lr

0800905c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800905c:	b480      	push	{r7}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009068:	697b      	ldr	r3, [r7, #20]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800906e:	697b      	ldr	r3, [r7, #20]
 8009070:	3301      	adds	r3, #1
 8009072:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009074:	697b      	ldr	r3, [r7, #20]
 8009076:	781b      	ldrb	r3, [r3, #0]
 8009078:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800907a:	8a3b      	ldrh	r3, [r7, #16]
 800907c:	021b      	lsls	r3, r3, #8
 800907e:	b21a      	sxth	r2, r3
 8009080:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009084:	4313      	orrs	r3, r2
 8009086:	b21b      	sxth	r3, r3
 8009088:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800908a:	89fb      	ldrh	r3, [r7, #14]
}
 800908c:	4618      	mov	r0, r3
 800908e:	371c      	adds	r7, #28
 8009090:	46bd      	mov	sp, r7
 8009092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009096:	4770      	bx	lr

08009098 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
 80090a0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090a2:	2300      	movs	r3, #0
 80090a4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090ae:	2b40      	cmp	r3, #64	; 0x40
 80090b0:	d005      	beq.n	80090be <USBD_StdDevReq+0x26>
 80090b2:	2b40      	cmp	r3, #64	; 0x40
 80090b4:	d857      	bhi.n	8009166 <USBD_StdDevReq+0xce>
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d00f      	beq.n	80090da <USBD_StdDevReq+0x42>
 80090ba:	2b20      	cmp	r3, #32
 80090bc:	d153      	bne.n	8009166 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	32ae      	adds	r2, #174	; 0xae
 80090c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	6839      	ldr	r1, [r7, #0]
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	4798      	blx	r3
 80090d4:	4603      	mov	r3, r0
 80090d6:	73fb      	strb	r3, [r7, #15]
      break;
 80090d8:	e04a      	b.n	8009170 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	785b      	ldrb	r3, [r3, #1]
 80090de:	2b09      	cmp	r3, #9
 80090e0:	d83b      	bhi.n	800915a <USBD_StdDevReq+0xc2>
 80090e2:	a201      	add	r2, pc, #4	; (adr r2, 80090e8 <USBD_StdDevReq+0x50>)
 80090e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090e8:	0800913d 	.word	0x0800913d
 80090ec:	08009151 	.word	0x08009151
 80090f0:	0800915b 	.word	0x0800915b
 80090f4:	08009147 	.word	0x08009147
 80090f8:	0800915b 	.word	0x0800915b
 80090fc:	0800911b 	.word	0x0800911b
 8009100:	08009111 	.word	0x08009111
 8009104:	0800915b 	.word	0x0800915b
 8009108:	08009133 	.word	0x08009133
 800910c:	08009125 	.word	0x08009125
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009110:	6839      	ldr	r1, [r7, #0]
 8009112:	6878      	ldr	r0, [r7, #4]
 8009114:	f000 fa3c 	bl	8009590 <USBD_GetDescriptor>
          break;
 8009118:	e024      	b.n	8009164 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800911a:	6839      	ldr	r1, [r7, #0]
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 fba1 	bl	8009864 <USBD_SetAddress>
          break;
 8009122:	e01f      	b.n	8009164 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009124:	6839      	ldr	r1, [r7, #0]
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fbe0 	bl	80098ec <USBD_SetConfig>
 800912c:	4603      	mov	r3, r0
 800912e:	73fb      	strb	r3, [r7, #15]
          break;
 8009130:	e018      	b.n	8009164 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009132:	6839      	ldr	r1, [r7, #0]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 fc83 	bl	8009a40 <USBD_GetConfig>
          break;
 800913a:	e013      	b.n	8009164 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800913c:	6839      	ldr	r1, [r7, #0]
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 fcb4 	bl	8009aac <USBD_GetStatus>
          break;
 8009144:	e00e      	b.n	8009164 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8009146:	6839      	ldr	r1, [r7, #0]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 fce3 	bl	8009b14 <USBD_SetFeature>
          break;
 800914e:	e009      	b.n	8009164 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009150:	6839      	ldr	r1, [r7, #0]
 8009152:	6878      	ldr	r0, [r7, #4]
 8009154:	f000 fd07 	bl	8009b66 <USBD_ClrFeature>
          break;
 8009158:	e004      	b.n	8009164 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800915a:	6839      	ldr	r1, [r7, #0]
 800915c:	6878      	ldr	r0, [r7, #4]
 800915e:	f000 fd5e 	bl	8009c1e <USBD_CtlError>
          break;
 8009162:	bf00      	nop
      }
      break;
 8009164:	e004      	b.n	8009170 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fd58 	bl	8009c1e <USBD_CtlError>
      break;
 800916e:	bf00      	nop
  }

  return ret;
 8009170:	7bfb      	ldrb	r3, [r7, #15]
}
 8009172:	4618      	mov	r0, r3
 8009174:	3710      	adds	r7, #16
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop

0800917c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
 8009184:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009186:	2300      	movs	r3, #0
 8009188:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	781b      	ldrb	r3, [r3, #0]
 800918e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009192:	2b40      	cmp	r3, #64	; 0x40
 8009194:	d005      	beq.n	80091a2 <USBD_StdItfReq+0x26>
 8009196:	2b40      	cmp	r3, #64	; 0x40
 8009198:	d852      	bhi.n	8009240 <USBD_StdItfReq+0xc4>
 800919a:	2b00      	cmp	r3, #0
 800919c:	d001      	beq.n	80091a2 <USBD_StdItfReq+0x26>
 800919e:	2b20      	cmp	r3, #32
 80091a0:	d14e      	bne.n	8009240 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091a8:	b2db      	uxtb	r3, r3
 80091aa:	3b01      	subs	r3, #1
 80091ac:	2b02      	cmp	r3, #2
 80091ae:	d840      	bhi.n	8009232 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	889b      	ldrh	r3, [r3, #4]
 80091b4:	b2db      	uxtb	r3, r3
 80091b6:	2b01      	cmp	r3, #1
 80091b8:	d836      	bhi.n	8009228 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	889b      	ldrh	r3, [r3, #4]
 80091be:	b2db      	uxtb	r3, r3
 80091c0:	4619      	mov	r1, r3
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f7ff fed9 	bl	8008f7a <USBD_CoreFindIF>
 80091c8:	4603      	mov	r3, r0
 80091ca:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80091cc:	7bbb      	ldrb	r3, [r7, #14]
 80091ce:	2bff      	cmp	r3, #255	; 0xff
 80091d0:	d01d      	beq.n	800920e <USBD_StdItfReq+0x92>
 80091d2:	7bbb      	ldrb	r3, [r7, #14]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d11a      	bne.n	800920e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80091d8:	7bba      	ldrb	r2, [r7, #14]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	32ae      	adds	r2, #174	; 0xae
 80091de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091e2:	689b      	ldr	r3, [r3, #8]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00f      	beq.n	8009208 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80091e8:	7bba      	ldrb	r2, [r7, #14]
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80091f0:	7bba      	ldrb	r2, [r7, #14]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	32ae      	adds	r2, #174	; 0xae
 80091f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80091fa:	689b      	ldr	r3, [r3, #8]
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	4798      	blx	r3
 8009202:	4603      	mov	r3, r0
 8009204:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009206:	e004      	b.n	8009212 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009208:	2303      	movs	r3, #3
 800920a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800920c:	e001      	b.n	8009212 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800920e:	2303      	movs	r3, #3
 8009210:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009212:	683b      	ldr	r3, [r7, #0]
 8009214:	88db      	ldrh	r3, [r3, #6]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d110      	bne.n	800923c <USBD_StdItfReq+0xc0>
 800921a:	7bfb      	ldrb	r3, [r7, #15]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d10d      	bne.n	800923c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f000 fdc7 	bl	8009db4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009226:	e009      	b.n	800923c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009228:	6839      	ldr	r1, [r7, #0]
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fcf7 	bl	8009c1e <USBD_CtlError>
          break;
 8009230:	e004      	b.n	800923c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009232:	6839      	ldr	r1, [r7, #0]
 8009234:	6878      	ldr	r0, [r7, #4]
 8009236:	f000 fcf2 	bl	8009c1e <USBD_CtlError>
          break;
 800923a:	e000      	b.n	800923e <USBD_StdItfReq+0xc2>
          break;
 800923c:	bf00      	nop
      }
      break;
 800923e:	e004      	b.n	800924a <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009240:	6839      	ldr	r1, [r7, #0]
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fceb 	bl	8009c1e <USBD_CtlError>
      break;
 8009248:	bf00      	nop
  }

  return ret;
 800924a:	7bfb      	ldrb	r3, [r7, #15]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3710      	adds	r7, #16
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
 800925c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800925e:	2300      	movs	r3, #0
 8009260:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009262:	683b      	ldr	r3, [r7, #0]
 8009264:	889b      	ldrh	r3, [r3, #4]
 8009266:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	781b      	ldrb	r3, [r3, #0]
 800926c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009270:	2b40      	cmp	r3, #64	; 0x40
 8009272:	d007      	beq.n	8009284 <USBD_StdEPReq+0x30>
 8009274:	2b40      	cmp	r3, #64	; 0x40
 8009276:	f200 817f 	bhi.w	8009578 <USBD_StdEPReq+0x324>
 800927a:	2b00      	cmp	r3, #0
 800927c:	d02a      	beq.n	80092d4 <USBD_StdEPReq+0x80>
 800927e:	2b20      	cmp	r3, #32
 8009280:	f040 817a 	bne.w	8009578 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009284:	7bbb      	ldrb	r3, [r7, #14]
 8009286:	4619      	mov	r1, r3
 8009288:	6878      	ldr	r0, [r7, #4]
 800928a:	f7ff fe83 	bl	8008f94 <USBD_CoreFindEP>
 800928e:	4603      	mov	r3, r0
 8009290:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009292:	7b7b      	ldrb	r3, [r7, #13]
 8009294:	2bff      	cmp	r3, #255	; 0xff
 8009296:	f000 8174 	beq.w	8009582 <USBD_StdEPReq+0x32e>
 800929a:	7b7b      	ldrb	r3, [r7, #13]
 800929c:	2b00      	cmp	r3, #0
 800929e:	f040 8170 	bne.w	8009582 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80092a2:	7b7a      	ldrb	r2, [r7, #13]
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80092aa:	7b7a      	ldrb	r2, [r7, #13]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	32ae      	adds	r2, #174	; 0xae
 80092b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 8163 	beq.w	8009582 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80092bc:	7b7a      	ldrb	r2, [r7, #13]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	32ae      	adds	r2, #174	; 0xae
 80092c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	6839      	ldr	r1, [r7, #0]
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	4798      	blx	r3
 80092ce:	4603      	mov	r3, r0
 80092d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80092d2:	e156      	b.n	8009582 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	785b      	ldrb	r3, [r3, #1]
 80092d8:	2b03      	cmp	r3, #3
 80092da:	d008      	beq.n	80092ee <USBD_StdEPReq+0x9a>
 80092dc:	2b03      	cmp	r3, #3
 80092de:	f300 8145 	bgt.w	800956c <USBD_StdEPReq+0x318>
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 809b 	beq.w	800941e <USBD_StdEPReq+0x1ca>
 80092e8:	2b01      	cmp	r3, #1
 80092ea:	d03c      	beq.n	8009366 <USBD_StdEPReq+0x112>
 80092ec:	e13e      	b.n	800956c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80092f4:	b2db      	uxtb	r3, r3
 80092f6:	2b02      	cmp	r3, #2
 80092f8:	d002      	beq.n	8009300 <USBD_StdEPReq+0xac>
 80092fa:	2b03      	cmp	r3, #3
 80092fc:	d016      	beq.n	800932c <USBD_StdEPReq+0xd8>
 80092fe:	e02c      	b.n	800935a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009300:	7bbb      	ldrb	r3, [r7, #14]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d00d      	beq.n	8009322 <USBD_StdEPReq+0xce>
 8009306:	7bbb      	ldrb	r3, [r7, #14]
 8009308:	2b80      	cmp	r3, #128	; 0x80
 800930a:	d00a      	beq.n	8009322 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800930c:	7bbb      	ldrb	r3, [r7, #14]
 800930e:	4619      	mov	r1, r3
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f001 f96d 	bl	800a5f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009316:	2180      	movs	r1, #128	; 0x80
 8009318:	6878      	ldr	r0, [r7, #4]
 800931a:	f001 f969 	bl	800a5f0 <USBD_LL_StallEP>
 800931e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009320:	e020      	b.n	8009364 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009322:	6839      	ldr	r1, [r7, #0]
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fc7a 	bl	8009c1e <USBD_CtlError>
              break;
 800932a:	e01b      	b.n	8009364 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800932c:	683b      	ldr	r3, [r7, #0]
 800932e:	885b      	ldrh	r3, [r3, #2]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d10e      	bne.n	8009352 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009334:	7bbb      	ldrb	r3, [r7, #14]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00b      	beq.n	8009352 <USBD_StdEPReq+0xfe>
 800933a:	7bbb      	ldrb	r3, [r7, #14]
 800933c:	2b80      	cmp	r3, #128	; 0x80
 800933e:	d008      	beq.n	8009352 <USBD_StdEPReq+0xfe>
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	88db      	ldrh	r3, [r3, #6]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d104      	bne.n	8009352 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009348:	7bbb      	ldrb	r3, [r7, #14]
 800934a:	4619      	mov	r1, r3
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f001 f94f 	bl	800a5f0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f000 fd2e 	bl	8009db4 <USBD_CtlSendStatus>

              break;
 8009358:	e004      	b.n	8009364 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800935a:	6839      	ldr	r1, [r7, #0]
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f000 fc5e 	bl	8009c1e <USBD_CtlError>
              break;
 8009362:	bf00      	nop
          }
          break;
 8009364:	e107      	b.n	8009576 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800936c:	b2db      	uxtb	r3, r3
 800936e:	2b02      	cmp	r3, #2
 8009370:	d002      	beq.n	8009378 <USBD_StdEPReq+0x124>
 8009372:	2b03      	cmp	r3, #3
 8009374:	d016      	beq.n	80093a4 <USBD_StdEPReq+0x150>
 8009376:	e04b      	b.n	8009410 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009378:	7bbb      	ldrb	r3, [r7, #14]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00d      	beq.n	800939a <USBD_StdEPReq+0x146>
 800937e:	7bbb      	ldrb	r3, [r7, #14]
 8009380:	2b80      	cmp	r3, #128	; 0x80
 8009382:	d00a      	beq.n	800939a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009384:	7bbb      	ldrb	r3, [r7, #14]
 8009386:	4619      	mov	r1, r3
 8009388:	6878      	ldr	r0, [r7, #4]
 800938a:	f001 f931 	bl	800a5f0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800938e:	2180      	movs	r1, #128	; 0x80
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f001 f92d 	bl	800a5f0 <USBD_LL_StallEP>
 8009396:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009398:	e040      	b.n	800941c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800939a:	6839      	ldr	r1, [r7, #0]
 800939c:	6878      	ldr	r0, [r7, #4]
 800939e:	f000 fc3e 	bl	8009c1e <USBD_CtlError>
              break;
 80093a2:	e03b      	b.n	800941c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093a4:	683b      	ldr	r3, [r7, #0]
 80093a6:	885b      	ldrh	r3, [r3, #2]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d136      	bne.n	800941a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
 80093ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d004      	beq.n	80093c0 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80093b6:	7bbb      	ldrb	r3, [r7, #14]
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f001 f937 	bl	800a62e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80093c0:	6878      	ldr	r0, [r7, #4]
 80093c2:	f000 fcf7 	bl	8009db4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80093c6:	7bbb      	ldrb	r3, [r7, #14]
 80093c8:	4619      	mov	r1, r3
 80093ca:	6878      	ldr	r0, [r7, #4]
 80093cc:	f7ff fde2 	bl	8008f94 <USBD_CoreFindEP>
 80093d0:	4603      	mov	r3, r0
 80093d2:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093d4:	7b7b      	ldrb	r3, [r7, #13]
 80093d6:	2bff      	cmp	r3, #255	; 0xff
 80093d8:	d01f      	beq.n	800941a <USBD_StdEPReq+0x1c6>
 80093da:	7b7b      	ldrb	r3, [r7, #13]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d11c      	bne.n	800941a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80093e0:	7b7a      	ldrb	r2, [r7, #13]
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80093e8:	7b7a      	ldrb	r2, [r7, #13]
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	32ae      	adds	r2, #174	; 0xae
 80093ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d010      	beq.n	800941a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80093f8:	7b7a      	ldrb	r2, [r7, #13]
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	32ae      	adds	r2, #174	; 0xae
 80093fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	4798      	blx	r3
 800940a:	4603      	mov	r3, r0
 800940c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800940e:	e004      	b.n	800941a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009410:	6839      	ldr	r1, [r7, #0]
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 fc03 	bl	8009c1e <USBD_CtlError>
              break;
 8009418:	e000      	b.n	800941c <USBD_StdEPReq+0x1c8>
              break;
 800941a:	bf00      	nop
          }
          break;
 800941c:	e0ab      	b.n	8009576 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b02      	cmp	r3, #2
 8009428:	d002      	beq.n	8009430 <USBD_StdEPReq+0x1dc>
 800942a:	2b03      	cmp	r3, #3
 800942c:	d032      	beq.n	8009494 <USBD_StdEPReq+0x240>
 800942e:	e097      	b.n	8009560 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009430:	7bbb      	ldrb	r3, [r7, #14]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d007      	beq.n	8009446 <USBD_StdEPReq+0x1f2>
 8009436:	7bbb      	ldrb	r3, [r7, #14]
 8009438:	2b80      	cmp	r3, #128	; 0x80
 800943a:	d004      	beq.n	8009446 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800943c:	6839      	ldr	r1, [r7, #0]
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f000 fbed 	bl	8009c1e <USBD_CtlError>
                break;
 8009444:	e091      	b.n	800956a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009446:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800944a:	2b00      	cmp	r3, #0
 800944c:	da0b      	bge.n	8009466 <USBD_StdEPReq+0x212>
 800944e:	7bbb      	ldrb	r3, [r7, #14]
 8009450:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009454:	4613      	mov	r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	4413      	add	r3, r2
 800945a:	009b      	lsls	r3, r3, #2
 800945c:	3310      	adds	r3, #16
 800945e:	687a      	ldr	r2, [r7, #4]
 8009460:	4413      	add	r3, r2
 8009462:	3304      	adds	r3, #4
 8009464:	e00b      	b.n	800947e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009466:	7bbb      	ldrb	r3, [r7, #14]
 8009468:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800946c:	4613      	mov	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009478:	687a      	ldr	r2, [r7, #4]
 800947a:	4413      	add	r3, r2
 800947c:	3304      	adds	r3, #4
 800947e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009480:	68bb      	ldr	r3, [r7, #8]
 8009482:	2200      	movs	r2, #0
 8009484:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	2202      	movs	r2, #2
 800948a:	4619      	mov	r1, r3
 800948c:	6878      	ldr	r0, [r7, #4]
 800948e:	f000 fc37 	bl	8009d00 <USBD_CtlSendData>
              break;
 8009492:	e06a      	b.n	800956a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009494:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009498:	2b00      	cmp	r3, #0
 800949a:	da11      	bge.n	80094c0 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800949c:	7bbb      	ldrb	r3, [r7, #14]
 800949e:	f003 020f 	and.w	r2, r3, #15
 80094a2:	6879      	ldr	r1, [r7, #4]
 80094a4:	4613      	mov	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	4413      	add	r3, r2
 80094aa:	009b      	lsls	r3, r3, #2
 80094ac:	440b      	add	r3, r1
 80094ae:	3324      	adds	r3, #36	; 0x24
 80094b0:	881b      	ldrh	r3, [r3, #0]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d117      	bne.n	80094e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80094b6:	6839      	ldr	r1, [r7, #0]
 80094b8:	6878      	ldr	r0, [r7, #4]
 80094ba:	f000 fbb0 	bl	8009c1e <USBD_CtlError>
                  break;
 80094be:	e054      	b.n	800956a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80094c0:	7bbb      	ldrb	r3, [r7, #14]
 80094c2:	f003 020f 	and.w	r2, r3, #15
 80094c6:	6879      	ldr	r1, [r7, #4]
 80094c8:	4613      	mov	r3, r2
 80094ca:	009b      	lsls	r3, r3, #2
 80094cc:	4413      	add	r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	440b      	add	r3, r1
 80094d2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d104      	bne.n	80094e6 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f000 fb9d 	bl	8009c1e <USBD_CtlError>
                  break;
 80094e4:	e041      	b.n	800956a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	da0b      	bge.n	8009506 <USBD_StdEPReq+0x2b2>
 80094ee:	7bbb      	ldrb	r3, [r7, #14]
 80094f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80094f4:	4613      	mov	r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	4413      	add	r3, r2
 80094fa:	009b      	lsls	r3, r3, #2
 80094fc:	3310      	adds	r3, #16
 80094fe:	687a      	ldr	r2, [r7, #4]
 8009500:	4413      	add	r3, r2
 8009502:	3304      	adds	r3, #4
 8009504:	e00b      	b.n	800951e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009506:	7bbb      	ldrb	r3, [r7, #14]
 8009508:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800950c:	4613      	mov	r3, r2
 800950e:	009b      	lsls	r3, r3, #2
 8009510:	4413      	add	r3, r2
 8009512:	009b      	lsls	r3, r3, #2
 8009514:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	4413      	add	r3, r2
 800951c:	3304      	adds	r3, #4
 800951e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009520:	7bbb      	ldrb	r3, [r7, #14]
 8009522:	2b00      	cmp	r3, #0
 8009524:	d002      	beq.n	800952c <USBD_StdEPReq+0x2d8>
 8009526:	7bbb      	ldrb	r3, [r7, #14]
 8009528:	2b80      	cmp	r3, #128	; 0x80
 800952a:	d103      	bne.n	8009534 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	2200      	movs	r2, #0
 8009530:	601a      	str	r2, [r3, #0]
 8009532:	e00e      	b.n	8009552 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009534:	7bbb      	ldrb	r3, [r7, #14]
 8009536:	4619      	mov	r1, r3
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f001 f897 	bl	800a66c <USBD_LL_IsStallEP>
 800953e:	4603      	mov	r3, r0
 8009540:	2b00      	cmp	r3, #0
 8009542:	d003      	beq.n	800954c <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	2201      	movs	r2, #1
 8009548:	601a      	str	r2, [r3, #0]
 800954a:	e002      	b.n	8009552 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	2200      	movs	r2, #0
 8009550:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	2202      	movs	r2, #2
 8009556:	4619      	mov	r1, r3
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f000 fbd1 	bl	8009d00 <USBD_CtlSendData>
              break;
 800955e:	e004      	b.n	800956a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f000 fb5b 	bl	8009c1e <USBD_CtlError>
              break;
 8009568:	bf00      	nop
          }
          break;
 800956a:	e004      	b.n	8009576 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800956c:	6839      	ldr	r1, [r7, #0]
 800956e:	6878      	ldr	r0, [r7, #4]
 8009570:	f000 fb55 	bl	8009c1e <USBD_CtlError>
          break;
 8009574:	bf00      	nop
      }
      break;
 8009576:	e005      	b.n	8009584 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009578:	6839      	ldr	r1, [r7, #0]
 800957a:	6878      	ldr	r0, [r7, #4]
 800957c:	f000 fb4f 	bl	8009c1e <USBD_CtlError>
      break;
 8009580:	e000      	b.n	8009584 <USBD_StdEPReq+0x330>
      break;
 8009582:	bf00      	nop
  }

  return ret;
 8009584:	7bfb      	ldrb	r3, [r7, #15]
}
 8009586:	4618      	mov	r0, r3
 8009588:	3710      	adds	r7, #16
 800958a:	46bd      	mov	sp, r7
 800958c:	bd80      	pop	{r7, pc}
	...

08009590 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009590:	b580      	push	{r7, lr}
 8009592:	b084      	sub	sp, #16
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800959a:	2300      	movs	r3, #0
 800959c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800959e:	2300      	movs	r3, #0
 80095a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095a2:	2300      	movs	r3, #0
 80095a4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095a6:	683b      	ldr	r3, [r7, #0]
 80095a8:	885b      	ldrh	r3, [r3, #2]
 80095aa:	0a1b      	lsrs	r3, r3, #8
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	3b01      	subs	r3, #1
 80095b0:	2b06      	cmp	r3, #6
 80095b2:	f200 8128 	bhi.w	8009806 <USBD_GetDescriptor+0x276>
 80095b6:	a201      	add	r2, pc, #4	; (adr r2, 80095bc <USBD_GetDescriptor+0x2c>)
 80095b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095bc:	080095d9 	.word	0x080095d9
 80095c0:	080095f1 	.word	0x080095f1
 80095c4:	08009631 	.word	0x08009631
 80095c8:	08009807 	.word	0x08009807
 80095cc:	08009807 	.word	0x08009807
 80095d0:	080097a7 	.word	0x080097a7
 80095d4:	080097d3 	.word	0x080097d3
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	687a      	ldr	r2, [r7, #4]
 80095e2:	7c12      	ldrb	r2, [r2, #16]
 80095e4:	f107 0108 	add.w	r1, r7, #8
 80095e8:	4610      	mov	r0, r2
 80095ea:	4798      	blx	r3
 80095ec:	60f8      	str	r0, [r7, #12]
      break;
 80095ee:	e112      	b.n	8009816 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	7c1b      	ldrb	r3, [r3, #16]
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10d      	bne.n	8009614 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80095fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009600:	f107 0208 	add.w	r2, r7, #8
 8009604:	4610      	mov	r0, r2
 8009606:	4798      	blx	r3
 8009608:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	3301      	adds	r3, #1
 800960e:	2202      	movs	r2, #2
 8009610:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009612:	e100      	b.n	8009816 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800961a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961c:	f107 0208 	add.w	r2, r7, #8
 8009620:	4610      	mov	r0, r2
 8009622:	4798      	blx	r3
 8009624:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	3301      	adds	r3, #1
 800962a:	2202      	movs	r2, #2
 800962c:	701a      	strb	r2, [r3, #0]
      break;
 800962e:	e0f2      	b.n	8009816 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009630:	683b      	ldr	r3, [r7, #0]
 8009632:	885b      	ldrh	r3, [r3, #2]
 8009634:	b2db      	uxtb	r3, r3
 8009636:	2b05      	cmp	r3, #5
 8009638:	f200 80ac 	bhi.w	8009794 <USBD_GetDescriptor+0x204>
 800963c:	a201      	add	r2, pc, #4	; (adr r2, 8009644 <USBD_GetDescriptor+0xb4>)
 800963e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009642:	bf00      	nop
 8009644:	0800965d 	.word	0x0800965d
 8009648:	08009691 	.word	0x08009691
 800964c:	080096c5 	.word	0x080096c5
 8009650:	080096f9 	.word	0x080096f9
 8009654:	0800972d 	.word	0x0800972d
 8009658:	08009761 	.word	0x08009761
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009662:	685b      	ldr	r3, [r3, #4]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d00b      	beq.n	8009680 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	687a      	ldr	r2, [r7, #4]
 8009672:	7c12      	ldrb	r2, [r2, #16]
 8009674:	f107 0108 	add.w	r1, r7, #8
 8009678:	4610      	mov	r0, r2
 800967a:	4798      	blx	r3
 800967c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800967e:	e091      	b.n	80097a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009680:	6839      	ldr	r1, [r7, #0]
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	f000 facb 	bl	8009c1e <USBD_CtlError>
            err++;
 8009688:	7afb      	ldrb	r3, [r7, #11]
 800968a:	3301      	adds	r3, #1
 800968c:	72fb      	strb	r3, [r7, #11]
          break;
 800968e:	e089      	b.n	80097a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009696:	689b      	ldr	r3, [r3, #8]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00b      	beq.n	80096b4 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096a2:	689b      	ldr	r3, [r3, #8]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	7c12      	ldrb	r2, [r2, #16]
 80096a8:	f107 0108 	add.w	r1, r7, #8
 80096ac:	4610      	mov	r0, r2
 80096ae:	4798      	blx	r3
 80096b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096b2:	e077      	b.n	80097a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 fab1 	bl	8009c1e <USBD_CtlError>
            err++;
 80096bc:	7afb      	ldrb	r3, [r7, #11]
 80096be:	3301      	adds	r3, #1
 80096c0:	72fb      	strb	r3, [r7, #11]
          break;
 80096c2:	e06f      	b.n	80097a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ca:	68db      	ldr	r3, [r3, #12]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00b      	beq.n	80096e8 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096d6:	68db      	ldr	r3, [r3, #12]
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	7c12      	ldrb	r2, [r2, #16]
 80096dc:	f107 0108 	add.w	r1, r7, #8
 80096e0:	4610      	mov	r0, r2
 80096e2:	4798      	blx	r3
 80096e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096e6:	e05d      	b.n	80097a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fa97 	bl	8009c1e <USBD_CtlError>
            err++;
 80096f0:	7afb      	ldrb	r3, [r7, #11]
 80096f2:	3301      	adds	r3, #1
 80096f4:	72fb      	strb	r3, [r7, #11]
          break;
 80096f6:	e055      	b.n	80097a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096fe:	691b      	ldr	r3, [r3, #16]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00b      	beq.n	800971c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800970a:	691b      	ldr	r3, [r3, #16]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	7c12      	ldrb	r2, [r2, #16]
 8009710:	f107 0108 	add.w	r1, r7, #8
 8009714:	4610      	mov	r0, r2
 8009716:	4798      	blx	r3
 8009718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800971a:	e043      	b.n	80097a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fa7d 	bl	8009c1e <USBD_CtlError>
            err++;
 8009724:	7afb      	ldrb	r3, [r7, #11]
 8009726:	3301      	adds	r3, #1
 8009728:	72fb      	strb	r3, [r7, #11]
          break;
 800972a:	e03b      	b.n	80097a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009732:	695b      	ldr	r3, [r3, #20]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00b      	beq.n	8009750 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	7c12      	ldrb	r2, [r2, #16]
 8009744:	f107 0108 	add.w	r1, r7, #8
 8009748:	4610      	mov	r0, r2
 800974a:	4798      	blx	r3
 800974c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800974e:	e029      	b.n	80097a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009750:	6839      	ldr	r1, [r7, #0]
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 fa63 	bl	8009c1e <USBD_CtlError>
            err++;
 8009758:	7afb      	ldrb	r3, [r7, #11]
 800975a:	3301      	adds	r3, #1
 800975c:	72fb      	strb	r3, [r7, #11]
          break;
 800975e:	e021      	b.n	80097a4 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009766:	699b      	ldr	r3, [r3, #24]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00b      	beq.n	8009784 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	7c12      	ldrb	r2, [r2, #16]
 8009778:	f107 0108 	add.w	r1, r7, #8
 800977c:	4610      	mov	r0, r2
 800977e:	4798      	blx	r3
 8009780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009782:	e00f      	b.n	80097a4 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fa49 	bl	8009c1e <USBD_CtlError>
            err++;
 800978c:	7afb      	ldrb	r3, [r7, #11]
 800978e:	3301      	adds	r3, #1
 8009790:	72fb      	strb	r3, [r7, #11]
          break;
 8009792:	e007      	b.n	80097a4 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009794:	6839      	ldr	r1, [r7, #0]
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f000 fa41 	bl	8009c1e <USBD_CtlError>
          err++;
 800979c:	7afb      	ldrb	r3, [r7, #11]
 800979e:	3301      	adds	r3, #1
 80097a0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80097a2:	bf00      	nop
      }
      break;
 80097a4:	e037      	b.n	8009816 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	7c1b      	ldrb	r3, [r3, #16]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d109      	bne.n	80097c2 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097b6:	f107 0208 	add.w	r2, r7, #8
 80097ba:	4610      	mov	r0, r2
 80097bc:	4798      	blx	r3
 80097be:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097c0:	e029      	b.n	8009816 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097c2:	6839      	ldr	r1, [r7, #0]
 80097c4:	6878      	ldr	r0, [r7, #4]
 80097c6:	f000 fa2a 	bl	8009c1e <USBD_CtlError>
        err++;
 80097ca:	7afb      	ldrb	r3, [r7, #11]
 80097cc:	3301      	adds	r3, #1
 80097ce:	72fb      	strb	r3, [r7, #11]
      break;
 80097d0:	e021      	b.n	8009816 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	7c1b      	ldrb	r3, [r3, #16]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d10d      	bne.n	80097f6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e2:	f107 0208 	add.w	r2, r7, #8
 80097e6:	4610      	mov	r0, r2
 80097e8:	4798      	blx	r3
 80097ea:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	3301      	adds	r3, #1
 80097f0:	2207      	movs	r2, #7
 80097f2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097f4:	e00f      	b.n	8009816 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fa10 	bl	8009c1e <USBD_CtlError>
        err++;
 80097fe:	7afb      	ldrb	r3, [r7, #11]
 8009800:	3301      	adds	r3, #1
 8009802:	72fb      	strb	r3, [r7, #11]
      break;
 8009804:	e007      	b.n	8009816 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009806:	6839      	ldr	r1, [r7, #0]
 8009808:	6878      	ldr	r0, [r7, #4]
 800980a:	f000 fa08 	bl	8009c1e <USBD_CtlError>
      err++;
 800980e:	7afb      	ldrb	r3, [r7, #11]
 8009810:	3301      	adds	r3, #1
 8009812:	72fb      	strb	r3, [r7, #11]
      break;
 8009814:	bf00      	nop
  }

  if (err != 0U)
 8009816:	7afb      	ldrb	r3, [r7, #11]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d11e      	bne.n	800985a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	88db      	ldrh	r3, [r3, #6]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d016      	beq.n	8009852 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009824:	893b      	ldrh	r3, [r7, #8]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d00e      	beq.n	8009848 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	88da      	ldrh	r2, [r3, #6]
 800982e:	893b      	ldrh	r3, [r7, #8]
 8009830:	4293      	cmp	r3, r2
 8009832:	bf28      	it	cs
 8009834:	4613      	movcs	r3, r2
 8009836:	b29b      	uxth	r3, r3
 8009838:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800983a:	893b      	ldrh	r3, [r7, #8]
 800983c:	461a      	mov	r2, r3
 800983e:	68f9      	ldr	r1, [r7, #12]
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fa5d 	bl	8009d00 <USBD_CtlSendData>
 8009846:	e009      	b.n	800985c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009848:	6839      	ldr	r1, [r7, #0]
 800984a:	6878      	ldr	r0, [r7, #4]
 800984c:	f000 f9e7 	bl	8009c1e <USBD_CtlError>
 8009850:	e004      	b.n	800985c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 faae 	bl	8009db4 <USBD_CtlSendStatus>
 8009858:	e000      	b.n	800985c <USBD_GetDescriptor+0x2cc>
    return;
 800985a:	bf00      	nop
  }
}
 800985c:	3710      	adds	r7, #16
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop

08009864 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b084      	sub	sp, #16
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
 800986c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	889b      	ldrh	r3, [r3, #4]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d131      	bne.n	80098da <USBD_SetAddress+0x76>
 8009876:	683b      	ldr	r3, [r7, #0]
 8009878:	88db      	ldrh	r3, [r3, #6]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d12d      	bne.n	80098da <USBD_SetAddress+0x76>
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	885b      	ldrh	r3, [r3, #2]
 8009882:	2b7f      	cmp	r3, #127	; 0x7f
 8009884:	d829      	bhi.n	80098da <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	885b      	ldrh	r3, [r3, #2]
 800988a:	b2db      	uxtb	r3, r3
 800988c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009890:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2b03      	cmp	r3, #3
 800989c:	d104      	bne.n	80098a8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800989e:	6839      	ldr	r1, [r7, #0]
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 f9bc 	bl	8009c1e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098a6:	e01d      	b.n	80098e4 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	7bfa      	ldrb	r2, [r7, #15]
 80098ac:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80098b0:	7bfb      	ldrb	r3, [r7, #15]
 80098b2:	4619      	mov	r1, r3
 80098b4:	6878      	ldr	r0, [r7, #4]
 80098b6:	f000 ff05 	bl	800a6c4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80098ba:	6878      	ldr	r0, [r7, #4]
 80098bc:	f000 fa7a 	bl	8009db4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80098c0:	7bfb      	ldrb	r3, [r7, #15]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d004      	beq.n	80098d0 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2202      	movs	r2, #2
 80098ca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098ce:	e009      	b.n	80098e4 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	2201      	movs	r2, #1
 80098d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098d8:	e004      	b.n	80098e4 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80098da:	6839      	ldr	r1, [r7, #0]
 80098dc:	6878      	ldr	r0, [r7, #4]
 80098de:	f000 f99e 	bl	8009c1e <USBD_CtlError>
  }
}
 80098e2:	bf00      	nop
 80098e4:	bf00      	nop
 80098e6:	3710      	adds	r7, #16
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	885b      	ldrh	r3, [r3, #2]
 80098fe:	b2da      	uxtb	r2, r3
 8009900:	4b4e      	ldr	r3, [pc, #312]	; (8009a3c <USBD_SetConfig+0x150>)
 8009902:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009904:	4b4d      	ldr	r3, [pc, #308]	; (8009a3c <USBD_SetConfig+0x150>)
 8009906:	781b      	ldrb	r3, [r3, #0]
 8009908:	2b01      	cmp	r3, #1
 800990a:	d905      	bls.n	8009918 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800990c:	6839      	ldr	r1, [r7, #0]
 800990e:	6878      	ldr	r0, [r7, #4]
 8009910:	f000 f985 	bl	8009c1e <USBD_CtlError>
    return USBD_FAIL;
 8009914:	2303      	movs	r3, #3
 8009916:	e08c      	b.n	8009a32 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800991e:	b2db      	uxtb	r3, r3
 8009920:	2b02      	cmp	r3, #2
 8009922:	d002      	beq.n	800992a <USBD_SetConfig+0x3e>
 8009924:	2b03      	cmp	r3, #3
 8009926:	d029      	beq.n	800997c <USBD_SetConfig+0x90>
 8009928:	e075      	b.n	8009a16 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800992a:	4b44      	ldr	r3, [pc, #272]	; (8009a3c <USBD_SetConfig+0x150>)
 800992c:	781b      	ldrb	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d020      	beq.n	8009974 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009932:	4b42      	ldr	r3, [pc, #264]	; (8009a3c <USBD_SetConfig+0x150>)
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	461a      	mov	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800993c:	4b3f      	ldr	r3, [pc, #252]	; (8009a3c <USBD_SetConfig+0x150>)
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	4619      	mov	r1, r3
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f7fe ffe7 	bl	8008916 <USBD_SetClassConfig>
 8009948:	4603      	mov	r3, r0
 800994a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800994c:	7bfb      	ldrb	r3, [r7, #15]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d008      	beq.n	8009964 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009952:	6839      	ldr	r1, [r7, #0]
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f000 f962 	bl	8009c1e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2202      	movs	r2, #2
 800995e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009962:	e065      	b.n	8009a30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f000 fa25 	bl	8009db4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2203      	movs	r2, #3
 800996e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009972:	e05d      	b.n	8009a30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f000 fa1d 	bl	8009db4 <USBD_CtlSendStatus>
      break;
 800997a:	e059      	b.n	8009a30 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800997c:	4b2f      	ldr	r3, [pc, #188]	; (8009a3c <USBD_SetConfig+0x150>)
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d112      	bne.n	80099aa <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2202      	movs	r2, #2
 8009988:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800998c:	4b2b      	ldr	r3, [pc, #172]	; (8009a3c <USBD_SetConfig+0x150>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	461a      	mov	r2, r3
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009996:	4b29      	ldr	r3, [pc, #164]	; (8009a3c <USBD_SetConfig+0x150>)
 8009998:	781b      	ldrb	r3, [r3, #0]
 800999a:	4619      	mov	r1, r3
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f7fe ffd6 	bl	800894e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80099a2:	6878      	ldr	r0, [r7, #4]
 80099a4:	f000 fa06 	bl	8009db4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099a8:	e042      	b.n	8009a30 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80099aa:	4b24      	ldr	r3, [pc, #144]	; (8009a3c <USBD_SetConfig+0x150>)
 80099ac:	781b      	ldrb	r3, [r3, #0]
 80099ae:	461a      	mov	r2, r3
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	685b      	ldr	r3, [r3, #4]
 80099b4:	429a      	cmp	r2, r3
 80099b6:	d02a      	beq.n	8009a0e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	685b      	ldr	r3, [r3, #4]
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	4619      	mov	r1, r3
 80099c0:	6878      	ldr	r0, [r7, #4]
 80099c2:	f7fe ffc4 	bl	800894e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80099c6:	4b1d      	ldr	r3, [pc, #116]	; (8009a3c <USBD_SetConfig+0x150>)
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	461a      	mov	r2, r3
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80099d0:	4b1a      	ldr	r3, [pc, #104]	; (8009a3c <USBD_SetConfig+0x150>)
 80099d2:	781b      	ldrb	r3, [r3, #0]
 80099d4:	4619      	mov	r1, r3
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f7fe ff9d 	bl	8008916 <USBD_SetClassConfig>
 80099dc:	4603      	mov	r3, r0
 80099de:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80099e0:	7bfb      	ldrb	r3, [r7, #15]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d00f      	beq.n	8009a06 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80099e6:	6839      	ldr	r1, [r7, #0]
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 f918 	bl	8009c1e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	b2db      	uxtb	r3, r3
 80099f4:	4619      	mov	r1, r3
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f7fe ffa9 	bl	800894e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	2202      	movs	r2, #2
 8009a00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a04:	e014      	b.n	8009a30 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 f9d4 	bl	8009db4 <USBD_CtlSendStatus>
      break;
 8009a0c:	e010      	b.n	8009a30 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f9d0 	bl	8009db4 <USBD_CtlSendStatus>
      break;
 8009a14:	e00c      	b.n	8009a30 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009a16:	6839      	ldr	r1, [r7, #0]
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f900 	bl	8009c1e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a1e:	4b07      	ldr	r3, [pc, #28]	; (8009a3c <USBD_SetConfig+0x150>)
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	4619      	mov	r1, r3
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f7fe ff92 	bl	800894e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	73fb      	strb	r3, [r7, #15]
      break;
 8009a2e:	bf00      	nop
  }

  return ret;
 8009a30:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a32:	4618      	mov	r0, r3
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	200006dc 	.word	0x200006dc

08009a40 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	b082      	sub	sp, #8
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	88db      	ldrh	r3, [r3, #6]
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d004      	beq.n	8009a5c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a52:	6839      	ldr	r1, [r7, #0]
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f000 f8e2 	bl	8009c1e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a5a:	e023      	b.n	8009aa4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a62:	b2db      	uxtb	r3, r3
 8009a64:	2b02      	cmp	r3, #2
 8009a66:	dc02      	bgt.n	8009a6e <USBD_GetConfig+0x2e>
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	dc03      	bgt.n	8009a74 <USBD_GetConfig+0x34>
 8009a6c:	e015      	b.n	8009a9a <USBD_GetConfig+0x5a>
 8009a6e:	2b03      	cmp	r3, #3
 8009a70:	d00b      	beq.n	8009a8a <USBD_GetConfig+0x4a>
 8009a72:	e012      	b.n	8009a9a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2200      	movs	r2, #0
 8009a78:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	3308      	adds	r3, #8
 8009a7e:	2201      	movs	r2, #1
 8009a80:	4619      	mov	r1, r3
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	f000 f93c 	bl	8009d00 <USBD_CtlSendData>
        break;
 8009a88:	e00c      	b.n	8009aa4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	3304      	adds	r3, #4
 8009a8e:	2201      	movs	r2, #1
 8009a90:	4619      	mov	r1, r3
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f934 	bl	8009d00 <USBD_CtlSendData>
        break;
 8009a98:	e004      	b.n	8009aa4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009a9a:	6839      	ldr	r1, [r7, #0]
 8009a9c:	6878      	ldr	r0, [r7, #4]
 8009a9e:	f000 f8be 	bl	8009c1e <USBD_CtlError>
        break;
 8009aa2:	bf00      	nop
}
 8009aa4:	bf00      	nop
 8009aa6:	3708      	adds	r7, #8
 8009aa8:	46bd      	mov	sp, r7
 8009aaa:	bd80      	pop	{r7, pc}

08009aac <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009aac:	b580      	push	{r7, lr}
 8009aae:	b082      	sub	sp, #8
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	6078      	str	r0, [r7, #4]
 8009ab4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009abc:	b2db      	uxtb	r3, r3
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	2b02      	cmp	r3, #2
 8009ac2:	d81e      	bhi.n	8009b02 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	88db      	ldrh	r3, [r3, #6]
 8009ac8:	2b02      	cmp	r3, #2
 8009aca:	d004      	beq.n	8009ad6 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009acc:	6839      	ldr	r1, [r7, #0]
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 f8a5 	bl	8009c1e <USBD_CtlError>
        break;
 8009ad4:	e01a      	b.n	8009b0c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2201      	movs	r2, #1
 8009ada:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d005      	beq.n	8009af2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	68db      	ldr	r3, [r3, #12]
 8009aea:	f043 0202 	orr.w	r2, r3, #2
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	330c      	adds	r3, #12
 8009af6:	2202      	movs	r2, #2
 8009af8:	4619      	mov	r1, r3
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f900 	bl	8009d00 <USBD_CtlSendData>
      break;
 8009b00:	e004      	b.n	8009b0c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b02:	6839      	ldr	r1, [r7, #0]
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 f88a 	bl	8009c1e <USBD_CtlError>
      break;
 8009b0a:	bf00      	nop
  }
}
 8009b0c:	bf00      	nop
 8009b0e:	3708      	adds	r7, #8
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
 8009b1c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	885b      	ldrh	r3, [r3, #2]
 8009b22:	2b01      	cmp	r3, #1
 8009b24:	d107      	bne.n	8009b36 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2201      	movs	r2, #1
 8009b2a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f940 	bl	8009db4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009b34:	e013      	b.n	8009b5e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	885b      	ldrh	r3, [r3, #2]
 8009b3a:	2b02      	cmp	r3, #2
 8009b3c:	d10b      	bne.n	8009b56 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009b3e:	683b      	ldr	r3, [r7, #0]
 8009b40:	889b      	ldrh	r3, [r3, #4]
 8009b42:	0a1b      	lsrs	r3, r3, #8
 8009b44:	b29b      	uxth	r3, r3
 8009b46:	b2da      	uxtb	r2, r3
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f000 f930 	bl	8009db4 <USBD_CtlSendStatus>
}
 8009b54:	e003      	b.n	8009b5e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f860 	bl	8009c1e <USBD_CtlError>
}
 8009b5e:	bf00      	nop
 8009b60:	3708      	adds	r7, #8
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b082      	sub	sp, #8
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
 8009b6e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b76:	b2db      	uxtb	r3, r3
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	2b02      	cmp	r3, #2
 8009b7c:	d80b      	bhi.n	8009b96 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	885b      	ldrh	r3, [r3, #2]
 8009b82:	2b01      	cmp	r3, #1
 8009b84:	d10c      	bne.n	8009ba0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f000 f910 	bl	8009db4 <USBD_CtlSendStatus>
      }
      break;
 8009b94:	e004      	b.n	8009ba0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009b96:	6839      	ldr	r1, [r7, #0]
 8009b98:	6878      	ldr	r0, [r7, #4]
 8009b9a:	f000 f840 	bl	8009c1e <USBD_CtlError>
      break;
 8009b9e:	e000      	b.n	8009ba2 <USBD_ClrFeature+0x3c>
      break;
 8009ba0:	bf00      	nop
  }
}
 8009ba2:	bf00      	nop
 8009ba4:	3708      	adds	r7, #8
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b084      	sub	sp, #16
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
 8009bb2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	781a      	ldrb	r2, [r3, #0]
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	3301      	adds	r3, #1
 8009bc4:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	781a      	ldrb	r2, [r3, #0]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	3301      	adds	r3, #1
 8009bd2:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009bd4:	68f8      	ldr	r0, [r7, #12]
 8009bd6:	f7ff fa41 	bl	800905c <SWAPBYTE>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	461a      	mov	r2, r3
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	3301      	adds	r3, #1
 8009be6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	3301      	adds	r3, #1
 8009bec:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f7ff fa34 	bl	800905c <SWAPBYTE>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	461a      	mov	r2, r3
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3301      	adds	r3, #1
 8009c06:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f7ff fa27 	bl	800905c <SWAPBYTE>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	461a      	mov	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	80da      	strh	r2, [r3, #6]
}
 8009c16:	bf00      	nop
 8009c18:	3710      	adds	r7, #16
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	bd80      	pop	{r7, pc}

08009c1e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c1e:	b580      	push	{r7, lr}
 8009c20:	b082      	sub	sp, #8
 8009c22:	af00      	add	r7, sp, #0
 8009c24:	6078      	str	r0, [r7, #4]
 8009c26:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c28:	2180      	movs	r1, #128	; 0x80
 8009c2a:	6878      	ldr	r0, [r7, #4]
 8009c2c:	f000 fce0 	bl	800a5f0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c30:	2100      	movs	r1, #0
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fcdc 	bl	800a5f0 <USBD_LL_StallEP>
}
 8009c38:	bf00      	nop
 8009c3a:	3708      	adds	r7, #8
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}

08009c40 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c40:	b580      	push	{r7, lr}
 8009c42:	b086      	sub	sp, #24
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	60f8      	str	r0, [r7, #12]
 8009c48:	60b9      	str	r1, [r7, #8]
 8009c4a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c4c:	2300      	movs	r3, #0
 8009c4e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d036      	beq.n	8009cc4 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009c5a:	6938      	ldr	r0, [r7, #16]
 8009c5c:	f000 f836 	bl	8009ccc <USBD_GetLen>
 8009c60:	4603      	mov	r3, r0
 8009c62:	3301      	adds	r3, #1
 8009c64:	b29b      	uxth	r3, r3
 8009c66:	005b      	lsls	r3, r3, #1
 8009c68:	b29a      	uxth	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009c6e:	7dfb      	ldrb	r3, [r7, #23]
 8009c70:	68ba      	ldr	r2, [r7, #8]
 8009c72:	4413      	add	r3, r2
 8009c74:	687a      	ldr	r2, [r7, #4]
 8009c76:	7812      	ldrb	r2, [r2, #0]
 8009c78:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c7a:	7dfb      	ldrb	r3, [r7, #23]
 8009c7c:	3301      	adds	r3, #1
 8009c7e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009c80:	7dfb      	ldrb	r3, [r7, #23]
 8009c82:	68ba      	ldr	r2, [r7, #8]
 8009c84:	4413      	add	r3, r2
 8009c86:	2203      	movs	r2, #3
 8009c88:	701a      	strb	r2, [r3, #0]
  idx++;
 8009c8a:	7dfb      	ldrb	r3, [r7, #23]
 8009c8c:	3301      	adds	r3, #1
 8009c8e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009c90:	e013      	b.n	8009cba <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009c92:	7dfb      	ldrb	r3, [r7, #23]
 8009c94:	68ba      	ldr	r2, [r7, #8]
 8009c96:	4413      	add	r3, r2
 8009c98:	693a      	ldr	r2, [r7, #16]
 8009c9a:	7812      	ldrb	r2, [r2, #0]
 8009c9c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009c9e:	693b      	ldr	r3, [r7, #16]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	613b      	str	r3, [r7, #16]
    idx++;
 8009ca4:	7dfb      	ldrb	r3, [r7, #23]
 8009ca6:	3301      	adds	r3, #1
 8009ca8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009caa:	7dfb      	ldrb	r3, [r7, #23]
 8009cac:	68ba      	ldr	r2, [r7, #8]
 8009cae:	4413      	add	r3, r2
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	701a      	strb	r2, [r3, #0]
    idx++;
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	781b      	ldrb	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d1e7      	bne.n	8009c92 <USBD_GetString+0x52>
 8009cc2:	e000      	b.n	8009cc6 <USBD_GetString+0x86>
    return;
 8009cc4:	bf00      	nop
  }
}
 8009cc6:	3718      	adds	r7, #24
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	bd80      	pop	{r7, pc}

08009ccc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009ccc:	b480      	push	{r7}
 8009cce:	b085      	sub	sp, #20
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009cdc:	e005      	b.n	8009cea <USBD_GetLen+0x1e>
  {
    len++;
 8009cde:	7bfb      	ldrb	r3, [r7, #15]
 8009ce0:	3301      	adds	r3, #1
 8009ce2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009ce4:	68bb      	ldr	r3, [r7, #8]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009cea:	68bb      	ldr	r3, [r7, #8]
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1f5      	bne.n	8009cde <USBD_GetLen+0x12>
  }

  return len;
 8009cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3714      	adds	r7, #20
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr

08009d00 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009d00:	b580      	push	{r7, lr}
 8009d02:	b084      	sub	sp, #16
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	60f8      	str	r0, [r7, #12]
 8009d08:	60b9      	str	r1, [r7, #8]
 8009d0a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2202      	movs	r2, #2
 8009d10:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	687a      	ldr	r2, [r7, #4]
 8009d18:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	68ba      	ldr	r2, [r7, #8]
 8009d24:	2100      	movs	r1, #0
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 fceb 	bl	800a702 <USBD_LL_Transmit>

  return USBD_OK;
 8009d2c:	2300      	movs	r3, #0
}
 8009d2e:	4618      	mov	r0, r3
 8009d30:	3710      	adds	r7, #16
 8009d32:	46bd      	mov	sp, r7
 8009d34:	bd80      	pop	{r7, pc}

08009d36 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d36:	b580      	push	{r7, lr}
 8009d38:	b084      	sub	sp, #16
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	60f8      	str	r0, [r7, #12]
 8009d3e:	60b9      	str	r1, [r7, #8]
 8009d40:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	68ba      	ldr	r2, [r7, #8]
 8009d46:	2100      	movs	r1, #0
 8009d48:	68f8      	ldr	r0, [r7, #12]
 8009d4a:	f000 fcda 	bl	800a702 <USBD_LL_Transmit>

  return USBD_OK;
 8009d4e:	2300      	movs	r3, #0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3710      	adds	r7, #16
 8009d54:	46bd      	mov	sp, r7
 8009d56:	bd80      	pop	{r7, pc}

08009d58 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b084      	sub	sp, #16
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	60f8      	str	r0, [r7, #12]
 8009d60:	60b9      	str	r1, [r7, #8]
 8009d62:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	2203      	movs	r2, #3
 8009d68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	687a      	ldr	r2, [r7, #4]
 8009d78:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	2100      	movs	r1, #0
 8009d82:	68f8      	ldr	r0, [r7, #12]
 8009d84:	f000 fcde 	bl	800a744 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009d88:	2300      	movs	r3, #0
}
 8009d8a:	4618      	mov	r0, r3
 8009d8c:	3710      	adds	r7, #16
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	bd80      	pop	{r7, pc}

08009d92 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009d92:	b580      	push	{r7, lr}
 8009d94:	b084      	sub	sp, #16
 8009d96:	af00      	add	r7, sp, #0
 8009d98:	60f8      	str	r0, [r7, #12]
 8009d9a:	60b9      	str	r1, [r7, #8]
 8009d9c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	68ba      	ldr	r2, [r7, #8]
 8009da2:	2100      	movs	r1, #0
 8009da4:	68f8      	ldr	r0, [r7, #12]
 8009da6:	f000 fccd 	bl	800a744 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3710      	adds	r7, #16
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}

08009db4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009db4:	b580      	push	{r7, lr}
 8009db6:	b082      	sub	sp, #8
 8009db8:	af00      	add	r7, sp, #0
 8009dba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2204      	movs	r2, #4
 8009dc0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009dc4:	2300      	movs	r3, #0
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	2100      	movs	r1, #0
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 fc99 	bl	800a702 <USBD_LL_Transmit>

  return USBD_OK;
 8009dd0:	2300      	movs	r3, #0
}
 8009dd2:	4618      	mov	r0, r3
 8009dd4:	3708      	adds	r7, #8
 8009dd6:	46bd      	mov	sp, r7
 8009dd8:	bd80      	pop	{r7, pc}

08009dda <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009dda:	b580      	push	{r7, lr}
 8009ddc:	b082      	sub	sp, #8
 8009dde:	af00      	add	r7, sp, #0
 8009de0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	2205      	movs	r2, #5
 8009de6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009dea:	2300      	movs	r3, #0
 8009dec:	2200      	movs	r2, #0
 8009dee:	2100      	movs	r1, #0
 8009df0:	6878      	ldr	r0, [r7, #4]
 8009df2:	f000 fca7 	bl	800a744 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3708      	adds	r7, #8
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}

08009e00 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009e00:	b580      	push	{r7, lr}
 8009e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009e04:	2200      	movs	r2, #0
 8009e06:	4912      	ldr	r1, [pc, #72]	; (8009e50 <MX_USB_DEVICE_Init+0x50>)
 8009e08:	4812      	ldr	r0, [pc, #72]	; (8009e54 <MX_USB_DEVICE_Init+0x54>)
 8009e0a:	f7fe fd07 	bl	800881c <USBD_Init>
 8009e0e:	4603      	mov	r3, r0
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d001      	beq.n	8009e18 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009e14:	f7f7 fd70 	bl	80018f8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009e18:	490f      	ldr	r1, [pc, #60]	; (8009e58 <MX_USB_DEVICE_Init+0x58>)
 8009e1a:	480e      	ldr	r0, [pc, #56]	; (8009e54 <MX_USB_DEVICE_Init+0x54>)
 8009e1c:	f7fe fd2e 	bl	800887c <USBD_RegisterClass>
 8009e20:	4603      	mov	r3, r0
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d001      	beq.n	8009e2a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009e26:	f7f7 fd67 	bl	80018f8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009e2a:	490c      	ldr	r1, [pc, #48]	; (8009e5c <MX_USB_DEVICE_Init+0x5c>)
 8009e2c:	4809      	ldr	r0, [pc, #36]	; (8009e54 <MX_USB_DEVICE_Init+0x54>)
 8009e2e:	f7fe fc1f 	bl	8008670 <USBD_CDC_RegisterInterface>
 8009e32:	4603      	mov	r3, r0
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d001      	beq.n	8009e3c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009e38:	f7f7 fd5e 	bl	80018f8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009e3c:	4805      	ldr	r0, [pc, #20]	; (8009e54 <MX_USB_DEVICE_Init+0x54>)
 8009e3e:	f7fe fd53 	bl	80088e8 <USBD_Start>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d001      	beq.n	8009e4c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009e48:	f7f7 fd56 	bl	80018f8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009e4c:	bf00      	nop
 8009e4e:	bd80      	pop	{r7, pc}
 8009e50:	200000ec 	.word	0x200000ec
 8009e54:	200006e0 	.word	0x200006e0
 8009e58:	20000058 	.word	0x20000058
 8009e5c:	200000d8 	.word	0x200000d8

08009e60 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009e60:	b580      	push	{r7, lr}
 8009e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009e64:	2200      	movs	r2, #0
 8009e66:	4905      	ldr	r1, [pc, #20]	; (8009e7c <CDC_Init_FS+0x1c>)
 8009e68:	4805      	ldr	r0, [pc, #20]	; (8009e80 <CDC_Init_FS+0x20>)
 8009e6a:	f7fe fc1b 	bl	80086a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009e6e:	4905      	ldr	r1, [pc, #20]	; (8009e84 <CDC_Init_FS+0x24>)
 8009e70:	4803      	ldr	r0, [pc, #12]	; (8009e80 <CDC_Init_FS+0x20>)
 8009e72:	f7fe fc39 	bl	80086e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009e76:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	200011bc 	.word	0x200011bc
 8009e80:	200006e0 	.word	0x200006e0
 8009e84:	200009bc 	.word	0x200009bc

08009e88 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009e8c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	46bd      	mov	sp, r7
 8009e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e96:	4770      	bx	lr

08009e98 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	6039      	str	r1, [r7, #0]
 8009ea2:	71fb      	strb	r3, [r7, #7]
 8009ea4:	4613      	mov	r3, r2
 8009ea6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009ea8:	79fb      	ldrb	r3, [r7, #7]
 8009eaa:	2b23      	cmp	r3, #35	; 0x23
 8009eac:	d84a      	bhi.n	8009f44 <CDC_Control_FS+0xac>
 8009eae:	a201      	add	r2, pc, #4	; (adr r2, 8009eb4 <CDC_Control_FS+0x1c>)
 8009eb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009eb4:	08009f45 	.word	0x08009f45
 8009eb8:	08009f45 	.word	0x08009f45
 8009ebc:	08009f45 	.word	0x08009f45
 8009ec0:	08009f45 	.word	0x08009f45
 8009ec4:	08009f45 	.word	0x08009f45
 8009ec8:	08009f45 	.word	0x08009f45
 8009ecc:	08009f45 	.word	0x08009f45
 8009ed0:	08009f45 	.word	0x08009f45
 8009ed4:	08009f45 	.word	0x08009f45
 8009ed8:	08009f45 	.word	0x08009f45
 8009edc:	08009f45 	.word	0x08009f45
 8009ee0:	08009f45 	.word	0x08009f45
 8009ee4:	08009f45 	.word	0x08009f45
 8009ee8:	08009f45 	.word	0x08009f45
 8009eec:	08009f45 	.word	0x08009f45
 8009ef0:	08009f45 	.word	0x08009f45
 8009ef4:	08009f45 	.word	0x08009f45
 8009ef8:	08009f45 	.word	0x08009f45
 8009efc:	08009f45 	.word	0x08009f45
 8009f00:	08009f45 	.word	0x08009f45
 8009f04:	08009f45 	.word	0x08009f45
 8009f08:	08009f45 	.word	0x08009f45
 8009f0c:	08009f45 	.word	0x08009f45
 8009f10:	08009f45 	.word	0x08009f45
 8009f14:	08009f45 	.word	0x08009f45
 8009f18:	08009f45 	.word	0x08009f45
 8009f1c:	08009f45 	.word	0x08009f45
 8009f20:	08009f45 	.word	0x08009f45
 8009f24:	08009f45 	.word	0x08009f45
 8009f28:	08009f45 	.word	0x08009f45
 8009f2c:	08009f45 	.word	0x08009f45
 8009f30:	08009f45 	.word	0x08009f45
 8009f34:	08009f45 	.word	0x08009f45
 8009f38:	08009f45 	.word	0x08009f45
 8009f3c:	08009f45 	.word	0x08009f45
 8009f40:	08009f45 	.word	0x08009f45
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009f44:	bf00      	nop
  }

  return (USBD_OK);
 8009f46:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009f48:	4618      	mov	r0, r3
 8009f4a:	370c      	adds	r7, #12
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b082      	sub	sp, #8
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	6078      	str	r0, [r7, #4]
 8009f5c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009f5e:	6879      	ldr	r1, [r7, #4]
 8009f60:	4805      	ldr	r0, [pc, #20]	; (8009f78 <CDC_Receive_FS+0x24>)
 8009f62:	f7fe fbc1 	bl	80086e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009f66:	4804      	ldr	r0, [pc, #16]	; (8009f78 <CDC_Receive_FS+0x24>)
 8009f68:	f7fe fc22 	bl	80087b0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009f6c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009f6e:	4618      	mov	r0, r3
 8009f70:	3708      	adds	r7, #8
 8009f72:	46bd      	mov	sp, r7
 8009f74:	bd80      	pop	{r7, pc}
 8009f76:	bf00      	nop
 8009f78:	200006e0 	.word	0x200006e0

08009f7c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	6078      	str	r0, [r7, #4]
 8009f84:	460b      	mov	r3, r1
 8009f86:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009f8c:	4b0d      	ldr	r3, [pc, #52]	; (8009fc4 <CDC_Transmit_FS+0x48>)
 8009f8e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009f92:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d001      	beq.n	8009fa2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009f9e:	2301      	movs	r3, #1
 8009fa0:	e00b      	b.n	8009fba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009fa2:	887b      	ldrh	r3, [r7, #2]
 8009fa4:	461a      	mov	r2, r3
 8009fa6:	6879      	ldr	r1, [r7, #4]
 8009fa8:	4806      	ldr	r0, [pc, #24]	; (8009fc4 <CDC_Transmit_FS+0x48>)
 8009faa:	f7fe fb7b 	bl	80086a4 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009fae:	4805      	ldr	r0, [pc, #20]	; (8009fc4 <CDC_Transmit_FS+0x48>)
 8009fb0:	f7fe fbb8 	bl	8008724 <USBD_CDC_TransmitPacket>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	200006e0 	.word	0x200006e0

08009fc8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009fc8:	b480      	push	{r7}
 8009fca:	b087      	sub	sp, #28
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	60f8      	str	r0, [r7, #12]
 8009fd0:	60b9      	str	r1, [r7, #8]
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009fd6:	2300      	movs	r3, #0
 8009fd8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009fda:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	371c      	adds	r7, #28
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe8:	4770      	bx	lr
	...

08009fec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009fec:	b480      	push	{r7}
 8009fee:	b083      	sub	sp, #12
 8009ff0:	af00      	add	r7, sp, #0
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	6039      	str	r1, [r7, #0]
 8009ff6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	2212      	movs	r2, #18
 8009ffc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009ffe:	4b03      	ldr	r3, [pc, #12]	; (800a00c <USBD_FS_DeviceDescriptor+0x20>)
}
 800a000:	4618      	mov	r0, r3
 800a002:	370c      	adds	r7, #12
 800a004:	46bd      	mov	sp, r7
 800a006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00a:	4770      	bx	lr
 800a00c:	20000108 	.word	0x20000108

0800a010 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a010:	b480      	push	{r7}
 800a012:	b083      	sub	sp, #12
 800a014:	af00      	add	r7, sp, #0
 800a016:	4603      	mov	r3, r0
 800a018:	6039      	str	r1, [r7, #0]
 800a01a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a01c:	683b      	ldr	r3, [r7, #0]
 800a01e:	2204      	movs	r2, #4
 800a020:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a022:	4b03      	ldr	r3, [pc, #12]	; (800a030 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a024:	4618      	mov	r0, r3
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr
 800a030:	2000011c 	.word	0x2000011c

0800a034 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b082      	sub	sp, #8
 800a038:	af00      	add	r7, sp, #0
 800a03a:	4603      	mov	r3, r0
 800a03c:	6039      	str	r1, [r7, #0]
 800a03e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a040:	79fb      	ldrb	r3, [r7, #7]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d105      	bne.n	800a052 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a046:	683a      	ldr	r2, [r7, #0]
 800a048:	4907      	ldr	r1, [pc, #28]	; (800a068 <USBD_FS_ProductStrDescriptor+0x34>)
 800a04a:	4808      	ldr	r0, [pc, #32]	; (800a06c <USBD_FS_ProductStrDescriptor+0x38>)
 800a04c:	f7ff fdf8 	bl	8009c40 <USBD_GetString>
 800a050:	e004      	b.n	800a05c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a052:	683a      	ldr	r2, [r7, #0]
 800a054:	4904      	ldr	r1, [pc, #16]	; (800a068 <USBD_FS_ProductStrDescriptor+0x34>)
 800a056:	4805      	ldr	r0, [pc, #20]	; (800a06c <USBD_FS_ProductStrDescriptor+0x38>)
 800a058:	f7ff fdf2 	bl	8009c40 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a05c:	4b02      	ldr	r3, [pc, #8]	; (800a068 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a05e:	4618      	mov	r0, r3
 800a060:	3708      	adds	r7, #8
 800a062:	46bd      	mov	sp, r7
 800a064:	bd80      	pop	{r7, pc}
 800a066:	bf00      	nop
 800a068:	200019bc 	.word	0x200019bc
 800a06c:	0800d688 	.word	0x0800d688

0800a070 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a070:	b580      	push	{r7, lr}
 800a072:	b082      	sub	sp, #8
 800a074:	af00      	add	r7, sp, #0
 800a076:	4603      	mov	r3, r0
 800a078:	6039      	str	r1, [r7, #0]
 800a07a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a07c:	683a      	ldr	r2, [r7, #0]
 800a07e:	4904      	ldr	r1, [pc, #16]	; (800a090 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a080:	4804      	ldr	r0, [pc, #16]	; (800a094 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a082:	f7ff fddd 	bl	8009c40 <USBD_GetString>
  return USBD_StrDesc;
 800a086:	4b02      	ldr	r3, [pc, #8]	; (800a090 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	200019bc 	.word	0x200019bc
 800a094:	0800d6a0 	.word	0x0800d6a0

0800a098 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b082      	sub	sp, #8
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	4603      	mov	r3, r0
 800a0a0:	6039      	str	r1, [r7, #0]
 800a0a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	221a      	movs	r2, #26
 800a0a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a0aa:	f000 f843 	bl	800a134 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a0ae:	4b02      	ldr	r3, [pc, #8]	; (800a0b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	3708      	adds	r7, #8
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}
 800a0b8:	20000120 	.word	0x20000120

0800a0bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	6039      	str	r1, [r7, #0]
 800a0c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a0c8:	79fb      	ldrb	r3, [r7, #7]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d105      	bne.n	800a0da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0ce:	683a      	ldr	r2, [r7, #0]
 800a0d0:	4907      	ldr	r1, [pc, #28]	; (800a0f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0d2:	4808      	ldr	r0, [pc, #32]	; (800a0f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0d4:	f7ff fdb4 	bl	8009c40 <USBD_GetString>
 800a0d8:	e004      	b.n	800a0e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a0da:	683a      	ldr	r2, [r7, #0]
 800a0dc:	4904      	ldr	r1, [pc, #16]	; (800a0f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a0de:	4805      	ldr	r0, [pc, #20]	; (800a0f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a0e0:	f7ff fdae 	bl	8009c40 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a0e4:	4b02      	ldr	r3, [pc, #8]	; (800a0f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3708      	adds	r7, #8
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	200019bc 	.word	0x200019bc
 800a0f4:	0800d6b4 	.word	0x0800d6b4

0800a0f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	b082      	sub	sp, #8
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	4603      	mov	r3, r0
 800a100:	6039      	str	r1, [r7, #0]
 800a102:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a104:	79fb      	ldrb	r3, [r7, #7]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d105      	bne.n	800a116 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	4907      	ldr	r1, [pc, #28]	; (800a12c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a10e:	4808      	ldr	r0, [pc, #32]	; (800a130 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a110:	f7ff fd96 	bl	8009c40 <USBD_GetString>
 800a114:	e004      	b.n	800a120 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a116:	683a      	ldr	r2, [r7, #0]
 800a118:	4904      	ldr	r1, [pc, #16]	; (800a12c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a11a:	4805      	ldr	r0, [pc, #20]	; (800a130 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a11c:	f7ff fd90 	bl	8009c40 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a120:	4b02      	ldr	r3, [pc, #8]	; (800a12c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a122:	4618      	mov	r0, r3
 800a124:	3708      	adds	r7, #8
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}
 800a12a:	bf00      	nop
 800a12c:	200019bc 	.word	0x200019bc
 800a130:	0800d6c0 	.word	0x0800d6c0

0800a134 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b084      	sub	sp, #16
 800a138:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a13a:	4b0f      	ldr	r3, [pc, #60]	; (800a178 <Get_SerialNum+0x44>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a140:	4b0e      	ldr	r3, [pc, #56]	; (800a17c <Get_SerialNum+0x48>)
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a146:	4b0e      	ldr	r3, [pc, #56]	; (800a180 <Get_SerialNum+0x4c>)
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4413      	add	r3, r2
 800a152:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d009      	beq.n	800a16e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a15a:	2208      	movs	r2, #8
 800a15c:	4909      	ldr	r1, [pc, #36]	; (800a184 <Get_SerialNum+0x50>)
 800a15e:	68f8      	ldr	r0, [r7, #12]
 800a160:	f000 f814 	bl	800a18c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a164:	2204      	movs	r2, #4
 800a166:	4908      	ldr	r1, [pc, #32]	; (800a188 <Get_SerialNum+0x54>)
 800a168:	68b8      	ldr	r0, [r7, #8]
 800a16a:	f000 f80f 	bl	800a18c <IntToUnicode>
  }
}
 800a16e:	bf00      	nop
 800a170:	3710      	adds	r7, #16
 800a172:	46bd      	mov	sp, r7
 800a174:	bd80      	pop	{r7, pc}
 800a176:	bf00      	nop
 800a178:	1fff7a10 	.word	0x1fff7a10
 800a17c:	1fff7a14 	.word	0x1fff7a14
 800a180:	1fff7a18 	.word	0x1fff7a18
 800a184:	20000122 	.word	0x20000122
 800a188:	20000132 	.word	0x20000132

0800a18c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b087      	sub	sp, #28
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	4613      	mov	r3, r2
 800a198:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a19a:	2300      	movs	r3, #0
 800a19c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a19e:	2300      	movs	r3, #0
 800a1a0:	75fb      	strb	r3, [r7, #23]
 800a1a2:	e027      	b.n	800a1f4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	0f1b      	lsrs	r3, r3, #28
 800a1a8:	2b09      	cmp	r3, #9
 800a1aa:	d80b      	bhi.n	800a1c4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	0f1b      	lsrs	r3, r3, #28
 800a1b0:	b2da      	uxtb	r2, r3
 800a1b2:	7dfb      	ldrb	r3, [r7, #23]
 800a1b4:	005b      	lsls	r3, r3, #1
 800a1b6:	4619      	mov	r1, r3
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	440b      	add	r3, r1
 800a1bc:	3230      	adds	r2, #48	; 0x30
 800a1be:	b2d2      	uxtb	r2, r2
 800a1c0:	701a      	strb	r2, [r3, #0]
 800a1c2:	e00a      	b.n	800a1da <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	0f1b      	lsrs	r3, r3, #28
 800a1c8:	b2da      	uxtb	r2, r3
 800a1ca:	7dfb      	ldrb	r3, [r7, #23]
 800a1cc:	005b      	lsls	r3, r3, #1
 800a1ce:	4619      	mov	r1, r3
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	440b      	add	r3, r1
 800a1d4:	3237      	adds	r2, #55	; 0x37
 800a1d6:	b2d2      	uxtb	r2, r2
 800a1d8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	011b      	lsls	r3, r3, #4
 800a1de:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a1e0:	7dfb      	ldrb	r3, [r7, #23]
 800a1e2:	005b      	lsls	r3, r3, #1
 800a1e4:	3301      	adds	r3, #1
 800a1e6:	68ba      	ldr	r2, [r7, #8]
 800a1e8:	4413      	add	r3, r2
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a1ee:	7dfb      	ldrb	r3, [r7, #23]
 800a1f0:	3301      	adds	r3, #1
 800a1f2:	75fb      	strb	r3, [r7, #23]
 800a1f4:	7dfa      	ldrb	r2, [r7, #23]
 800a1f6:	79fb      	ldrb	r3, [r7, #7]
 800a1f8:	429a      	cmp	r2, r3
 800a1fa:	d3d3      	bcc.n	800a1a4 <IntToUnicode+0x18>
  }
}
 800a1fc:	bf00      	nop
 800a1fe:	bf00      	nop
 800a200:	371c      	adds	r7, #28
 800a202:	46bd      	mov	sp, r7
 800a204:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a208:	4770      	bx	lr
	...

0800a20c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b08a      	sub	sp, #40	; 0x28
 800a210:	af00      	add	r7, sp, #0
 800a212:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a214:	f107 0314 	add.w	r3, r7, #20
 800a218:	2200      	movs	r2, #0
 800a21a:	601a      	str	r2, [r3, #0]
 800a21c:	605a      	str	r2, [r3, #4]
 800a21e:	609a      	str	r2, [r3, #8]
 800a220:	60da      	str	r2, [r3, #12]
 800a222:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a22c:	d13a      	bne.n	800a2a4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a22e:	2300      	movs	r3, #0
 800a230:	613b      	str	r3, [r7, #16]
 800a232:	4b1e      	ldr	r3, [pc, #120]	; (800a2ac <HAL_PCD_MspInit+0xa0>)
 800a234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a236:	4a1d      	ldr	r2, [pc, #116]	; (800a2ac <HAL_PCD_MspInit+0xa0>)
 800a238:	f043 0301 	orr.w	r3, r3, #1
 800a23c:	6313      	str	r3, [r2, #48]	; 0x30
 800a23e:	4b1b      	ldr	r3, [pc, #108]	; (800a2ac <HAL_PCD_MspInit+0xa0>)
 800a240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a242:	f003 0301 	and.w	r3, r3, #1
 800a246:	613b      	str	r3, [r7, #16]
 800a248:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a24a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a24e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a250:	2302      	movs	r3, #2
 800a252:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a254:	2300      	movs	r3, #0
 800a256:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a258:	2303      	movs	r3, #3
 800a25a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a25c:	230a      	movs	r3, #10
 800a25e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a260:	f107 0314 	add.w	r3, r7, #20
 800a264:	4619      	mov	r1, r3
 800a266:	4812      	ldr	r0, [pc, #72]	; (800a2b0 <HAL_PCD_MspInit+0xa4>)
 800a268:	f7f9 f8be 	bl	80033e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a26c:	4b0f      	ldr	r3, [pc, #60]	; (800a2ac <HAL_PCD_MspInit+0xa0>)
 800a26e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a270:	4a0e      	ldr	r2, [pc, #56]	; (800a2ac <HAL_PCD_MspInit+0xa0>)
 800a272:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a276:	6353      	str	r3, [r2, #52]	; 0x34
 800a278:	2300      	movs	r3, #0
 800a27a:	60fb      	str	r3, [r7, #12]
 800a27c:	4b0b      	ldr	r3, [pc, #44]	; (800a2ac <HAL_PCD_MspInit+0xa0>)
 800a27e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a280:	4a0a      	ldr	r2, [pc, #40]	; (800a2ac <HAL_PCD_MspInit+0xa0>)
 800a282:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a286:	6453      	str	r3, [r2, #68]	; 0x44
 800a288:	4b08      	ldr	r3, [pc, #32]	; (800a2ac <HAL_PCD_MspInit+0xa0>)
 800a28a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a28c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a290:	60fb      	str	r3, [r7, #12]
 800a292:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a294:	2200      	movs	r2, #0
 800a296:	2100      	movs	r1, #0
 800a298:	2043      	movs	r0, #67	; 0x43
 800a29a:	f7f8 fcfe 	bl	8002c9a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a29e:	2043      	movs	r0, #67	; 0x43
 800a2a0:	f7f8 fd17 	bl	8002cd2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a2a4:	bf00      	nop
 800a2a6:	3728      	adds	r7, #40	; 0x28
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	40023800 	.word	0x40023800
 800a2b0:	40020000 	.word	0x40020000

0800a2b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a2c8:	4619      	mov	r1, r3
 800a2ca:	4610      	mov	r0, r2
 800a2cc:	f7fe fb59 	bl	8008982 <USBD_LL_SetupStage>
}
 800a2d0:	bf00      	nop
 800a2d2:	3708      	adds	r7, #8
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b082      	sub	sp, #8
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	460b      	mov	r3, r1
 800a2e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a2ea:	78fa      	ldrb	r2, [r7, #3]
 800a2ec:	6879      	ldr	r1, [r7, #4]
 800a2ee:	4613      	mov	r3, r2
 800a2f0:	00db      	lsls	r3, r3, #3
 800a2f2:	4413      	add	r3, r2
 800a2f4:	009b      	lsls	r3, r3, #2
 800a2f6:	440b      	add	r3, r1
 800a2f8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	78fb      	ldrb	r3, [r7, #3]
 800a300:	4619      	mov	r1, r3
 800a302:	f7fe fb93 	bl	8008a2c <USBD_LL_DataOutStage>
}
 800a306:	bf00      	nop
 800a308:	3708      	adds	r7, #8
 800a30a:	46bd      	mov	sp, r7
 800a30c:	bd80      	pop	{r7, pc}

0800a30e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a30e:	b580      	push	{r7, lr}
 800a310:	b082      	sub	sp, #8
 800a312:	af00      	add	r7, sp, #0
 800a314:	6078      	str	r0, [r7, #4]
 800a316:	460b      	mov	r3, r1
 800a318:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a320:	78fa      	ldrb	r2, [r7, #3]
 800a322:	6879      	ldr	r1, [r7, #4]
 800a324:	4613      	mov	r3, r2
 800a326:	00db      	lsls	r3, r3, #3
 800a328:	4413      	add	r3, r2
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	440b      	add	r3, r1
 800a32e:	334c      	adds	r3, #76	; 0x4c
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	78fb      	ldrb	r3, [r7, #3]
 800a334:	4619      	mov	r1, r3
 800a336:	f7fe fc2c 	bl	8008b92 <USBD_LL_DataInStage>
}
 800a33a:	bf00      	nop
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b082      	sub	sp, #8
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a350:	4618      	mov	r0, r3
 800a352:	f7fe fd60 	bl	8008e16 <USBD_LL_SOF>
}
 800a356:	bf00      	nop
 800a358:	3708      	adds	r7, #8
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}

0800a35e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a35e:	b580      	push	{r7, lr}
 800a360:	b084      	sub	sp, #16
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a366:	2301      	movs	r3, #1
 800a368:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d102      	bne.n	800a378 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a372:	2300      	movs	r3, #0
 800a374:	73fb      	strb	r3, [r7, #15]
 800a376:	e008      	b.n	800a38a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d102      	bne.n	800a386 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a380:	2301      	movs	r3, #1
 800a382:	73fb      	strb	r3, [r7, #15]
 800a384:	e001      	b.n	800a38a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a386:	f7f7 fab7 	bl	80018f8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a390:	7bfa      	ldrb	r2, [r7, #15]
 800a392:	4611      	mov	r1, r2
 800a394:	4618      	mov	r0, r3
 800a396:	f7fe fd00 	bl	8008d9a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f7fe fca8 	bl	8008cf6 <USBD_LL_Reset>
}
 800a3a6:	bf00      	nop
 800a3a8:	3710      	adds	r7, #16
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}
	...

0800a3b0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fe fcfb 	bl	8008dba <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	687a      	ldr	r2, [r7, #4]
 800a3d0:	6812      	ldr	r2, [r2, #0]
 800a3d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a3d6:	f043 0301 	orr.w	r3, r3, #1
 800a3da:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6a1b      	ldr	r3, [r3, #32]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d005      	beq.n	800a3f0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a3e4:	4b04      	ldr	r3, [pc, #16]	; (800a3f8 <HAL_PCD_SuspendCallback+0x48>)
 800a3e6:	691b      	ldr	r3, [r3, #16]
 800a3e8:	4a03      	ldr	r2, [pc, #12]	; (800a3f8 <HAL_PCD_SuspendCallback+0x48>)
 800a3ea:	f043 0306 	orr.w	r3, r3, #6
 800a3ee:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a3f0:	bf00      	nop
 800a3f2:	3708      	adds	r7, #8
 800a3f4:	46bd      	mov	sp, r7
 800a3f6:	bd80      	pop	{r7, pc}
 800a3f8:	e000ed00 	.word	0xe000ed00

0800a3fc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	b082      	sub	sp, #8
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a40a:	4618      	mov	r0, r3
 800a40c:	f7fe fceb 	bl	8008de6 <USBD_LL_Resume>
}
 800a410:	bf00      	nop
 800a412:	3708      	adds	r7, #8
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	460b      	mov	r3, r1
 800a422:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a42a:	78fa      	ldrb	r2, [r7, #3]
 800a42c:	4611      	mov	r1, r2
 800a42e:	4618      	mov	r0, r3
 800a430:	f7fe fd43 	bl	8008eba <USBD_LL_IsoOUTIncomplete>
}
 800a434:	bf00      	nop
 800a436:	3708      	adds	r7, #8
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	460b      	mov	r3, r1
 800a446:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a44e:	78fa      	ldrb	r2, [r7, #3]
 800a450:	4611      	mov	r1, r2
 800a452:	4618      	mov	r0, r3
 800a454:	f7fe fcff 	bl	8008e56 <USBD_LL_IsoINIncomplete>
}
 800a458:	bf00      	nop
 800a45a:	3708      	adds	r7, #8
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b082      	sub	sp, #8
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a46e:	4618      	mov	r0, r3
 800a470:	f7fe fd55 	bl	8008f1e <USBD_LL_DevConnected>
}
 800a474:	bf00      	nop
 800a476:	3708      	adds	r7, #8
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}

0800a47c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b082      	sub	sp, #8
 800a480:	af00      	add	r7, sp, #0
 800a482:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7fe fd52 	bl	8008f34 <USBD_LL_DevDisconnected>
}
 800a490:	bf00      	nop
 800a492:	3708      	adds	r7, #8
 800a494:	46bd      	mov	sp, r7
 800a496:	bd80      	pop	{r7, pc}

0800a498 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b082      	sub	sp, #8
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	781b      	ldrb	r3, [r3, #0]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d13c      	bne.n	800a522 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a4a8:	4a20      	ldr	r2, [pc, #128]	; (800a52c <USBD_LL_Init+0x94>)
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a1e      	ldr	r2, [pc, #120]	; (800a52c <USBD_LL_Init+0x94>)
 800a4b4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a4b8:	4b1c      	ldr	r3, [pc, #112]	; (800a52c <USBD_LL_Init+0x94>)
 800a4ba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a4be:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a4c0:	4b1a      	ldr	r3, [pc, #104]	; (800a52c <USBD_LL_Init+0x94>)
 800a4c2:	2204      	movs	r2, #4
 800a4c4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a4c6:	4b19      	ldr	r3, [pc, #100]	; (800a52c <USBD_LL_Init+0x94>)
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a4cc:	4b17      	ldr	r3, [pc, #92]	; (800a52c <USBD_LL_Init+0x94>)
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a4d2:	4b16      	ldr	r3, [pc, #88]	; (800a52c <USBD_LL_Init+0x94>)
 800a4d4:	2202      	movs	r2, #2
 800a4d6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a4d8:	4b14      	ldr	r3, [pc, #80]	; (800a52c <USBD_LL_Init+0x94>)
 800a4da:	2200      	movs	r2, #0
 800a4dc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a4de:	4b13      	ldr	r3, [pc, #76]	; (800a52c <USBD_LL_Init+0x94>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a4e4:	4b11      	ldr	r3, [pc, #68]	; (800a52c <USBD_LL_Init+0x94>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a4ea:	4b10      	ldr	r3, [pc, #64]	; (800a52c <USBD_LL_Init+0x94>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a4f0:	4b0e      	ldr	r3, [pc, #56]	; (800a52c <USBD_LL_Init+0x94>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a4f6:	480d      	ldr	r0, [pc, #52]	; (800a52c <USBD_LL_Init+0x94>)
 800a4f8:	f7f9 fa56 	bl	80039a8 <HAL_PCD_Init>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d001      	beq.n	800a506 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a502:	f7f7 f9f9 	bl	80018f8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a506:	2180      	movs	r1, #128	; 0x80
 800a508:	4808      	ldr	r0, [pc, #32]	; (800a52c <USBD_LL_Init+0x94>)
 800a50a:	f7fa fcae 	bl	8004e6a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a50e:	2240      	movs	r2, #64	; 0x40
 800a510:	2100      	movs	r1, #0
 800a512:	4806      	ldr	r0, [pc, #24]	; (800a52c <USBD_LL_Init+0x94>)
 800a514:	f7fa fc62 	bl	8004ddc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a518:	2280      	movs	r2, #128	; 0x80
 800a51a:	2101      	movs	r1, #1
 800a51c:	4803      	ldr	r0, [pc, #12]	; (800a52c <USBD_LL_Init+0x94>)
 800a51e:	f7fa fc5d 	bl	8004ddc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a522:	2300      	movs	r3, #0
}
 800a524:	4618      	mov	r0, r3
 800a526:	3708      	adds	r7, #8
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	20001bbc 	.word	0x20001bbc

0800a530 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a538:	2300      	movs	r3, #0
 800a53a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a53c:	2300      	movs	r3, #0
 800a53e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a546:	4618      	mov	r0, r3
 800a548:	f7f9 fb4b 	bl	8003be2 <HAL_PCD_Start>
 800a54c:	4603      	mov	r3, r0
 800a54e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a550:	7bfb      	ldrb	r3, [r7, #15]
 800a552:	4618      	mov	r0, r3
 800a554:	f000 f942 	bl	800a7dc <USBD_Get_USB_Status>
 800a558:	4603      	mov	r3, r0
 800a55a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a55c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}

0800a566 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a566:	b580      	push	{r7, lr}
 800a568:	b084      	sub	sp, #16
 800a56a:	af00      	add	r7, sp, #0
 800a56c:	6078      	str	r0, [r7, #4]
 800a56e:	4608      	mov	r0, r1
 800a570:	4611      	mov	r1, r2
 800a572:	461a      	mov	r2, r3
 800a574:	4603      	mov	r3, r0
 800a576:	70fb      	strb	r3, [r7, #3]
 800a578:	460b      	mov	r3, r1
 800a57a:	70bb      	strb	r3, [r7, #2]
 800a57c:	4613      	mov	r3, r2
 800a57e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a580:	2300      	movs	r3, #0
 800a582:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a584:	2300      	movs	r3, #0
 800a586:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a58e:	78bb      	ldrb	r3, [r7, #2]
 800a590:	883a      	ldrh	r2, [r7, #0]
 800a592:	78f9      	ldrb	r1, [r7, #3]
 800a594:	f7fa f81c 	bl	80045d0 <HAL_PCD_EP_Open>
 800a598:	4603      	mov	r3, r0
 800a59a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a59c:	7bfb      	ldrb	r3, [r7, #15]
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f000 f91c 	bl	800a7dc <USBD_Get_USB_Status>
 800a5a4:	4603      	mov	r3, r0
 800a5a6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5a8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	3710      	adds	r7, #16
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5b2:	b580      	push	{r7, lr}
 800a5b4:	b084      	sub	sp, #16
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	460b      	mov	r3, r1
 800a5bc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5c2:	2300      	movs	r3, #0
 800a5c4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5cc:	78fa      	ldrb	r2, [r7, #3]
 800a5ce:	4611      	mov	r1, r2
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	f7fa f865 	bl	80046a0 <HAL_PCD_EP_Close>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5da:	7bfb      	ldrb	r3, [r7, #15]
 800a5dc:	4618      	mov	r0, r3
 800a5de:	f000 f8fd 	bl	800a7dc <USBD_Get_USB_Status>
 800a5e2:	4603      	mov	r3, r0
 800a5e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	3710      	adds	r7, #16
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b084      	sub	sp, #16
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a600:	2300      	movs	r3, #0
 800a602:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a60a:	78fa      	ldrb	r2, [r7, #3]
 800a60c:	4611      	mov	r1, r2
 800a60e:	4618      	mov	r0, r3
 800a610:	f7fa f93d 	bl	800488e <HAL_PCD_EP_SetStall>
 800a614:	4603      	mov	r3, r0
 800a616:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a618:	7bfb      	ldrb	r3, [r7, #15]
 800a61a:	4618      	mov	r0, r3
 800a61c:	f000 f8de 	bl	800a7dc <USBD_Get_USB_Status>
 800a620:	4603      	mov	r3, r0
 800a622:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a624:	7bbb      	ldrb	r3, [r7, #14]
}
 800a626:	4618      	mov	r0, r3
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}

0800a62e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a62e:	b580      	push	{r7, lr}
 800a630:	b084      	sub	sp, #16
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	460b      	mov	r3, r1
 800a638:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a63a:	2300      	movs	r3, #0
 800a63c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a63e:	2300      	movs	r3, #0
 800a640:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a648:	78fa      	ldrb	r2, [r7, #3]
 800a64a:	4611      	mov	r1, r2
 800a64c:	4618      	mov	r0, r3
 800a64e:	f7fa f982 	bl	8004956 <HAL_PCD_EP_ClrStall>
 800a652:	4603      	mov	r3, r0
 800a654:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a656:	7bfb      	ldrb	r3, [r7, #15]
 800a658:	4618      	mov	r0, r3
 800a65a:	f000 f8bf 	bl	800a7dc <USBD_Get_USB_Status>
 800a65e:	4603      	mov	r3, r0
 800a660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a662:	7bbb      	ldrb	r3, [r7, #14]
}
 800a664:	4618      	mov	r0, r3
 800a666:	3710      	adds	r7, #16
 800a668:	46bd      	mov	sp, r7
 800a66a:	bd80      	pop	{r7, pc}

0800a66c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a66c:	b480      	push	{r7}
 800a66e:	b085      	sub	sp, #20
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
 800a674:	460b      	mov	r3, r1
 800a676:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a67e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a680:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a684:	2b00      	cmp	r3, #0
 800a686:	da0b      	bge.n	800a6a0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a688:	78fb      	ldrb	r3, [r7, #3]
 800a68a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a68e:	68f9      	ldr	r1, [r7, #12]
 800a690:	4613      	mov	r3, r2
 800a692:	00db      	lsls	r3, r3, #3
 800a694:	4413      	add	r3, r2
 800a696:	009b      	lsls	r3, r3, #2
 800a698:	440b      	add	r3, r1
 800a69a:	333e      	adds	r3, #62	; 0x3e
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	e00b      	b.n	800a6b8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a6a0:	78fb      	ldrb	r3, [r7, #3]
 800a6a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6a6:	68f9      	ldr	r1, [r7, #12]
 800a6a8:	4613      	mov	r3, r2
 800a6aa:	00db      	lsls	r3, r3, #3
 800a6ac:	4413      	add	r3, r2
 800a6ae:	009b      	lsls	r3, r3, #2
 800a6b0:	440b      	add	r3, r1
 800a6b2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a6b6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3714      	adds	r7, #20
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
 800a6cc:	460b      	mov	r3, r1
 800a6ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a6de:	78fa      	ldrb	r2, [r7, #3]
 800a6e0:	4611      	mov	r1, r2
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7f9 ff4f 	bl	8004586 <HAL_PCD_SetAddress>
 800a6e8:	4603      	mov	r3, r0
 800a6ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6ec:	7bfb      	ldrb	r3, [r7, #15]
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 f874 	bl	800a7dc <USBD_Get_USB_Status>
 800a6f4:	4603      	mov	r3, r0
 800a6f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}

0800a702 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a702:	b580      	push	{r7, lr}
 800a704:	b086      	sub	sp, #24
 800a706:	af00      	add	r7, sp, #0
 800a708:	60f8      	str	r0, [r7, #12]
 800a70a:	607a      	str	r2, [r7, #4]
 800a70c:	603b      	str	r3, [r7, #0]
 800a70e:	460b      	mov	r3, r1
 800a710:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a716:	2300      	movs	r3, #0
 800a718:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a71a:	68fb      	ldr	r3, [r7, #12]
 800a71c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a720:	7af9      	ldrb	r1, [r7, #11]
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	687a      	ldr	r2, [r7, #4]
 800a726:	f7fa f868 	bl	80047fa <HAL_PCD_EP_Transmit>
 800a72a:	4603      	mov	r3, r0
 800a72c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a72e:	7dfb      	ldrb	r3, [r7, #23]
 800a730:	4618      	mov	r0, r3
 800a732:	f000 f853 	bl	800a7dc <USBD_Get_USB_Status>
 800a736:	4603      	mov	r3, r0
 800a738:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a73a:	7dbb      	ldrb	r3, [r7, #22]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3718      	adds	r7, #24
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b086      	sub	sp, #24
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	607a      	str	r2, [r7, #4]
 800a74e:	603b      	str	r3, [r7, #0]
 800a750:	460b      	mov	r3, r1
 800a752:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a754:	2300      	movs	r3, #0
 800a756:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a758:	2300      	movs	r3, #0
 800a75a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a762:	7af9      	ldrb	r1, [r7, #11]
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	f7f9 ffe4 	bl	8004734 <HAL_PCD_EP_Receive>
 800a76c:	4603      	mov	r3, r0
 800a76e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a770:	7dfb      	ldrb	r3, [r7, #23]
 800a772:	4618      	mov	r0, r3
 800a774:	f000 f832 	bl	800a7dc <USBD_Get_USB_Status>
 800a778:	4603      	mov	r3, r0
 800a77a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a77c:	7dbb      	ldrb	r3, [r7, #22]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3718      	adds	r7, #24
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b082      	sub	sp, #8
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	460b      	mov	r3, r1
 800a790:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a798:	78fa      	ldrb	r2, [r7, #3]
 800a79a:	4611      	mov	r1, r2
 800a79c:	4618      	mov	r0, r3
 800a79e:	f7fa f814 	bl	80047ca <HAL_PCD_EP_GetRxCount>
 800a7a2:	4603      	mov	r3, r0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b083      	sub	sp, #12
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a7b4:	4b03      	ldr	r3, [pc, #12]	; (800a7c4 <USBD_static_malloc+0x18>)
}
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	370c      	adds	r7, #12
 800a7ba:	46bd      	mov	sp, r7
 800a7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c0:	4770      	bx	lr
 800a7c2:	bf00      	nop
 800a7c4:	200020c8 	.word	0x200020c8

0800a7c8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a7c8:	b480      	push	{r7}
 800a7ca:	b083      	sub	sp, #12
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]

}
 800a7d0:	bf00      	nop
 800a7d2:	370c      	adds	r7, #12
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7da:	4770      	bx	lr

0800a7dc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b085      	sub	sp, #20
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a7ea:	79fb      	ldrb	r3, [r7, #7]
 800a7ec:	2b03      	cmp	r3, #3
 800a7ee:	d817      	bhi.n	800a820 <USBD_Get_USB_Status+0x44>
 800a7f0:	a201      	add	r2, pc, #4	; (adr r2, 800a7f8 <USBD_Get_USB_Status+0x1c>)
 800a7f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7f6:	bf00      	nop
 800a7f8:	0800a809 	.word	0x0800a809
 800a7fc:	0800a80f 	.word	0x0800a80f
 800a800:	0800a815 	.word	0x0800a815
 800a804:	0800a81b 	.word	0x0800a81b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a808:	2300      	movs	r3, #0
 800a80a:	73fb      	strb	r3, [r7, #15]
    break;
 800a80c:	e00b      	b.n	800a826 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a80e:	2303      	movs	r3, #3
 800a810:	73fb      	strb	r3, [r7, #15]
    break;
 800a812:	e008      	b.n	800a826 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a814:	2301      	movs	r3, #1
 800a816:	73fb      	strb	r3, [r7, #15]
    break;
 800a818:	e005      	b.n	800a826 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a81a:	2303      	movs	r3, #3
 800a81c:	73fb      	strb	r3, [r7, #15]
    break;
 800a81e:	e002      	b.n	800a826 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a820:	2303      	movs	r3, #3
 800a822:	73fb      	strb	r3, [r7, #15]
    break;
 800a824:	bf00      	nop
  }
  return usb_status;
 800a826:	7bfb      	ldrb	r3, [r7, #15]
}
 800a828:	4618      	mov	r0, r3
 800a82a:	3714      	adds	r7, #20
 800a82c:	46bd      	mov	sp, r7
 800a82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a832:	4770      	bx	lr

0800a834 <__errno>:
 800a834:	4b01      	ldr	r3, [pc, #4]	; (800a83c <__errno+0x8>)
 800a836:	6818      	ldr	r0, [r3, #0]
 800a838:	4770      	bx	lr
 800a83a:	bf00      	nop
 800a83c:	2000013c 	.word	0x2000013c

0800a840 <__libc_init_array>:
 800a840:	b570      	push	{r4, r5, r6, lr}
 800a842:	4d0d      	ldr	r5, [pc, #52]	; (800a878 <__libc_init_array+0x38>)
 800a844:	4c0d      	ldr	r4, [pc, #52]	; (800a87c <__libc_init_array+0x3c>)
 800a846:	1b64      	subs	r4, r4, r5
 800a848:	10a4      	asrs	r4, r4, #2
 800a84a:	2600      	movs	r6, #0
 800a84c:	42a6      	cmp	r6, r4
 800a84e:	d109      	bne.n	800a864 <__libc_init_array+0x24>
 800a850:	4d0b      	ldr	r5, [pc, #44]	; (800a880 <__libc_init_array+0x40>)
 800a852:	4c0c      	ldr	r4, [pc, #48]	; (800a884 <__libc_init_array+0x44>)
 800a854:	f002 ff04 	bl	800d660 <_init>
 800a858:	1b64      	subs	r4, r4, r5
 800a85a:	10a4      	asrs	r4, r4, #2
 800a85c:	2600      	movs	r6, #0
 800a85e:	42a6      	cmp	r6, r4
 800a860:	d105      	bne.n	800a86e <__libc_init_array+0x2e>
 800a862:	bd70      	pop	{r4, r5, r6, pc}
 800a864:	f855 3b04 	ldr.w	r3, [r5], #4
 800a868:	4798      	blx	r3
 800a86a:	3601      	adds	r6, #1
 800a86c:	e7ee      	b.n	800a84c <__libc_init_array+0xc>
 800a86e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a872:	4798      	blx	r3
 800a874:	3601      	adds	r6, #1
 800a876:	e7f2      	b.n	800a85e <__libc_init_array+0x1e>
 800a878:	0800dad4 	.word	0x0800dad4
 800a87c:	0800dad4 	.word	0x0800dad4
 800a880:	0800dad4 	.word	0x0800dad4
 800a884:	0800dad8 	.word	0x0800dad8

0800a888 <memset>:
 800a888:	4402      	add	r2, r0
 800a88a:	4603      	mov	r3, r0
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d100      	bne.n	800a892 <memset+0xa>
 800a890:	4770      	bx	lr
 800a892:	f803 1b01 	strb.w	r1, [r3], #1
 800a896:	e7f9      	b.n	800a88c <memset+0x4>

0800a898 <__cvt>:
 800a898:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a89c:	ec55 4b10 	vmov	r4, r5, d0
 800a8a0:	2d00      	cmp	r5, #0
 800a8a2:	460e      	mov	r6, r1
 800a8a4:	4619      	mov	r1, r3
 800a8a6:	462b      	mov	r3, r5
 800a8a8:	bfbb      	ittet	lt
 800a8aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a8ae:	461d      	movlt	r5, r3
 800a8b0:	2300      	movge	r3, #0
 800a8b2:	232d      	movlt	r3, #45	; 0x2d
 800a8b4:	700b      	strb	r3, [r1, #0]
 800a8b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8b8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a8bc:	4691      	mov	r9, r2
 800a8be:	f023 0820 	bic.w	r8, r3, #32
 800a8c2:	bfbc      	itt	lt
 800a8c4:	4622      	movlt	r2, r4
 800a8c6:	4614      	movlt	r4, r2
 800a8c8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a8cc:	d005      	beq.n	800a8da <__cvt+0x42>
 800a8ce:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a8d2:	d100      	bne.n	800a8d6 <__cvt+0x3e>
 800a8d4:	3601      	adds	r6, #1
 800a8d6:	2102      	movs	r1, #2
 800a8d8:	e000      	b.n	800a8dc <__cvt+0x44>
 800a8da:	2103      	movs	r1, #3
 800a8dc:	ab03      	add	r3, sp, #12
 800a8de:	9301      	str	r3, [sp, #4]
 800a8e0:	ab02      	add	r3, sp, #8
 800a8e2:	9300      	str	r3, [sp, #0]
 800a8e4:	ec45 4b10 	vmov	d0, r4, r5
 800a8e8:	4653      	mov	r3, sl
 800a8ea:	4632      	mov	r2, r6
 800a8ec:	f000 fcec 	bl	800b2c8 <_dtoa_r>
 800a8f0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a8f4:	4607      	mov	r7, r0
 800a8f6:	d102      	bne.n	800a8fe <__cvt+0x66>
 800a8f8:	f019 0f01 	tst.w	r9, #1
 800a8fc:	d022      	beq.n	800a944 <__cvt+0xac>
 800a8fe:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a902:	eb07 0906 	add.w	r9, r7, r6
 800a906:	d110      	bne.n	800a92a <__cvt+0x92>
 800a908:	783b      	ldrb	r3, [r7, #0]
 800a90a:	2b30      	cmp	r3, #48	; 0x30
 800a90c:	d10a      	bne.n	800a924 <__cvt+0x8c>
 800a90e:	2200      	movs	r2, #0
 800a910:	2300      	movs	r3, #0
 800a912:	4620      	mov	r0, r4
 800a914:	4629      	mov	r1, r5
 800a916:	f7f6 f8df 	bl	8000ad8 <__aeabi_dcmpeq>
 800a91a:	b918      	cbnz	r0, 800a924 <__cvt+0x8c>
 800a91c:	f1c6 0601 	rsb	r6, r6, #1
 800a920:	f8ca 6000 	str.w	r6, [sl]
 800a924:	f8da 3000 	ldr.w	r3, [sl]
 800a928:	4499      	add	r9, r3
 800a92a:	2200      	movs	r2, #0
 800a92c:	2300      	movs	r3, #0
 800a92e:	4620      	mov	r0, r4
 800a930:	4629      	mov	r1, r5
 800a932:	f7f6 f8d1 	bl	8000ad8 <__aeabi_dcmpeq>
 800a936:	b108      	cbz	r0, 800a93c <__cvt+0xa4>
 800a938:	f8cd 900c 	str.w	r9, [sp, #12]
 800a93c:	2230      	movs	r2, #48	; 0x30
 800a93e:	9b03      	ldr	r3, [sp, #12]
 800a940:	454b      	cmp	r3, r9
 800a942:	d307      	bcc.n	800a954 <__cvt+0xbc>
 800a944:	9b03      	ldr	r3, [sp, #12]
 800a946:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a948:	1bdb      	subs	r3, r3, r7
 800a94a:	4638      	mov	r0, r7
 800a94c:	6013      	str	r3, [r2, #0]
 800a94e:	b004      	add	sp, #16
 800a950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a954:	1c59      	adds	r1, r3, #1
 800a956:	9103      	str	r1, [sp, #12]
 800a958:	701a      	strb	r2, [r3, #0]
 800a95a:	e7f0      	b.n	800a93e <__cvt+0xa6>

0800a95c <__exponent>:
 800a95c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a95e:	4603      	mov	r3, r0
 800a960:	2900      	cmp	r1, #0
 800a962:	bfb8      	it	lt
 800a964:	4249      	neglt	r1, r1
 800a966:	f803 2b02 	strb.w	r2, [r3], #2
 800a96a:	bfb4      	ite	lt
 800a96c:	222d      	movlt	r2, #45	; 0x2d
 800a96e:	222b      	movge	r2, #43	; 0x2b
 800a970:	2909      	cmp	r1, #9
 800a972:	7042      	strb	r2, [r0, #1]
 800a974:	dd2a      	ble.n	800a9cc <__exponent+0x70>
 800a976:	f10d 0407 	add.w	r4, sp, #7
 800a97a:	46a4      	mov	ip, r4
 800a97c:	270a      	movs	r7, #10
 800a97e:	46a6      	mov	lr, r4
 800a980:	460a      	mov	r2, r1
 800a982:	fb91 f6f7 	sdiv	r6, r1, r7
 800a986:	fb07 1516 	mls	r5, r7, r6, r1
 800a98a:	3530      	adds	r5, #48	; 0x30
 800a98c:	2a63      	cmp	r2, #99	; 0x63
 800a98e:	f104 34ff 	add.w	r4, r4, #4294967295
 800a992:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a996:	4631      	mov	r1, r6
 800a998:	dcf1      	bgt.n	800a97e <__exponent+0x22>
 800a99a:	3130      	adds	r1, #48	; 0x30
 800a99c:	f1ae 0502 	sub.w	r5, lr, #2
 800a9a0:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a9a4:	1c44      	adds	r4, r0, #1
 800a9a6:	4629      	mov	r1, r5
 800a9a8:	4561      	cmp	r1, ip
 800a9aa:	d30a      	bcc.n	800a9c2 <__exponent+0x66>
 800a9ac:	f10d 0209 	add.w	r2, sp, #9
 800a9b0:	eba2 020e 	sub.w	r2, r2, lr
 800a9b4:	4565      	cmp	r5, ip
 800a9b6:	bf88      	it	hi
 800a9b8:	2200      	movhi	r2, #0
 800a9ba:	4413      	add	r3, r2
 800a9bc:	1a18      	subs	r0, r3, r0
 800a9be:	b003      	add	sp, #12
 800a9c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9c6:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a9ca:	e7ed      	b.n	800a9a8 <__exponent+0x4c>
 800a9cc:	2330      	movs	r3, #48	; 0x30
 800a9ce:	3130      	adds	r1, #48	; 0x30
 800a9d0:	7083      	strb	r3, [r0, #2]
 800a9d2:	70c1      	strb	r1, [r0, #3]
 800a9d4:	1d03      	adds	r3, r0, #4
 800a9d6:	e7f1      	b.n	800a9bc <__exponent+0x60>

0800a9d8 <_printf_float>:
 800a9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9dc:	ed2d 8b02 	vpush	{d8}
 800a9e0:	b08d      	sub	sp, #52	; 0x34
 800a9e2:	460c      	mov	r4, r1
 800a9e4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a9e8:	4616      	mov	r6, r2
 800a9ea:	461f      	mov	r7, r3
 800a9ec:	4605      	mov	r5, r0
 800a9ee:	f001 fa59 	bl	800bea4 <_localeconv_r>
 800a9f2:	f8d0 a000 	ldr.w	sl, [r0]
 800a9f6:	4650      	mov	r0, sl
 800a9f8:	f7f5 fbf2 	bl	80001e0 <strlen>
 800a9fc:	2300      	movs	r3, #0
 800a9fe:	930a      	str	r3, [sp, #40]	; 0x28
 800aa00:	6823      	ldr	r3, [r4, #0]
 800aa02:	9305      	str	r3, [sp, #20]
 800aa04:	f8d8 3000 	ldr.w	r3, [r8]
 800aa08:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aa0c:	3307      	adds	r3, #7
 800aa0e:	f023 0307 	bic.w	r3, r3, #7
 800aa12:	f103 0208 	add.w	r2, r3, #8
 800aa16:	f8c8 2000 	str.w	r2, [r8]
 800aa1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa1e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aa22:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aa26:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa2a:	9307      	str	r3, [sp, #28]
 800aa2c:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa30:	ee08 0a10 	vmov	s16, r0
 800aa34:	4b9f      	ldr	r3, [pc, #636]	; (800acb4 <_printf_float+0x2dc>)
 800aa36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa3a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa3e:	f7f6 f87d 	bl	8000b3c <__aeabi_dcmpun>
 800aa42:	bb88      	cbnz	r0, 800aaa8 <_printf_float+0xd0>
 800aa44:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa48:	4b9a      	ldr	r3, [pc, #616]	; (800acb4 <_printf_float+0x2dc>)
 800aa4a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa4e:	f7f6 f857 	bl	8000b00 <__aeabi_dcmple>
 800aa52:	bb48      	cbnz	r0, 800aaa8 <_printf_float+0xd0>
 800aa54:	2200      	movs	r2, #0
 800aa56:	2300      	movs	r3, #0
 800aa58:	4640      	mov	r0, r8
 800aa5a:	4649      	mov	r1, r9
 800aa5c:	f7f6 f846 	bl	8000aec <__aeabi_dcmplt>
 800aa60:	b110      	cbz	r0, 800aa68 <_printf_float+0x90>
 800aa62:	232d      	movs	r3, #45	; 0x2d
 800aa64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa68:	4b93      	ldr	r3, [pc, #588]	; (800acb8 <_printf_float+0x2e0>)
 800aa6a:	4894      	ldr	r0, [pc, #592]	; (800acbc <_printf_float+0x2e4>)
 800aa6c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aa70:	bf94      	ite	ls
 800aa72:	4698      	movls	r8, r3
 800aa74:	4680      	movhi	r8, r0
 800aa76:	2303      	movs	r3, #3
 800aa78:	6123      	str	r3, [r4, #16]
 800aa7a:	9b05      	ldr	r3, [sp, #20]
 800aa7c:	f023 0204 	bic.w	r2, r3, #4
 800aa80:	6022      	str	r2, [r4, #0]
 800aa82:	f04f 0900 	mov.w	r9, #0
 800aa86:	9700      	str	r7, [sp, #0]
 800aa88:	4633      	mov	r3, r6
 800aa8a:	aa0b      	add	r2, sp, #44	; 0x2c
 800aa8c:	4621      	mov	r1, r4
 800aa8e:	4628      	mov	r0, r5
 800aa90:	f000 f9d8 	bl	800ae44 <_printf_common>
 800aa94:	3001      	adds	r0, #1
 800aa96:	f040 8090 	bne.w	800abba <_printf_float+0x1e2>
 800aa9a:	f04f 30ff 	mov.w	r0, #4294967295
 800aa9e:	b00d      	add	sp, #52	; 0x34
 800aaa0:	ecbd 8b02 	vpop	{d8}
 800aaa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa8:	4642      	mov	r2, r8
 800aaaa:	464b      	mov	r3, r9
 800aaac:	4640      	mov	r0, r8
 800aaae:	4649      	mov	r1, r9
 800aab0:	f7f6 f844 	bl	8000b3c <__aeabi_dcmpun>
 800aab4:	b140      	cbz	r0, 800aac8 <_printf_float+0xf0>
 800aab6:	464b      	mov	r3, r9
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	bfbc      	itt	lt
 800aabc:	232d      	movlt	r3, #45	; 0x2d
 800aabe:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aac2:	487f      	ldr	r0, [pc, #508]	; (800acc0 <_printf_float+0x2e8>)
 800aac4:	4b7f      	ldr	r3, [pc, #508]	; (800acc4 <_printf_float+0x2ec>)
 800aac6:	e7d1      	b.n	800aa6c <_printf_float+0x94>
 800aac8:	6863      	ldr	r3, [r4, #4]
 800aaca:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aace:	9206      	str	r2, [sp, #24]
 800aad0:	1c5a      	adds	r2, r3, #1
 800aad2:	d13f      	bne.n	800ab54 <_printf_float+0x17c>
 800aad4:	2306      	movs	r3, #6
 800aad6:	6063      	str	r3, [r4, #4]
 800aad8:	9b05      	ldr	r3, [sp, #20]
 800aada:	6861      	ldr	r1, [r4, #4]
 800aadc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800aae0:	2300      	movs	r3, #0
 800aae2:	9303      	str	r3, [sp, #12]
 800aae4:	ab0a      	add	r3, sp, #40	; 0x28
 800aae6:	e9cd b301 	strd	fp, r3, [sp, #4]
 800aaea:	ab09      	add	r3, sp, #36	; 0x24
 800aaec:	ec49 8b10 	vmov	d0, r8, r9
 800aaf0:	9300      	str	r3, [sp, #0]
 800aaf2:	6022      	str	r2, [r4, #0]
 800aaf4:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800aaf8:	4628      	mov	r0, r5
 800aafa:	f7ff fecd 	bl	800a898 <__cvt>
 800aafe:	9b06      	ldr	r3, [sp, #24]
 800ab00:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab02:	2b47      	cmp	r3, #71	; 0x47
 800ab04:	4680      	mov	r8, r0
 800ab06:	d108      	bne.n	800ab1a <_printf_float+0x142>
 800ab08:	1cc8      	adds	r0, r1, #3
 800ab0a:	db02      	blt.n	800ab12 <_printf_float+0x13a>
 800ab0c:	6863      	ldr	r3, [r4, #4]
 800ab0e:	4299      	cmp	r1, r3
 800ab10:	dd41      	ble.n	800ab96 <_printf_float+0x1be>
 800ab12:	f1ab 0b02 	sub.w	fp, fp, #2
 800ab16:	fa5f fb8b 	uxtb.w	fp, fp
 800ab1a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab1e:	d820      	bhi.n	800ab62 <_printf_float+0x18a>
 800ab20:	3901      	subs	r1, #1
 800ab22:	465a      	mov	r2, fp
 800ab24:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab28:	9109      	str	r1, [sp, #36]	; 0x24
 800ab2a:	f7ff ff17 	bl	800a95c <__exponent>
 800ab2e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab30:	1813      	adds	r3, r2, r0
 800ab32:	2a01      	cmp	r2, #1
 800ab34:	4681      	mov	r9, r0
 800ab36:	6123      	str	r3, [r4, #16]
 800ab38:	dc02      	bgt.n	800ab40 <_printf_float+0x168>
 800ab3a:	6822      	ldr	r2, [r4, #0]
 800ab3c:	07d2      	lsls	r2, r2, #31
 800ab3e:	d501      	bpl.n	800ab44 <_printf_float+0x16c>
 800ab40:	3301      	adds	r3, #1
 800ab42:	6123      	str	r3, [r4, #16]
 800ab44:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d09c      	beq.n	800aa86 <_printf_float+0xae>
 800ab4c:	232d      	movs	r3, #45	; 0x2d
 800ab4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab52:	e798      	b.n	800aa86 <_printf_float+0xae>
 800ab54:	9a06      	ldr	r2, [sp, #24]
 800ab56:	2a47      	cmp	r2, #71	; 0x47
 800ab58:	d1be      	bne.n	800aad8 <_printf_float+0x100>
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d1bc      	bne.n	800aad8 <_printf_float+0x100>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	e7b9      	b.n	800aad6 <_printf_float+0xfe>
 800ab62:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab66:	d118      	bne.n	800ab9a <_printf_float+0x1c2>
 800ab68:	2900      	cmp	r1, #0
 800ab6a:	6863      	ldr	r3, [r4, #4]
 800ab6c:	dd0b      	ble.n	800ab86 <_printf_float+0x1ae>
 800ab6e:	6121      	str	r1, [r4, #16]
 800ab70:	b913      	cbnz	r3, 800ab78 <_printf_float+0x1a0>
 800ab72:	6822      	ldr	r2, [r4, #0]
 800ab74:	07d0      	lsls	r0, r2, #31
 800ab76:	d502      	bpl.n	800ab7e <_printf_float+0x1a6>
 800ab78:	3301      	adds	r3, #1
 800ab7a:	440b      	add	r3, r1
 800ab7c:	6123      	str	r3, [r4, #16]
 800ab7e:	65a1      	str	r1, [r4, #88]	; 0x58
 800ab80:	f04f 0900 	mov.w	r9, #0
 800ab84:	e7de      	b.n	800ab44 <_printf_float+0x16c>
 800ab86:	b913      	cbnz	r3, 800ab8e <_printf_float+0x1b6>
 800ab88:	6822      	ldr	r2, [r4, #0]
 800ab8a:	07d2      	lsls	r2, r2, #31
 800ab8c:	d501      	bpl.n	800ab92 <_printf_float+0x1ba>
 800ab8e:	3302      	adds	r3, #2
 800ab90:	e7f4      	b.n	800ab7c <_printf_float+0x1a4>
 800ab92:	2301      	movs	r3, #1
 800ab94:	e7f2      	b.n	800ab7c <_printf_float+0x1a4>
 800ab96:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ab9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ab9c:	4299      	cmp	r1, r3
 800ab9e:	db05      	blt.n	800abac <_printf_float+0x1d4>
 800aba0:	6823      	ldr	r3, [r4, #0]
 800aba2:	6121      	str	r1, [r4, #16]
 800aba4:	07d8      	lsls	r0, r3, #31
 800aba6:	d5ea      	bpl.n	800ab7e <_printf_float+0x1a6>
 800aba8:	1c4b      	adds	r3, r1, #1
 800abaa:	e7e7      	b.n	800ab7c <_printf_float+0x1a4>
 800abac:	2900      	cmp	r1, #0
 800abae:	bfd4      	ite	le
 800abb0:	f1c1 0202 	rsble	r2, r1, #2
 800abb4:	2201      	movgt	r2, #1
 800abb6:	4413      	add	r3, r2
 800abb8:	e7e0      	b.n	800ab7c <_printf_float+0x1a4>
 800abba:	6823      	ldr	r3, [r4, #0]
 800abbc:	055a      	lsls	r2, r3, #21
 800abbe:	d407      	bmi.n	800abd0 <_printf_float+0x1f8>
 800abc0:	6923      	ldr	r3, [r4, #16]
 800abc2:	4642      	mov	r2, r8
 800abc4:	4631      	mov	r1, r6
 800abc6:	4628      	mov	r0, r5
 800abc8:	47b8      	blx	r7
 800abca:	3001      	adds	r0, #1
 800abcc:	d12c      	bne.n	800ac28 <_printf_float+0x250>
 800abce:	e764      	b.n	800aa9a <_printf_float+0xc2>
 800abd0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800abd4:	f240 80e0 	bls.w	800ad98 <_printf_float+0x3c0>
 800abd8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800abdc:	2200      	movs	r2, #0
 800abde:	2300      	movs	r3, #0
 800abe0:	f7f5 ff7a 	bl	8000ad8 <__aeabi_dcmpeq>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	d034      	beq.n	800ac52 <_printf_float+0x27a>
 800abe8:	4a37      	ldr	r2, [pc, #220]	; (800acc8 <_printf_float+0x2f0>)
 800abea:	2301      	movs	r3, #1
 800abec:	4631      	mov	r1, r6
 800abee:	4628      	mov	r0, r5
 800abf0:	47b8      	blx	r7
 800abf2:	3001      	adds	r0, #1
 800abf4:	f43f af51 	beq.w	800aa9a <_printf_float+0xc2>
 800abf8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800abfc:	429a      	cmp	r2, r3
 800abfe:	db02      	blt.n	800ac06 <_printf_float+0x22e>
 800ac00:	6823      	ldr	r3, [r4, #0]
 800ac02:	07d8      	lsls	r0, r3, #31
 800ac04:	d510      	bpl.n	800ac28 <_printf_float+0x250>
 800ac06:	ee18 3a10 	vmov	r3, s16
 800ac0a:	4652      	mov	r2, sl
 800ac0c:	4631      	mov	r1, r6
 800ac0e:	4628      	mov	r0, r5
 800ac10:	47b8      	blx	r7
 800ac12:	3001      	adds	r0, #1
 800ac14:	f43f af41 	beq.w	800aa9a <_printf_float+0xc2>
 800ac18:	f04f 0800 	mov.w	r8, #0
 800ac1c:	f104 091a 	add.w	r9, r4, #26
 800ac20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac22:	3b01      	subs	r3, #1
 800ac24:	4543      	cmp	r3, r8
 800ac26:	dc09      	bgt.n	800ac3c <_printf_float+0x264>
 800ac28:	6823      	ldr	r3, [r4, #0]
 800ac2a:	079b      	lsls	r3, r3, #30
 800ac2c:	f100 8105 	bmi.w	800ae3a <_printf_float+0x462>
 800ac30:	68e0      	ldr	r0, [r4, #12]
 800ac32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac34:	4298      	cmp	r0, r3
 800ac36:	bfb8      	it	lt
 800ac38:	4618      	movlt	r0, r3
 800ac3a:	e730      	b.n	800aa9e <_printf_float+0xc6>
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	464a      	mov	r2, r9
 800ac40:	4631      	mov	r1, r6
 800ac42:	4628      	mov	r0, r5
 800ac44:	47b8      	blx	r7
 800ac46:	3001      	adds	r0, #1
 800ac48:	f43f af27 	beq.w	800aa9a <_printf_float+0xc2>
 800ac4c:	f108 0801 	add.w	r8, r8, #1
 800ac50:	e7e6      	b.n	800ac20 <_printf_float+0x248>
 800ac52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	dc39      	bgt.n	800accc <_printf_float+0x2f4>
 800ac58:	4a1b      	ldr	r2, [pc, #108]	; (800acc8 <_printf_float+0x2f0>)
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	4631      	mov	r1, r6
 800ac5e:	4628      	mov	r0, r5
 800ac60:	47b8      	blx	r7
 800ac62:	3001      	adds	r0, #1
 800ac64:	f43f af19 	beq.w	800aa9a <_printf_float+0xc2>
 800ac68:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac6c:	4313      	orrs	r3, r2
 800ac6e:	d102      	bne.n	800ac76 <_printf_float+0x29e>
 800ac70:	6823      	ldr	r3, [r4, #0]
 800ac72:	07d9      	lsls	r1, r3, #31
 800ac74:	d5d8      	bpl.n	800ac28 <_printf_float+0x250>
 800ac76:	ee18 3a10 	vmov	r3, s16
 800ac7a:	4652      	mov	r2, sl
 800ac7c:	4631      	mov	r1, r6
 800ac7e:	4628      	mov	r0, r5
 800ac80:	47b8      	blx	r7
 800ac82:	3001      	adds	r0, #1
 800ac84:	f43f af09 	beq.w	800aa9a <_printf_float+0xc2>
 800ac88:	f04f 0900 	mov.w	r9, #0
 800ac8c:	f104 0a1a 	add.w	sl, r4, #26
 800ac90:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac92:	425b      	negs	r3, r3
 800ac94:	454b      	cmp	r3, r9
 800ac96:	dc01      	bgt.n	800ac9c <_printf_float+0x2c4>
 800ac98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac9a:	e792      	b.n	800abc2 <_printf_float+0x1ea>
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	4652      	mov	r2, sl
 800aca0:	4631      	mov	r1, r6
 800aca2:	4628      	mov	r0, r5
 800aca4:	47b8      	blx	r7
 800aca6:	3001      	adds	r0, #1
 800aca8:	f43f aef7 	beq.w	800aa9a <_printf_float+0xc2>
 800acac:	f109 0901 	add.w	r9, r9, #1
 800acb0:	e7ee      	b.n	800ac90 <_printf_float+0x2b8>
 800acb2:	bf00      	nop
 800acb4:	7fefffff 	.word	0x7fefffff
 800acb8:	0800d6f4 	.word	0x0800d6f4
 800acbc:	0800d6f8 	.word	0x0800d6f8
 800acc0:	0800d700 	.word	0x0800d700
 800acc4:	0800d6fc 	.word	0x0800d6fc
 800acc8:	0800d704 	.word	0x0800d704
 800accc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800acce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acd0:	429a      	cmp	r2, r3
 800acd2:	bfa8      	it	ge
 800acd4:	461a      	movge	r2, r3
 800acd6:	2a00      	cmp	r2, #0
 800acd8:	4691      	mov	r9, r2
 800acda:	dc37      	bgt.n	800ad4c <_printf_float+0x374>
 800acdc:	f04f 0b00 	mov.w	fp, #0
 800ace0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ace4:	f104 021a 	add.w	r2, r4, #26
 800ace8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800acea:	9305      	str	r3, [sp, #20]
 800acec:	eba3 0309 	sub.w	r3, r3, r9
 800acf0:	455b      	cmp	r3, fp
 800acf2:	dc33      	bgt.n	800ad5c <_printf_float+0x384>
 800acf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800acf8:	429a      	cmp	r2, r3
 800acfa:	db3b      	blt.n	800ad74 <_printf_float+0x39c>
 800acfc:	6823      	ldr	r3, [r4, #0]
 800acfe:	07da      	lsls	r2, r3, #31
 800ad00:	d438      	bmi.n	800ad74 <_printf_float+0x39c>
 800ad02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad04:	9a05      	ldr	r2, [sp, #20]
 800ad06:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad08:	1a9a      	subs	r2, r3, r2
 800ad0a:	eba3 0901 	sub.w	r9, r3, r1
 800ad0e:	4591      	cmp	r9, r2
 800ad10:	bfa8      	it	ge
 800ad12:	4691      	movge	r9, r2
 800ad14:	f1b9 0f00 	cmp.w	r9, #0
 800ad18:	dc35      	bgt.n	800ad86 <_printf_float+0x3ae>
 800ad1a:	f04f 0800 	mov.w	r8, #0
 800ad1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad22:	f104 0a1a 	add.w	sl, r4, #26
 800ad26:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad2a:	1a9b      	subs	r3, r3, r2
 800ad2c:	eba3 0309 	sub.w	r3, r3, r9
 800ad30:	4543      	cmp	r3, r8
 800ad32:	f77f af79 	ble.w	800ac28 <_printf_float+0x250>
 800ad36:	2301      	movs	r3, #1
 800ad38:	4652      	mov	r2, sl
 800ad3a:	4631      	mov	r1, r6
 800ad3c:	4628      	mov	r0, r5
 800ad3e:	47b8      	blx	r7
 800ad40:	3001      	adds	r0, #1
 800ad42:	f43f aeaa 	beq.w	800aa9a <_printf_float+0xc2>
 800ad46:	f108 0801 	add.w	r8, r8, #1
 800ad4a:	e7ec      	b.n	800ad26 <_printf_float+0x34e>
 800ad4c:	4613      	mov	r3, r2
 800ad4e:	4631      	mov	r1, r6
 800ad50:	4642      	mov	r2, r8
 800ad52:	4628      	mov	r0, r5
 800ad54:	47b8      	blx	r7
 800ad56:	3001      	adds	r0, #1
 800ad58:	d1c0      	bne.n	800acdc <_printf_float+0x304>
 800ad5a:	e69e      	b.n	800aa9a <_printf_float+0xc2>
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	4631      	mov	r1, r6
 800ad60:	4628      	mov	r0, r5
 800ad62:	9205      	str	r2, [sp, #20]
 800ad64:	47b8      	blx	r7
 800ad66:	3001      	adds	r0, #1
 800ad68:	f43f ae97 	beq.w	800aa9a <_printf_float+0xc2>
 800ad6c:	9a05      	ldr	r2, [sp, #20]
 800ad6e:	f10b 0b01 	add.w	fp, fp, #1
 800ad72:	e7b9      	b.n	800ace8 <_printf_float+0x310>
 800ad74:	ee18 3a10 	vmov	r3, s16
 800ad78:	4652      	mov	r2, sl
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	4628      	mov	r0, r5
 800ad7e:	47b8      	blx	r7
 800ad80:	3001      	adds	r0, #1
 800ad82:	d1be      	bne.n	800ad02 <_printf_float+0x32a>
 800ad84:	e689      	b.n	800aa9a <_printf_float+0xc2>
 800ad86:	9a05      	ldr	r2, [sp, #20]
 800ad88:	464b      	mov	r3, r9
 800ad8a:	4442      	add	r2, r8
 800ad8c:	4631      	mov	r1, r6
 800ad8e:	4628      	mov	r0, r5
 800ad90:	47b8      	blx	r7
 800ad92:	3001      	adds	r0, #1
 800ad94:	d1c1      	bne.n	800ad1a <_printf_float+0x342>
 800ad96:	e680      	b.n	800aa9a <_printf_float+0xc2>
 800ad98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad9a:	2a01      	cmp	r2, #1
 800ad9c:	dc01      	bgt.n	800ada2 <_printf_float+0x3ca>
 800ad9e:	07db      	lsls	r3, r3, #31
 800ada0:	d538      	bpl.n	800ae14 <_printf_float+0x43c>
 800ada2:	2301      	movs	r3, #1
 800ada4:	4642      	mov	r2, r8
 800ada6:	4631      	mov	r1, r6
 800ada8:	4628      	mov	r0, r5
 800adaa:	47b8      	blx	r7
 800adac:	3001      	adds	r0, #1
 800adae:	f43f ae74 	beq.w	800aa9a <_printf_float+0xc2>
 800adb2:	ee18 3a10 	vmov	r3, s16
 800adb6:	4652      	mov	r2, sl
 800adb8:	4631      	mov	r1, r6
 800adba:	4628      	mov	r0, r5
 800adbc:	47b8      	blx	r7
 800adbe:	3001      	adds	r0, #1
 800adc0:	f43f ae6b 	beq.w	800aa9a <_printf_float+0xc2>
 800adc4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800adc8:	2200      	movs	r2, #0
 800adca:	2300      	movs	r3, #0
 800adcc:	f7f5 fe84 	bl	8000ad8 <__aeabi_dcmpeq>
 800add0:	b9d8      	cbnz	r0, 800ae0a <_printf_float+0x432>
 800add2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800add4:	f108 0201 	add.w	r2, r8, #1
 800add8:	3b01      	subs	r3, #1
 800adda:	4631      	mov	r1, r6
 800addc:	4628      	mov	r0, r5
 800adde:	47b8      	blx	r7
 800ade0:	3001      	adds	r0, #1
 800ade2:	d10e      	bne.n	800ae02 <_printf_float+0x42a>
 800ade4:	e659      	b.n	800aa9a <_printf_float+0xc2>
 800ade6:	2301      	movs	r3, #1
 800ade8:	4652      	mov	r2, sl
 800adea:	4631      	mov	r1, r6
 800adec:	4628      	mov	r0, r5
 800adee:	47b8      	blx	r7
 800adf0:	3001      	adds	r0, #1
 800adf2:	f43f ae52 	beq.w	800aa9a <_printf_float+0xc2>
 800adf6:	f108 0801 	add.w	r8, r8, #1
 800adfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800adfc:	3b01      	subs	r3, #1
 800adfe:	4543      	cmp	r3, r8
 800ae00:	dcf1      	bgt.n	800ade6 <_printf_float+0x40e>
 800ae02:	464b      	mov	r3, r9
 800ae04:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ae08:	e6dc      	b.n	800abc4 <_printf_float+0x1ec>
 800ae0a:	f04f 0800 	mov.w	r8, #0
 800ae0e:	f104 0a1a 	add.w	sl, r4, #26
 800ae12:	e7f2      	b.n	800adfa <_printf_float+0x422>
 800ae14:	2301      	movs	r3, #1
 800ae16:	4642      	mov	r2, r8
 800ae18:	e7df      	b.n	800adda <_printf_float+0x402>
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	464a      	mov	r2, r9
 800ae1e:	4631      	mov	r1, r6
 800ae20:	4628      	mov	r0, r5
 800ae22:	47b8      	blx	r7
 800ae24:	3001      	adds	r0, #1
 800ae26:	f43f ae38 	beq.w	800aa9a <_printf_float+0xc2>
 800ae2a:	f108 0801 	add.w	r8, r8, #1
 800ae2e:	68e3      	ldr	r3, [r4, #12]
 800ae30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae32:	1a5b      	subs	r3, r3, r1
 800ae34:	4543      	cmp	r3, r8
 800ae36:	dcf0      	bgt.n	800ae1a <_printf_float+0x442>
 800ae38:	e6fa      	b.n	800ac30 <_printf_float+0x258>
 800ae3a:	f04f 0800 	mov.w	r8, #0
 800ae3e:	f104 0919 	add.w	r9, r4, #25
 800ae42:	e7f4      	b.n	800ae2e <_printf_float+0x456>

0800ae44 <_printf_common>:
 800ae44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae48:	4616      	mov	r6, r2
 800ae4a:	4699      	mov	r9, r3
 800ae4c:	688a      	ldr	r2, [r1, #8]
 800ae4e:	690b      	ldr	r3, [r1, #16]
 800ae50:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae54:	4293      	cmp	r3, r2
 800ae56:	bfb8      	it	lt
 800ae58:	4613      	movlt	r3, r2
 800ae5a:	6033      	str	r3, [r6, #0]
 800ae5c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae60:	4607      	mov	r7, r0
 800ae62:	460c      	mov	r4, r1
 800ae64:	b10a      	cbz	r2, 800ae6a <_printf_common+0x26>
 800ae66:	3301      	adds	r3, #1
 800ae68:	6033      	str	r3, [r6, #0]
 800ae6a:	6823      	ldr	r3, [r4, #0]
 800ae6c:	0699      	lsls	r1, r3, #26
 800ae6e:	bf42      	ittt	mi
 800ae70:	6833      	ldrmi	r3, [r6, #0]
 800ae72:	3302      	addmi	r3, #2
 800ae74:	6033      	strmi	r3, [r6, #0]
 800ae76:	6825      	ldr	r5, [r4, #0]
 800ae78:	f015 0506 	ands.w	r5, r5, #6
 800ae7c:	d106      	bne.n	800ae8c <_printf_common+0x48>
 800ae7e:	f104 0a19 	add.w	sl, r4, #25
 800ae82:	68e3      	ldr	r3, [r4, #12]
 800ae84:	6832      	ldr	r2, [r6, #0]
 800ae86:	1a9b      	subs	r3, r3, r2
 800ae88:	42ab      	cmp	r3, r5
 800ae8a:	dc26      	bgt.n	800aeda <_printf_common+0x96>
 800ae8c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae90:	1e13      	subs	r3, r2, #0
 800ae92:	6822      	ldr	r2, [r4, #0]
 800ae94:	bf18      	it	ne
 800ae96:	2301      	movne	r3, #1
 800ae98:	0692      	lsls	r2, r2, #26
 800ae9a:	d42b      	bmi.n	800aef4 <_printf_common+0xb0>
 800ae9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aea0:	4649      	mov	r1, r9
 800aea2:	4638      	mov	r0, r7
 800aea4:	47c0      	blx	r8
 800aea6:	3001      	adds	r0, #1
 800aea8:	d01e      	beq.n	800aee8 <_printf_common+0xa4>
 800aeaa:	6823      	ldr	r3, [r4, #0]
 800aeac:	68e5      	ldr	r5, [r4, #12]
 800aeae:	6832      	ldr	r2, [r6, #0]
 800aeb0:	f003 0306 	and.w	r3, r3, #6
 800aeb4:	2b04      	cmp	r3, #4
 800aeb6:	bf08      	it	eq
 800aeb8:	1aad      	subeq	r5, r5, r2
 800aeba:	68a3      	ldr	r3, [r4, #8]
 800aebc:	6922      	ldr	r2, [r4, #16]
 800aebe:	bf0c      	ite	eq
 800aec0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aec4:	2500      	movne	r5, #0
 800aec6:	4293      	cmp	r3, r2
 800aec8:	bfc4      	itt	gt
 800aeca:	1a9b      	subgt	r3, r3, r2
 800aecc:	18ed      	addgt	r5, r5, r3
 800aece:	2600      	movs	r6, #0
 800aed0:	341a      	adds	r4, #26
 800aed2:	42b5      	cmp	r5, r6
 800aed4:	d11a      	bne.n	800af0c <_printf_common+0xc8>
 800aed6:	2000      	movs	r0, #0
 800aed8:	e008      	b.n	800aeec <_printf_common+0xa8>
 800aeda:	2301      	movs	r3, #1
 800aedc:	4652      	mov	r2, sl
 800aede:	4649      	mov	r1, r9
 800aee0:	4638      	mov	r0, r7
 800aee2:	47c0      	blx	r8
 800aee4:	3001      	adds	r0, #1
 800aee6:	d103      	bne.n	800aef0 <_printf_common+0xac>
 800aee8:	f04f 30ff 	mov.w	r0, #4294967295
 800aeec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aef0:	3501      	adds	r5, #1
 800aef2:	e7c6      	b.n	800ae82 <_printf_common+0x3e>
 800aef4:	18e1      	adds	r1, r4, r3
 800aef6:	1c5a      	adds	r2, r3, #1
 800aef8:	2030      	movs	r0, #48	; 0x30
 800aefa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800aefe:	4422      	add	r2, r4
 800af00:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af04:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af08:	3302      	adds	r3, #2
 800af0a:	e7c7      	b.n	800ae9c <_printf_common+0x58>
 800af0c:	2301      	movs	r3, #1
 800af0e:	4622      	mov	r2, r4
 800af10:	4649      	mov	r1, r9
 800af12:	4638      	mov	r0, r7
 800af14:	47c0      	blx	r8
 800af16:	3001      	adds	r0, #1
 800af18:	d0e6      	beq.n	800aee8 <_printf_common+0xa4>
 800af1a:	3601      	adds	r6, #1
 800af1c:	e7d9      	b.n	800aed2 <_printf_common+0x8e>
	...

0800af20 <_printf_i>:
 800af20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af24:	7e0f      	ldrb	r7, [r1, #24]
 800af26:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af28:	2f78      	cmp	r7, #120	; 0x78
 800af2a:	4691      	mov	r9, r2
 800af2c:	4680      	mov	r8, r0
 800af2e:	460c      	mov	r4, r1
 800af30:	469a      	mov	sl, r3
 800af32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af36:	d807      	bhi.n	800af48 <_printf_i+0x28>
 800af38:	2f62      	cmp	r7, #98	; 0x62
 800af3a:	d80a      	bhi.n	800af52 <_printf_i+0x32>
 800af3c:	2f00      	cmp	r7, #0
 800af3e:	f000 80d8 	beq.w	800b0f2 <_printf_i+0x1d2>
 800af42:	2f58      	cmp	r7, #88	; 0x58
 800af44:	f000 80a3 	beq.w	800b08e <_printf_i+0x16e>
 800af48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af50:	e03a      	b.n	800afc8 <_printf_i+0xa8>
 800af52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af56:	2b15      	cmp	r3, #21
 800af58:	d8f6      	bhi.n	800af48 <_printf_i+0x28>
 800af5a:	a101      	add	r1, pc, #4	; (adr r1, 800af60 <_printf_i+0x40>)
 800af5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af60:	0800afb9 	.word	0x0800afb9
 800af64:	0800afcd 	.word	0x0800afcd
 800af68:	0800af49 	.word	0x0800af49
 800af6c:	0800af49 	.word	0x0800af49
 800af70:	0800af49 	.word	0x0800af49
 800af74:	0800af49 	.word	0x0800af49
 800af78:	0800afcd 	.word	0x0800afcd
 800af7c:	0800af49 	.word	0x0800af49
 800af80:	0800af49 	.word	0x0800af49
 800af84:	0800af49 	.word	0x0800af49
 800af88:	0800af49 	.word	0x0800af49
 800af8c:	0800b0d9 	.word	0x0800b0d9
 800af90:	0800affd 	.word	0x0800affd
 800af94:	0800b0bb 	.word	0x0800b0bb
 800af98:	0800af49 	.word	0x0800af49
 800af9c:	0800af49 	.word	0x0800af49
 800afa0:	0800b0fb 	.word	0x0800b0fb
 800afa4:	0800af49 	.word	0x0800af49
 800afa8:	0800affd 	.word	0x0800affd
 800afac:	0800af49 	.word	0x0800af49
 800afb0:	0800af49 	.word	0x0800af49
 800afb4:	0800b0c3 	.word	0x0800b0c3
 800afb8:	682b      	ldr	r3, [r5, #0]
 800afba:	1d1a      	adds	r2, r3, #4
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	602a      	str	r2, [r5, #0]
 800afc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800afc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800afc8:	2301      	movs	r3, #1
 800afca:	e0a3      	b.n	800b114 <_printf_i+0x1f4>
 800afcc:	6820      	ldr	r0, [r4, #0]
 800afce:	6829      	ldr	r1, [r5, #0]
 800afd0:	0606      	lsls	r6, r0, #24
 800afd2:	f101 0304 	add.w	r3, r1, #4
 800afd6:	d50a      	bpl.n	800afee <_printf_i+0xce>
 800afd8:	680e      	ldr	r6, [r1, #0]
 800afda:	602b      	str	r3, [r5, #0]
 800afdc:	2e00      	cmp	r6, #0
 800afde:	da03      	bge.n	800afe8 <_printf_i+0xc8>
 800afe0:	232d      	movs	r3, #45	; 0x2d
 800afe2:	4276      	negs	r6, r6
 800afe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afe8:	485e      	ldr	r0, [pc, #376]	; (800b164 <_printf_i+0x244>)
 800afea:	230a      	movs	r3, #10
 800afec:	e019      	b.n	800b022 <_printf_i+0x102>
 800afee:	680e      	ldr	r6, [r1, #0]
 800aff0:	602b      	str	r3, [r5, #0]
 800aff2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800aff6:	bf18      	it	ne
 800aff8:	b236      	sxthne	r6, r6
 800affa:	e7ef      	b.n	800afdc <_printf_i+0xbc>
 800affc:	682b      	ldr	r3, [r5, #0]
 800affe:	6820      	ldr	r0, [r4, #0]
 800b000:	1d19      	adds	r1, r3, #4
 800b002:	6029      	str	r1, [r5, #0]
 800b004:	0601      	lsls	r1, r0, #24
 800b006:	d501      	bpl.n	800b00c <_printf_i+0xec>
 800b008:	681e      	ldr	r6, [r3, #0]
 800b00a:	e002      	b.n	800b012 <_printf_i+0xf2>
 800b00c:	0646      	lsls	r6, r0, #25
 800b00e:	d5fb      	bpl.n	800b008 <_printf_i+0xe8>
 800b010:	881e      	ldrh	r6, [r3, #0]
 800b012:	4854      	ldr	r0, [pc, #336]	; (800b164 <_printf_i+0x244>)
 800b014:	2f6f      	cmp	r7, #111	; 0x6f
 800b016:	bf0c      	ite	eq
 800b018:	2308      	moveq	r3, #8
 800b01a:	230a      	movne	r3, #10
 800b01c:	2100      	movs	r1, #0
 800b01e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b022:	6865      	ldr	r5, [r4, #4]
 800b024:	60a5      	str	r5, [r4, #8]
 800b026:	2d00      	cmp	r5, #0
 800b028:	bfa2      	ittt	ge
 800b02a:	6821      	ldrge	r1, [r4, #0]
 800b02c:	f021 0104 	bicge.w	r1, r1, #4
 800b030:	6021      	strge	r1, [r4, #0]
 800b032:	b90e      	cbnz	r6, 800b038 <_printf_i+0x118>
 800b034:	2d00      	cmp	r5, #0
 800b036:	d04d      	beq.n	800b0d4 <_printf_i+0x1b4>
 800b038:	4615      	mov	r5, r2
 800b03a:	fbb6 f1f3 	udiv	r1, r6, r3
 800b03e:	fb03 6711 	mls	r7, r3, r1, r6
 800b042:	5dc7      	ldrb	r7, [r0, r7]
 800b044:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b048:	4637      	mov	r7, r6
 800b04a:	42bb      	cmp	r3, r7
 800b04c:	460e      	mov	r6, r1
 800b04e:	d9f4      	bls.n	800b03a <_printf_i+0x11a>
 800b050:	2b08      	cmp	r3, #8
 800b052:	d10b      	bne.n	800b06c <_printf_i+0x14c>
 800b054:	6823      	ldr	r3, [r4, #0]
 800b056:	07de      	lsls	r6, r3, #31
 800b058:	d508      	bpl.n	800b06c <_printf_i+0x14c>
 800b05a:	6923      	ldr	r3, [r4, #16]
 800b05c:	6861      	ldr	r1, [r4, #4]
 800b05e:	4299      	cmp	r1, r3
 800b060:	bfde      	ittt	le
 800b062:	2330      	movle	r3, #48	; 0x30
 800b064:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b068:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b06c:	1b52      	subs	r2, r2, r5
 800b06e:	6122      	str	r2, [r4, #16]
 800b070:	f8cd a000 	str.w	sl, [sp]
 800b074:	464b      	mov	r3, r9
 800b076:	aa03      	add	r2, sp, #12
 800b078:	4621      	mov	r1, r4
 800b07a:	4640      	mov	r0, r8
 800b07c:	f7ff fee2 	bl	800ae44 <_printf_common>
 800b080:	3001      	adds	r0, #1
 800b082:	d14c      	bne.n	800b11e <_printf_i+0x1fe>
 800b084:	f04f 30ff 	mov.w	r0, #4294967295
 800b088:	b004      	add	sp, #16
 800b08a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b08e:	4835      	ldr	r0, [pc, #212]	; (800b164 <_printf_i+0x244>)
 800b090:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b094:	6829      	ldr	r1, [r5, #0]
 800b096:	6823      	ldr	r3, [r4, #0]
 800b098:	f851 6b04 	ldr.w	r6, [r1], #4
 800b09c:	6029      	str	r1, [r5, #0]
 800b09e:	061d      	lsls	r5, r3, #24
 800b0a0:	d514      	bpl.n	800b0cc <_printf_i+0x1ac>
 800b0a2:	07df      	lsls	r7, r3, #31
 800b0a4:	bf44      	itt	mi
 800b0a6:	f043 0320 	orrmi.w	r3, r3, #32
 800b0aa:	6023      	strmi	r3, [r4, #0]
 800b0ac:	b91e      	cbnz	r6, 800b0b6 <_printf_i+0x196>
 800b0ae:	6823      	ldr	r3, [r4, #0]
 800b0b0:	f023 0320 	bic.w	r3, r3, #32
 800b0b4:	6023      	str	r3, [r4, #0]
 800b0b6:	2310      	movs	r3, #16
 800b0b8:	e7b0      	b.n	800b01c <_printf_i+0xfc>
 800b0ba:	6823      	ldr	r3, [r4, #0]
 800b0bc:	f043 0320 	orr.w	r3, r3, #32
 800b0c0:	6023      	str	r3, [r4, #0]
 800b0c2:	2378      	movs	r3, #120	; 0x78
 800b0c4:	4828      	ldr	r0, [pc, #160]	; (800b168 <_printf_i+0x248>)
 800b0c6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0ca:	e7e3      	b.n	800b094 <_printf_i+0x174>
 800b0cc:	0659      	lsls	r1, r3, #25
 800b0ce:	bf48      	it	mi
 800b0d0:	b2b6      	uxthmi	r6, r6
 800b0d2:	e7e6      	b.n	800b0a2 <_printf_i+0x182>
 800b0d4:	4615      	mov	r5, r2
 800b0d6:	e7bb      	b.n	800b050 <_printf_i+0x130>
 800b0d8:	682b      	ldr	r3, [r5, #0]
 800b0da:	6826      	ldr	r6, [r4, #0]
 800b0dc:	6961      	ldr	r1, [r4, #20]
 800b0de:	1d18      	adds	r0, r3, #4
 800b0e0:	6028      	str	r0, [r5, #0]
 800b0e2:	0635      	lsls	r5, r6, #24
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	d501      	bpl.n	800b0ec <_printf_i+0x1cc>
 800b0e8:	6019      	str	r1, [r3, #0]
 800b0ea:	e002      	b.n	800b0f2 <_printf_i+0x1d2>
 800b0ec:	0670      	lsls	r0, r6, #25
 800b0ee:	d5fb      	bpl.n	800b0e8 <_printf_i+0x1c8>
 800b0f0:	8019      	strh	r1, [r3, #0]
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	6123      	str	r3, [r4, #16]
 800b0f6:	4615      	mov	r5, r2
 800b0f8:	e7ba      	b.n	800b070 <_printf_i+0x150>
 800b0fa:	682b      	ldr	r3, [r5, #0]
 800b0fc:	1d1a      	adds	r2, r3, #4
 800b0fe:	602a      	str	r2, [r5, #0]
 800b100:	681d      	ldr	r5, [r3, #0]
 800b102:	6862      	ldr	r2, [r4, #4]
 800b104:	2100      	movs	r1, #0
 800b106:	4628      	mov	r0, r5
 800b108:	f7f5 f872 	bl	80001f0 <memchr>
 800b10c:	b108      	cbz	r0, 800b112 <_printf_i+0x1f2>
 800b10e:	1b40      	subs	r0, r0, r5
 800b110:	6060      	str	r0, [r4, #4]
 800b112:	6863      	ldr	r3, [r4, #4]
 800b114:	6123      	str	r3, [r4, #16]
 800b116:	2300      	movs	r3, #0
 800b118:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b11c:	e7a8      	b.n	800b070 <_printf_i+0x150>
 800b11e:	6923      	ldr	r3, [r4, #16]
 800b120:	462a      	mov	r2, r5
 800b122:	4649      	mov	r1, r9
 800b124:	4640      	mov	r0, r8
 800b126:	47d0      	blx	sl
 800b128:	3001      	adds	r0, #1
 800b12a:	d0ab      	beq.n	800b084 <_printf_i+0x164>
 800b12c:	6823      	ldr	r3, [r4, #0]
 800b12e:	079b      	lsls	r3, r3, #30
 800b130:	d413      	bmi.n	800b15a <_printf_i+0x23a>
 800b132:	68e0      	ldr	r0, [r4, #12]
 800b134:	9b03      	ldr	r3, [sp, #12]
 800b136:	4298      	cmp	r0, r3
 800b138:	bfb8      	it	lt
 800b13a:	4618      	movlt	r0, r3
 800b13c:	e7a4      	b.n	800b088 <_printf_i+0x168>
 800b13e:	2301      	movs	r3, #1
 800b140:	4632      	mov	r2, r6
 800b142:	4649      	mov	r1, r9
 800b144:	4640      	mov	r0, r8
 800b146:	47d0      	blx	sl
 800b148:	3001      	adds	r0, #1
 800b14a:	d09b      	beq.n	800b084 <_printf_i+0x164>
 800b14c:	3501      	adds	r5, #1
 800b14e:	68e3      	ldr	r3, [r4, #12]
 800b150:	9903      	ldr	r1, [sp, #12]
 800b152:	1a5b      	subs	r3, r3, r1
 800b154:	42ab      	cmp	r3, r5
 800b156:	dcf2      	bgt.n	800b13e <_printf_i+0x21e>
 800b158:	e7eb      	b.n	800b132 <_printf_i+0x212>
 800b15a:	2500      	movs	r5, #0
 800b15c:	f104 0619 	add.w	r6, r4, #25
 800b160:	e7f5      	b.n	800b14e <_printf_i+0x22e>
 800b162:	bf00      	nop
 800b164:	0800d706 	.word	0x0800d706
 800b168:	0800d717 	.word	0x0800d717

0800b16c <siprintf>:
 800b16c:	b40e      	push	{r1, r2, r3}
 800b16e:	b500      	push	{lr}
 800b170:	b09c      	sub	sp, #112	; 0x70
 800b172:	ab1d      	add	r3, sp, #116	; 0x74
 800b174:	9002      	str	r0, [sp, #8]
 800b176:	9006      	str	r0, [sp, #24]
 800b178:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b17c:	4809      	ldr	r0, [pc, #36]	; (800b1a4 <siprintf+0x38>)
 800b17e:	9107      	str	r1, [sp, #28]
 800b180:	9104      	str	r1, [sp, #16]
 800b182:	4909      	ldr	r1, [pc, #36]	; (800b1a8 <siprintf+0x3c>)
 800b184:	f853 2b04 	ldr.w	r2, [r3], #4
 800b188:	9105      	str	r1, [sp, #20]
 800b18a:	6800      	ldr	r0, [r0, #0]
 800b18c:	9301      	str	r3, [sp, #4]
 800b18e:	a902      	add	r1, sp, #8
 800b190:	f001 fb78 	bl	800c884 <_svfiprintf_r>
 800b194:	9b02      	ldr	r3, [sp, #8]
 800b196:	2200      	movs	r2, #0
 800b198:	701a      	strb	r2, [r3, #0]
 800b19a:	b01c      	add	sp, #112	; 0x70
 800b19c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1a0:	b003      	add	sp, #12
 800b1a2:	4770      	bx	lr
 800b1a4:	2000013c 	.word	0x2000013c
 800b1a8:	ffff0208 	.word	0xffff0208

0800b1ac <quorem>:
 800b1ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1b0:	6903      	ldr	r3, [r0, #16]
 800b1b2:	690c      	ldr	r4, [r1, #16]
 800b1b4:	42a3      	cmp	r3, r4
 800b1b6:	4607      	mov	r7, r0
 800b1b8:	f2c0 8081 	blt.w	800b2be <quorem+0x112>
 800b1bc:	3c01      	subs	r4, #1
 800b1be:	f101 0814 	add.w	r8, r1, #20
 800b1c2:	f100 0514 	add.w	r5, r0, #20
 800b1c6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1ca:	9301      	str	r3, [sp, #4]
 800b1cc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b1d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1d4:	3301      	adds	r3, #1
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b1dc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b1e0:	fbb2 f6f3 	udiv	r6, r2, r3
 800b1e4:	d331      	bcc.n	800b24a <quorem+0x9e>
 800b1e6:	f04f 0e00 	mov.w	lr, #0
 800b1ea:	4640      	mov	r0, r8
 800b1ec:	46ac      	mov	ip, r5
 800b1ee:	46f2      	mov	sl, lr
 800b1f0:	f850 2b04 	ldr.w	r2, [r0], #4
 800b1f4:	b293      	uxth	r3, r2
 800b1f6:	fb06 e303 	mla	r3, r6, r3, lr
 800b1fa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	ebaa 0303 	sub.w	r3, sl, r3
 800b204:	f8dc a000 	ldr.w	sl, [ip]
 800b208:	0c12      	lsrs	r2, r2, #16
 800b20a:	fa13 f38a 	uxtah	r3, r3, sl
 800b20e:	fb06 e202 	mla	r2, r6, r2, lr
 800b212:	9300      	str	r3, [sp, #0]
 800b214:	9b00      	ldr	r3, [sp, #0]
 800b216:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b21a:	b292      	uxth	r2, r2
 800b21c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b220:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b224:	f8bd 3000 	ldrh.w	r3, [sp]
 800b228:	4581      	cmp	r9, r0
 800b22a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b22e:	f84c 3b04 	str.w	r3, [ip], #4
 800b232:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b236:	d2db      	bcs.n	800b1f0 <quorem+0x44>
 800b238:	f855 300b 	ldr.w	r3, [r5, fp]
 800b23c:	b92b      	cbnz	r3, 800b24a <quorem+0x9e>
 800b23e:	9b01      	ldr	r3, [sp, #4]
 800b240:	3b04      	subs	r3, #4
 800b242:	429d      	cmp	r5, r3
 800b244:	461a      	mov	r2, r3
 800b246:	d32e      	bcc.n	800b2a6 <quorem+0xfa>
 800b248:	613c      	str	r4, [r7, #16]
 800b24a:	4638      	mov	r0, r7
 800b24c:	f001 f8c6 	bl	800c3dc <__mcmp>
 800b250:	2800      	cmp	r0, #0
 800b252:	db24      	blt.n	800b29e <quorem+0xf2>
 800b254:	3601      	adds	r6, #1
 800b256:	4628      	mov	r0, r5
 800b258:	f04f 0c00 	mov.w	ip, #0
 800b25c:	f858 2b04 	ldr.w	r2, [r8], #4
 800b260:	f8d0 e000 	ldr.w	lr, [r0]
 800b264:	b293      	uxth	r3, r2
 800b266:	ebac 0303 	sub.w	r3, ip, r3
 800b26a:	0c12      	lsrs	r2, r2, #16
 800b26c:	fa13 f38e 	uxtah	r3, r3, lr
 800b270:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b274:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b278:	b29b      	uxth	r3, r3
 800b27a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b27e:	45c1      	cmp	r9, r8
 800b280:	f840 3b04 	str.w	r3, [r0], #4
 800b284:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b288:	d2e8      	bcs.n	800b25c <quorem+0xb0>
 800b28a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b28e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b292:	b922      	cbnz	r2, 800b29e <quorem+0xf2>
 800b294:	3b04      	subs	r3, #4
 800b296:	429d      	cmp	r5, r3
 800b298:	461a      	mov	r2, r3
 800b29a:	d30a      	bcc.n	800b2b2 <quorem+0x106>
 800b29c:	613c      	str	r4, [r7, #16]
 800b29e:	4630      	mov	r0, r6
 800b2a0:	b003      	add	sp, #12
 800b2a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a6:	6812      	ldr	r2, [r2, #0]
 800b2a8:	3b04      	subs	r3, #4
 800b2aa:	2a00      	cmp	r2, #0
 800b2ac:	d1cc      	bne.n	800b248 <quorem+0x9c>
 800b2ae:	3c01      	subs	r4, #1
 800b2b0:	e7c7      	b.n	800b242 <quorem+0x96>
 800b2b2:	6812      	ldr	r2, [r2, #0]
 800b2b4:	3b04      	subs	r3, #4
 800b2b6:	2a00      	cmp	r2, #0
 800b2b8:	d1f0      	bne.n	800b29c <quorem+0xf0>
 800b2ba:	3c01      	subs	r4, #1
 800b2bc:	e7eb      	b.n	800b296 <quorem+0xea>
 800b2be:	2000      	movs	r0, #0
 800b2c0:	e7ee      	b.n	800b2a0 <quorem+0xf4>
 800b2c2:	0000      	movs	r0, r0
 800b2c4:	0000      	movs	r0, r0
	...

0800b2c8 <_dtoa_r>:
 800b2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2cc:	ed2d 8b04 	vpush	{d8-d9}
 800b2d0:	ec57 6b10 	vmov	r6, r7, d0
 800b2d4:	b093      	sub	sp, #76	; 0x4c
 800b2d6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b2d8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b2dc:	9106      	str	r1, [sp, #24]
 800b2de:	ee10 aa10 	vmov	sl, s0
 800b2e2:	4604      	mov	r4, r0
 800b2e4:	9209      	str	r2, [sp, #36]	; 0x24
 800b2e6:	930c      	str	r3, [sp, #48]	; 0x30
 800b2e8:	46bb      	mov	fp, r7
 800b2ea:	b975      	cbnz	r5, 800b30a <_dtoa_r+0x42>
 800b2ec:	2010      	movs	r0, #16
 800b2ee:	f000 fddd 	bl	800beac <malloc>
 800b2f2:	4602      	mov	r2, r0
 800b2f4:	6260      	str	r0, [r4, #36]	; 0x24
 800b2f6:	b920      	cbnz	r0, 800b302 <_dtoa_r+0x3a>
 800b2f8:	4ba7      	ldr	r3, [pc, #668]	; (800b598 <_dtoa_r+0x2d0>)
 800b2fa:	21ea      	movs	r1, #234	; 0xea
 800b2fc:	48a7      	ldr	r0, [pc, #668]	; (800b59c <_dtoa_r+0x2d4>)
 800b2fe:	f001 fbd1 	bl	800caa4 <__assert_func>
 800b302:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b306:	6005      	str	r5, [r0, #0]
 800b308:	60c5      	str	r5, [r0, #12]
 800b30a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b30c:	6819      	ldr	r1, [r3, #0]
 800b30e:	b151      	cbz	r1, 800b326 <_dtoa_r+0x5e>
 800b310:	685a      	ldr	r2, [r3, #4]
 800b312:	604a      	str	r2, [r1, #4]
 800b314:	2301      	movs	r3, #1
 800b316:	4093      	lsls	r3, r2
 800b318:	608b      	str	r3, [r1, #8]
 800b31a:	4620      	mov	r0, r4
 800b31c:	f000 fe1c 	bl	800bf58 <_Bfree>
 800b320:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b322:	2200      	movs	r2, #0
 800b324:	601a      	str	r2, [r3, #0]
 800b326:	1e3b      	subs	r3, r7, #0
 800b328:	bfaa      	itet	ge
 800b32a:	2300      	movge	r3, #0
 800b32c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b330:	f8c8 3000 	strge.w	r3, [r8]
 800b334:	4b9a      	ldr	r3, [pc, #616]	; (800b5a0 <_dtoa_r+0x2d8>)
 800b336:	bfbc      	itt	lt
 800b338:	2201      	movlt	r2, #1
 800b33a:	f8c8 2000 	strlt.w	r2, [r8]
 800b33e:	ea33 030b 	bics.w	r3, r3, fp
 800b342:	d11b      	bne.n	800b37c <_dtoa_r+0xb4>
 800b344:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b346:	f242 730f 	movw	r3, #9999	; 0x270f
 800b34a:	6013      	str	r3, [r2, #0]
 800b34c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b350:	4333      	orrs	r3, r6
 800b352:	f000 8592 	beq.w	800be7a <_dtoa_r+0xbb2>
 800b356:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b358:	b963      	cbnz	r3, 800b374 <_dtoa_r+0xac>
 800b35a:	4b92      	ldr	r3, [pc, #584]	; (800b5a4 <_dtoa_r+0x2dc>)
 800b35c:	e022      	b.n	800b3a4 <_dtoa_r+0xdc>
 800b35e:	4b92      	ldr	r3, [pc, #584]	; (800b5a8 <_dtoa_r+0x2e0>)
 800b360:	9301      	str	r3, [sp, #4]
 800b362:	3308      	adds	r3, #8
 800b364:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b366:	6013      	str	r3, [r2, #0]
 800b368:	9801      	ldr	r0, [sp, #4]
 800b36a:	b013      	add	sp, #76	; 0x4c
 800b36c:	ecbd 8b04 	vpop	{d8-d9}
 800b370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b374:	4b8b      	ldr	r3, [pc, #556]	; (800b5a4 <_dtoa_r+0x2dc>)
 800b376:	9301      	str	r3, [sp, #4]
 800b378:	3303      	adds	r3, #3
 800b37a:	e7f3      	b.n	800b364 <_dtoa_r+0x9c>
 800b37c:	2200      	movs	r2, #0
 800b37e:	2300      	movs	r3, #0
 800b380:	4650      	mov	r0, sl
 800b382:	4659      	mov	r1, fp
 800b384:	f7f5 fba8 	bl	8000ad8 <__aeabi_dcmpeq>
 800b388:	ec4b ab19 	vmov	d9, sl, fp
 800b38c:	4680      	mov	r8, r0
 800b38e:	b158      	cbz	r0, 800b3a8 <_dtoa_r+0xe0>
 800b390:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b392:	2301      	movs	r3, #1
 800b394:	6013      	str	r3, [r2, #0]
 800b396:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b398:	2b00      	cmp	r3, #0
 800b39a:	f000 856b 	beq.w	800be74 <_dtoa_r+0xbac>
 800b39e:	4883      	ldr	r0, [pc, #524]	; (800b5ac <_dtoa_r+0x2e4>)
 800b3a0:	6018      	str	r0, [r3, #0]
 800b3a2:	1e43      	subs	r3, r0, #1
 800b3a4:	9301      	str	r3, [sp, #4]
 800b3a6:	e7df      	b.n	800b368 <_dtoa_r+0xa0>
 800b3a8:	ec4b ab10 	vmov	d0, sl, fp
 800b3ac:	aa10      	add	r2, sp, #64	; 0x40
 800b3ae:	a911      	add	r1, sp, #68	; 0x44
 800b3b0:	4620      	mov	r0, r4
 800b3b2:	f001 f8b9 	bl	800c528 <__d2b>
 800b3b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b3ba:	ee08 0a10 	vmov	s16, r0
 800b3be:	2d00      	cmp	r5, #0
 800b3c0:	f000 8084 	beq.w	800b4cc <_dtoa_r+0x204>
 800b3c4:	ee19 3a90 	vmov	r3, s19
 800b3c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b3d0:	4656      	mov	r6, sl
 800b3d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b3d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b3da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b3de:	4b74      	ldr	r3, [pc, #464]	; (800b5b0 <_dtoa_r+0x2e8>)
 800b3e0:	2200      	movs	r2, #0
 800b3e2:	4630      	mov	r0, r6
 800b3e4:	4639      	mov	r1, r7
 800b3e6:	f7f4 ff57 	bl	8000298 <__aeabi_dsub>
 800b3ea:	a365      	add	r3, pc, #404	; (adr r3, 800b580 <_dtoa_r+0x2b8>)
 800b3ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3f0:	f7f5 f90a 	bl	8000608 <__aeabi_dmul>
 800b3f4:	a364      	add	r3, pc, #400	; (adr r3, 800b588 <_dtoa_r+0x2c0>)
 800b3f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3fa:	f7f4 ff4f 	bl	800029c <__adddf3>
 800b3fe:	4606      	mov	r6, r0
 800b400:	4628      	mov	r0, r5
 800b402:	460f      	mov	r7, r1
 800b404:	f7f5 f896 	bl	8000534 <__aeabi_i2d>
 800b408:	a361      	add	r3, pc, #388	; (adr r3, 800b590 <_dtoa_r+0x2c8>)
 800b40a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b40e:	f7f5 f8fb 	bl	8000608 <__aeabi_dmul>
 800b412:	4602      	mov	r2, r0
 800b414:	460b      	mov	r3, r1
 800b416:	4630      	mov	r0, r6
 800b418:	4639      	mov	r1, r7
 800b41a:	f7f4 ff3f 	bl	800029c <__adddf3>
 800b41e:	4606      	mov	r6, r0
 800b420:	460f      	mov	r7, r1
 800b422:	f7f5 fba1 	bl	8000b68 <__aeabi_d2iz>
 800b426:	2200      	movs	r2, #0
 800b428:	9000      	str	r0, [sp, #0]
 800b42a:	2300      	movs	r3, #0
 800b42c:	4630      	mov	r0, r6
 800b42e:	4639      	mov	r1, r7
 800b430:	f7f5 fb5c 	bl	8000aec <__aeabi_dcmplt>
 800b434:	b150      	cbz	r0, 800b44c <_dtoa_r+0x184>
 800b436:	9800      	ldr	r0, [sp, #0]
 800b438:	f7f5 f87c 	bl	8000534 <__aeabi_i2d>
 800b43c:	4632      	mov	r2, r6
 800b43e:	463b      	mov	r3, r7
 800b440:	f7f5 fb4a 	bl	8000ad8 <__aeabi_dcmpeq>
 800b444:	b910      	cbnz	r0, 800b44c <_dtoa_r+0x184>
 800b446:	9b00      	ldr	r3, [sp, #0]
 800b448:	3b01      	subs	r3, #1
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	9b00      	ldr	r3, [sp, #0]
 800b44e:	2b16      	cmp	r3, #22
 800b450:	d85a      	bhi.n	800b508 <_dtoa_r+0x240>
 800b452:	9a00      	ldr	r2, [sp, #0]
 800b454:	4b57      	ldr	r3, [pc, #348]	; (800b5b4 <_dtoa_r+0x2ec>)
 800b456:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b45e:	ec51 0b19 	vmov	r0, r1, d9
 800b462:	f7f5 fb43 	bl	8000aec <__aeabi_dcmplt>
 800b466:	2800      	cmp	r0, #0
 800b468:	d050      	beq.n	800b50c <_dtoa_r+0x244>
 800b46a:	9b00      	ldr	r3, [sp, #0]
 800b46c:	3b01      	subs	r3, #1
 800b46e:	9300      	str	r3, [sp, #0]
 800b470:	2300      	movs	r3, #0
 800b472:	930b      	str	r3, [sp, #44]	; 0x2c
 800b474:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b476:	1b5d      	subs	r5, r3, r5
 800b478:	1e6b      	subs	r3, r5, #1
 800b47a:	9305      	str	r3, [sp, #20]
 800b47c:	bf45      	ittet	mi
 800b47e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b482:	9304      	strmi	r3, [sp, #16]
 800b484:	2300      	movpl	r3, #0
 800b486:	2300      	movmi	r3, #0
 800b488:	bf4c      	ite	mi
 800b48a:	9305      	strmi	r3, [sp, #20]
 800b48c:	9304      	strpl	r3, [sp, #16]
 800b48e:	9b00      	ldr	r3, [sp, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	db3d      	blt.n	800b510 <_dtoa_r+0x248>
 800b494:	9b05      	ldr	r3, [sp, #20]
 800b496:	9a00      	ldr	r2, [sp, #0]
 800b498:	920a      	str	r2, [sp, #40]	; 0x28
 800b49a:	4413      	add	r3, r2
 800b49c:	9305      	str	r3, [sp, #20]
 800b49e:	2300      	movs	r3, #0
 800b4a0:	9307      	str	r3, [sp, #28]
 800b4a2:	9b06      	ldr	r3, [sp, #24]
 800b4a4:	2b09      	cmp	r3, #9
 800b4a6:	f200 8089 	bhi.w	800b5bc <_dtoa_r+0x2f4>
 800b4aa:	2b05      	cmp	r3, #5
 800b4ac:	bfc4      	itt	gt
 800b4ae:	3b04      	subgt	r3, #4
 800b4b0:	9306      	strgt	r3, [sp, #24]
 800b4b2:	9b06      	ldr	r3, [sp, #24]
 800b4b4:	f1a3 0302 	sub.w	r3, r3, #2
 800b4b8:	bfcc      	ite	gt
 800b4ba:	2500      	movgt	r5, #0
 800b4bc:	2501      	movle	r5, #1
 800b4be:	2b03      	cmp	r3, #3
 800b4c0:	f200 8087 	bhi.w	800b5d2 <_dtoa_r+0x30a>
 800b4c4:	e8df f003 	tbb	[pc, r3]
 800b4c8:	59383a2d 	.word	0x59383a2d
 800b4cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b4d0:	441d      	add	r5, r3
 800b4d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b4d6:	2b20      	cmp	r3, #32
 800b4d8:	bfc1      	itttt	gt
 800b4da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b4de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b4e2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b4e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b4ea:	bfda      	itte	le
 800b4ec:	f1c3 0320 	rsble	r3, r3, #32
 800b4f0:	fa06 f003 	lslle.w	r0, r6, r3
 800b4f4:	4318      	orrgt	r0, r3
 800b4f6:	f7f5 f80d 	bl	8000514 <__aeabi_ui2d>
 800b4fa:	2301      	movs	r3, #1
 800b4fc:	4606      	mov	r6, r0
 800b4fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b502:	3d01      	subs	r5, #1
 800b504:	930e      	str	r3, [sp, #56]	; 0x38
 800b506:	e76a      	b.n	800b3de <_dtoa_r+0x116>
 800b508:	2301      	movs	r3, #1
 800b50a:	e7b2      	b.n	800b472 <_dtoa_r+0x1aa>
 800b50c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b50e:	e7b1      	b.n	800b474 <_dtoa_r+0x1ac>
 800b510:	9b04      	ldr	r3, [sp, #16]
 800b512:	9a00      	ldr	r2, [sp, #0]
 800b514:	1a9b      	subs	r3, r3, r2
 800b516:	9304      	str	r3, [sp, #16]
 800b518:	4253      	negs	r3, r2
 800b51a:	9307      	str	r3, [sp, #28]
 800b51c:	2300      	movs	r3, #0
 800b51e:	930a      	str	r3, [sp, #40]	; 0x28
 800b520:	e7bf      	b.n	800b4a2 <_dtoa_r+0x1da>
 800b522:	2300      	movs	r3, #0
 800b524:	9308      	str	r3, [sp, #32]
 800b526:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b528:	2b00      	cmp	r3, #0
 800b52a:	dc55      	bgt.n	800b5d8 <_dtoa_r+0x310>
 800b52c:	2301      	movs	r3, #1
 800b52e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b532:	461a      	mov	r2, r3
 800b534:	9209      	str	r2, [sp, #36]	; 0x24
 800b536:	e00c      	b.n	800b552 <_dtoa_r+0x28a>
 800b538:	2301      	movs	r3, #1
 800b53a:	e7f3      	b.n	800b524 <_dtoa_r+0x25c>
 800b53c:	2300      	movs	r3, #0
 800b53e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b540:	9308      	str	r3, [sp, #32]
 800b542:	9b00      	ldr	r3, [sp, #0]
 800b544:	4413      	add	r3, r2
 800b546:	9302      	str	r3, [sp, #8]
 800b548:	3301      	adds	r3, #1
 800b54a:	2b01      	cmp	r3, #1
 800b54c:	9303      	str	r3, [sp, #12]
 800b54e:	bfb8      	it	lt
 800b550:	2301      	movlt	r3, #1
 800b552:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b554:	2200      	movs	r2, #0
 800b556:	6042      	str	r2, [r0, #4]
 800b558:	2204      	movs	r2, #4
 800b55a:	f102 0614 	add.w	r6, r2, #20
 800b55e:	429e      	cmp	r6, r3
 800b560:	6841      	ldr	r1, [r0, #4]
 800b562:	d93d      	bls.n	800b5e0 <_dtoa_r+0x318>
 800b564:	4620      	mov	r0, r4
 800b566:	f000 fcb7 	bl	800bed8 <_Balloc>
 800b56a:	9001      	str	r0, [sp, #4]
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d13b      	bne.n	800b5e8 <_dtoa_r+0x320>
 800b570:	4b11      	ldr	r3, [pc, #68]	; (800b5b8 <_dtoa_r+0x2f0>)
 800b572:	4602      	mov	r2, r0
 800b574:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b578:	e6c0      	b.n	800b2fc <_dtoa_r+0x34>
 800b57a:	2301      	movs	r3, #1
 800b57c:	e7df      	b.n	800b53e <_dtoa_r+0x276>
 800b57e:	bf00      	nop
 800b580:	636f4361 	.word	0x636f4361
 800b584:	3fd287a7 	.word	0x3fd287a7
 800b588:	8b60c8b3 	.word	0x8b60c8b3
 800b58c:	3fc68a28 	.word	0x3fc68a28
 800b590:	509f79fb 	.word	0x509f79fb
 800b594:	3fd34413 	.word	0x3fd34413
 800b598:	0800d735 	.word	0x0800d735
 800b59c:	0800d74c 	.word	0x0800d74c
 800b5a0:	7ff00000 	.word	0x7ff00000
 800b5a4:	0800d731 	.word	0x0800d731
 800b5a8:	0800d728 	.word	0x0800d728
 800b5ac:	0800d705 	.word	0x0800d705
 800b5b0:	3ff80000 	.word	0x3ff80000
 800b5b4:	0800d840 	.word	0x0800d840
 800b5b8:	0800d7a7 	.word	0x0800d7a7
 800b5bc:	2501      	movs	r5, #1
 800b5be:	2300      	movs	r3, #0
 800b5c0:	9306      	str	r3, [sp, #24]
 800b5c2:	9508      	str	r5, [sp, #32]
 800b5c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	2312      	movs	r3, #18
 800b5d0:	e7b0      	b.n	800b534 <_dtoa_r+0x26c>
 800b5d2:	2301      	movs	r3, #1
 800b5d4:	9308      	str	r3, [sp, #32]
 800b5d6:	e7f5      	b.n	800b5c4 <_dtoa_r+0x2fc>
 800b5d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b5da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b5de:	e7b8      	b.n	800b552 <_dtoa_r+0x28a>
 800b5e0:	3101      	adds	r1, #1
 800b5e2:	6041      	str	r1, [r0, #4]
 800b5e4:	0052      	lsls	r2, r2, #1
 800b5e6:	e7b8      	b.n	800b55a <_dtoa_r+0x292>
 800b5e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b5ea:	9a01      	ldr	r2, [sp, #4]
 800b5ec:	601a      	str	r2, [r3, #0]
 800b5ee:	9b03      	ldr	r3, [sp, #12]
 800b5f0:	2b0e      	cmp	r3, #14
 800b5f2:	f200 809d 	bhi.w	800b730 <_dtoa_r+0x468>
 800b5f6:	2d00      	cmp	r5, #0
 800b5f8:	f000 809a 	beq.w	800b730 <_dtoa_r+0x468>
 800b5fc:	9b00      	ldr	r3, [sp, #0]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	dd32      	ble.n	800b668 <_dtoa_r+0x3a0>
 800b602:	4ab7      	ldr	r2, [pc, #732]	; (800b8e0 <_dtoa_r+0x618>)
 800b604:	f003 030f 	and.w	r3, r3, #15
 800b608:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b60c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b610:	9b00      	ldr	r3, [sp, #0]
 800b612:	05d8      	lsls	r0, r3, #23
 800b614:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b618:	d516      	bpl.n	800b648 <_dtoa_r+0x380>
 800b61a:	4bb2      	ldr	r3, [pc, #712]	; (800b8e4 <_dtoa_r+0x61c>)
 800b61c:	ec51 0b19 	vmov	r0, r1, d9
 800b620:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b624:	f7f5 f91a 	bl	800085c <__aeabi_ddiv>
 800b628:	f007 070f 	and.w	r7, r7, #15
 800b62c:	4682      	mov	sl, r0
 800b62e:	468b      	mov	fp, r1
 800b630:	2503      	movs	r5, #3
 800b632:	4eac      	ldr	r6, [pc, #688]	; (800b8e4 <_dtoa_r+0x61c>)
 800b634:	b957      	cbnz	r7, 800b64c <_dtoa_r+0x384>
 800b636:	4642      	mov	r2, r8
 800b638:	464b      	mov	r3, r9
 800b63a:	4650      	mov	r0, sl
 800b63c:	4659      	mov	r1, fp
 800b63e:	f7f5 f90d 	bl	800085c <__aeabi_ddiv>
 800b642:	4682      	mov	sl, r0
 800b644:	468b      	mov	fp, r1
 800b646:	e028      	b.n	800b69a <_dtoa_r+0x3d2>
 800b648:	2502      	movs	r5, #2
 800b64a:	e7f2      	b.n	800b632 <_dtoa_r+0x36a>
 800b64c:	07f9      	lsls	r1, r7, #31
 800b64e:	d508      	bpl.n	800b662 <_dtoa_r+0x39a>
 800b650:	4640      	mov	r0, r8
 800b652:	4649      	mov	r1, r9
 800b654:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b658:	f7f4 ffd6 	bl	8000608 <__aeabi_dmul>
 800b65c:	3501      	adds	r5, #1
 800b65e:	4680      	mov	r8, r0
 800b660:	4689      	mov	r9, r1
 800b662:	107f      	asrs	r7, r7, #1
 800b664:	3608      	adds	r6, #8
 800b666:	e7e5      	b.n	800b634 <_dtoa_r+0x36c>
 800b668:	f000 809b 	beq.w	800b7a2 <_dtoa_r+0x4da>
 800b66c:	9b00      	ldr	r3, [sp, #0]
 800b66e:	4f9d      	ldr	r7, [pc, #628]	; (800b8e4 <_dtoa_r+0x61c>)
 800b670:	425e      	negs	r6, r3
 800b672:	4b9b      	ldr	r3, [pc, #620]	; (800b8e0 <_dtoa_r+0x618>)
 800b674:	f006 020f 	and.w	r2, r6, #15
 800b678:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b67c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b680:	ec51 0b19 	vmov	r0, r1, d9
 800b684:	f7f4 ffc0 	bl	8000608 <__aeabi_dmul>
 800b688:	1136      	asrs	r6, r6, #4
 800b68a:	4682      	mov	sl, r0
 800b68c:	468b      	mov	fp, r1
 800b68e:	2300      	movs	r3, #0
 800b690:	2502      	movs	r5, #2
 800b692:	2e00      	cmp	r6, #0
 800b694:	d17a      	bne.n	800b78c <_dtoa_r+0x4c4>
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1d3      	bne.n	800b642 <_dtoa_r+0x37a>
 800b69a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	f000 8082 	beq.w	800b7a6 <_dtoa_r+0x4de>
 800b6a2:	4b91      	ldr	r3, [pc, #580]	; (800b8e8 <_dtoa_r+0x620>)
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	4650      	mov	r0, sl
 800b6a8:	4659      	mov	r1, fp
 800b6aa:	f7f5 fa1f 	bl	8000aec <__aeabi_dcmplt>
 800b6ae:	2800      	cmp	r0, #0
 800b6b0:	d079      	beq.n	800b7a6 <_dtoa_r+0x4de>
 800b6b2:	9b03      	ldr	r3, [sp, #12]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d076      	beq.n	800b7a6 <_dtoa_r+0x4de>
 800b6b8:	9b02      	ldr	r3, [sp, #8]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	dd36      	ble.n	800b72c <_dtoa_r+0x464>
 800b6be:	9b00      	ldr	r3, [sp, #0]
 800b6c0:	4650      	mov	r0, sl
 800b6c2:	4659      	mov	r1, fp
 800b6c4:	1e5f      	subs	r7, r3, #1
 800b6c6:	2200      	movs	r2, #0
 800b6c8:	4b88      	ldr	r3, [pc, #544]	; (800b8ec <_dtoa_r+0x624>)
 800b6ca:	f7f4 ff9d 	bl	8000608 <__aeabi_dmul>
 800b6ce:	9e02      	ldr	r6, [sp, #8]
 800b6d0:	4682      	mov	sl, r0
 800b6d2:	468b      	mov	fp, r1
 800b6d4:	3501      	adds	r5, #1
 800b6d6:	4628      	mov	r0, r5
 800b6d8:	f7f4 ff2c 	bl	8000534 <__aeabi_i2d>
 800b6dc:	4652      	mov	r2, sl
 800b6de:	465b      	mov	r3, fp
 800b6e0:	f7f4 ff92 	bl	8000608 <__aeabi_dmul>
 800b6e4:	4b82      	ldr	r3, [pc, #520]	; (800b8f0 <_dtoa_r+0x628>)
 800b6e6:	2200      	movs	r2, #0
 800b6e8:	f7f4 fdd8 	bl	800029c <__adddf3>
 800b6ec:	46d0      	mov	r8, sl
 800b6ee:	46d9      	mov	r9, fp
 800b6f0:	4682      	mov	sl, r0
 800b6f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b6f6:	2e00      	cmp	r6, #0
 800b6f8:	d158      	bne.n	800b7ac <_dtoa_r+0x4e4>
 800b6fa:	4b7e      	ldr	r3, [pc, #504]	; (800b8f4 <_dtoa_r+0x62c>)
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	4640      	mov	r0, r8
 800b700:	4649      	mov	r1, r9
 800b702:	f7f4 fdc9 	bl	8000298 <__aeabi_dsub>
 800b706:	4652      	mov	r2, sl
 800b708:	465b      	mov	r3, fp
 800b70a:	4680      	mov	r8, r0
 800b70c:	4689      	mov	r9, r1
 800b70e:	f7f5 fa0b 	bl	8000b28 <__aeabi_dcmpgt>
 800b712:	2800      	cmp	r0, #0
 800b714:	f040 8295 	bne.w	800bc42 <_dtoa_r+0x97a>
 800b718:	4652      	mov	r2, sl
 800b71a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b71e:	4640      	mov	r0, r8
 800b720:	4649      	mov	r1, r9
 800b722:	f7f5 f9e3 	bl	8000aec <__aeabi_dcmplt>
 800b726:	2800      	cmp	r0, #0
 800b728:	f040 8289 	bne.w	800bc3e <_dtoa_r+0x976>
 800b72c:	ec5b ab19 	vmov	sl, fp, d9
 800b730:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b732:	2b00      	cmp	r3, #0
 800b734:	f2c0 8148 	blt.w	800b9c8 <_dtoa_r+0x700>
 800b738:	9a00      	ldr	r2, [sp, #0]
 800b73a:	2a0e      	cmp	r2, #14
 800b73c:	f300 8144 	bgt.w	800b9c8 <_dtoa_r+0x700>
 800b740:	4b67      	ldr	r3, [pc, #412]	; (800b8e0 <_dtoa_r+0x618>)
 800b742:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b746:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b74a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	f280 80d5 	bge.w	800b8fc <_dtoa_r+0x634>
 800b752:	9b03      	ldr	r3, [sp, #12]
 800b754:	2b00      	cmp	r3, #0
 800b756:	f300 80d1 	bgt.w	800b8fc <_dtoa_r+0x634>
 800b75a:	f040 826f 	bne.w	800bc3c <_dtoa_r+0x974>
 800b75e:	4b65      	ldr	r3, [pc, #404]	; (800b8f4 <_dtoa_r+0x62c>)
 800b760:	2200      	movs	r2, #0
 800b762:	4640      	mov	r0, r8
 800b764:	4649      	mov	r1, r9
 800b766:	f7f4 ff4f 	bl	8000608 <__aeabi_dmul>
 800b76a:	4652      	mov	r2, sl
 800b76c:	465b      	mov	r3, fp
 800b76e:	f7f5 f9d1 	bl	8000b14 <__aeabi_dcmpge>
 800b772:	9e03      	ldr	r6, [sp, #12]
 800b774:	4637      	mov	r7, r6
 800b776:	2800      	cmp	r0, #0
 800b778:	f040 8245 	bne.w	800bc06 <_dtoa_r+0x93e>
 800b77c:	9d01      	ldr	r5, [sp, #4]
 800b77e:	2331      	movs	r3, #49	; 0x31
 800b780:	f805 3b01 	strb.w	r3, [r5], #1
 800b784:	9b00      	ldr	r3, [sp, #0]
 800b786:	3301      	adds	r3, #1
 800b788:	9300      	str	r3, [sp, #0]
 800b78a:	e240      	b.n	800bc0e <_dtoa_r+0x946>
 800b78c:	07f2      	lsls	r2, r6, #31
 800b78e:	d505      	bpl.n	800b79c <_dtoa_r+0x4d4>
 800b790:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b794:	f7f4 ff38 	bl	8000608 <__aeabi_dmul>
 800b798:	3501      	adds	r5, #1
 800b79a:	2301      	movs	r3, #1
 800b79c:	1076      	asrs	r6, r6, #1
 800b79e:	3708      	adds	r7, #8
 800b7a0:	e777      	b.n	800b692 <_dtoa_r+0x3ca>
 800b7a2:	2502      	movs	r5, #2
 800b7a4:	e779      	b.n	800b69a <_dtoa_r+0x3d2>
 800b7a6:	9f00      	ldr	r7, [sp, #0]
 800b7a8:	9e03      	ldr	r6, [sp, #12]
 800b7aa:	e794      	b.n	800b6d6 <_dtoa_r+0x40e>
 800b7ac:	9901      	ldr	r1, [sp, #4]
 800b7ae:	4b4c      	ldr	r3, [pc, #304]	; (800b8e0 <_dtoa_r+0x618>)
 800b7b0:	4431      	add	r1, r6
 800b7b2:	910d      	str	r1, [sp, #52]	; 0x34
 800b7b4:	9908      	ldr	r1, [sp, #32]
 800b7b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b7ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b7be:	2900      	cmp	r1, #0
 800b7c0:	d043      	beq.n	800b84a <_dtoa_r+0x582>
 800b7c2:	494d      	ldr	r1, [pc, #308]	; (800b8f8 <_dtoa_r+0x630>)
 800b7c4:	2000      	movs	r0, #0
 800b7c6:	f7f5 f849 	bl	800085c <__aeabi_ddiv>
 800b7ca:	4652      	mov	r2, sl
 800b7cc:	465b      	mov	r3, fp
 800b7ce:	f7f4 fd63 	bl	8000298 <__aeabi_dsub>
 800b7d2:	9d01      	ldr	r5, [sp, #4]
 800b7d4:	4682      	mov	sl, r0
 800b7d6:	468b      	mov	fp, r1
 800b7d8:	4649      	mov	r1, r9
 800b7da:	4640      	mov	r0, r8
 800b7dc:	f7f5 f9c4 	bl	8000b68 <__aeabi_d2iz>
 800b7e0:	4606      	mov	r6, r0
 800b7e2:	f7f4 fea7 	bl	8000534 <__aeabi_i2d>
 800b7e6:	4602      	mov	r2, r0
 800b7e8:	460b      	mov	r3, r1
 800b7ea:	4640      	mov	r0, r8
 800b7ec:	4649      	mov	r1, r9
 800b7ee:	f7f4 fd53 	bl	8000298 <__aeabi_dsub>
 800b7f2:	3630      	adds	r6, #48	; 0x30
 800b7f4:	f805 6b01 	strb.w	r6, [r5], #1
 800b7f8:	4652      	mov	r2, sl
 800b7fa:	465b      	mov	r3, fp
 800b7fc:	4680      	mov	r8, r0
 800b7fe:	4689      	mov	r9, r1
 800b800:	f7f5 f974 	bl	8000aec <__aeabi_dcmplt>
 800b804:	2800      	cmp	r0, #0
 800b806:	d163      	bne.n	800b8d0 <_dtoa_r+0x608>
 800b808:	4642      	mov	r2, r8
 800b80a:	464b      	mov	r3, r9
 800b80c:	4936      	ldr	r1, [pc, #216]	; (800b8e8 <_dtoa_r+0x620>)
 800b80e:	2000      	movs	r0, #0
 800b810:	f7f4 fd42 	bl	8000298 <__aeabi_dsub>
 800b814:	4652      	mov	r2, sl
 800b816:	465b      	mov	r3, fp
 800b818:	f7f5 f968 	bl	8000aec <__aeabi_dcmplt>
 800b81c:	2800      	cmp	r0, #0
 800b81e:	f040 80b5 	bne.w	800b98c <_dtoa_r+0x6c4>
 800b822:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b824:	429d      	cmp	r5, r3
 800b826:	d081      	beq.n	800b72c <_dtoa_r+0x464>
 800b828:	4b30      	ldr	r3, [pc, #192]	; (800b8ec <_dtoa_r+0x624>)
 800b82a:	2200      	movs	r2, #0
 800b82c:	4650      	mov	r0, sl
 800b82e:	4659      	mov	r1, fp
 800b830:	f7f4 feea 	bl	8000608 <__aeabi_dmul>
 800b834:	4b2d      	ldr	r3, [pc, #180]	; (800b8ec <_dtoa_r+0x624>)
 800b836:	4682      	mov	sl, r0
 800b838:	468b      	mov	fp, r1
 800b83a:	4640      	mov	r0, r8
 800b83c:	4649      	mov	r1, r9
 800b83e:	2200      	movs	r2, #0
 800b840:	f7f4 fee2 	bl	8000608 <__aeabi_dmul>
 800b844:	4680      	mov	r8, r0
 800b846:	4689      	mov	r9, r1
 800b848:	e7c6      	b.n	800b7d8 <_dtoa_r+0x510>
 800b84a:	4650      	mov	r0, sl
 800b84c:	4659      	mov	r1, fp
 800b84e:	f7f4 fedb 	bl	8000608 <__aeabi_dmul>
 800b852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b854:	9d01      	ldr	r5, [sp, #4]
 800b856:	930f      	str	r3, [sp, #60]	; 0x3c
 800b858:	4682      	mov	sl, r0
 800b85a:	468b      	mov	fp, r1
 800b85c:	4649      	mov	r1, r9
 800b85e:	4640      	mov	r0, r8
 800b860:	f7f5 f982 	bl	8000b68 <__aeabi_d2iz>
 800b864:	4606      	mov	r6, r0
 800b866:	f7f4 fe65 	bl	8000534 <__aeabi_i2d>
 800b86a:	3630      	adds	r6, #48	; 0x30
 800b86c:	4602      	mov	r2, r0
 800b86e:	460b      	mov	r3, r1
 800b870:	4640      	mov	r0, r8
 800b872:	4649      	mov	r1, r9
 800b874:	f7f4 fd10 	bl	8000298 <__aeabi_dsub>
 800b878:	f805 6b01 	strb.w	r6, [r5], #1
 800b87c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b87e:	429d      	cmp	r5, r3
 800b880:	4680      	mov	r8, r0
 800b882:	4689      	mov	r9, r1
 800b884:	f04f 0200 	mov.w	r2, #0
 800b888:	d124      	bne.n	800b8d4 <_dtoa_r+0x60c>
 800b88a:	4b1b      	ldr	r3, [pc, #108]	; (800b8f8 <_dtoa_r+0x630>)
 800b88c:	4650      	mov	r0, sl
 800b88e:	4659      	mov	r1, fp
 800b890:	f7f4 fd04 	bl	800029c <__adddf3>
 800b894:	4602      	mov	r2, r0
 800b896:	460b      	mov	r3, r1
 800b898:	4640      	mov	r0, r8
 800b89a:	4649      	mov	r1, r9
 800b89c:	f7f5 f944 	bl	8000b28 <__aeabi_dcmpgt>
 800b8a0:	2800      	cmp	r0, #0
 800b8a2:	d173      	bne.n	800b98c <_dtoa_r+0x6c4>
 800b8a4:	4652      	mov	r2, sl
 800b8a6:	465b      	mov	r3, fp
 800b8a8:	4913      	ldr	r1, [pc, #76]	; (800b8f8 <_dtoa_r+0x630>)
 800b8aa:	2000      	movs	r0, #0
 800b8ac:	f7f4 fcf4 	bl	8000298 <__aeabi_dsub>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	4640      	mov	r0, r8
 800b8b6:	4649      	mov	r1, r9
 800b8b8:	f7f5 f918 	bl	8000aec <__aeabi_dcmplt>
 800b8bc:	2800      	cmp	r0, #0
 800b8be:	f43f af35 	beq.w	800b72c <_dtoa_r+0x464>
 800b8c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b8c4:	1e6b      	subs	r3, r5, #1
 800b8c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b8cc:	2b30      	cmp	r3, #48	; 0x30
 800b8ce:	d0f8      	beq.n	800b8c2 <_dtoa_r+0x5fa>
 800b8d0:	9700      	str	r7, [sp, #0]
 800b8d2:	e049      	b.n	800b968 <_dtoa_r+0x6a0>
 800b8d4:	4b05      	ldr	r3, [pc, #20]	; (800b8ec <_dtoa_r+0x624>)
 800b8d6:	f7f4 fe97 	bl	8000608 <__aeabi_dmul>
 800b8da:	4680      	mov	r8, r0
 800b8dc:	4689      	mov	r9, r1
 800b8de:	e7bd      	b.n	800b85c <_dtoa_r+0x594>
 800b8e0:	0800d840 	.word	0x0800d840
 800b8e4:	0800d818 	.word	0x0800d818
 800b8e8:	3ff00000 	.word	0x3ff00000
 800b8ec:	40240000 	.word	0x40240000
 800b8f0:	401c0000 	.word	0x401c0000
 800b8f4:	40140000 	.word	0x40140000
 800b8f8:	3fe00000 	.word	0x3fe00000
 800b8fc:	9d01      	ldr	r5, [sp, #4]
 800b8fe:	4656      	mov	r6, sl
 800b900:	465f      	mov	r7, fp
 800b902:	4642      	mov	r2, r8
 800b904:	464b      	mov	r3, r9
 800b906:	4630      	mov	r0, r6
 800b908:	4639      	mov	r1, r7
 800b90a:	f7f4 ffa7 	bl	800085c <__aeabi_ddiv>
 800b90e:	f7f5 f92b 	bl	8000b68 <__aeabi_d2iz>
 800b912:	4682      	mov	sl, r0
 800b914:	f7f4 fe0e 	bl	8000534 <__aeabi_i2d>
 800b918:	4642      	mov	r2, r8
 800b91a:	464b      	mov	r3, r9
 800b91c:	f7f4 fe74 	bl	8000608 <__aeabi_dmul>
 800b920:	4602      	mov	r2, r0
 800b922:	460b      	mov	r3, r1
 800b924:	4630      	mov	r0, r6
 800b926:	4639      	mov	r1, r7
 800b928:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b92c:	f7f4 fcb4 	bl	8000298 <__aeabi_dsub>
 800b930:	f805 6b01 	strb.w	r6, [r5], #1
 800b934:	9e01      	ldr	r6, [sp, #4]
 800b936:	9f03      	ldr	r7, [sp, #12]
 800b938:	1bae      	subs	r6, r5, r6
 800b93a:	42b7      	cmp	r7, r6
 800b93c:	4602      	mov	r2, r0
 800b93e:	460b      	mov	r3, r1
 800b940:	d135      	bne.n	800b9ae <_dtoa_r+0x6e6>
 800b942:	f7f4 fcab 	bl	800029c <__adddf3>
 800b946:	4642      	mov	r2, r8
 800b948:	464b      	mov	r3, r9
 800b94a:	4606      	mov	r6, r0
 800b94c:	460f      	mov	r7, r1
 800b94e:	f7f5 f8eb 	bl	8000b28 <__aeabi_dcmpgt>
 800b952:	b9d0      	cbnz	r0, 800b98a <_dtoa_r+0x6c2>
 800b954:	4642      	mov	r2, r8
 800b956:	464b      	mov	r3, r9
 800b958:	4630      	mov	r0, r6
 800b95a:	4639      	mov	r1, r7
 800b95c:	f7f5 f8bc 	bl	8000ad8 <__aeabi_dcmpeq>
 800b960:	b110      	cbz	r0, 800b968 <_dtoa_r+0x6a0>
 800b962:	f01a 0f01 	tst.w	sl, #1
 800b966:	d110      	bne.n	800b98a <_dtoa_r+0x6c2>
 800b968:	4620      	mov	r0, r4
 800b96a:	ee18 1a10 	vmov	r1, s16
 800b96e:	f000 faf3 	bl	800bf58 <_Bfree>
 800b972:	2300      	movs	r3, #0
 800b974:	9800      	ldr	r0, [sp, #0]
 800b976:	702b      	strb	r3, [r5, #0]
 800b978:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b97a:	3001      	adds	r0, #1
 800b97c:	6018      	str	r0, [r3, #0]
 800b97e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b980:	2b00      	cmp	r3, #0
 800b982:	f43f acf1 	beq.w	800b368 <_dtoa_r+0xa0>
 800b986:	601d      	str	r5, [r3, #0]
 800b988:	e4ee      	b.n	800b368 <_dtoa_r+0xa0>
 800b98a:	9f00      	ldr	r7, [sp, #0]
 800b98c:	462b      	mov	r3, r5
 800b98e:	461d      	mov	r5, r3
 800b990:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b994:	2a39      	cmp	r2, #57	; 0x39
 800b996:	d106      	bne.n	800b9a6 <_dtoa_r+0x6de>
 800b998:	9a01      	ldr	r2, [sp, #4]
 800b99a:	429a      	cmp	r2, r3
 800b99c:	d1f7      	bne.n	800b98e <_dtoa_r+0x6c6>
 800b99e:	9901      	ldr	r1, [sp, #4]
 800b9a0:	2230      	movs	r2, #48	; 0x30
 800b9a2:	3701      	adds	r7, #1
 800b9a4:	700a      	strb	r2, [r1, #0]
 800b9a6:	781a      	ldrb	r2, [r3, #0]
 800b9a8:	3201      	adds	r2, #1
 800b9aa:	701a      	strb	r2, [r3, #0]
 800b9ac:	e790      	b.n	800b8d0 <_dtoa_r+0x608>
 800b9ae:	4ba6      	ldr	r3, [pc, #664]	; (800bc48 <_dtoa_r+0x980>)
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	f7f4 fe29 	bl	8000608 <__aeabi_dmul>
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	4606      	mov	r6, r0
 800b9bc:	460f      	mov	r7, r1
 800b9be:	f7f5 f88b 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9c2:	2800      	cmp	r0, #0
 800b9c4:	d09d      	beq.n	800b902 <_dtoa_r+0x63a>
 800b9c6:	e7cf      	b.n	800b968 <_dtoa_r+0x6a0>
 800b9c8:	9a08      	ldr	r2, [sp, #32]
 800b9ca:	2a00      	cmp	r2, #0
 800b9cc:	f000 80d7 	beq.w	800bb7e <_dtoa_r+0x8b6>
 800b9d0:	9a06      	ldr	r2, [sp, #24]
 800b9d2:	2a01      	cmp	r2, #1
 800b9d4:	f300 80ba 	bgt.w	800bb4c <_dtoa_r+0x884>
 800b9d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9da:	2a00      	cmp	r2, #0
 800b9dc:	f000 80b2 	beq.w	800bb44 <_dtoa_r+0x87c>
 800b9e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b9e4:	9e07      	ldr	r6, [sp, #28]
 800b9e6:	9d04      	ldr	r5, [sp, #16]
 800b9e8:	9a04      	ldr	r2, [sp, #16]
 800b9ea:	441a      	add	r2, r3
 800b9ec:	9204      	str	r2, [sp, #16]
 800b9ee:	9a05      	ldr	r2, [sp, #20]
 800b9f0:	2101      	movs	r1, #1
 800b9f2:	441a      	add	r2, r3
 800b9f4:	4620      	mov	r0, r4
 800b9f6:	9205      	str	r2, [sp, #20]
 800b9f8:	f000 fb66 	bl	800c0c8 <__i2b>
 800b9fc:	4607      	mov	r7, r0
 800b9fe:	2d00      	cmp	r5, #0
 800ba00:	dd0c      	ble.n	800ba1c <_dtoa_r+0x754>
 800ba02:	9b05      	ldr	r3, [sp, #20]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	dd09      	ble.n	800ba1c <_dtoa_r+0x754>
 800ba08:	42ab      	cmp	r3, r5
 800ba0a:	9a04      	ldr	r2, [sp, #16]
 800ba0c:	bfa8      	it	ge
 800ba0e:	462b      	movge	r3, r5
 800ba10:	1ad2      	subs	r2, r2, r3
 800ba12:	9204      	str	r2, [sp, #16]
 800ba14:	9a05      	ldr	r2, [sp, #20]
 800ba16:	1aed      	subs	r5, r5, r3
 800ba18:	1ad3      	subs	r3, r2, r3
 800ba1a:	9305      	str	r3, [sp, #20]
 800ba1c:	9b07      	ldr	r3, [sp, #28]
 800ba1e:	b31b      	cbz	r3, 800ba68 <_dtoa_r+0x7a0>
 800ba20:	9b08      	ldr	r3, [sp, #32]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	f000 80af 	beq.w	800bb86 <_dtoa_r+0x8be>
 800ba28:	2e00      	cmp	r6, #0
 800ba2a:	dd13      	ble.n	800ba54 <_dtoa_r+0x78c>
 800ba2c:	4639      	mov	r1, r7
 800ba2e:	4632      	mov	r2, r6
 800ba30:	4620      	mov	r0, r4
 800ba32:	f000 fc09 	bl	800c248 <__pow5mult>
 800ba36:	ee18 2a10 	vmov	r2, s16
 800ba3a:	4601      	mov	r1, r0
 800ba3c:	4607      	mov	r7, r0
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f000 fb58 	bl	800c0f4 <__multiply>
 800ba44:	ee18 1a10 	vmov	r1, s16
 800ba48:	4680      	mov	r8, r0
 800ba4a:	4620      	mov	r0, r4
 800ba4c:	f000 fa84 	bl	800bf58 <_Bfree>
 800ba50:	ee08 8a10 	vmov	s16, r8
 800ba54:	9b07      	ldr	r3, [sp, #28]
 800ba56:	1b9a      	subs	r2, r3, r6
 800ba58:	d006      	beq.n	800ba68 <_dtoa_r+0x7a0>
 800ba5a:	ee18 1a10 	vmov	r1, s16
 800ba5e:	4620      	mov	r0, r4
 800ba60:	f000 fbf2 	bl	800c248 <__pow5mult>
 800ba64:	ee08 0a10 	vmov	s16, r0
 800ba68:	2101      	movs	r1, #1
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	f000 fb2c 	bl	800c0c8 <__i2b>
 800ba70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	4606      	mov	r6, r0
 800ba76:	f340 8088 	ble.w	800bb8a <_dtoa_r+0x8c2>
 800ba7a:	461a      	mov	r2, r3
 800ba7c:	4601      	mov	r1, r0
 800ba7e:	4620      	mov	r0, r4
 800ba80:	f000 fbe2 	bl	800c248 <__pow5mult>
 800ba84:	9b06      	ldr	r3, [sp, #24]
 800ba86:	2b01      	cmp	r3, #1
 800ba88:	4606      	mov	r6, r0
 800ba8a:	f340 8081 	ble.w	800bb90 <_dtoa_r+0x8c8>
 800ba8e:	f04f 0800 	mov.w	r8, #0
 800ba92:	6933      	ldr	r3, [r6, #16]
 800ba94:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ba98:	6918      	ldr	r0, [r3, #16]
 800ba9a:	f000 fac5 	bl	800c028 <__hi0bits>
 800ba9e:	f1c0 0020 	rsb	r0, r0, #32
 800baa2:	9b05      	ldr	r3, [sp, #20]
 800baa4:	4418      	add	r0, r3
 800baa6:	f010 001f 	ands.w	r0, r0, #31
 800baaa:	f000 8092 	beq.w	800bbd2 <_dtoa_r+0x90a>
 800baae:	f1c0 0320 	rsb	r3, r0, #32
 800bab2:	2b04      	cmp	r3, #4
 800bab4:	f340 808a 	ble.w	800bbcc <_dtoa_r+0x904>
 800bab8:	f1c0 001c 	rsb	r0, r0, #28
 800babc:	9b04      	ldr	r3, [sp, #16]
 800babe:	4403      	add	r3, r0
 800bac0:	9304      	str	r3, [sp, #16]
 800bac2:	9b05      	ldr	r3, [sp, #20]
 800bac4:	4403      	add	r3, r0
 800bac6:	4405      	add	r5, r0
 800bac8:	9305      	str	r3, [sp, #20]
 800baca:	9b04      	ldr	r3, [sp, #16]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	dd07      	ble.n	800bae0 <_dtoa_r+0x818>
 800bad0:	ee18 1a10 	vmov	r1, s16
 800bad4:	461a      	mov	r2, r3
 800bad6:	4620      	mov	r0, r4
 800bad8:	f000 fc10 	bl	800c2fc <__lshift>
 800badc:	ee08 0a10 	vmov	s16, r0
 800bae0:	9b05      	ldr	r3, [sp, #20]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	dd05      	ble.n	800baf2 <_dtoa_r+0x82a>
 800bae6:	4631      	mov	r1, r6
 800bae8:	461a      	mov	r2, r3
 800baea:	4620      	mov	r0, r4
 800baec:	f000 fc06 	bl	800c2fc <__lshift>
 800baf0:	4606      	mov	r6, r0
 800baf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d06e      	beq.n	800bbd6 <_dtoa_r+0x90e>
 800baf8:	ee18 0a10 	vmov	r0, s16
 800bafc:	4631      	mov	r1, r6
 800bafe:	f000 fc6d 	bl	800c3dc <__mcmp>
 800bb02:	2800      	cmp	r0, #0
 800bb04:	da67      	bge.n	800bbd6 <_dtoa_r+0x90e>
 800bb06:	9b00      	ldr	r3, [sp, #0]
 800bb08:	3b01      	subs	r3, #1
 800bb0a:	ee18 1a10 	vmov	r1, s16
 800bb0e:	9300      	str	r3, [sp, #0]
 800bb10:	220a      	movs	r2, #10
 800bb12:	2300      	movs	r3, #0
 800bb14:	4620      	mov	r0, r4
 800bb16:	f000 fa41 	bl	800bf9c <__multadd>
 800bb1a:	9b08      	ldr	r3, [sp, #32]
 800bb1c:	ee08 0a10 	vmov	s16, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	f000 81b1 	beq.w	800be88 <_dtoa_r+0xbc0>
 800bb26:	2300      	movs	r3, #0
 800bb28:	4639      	mov	r1, r7
 800bb2a:	220a      	movs	r2, #10
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	f000 fa35 	bl	800bf9c <__multadd>
 800bb32:	9b02      	ldr	r3, [sp, #8]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	4607      	mov	r7, r0
 800bb38:	f300 808e 	bgt.w	800bc58 <_dtoa_r+0x990>
 800bb3c:	9b06      	ldr	r3, [sp, #24]
 800bb3e:	2b02      	cmp	r3, #2
 800bb40:	dc51      	bgt.n	800bbe6 <_dtoa_r+0x91e>
 800bb42:	e089      	b.n	800bc58 <_dtoa_r+0x990>
 800bb44:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb46:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bb4a:	e74b      	b.n	800b9e4 <_dtoa_r+0x71c>
 800bb4c:	9b03      	ldr	r3, [sp, #12]
 800bb4e:	1e5e      	subs	r6, r3, #1
 800bb50:	9b07      	ldr	r3, [sp, #28]
 800bb52:	42b3      	cmp	r3, r6
 800bb54:	bfbf      	itttt	lt
 800bb56:	9b07      	ldrlt	r3, [sp, #28]
 800bb58:	9607      	strlt	r6, [sp, #28]
 800bb5a:	1af2      	sublt	r2, r6, r3
 800bb5c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bb5e:	bfb6      	itet	lt
 800bb60:	189b      	addlt	r3, r3, r2
 800bb62:	1b9e      	subge	r6, r3, r6
 800bb64:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bb66:	9b03      	ldr	r3, [sp, #12]
 800bb68:	bfb8      	it	lt
 800bb6a:	2600      	movlt	r6, #0
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	bfb7      	itett	lt
 800bb70:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bb74:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bb78:	1a9d      	sublt	r5, r3, r2
 800bb7a:	2300      	movlt	r3, #0
 800bb7c:	e734      	b.n	800b9e8 <_dtoa_r+0x720>
 800bb7e:	9e07      	ldr	r6, [sp, #28]
 800bb80:	9d04      	ldr	r5, [sp, #16]
 800bb82:	9f08      	ldr	r7, [sp, #32]
 800bb84:	e73b      	b.n	800b9fe <_dtoa_r+0x736>
 800bb86:	9a07      	ldr	r2, [sp, #28]
 800bb88:	e767      	b.n	800ba5a <_dtoa_r+0x792>
 800bb8a:	9b06      	ldr	r3, [sp, #24]
 800bb8c:	2b01      	cmp	r3, #1
 800bb8e:	dc18      	bgt.n	800bbc2 <_dtoa_r+0x8fa>
 800bb90:	f1ba 0f00 	cmp.w	sl, #0
 800bb94:	d115      	bne.n	800bbc2 <_dtoa_r+0x8fa>
 800bb96:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bb9a:	b993      	cbnz	r3, 800bbc2 <_dtoa_r+0x8fa>
 800bb9c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bba0:	0d1b      	lsrs	r3, r3, #20
 800bba2:	051b      	lsls	r3, r3, #20
 800bba4:	b183      	cbz	r3, 800bbc8 <_dtoa_r+0x900>
 800bba6:	9b04      	ldr	r3, [sp, #16]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	9304      	str	r3, [sp, #16]
 800bbac:	9b05      	ldr	r3, [sp, #20]
 800bbae:	3301      	adds	r3, #1
 800bbb0:	9305      	str	r3, [sp, #20]
 800bbb2:	f04f 0801 	mov.w	r8, #1
 800bbb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f47f af6a 	bne.w	800ba92 <_dtoa_r+0x7ca>
 800bbbe:	2001      	movs	r0, #1
 800bbc0:	e76f      	b.n	800baa2 <_dtoa_r+0x7da>
 800bbc2:	f04f 0800 	mov.w	r8, #0
 800bbc6:	e7f6      	b.n	800bbb6 <_dtoa_r+0x8ee>
 800bbc8:	4698      	mov	r8, r3
 800bbca:	e7f4      	b.n	800bbb6 <_dtoa_r+0x8ee>
 800bbcc:	f43f af7d 	beq.w	800baca <_dtoa_r+0x802>
 800bbd0:	4618      	mov	r0, r3
 800bbd2:	301c      	adds	r0, #28
 800bbd4:	e772      	b.n	800babc <_dtoa_r+0x7f4>
 800bbd6:	9b03      	ldr	r3, [sp, #12]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	dc37      	bgt.n	800bc4c <_dtoa_r+0x984>
 800bbdc:	9b06      	ldr	r3, [sp, #24]
 800bbde:	2b02      	cmp	r3, #2
 800bbe0:	dd34      	ble.n	800bc4c <_dtoa_r+0x984>
 800bbe2:	9b03      	ldr	r3, [sp, #12]
 800bbe4:	9302      	str	r3, [sp, #8]
 800bbe6:	9b02      	ldr	r3, [sp, #8]
 800bbe8:	b96b      	cbnz	r3, 800bc06 <_dtoa_r+0x93e>
 800bbea:	4631      	mov	r1, r6
 800bbec:	2205      	movs	r2, #5
 800bbee:	4620      	mov	r0, r4
 800bbf0:	f000 f9d4 	bl	800bf9c <__multadd>
 800bbf4:	4601      	mov	r1, r0
 800bbf6:	4606      	mov	r6, r0
 800bbf8:	ee18 0a10 	vmov	r0, s16
 800bbfc:	f000 fbee 	bl	800c3dc <__mcmp>
 800bc00:	2800      	cmp	r0, #0
 800bc02:	f73f adbb 	bgt.w	800b77c <_dtoa_r+0x4b4>
 800bc06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc08:	9d01      	ldr	r5, [sp, #4]
 800bc0a:	43db      	mvns	r3, r3
 800bc0c:	9300      	str	r3, [sp, #0]
 800bc0e:	f04f 0800 	mov.w	r8, #0
 800bc12:	4631      	mov	r1, r6
 800bc14:	4620      	mov	r0, r4
 800bc16:	f000 f99f 	bl	800bf58 <_Bfree>
 800bc1a:	2f00      	cmp	r7, #0
 800bc1c:	f43f aea4 	beq.w	800b968 <_dtoa_r+0x6a0>
 800bc20:	f1b8 0f00 	cmp.w	r8, #0
 800bc24:	d005      	beq.n	800bc32 <_dtoa_r+0x96a>
 800bc26:	45b8      	cmp	r8, r7
 800bc28:	d003      	beq.n	800bc32 <_dtoa_r+0x96a>
 800bc2a:	4641      	mov	r1, r8
 800bc2c:	4620      	mov	r0, r4
 800bc2e:	f000 f993 	bl	800bf58 <_Bfree>
 800bc32:	4639      	mov	r1, r7
 800bc34:	4620      	mov	r0, r4
 800bc36:	f000 f98f 	bl	800bf58 <_Bfree>
 800bc3a:	e695      	b.n	800b968 <_dtoa_r+0x6a0>
 800bc3c:	2600      	movs	r6, #0
 800bc3e:	4637      	mov	r7, r6
 800bc40:	e7e1      	b.n	800bc06 <_dtoa_r+0x93e>
 800bc42:	9700      	str	r7, [sp, #0]
 800bc44:	4637      	mov	r7, r6
 800bc46:	e599      	b.n	800b77c <_dtoa_r+0x4b4>
 800bc48:	40240000 	.word	0x40240000
 800bc4c:	9b08      	ldr	r3, [sp, #32]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	f000 80ca 	beq.w	800bde8 <_dtoa_r+0xb20>
 800bc54:	9b03      	ldr	r3, [sp, #12]
 800bc56:	9302      	str	r3, [sp, #8]
 800bc58:	2d00      	cmp	r5, #0
 800bc5a:	dd05      	ble.n	800bc68 <_dtoa_r+0x9a0>
 800bc5c:	4639      	mov	r1, r7
 800bc5e:	462a      	mov	r2, r5
 800bc60:	4620      	mov	r0, r4
 800bc62:	f000 fb4b 	bl	800c2fc <__lshift>
 800bc66:	4607      	mov	r7, r0
 800bc68:	f1b8 0f00 	cmp.w	r8, #0
 800bc6c:	d05b      	beq.n	800bd26 <_dtoa_r+0xa5e>
 800bc6e:	6879      	ldr	r1, [r7, #4]
 800bc70:	4620      	mov	r0, r4
 800bc72:	f000 f931 	bl	800bed8 <_Balloc>
 800bc76:	4605      	mov	r5, r0
 800bc78:	b928      	cbnz	r0, 800bc86 <_dtoa_r+0x9be>
 800bc7a:	4b87      	ldr	r3, [pc, #540]	; (800be98 <_dtoa_r+0xbd0>)
 800bc7c:	4602      	mov	r2, r0
 800bc7e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bc82:	f7ff bb3b 	b.w	800b2fc <_dtoa_r+0x34>
 800bc86:	693a      	ldr	r2, [r7, #16]
 800bc88:	3202      	adds	r2, #2
 800bc8a:	0092      	lsls	r2, r2, #2
 800bc8c:	f107 010c 	add.w	r1, r7, #12
 800bc90:	300c      	adds	r0, #12
 800bc92:	f000 f913 	bl	800bebc <memcpy>
 800bc96:	2201      	movs	r2, #1
 800bc98:	4629      	mov	r1, r5
 800bc9a:	4620      	mov	r0, r4
 800bc9c:	f000 fb2e 	bl	800c2fc <__lshift>
 800bca0:	9b01      	ldr	r3, [sp, #4]
 800bca2:	f103 0901 	add.w	r9, r3, #1
 800bca6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bcaa:	4413      	add	r3, r2
 800bcac:	9305      	str	r3, [sp, #20]
 800bcae:	f00a 0301 	and.w	r3, sl, #1
 800bcb2:	46b8      	mov	r8, r7
 800bcb4:	9304      	str	r3, [sp, #16]
 800bcb6:	4607      	mov	r7, r0
 800bcb8:	4631      	mov	r1, r6
 800bcba:	ee18 0a10 	vmov	r0, s16
 800bcbe:	f7ff fa75 	bl	800b1ac <quorem>
 800bcc2:	4641      	mov	r1, r8
 800bcc4:	9002      	str	r0, [sp, #8]
 800bcc6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bcca:	ee18 0a10 	vmov	r0, s16
 800bcce:	f000 fb85 	bl	800c3dc <__mcmp>
 800bcd2:	463a      	mov	r2, r7
 800bcd4:	9003      	str	r0, [sp, #12]
 800bcd6:	4631      	mov	r1, r6
 800bcd8:	4620      	mov	r0, r4
 800bcda:	f000 fb9b 	bl	800c414 <__mdiff>
 800bcde:	68c2      	ldr	r2, [r0, #12]
 800bce0:	f109 3bff 	add.w	fp, r9, #4294967295
 800bce4:	4605      	mov	r5, r0
 800bce6:	bb02      	cbnz	r2, 800bd2a <_dtoa_r+0xa62>
 800bce8:	4601      	mov	r1, r0
 800bcea:	ee18 0a10 	vmov	r0, s16
 800bcee:	f000 fb75 	bl	800c3dc <__mcmp>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	4629      	mov	r1, r5
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	9207      	str	r2, [sp, #28]
 800bcfa:	f000 f92d 	bl	800bf58 <_Bfree>
 800bcfe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bd02:	ea43 0102 	orr.w	r1, r3, r2
 800bd06:	9b04      	ldr	r3, [sp, #16]
 800bd08:	430b      	orrs	r3, r1
 800bd0a:	464d      	mov	r5, r9
 800bd0c:	d10f      	bne.n	800bd2e <_dtoa_r+0xa66>
 800bd0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd12:	d02a      	beq.n	800bd6a <_dtoa_r+0xaa2>
 800bd14:	9b03      	ldr	r3, [sp, #12]
 800bd16:	2b00      	cmp	r3, #0
 800bd18:	dd02      	ble.n	800bd20 <_dtoa_r+0xa58>
 800bd1a:	9b02      	ldr	r3, [sp, #8]
 800bd1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bd20:	f88b a000 	strb.w	sl, [fp]
 800bd24:	e775      	b.n	800bc12 <_dtoa_r+0x94a>
 800bd26:	4638      	mov	r0, r7
 800bd28:	e7ba      	b.n	800bca0 <_dtoa_r+0x9d8>
 800bd2a:	2201      	movs	r2, #1
 800bd2c:	e7e2      	b.n	800bcf4 <_dtoa_r+0xa2c>
 800bd2e:	9b03      	ldr	r3, [sp, #12]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	db04      	blt.n	800bd3e <_dtoa_r+0xa76>
 800bd34:	9906      	ldr	r1, [sp, #24]
 800bd36:	430b      	orrs	r3, r1
 800bd38:	9904      	ldr	r1, [sp, #16]
 800bd3a:	430b      	orrs	r3, r1
 800bd3c:	d122      	bne.n	800bd84 <_dtoa_r+0xabc>
 800bd3e:	2a00      	cmp	r2, #0
 800bd40:	ddee      	ble.n	800bd20 <_dtoa_r+0xa58>
 800bd42:	ee18 1a10 	vmov	r1, s16
 800bd46:	2201      	movs	r2, #1
 800bd48:	4620      	mov	r0, r4
 800bd4a:	f000 fad7 	bl	800c2fc <__lshift>
 800bd4e:	4631      	mov	r1, r6
 800bd50:	ee08 0a10 	vmov	s16, r0
 800bd54:	f000 fb42 	bl	800c3dc <__mcmp>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	dc03      	bgt.n	800bd64 <_dtoa_r+0xa9c>
 800bd5c:	d1e0      	bne.n	800bd20 <_dtoa_r+0xa58>
 800bd5e:	f01a 0f01 	tst.w	sl, #1
 800bd62:	d0dd      	beq.n	800bd20 <_dtoa_r+0xa58>
 800bd64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd68:	d1d7      	bne.n	800bd1a <_dtoa_r+0xa52>
 800bd6a:	2339      	movs	r3, #57	; 0x39
 800bd6c:	f88b 3000 	strb.w	r3, [fp]
 800bd70:	462b      	mov	r3, r5
 800bd72:	461d      	mov	r5, r3
 800bd74:	3b01      	subs	r3, #1
 800bd76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bd7a:	2a39      	cmp	r2, #57	; 0x39
 800bd7c:	d071      	beq.n	800be62 <_dtoa_r+0xb9a>
 800bd7e:	3201      	adds	r2, #1
 800bd80:	701a      	strb	r2, [r3, #0]
 800bd82:	e746      	b.n	800bc12 <_dtoa_r+0x94a>
 800bd84:	2a00      	cmp	r2, #0
 800bd86:	dd07      	ble.n	800bd98 <_dtoa_r+0xad0>
 800bd88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd8c:	d0ed      	beq.n	800bd6a <_dtoa_r+0xaa2>
 800bd8e:	f10a 0301 	add.w	r3, sl, #1
 800bd92:	f88b 3000 	strb.w	r3, [fp]
 800bd96:	e73c      	b.n	800bc12 <_dtoa_r+0x94a>
 800bd98:	9b05      	ldr	r3, [sp, #20]
 800bd9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bd9e:	4599      	cmp	r9, r3
 800bda0:	d047      	beq.n	800be32 <_dtoa_r+0xb6a>
 800bda2:	ee18 1a10 	vmov	r1, s16
 800bda6:	2300      	movs	r3, #0
 800bda8:	220a      	movs	r2, #10
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f000 f8f6 	bl	800bf9c <__multadd>
 800bdb0:	45b8      	cmp	r8, r7
 800bdb2:	ee08 0a10 	vmov	s16, r0
 800bdb6:	f04f 0300 	mov.w	r3, #0
 800bdba:	f04f 020a 	mov.w	r2, #10
 800bdbe:	4641      	mov	r1, r8
 800bdc0:	4620      	mov	r0, r4
 800bdc2:	d106      	bne.n	800bdd2 <_dtoa_r+0xb0a>
 800bdc4:	f000 f8ea 	bl	800bf9c <__multadd>
 800bdc8:	4680      	mov	r8, r0
 800bdca:	4607      	mov	r7, r0
 800bdcc:	f109 0901 	add.w	r9, r9, #1
 800bdd0:	e772      	b.n	800bcb8 <_dtoa_r+0x9f0>
 800bdd2:	f000 f8e3 	bl	800bf9c <__multadd>
 800bdd6:	4639      	mov	r1, r7
 800bdd8:	4680      	mov	r8, r0
 800bdda:	2300      	movs	r3, #0
 800bddc:	220a      	movs	r2, #10
 800bdde:	4620      	mov	r0, r4
 800bde0:	f000 f8dc 	bl	800bf9c <__multadd>
 800bde4:	4607      	mov	r7, r0
 800bde6:	e7f1      	b.n	800bdcc <_dtoa_r+0xb04>
 800bde8:	9b03      	ldr	r3, [sp, #12]
 800bdea:	9302      	str	r3, [sp, #8]
 800bdec:	9d01      	ldr	r5, [sp, #4]
 800bdee:	ee18 0a10 	vmov	r0, s16
 800bdf2:	4631      	mov	r1, r6
 800bdf4:	f7ff f9da 	bl	800b1ac <quorem>
 800bdf8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bdfc:	9b01      	ldr	r3, [sp, #4]
 800bdfe:	f805 ab01 	strb.w	sl, [r5], #1
 800be02:	1aea      	subs	r2, r5, r3
 800be04:	9b02      	ldr	r3, [sp, #8]
 800be06:	4293      	cmp	r3, r2
 800be08:	dd09      	ble.n	800be1e <_dtoa_r+0xb56>
 800be0a:	ee18 1a10 	vmov	r1, s16
 800be0e:	2300      	movs	r3, #0
 800be10:	220a      	movs	r2, #10
 800be12:	4620      	mov	r0, r4
 800be14:	f000 f8c2 	bl	800bf9c <__multadd>
 800be18:	ee08 0a10 	vmov	s16, r0
 800be1c:	e7e7      	b.n	800bdee <_dtoa_r+0xb26>
 800be1e:	9b02      	ldr	r3, [sp, #8]
 800be20:	2b00      	cmp	r3, #0
 800be22:	bfc8      	it	gt
 800be24:	461d      	movgt	r5, r3
 800be26:	9b01      	ldr	r3, [sp, #4]
 800be28:	bfd8      	it	le
 800be2a:	2501      	movle	r5, #1
 800be2c:	441d      	add	r5, r3
 800be2e:	f04f 0800 	mov.w	r8, #0
 800be32:	ee18 1a10 	vmov	r1, s16
 800be36:	2201      	movs	r2, #1
 800be38:	4620      	mov	r0, r4
 800be3a:	f000 fa5f 	bl	800c2fc <__lshift>
 800be3e:	4631      	mov	r1, r6
 800be40:	ee08 0a10 	vmov	s16, r0
 800be44:	f000 faca 	bl	800c3dc <__mcmp>
 800be48:	2800      	cmp	r0, #0
 800be4a:	dc91      	bgt.n	800bd70 <_dtoa_r+0xaa8>
 800be4c:	d102      	bne.n	800be54 <_dtoa_r+0xb8c>
 800be4e:	f01a 0f01 	tst.w	sl, #1
 800be52:	d18d      	bne.n	800bd70 <_dtoa_r+0xaa8>
 800be54:	462b      	mov	r3, r5
 800be56:	461d      	mov	r5, r3
 800be58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be5c:	2a30      	cmp	r2, #48	; 0x30
 800be5e:	d0fa      	beq.n	800be56 <_dtoa_r+0xb8e>
 800be60:	e6d7      	b.n	800bc12 <_dtoa_r+0x94a>
 800be62:	9a01      	ldr	r2, [sp, #4]
 800be64:	429a      	cmp	r2, r3
 800be66:	d184      	bne.n	800bd72 <_dtoa_r+0xaaa>
 800be68:	9b00      	ldr	r3, [sp, #0]
 800be6a:	3301      	adds	r3, #1
 800be6c:	9300      	str	r3, [sp, #0]
 800be6e:	2331      	movs	r3, #49	; 0x31
 800be70:	7013      	strb	r3, [r2, #0]
 800be72:	e6ce      	b.n	800bc12 <_dtoa_r+0x94a>
 800be74:	4b09      	ldr	r3, [pc, #36]	; (800be9c <_dtoa_r+0xbd4>)
 800be76:	f7ff ba95 	b.w	800b3a4 <_dtoa_r+0xdc>
 800be7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	f47f aa6e 	bne.w	800b35e <_dtoa_r+0x96>
 800be82:	4b07      	ldr	r3, [pc, #28]	; (800bea0 <_dtoa_r+0xbd8>)
 800be84:	f7ff ba8e 	b.w	800b3a4 <_dtoa_r+0xdc>
 800be88:	9b02      	ldr	r3, [sp, #8]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	dcae      	bgt.n	800bdec <_dtoa_r+0xb24>
 800be8e:	9b06      	ldr	r3, [sp, #24]
 800be90:	2b02      	cmp	r3, #2
 800be92:	f73f aea8 	bgt.w	800bbe6 <_dtoa_r+0x91e>
 800be96:	e7a9      	b.n	800bdec <_dtoa_r+0xb24>
 800be98:	0800d7a7 	.word	0x0800d7a7
 800be9c:	0800d704 	.word	0x0800d704
 800bea0:	0800d728 	.word	0x0800d728

0800bea4 <_localeconv_r>:
 800bea4:	4800      	ldr	r0, [pc, #0]	; (800bea8 <_localeconv_r+0x4>)
 800bea6:	4770      	bx	lr
 800bea8:	20000290 	.word	0x20000290

0800beac <malloc>:
 800beac:	4b02      	ldr	r3, [pc, #8]	; (800beb8 <malloc+0xc>)
 800beae:	4601      	mov	r1, r0
 800beb0:	6818      	ldr	r0, [r3, #0]
 800beb2:	f000 bc17 	b.w	800c6e4 <_malloc_r>
 800beb6:	bf00      	nop
 800beb8:	2000013c 	.word	0x2000013c

0800bebc <memcpy>:
 800bebc:	440a      	add	r2, r1
 800bebe:	4291      	cmp	r1, r2
 800bec0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bec4:	d100      	bne.n	800bec8 <memcpy+0xc>
 800bec6:	4770      	bx	lr
 800bec8:	b510      	push	{r4, lr}
 800beca:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bece:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bed2:	4291      	cmp	r1, r2
 800bed4:	d1f9      	bne.n	800beca <memcpy+0xe>
 800bed6:	bd10      	pop	{r4, pc}

0800bed8 <_Balloc>:
 800bed8:	b570      	push	{r4, r5, r6, lr}
 800beda:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bedc:	4604      	mov	r4, r0
 800bede:	460d      	mov	r5, r1
 800bee0:	b976      	cbnz	r6, 800bf00 <_Balloc+0x28>
 800bee2:	2010      	movs	r0, #16
 800bee4:	f7ff ffe2 	bl	800beac <malloc>
 800bee8:	4602      	mov	r2, r0
 800beea:	6260      	str	r0, [r4, #36]	; 0x24
 800beec:	b920      	cbnz	r0, 800bef8 <_Balloc+0x20>
 800beee:	4b18      	ldr	r3, [pc, #96]	; (800bf50 <_Balloc+0x78>)
 800bef0:	4818      	ldr	r0, [pc, #96]	; (800bf54 <_Balloc+0x7c>)
 800bef2:	2166      	movs	r1, #102	; 0x66
 800bef4:	f000 fdd6 	bl	800caa4 <__assert_func>
 800bef8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800befc:	6006      	str	r6, [r0, #0]
 800befe:	60c6      	str	r6, [r0, #12]
 800bf00:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf02:	68f3      	ldr	r3, [r6, #12]
 800bf04:	b183      	cbz	r3, 800bf28 <_Balloc+0x50>
 800bf06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf08:	68db      	ldr	r3, [r3, #12]
 800bf0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf0e:	b9b8      	cbnz	r0, 800bf40 <_Balloc+0x68>
 800bf10:	2101      	movs	r1, #1
 800bf12:	fa01 f605 	lsl.w	r6, r1, r5
 800bf16:	1d72      	adds	r2, r6, #5
 800bf18:	0092      	lsls	r2, r2, #2
 800bf1a:	4620      	mov	r0, r4
 800bf1c:	f000 fb60 	bl	800c5e0 <_calloc_r>
 800bf20:	b160      	cbz	r0, 800bf3c <_Balloc+0x64>
 800bf22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf26:	e00e      	b.n	800bf46 <_Balloc+0x6e>
 800bf28:	2221      	movs	r2, #33	; 0x21
 800bf2a:	2104      	movs	r1, #4
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f000 fb57 	bl	800c5e0 <_calloc_r>
 800bf32:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf34:	60f0      	str	r0, [r6, #12]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d1e4      	bne.n	800bf06 <_Balloc+0x2e>
 800bf3c:	2000      	movs	r0, #0
 800bf3e:	bd70      	pop	{r4, r5, r6, pc}
 800bf40:	6802      	ldr	r2, [r0, #0]
 800bf42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf46:	2300      	movs	r3, #0
 800bf48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf4c:	e7f7      	b.n	800bf3e <_Balloc+0x66>
 800bf4e:	bf00      	nop
 800bf50:	0800d735 	.word	0x0800d735
 800bf54:	0800d7b8 	.word	0x0800d7b8

0800bf58 <_Bfree>:
 800bf58:	b570      	push	{r4, r5, r6, lr}
 800bf5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf5c:	4605      	mov	r5, r0
 800bf5e:	460c      	mov	r4, r1
 800bf60:	b976      	cbnz	r6, 800bf80 <_Bfree+0x28>
 800bf62:	2010      	movs	r0, #16
 800bf64:	f7ff ffa2 	bl	800beac <malloc>
 800bf68:	4602      	mov	r2, r0
 800bf6a:	6268      	str	r0, [r5, #36]	; 0x24
 800bf6c:	b920      	cbnz	r0, 800bf78 <_Bfree+0x20>
 800bf6e:	4b09      	ldr	r3, [pc, #36]	; (800bf94 <_Bfree+0x3c>)
 800bf70:	4809      	ldr	r0, [pc, #36]	; (800bf98 <_Bfree+0x40>)
 800bf72:	218a      	movs	r1, #138	; 0x8a
 800bf74:	f000 fd96 	bl	800caa4 <__assert_func>
 800bf78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf7c:	6006      	str	r6, [r0, #0]
 800bf7e:	60c6      	str	r6, [r0, #12]
 800bf80:	b13c      	cbz	r4, 800bf92 <_Bfree+0x3a>
 800bf82:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bf84:	6862      	ldr	r2, [r4, #4]
 800bf86:	68db      	ldr	r3, [r3, #12]
 800bf88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bf8c:	6021      	str	r1, [r4, #0]
 800bf8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bf92:	bd70      	pop	{r4, r5, r6, pc}
 800bf94:	0800d735 	.word	0x0800d735
 800bf98:	0800d7b8 	.word	0x0800d7b8

0800bf9c <__multadd>:
 800bf9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa0:	690d      	ldr	r5, [r1, #16]
 800bfa2:	4607      	mov	r7, r0
 800bfa4:	460c      	mov	r4, r1
 800bfa6:	461e      	mov	r6, r3
 800bfa8:	f101 0c14 	add.w	ip, r1, #20
 800bfac:	2000      	movs	r0, #0
 800bfae:	f8dc 3000 	ldr.w	r3, [ip]
 800bfb2:	b299      	uxth	r1, r3
 800bfb4:	fb02 6101 	mla	r1, r2, r1, r6
 800bfb8:	0c1e      	lsrs	r6, r3, #16
 800bfba:	0c0b      	lsrs	r3, r1, #16
 800bfbc:	fb02 3306 	mla	r3, r2, r6, r3
 800bfc0:	b289      	uxth	r1, r1
 800bfc2:	3001      	adds	r0, #1
 800bfc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bfc8:	4285      	cmp	r5, r0
 800bfca:	f84c 1b04 	str.w	r1, [ip], #4
 800bfce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bfd2:	dcec      	bgt.n	800bfae <__multadd+0x12>
 800bfd4:	b30e      	cbz	r6, 800c01a <__multadd+0x7e>
 800bfd6:	68a3      	ldr	r3, [r4, #8]
 800bfd8:	42ab      	cmp	r3, r5
 800bfda:	dc19      	bgt.n	800c010 <__multadd+0x74>
 800bfdc:	6861      	ldr	r1, [r4, #4]
 800bfde:	4638      	mov	r0, r7
 800bfe0:	3101      	adds	r1, #1
 800bfe2:	f7ff ff79 	bl	800bed8 <_Balloc>
 800bfe6:	4680      	mov	r8, r0
 800bfe8:	b928      	cbnz	r0, 800bff6 <__multadd+0x5a>
 800bfea:	4602      	mov	r2, r0
 800bfec:	4b0c      	ldr	r3, [pc, #48]	; (800c020 <__multadd+0x84>)
 800bfee:	480d      	ldr	r0, [pc, #52]	; (800c024 <__multadd+0x88>)
 800bff0:	21b5      	movs	r1, #181	; 0xb5
 800bff2:	f000 fd57 	bl	800caa4 <__assert_func>
 800bff6:	6922      	ldr	r2, [r4, #16]
 800bff8:	3202      	adds	r2, #2
 800bffa:	f104 010c 	add.w	r1, r4, #12
 800bffe:	0092      	lsls	r2, r2, #2
 800c000:	300c      	adds	r0, #12
 800c002:	f7ff ff5b 	bl	800bebc <memcpy>
 800c006:	4621      	mov	r1, r4
 800c008:	4638      	mov	r0, r7
 800c00a:	f7ff ffa5 	bl	800bf58 <_Bfree>
 800c00e:	4644      	mov	r4, r8
 800c010:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c014:	3501      	adds	r5, #1
 800c016:	615e      	str	r6, [r3, #20]
 800c018:	6125      	str	r5, [r4, #16]
 800c01a:	4620      	mov	r0, r4
 800c01c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c020:	0800d7a7 	.word	0x0800d7a7
 800c024:	0800d7b8 	.word	0x0800d7b8

0800c028 <__hi0bits>:
 800c028:	0c03      	lsrs	r3, r0, #16
 800c02a:	041b      	lsls	r3, r3, #16
 800c02c:	b9d3      	cbnz	r3, 800c064 <__hi0bits+0x3c>
 800c02e:	0400      	lsls	r0, r0, #16
 800c030:	2310      	movs	r3, #16
 800c032:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c036:	bf04      	itt	eq
 800c038:	0200      	lsleq	r0, r0, #8
 800c03a:	3308      	addeq	r3, #8
 800c03c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c040:	bf04      	itt	eq
 800c042:	0100      	lsleq	r0, r0, #4
 800c044:	3304      	addeq	r3, #4
 800c046:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c04a:	bf04      	itt	eq
 800c04c:	0080      	lsleq	r0, r0, #2
 800c04e:	3302      	addeq	r3, #2
 800c050:	2800      	cmp	r0, #0
 800c052:	db05      	blt.n	800c060 <__hi0bits+0x38>
 800c054:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c058:	f103 0301 	add.w	r3, r3, #1
 800c05c:	bf08      	it	eq
 800c05e:	2320      	moveq	r3, #32
 800c060:	4618      	mov	r0, r3
 800c062:	4770      	bx	lr
 800c064:	2300      	movs	r3, #0
 800c066:	e7e4      	b.n	800c032 <__hi0bits+0xa>

0800c068 <__lo0bits>:
 800c068:	6803      	ldr	r3, [r0, #0]
 800c06a:	f013 0207 	ands.w	r2, r3, #7
 800c06e:	4601      	mov	r1, r0
 800c070:	d00b      	beq.n	800c08a <__lo0bits+0x22>
 800c072:	07da      	lsls	r2, r3, #31
 800c074:	d423      	bmi.n	800c0be <__lo0bits+0x56>
 800c076:	0798      	lsls	r0, r3, #30
 800c078:	bf49      	itett	mi
 800c07a:	085b      	lsrmi	r3, r3, #1
 800c07c:	089b      	lsrpl	r3, r3, #2
 800c07e:	2001      	movmi	r0, #1
 800c080:	600b      	strmi	r3, [r1, #0]
 800c082:	bf5c      	itt	pl
 800c084:	600b      	strpl	r3, [r1, #0]
 800c086:	2002      	movpl	r0, #2
 800c088:	4770      	bx	lr
 800c08a:	b298      	uxth	r0, r3
 800c08c:	b9a8      	cbnz	r0, 800c0ba <__lo0bits+0x52>
 800c08e:	0c1b      	lsrs	r3, r3, #16
 800c090:	2010      	movs	r0, #16
 800c092:	b2da      	uxtb	r2, r3
 800c094:	b90a      	cbnz	r2, 800c09a <__lo0bits+0x32>
 800c096:	3008      	adds	r0, #8
 800c098:	0a1b      	lsrs	r3, r3, #8
 800c09a:	071a      	lsls	r2, r3, #28
 800c09c:	bf04      	itt	eq
 800c09e:	091b      	lsreq	r3, r3, #4
 800c0a0:	3004      	addeq	r0, #4
 800c0a2:	079a      	lsls	r2, r3, #30
 800c0a4:	bf04      	itt	eq
 800c0a6:	089b      	lsreq	r3, r3, #2
 800c0a8:	3002      	addeq	r0, #2
 800c0aa:	07da      	lsls	r2, r3, #31
 800c0ac:	d403      	bmi.n	800c0b6 <__lo0bits+0x4e>
 800c0ae:	085b      	lsrs	r3, r3, #1
 800c0b0:	f100 0001 	add.w	r0, r0, #1
 800c0b4:	d005      	beq.n	800c0c2 <__lo0bits+0x5a>
 800c0b6:	600b      	str	r3, [r1, #0]
 800c0b8:	4770      	bx	lr
 800c0ba:	4610      	mov	r0, r2
 800c0bc:	e7e9      	b.n	800c092 <__lo0bits+0x2a>
 800c0be:	2000      	movs	r0, #0
 800c0c0:	4770      	bx	lr
 800c0c2:	2020      	movs	r0, #32
 800c0c4:	4770      	bx	lr
	...

0800c0c8 <__i2b>:
 800c0c8:	b510      	push	{r4, lr}
 800c0ca:	460c      	mov	r4, r1
 800c0cc:	2101      	movs	r1, #1
 800c0ce:	f7ff ff03 	bl	800bed8 <_Balloc>
 800c0d2:	4602      	mov	r2, r0
 800c0d4:	b928      	cbnz	r0, 800c0e2 <__i2b+0x1a>
 800c0d6:	4b05      	ldr	r3, [pc, #20]	; (800c0ec <__i2b+0x24>)
 800c0d8:	4805      	ldr	r0, [pc, #20]	; (800c0f0 <__i2b+0x28>)
 800c0da:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c0de:	f000 fce1 	bl	800caa4 <__assert_func>
 800c0e2:	2301      	movs	r3, #1
 800c0e4:	6144      	str	r4, [r0, #20]
 800c0e6:	6103      	str	r3, [r0, #16]
 800c0e8:	bd10      	pop	{r4, pc}
 800c0ea:	bf00      	nop
 800c0ec:	0800d7a7 	.word	0x0800d7a7
 800c0f0:	0800d7b8 	.word	0x0800d7b8

0800c0f4 <__multiply>:
 800c0f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0f8:	4691      	mov	r9, r2
 800c0fa:	690a      	ldr	r2, [r1, #16]
 800c0fc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c100:	429a      	cmp	r2, r3
 800c102:	bfb8      	it	lt
 800c104:	460b      	movlt	r3, r1
 800c106:	460c      	mov	r4, r1
 800c108:	bfbc      	itt	lt
 800c10a:	464c      	movlt	r4, r9
 800c10c:	4699      	movlt	r9, r3
 800c10e:	6927      	ldr	r7, [r4, #16]
 800c110:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c114:	68a3      	ldr	r3, [r4, #8]
 800c116:	6861      	ldr	r1, [r4, #4]
 800c118:	eb07 060a 	add.w	r6, r7, sl
 800c11c:	42b3      	cmp	r3, r6
 800c11e:	b085      	sub	sp, #20
 800c120:	bfb8      	it	lt
 800c122:	3101      	addlt	r1, #1
 800c124:	f7ff fed8 	bl	800bed8 <_Balloc>
 800c128:	b930      	cbnz	r0, 800c138 <__multiply+0x44>
 800c12a:	4602      	mov	r2, r0
 800c12c:	4b44      	ldr	r3, [pc, #272]	; (800c240 <__multiply+0x14c>)
 800c12e:	4845      	ldr	r0, [pc, #276]	; (800c244 <__multiply+0x150>)
 800c130:	f240 115d 	movw	r1, #349	; 0x15d
 800c134:	f000 fcb6 	bl	800caa4 <__assert_func>
 800c138:	f100 0514 	add.w	r5, r0, #20
 800c13c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c140:	462b      	mov	r3, r5
 800c142:	2200      	movs	r2, #0
 800c144:	4543      	cmp	r3, r8
 800c146:	d321      	bcc.n	800c18c <__multiply+0x98>
 800c148:	f104 0314 	add.w	r3, r4, #20
 800c14c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c150:	f109 0314 	add.w	r3, r9, #20
 800c154:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c158:	9202      	str	r2, [sp, #8]
 800c15a:	1b3a      	subs	r2, r7, r4
 800c15c:	3a15      	subs	r2, #21
 800c15e:	f022 0203 	bic.w	r2, r2, #3
 800c162:	3204      	adds	r2, #4
 800c164:	f104 0115 	add.w	r1, r4, #21
 800c168:	428f      	cmp	r7, r1
 800c16a:	bf38      	it	cc
 800c16c:	2204      	movcc	r2, #4
 800c16e:	9201      	str	r2, [sp, #4]
 800c170:	9a02      	ldr	r2, [sp, #8]
 800c172:	9303      	str	r3, [sp, #12]
 800c174:	429a      	cmp	r2, r3
 800c176:	d80c      	bhi.n	800c192 <__multiply+0x9e>
 800c178:	2e00      	cmp	r6, #0
 800c17a:	dd03      	ble.n	800c184 <__multiply+0x90>
 800c17c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c180:	2b00      	cmp	r3, #0
 800c182:	d05a      	beq.n	800c23a <__multiply+0x146>
 800c184:	6106      	str	r6, [r0, #16]
 800c186:	b005      	add	sp, #20
 800c188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c18c:	f843 2b04 	str.w	r2, [r3], #4
 800c190:	e7d8      	b.n	800c144 <__multiply+0x50>
 800c192:	f8b3 a000 	ldrh.w	sl, [r3]
 800c196:	f1ba 0f00 	cmp.w	sl, #0
 800c19a:	d024      	beq.n	800c1e6 <__multiply+0xf2>
 800c19c:	f104 0e14 	add.w	lr, r4, #20
 800c1a0:	46a9      	mov	r9, r5
 800c1a2:	f04f 0c00 	mov.w	ip, #0
 800c1a6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c1aa:	f8d9 1000 	ldr.w	r1, [r9]
 800c1ae:	fa1f fb82 	uxth.w	fp, r2
 800c1b2:	b289      	uxth	r1, r1
 800c1b4:	fb0a 110b 	mla	r1, sl, fp, r1
 800c1b8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c1bc:	f8d9 2000 	ldr.w	r2, [r9]
 800c1c0:	4461      	add	r1, ip
 800c1c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1c6:	fb0a c20b 	mla	r2, sl, fp, ip
 800c1ca:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c1ce:	b289      	uxth	r1, r1
 800c1d0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c1d4:	4577      	cmp	r7, lr
 800c1d6:	f849 1b04 	str.w	r1, [r9], #4
 800c1da:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1de:	d8e2      	bhi.n	800c1a6 <__multiply+0xb2>
 800c1e0:	9a01      	ldr	r2, [sp, #4]
 800c1e2:	f845 c002 	str.w	ip, [r5, r2]
 800c1e6:	9a03      	ldr	r2, [sp, #12]
 800c1e8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c1ec:	3304      	adds	r3, #4
 800c1ee:	f1b9 0f00 	cmp.w	r9, #0
 800c1f2:	d020      	beq.n	800c236 <__multiply+0x142>
 800c1f4:	6829      	ldr	r1, [r5, #0]
 800c1f6:	f104 0c14 	add.w	ip, r4, #20
 800c1fa:	46ae      	mov	lr, r5
 800c1fc:	f04f 0a00 	mov.w	sl, #0
 800c200:	f8bc b000 	ldrh.w	fp, [ip]
 800c204:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c208:	fb09 220b 	mla	r2, r9, fp, r2
 800c20c:	4492      	add	sl, r2
 800c20e:	b289      	uxth	r1, r1
 800c210:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c214:	f84e 1b04 	str.w	r1, [lr], #4
 800c218:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c21c:	f8be 1000 	ldrh.w	r1, [lr]
 800c220:	0c12      	lsrs	r2, r2, #16
 800c222:	fb09 1102 	mla	r1, r9, r2, r1
 800c226:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c22a:	4567      	cmp	r7, ip
 800c22c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c230:	d8e6      	bhi.n	800c200 <__multiply+0x10c>
 800c232:	9a01      	ldr	r2, [sp, #4]
 800c234:	50a9      	str	r1, [r5, r2]
 800c236:	3504      	adds	r5, #4
 800c238:	e79a      	b.n	800c170 <__multiply+0x7c>
 800c23a:	3e01      	subs	r6, #1
 800c23c:	e79c      	b.n	800c178 <__multiply+0x84>
 800c23e:	bf00      	nop
 800c240:	0800d7a7 	.word	0x0800d7a7
 800c244:	0800d7b8 	.word	0x0800d7b8

0800c248 <__pow5mult>:
 800c248:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c24c:	4615      	mov	r5, r2
 800c24e:	f012 0203 	ands.w	r2, r2, #3
 800c252:	4606      	mov	r6, r0
 800c254:	460f      	mov	r7, r1
 800c256:	d007      	beq.n	800c268 <__pow5mult+0x20>
 800c258:	4c25      	ldr	r4, [pc, #148]	; (800c2f0 <__pow5mult+0xa8>)
 800c25a:	3a01      	subs	r2, #1
 800c25c:	2300      	movs	r3, #0
 800c25e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c262:	f7ff fe9b 	bl	800bf9c <__multadd>
 800c266:	4607      	mov	r7, r0
 800c268:	10ad      	asrs	r5, r5, #2
 800c26a:	d03d      	beq.n	800c2e8 <__pow5mult+0xa0>
 800c26c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c26e:	b97c      	cbnz	r4, 800c290 <__pow5mult+0x48>
 800c270:	2010      	movs	r0, #16
 800c272:	f7ff fe1b 	bl	800beac <malloc>
 800c276:	4602      	mov	r2, r0
 800c278:	6270      	str	r0, [r6, #36]	; 0x24
 800c27a:	b928      	cbnz	r0, 800c288 <__pow5mult+0x40>
 800c27c:	4b1d      	ldr	r3, [pc, #116]	; (800c2f4 <__pow5mult+0xac>)
 800c27e:	481e      	ldr	r0, [pc, #120]	; (800c2f8 <__pow5mult+0xb0>)
 800c280:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c284:	f000 fc0e 	bl	800caa4 <__assert_func>
 800c288:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c28c:	6004      	str	r4, [r0, #0]
 800c28e:	60c4      	str	r4, [r0, #12]
 800c290:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c294:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c298:	b94c      	cbnz	r4, 800c2ae <__pow5mult+0x66>
 800c29a:	f240 2171 	movw	r1, #625	; 0x271
 800c29e:	4630      	mov	r0, r6
 800c2a0:	f7ff ff12 	bl	800c0c8 <__i2b>
 800c2a4:	2300      	movs	r3, #0
 800c2a6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	6003      	str	r3, [r0, #0]
 800c2ae:	f04f 0900 	mov.w	r9, #0
 800c2b2:	07eb      	lsls	r3, r5, #31
 800c2b4:	d50a      	bpl.n	800c2cc <__pow5mult+0x84>
 800c2b6:	4639      	mov	r1, r7
 800c2b8:	4622      	mov	r2, r4
 800c2ba:	4630      	mov	r0, r6
 800c2bc:	f7ff ff1a 	bl	800c0f4 <__multiply>
 800c2c0:	4639      	mov	r1, r7
 800c2c2:	4680      	mov	r8, r0
 800c2c4:	4630      	mov	r0, r6
 800c2c6:	f7ff fe47 	bl	800bf58 <_Bfree>
 800c2ca:	4647      	mov	r7, r8
 800c2cc:	106d      	asrs	r5, r5, #1
 800c2ce:	d00b      	beq.n	800c2e8 <__pow5mult+0xa0>
 800c2d0:	6820      	ldr	r0, [r4, #0]
 800c2d2:	b938      	cbnz	r0, 800c2e4 <__pow5mult+0x9c>
 800c2d4:	4622      	mov	r2, r4
 800c2d6:	4621      	mov	r1, r4
 800c2d8:	4630      	mov	r0, r6
 800c2da:	f7ff ff0b 	bl	800c0f4 <__multiply>
 800c2de:	6020      	str	r0, [r4, #0]
 800c2e0:	f8c0 9000 	str.w	r9, [r0]
 800c2e4:	4604      	mov	r4, r0
 800c2e6:	e7e4      	b.n	800c2b2 <__pow5mult+0x6a>
 800c2e8:	4638      	mov	r0, r7
 800c2ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c2ee:	bf00      	nop
 800c2f0:	0800d908 	.word	0x0800d908
 800c2f4:	0800d735 	.word	0x0800d735
 800c2f8:	0800d7b8 	.word	0x0800d7b8

0800c2fc <__lshift>:
 800c2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c300:	460c      	mov	r4, r1
 800c302:	6849      	ldr	r1, [r1, #4]
 800c304:	6923      	ldr	r3, [r4, #16]
 800c306:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c30a:	68a3      	ldr	r3, [r4, #8]
 800c30c:	4607      	mov	r7, r0
 800c30e:	4691      	mov	r9, r2
 800c310:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c314:	f108 0601 	add.w	r6, r8, #1
 800c318:	42b3      	cmp	r3, r6
 800c31a:	db0b      	blt.n	800c334 <__lshift+0x38>
 800c31c:	4638      	mov	r0, r7
 800c31e:	f7ff fddb 	bl	800bed8 <_Balloc>
 800c322:	4605      	mov	r5, r0
 800c324:	b948      	cbnz	r0, 800c33a <__lshift+0x3e>
 800c326:	4602      	mov	r2, r0
 800c328:	4b2a      	ldr	r3, [pc, #168]	; (800c3d4 <__lshift+0xd8>)
 800c32a:	482b      	ldr	r0, [pc, #172]	; (800c3d8 <__lshift+0xdc>)
 800c32c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c330:	f000 fbb8 	bl	800caa4 <__assert_func>
 800c334:	3101      	adds	r1, #1
 800c336:	005b      	lsls	r3, r3, #1
 800c338:	e7ee      	b.n	800c318 <__lshift+0x1c>
 800c33a:	2300      	movs	r3, #0
 800c33c:	f100 0114 	add.w	r1, r0, #20
 800c340:	f100 0210 	add.w	r2, r0, #16
 800c344:	4618      	mov	r0, r3
 800c346:	4553      	cmp	r3, sl
 800c348:	db37      	blt.n	800c3ba <__lshift+0xbe>
 800c34a:	6920      	ldr	r0, [r4, #16]
 800c34c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c350:	f104 0314 	add.w	r3, r4, #20
 800c354:	f019 091f 	ands.w	r9, r9, #31
 800c358:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c35c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c360:	d02f      	beq.n	800c3c2 <__lshift+0xc6>
 800c362:	f1c9 0e20 	rsb	lr, r9, #32
 800c366:	468a      	mov	sl, r1
 800c368:	f04f 0c00 	mov.w	ip, #0
 800c36c:	681a      	ldr	r2, [r3, #0]
 800c36e:	fa02 f209 	lsl.w	r2, r2, r9
 800c372:	ea42 020c 	orr.w	r2, r2, ip
 800c376:	f84a 2b04 	str.w	r2, [sl], #4
 800c37a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c37e:	4298      	cmp	r0, r3
 800c380:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c384:	d8f2      	bhi.n	800c36c <__lshift+0x70>
 800c386:	1b03      	subs	r3, r0, r4
 800c388:	3b15      	subs	r3, #21
 800c38a:	f023 0303 	bic.w	r3, r3, #3
 800c38e:	3304      	adds	r3, #4
 800c390:	f104 0215 	add.w	r2, r4, #21
 800c394:	4290      	cmp	r0, r2
 800c396:	bf38      	it	cc
 800c398:	2304      	movcc	r3, #4
 800c39a:	f841 c003 	str.w	ip, [r1, r3]
 800c39e:	f1bc 0f00 	cmp.w	ip, #0
 800c3a2:	d001      	beq.n	800c3a8 <__lshift+0xac>
 800c3a4:	f108 0602 	add.w	r6, r8, #2
 800c3a8:	3e01      	subs	r6, #1
 800c3aa:	4638      	mov	r0, r7
 800c3ac:	612e      	str	r6, [r5, #16]
 800c3ae:	4621      	mov	r1, r4
 800c3b0:	f7ff fdd2 	bl	800bf58 <_Bfree>
 800c3b4:	4628      	mov	r0, r5
 800c3b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ba:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3be:	3301      	adds	r3, #1
 800c3c0:	e7c1      	b.n	800c346 <__lshift+0x4a>
 800c3c2:	3904      	subs	r1, #4
 800c3c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3c8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3cc:	4298      	cmp	r0, r3
 800c3ce:	d8f9      	bhi.n	800c3c4 <__lshift+0xc8>
 800c3d0:	e7ea      	b.n	800c3a8 <__lshift+0xac>
 800c3d2:	bf00      	nop
 800c3d4:	0800d7a7 	.word	0x0800d7a7
 800c3d8:	0800d7b8 	.word	0x0800d7b8

0800c3dc <__mcmp>:
 800c3dc:	b530      	push	{r4, r5, lr}
 800c3de:	6902      	ldr	r2, [r0, #16]
 800c3e0:	690c      	ldr	r4, [r1, #16]
 800c3e2:	1b12      	subs	r2, r2, r4
 800c3e4:	d10e      	bne.n	800c404 <__mcmp+0x28>
 800c3e6:	f100 0314 	add.w	r3, r0, #20
 800c3ea:	3114      	adds	r1, #20
 800c3ec:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c3f0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c3f4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c3f8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c3fc:	42a5      	cmp	r5, r4
 800c3fe:	d003      	beq.n	800c408 <__mcmp+0x2c>
 800c400:	d305      	bcc.n	800c40e <__mcmp+0x32>
 800c402:	2201      	movs	r2, #1
 800c404:	4610      	mov	r0, r2
 800c406:	bd30      	pop	{r4, r5, pc}
 800c408:	4283      	cmp	r3, r0
 800c40a:	d3f3      	bcc.n	800c3f4 <__mcmp+0x18>
 800c40c:	e7fa      	b.n	800c404 <__mcmp+0x28>
 800c40e:	f04f 32ff 	mov.w	r2, #4294967295
 800c412:	e7f7      	b.n	800c404 <__mcmp+0x28>

0800c414 <__mdiff>:
 800c414:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c418:	460c      	mov	r4, r1
 800c41a:	4606      	mov	r6, r0
 800c41c:	4611      	mov	r1, r2
 800c41e:	4620      	mov	r0, r4
 800c420:	4690      	mov	r8, r2
 800c422:	f7ff ffdb 	bl	800c3dc <__mcmp>
 800c426:	1e05      	subs	r5, r0, #0
 800c428:	d110      	bne.n	800c44c <__mdiff+0x38>
 800c42a:	4629      	mov	r1, r5
 800c42c:	4630      	mov	r0, r6
 800c42e:	f7ff fd53 	bl	800bed8 <_Balloc>
 800c432:	b930      	cbnz	r0, 800c442 <__mdiff+0x2e>
 800c434:	4b3a      	ldr	r3, [pc, #232]	; (800c520 <__mdiff+0x10c>)
 800c436:	4602      	mov	r2, r0
 800c438:	f240 2132 	movw	r1, #562	; 0x232
 800c43c:	4839      	ldr	r0, [pc, #228]	; (800c524 <__mdiff+0x110>)
 800c43e:	f000 fb31 	bl	800caa4 <__assert_func>
 800c442:	2301      	movs	r3, #1
 800c444:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c448:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c44c:	bfa4      	itt	ge
 800c44e:	4643      	movge	r3, r8
 800c450:	46a0      	movge	r8, r4
 800c452:	4630      	mov	r0, r6
 800c454:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c458:	bfa6      	itte	ge
 800c45a:	461c      	movge	r4, r3
 800c45c:	2500      	movge	r5, #0
 800c45e:	2501      	movlt	r5, #1
 800c460:	f7ff fd3a 	bl	800bed8 <_Balloc>
 800c464:	b920      	cbnz	r0, 800c470 <__mdiff+0x5c>
 800c466:	4b2e      	ldr	r3, [pc, #184]	; (800c520 <__mdiff+0x10c>)
 800c468:	4602      	mov	r2, r0
 800c46a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c46e:	e7e5      	b.n	800c43c <__mdiff+0x28>
 800c470:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c474:	6926      	ldr	r6, [r4, #16]
 800c476:	60c5      	str	r5, [r0, #12]
 800c478:	f104 0914 	add.w	r9, r4, #20
 800c47c:	f108 0514 	add.w	r5, r8, #20
 800c480:	f100 0e14 	add.w	lr, r0, #20
 800c484:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c488:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c48c:	f108 0210 	add.w	r2, r8, #16
 800c490:	46f2      	mov	sl, lr
 800c492:	2100      	movs	r1, #0
 800c494:	f859 3b04 	ldr.w	r3, [r9], #4
 800c498:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c49c:	fa1f f883 	uxth.w	r8, r3
 800c4a0:	fa11 f18b 	uxtah	r1, r1, fp
 800c4a4:	0c1b      	lsrs	r3, r3, #16
 800c4a6:	eba1 0808 	sub.w	r8, r1, r8
 800c4aa:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c4ae:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c4b2:	fa1f f888 	uxth.w	r8, r8
 800c4b6:	1419      	asrs	r1, r3, #16
 800c4b8:	454e      	cmp	r6, r9
 800c4ba:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c4be:	f84a 3b04 	str.w	r3, [sl], #4
 800c4c2:	d8e7      	bhi.n	800c494 <__mdiff+0x80>
 800c4c4:	1b33      	subs	r3, r6, r4
 800c4c6:	3b15      	subs	r3, #21
 800c4c8:	f023 0303 	bic.w	r3, r3, #3
 800c4cc:	3304      	adds	r3, #4
 800c4ce:	3415      	adds	r4, #21
 800c4d0:	42a6      	cmp	r6, r4
 800c4d2:	bf38      	it	cc
 800c4d4:	2304      	movcc	r3, #4
 800c4d6:	441d      	add	r5, r3
 800c4d8:	4473      	add	r3, lr
 800c4da:	469e      	mov	lr, r3
 800c4dc:	462e      	mov	r6, r5
 800c4de:	4566      	cmp	r6, ip
 800c4e0:	d30e      	bcc.n	800c500 <__mdiff+0xec>
 800c4e2:	f10c 0203 	add.w	r2, ip, #3
 800c4e6:	1b52      	subs	r2, r2, r5
 800c4e8:	f022 0203 	bic.w	r2, r2, #3
 800c4ec:	3d03      	subs	r5, #3
 800c4ee:	45ac      	cmp	ip, r5
 800c4f0:	bf38      	it	cc
 800c4f2:	2200      	movcc	r2, #0
 800c4f4:	441a      	add	r2, r3
 800c4f6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c4fa:	b17b      	cbz	r3, 800c51c <__mdiff+0x108>
 800c4fc:	6107      	str	r7, [r0, #16]
 800c4fe:	e7a3      	b.n	800c448 <__mdiff+0x34>
 800c500:	f856 8b04 	ldr.w	r8, [r6], #4
 800c504:	fa11 f288 	uxtah	r2, r1, r8
 800c508:	1414      	asrs	r4, r2, #16
 800c50a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c50e:	b292      	uxth	r2, r2
 800c510:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c514:	f84e 2b04 	str.w	r2, [lr], #4
 800c518:	1421      	asrs	r1, r4, #16
 800c51a:	e7e0      	b.n	800c4de <__mdiff+0xca>
 800c51c:	3f01      	subs	r7, #1
 800c51e:	e7ea      	b.n	800c4f6 <__mdiff+0xe2>
 800c520:	0800d7a7 	.word	0x0800d7a7
 800c524:	0800d7b8 	.word	0x0800d7b8

0800c528 <__d2b>:
 800c528:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c52c:	4689      	mov	r9, r1
 800c52e:	2101      	movs	r1, #1
 800c530:	ec57 6b10 	vmov	r6, r7, d0
 800c534:	4690      	mov	r8, r2
 800c536:	f7ff fccf 	bl	800bed8 <_Balloc>
 800c53a:	4604      	mov	r4, r0
 800c53c:	b930      	cbnz	r0, 800c54c <__d2b+0x24>
 800c53e:	4602      	mov	r2, r0
 800c540:	4b25      	ldr	r3, [pc, #148]	; (800c5d8 <__d2b+0xb0>)
 800c542:	4826      	ldr	r0, [pc, #152]	; (800c5dc <__d2b+0xb4>)
 800c544:	f240 310a 	movw	r1, #778	; 0x30a
 800c548:	f000 faac 	bl	800caa4 <__assert_func>
 800c54c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c550:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c554:	bb35      	cbnz	r5, 800c5a4 <__d2b+0x7c>
 800c556:	2e00      	cmp	r6, #0
 800c558:	9301      	str	r3, [sp, #4]
 800c55a:	d028      	beq.n	800c5ae <__d2b+0x86>
 800c55c:	4668      	mov	r0, sp
 800c55e:	9600      	str	r6, [sp, #0]
 800c560:	f7ff fd82 	bl	800c068 <__lo0bits>
 800c564:	9900      	ldr	r1, [sp, #0]
 800c566:	b300      	cbz	r0, 800c5aa <__d2b+0x82>
 800c568:	9a01      	ldr	r2, [sp, #4]
 800c56a:	f1c0 0320 	rsb	r3, r0, #32
 800c56e:	fa02 f303 	lsl.w	r3, r2, r3
 800c572:	430b      	orrs	r3, r1
 800c574:	40c2      	lsrs	r2, r0
 800c576:	6163      	str	r3, [r4, #20]
 800c578:	9201      	str	r2, [sp, #4]
 800c57a:	9b01      	ldr	r3, [sp, #4]
 800c57c:	61a3      	str	r3, [r4, #24]
 800c57e:	2b00      	cmp	r3, #0
 800c580:	bf14      	ite	ne
 800c582:	2202      	movne	r2, #2
 800c584:	2201      	moveq	r2, #1
 800c586:	6122      	str	r2, [r4, #16]
 800c588:	b1d5      	cbz	r5, 800c5c0 <__d2b+0x98>
 800c58a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c58e:	4405      	add	r5, r0
 800c590:	f8c9 5000 	str.w	r5, [r9]
 800c594:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c598:	f8c8 0000 	str.w	r0, [r8]
 800c59c:	4620      	mov	r0, r4
 800c59e:	b003      	add	sp, #12
 800c5a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5a8:	e7d5      	b.n	800c556 <__d2b+0x2e>
 800c5aa:	6161      	str	r1, [r4, #20]
 800c5ac:	e7e5      	b.n	800c57a <__d2b+0x52>
 800c5ae:	a801      	add	r0, sp, #4
 800c5b0:	f7ff fd5a 	bl	800c068 <__lo0bits>
 800c5b4:	9b01      	ldr	r3, [sp, #4]
 800c5b6:	6163      	str	r3, [r4, #20]
 800c5b8:	2201      	movs	r2, #1
 800c5ba:	6122      	str	r2, [r4, #16]
 800c5bc:	3020      	adds	r0, #32
 800c5be:	e7e3      	b.n	800c588 <__d2b+0x60>
 800c5c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c5c8:	f8c9 0000 	str.w	r0, [r9]
 800c5cc:	6918      	ldr	r0, [r3, #16]
 800c5ce:	f7ff fd2b 	bl	800c028 <__hi0bits>
 800c5d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c5d6:	e7df      	b.n	800c598 <__d2b+0x70>
 800c5d8:	0800d7a7 	.word	0x0800d7a7
 800c5dc:	0800d7b8 	.word	0x0800d7b8

0800c5e0 <_calloc_r>:
 800c5e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c5e2:	fba1 2402 	umull	r2, r4, r1, r2
 800c5e6:	b94c      	cbnz	r4, 800c5fc <_calloc_r+0x1c>
 800c5e8:	4611      	mov	r1, r2
 800c5ea:	9201      	str	r2, [sp, #4]
 800c5ec:	f000 f87a 	bl	800c6e4 <_malloc_r>
 800c5f0:	9a01      	ldr	r2, [sp, #4]
 800c5f2:	4605      	mov	r5, r0
 800c5f4:	b930      	cbnz	r0, 800c604 <_calloc_r+0x24>
 800c5f6:	4628      	mov	r0, r5
 800c5f8:	b003      	add	sp, #12
 800c5fa:	bd30      	pop	{r4, r5, pc}
 800c5fc:	220c      	movs	r2, #12
 800c5fe:	6002      	str	r2, [r0, #0]
 800c600:	2500      	movs	r5, #0
 800c602:	e7f8      	b.n	800c5f6 <_calloc_r+0x16>
 800c604:	4621      	mov	r1, r4
 800c606:	f7fe f93f 	bl	800a888 <memset>
 800c60a:	e7f4      	b.n	800c5f6 <_calloc_r+0x16>

0800c60c <_free_r>:
 800c60c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c60e:	2900      	cmp	r1, #0
 800c610:	d044      	beq.n	800c69c <_free_r+0x90>
 800c612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c616:	9001      	str	r0, [sp, #4]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	f1a1 0404 	sub.w	r4, r1, #4
 800c61e:	bfb8      	it	lt
 800c620:	18e4      	addlt	r4, r4, r3
 800c622:	f000 fa9b 	bl	800cb5c <__malloc_lock>
 800c626:	4a1e      	ldr	r2, [pc, #120]	; (800c6a0 <_free_r+0x94>)
 800c628:	9801      	ldr	r0, [sp, #4]
 800c62a:	6813      	ldr	r3, [r2, #0]
 800c62c:	b933      	cbnz	r3, 800c63c <_free_r+0x30>
 800c62e:	6063      	str	r3, [r4, #4]
 800c630:	6014      	str	r4, [r2, #0]
 800c632:	b003      	add	sp, #12
 800c634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c638:	f000 ba96 	b.w	800cb68 <__malloc_unlock>
 800c63c:	42a3      	cmp	r3, r4
 800c63e:	d908      	bls.n	800c652 <_free_r+0x46>
 800c640:	6825      	ldr	r5, [r4, #0]
 800c642:	1961      	adds	r1, r4, r5
 800c644:	428b      	cmp	r3, r1
 800c646:	bf01      	itttt	eq
 800c648:	6819      	ldreq	r1, [r3, #0]
 800c64a:	685b      	ldreq	r3, [r3, #4]
 800c64c:	1949      	addeq	r1, r1, r5
 800c64e:	6021      	streq	r1, [r4, #0]
 800c650:	e7ed      	b.n	800c62e <_free_r+0x22>
 800c652:	461a      	mov	r2, r3
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	b10b      	cbz	r3, 800c65c <_free_r+0x50>
 800c658:	42a3      	cmp	r3, r4
 800c65a:	d9fa      	bls.n	800c652 <_free_r+0x46>
 800c65c:	6811      	ldr	r1, [r2, #0]
 800c65e:	1855      	adds	r5, r2, r1
 800c660:	42a5      	cmp	r5, r4
 800c662:	d10b      	bne.n	800c67c <_free_r+0x70>
 800c664:	6824      	ldr	r4, [r4, #0]
 800c666:	4421      	add	r1, r4
 800c668:	1854      	adds	r4, r2, r1
 800c66a:	42a3      	cmp	r3, r4
 800c66c:	6011      	str	r1, [r2, #0]
 800c66e:	d1e0      	bne.n	800c632 <_free_r+0x26>
 800c670:	681c      	ldr	r4, [r3, #0]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	6053      	str	r3, [r2, #4]
 800c676:	4421      	add	r1, r4
 800c678:	6011      	str	r1, [r2, #0]
 800c67a:	e7da      	b.n	800c632 <_free_r+0x26>
 800c67c:	d902      	bls.n	800c684 <_free_r+0x78>
 800c67e:	230c      	movs	r3, #12
 800c680:	6003      	str	r3, [r0, #0]
 800c682:	e7d6      	b.n	800c632 <_free_r+0x26>
 800c684:	6825      	ldr	r5, [r4, #0]
 800c686:	1961      	adds	r1, r4, r5
 800c688:	428b      	cmp	r3, r1
 800c68a:	bf04      	itt	eq
 800c68c:	6819      	ldreq	r1, [r3, #0]
 800c68e:	685b      	ldreq	r3, [r3, #4]
 800c690:	6063      	str	r3, [r4, #4]
 800c692:	bf04      	itt	eq
 800c694:	1949      	addeq	r1, r1, r5
 800c696:	6021      	streq	r1, [r4, #0]
 800c698:	6054      	str	r4, [r2, #4]
 800c69a:	e7ca      	b.n	800c632 <_free_r+0x26>
 800c69c:	b003      	add	sp, #12
 800c69e:	bd30      	pop	{r4, r5, pc}
 800c6a0:	200022e8 	.word	0x200022e8

0800c6a4 <sbrk_aligned>:
 800c6a4:	b570      	push	{r4, r5, r6, lr}
 800c6a6:	4e0e      	ldr	r6, [pc, #56]	; (800c6e0 <sbrk_aligned+0x3c>)
 800c6a8:	460c      	mov	r4, r1
 800c6aa:	6831      	ldr	r1, [r6, #0]
 800c6ac:	4605      	mov	r5, r0
 800c6ae:	b911      	cbnz	r1, 800c6b6 <sbrk_aligned+0x12>
 800c6b0:	f000 f9e8 	bl	800ca84 <_sbrk_r>
 800c6b4:	6030      	str	r0, [r6, #0]
 800c6b6:	4621      	mov	r1, r4
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	f000 f9e3 	bl	800ca84 <_sbrk_r>
 800c6be:	1c43      	adds	r3, r0, #1
 800c6c0:	d00a      	beq.n	800c6d8 <sbrk_aligned+0x34>
 800c6c2:	1cc4      	adds	r4, r0, #3
 800c6c4:	f024 0403 	bic.w	r4, r4, #3
 800c6c8:	42a0      	cmp	r0, r4
 800c6ca:	d007      	beq.n	800c6dc <sbrk_aligned+0x38>
 800c6cc:	1a21      	subs	r1, r4, r0
 800c6ce:	4628      	mov	r0, r5
 800c6d0:	f000 f9d8 	bl	800ca84 <_sbrk_r>
 800c6d4:	3001      	adds	r0, #1
 800c6d6:	d101      	bne.n	800c6dc <sbrk_aligned+0x38>
 800c6d8:	f04f 34ff 	mov.w	r4, #4294967295
 800c6dc:	4620      	mov	r0, r4
 800c6de:	bd70      	pop	{r4, r5, r6, pc}
 800c6e0:	200022ec 	.word	0x200022ec

0800c6e4 <_malloc_r>:
 800c6e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6e8:	1ccd      	adds	r5, r1, #3
 800c6ea:	f025 0503 	bic.w	r5, r5, #3
 800c6ee:	3508      	adds	r5, #8
 800c6f0:	2d0c      	cmp	r5, #12
 800c6f2:	bf38      	it	cc
 800c6f4:	250c      	movcc	r5, #12
 800c6f6:	2d00      	cmp	r5, #0
 800c6f8:	4607      	mov	r7, r0
 800c6fa:	db01      	blt.n	800c700 <_malloc_r+0x1c>
 800c6fc:	42a9      	cmp	r1, r5
 800c6fe:	d905      	bls.n	800c70c <_malloc_r+0x28>
 800c700:	230c      	movs	r3, #12
 800c702:	603b      	str	r3, [r7, #0]
 800c704:	2600      	movs	r6, #0
 800c706:	4630      	mov	r0, r6
 800c708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c70c:	4e2e      	ldr	r6, [pc, #184]	; (800c7c8 <_malloc_r+0xe4>)
 800c70e:	f000 fa25 	bl	800cb5c <__malloc_lock>
 800c712:	6833      	ldr	r3, [r6, #0]
 800c714:	461c      	mov	r4, r3
 800c716:	bb34      	cbnz	r4, 800c766 <_malloc_r+0x82>
 800c718:	4629      	mov	r1, r5
 800c71a:	4638      	mov	r0, r7
 800c71c:	f7ff ffc2 	bl	800c6a4 <sbrk_aligned>
 800c720:	1c43      	adds	r3, r0, #1
 800c722:	4604      	mov	r4, r0
 800c724:	d14d      	bne.n	800c7c2 <_malloc_r+0xde>
 800c726:	6834      	ldr	r4, [r6, #0]
 800c728:	4626      	mov	r6, r4
 800c72a:	2e00      	cmp	r6, #0
 800c72c:	d140      	bne.n	800c7b0 <_malloc_r+0xcc>
 800c72e:	6823      	ldr	r3, [r4, #0]
 800c730:	4631      	mov	r1, r6
 800c732:	4638      	mov	r0, r7
 800c734:	eb04 0803 	add.w	r8, r4, r3
 800c738:	f000 f9a4 	bl	800ca84 <_sbrk_r>
 800c73c:	4580      	cmp	r8, r0
 800c73e:	d13a      	bne.n	800c7b6 <_malloc_r+0xd2>
 800c740:	6821      	ldr	r1, [r4, #0]
 800c742:	3503      	adds	r5, #3
 800c744:	1a6d      	subs	r5, r5, r1
 800c746:	f025 0503 	bic.w	r5, r5, #3
 800c74a:	3508      	adds	r5, #8
 800c74c:	2d0c      	cmp	r5, #12
 800c74e:	bf38      	it	cc
 800c750:	250c      	movcc	r5, #12
 800c752:	4629      	mov	r1, r5
 800c754:	4638      	mov	r0, r7
 800c756:	f7ff ffa5 	bl	800c6a4 <sbrk_aligned>
 800c75a:	3001      	adds	r0, #1
 800c75c:	d02b      	beq.n	800c7b6 <_malloc_r+0xd2>
 800c75e:	6823      	ldr	r3, [r4, #0]
 800c760:	442b      	add	r3, r5
 800c762:	6023      	str	r3, [r4, #0]
 800c764:	e00e      	b.n	800c784 <_malloc_r+0xa0>
 800c766:	6822      	ldr	r2, [r4, #0]
 800c768:	1b52      	subs	r2, r2, r5
 800c76a:	d41e      	bmi.n	800c7aa <_malloc_r+0xc6>
 800c76c:	2a0b      	cmp	r2, #11
 800c76e:	d916      	bls.n	800c79e <_malloc_r+0xba>
 800c770:	1961      	adds	r1, r4, r5
 800c772:	42a3      	cmp	r3, r4
 800c774:	6025      	str	r5, [r4, #0]
 800c776:	bf18      	it	ne
 800c778:	6059      	strne	r1, [r3, #4]
 800c77a:	6863      	ldr	r3, [r4, #4]
 800c77c:	bf08      	it	eq
 800c77e:	6031      	streq	r1, [r6, #0]
 800c780:	5162      	str	r2, [r4, r5]
 800c782:	604b      	str	r3, [r1, #4]
 800c784:	4638      	mov	r0, r7
 800c786:	f104 060b 	add.w	r6, r4, #11
 800c78a:	f000 f9ed 	bl	800cb68 <__malloc_unlock>
 800c78e:	f026 0607 	bic.w	r6, r6, #7
 800c792:	1d23      	adds	r3, r4, #4
 800c794:	1af2      	subs	r2, r6, r3
 800c796:	d0b6      	beq.n	800c706 <_malloc_r+0x22>
 800c798:	1b9b      	subs	r3, r3, r6
 800c79a:	50a3      	str	r3, [r4, r2]
 800c79c:	e7b3      	b.n	800c706 <_malloc_r+0x22>
 800c79e:	6862      	ldr	r2, [r4, #4]
 800c7a0:	42a3      	cmp	r3, r4
 800c7a2:	bf0c      	ite	eq
 800c7a4:	6032      	streq	r2, [r6, #0]
 800c7a6:	605a      	strne	r2, [r3, #4]
 800c7a8:	e7ec      	b.n	800c784 <_malloc_r+0xa0>
 800c7aa:	4623      	mov	r3, r4
 800c7ac:	6864      	ldr	r4, [r4, #4]
 800c7ae:	e7b2      	b.n	800c716 <_malloc_r+0x32>
 800c7b0:	4634      	mov	r4, r6
 800c7b2:	6876      	ldr	r6, [r6, #4]
 800c7b4:	e7b9      	b.n	800c72a <_malloc_r+0x46>
 800c7b6:	230c      	movs	r3, #12
 800c7b8:	603b      	str	r3, [r7, #0]
 800c7ba:	4638      	mov	r0, r7
 800c7bc:	f000 f9d4 	bl	800cb68 <__malloc_unlock>
 800c7c0:	e7a1      	b.n	800c706 <_malloc_r+0x22>
 800c7c2:	6025      	str	r5, [r4, #0]
 800c7c4:	e7de      	b.n	800c784 <_malloc_r+0xa0>
 800c7c6:	bf00      	nop
 800c7c8:	200022e8 	.word	0x200022e8

0800c7cc <__ssputs_r>:
 800c7cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7d0:	688e      	ldr	r6, [r1, #8]
 800c7d2:	429e      	cmp	r6, r3
 800c7d4:	4682      	mov	sl, r0
 800c7d6:	460c      	mov	r4, r1
 800c7d8:	4690      	mov	r8, r2
 800c7da:	461f      	mov	r7, r3
 800c7dc:	d838      	bhi.n	800c850 <__ssputs_r+0x84>
 800c7de:	898a      	ldrh	r2, [r1, #12]
 800c7e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c7e4:	d032      	beq.n	800c84c <__ssputs_r+0x80>
 800c7e6:	6825      	ldr	r5, [r4, #0]
 800c7e8:	6909      	ldr	r1, [r1, #16]
 800c7ea:	eba5 0901 	sub.w	r9, r5, r1
 800c7ee:	6965      	ldr	r5, [r4, #20]
 800c7f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c7f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c7f8:	3301      	adds	r3, #1
 800c7fa:	444b      	add	r3, r9
 800c7fc:	106d      	asrs	r5, r5, #1
 800c7fe:	429d      	cmp	r5, r3
 800c800:	bf38      	it	cc
 800c802:	461d      	movcc	r5, r3
 800c804:	0553      	lsls	r3, r2, #21
 800c806:	d531      	bpl.n	800c86c <__ssputs_r+0xa0>
 800c808:	4629      	mov	r1, r5
 800c80a:	f7ff ff6b 	bl	800c6e4 <_malloc_r>
 800c80e:	4606      	mov	r6, r0
 800c810:	b950      	cbnz	r0, 800c828 <__ssputs_r+0x5c>
 800c812:	230c      	movs	r3, #12
 800c814:	f8ca 3000 	str.w	r3, [sl]
 800c818:	89a3      	ldrh	r3, [r4, #12]
 800c81a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c81e:	81a3      	strh	r3, [r4, #12]
 800c820:	f04f 30ff 	mov.w	r0, #4294967295
 800c824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c828:	6921      	ldr	r1, [r4, #16]
 800c82a:	464a      	mov	r2, r9
 800c82c:	f7ff fb46 	bl	800bebc <memcpy>
 800c830:	89a3      	ldrh	r3, [r4, #12]
 800c832:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c836:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c83a:	81a3      	strh	r3, [r4, #12]
 800c83c:	6126      	str	r6, [r4, #16]
 800c83e:	6165      	str	r5, [r4, #20]
 800c840:	444e      	add	r6, r9
 800c842:	eba5 0509 	sub.w	r5, r5, r9
 800c846:	6026      	str	r6, [r4, #0]
 800c848:	60a5      	str	r5, [r4, #8]
 800c84a:	463e      	mov	r6, r7
 800c84c:	42be      	cmp	r6, r7
 800c84e:	d900      	bls.n	800c852 <__ssputs_r+0x86>
 800c850:	463e      	mov	r6, r7
 800c852:	6820      	ldr	r0, [r4, #0]
 800c854:	4632      	mov	r2, r6
 800c856:	4641      	mov	r1, r8
 800c858:	f000 f966 	bl	800cb28 <memmove>
 800c85c:	68a3      	ldr	r3, [r4, #8]
 800c85e:	1b9b      	subs	r3, r3, r6
 800c860:	60a3      	str	r3, [r4, #8]
 800c862:	6823      	ldr	r3, [r4, #0]
 800c864:	4433      	add	r3, r6
 800c866:	6023      	str	r3, [r4, #0]
 800c868:	2000      	movs	r0, #0
 800c86a:	e7db      	b.n	800c824 <__ssputs_r+0x58>
 800c86c:	462a      	mov	r2, r5
 800c86e:	f000 f981 	bl	800cb74 <_realloc_r>
 800c872:	4606      	mov	r6, r0
 800c874:	2800      	cmp	r0, #0
 800c876:	d1e1      	bne.n	800c83c <__ssputs_r+0x70>
 800c878:	6921      	ldr	r1, [r4, #16]
 800c87a:	4650      	mov	r0, sl
 800c87c:	f7ff fec6 	bl	800c60c <_free_r>
 800c880:	e7c7      	b.n	800c812 <__ssputs_r+0x46>
	...

0800c884 <_svfiprintf_r>:
 800c884:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c888:	4698      	mov	r8, r3
 800c88a:	898b      	ldrh	r3, [r1, #12]
 800c88c:	061b      	lsls	r3, r3, #24
 800c88e:	b09d      	sub	sp, #116	; 0x74
 800c890:	4607      	mov	r7, r0
 800c892:	460d      	mov	r5, r1
 800c894:	4614      	mov	r4, r2
 800c896:	d50e      	bpl.n	800c8b6 <_svfiprintf_r+0x32>
 800c898:	690b      	ldr	r3, [r1, #16]
 800c89a:	b963      	cbnz	r3, 800c8b6 <_svfiprintf_r+0x32>
 800c89c:	2140      	movs	r1, #64	; 0x40
 800c89e:	f7ff ff21 	bl	800c6e4 <_malloc_r>
 800c8a2:	6028      	str	r0, [r5, #0]
 800c8a4:	6128      	str	r0, [r5, #16]
 800c8a6:	b920      	cbnz	r0, 800c8b2 <_svfiprintf_r+0x2e>
 800c8a8:	230c      	movs	r3, #12
 800c8aa:	603b      	str	r3, [r7, #0]
 800c8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b0:	e0d1      	b.n	800ca56 <_svfiprintf_r+0x1d2>
 800c8b2:	2340      	movs	r3, #64	; 0x40
 800c8b4:	616b      	str	r3, [r5, #20]
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ba:	2320      	movs	r3, #32
 800c8bc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8c0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8c4:	2330      	movs	r3, #48	; 0x30
 800c8c6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ca70 <_svfiprintf_r+0x1ec>
 800c8ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8ce:	f04f 0901 	mov.w	r9, #1
 800c8d2:	4623      	mov	r3, r4
 800c8d4:	469a      	mov	sl, r3
 800c8d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c8da:	b10a      	cbz	r2, 800c8e0 <_svfiprintf_r+0x5c>
 800c8dc:	2a25      	cmp	r2, #37	; 0x25
 800c8de:	d1f9      	bne.n	800c8d4 <_svfiprintf_r+0x50>
 800c8e0:	ebba 0b04 	subs.w	fp, sl, r4
 800c8e4:	d00b      	beq.n	800c8fe <_svfiprintf_r+0x7a>
 800c8e6:	465b      	mov	r3, fp
 800c8e8:	4622      	mov	r2, r4
 800c8ea:	4629      	mov	r1, r5
 800c8ec:	4638      	mov	r0, r7
 800c8ee:	f7ff ff6d 	bl	800c7cc <__ssputs_r>
 800c8f2:	3001      	adds	r0, #1
 800c8f4:	f000 80aa 	beq.w	800ca4c <_svfiprintf_r+0x1c8>
 800c8f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8fa:	445a      	add	r2, fp
 800c8fc:	9209      	str	r2, [sp, #36]	; 0x24
 800c8fe:	f89a 3000 	ldrb.w	r3, [sl]
 800c902:	2b00      	cmp	r3, #0
 800c904:	f000 80a2 	beq.w	800ca4c <_svfiprintf_r+0x1c8>
 800c908:	2300      	movs	r3, #0
 800c90a:	f04f 32ff 	mov.w	r2, #4294967295
 800c90e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c912:	f10a 0a01 	add.w	sl, sl, #1
 800c916:	9304      	str	r3, [sp, #16]
 800c918:	9307      	str	r3, [sp, #28]
 800c91a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c91e:	931a      	str	r3, [sp, #104]	; 0x68
 800c920:	4654      	mov	r4, sl
 800c922:	2205      	movs	r2, #5
 800c924:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c928:	4851      	ldr	r0, [pc, #324]	; (800ca70 <_svfiprintf_r+0x1ec>)
 800c92a:	f7f3 fc61 	bl	80001f0 <memchr>
 800c92e:	9a04      	ldr	r2, [sp, #16]
 800c930:	b9d8      	cbnz	r0, 800c96a <_svfiprintf_r+0xe6>
 800c932:	06d0      	lsls	r0, r2, #27
 800c934:	bf44      	itt	mi
 800c936:	2320      	movmi	r3, #32
 800c938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c93c:	0711      	lsls	r1, r2, #28
 800c93e:	bf44      	itt	mi
 800c940:	232b      	movmi	r3, #43	; 0x2b
 800c942:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c946:	f89a 3000 	ldrb.w	r3, [sl]
 800c94a:	2b2a      	cmp	r3, #42	; 0x2a
 800c94c:	d015      	beq.n	800c97a <_svfiprintf_r+0xf6>
 800c94e:	9a07      	ldr	r2, [sp, #28]
 800c950:	4654      	mov	r4, sl
 800c952:	2000      	movs	r0, #0
 800c954:	f04f 0c0a 	mov.w	ip, #10
 800c958:	4621      	mov	r1, r4
 800c95a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c95e:	3b30      	subs	r3, #48	; 0x30
 800c960:	2b09      	cmp	r3, #9
 800c962:	d94e      	bls.n	800ca02 <_svfiprintf_r+0x17e>
 800c964:	b1b0      	cbz	r0, 800c994 <_svfiprintf_r+0x110>
 800c966:	9207      	str	r2, [sp, #28]
 800c968:	e014      	b.n	800c994 <_svfiprintf_r+0x110>
 800c96a:	eba0 0308 	sub.w	r3, r0, r8
 800c96e:	fa09 f303 	lsl.w	r3, r9, r3
 800c972:	4313      	orrs	r3, r2
 800c974:	9304      	str	r3, [sp, #16]
 800c976:	46a2      	mov	sl, r4
 800c978:	e7d2      	b.n	800c920 <_svfiprintf_r+0x9c>
 800c97a:	9b03      	ldr	r3, [sp, #12]
 800c97c:	1d19      	adds	r1, r3, #4
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	9103      	str	r1, [sp, #12]
 800c982:	2b00      	cmp	r3, #0
 800c984:	bfbb      	ittet	lt
 800c986:	425b      	neglt	r3, r3
 800c988:	f042 0202 	orrlt.w	r2, r2, #2
 800c98c:	9307      	strge	r3, [sp, #28]
 800c98e:	9307      	strlt	r3, [sp, #28]
 800c990:	bfb8      	it	lt
 800c992:	9204      	strlt	r2, [sp, #16]
 800c994:	7823      	ldrb	r3, [r4, #0]
 800c996:	2b2e      	cmp	r3, #46	; 0x2e
 800c998:	d10c      	bne.n	800c9b4 <_svfiprintf_r+0x130>
 800c99a:	7863      	ldrb	r3, [r4, #1]
 800c99c:	2b2a      	cmp	r3, #42	; 0x2a
 800c99e:	d135      	bne.n	800ca0c <_svfiprintf_r+0x188>
 800c9a0:	9b03      	ldr	r3, [sp, #12]
 800c9a2:	1d1a      	adds	r2, r3, #4
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	9203      	str	r2, [sp, #12]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	bfb8      	it	lt
 800c9ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9b0:	3402      	adds	r4, #2
 800c9b2:	9305      	str	r3, [sp, #20]
 800c9b4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ca80 <_svfiprintf_r+0x1fc>
 800c9b8:	7821      	ldrb	r1, [r4, #0]
 800c9ba:	2203      	movs	r2, #3
 800c9bc:	4650      	mov	r0, sl
 800c9be:	f7f3 fc17 	bl	80001f0 <memchr>
 800c9c2:	b140      	cbz	r0, 800c9d6 <_svfiprintf_r+0x152>
 800c9c4:	2340      	movs	r3, #64	; 0x40
 800c9c6:	eba0 000a 	sub.w	r0, r0, sl
 800c9ca:	fa03 f000 	lsl.w	r0, r3, r0
 800c9ce:	9b04      	ldr	r3, [sp, #16]
 800c9d0:	4303      	orrs	r3, r0
 800c9d2:	3401      	adds	r4, #1
 800c9d4:	9304      	str	r3, [sp, #16]
 800c9d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c9da:	4826      	ldr	r0, [pc, #152]	; (800ca74 <_svfiprintf_r+0x1f0>)
 800c9dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9e0:	2206      	movs	r2, #6
 800c9e2:	f7f3 fc05 	bl	80001f0 <memchr>
 800c9e6:	2800      	cmp	r0, #0
 800c9e8:	d038      	beq.n	800ca5c <_svfiprintf_r+0x1d8>
 800c9ea:	4b23      	ldr	r3, [pc, #140]	; (800ca78 <_svfiprintf_r+0x1f4>)
 800c9ec:	bb1b      	cbnz	r3, 800ca36 <_svfiprintf_r+0x1b2>
 800c9ee:	9b03      	ldr	r3, [sp, #12]
 800c9f0:	3307      	adds	r3, #7
 800c9f2:	f023 0307 	bic.w	r3, r3, #7
 800c9f6:	3308      	adds	r3, #8
 800c9f8:	9303      	str	r3, [sp, #12]
 800c9fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9fc:	4433      	add	r3, r6
 800c9fe:	9309      	str	r3, [sp, #36]	; 0x24
 800ca00:	e767      	b.n	800c8d2 <_svfiprintf_r+0x4e>
 800ca02:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca06:	460c      	mov	r4, r1
 800ca08:	2001      	movs	r0, #1
 800ca0a:	e7a5      	b.n	800c958 <_svfiprintf_r+0xd4>
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	3401      	adds	r4, #1
 800ca10:	9305      	str	r3, [sp, #20]
 800ca12:	4619      	mov	r1, r3
 800ca14:	f04f 0c0a 	mov.w	ip, #10
 800ca18:	4620      	mov	r0, r4
 800ca1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca1e:	3a30      	subs	r2, #48	; 0x30
 800ca20:	2a09      	cmp	r2, #9
 800ca22:	d903      	bls.n	800ca2c <_svfiprintf_r+0x1a8>
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d0c5      	beq.n	800c9b4 <_svfiprintf_r+0x130>
 800ca28:	9105      	str	r1, [sp, #20]
 800ca2a:	e7c3      	b.n	800c9b4 <_svfiprintf_r+0x130>
 800ca2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca30:	4604      	mov	r4, r0
 800ca32:	2301      	movs	r3, #1
 800ca34:	e7f0      	b.n	800ca18 <_svfiprintf_r+0x194>
 800ca36:	ab03      	add	r3, sp, #12
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	462a      	mov	r2, r5
 800ca3c:	4b0f      	ldr	r3, [pc, #60]	; (800ca7c <_svfiprintf_r+0x1f8>)
 800ca3e:	a904      	add	r1, sp, #16
 800ca40:	4638      	mov	r0, r7
 800ca42:	f7fd ffc9 	bl	800a9d8 <_printf_float>
 800ca46:	1c42      	adds	r2, r0, #1
 800ca48:	4606      	mov	r6, r0
 800ca4a:	d1d6      	bne.n	800c9fa <_svfiprintf_r+0x176>
 800ca4c:	89ab      	ldrh	r3, [r5, #12]
 800ca4e:	065b      	lsls	r3, r3, #25
 800ca50:	f53f af2c 	bmi.w	800c8ac <_svfiprintf_r+0x28>
 800ca54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca56:	b01d      	add	sp, #116	; 0x74
 800ca58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca5c:	ab03      	add	r3, sp, #12
 800ca5e:	9300      	str	r3, [sp, #0]
 800ca60:	462a      	mov	r2, r5
 800ca62:	4b06      	ldr	r3, [pc, #24]	; (800ca7c <_svfiprintf_r+0x1f8>)
 800ca64:	a904      	add	r1, sp, #16
 800ca66:	4638      	mov	r0, r7
 800ca68:	f7fe fa5a 	bl	800af20 <_printf_i>
 800ca6c:	e7eb      	b.n	800ca46 <_svfiprintf_r+0x1c2>
 800ca6e:	bf00      	nop
 800ca70:	0800d914 	.word	0x0800d914
 800ca74:	0800d91e 	.word	0x0800d91e
 800ca78:	0800a9d9 	.word	0x0800a9d9
 800ca7c:	0800c7cd 	.word	0x0800c7cd
 800ca80:	0800d91a 	.word	0x0800d91a

0800ca84 <_sbrk_r>:
 800ca84:	b538      	push	{r3, r4, r5, lr}
 800ca86:	4d06      	ldr	r5, [pc, #24]	; (800caa0 <_sbrk_r+0x1c>)
 800ca88:	2300      	movs	r3, #0
 800ca8a:	4604      	mov	r4, r0
 800ca8c:	4608      	mov	r0, r1
 800ca8e:	602b      	str	r3, [r5, #0]
 800ca90:	f7f5 f914 	bl	8001cbc <_sbrk>
 800ca94:	1c43      	adds	r3, r0, #1
 800ca96:	d102      	bne.n	800ca9e <_sbrk_r+0x1a>
 800ca98:	682b      	ldr	r3, [r5, #0]
 800ca9a:	b103      	cbz	r3, 800ca9e <_sbrk_r+0x1a>
 800ca9c:	6023      	str	r3, [r4, #0]
 800ca9e:	bd38      	pop	{r3, r4, r5, pc}
 800caa0:	200022f0 	.word	0x200022f0

0800caa4 <__assert_func>:
 800caa4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800caa6:	4614      	mov	r4, r2
 800caa8:	461a      	mov	r2, r3
 800caaa:	4b09      	ldr	r3, [pc, #36]	; (800cad0 <__assert_func+0x2c>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4605      	mov	r5, r0
 800cab0:	68d8      	ldr	r0, [r3, #12]
 800cab2:	b14c      	cbz	r4, 800cac8 <__assert_func+0x24>
 800cab4:	4b07      	ldr	r3, [pc, #28]	; (800cad4 <__assert_func+0x30>)
 800cab6:	9100      	str	r1, [sp, #0]
 800cab8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800cabc:	4906      	ldr	r1, [pc, #24]	; (800cad8 <__assert_func+0x34>)
 800cabe:	462b      	mov	r3, r5
 800cac0:	f000 f80e 	bl	800cae0 <fiprintf>
 800cac4:	f000 faac 	bl	800d020 <abort>
 800cac8:	4b04      	ldr	r3, [pc, #16]	; (800cadc <__assert_func+0x38>)
 800caca:	461c      	mov	r4, r3
 800cacc:	e7f3      	b.n	800cab6 <__assert_func+0x12>
 800cace:	bf00      	nop
 800cad0:	2000013c 	.word	0x2000013c
 800cad4:	0800d925 	.word	0x0800d925
 800cad8:	0800d932 	.word	0x0800d932
 800cadc:	0800d960 	.word	0x0800d960

0800cae0 <fiprintf>:
 800cae0:	b40e      	push	{r1, r2, r3}
 800cae2:	b503      	push	{r0, r1, lr}
 800cae4:	4601      	mov	r1, r0
 800cae6:	ab03      	add	r3, sp, #12
 800cae8:	4805      	ldr	r0, [pc, #20]	; (800cb00 <fiprintf+0x20>)
 800caea:	f853 2b04 	ldr.w	r2, [r3], #4
 800caee:	6800      	ldr	r0, [r0, #0]
 800caf0:	9301      	str	r3, [sp, #4]
 800caf2:	f000 f897 	bl	800cc24 <_vfiprintf_r>
 800caf6:	b002      	add	sp, #8
 800caf8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cafc:	b003      	add	sp, #12
 800cafe:	4770      	bx	lr
 800cb00:	2000013c 	.word	0x2000013c

0800cb04 <__ascii_mbtowc>:
 800cb04:	b082      	sub	sp, #8
 800cb06:	b901      	cbnz	r1, 800cb0a <__ascii_mbtowc+0x6>
 800cb08:	a901      	add	r1, sp, #4
 800cb0a:	b142      	cbz	r2, 800cb1e <__ascii_mbtowc+0x1a>
 800cb0c:	b14b      	cbz	r3, 800cb22 <__ascii_mbtowc+0x1e>
 800cb0e:	7813      	ldrb	r3, [r2, #0]
 800cb10:	600b      	str	r3, [r1, #0]
 800cb12:	7812      	ldrb	r2, [r2, #0]
 800cb14:	1e10      	subs	r0, r2, #0
 800cb16:	bf18      	it	ne
 800cb18:	2001      	movne	r0, #1
 800cb1a:	b002      	add	sp, #8
 800cb1c:	4770      	bx	lr
 800cb1e:	4610      	mov	r0, r2
 800cb20:	e7fb      	b.n	800cb1a <__ascii_mbtowc+0x16>
 800cb22:	f06f 0001 	mvn.w	r0, #1
 800cb26:	e7f8      	b.n	800cb1a <__ascii_mbtowc+0x16>

0800cb28 <memmove>:
 800cb28:	4288      	cmp	r0, r1
 800cb2a:	b510      	push	{r4, lr}
 800cb2c:	eb01 0402 	add.w	r4, r1, r2
 800cb30:	d902      	bls.n	800cb38 <memmove+0x10>
 800cb32:	4284      	cmp	r4, r0
 800cb34:	4623      	mov	r3, r4
 800cb36:	d807      	bhi.n	800cb48 <memmove+0x20>
 800cb38:	1e43      	subs	r3, r0, #1
 800cb3a:	42a1      	cmp	r1, r4
 800cb3c:	d008      	beq.n	800cb50 <memmove+0x28>
 800cb3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb42:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb46:	e7f8      	b.n	800cb3a <memmove+0x12>
 800cb48:	4402      	add	r2, r0
 800cb4a:	4601      	mov	r1, r0
 800cb4c:	428a      	cmp	r2, r1
 800cb4e:	d100      	bne.n	800cb52 <memmove+0x2a>
 800cb50:	bd10      	pop	{r4, pc}
 800cb52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb5a:	e7f7      	b.n	800cb4c <memmove+0x24>

0800cb5c <__malloc_lock>:
 800cb5c:	4801      	ldr	r0, [pc, #4]	; (800cb64 <__malloc_lock+0x8>)
 800cb5e:	f000 bc1f 	b.w	800d3a0 <__retarget_lock_acquire_recursive>
 800cb62:	bf00      	nop
 800cb64:	200022f4 	.word	0x200022f4

0800cb68 <__malloc_unlock>:
 800cb68:	4801      	ldr	r0, [pc, #4]	; (800cb70 <__malloc_unlock+0x8>)
 800cb6a:	f000 bc1a 	b.w	800d3a2 <__retarget_lock_release_recursive>
 800cb6e:	bf00      	nop
 800cb70:	200022f4 	.word	0x200022f4

0800cb74 <_realloc_r>:
 800cb74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb78:	4680      	mov	r8, r0
 800cb7a:	4614      	mov	r4, r2
 800cb7c:	460e      	mov	r6, r1
 800cb7e:	b921      	cbnz	r1, 800cb8a <_realloc_r+0x16>
 800cb80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb84:	4611      	mov	r1, r2
 800cb86:	f7ff bdad 	b.w	800c6e4 <_malloc_r>
 800cb8a:	b92a      	cbnz	r2, 800cb98 <_realloc_r+0x24>
 800cb8c:	f7ff fd3e 	bl	800c60c <_free_r>
 800cb90:	4625      	mov	r5, r4
 800cb92:	4628      	mov	r0, r5
 800cb94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb98:	f000 fc6a 	bl	800d470 <_malloc_usable_size_r>
 800cb9c:	4284      	cmp	r4, r0
 800cb9e:	4607      	mov	r7, r0
 800cba0:	d802      	bhi.n	800cba8 <_realloc_r+0x34>
 800cba2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cba6:	d812      	bhi.n	800cbce <_realloc_r+0x5a>
 800cba8:	4621      	mov	r1, r4
 800cbaa:	4640      	mov	r0, r8
 800cbac:	f7ff fd9a 	bl	800c6e4 <_malloc_r>
 800cbb0:	4605      	mov	r5, r0
 800cbb2:	2800      	cmp	r0, #0
 800cbb4:	d0ed      	beq.n	800cb92 <_realloc_r+0x1e>
 800cbb6:	42bc      	cmp	r4, r7
 800cbb8:	4622      	mov	r2, r4
 800cbba:	4631      	mov	r1, r6
 800cbbc:	bf28      	it	cs
 800cbbe:	463a      	movcs	r2, r7
 800cbc0:	f7ff f97c 	bl	800bebc <memcpy>
 800cbc4:	4631      	mov	r1, r6
 800cbc6:	4640      	mov	r0, r8
 800cbc8:	f7ff fd20 	bl	800c60c <_free_r>
 800cbcc:	e7e1      	b.n	800cb92 <_realloc_r+0x1e>
 800cbce:	4635      	mov	r5, r6
 800cbd0:	e7df      	b.n	800cb92 <_realloc_r+0x1e>

0800cbd2 <__sfputc_r>:
 800cbd2:	6893      	ldr	r3, [r2, #8]
 800cbd4:	3b01      	subs	r3, #1
 800cbd6:	2b00      	cmp	r3, #0
 800cbd8:	b410      	push	{r4}
 800cbda:	6093      	str	r3, [r2, #8]
 800cbdc:	da08      	bge.n	800cbf0 <__sfputc_r+0x1e>
 800cbde:	6994      	ldr	r4, [r2, #24]
 800cbe0:	42a3      	cmp	r3, r4
 800cbe2:	db01      	blt.n	800cbe8 <__sfputc_r+0x16>
 800cbe4:	290a      	cmp	r1, #10
 800cbe6:	d103      	bne.n	800cbf0 <__sfputc_r+0x1e>
 800cbe8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbec:	f000 b94a 	b.w	800ce84 <__swbuf_r>
 800cbf0:	6813      	ldr	r3, [r2, #0]
 800cbf2:	1c58      	adds	r0, r3, #1
 800cbf4:	6010      	str	r0, [r2, #0]
 800cbf6:	7019      	strb	r1, [r3, #0]
 800cbf8:	4608      	mov	r0, r1
 800cbfa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbfe:	4770      	bx	lr

0800cc00 <__sfputs_r>:
 800cc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc02:	4606      	mov	r6, r0
 800cc04:	460f      	mov	r7, r1
 800cc06:	4614      	mov	r4, r2
 800cc08:	18d5      	adds	r5, r2, r3
 800cc0a:	42ac      	cmp	r4, r5
 800cc0c:	d101      	bne.n	800cc12 <__sfputs_r+0x12>
 800cc0e:	2000      	movs	r0, #0
 800cc10:	e007      	b.n	800cc22 <__sfputs_r+0x22>
 800cc12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc16:	463a      	mov	r2, r7
 800cc18:	4630      	mov	r0, r6
 800cc1a:	f7ff ffda 	bl	800cbd2 <__sfputc_r>
 800cc1e:	1c43      	adds	r3, r0, #1
 800cc20:	d1f3      	bne.n	800cc0a <__sfputs_r+0xa>
 800cc22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc24 <_vfiprintf_r>:
 800cc24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc28:	460d      	mov	r5, r1
 800cc2a:	b09d      	sub	sp, #116	; 0x74
 800cc2c:	4614      	mov	r4, r2
 800cc2e:	4698      	mov	r8, r3
 800cc30:	4606      	mov	r6, r0
 800cc32:	b118      	cbz	r0, 800cc3c <_vfiprintf_r+0x18>
 800cc34:	6983      	ldr	r3, [r0, #24]
 800cc36:	b90b      	cbnz	r3, 800cc3c <_vfiprintf_r+0x18>
 800cc38:	f000 fb14 	bl	800d264 <__sinit>
 800cc3c:	4b89      	ldr	r3, [pc, #548]	; (800ce64 <_vfiprintf_r+0x240>)
 800cc3e:	429d      	cmp	r5, r3
 800cc40:	d11b      	bne.n	800cc7a <_vfiprintf_r+0x56>
 800cc42:	6875      	ldr	r5, [r6, #4]
 800cc44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc46:	07d9      	lsls	r1, r3, #31
 800cc48:	d405      	bmi.n	800cc56 <_vfiprintf_r+0x32>
 800cc4a:	89ab      	ldrh	r3, [r5, #12]
 800cc4c:	059a      	lsls	r2, r3, #22
 800cc4e:	d402      	bmi.n	800cc56 <_vfiprintf_r+0x32>
 800cc50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc52:	f000 fba5 	bl	800d3a0 <__retarget_lock_acquire_recursive>
 800cc56:	89ab      	ldrh	r3, [r5, #12]
 800cc58:	071b      	lsls	r3, r3, #28
 800cc5a:	d501      	bpl.n	800cc60 <_vfiprintf_r+0x3c>
 800cc5c:	692b      	ldr	r3, [r5, #16]
 800cc5e:	b9eb      	cbnz	r3, 800cc9c <_vfiprintf_r+0x78>
 800cc60:	4629      	mov	r1, r5
 800cc62:	4630      	mov	r0, r6
 800cc64:	f000 f96e 	bl	800cf44 <__swsetup_r>
 800cc68:	b1c0      	cbz	r0, 800cc9c <_vfiprintf_r+0x78>
 800cc6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc6c:	07dc      	lsls	r4, r3, #31
 800cc6e:	d50e      	bpl.n	800cc8e <_vfiprintf_r+0x6a>
 800cc70:	f04f 30ff 	mov.w	r0, #4294967295
 800cc74:	b01d      	add	sp, #116	; 0x74
 800cc76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc7a:	4b7b      	ldr	r3, [pc, #492]	; (800ce68 <_vfiprintf_r+0x244>)
 800cc7c:	429d      	cmp	r5, r3
 800cc7e:	d101      	bne.n	800cc84 <_vfiprintf_r+0x60>
 800cc80:	68b5      	ldr	r5, [r6, #8]
 800cc82:	e7df      	b.n	800cc44 <_vfiprintf_r+0x20>
 800cc84:	4b79      	ldr	r3, [pc, #484]	; (800ce6c <_vfiprintf_r+0x248>)
 800cc86:	429d      	cmp	r5, r3
 800cc88:	bf08      	it	eq
 800cc8a:	68f5      	ldreq	r5, [r6, #12]
 800cc8c:	e7da      	b.n	800cc44 <_vfiprintf_r+0x20>
 800cc8e:	89ab      	ldrh	r3, [r5, #12]
 800cc90:	0598      	lsls	r0, r3, #22
 800cc92:	d4ed      	bmi.n	800cc70 <_vfiprintf_r+0x4c>
 800cc94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc96:	f000 fb84 	bl	800d3a2 <__retarget_lock_release_recursive>
 800cc9a:	e7e9      	b.n	800cc70 <_vfiprintf_r+0x4c>
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	9309      	str	r3, [sp, #36]	; 0x24
 800cca0:	2320      	movs	r3, #32
 800cca2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cca6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccaa:	2330      	movs	r3, #48	; 0x30
 800ccac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ce70 <_vfiprintf_r+0x24c>
 800ccb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccb4:	f04f 0901 	mov.w	r9, #1
 800ccb8:	4623      	mov	r3, r4
 800ccba:	469a      	mov	sl, r3
 800ccbc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccc0:	b10a      	cbz	r2, 800ccc6 <_vfiprintf_r+0xa2>
 800ccc2:	2a25      	cmp	r2, #37	; 0x25
 800ccc4:	d1f9      	bne.n	800ccba <_vfiprintf_r+0x96>
 800ccc6:	ebba 0b04 	subs.w	fp, sl, r4
 800ccca:	d00b      	beq.n	800cce4 <_vfiprintf_r+0xc0>
 800cccc:	465b      	mov	r3, fp
 800ccce:	4622      	mov	r2, r4
 800ccd0:	4629      	mov	r1, r5
 800ccd2:	4630      	mov	r0, r6
 800ccd4:	f7ff ff94 	bl	800cc00 <__sfputs_r>
 800ccd8:	3001      	adds	r0, #1
 800ccda:	f000 80aa 	beq.w	800ce32 <_vfiprintf_r+0x20e>
 800ccde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cce0:	445a      	add	r2, fp
 800cce2:	9209      	str	r2, [sp, #36]	; 0x24
 800cce4:	f89a 3000 	ldrb.w	r3, [sl]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	f000 80a2 	beq.w	800ce32 <_vfiprintf_r+0x20e>
 800ccee:	2300      	movs	r3, #0
 800ccf0:	f04f 32ff 	mov.w	r2, #4294967295
 800ccf4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ccf8:	f10a 0a01 	add.w	sl, sl, #1
 800ccfc:	9304      	str	r3, [sp, #16]
 800ccfe:	9307      	str	r3, [sp, #28]
 800cd00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd04:	931a      	str	r3, [sp, #104]	; 0x68
 800cd06:	4654      	mov	r4, sl
 800cd08:	2205      	movs	r2, #5
 800cd0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd0e:	4858      	ldr	r0, [pc, #352]	; (800ce70 <_vfiprintf_r+0x24c>)
 800cd10:	f7f3 fa6e 	bl	80001f0 <memchr>
 800cd14:	9a04      	ldr	r2, [sp, #16]
 800cd16:	b9d8      	cbnz	r0, 800cd50 <_vfiprintf_r+0x12c>
 800cd18:	06d1      	lsls	r1, r2, #27
 800cd1a:	bf44      	itt	mi
 800cd1c:	2320      	movmi	r3, #32
 800cd1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd22:	0713      	lsls	r3, r2, #28
 800cd24:	bf44      	itt	mi
 800cd26:	232b      	movmi	r3, #43	; 0x2b
 800cd28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd2c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd30:	2b2a      	cmp	r3, #42	; 0x2a
 800cd32:	d015      	beq.n	800cd60 <_vfiprintf_r+0x13c>
 800cd34:	9a07      	ldr	r2, [sp, #28]
 800cd36:	4654      	mov	r4, sl
 800cd38:	2000      	movs	r0, #0
 800cd3a:	f04f 0c0a 	mov.w	ip, #10
 800cd3e:	4621      	mov	r1, r4
 800cd40:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd44:	3b30      	subs	r3, #48	; 0x30
 800cd46:	2b09      	cmp	r3, #9
 800cd48:	d94e      	bls.n	800cde8 <_vfiprintf_r+0x1c4>
 800cd4a:	b1b0      	cbz	r0, 800cd7a <_vfiprintf_r+0x156>
 800cd4c:	9207      	str	r2, [sp, #28]
 800cd4e:	e014      	b.n	800cd7a <_vfiprintf_r+0x156>
 800cd50:	eba0 0308 	sub.w	r3, r0, r8
 800cd54:	fa09 f303 	lsl.w	r3, r9, r3
 800cd58:	4313      	orrs	r3, r2
 800cd5a:	9304      	str	r3, [sp, #16]
 800cd5c:	46a2      	mov	sl, r4
 800cd5e:	e7d2      	b.n	800cd06 <_vfiprintf_r+0xe2>
 800cd60:	9b03      	ldr	r3, [sp, #12]
 800cd62:	1d19      	adds	r1, r3, #4
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	9103      	str	r1, [sp, #12]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	bfbb      	ittet	lt
 800cd6c:	425b      	neglt	r3, r3
 800cd6e:	f042 0202 	orrlt.w	r2, r2, #2
 800cd72:	9307      	strge	r3, [sp, #28]
 800cd74:	9307      	strlt	r3, [sp, #28]
 800cd76:	bfb8      	it	lt
 800cd78:	9204      	strlt	r2, [sp, #16]
 800cd7a:	7823      	ldrb	r3, [r4, #0]
 800cd7c:	2b2e      	cmp	r3, #46	; 0x2e
 800cd7e:	d10c      	bne.n	800cd9a <_vfiprintf_r+0x176>
 800cd80:	7863      	ldrb	r3, [r4, #1]
 800cd82:	2b2a      	cmp	r3, #42	; 0x2a
 800cd84:	d135      	bne.n	800cdf2 <_vfiprintf_r+0x1ce>
 800cd86:	9b03      	ldr	r3, [sp, #12]
 800cd88:	1d1a      	adds	r2, r3, #4
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	9203      	str	r2, [sp, #12]
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	bfb8      	it	lt
 800cd92:	f04f 33ff 	movlt.w	r3, #4294967295
 800cd96:	3402      	adds	r4, #2
 800cd98:	9305      	str	r3, [sp, #20]
 800cd9a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ce80 <_vfiprintf_r+0x25c>
 800cd9e:	7821      	ldrb	r1, [r4, #0]
 800cda0:	2203      	movs	r2, #3
 800cda2:	4650      	mov	r0, sl
 800cda4:	f7f3 fa24 	bl	80001f0 <memchr>
 800cda8:	b140      	cbz	r0, 800cdbc <_vfiprintf_r+0x198>
 800cdaa:	2340      	movs	r3, #64	; 0x40
 800cdac:	eba0 000a 	sub.w	r0, r0, sl
 800cdb0:	fa03 f000 	lsl.w	r0, r3, r0
 800cdb4:	9b04      	ldr	r3, [sp, #16]
 800cdb6:	4303      	orrs	r3, r0
 800cdb8:	3401      	adds	r4, #1
 800cdba:	9304      	str	r3, [sp, #16]
 800cdbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdc0:	482c      	ldr	r0, [pc, #176]	; (800ce74 <_vfiprintf_r+0x250>)
 800cdc2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdc6:	2206      	movs	r2, #6
 800cdc8:	f7f3 fa12 	bl	80001f0 <memchr>
 800cdcc:	2800      	cmp	r0, #0
 800cdce:	d03f      	beq.n	800ce50 <_vfiprintf_r+0x22c>
 800cdd0:	4b29      	ldr	r3, [pc, #164]	; (800ce78 <_vfiprintf_r+0x254>)
 800cdd2:	bb1b      	cbnz	r3, 800ce1c <_vfiprintf_r+0x1f8>
 800cdd4:	9b03      	ldr	r3, [sp, #12]
 800cdd6:	3307      	adds	r3, #7
 800cdd8:	f023 0307 	bic.w	r3, r3, #7
 800cddc:	3308      	adds	r3, #8
 800cdde:	9303      	str	r3, [sp, #12]
 800cde0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cde2:	443b      	add	r3, r7
 800cde4:	9309      	str	r3, [sp, #36]	; 0x24
 800cde6:	e767      	b.n	800ccb8 <_vfiprintf_r+0x94>
 800cde8:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdec:	460c      	mov	r4, r1
 800cdee:	2001      	movs	r0, #1
 800cdf0:	e7a5      	b.n	800cd3e <_vfiprintf_r+0x11a>
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	3401      	adds	r4, #1
 800cdf6:	9305      	str	r3, [sp, #20]
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	f04f 0c0a 	mov.w	ip, #10
 800cdfe:	4620      	mov	r0, r4
 800ce00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce04:	3a30      	subs	r2, #48	; 0x30
 800ce06:	2a09      	cmp	r2, #9
 800ce08:	d903      	bls.n	800ce12 <_vfiprintf_r+0x1ee>
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d0c5      	beq.n	800cd9a <_vfiprintf_r+0x176>
 800ce0e:	9105      	str	r1, [sp, #20]
 800ce10:	e7c3      	b.n	800cd9a <_vfiprintf_r+0x176>
 800ce12:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce16:	4604      	mov	r4, r0
 800ce18:	2301      	movs	r3, #1
 800ce1a:	e7f0      	b.n	800cdfe <_vfiprintf_r+0x1da>
 800ce1c:	ab03      	add	r3, sp, #12
 800ce1e:	9300      	str	r3, [sp, #0]
 800ce20:	462a      	mov	r2, r5
 800ce22:	4b16      	ldr	r3, [pc, #88]	; (800ce7c <_vfiprintf_r+0x258>)
 800ce24:	a904      	add	r1, sp, #16
 800ce26:	4630      	mov	r0, r6
 800ce28:	f7fd fdd6 	bl	800a9d8 <_printf_float>
 800ce2c:	4607      	mov	r7, r0
 800ce2e:	1c78      	adds	r0, r7, #1
 800ce30:	d1d6      	bne.n	800cde0 <_vfiprintf_r+0x1bc>
 800ce32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce34:	07d9      	lsls	r1, r3, #31
 800ce36:	d405      	bmi.n	800ce44 <_vfiprintf_r+0x220>
 800ce38:	89ab      	ldrh	r3, [r5, #12]
 800ce3a:	059a      	lsls	r2, r3, #22
 800ce3c:	d402      	bmi.n	800ce44 <_vfiprintf_r+0x220>
 800ce3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce40:	f000 faaf 	bl	800d3a2 <__retarget_lock_release_recursive>
 800ce44:	89ab      	ldrh	r3, [r5, #12]
 800ce46:	065b      	lsls	r3, r3, #25
 800ce48:	f53f af12 	bmi.w	800cc70 <_vfiprintf_r+0x4c>
 800ce4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce4e:	e711      	b.n	800cc74 <_vfiprintf_r+0x50>
 800ce50:	ab03      	add	r3, sp, #12
 800ce52:	9300      	str	r3, [sp, #0]
 800ce54:	462a      	mov	r2, r5
 800ce56:	4b09      	ldr	r3, [pc, #36]	; (800ce7c <_vfiprintf_r+0x258>)
 800ce58:	a904      	add	r1, sp, #16
 800ce5a:	4630      	mov	r0, r6
 800ce5c:	f7fe f860 	bl	800af20 <_printf_i>
 800ce60:	e7e4      	b.n	800ce2c <_vfiprintf_r+0x208>
 800ce62:	bf00      	nop
 800ce64:	0800da8c 	.word	0x0800da8c
 800ce68:	0800daac 	.word	0x0800daac
 800ce6c:	0800da6c 	.word	0x0800da6c
 800ce70:	0800d914 	.word	0x0800d914
 800ce74:	0800d91e 	.word	0x0800d91e
 800ce78:	0800a9d9 	.word	0x0800a9d9
 800ce7c:	0800cc01 	.word	0x0800cc01
 800ce80:	0800d91a 	.word	0x0800d91a

0800ce84 <__swbuf_r>:
 800ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce86:	460e      	mov	r6, r1
 800ce88:	4614      	mov	r4, r2
 800ce8a:	4605      	mov	r5, r0
 800ce8c:	b118      	cbz	r0, 800ce96 <__swbuf_r+0x12>
 800ce8e:	6983      	ldr	r3, [r0, #24]
 800ce90:	b90b      	cbnz	r3, 800ce96 <__swbuf_r+0x12>
 800ce92:	f000 f9e7 	bl	800d264 <__sinit>
 800ce96:	4b21      	ldr	r3, [pc, #132]	; (800cf1c <__swbuf_r+0x98>)
 800ce98:	429c      	cmp	r4, r3
 800ce9a:	d12b      	bne.n	800cef4 <__swbuf_r+0x70>
 800ce9c:	686c      	ldr	r4, [r5, #4]
 800ce9e:	69a3      	ldr	r3, [r4, #24]
 800cea0:	60a3      	str	r3, [r4, #8]
 800cea2:	89a3      	ldrh	r3, [r4, #12]
 800cea4:	071a      	lsls	r2, r3, #28
 800cea6:	d52f      	bpl.n	800cf08 <__swbuf_r+0x84>
 800cea8:	6923      	ldr	r3, [r4, #16]
 800ceaa:	b36b      	cbz	r3, 800cf08 <__swbuf_r+0x84>
 800ceac:	6923      	ldr	r3, [r4, #16]
 800ceae:	6820      	ldr	r0, [r4, #0]
 800ceb0:	1ac0      	subs	r0, r0, r3
 800ceb2:	6963      	ldr	r3, [r4, #20]
 800ceb4:	b2f6      	uxtb	r6, r6
 800ceb6:	4283      	cmp	r3, r0
 800ceb8:	4637      	mov	r7, r6
 800ceba:	dc04      	bgt.n	800cec6 <__swbuf_r+0x42>
 800cebc:	4621      	mov	r1, r4
 800cebe:	4628      	mov	r0, r5
 800cec0:	f000 f93c 	bl	800d13c <_fflush_r>
 800cec4:	bb30      	cbnz	r0, 800cf14 <__swbuf_r+0x90>
 800cec6:	68a3      	ldr	r3, [r4, #8]
 800cec8:	3b01      	subs	r3, #1
 800ceca:	60a3      	str	r3, [r4, #8]
 800cecc:	6823      	ldr	r3, [r4, #0]
 800cece:	1c5a      	adds	r2, r3, #1
 800ced0:	6022      	str	r2, [r4, #0]
 800ced2:	701e      	strb	r6, [r3, #0]
 800ced4:	6963      	ldr	r3, [r4, #20]
 800ced6:	3001      	adds	r0, #1
 800ced8:	4283      	cmp	r3, r0
 800ceda:	d004      	beq.n	800cee6 <__swbuf_r+0x62>
 800cedc:	89a3      	ldrh	r3, [r4, #12]
 800cede:	07db      	lsls	r3, r3, #31
 800cee0:	d506      	bpl.n	800cef0 <__swbuf_r+0x6c>
 800cee2:	2e0a      	cmp	r6, #10
 800cee4:	d104      	bne.n	800cef0 <__swbuf_r+0x6c>
 800cee6:	4621      	mov	r1, r4
 800cee8:	4628      	mov	r0, r5
 800ceea:	f000 f927 	bl	800d13c <_fflush_r>
 800ceee:	b988      	cbnz	r0, 800cf14 <__swbuf_r+0x90>
 800cef0:	4638      	mov	r0, r7
 800cef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cef4:	4b0a      	ldr	r3, [pc, #40]	; (800cf20 <__swbuf_r+0x9c>)
 800cef6:	429c      	cmp	r4, r3
 800cef8:	d101      	bne.n	800cefe <__swbuf_r+0x7a>
 800cefa:	68ac      	ldr	r4, [r5, #8]
 800cefc:	e7cf      	b.n	800ce9e <__swbuf_r+0x1a>
 800cefe:	4b09      	ldr	r3, [pc, #36]	; (800cf24 <__swbuf_r+0xa0>)
 800cf00:	429c      	cmp	r4, r3
 800cf02:	bf08      	it	eq
 800cf04:	68ec      	ldreq	r4, [r5, #12]
 800cf06:	e7ca      	b.n	800ce9e <__swbuf_r+0x1a>
 800cf08:	4621      	mov	r1, r4
 800cf0a:	4628      	mov	r0, r5
 800cf0c:	f000 f81a 	bl	800cf44 <__swsetup_r>
 800cf10:	2800      	cmp	r0, #0
 800cf12:	d0cb      	beq.n	800ceac <__swbuf_r+0x28>
 800cf14:	f04f 37ff 	mov.w	r7, #4294967295
 800cf18:	e7ea      	b.n	800cef0 <__swbuf_r+0x6c>
 800cf1a:	bf00      	nop
 800cf1c:	0800da8c 	.word	0x0800da8c
 800cf20:	0800daac 	.word	0x0800daac
 800cf24:	0800da6c 	.word	0x0800da6c

0800cf28 <__ascii_wctomb>:
 800cf28:	b149      	cbz	r1, 800cf3e <__ascii_wctomb+0x16>
 800cf2a:	2aff      	cmp	r2, #255	; 0xff
 800cf2c:	bf85      	ittet	hi
 800cf2e:	238a      	movhi	r3, #138	; 0x8a
 800cf30:	6003      	strhi	r3, [r0, #0]
 800cf32:	700a      	strbls	r2, [r1, #0]
 800cf34:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf38:	bf98      	it	ls
 800cf3a:	2001      	movls	r0, #1
 800cf3c:	4770      	bx	lr
 800cf3e:	4608      	mov	r0, r1
 800cf40:	4770      	bx	lr
	...

0800cf44 <__swsetup_r>:
 800cf44:	4b32      	ldr	r3, [pc, #200]	; (800d010 <__swsetup_r+0xcc>)
 800cf46:	b570      	push	{r4, r5, r6, lr}
 800cf48:	681d      	ldr	r5, [r3, #0]
 800cf4a:	4606      	mov	r6, r0
 800cf4c:	460c      	mov	r4, r1
 800cf4e:	b125      	cbz	r5, 800cf5a <__swsetup_r+0x16>
 800cf50:	69ab      	ldr	r3, [r5, #24]
 800cf52:	b913      	cbnz	r3, 800cf5a <__swsetup_r+0x16>
 800cf54:	4628      	mov	r0, r5
 800cf56:	f000 f985 	bl	800d264 <__sinit>
 800cf5a:	4b2e      	ldr	r3, [pc, #184]	; (800d014 <__swsetup_r+0xd0>)
 800cf5c:	429c      	cmp	r4, r3
 800cf5e:	d10f      	bne.n	800cf80 <__swsetup_r+0x3c>
 800cf60:	686c      	ldr	r4, [r5, #4]
 800cf62:	89a3      	ldrh	r3, [r4, #12]
 800cf64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf68:	0719      	lsls	r1, r3, #28
 800cf6a:	d42c      	bmi.n	800cfc6 <__swsetup_r+0x82>
 800cf6c:	06dd      	lsls	r5, r3, #27
 800cf6e:	d411      	bmi.n	800cf94 <__swsetup_r+0x50>
 800cf70:	2309      	movs	r3, #9
 800cf72:	6033      	str	r3, [r6, #0]
 800cf74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cf78:	81a3      	strh	r3, [r4, #12]
 800cf7a:	f04f 30ff 	mov.w	r0, #4294967295
 800cf7e:	e03e      	b.n	800cffe <__swsetup_r+0xba>
 800cf80:	4b25      	ldr	r3, [pc, #148]	; (800d018 <__swsetup_r+0xd4>)
 800cf82:	429c      	cmp	r4, r3
 800cf84:	d101      	bne.n	800cf8a <__swsetup_r+0x46>
 800cf86:	68ac      	ldr	r4, [r5, #8]
 800cf88:	e7eb      	b.n	800cf62 <__swsetup_r+0x1e>
 800cf8a:	4b24      	ldr	r3, [pc, #144]	; (800d01c <__swsetup_r+0xd8>)
 800cf8c:	429c      	cmp	r4, r3
 800cf8e:	bf08      	it	eq
 800cf90:	68ec      	ldreq	r4, [r5, #12]
 800cf92:	e7e6      	b.n	800cf62 <__swsetup_r+0x1e>
 800cf94:	0758      	lsls	r0, r3, #29
 800cf96:	d512      	bpl.n	800cfbe <__swsetup_r+0x7a>
 800cf98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cf9a:	b141      	cbz	r1, 800cfae <__swsetup_r+0x6a>
 800cf9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfa0:	4299      	cmp	r1, r3
 800cfa2:	d002      	beq.n	800cfaa <__swsetup_r+0x66>
 800cfa4:	4630      	mov	r0, r6
 800cfa6:	f7ff fb31 	bl	800c60c <_free_r>
 800cfaa:	2300      	movs	r3, #0
 800cfac:	6363      	str	r3, [r4, #52]	; 0x34
 800cfae:	89a3      	ldrh	r3, [r4, #12]
 800cfb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cfb4:	81a3      	strh	r3, [r4, #12]
 800cfb6:	2300      	movs	r3, #0
 800cfb8:	6063      	str	r3, [r4, #4]
 800cfba:	6923      	ldr	r3, [r4, #16]
 800cfbc:	6023      	str	r3, [r4, #0]
 800cfbe:	89a3      	ldrh	r3, [r4, #12]
 800cfc0:	f043 0308 	orr.w	r3, r3, #8
 800cfc4:	81a3      	strh	r3, [r4, #12]
 800cfc6:	6923      	ldr	r3, [r4, #16]
 800cfc8:	b94b      	cbnz	r3, 800cfde <__swsetup_r+0x9a>
 800cfca:	89a3      	ldrh	r3, [r4, #12]
 800cfcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cfd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cfd4:	d003      	beq.n	800cfde <__swsetup_r+0x9a>
 800cfd6:	4621      	mov	r1, r4
 800cfd8:	4630      	mov	r0, r6
 800cfda:	f000 fa09 	bl	800d3f0 <__smakebuf_r>
 800cfde:	89a0      	ldrh	r0, [r4, #12]
 800cfe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cfe4:	f010 0301 	ands.w	r3, r0, #1
 800cfe8:	d00a      	beq.n	800d000 <__swsetup_r+0xbc>
 800cfea:	2300      	movs	r3, #0
 800cfec:	60a3      	str	r3, [r4, #8]
 800cfee:	6963      	ldr	r3, [r4, #20]
 800cff0:	425b      	negs	r3, r3
 800cff2:	61a3      	str	r3, [r4, #24]
 800cff4:	6923      	ldr	r3, [r4, #16]
 800cff6:	b943      	cbnz	r3, 800d00a <__swsetup_r+0xc6>
 800cff8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cffc:	d1ba      	bne.n	800cf74 <__swsetup_r+0x30>
 800cffe:	bd70      	pop	{r4, r5, r6, pc}
 800d000:	0781      	lsls	r1, r0, #30
 800d002:	bf58      	it	pl
 800d004:	6963      	ldrpl	r3, [r4, #20]
 800d006:	60a3      	str	r3, [r4, #8]
 800d008:	e7f4      	b.n	800cff4 <__swsetup_r+0xb0>
 800d00a:	2000      	movs	r0, #0
 800d00c:	e7f7      	b.n	800cffe <__swsetup_r+0xba>
 800d00e:	bf00      	nop
 800d010:	2000013c 	.word	0x2000013c
 800d014:	0800da8c 	.word	0x0800da8c
 800d018:	0800daac 	.word	0x0800daac
 800d01c:	0800da6c 	.word	0x0800da6c

0800d020 <abort>:
 800d020:	b508      	push	{r3, lr}
 800d022:	2006      	movs	r0, #6
 800d024:	f000 fa54 	bl	800d4d0 <raise>
 800d028:	2001      	movs	r0, #1
 800d02a:	f7f4 fdcf 	bl	8001bcc <_exit>
	...

0800d030 <__sflush_r>:
 800d030:	898a      	ldrh	r2, [r1, #12]
 800d032:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d036:	4605      	mov	r5, r0
 800d038:	0710      	lsls	r0, r2, #28
 800d03a:	460c      	mov	r4, r1
 800d03c:	d458      	bmi.n	800d0f0 <__sflush_r+0xc0>
 800d03e:	684b      	ldr	r3, [r1, #4]
 800d040:	2b00      	cmp	r3, #0
 800d042:	dc05      	bgt.n	800d050 <__sflush_r+0x20>
 800d044:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d046:	2b00      	cmp	r3, #0
 800d048:	dc02      	bgt.n	800d050 <__sflush_r+0x20>
 800d04a:	2000      	movs	r0, #0
 800d04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d050:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d052:	2e00      	cmp	r6, #0
 800d054:	d0f9      	beq.n	800d04a <__sflush_r+0x1a>
 800d056:	2300      	movs	r3, #0
 800d058:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d05c:	682f      	ldr	r7, [r5, #0]
 800d05e:	602b      	str	r3, [r5, #0]
 800d060:	d032      	beq.n	800d0c8 <__sflush_r+0x98>
 800d062:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d064:	89a3      	ldrh	r3, [r4, #12]
 800d066:	075a      	lsls	r2, r3, #29
 800d068:	d505      	bpl.n	800d076 <__sflush_r+0x46>
 800d06a:	6863      	ldr	r3, [r4, #4]
 800d06c:	1ac0      	subs	r0, r0, r3
 800d06e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d070:	b10b      	cbz	r3, 800d076 <__sflush_r+0x46>
 800d072:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d074:	1ac0      	subs	r0, r0, r3
 800d076:	2300      	movs	r3, #0
 800d078:	4602      	mov	r2, r0
 800d07a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d07c:	6a21      	ldr	r1, [r4, #32]
 800d07e:	4628      	mov	r0, r5
 800d080:	47b0      	blx	r6
 800d082:	1c43      	adds	r3, r0, #1
 800d084:	89a3      	ldrh	r3, [r4, #12]
 800d086:	d106      	bne.n	800d096 <__sflush_r+0x66>
 800d088:	6829      	ldr	r1, [r5, #0]
 800d08a:	291d      	cmp	r1, #29
 800d08c:	d82c      	bhi.n	800d0e8 <__sflush_r+0xb8>
 800d08e:	4a2a      	ldr	r2, [pc, #168]	; (800d138 <__sflush_r+0x108>)
 800d090:	40ca      	lsrs	r2, r1
 800d092:	07d6      	lsls	r6, r2, #31
 800d094:	d528      	bpl.n	800d0e8 <__sflush_r+0xb8>
 800d096:	2200      	movs	r2, #0
 800d098:	6062      	str	r2, [r4, #4]
 800d09a:	04d9      	lsls	r1, r3, #19
 800d09c:	6922      	ldr	r2, [r4, #16]
 800d09e:	6022      	str	r2, [r4, #0]
 800d0a0:	d504      	bpl.n	800d0ac <__sflush_r+0x7c>
 800d0a2:	1c42      	adds	r2, r0, #1
 800d0a4:	d101      	bne.n	800d0aa <__sflush_r+0x7a>
 800d0a6:	682b      	ldr	r3, [r5, #0]
 800d0a8:	b903      	cbnz	r3, 800d0ac <__sflush_r+0x7c>
 800d0aa:	6560      	str	r0, [r4, #84]	; 0x54
 800d0ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0ae:	602f      	str	r7, [r5, #0]
 800d0b0:	2900      	cmp	r1, #0
 800d0b2:	d0ca      	beq.n	800d04a <__sflush_r+0x1a>
 800d0b4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0b8:	4299      	cmp	r1, r3
 800d0ba:	d002      	beq.n	800d0c2 <__sflush_r+0x92>
 800d0bc:	4628      	mov	r0, r5
 800d0be:	f7ff faa5 	bl	800c60c <_free_r>
 800d0c2:	2000      	movs	r0, #0
 800d0c4:	6360      	str	r0, [r4, #52]	; 0x34
 800d0c6:	e7c1      	b.n	800d04c <__sflush_r+0x1c>
 800d0c8:	6a21      	ldr	r1, [r4, #32]
 800d0ca:	2301      	movs	r3, #1
 800d0cc:	4628      	mov	r0, r5
 800d0ce:	47b0      	blx	r6
 800d0d0:	1c41      	adds	r1, r0, #1
 800d0d2:	d1c7      	bne.n	800d064 <__sflush_r+0x34>
 800d0d4:	682b      	ldr	r3, [r5, #0]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d0c4      	beq.n	800d064 <__sflush_r+0x34>
 800d0da:	2b1d      	cmp	r3, #29
 800d0dc:	d001      	beq.n	800d0e2 <__sflush_r+0xb2>
 800d0de:	2b16      	cmp	r3, #22
 800d0e0:	d101      	bne.n	800d0e6 <__sflush_r+0xb6>
 800d0e2:	602f      	str	r7, [r5, #0]
 800d0e4:	e7b1      	b.n	800d04a <__sflush_r+0x1a>
 800d0e6:	89a3      	ldrh	r3, [r4, #12]
 800d0e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0ec:	81a3      	strh	r3, [r4, #12]
 800d0ee:	e7ad      	b.n	800d04c <__sflush_r+0x1c>
 800d0f0:	690f      	ldr	r7, [r1, #16]
 800d0f2:	2f00      	cmp	r7, #0
 800d0f4:	d0a9      	beq.n	800d04a <__sflush_r+0x1a>
 800d0f6:	0793      	lsls	r3, r2, #30
 800d0f8:	680e      	ldr	r6, [r1, #0]
 800d0fa:	bf08      	it	eq
 800d0fc:	694b      	ldreq	r3, [r1, #20]
 800d0fe:	600f      	str	r7, [r1, #0]
 800d100:	bf18      	it	ne
 800d102:	2300      	movne	r3, #0
 800d104:	eba6 0807 	sub.w	r8, r6, r7
 800d108:	608b      	str	r3, [r1, #8]
 800d10a:	f1b8 0f00 	cmp.w	r8, #0
 800d10e:	dd9c      	ble.n	800d04a <__sflush_r+0x1a>
 800d110:	6a21      	ldr	r1, [r4, #32]
 800d112:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d114:	4643      	mov	r3, r8
 800d116:	463a      	mov	r2, r7
 800d118:	4628      	mov	r0, r5
 800d11a:	47b0      	blx	r6
 800d11c:	2800      	cmp	r0, #0
 800d11e:	dc06      	bgt.n	800d12e <__sflush_r+0xfe>
 800d120:	89a3      	ldrh	r3, [r4, #12]
 800d122:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d126:	81a3      	strh	r3, [r4, #12]
 800d128:	f04f 30ff 	mov.w	r0, #4294967295
 800d12c:	e78e      	b.n	800d04c <__sflush_r+0x1c>
 800d12e:	4407      	add	r7, r0
 800d130:	eba8 0800 	sub.w	r8, r8, r0
 800d134:	e7e9      	b.n	800d10a <__sflush_r+0xda>
 800d136:	bf00      	nop
 800d138:	20400001 	.word	0x20400001

0800d13c <_fflush_r>:
 800d13c:	b538      	push	{r3, r4, r5, lr}
 800d13e:	690b      	ldr	r3, [r1, #16]
 800d140:	4605      	mov	r5, r0
 800d142:	460c      	mov	r4, r1
 800d144:	b913      	cbnz	r3, 800d14c <_fflush_r+0x10>
 800d146:	2500      	movs	r5, #0
 800d148:	4628      	mov	r0, r5
 800d14a:	bd38      	pop	{r3, r4, r5, pc}
 800d14c:	b118      	cbz	r0, 800d156 <_fflush_r+0x1a>
 800d14e:	6983      	ldr	r3, [r0, #24]
 800d150:	b90b      	cbnz	r3, 800d156 <_fflush_r+0x1a>
 800d152:	f000 f887 	bl	800d264 <__sinit>
 800d156:	4b14      	ldr	r3, [pc, #80]	; (800d1a8 <_fflush_r+0x6c>)
 800d158:	429c      	cmp	r4, r3
 800d15a:	d11b      	bne.n	800d194 <_fflush_r+0x58>
 800d15c:	686c      	ldr	r4, [r5, #4]
 800d15e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d162:	2b00      	cmp	r3, #0
 800d164:	d0ef      	beq.n	800d146 <_fflush_r+0xa>
 800d166:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d168:	07d0      	lsls	r0, r2, #31
 800d16a:	d404      	bmi.n	800d176 <_fflush_r+0x3a>
 800d16c:	0599      	lsls	r1, r3, #22
 800d16e:	d402      	bmi.n	800d176 <_fflush_r+0x3a>
 800d170:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d172:	f000 f915 	bl	800d3a0 <__retarget_lock_acquire_recursive>
 800d176:	4628      	mov	r0, r5
 800d178:	4621      	mov	r1, r4
 800d17a:	f7ff ff59 	bl	800d030 <__sflush_r>
 800d17e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d180:	07da      	lsls	r2, r3, #31
 800d182:	4605      	mov	r5, r0
 800d184:	d4e0      	bmi.n	800d148 <_fflush_r+0xc>
 800d186:	89a3      	ldrh	r3, [r4, #12]
 800d188:	059b      	lsls	r3, r3, #22
 800d18a:	d4dd      	bmi.n	800d148 <_fflush_r+0xc>
 800d18c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d18e:	f000 f908 	bl	800d3a2 <__retarget_lock_release_recursive>
 800d192:	e7d9      	b.n	800d148 <_fflush_r+0xc>
 800d194:	4b05      	ldr	r3, [pc, #20]	; (800d1ac <_fflush_r+0x70>)
 800d196:	429c      	cmp	r4, r3
 800d198:	d101      	bne.n	800d19e <_fflush_r+0x62>
 800d19a:	68ac      	ldr	r4, [r5, #8]
 800d19c:	e7df      	b.n	800d15e <_fflush_r+0x22>
 800d19e:	4b04      	ldr	r3, [pc, #16]	; (800d1b0 <_fflush_r+0x74>)
 800d1a0:	429c      	cmp	r4, r3
 800d1a2:	bf08      	it	eq
 800d1a4:	68ec      	ldreq	r4, [r5, #12]
 800d1a6:	e7da      	b.n	800d15e <_fflush_r+0x22>
 800d1a8:	0800da8c 	.word	0x0800da8c
 800d1ac:	0800daac 	.word	0x0800daac
 800d1b0:	0800da6c 	.word	0x0800da6c

0800d1b4 <std>:
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	b510      	push	{r4, lr}
 800d1b8:	4604      	mov	r4, r0
 800d1ba:	e9c0 3300 	strd	r3, r3, [r0]
 800d1be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1c2:	6083      	str	r3, [r0, #8]
 800d1c4:	8181      	strh	r1, [r0, #12]
 800d1c6:	6643      	str	r3, [r0, #100]	; 0x64
 800d1c8:	81c2      	strh	r2, [r0, #14]
 800d1ca:	6183      	str	r3, [r0, #24]
 800d1cc:	4619      	mov	r1, r3
 800d1ce:	2208      	movs	r2, #8
 800d1d0:	305c      	adds	r0, #92	; 0x5c
 800d1d2:	f7fd fb59 	bl	800a888 <memset>
 800d1d6:	4b05      	ldr	r3, [pc, #20]	; (800d1ec <std+0x38>)
 800d1d8:	6263      	str	r3, [r4, #36]	; 0x24
 800d1da:	4b05      	ldr	r3, [pc, #20]	; (800d1f0 <std+0x3c>)
 800d1dc:	62a3      	str	r3, [r4, #40]	; 0x28
 800d1de:	4b05      	ldr	r3, [pc, #20]	; (800d1f4 <std+0x40>)
 800d1e0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d1e2:	4b05      	ldr	r3, [pc, #20]	; (800d1f8 <std+0x44>)
 800d1e4:	6224      	str	r4, [r4, #32]
 800d1e6:	6323      	str	r3, [r4, #48]	; 0x30
 800d1e8:	bd10      	pop	{r4, pc}
 800d1ea:	bf00      	nop
 800d1ec:	0800d509 	.word	0x0800d509
 800d1f0:	0800d52b 	.word	0x0800d52b
 800d1f4:	0800d563 	.word	0x0800d563
 800d1f8:	0800d587 	.word	0x0800d587

0800d1fc <_cleanup_r>:
 800d1fc:	4901      	ldr	r1, [pc, #4]	; (800d204 <_cleanup_r+0x8>)
 800d1fe:	f000 b8af 	b.w	800d360 <_fwalk_reent>
 800d202:	bf00      	nop
 800d204:	0800d13d 	.word	0x0800d13d

0800d208 <__sfmoreglue>:
 800d208:	b570      	push	{r4, r5, r6, lr}
 800d20a:	2268      	movs	r2, #104	; 0x68
 800d20c:	1e4d      	subs	r5, r1, #1
 800d20e:	4355      	muls	r5, r2
 800d210:	460e      	mov	r6, r1
 800d212:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d216:	f7ff fa65 	bl	800c6e4 <_malloc_r>
 800d21a:	4604      	mov	r4, r0
 800d21c:	b140      	cbz	r0, 800d230 <__sfmoreglue+0x28>
 800d21e:	2100      	movs	r1, #0
 800d220:	e9c0 1600 	strd	r1, r6, [r0]
 800d224:	300c      	adds	r0, #12
 800d226:	60a0      	str	r0, [r4, #8]
 800d228:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d22c:	f7fd fb2c 	bl	800a888 <memset>
 800d230:	4620      	mov	r0, r4
 800d232:	bd70      	pop	{r4, r5, r6, pc}

0800d234 <__sfp_lock_acquire>:
 800d234:	4801      	ldr	r0, [pc, #4]	; (800d23c <__sfp_lock_acquire+0x8>)
 800d236:	f000 b8b3 	b.w	800d3a0 <__retarget_lock_acquire_recursive>
 800d23a:	bf00      	nop
 800d23c:	200022f5 	.word	0x200022f5

0800d240 <__sfp_lock_release>:
 800d240:	4801      	ldr	r0, [pc, #4]	; (800d248 <__sfp_lock_release+0x8>)
 800d242:	f000 b8ae 	b.w	800d3a2 <__retarget_lock_release_recursive>
 800d246:	bf00      	nop
 800d248:	200022f5 	.word	0x200022f5

0800d24c <__sinit_lock_acquire>:
 800d24c:	4801      	ldr	r0, [pc, #4]	; (800d254 <__sinit_lock_acquire+0x8>)
 800d24e:	f000 b8a7 	b.w	800d3a0 <__retarget_lock_acquire_recursive>
 800d252:	bf00      	nop
 800d254:	200022f6 	.word	0x200022f6

0800d258 <__sinit_lock_release>:
 800d258:	4801      	ldr	r0, [pc, #4]	; (800d260 <__sinit_lock_release+0x8>)
 800d25a:	f000 b8a2 	b.w	800d3a2 <__retarget_lock_release_recursive>
 800d25e:	bf00      	nop
 800d260:	200022f6 	.word	0x200022f6

0800d264 <__sinit>:
 800d264:	b510      	push	{r4, lr}
 800d266:	4604      	mov	r4, r0
 800d268:	f7ff fff0 	bl	800d24c <__sinit_lock_acquire>
 800d26c:	69a3      	ldr	r3, [r4, #24]
 800d26e:	b11b      	cbz	r3, 800d278 <__sinit+0x14>
 800d270:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d274:	f7ff bff0 	b.w	800d258 <__sinit_lock_release>
 800d278:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d27c:	6523      	str	r3, [r4, #80]	; 0x50
 800d27e:	4b13      	ldr	r3, [pc, #76]	; (800d2cc <__sinit+0x68>)
 800d280:	4a13      	ldr	r2, [pc, #76]	; (800d2d0 <__sinit+0x6c>)
 800d282:	681b      	ldr	r3, [r3, #0]
 800d284:	62a2      	str	r2, [r4, #40]	; 0x28
 800d286:	42a3      	cmp	r3, r4
 800d288:	bf04      	itt	eq
 800d28a:	2301      	moveq	r3, #1
 800d28c:	61a3      	streq	r3, [r4, #24]
 800d28e:	4620      	mov	r0, r4
 800d290:	f000 f820 	bl	800d2d4 <__sfp>
 800d294:	6060      	str	r0, [r4, #4]
 800d296:	4620      	mov	r0, r4
 800d298:	f000 f81c 	bl	800d2d4 <__sfp>
 800d29c:	60a0      	str	r0, [r4, #8]
 800d29e:	4620      	mov	r0, r4
 800d2a0:	f000 f818 	bl	800d2d4 <__sfp>
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	60e0      	str	r0, [r4, #12]
 800d2a8:	2104      	movs	r1, #4
 800d2aa:	6860      	ldr	r0, [r4, #4]
 800d2ac:	f7ff ff82 	bl	800d1b4 <std>
 800d2b0:	68a0      	ldr	r0, [r4, #8]
 800d2b2:	2201      	movs	r2, #1
 800d2b4:	2109      	movs	r1, #9
 800d2b6:	f7ff ff7d 	bl	800d1b4 <std>
 800d2ba:	68e0      	ldr	r0, [r4, #12]
 800d2bc:	2202      	movs	r2, #2
 800d2be:	2112      	movs	r1, #18
 800d2c0:	f7ff ff78 	bl	800d1b4 <std>
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	61a3      	str	r3, [r4, #24]
 800d2c8:	e7d2      	b.n	800d270 <__sinit+0xc>
 800d2ca:	bf00      	nop
 800d2cc:	0800d6f0 	.word	0x0800d6f0
 800d2d0:	0800d1fd 	.word	0x0800d1fd

0800d2d4 <__sfp>:
 800d2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2d6:	4607      	mov	r7, r0
 800d2d8:	f7ff ffac 	bl	800d234 <__sfp_lock_acquire>
 800d2dc:	4b1e      	ldr	r3, [pc, #120]	; (800d358 <__sfp+0x84>)
 800d2de:	681e      	ldr	r6, [r3, #0]
 800d2e0:	69b3      	ldr	r3, [r6, #24]
 800d2e2:	b913      	cbnz	r3, 800d2ea <__sfp+0x16>
 800d2e4:	4630      	mov	r0, r6
 800d2e6:	f7ff ffbd 	bl	800d264 <__sinit>
 800d2ea:	3648      	adds	r6, #72	; 0x48
 800d2ec:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d2f0:	3b01      	subs	r3, #1
 800d2f2:	d503      	bpl.n	800d2fc <__sfp+0x28>
 800d2f4:	6833      	ldr	r3, [r6, #0]
 800d2f6:	b30b      	cbz	r3, 800d33c <__sfp+0x68>
 800d2f8:	6836      	ldr	r6, [r6, #0]
 800d2fa:	e7f7      	b.n	800d2ec <__sfp+0x18>
 800d2fc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d300:	b9d5      	cbnz	r5, 800d338 <__sfp+0x64>
 800d302:	4b16      	ldr	r3, [pc, #88]	; (800d35c <__sfp+0x88>)
 800d304:	60e3      	str	r3, [r4, #12]
 800d306:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d30a:	6665      	str	r5, [r4, #100]	; 0x64
 800d30c:	f000 f847 	bl	800d39e <__retarget_lock_init_recursive>
 800d310:	f7ff ff96 	bl	800d240 <__sfp_lock_release>
 800d314:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d318:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d31c:	6025      	str	r5, [r4, #0]
 800d31e:	61a5      	str	r5, [r4, #24]
 800d320:	2208      	movs	r2, #8
 800d322:	4629      	mov	r1, r5
 800d324:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d328:	f7fd faae 	bl	800a888 <memset>
 800d32c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d330:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d334:	4620      	mov	r0, r4
 800d336:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d338:	3468      	adds	r4, #104	; 0x68
 800d33a:	e7d9      	b.n	800d2f0 <__sfp+0x1c>
 800d33c:	2104      	movs	r1, #4
 800d33e:	4638      	mov	r0, r7
 800d340:	f7ff ff62 	bl	800d208 <__sfmoreglue>
 800d344:	4604      	mov	r4, r0
 800d346:	6030      	str	r0, [r6, #0]
 800d348:	2800      	cmp	r0, #0
 800d34a:	d1d5      	bne.n	800d2f8 <__sfp+0x24>
 800d34c:	f7ff ff78 	bl	800d240 <__sfp_lock_release>
 800d350:	230c      	movs	r3, #12
 800d352:	603b      	str	r3, [r7, #0]
 800d354:	e7ee      	b.n	800d334 <__sfp+0x60>
 800d356:	bf00      	nop
 800d358:	0800d6f0 	.word	0x0800d6f0
 800d35c:	ffff0001 	.word	0xffff0001

0800d360 <_fwalk_reent>:
 800d360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d364:	4606      	mov	r6, r0
 800d366:	4688      	mov	r8, r1
 800d368:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d36c:	2700      	movs	r7, #0
 800d36e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d372:	f1b9 0901 	subs.w	r9, r9, #1
 800d376:	d505      	bpl.n	800d384 <_fwalk_reent+0x24>
 800d378:	6824      	ldr	r4, [r4, #0]
 800d37a:	2c00      	cmp	r4, #0
 800d37c:	d1f7      	bne.n	800d36e <_fwalk_reent+0xe>
 800d37e:	4638      	mov	r0, r7
 800d380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d384:	89ab      	ldrh	r3, [r5, #12]
 800d386:	2b01      	cmp	r3, #1
 800d388:	d907      	bls.n	800d39a <_fwalk_reent+0x3a>
 800d38a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d38e:	3301      	adds	r3, #1
 800d390:	d003      	beq.n	800d39a <_fwalk_reent+0x3a>
 800d392:	4629      	mov	r1, r5
 800d394:	4630      	mov	r0, r6
 800d396:	47c0      	blx	r8
 800d398:	4307      	orrs	r7, r0
 800d39a:	3568      	adds	r5, #104	; 0x68
 800d39c:	e7e9      	b.n	800d372 <_fwalk_reent+0x12>

0800d39e <__retarget_lock_init_recursive>:
 800d39e:	4770      	bx	lr

0800d3a0 <__retarget_lock_acquire_recursive>:
 800d3a0:	4770      	bx	lr

0800d3a2 <__retarget_lock_release_recursive>:
 800d3a2:	4770      	bx	lr

0800d3a4 <__swhatbuf_r>:
 800d3a4:	b570      	push	{r4, r5, r6, lr}
 800d3a6:	460e      	mov	r6, r1
 800d3a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3ac:	2900      	cmp	r1, #0
 800d3ae:	b096      	sub	sp, #88	; 0x58
 800d3b0:	4614      	mov	r4, r2
 800d3b2:	461d      	mov	r5, r3
 800d3b4:	da08      	bge.n	800d3c8 <__swhatbuf_r+0x24>
 800d3b6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	602a      	str	r2, [r5, #0]
 800d3be:	061a      	lsls	r2, r3, #24
 800d3c0:	d410      	bmi.n	800d3e4 <__swhatbuf_r+0x40>
 800d3c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3c6:	e00e      	b.n	800d3e6 <__swhatbuf_r+0x42>
 800d3c8:	466a      	mov	r2, sp
 800d3ca:	f000 f903 	bl	800d5d4 <_fstat_r>
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	dbf1      	blt.n	800d3b6 <__swhatbuf_r+0x12>
 800d3d2:	9a01      	ldr	r2, [sp, #4]
 800d3d4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d3d8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d3dc:	425a      	negs	r2, r3
 800d3de:	415a      	adcs	r2, r3
 800d3e0:	602a      	str	r2, [r5, #0]
 800d3e2:	e7ee      	b.n	800d3c2 <__swhatbuf_r+0x1e>
 800d3e4:	2340      	movs	r3, #64	; 0x40
 800d3e6:	2000      	movs	r0, #0
 800d3e8:	6023      	str	r3, [r4, #0]
 800d3ea:	b016      	add	sp, #88	; 0x58
 800d3ec:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d3f0 <__smakebuf_r>:
 800d3f0:	898b      	ldrh	r3, [r1, #12]
 800d3f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d3f4:	079d      	lsls	r5, r3, #30
 800d3f6:	4606      	mov	r6, r0
 800d3f8:	460c      	mov	r4, r1
 800d3fa:	d507      	bpl.n	800d40c <__smakebuf_r+0x1c>
 800d3fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d400:	6023      	str	r3, [r4, #0]
 800d402:	6123      	str	r3, [r4, #16]
 800d404:	2301      	movs	r3, #1
 800d406:	6163      	str	r3, [r4, #20]
 800d408:	b002      	add	sp, #8
 800d40a:	bd70      	pop	{r4, r5, r6, pc}
 800d40c:	ab01      	add	r3, sp, #4
 800d40e:	466a      	mov	r2, sp
 800d410:	f7ff ffc8 	bl	800d3a4 <__swhatbuf_r>
 800d414:	9900      	ldr	r1, [sp, #0]
 800d416:	4605      	mov	r5, r0
 800d418:	4630      	mov	r0, r6
 800d41a:	f7ff f963 	bl	800c6e4 <_malloc_r>
 800d41e:	b948      	cbnz	r0, 800d434 <__smakebuf_r+0x44>
 800d420:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d424:	059a      	lsls	r2, r3, #22
 800d426:	d4ef      	bmi.n	800d408 <__smakebuf_r+0x18>
 800d428:	f023 0303 	bic.w	r3, r3, #3
 800d42c:	f043 0302 	orr.w	r3, r3, #2
 800d430:	81a3      	strh	r3, [r4, #12]
 800d432:	e7e3      	b.n	800d3fc <__smakebuf_r+0xc>
 800d434:	4b0d      	ldr	r3, [pc, #52]	; (800d46c <__smakebuf_r+0x7c>)
 800d436:	62b3      	str	r3, [r6, #40]	; 0x28
 800d438:	89a3      	ldrh	r3, [r4, #12]
 800d43a:	6020      	str	r0, [r4, #0]
 800d43c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d440:	81a3      	strh	r3, [r4, #12]
 800d442:	9b00      	ldr	r3, [sp, #0]
 800d444:	6163      	str	r3, [r4, #20]
 800d446:	9b01      	ldr	r3, [sp, #4]
 800d448:	6120      	str	r0, [r4, #16]
 800d44a:	b15b      	cbz	r3, 800d464 <__smakebuf_r+0x74>
 800d44c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d450:	4630      	mov	r0, r6
 800d452:	f000 f8d1 	bl	800d5f8 <_isatty_r>
 800d456:	b128      	cbz	r0, 800d464 <__smakebuf_r+0x74>
 800d458:	89a3      	ldrh	r3, [r4, #12]
 800d45a:	f023 0303 	bic.w	r3, r3, #3
 800d45e:	f043 0301 	orr.w	r3, r3, #1
 800d462:	81a3      	strh	r3, [r4, #12]
 800d464:	89a0      	ldrh	r0, [r4, #12]
 800d466:	4305      	orrs	r5, r0
 800d468:	81a5      	strh	r5, [r4, #12]
 800d46a:	e7cd      	b.n	800d408 <__smakebuf_r+0x18>
 800d46c:	0800d1fd 	.word	0x0800d1fd

0800d470 <_malloc_usable_size_r>:
 800d470:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d474:	1f18      	subs	r0, r3, #4
 800d476:	2b00      	cmp	r3, #0
 800d478:	bfbc      	itt	lt
 800d47a:	580b      	ldrlt	r3, [r1, r0]
 800d47c:	18c0      	addlt	r0, r0, r3
 800d47e:	4770      	bx	lr

0800d480 <_raise_r>:
 800d480:	291f      	cmp	r1, #31
 800d482:	b538      	push	{r3, r4, r5, lr}
 800d484:	4604      	mov	r4, r0
 800d486:	460d      	mov	r5, r1
 800d488:	d904      	bls.n	800d494 <_raise_r+0x14>
 800d48a:	2316      	movs	r3, #22
 800d48c:	6003      	str	r3, [r0, #0]
 800d48e:	f04f 30ff 	mov.w	r0, #4294967295
 800d492:	bd38      	pop	{r3, r4, r5, pc}
 800d494:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d496:	b112      	cbz	r2, 800d49e <_raise_r+0x1e>
 800d498:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d49c:	b94b      	cbnz	r3, 800d4b2 <_raise_r+0x32>
 800d49e:	4620      	mov	r0, r4
 800d4a0:	f000 f830 	bl	800d504 <_getpid_r>
 800d4a4:	462a      	mov	r2, r5
 800d4a6:	4601      	mov	r1, r0
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4ae:	f000 b817 	b.w	800d4e0 <_kill_r>
 800d4b2:	2b01      	cmp	r3, #1
 800d4b4:	d00a      	beq.n	800d4cc <_raise_r+0x4c>
 800d4b6:	1c59      	adds	r1, r3, #1
 800d4b8:	d103      	bne.n	800d4c2 <_raise_r+0x42>
 800d4ba:	2316      	movs	r3, #22
 800d4bc:	6003      	str	r3, [r0, #0]
 800d4be:	2001      	movs	r0, #1
 800d4c0:	e7e7      	b.n	800d492 <_raise_r+0x12>
 800d4c2:	2400      	movs	r4, #0
 800d4c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4c8:	4628      	mov	r0, r5
 800d4ca:	4798      	blx	r3
 800d4cc:	2000      	movs	r0, #0
 800d4ce:	e7e0      	b.n	800d492 <_raise_r+0x12>

0800d4d0 <raise>:
 800d4d0:	4b02      	ldr	r3, [pc, #8]	; (800d4dc <raise+0xc>)
 800d4d2:	4601      	mov	r1, r0
 800d4d4:	6818      	ldr	r0, [r3, #0]
 800d4d6:	f7ff bfd3 	b.w	800d480 <_raise_r>
 800d4da:	bf00      	nop
 800d4dc:	2000013c 	.word	0x2000013c

0800d4e0 <_kill_r>:
 800d4e0:	b538      	push	{r3, r4, r5, lr}
 800d4e2:	4d07      	ldr	r5, [pc, #28]	; (800d500 <_kill_r+0x20>)
 800d4e4:	2300      	movs	r3, #0
 800d4e6:	4604      	mov	r4, r0
 800d4e8:	4608      	mov	r0, r1
 800d4ea:	4611      	mov	r1, r2
 800d4ec:	602b      	str	r3, [r5, #0]
 800d4ee:	f7f4 fb5d 	bl	8001bac <_kill>
 800d4f2:	1c43      	adds	r3, r0, #1
 800d4f4:	d102      	bne.n	800d4fc <_kill_r+0x1c>
 800d4f6:	682b      	ldr	r3, [r5, #0]
 800d4f8:	b103      	cbz	r3, 800d4fc <_kill_r+0x1c>
 800d4fa:	6023      	str	r3, [r4, #0]
 800d4fc:	bd38      	pop	{r3, r4, r5, pc}
 800d4fe:	bf00      	nop
 800d500:	200022f0 	.word	0x200022f0

0800d504 <_getpid_r>:
 800d504:	f7f4 bb4a 	b.w	8001b9c <_getpid>

0800d508 <__sread>:
 800d508:	b510      	push	{r4, lr}
 800d50a:	460c      	mov	r4, r1
 800d50c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d510:	f000 f894 	bl	800d63c <_read_r>
 800d514:	2800      	cmp	r0, #0
 800d516:	bfab      	itete	ge
 800d518:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d51a:	89a3      	ldrhlt	r3, [r4, #12]
 800d51c:	181b      	addge	r3, r3, r0
 800d51e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d522:	bfac      	ite	ge
 800d524:	6563      	strge	r3, [r4, #84]	; 0x54
 800d526:	81a3      	strhlt	r3, [r4, #12]
 800d528:	bd10      	pop	{r4, pc}

0800d52a <__swrite>:
 800d52a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d52e:	461f      	mov	r7, r3
 800d530:	898b      	ldrh	r3, [r1, #12]
 800d532:	05db      	lsls	r3, r3, #23
 800d534:	4605      	mov	r5, r0
 800d536:	460c      	mov	r4, r1
 800d538:	4616      	mov	r6, r2
 800d53a:	d505      	bpl.n	800d548 <__swrite+0x1e>
 800d53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d540:	2302      	movs	r3, #2
 800d542:	2200      	movs	r2, #0
 800d544:	f000 f868 	bl	800d618 <_lseek_r>
 800d548:	89a3      	ldrh	r3, [r4, #12]
 800d54a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d54e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d552:	81a3      	strh	r3, [r4, #12]
 800d554:	4632      	mov	r2, r6
 800d556:	463b      	mov	r3, r7
 800d558:	4628      	mov	r0, r5
 800d55a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d55e:	f000 b817 	b.w	800d590 <_write_r>

0800d562 <__sseek>:
 800d562:	b510      	push	{r4, lr}
 800d564:	460c      	mov	r4, r1
 800d566:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d56a:	f000 f855 	bl	800d618 <_lseek_r>
 800d56e:	1c43      	adds	r3, r0, #1
 800d570:	89a3      	ldrh	r3, [r4, #12]
 800d572:	bf15      	itete	ne
 800d574:	6560      	strne	r0, [r4, #84]	; 0x54
 800d576:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d57a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d57e:	81a3      	strheq	r3, [r4, #12]
 800d580:	bf18      	it	ne
 800d582:	81a3      	strhne	r3, [r4, #12]
 800d584:	bd10      	pop	{r4, pc}

0800d586 <__sclose>:
 800d586:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d58a:	f000 b813 	b.w	800d5b4 <_close_r>
	...

0800d590 <_write_r>:
 800d590:	b538      	push	{r3, r4, r5, lr}
 800d592:	4d07      	ldr	r5, [pc, #28]	; (800d5b0 <_write_r+0x20>)
 800d594:	4604      	mov	r4, r0
 800d596:	4608      	mov	r0, r1
 800d598:	4611      	mov	r1, r2
 800d59a:	2200      	movs	r2, #0
 800d59c:	602a      	str	r2, [r5, #0]
 800d59e:	461a      	mov	r2, r3
 800d5a0:	f7f4 fb3b 	bl	8001c1a <_write>
 800d5a4:	1c43      	adds	r3, r0, #1
 800d5a6:	d102      	bne.n	800d5ae <_write_r+0x1e>
 800d5a8:	682b      	ldr	r3, [r5, #0]
 800d5aa:	b103      	cbz	r3, 800d5ae <_write_r+0x1e>
 800d5ac:	6023      	str	r3, [r4, #0]
 800d5ae:	bd38      	pop	{r3, r4, r5, pc}
 800d5b0:	200022f0 	.word	0x200022f0

0800d5b4 <_close_r>:
 800d5b4:	b538      	push	{r3, r4, r5, lr}
 800d5b6:	4d06      	ldr	r5, [pc, #24]	; (800d5d0 <_close_r+0x1c>)
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	4604      	mov	r4, r0
 800d5bc:	4608      	mov	r0, r1
 800d5be:	602b      	str	r3, [r5, #0]
 800d5c0:	f7f4 fb47 	bl	8001c52 <_close>
 800d5c4:	1c43      	adds	r3, r0, #1
 800d5c6:	d102      	bne.n	800d5ce <_close_r+0x1a>
 800d5c8:	682b      	ldr	r3, [r5, #0]
 800d5ca:	b103      	cbz	r3, 800d5ce <_close_r+0x1a>
 800d5cc:	6023      	str	r3, [r4, #0]
 800d5ce:	bd38      	pop	{r3, r4, r5, pc}
 800d5d0:	200022f0 	.word	0x200022f0

0800d5d4 <_fstat_r>:
 800d5d4:	b538      	push	{r3, r4, r5, lr}
 800d5d6:	4d07      	ldr	r5, [pc, #28]	; (800d5f4 <_fstat_r+0x20>)
 800d5d8:	2300      	movs	r3, #0
 800d5da:	4604      	mov	r4, r0
 800d5dc:	4608      	mov	r0, r1
 800d5de:	4611      	mov	r1, r2
 800d5e0:	602b      	str	r3, [r5, #0]
 800d5e2:	f7f4 fb42 	bl	8001c6a <_fstat>
 800d5e6:	1c43      	adds	r3, r0, #1
 800d5e8:	d102      	bne.n	800d5f0 <_fstat_r+0x1c>
 800d5ea:	682b      	ldr	r3, [r5, #0]
 800d5ec:	b103      	cbz	r3, 800d5f0 <_fstat_r+0x1c>
 800d5ee:	6023      	str	r3, [r4, #0]
 800d5f0:	bd38      	pop	{r3, r4, r5, pc}
 800d5f2:	bf00      	nop
 800d5f4:	200022f0 	.word	0x200022f0

0800d5f8 <_isatty_r>:
 800d5f8:	b538      	push	{r3, r4, r5, lr}
 800d5fa:	4d06      	ldr	r5, [pc, #24]	; (800d614 <_isatty_r+0x1c>)
 800d5fc:	2300      	movs	r3, #0
 800d5fe:	4604      	mov	r4, r0
 800d600:	4608      	mov	r0, r1
 800d602:	602b      	str	r3, [r5, #0]
 800d604:	f7f4 fb41 	bl	8001c8a <_isatty>
 800d608:	1c43      	adds	r3, r0, #1
 800d60a:	d102      	bne.n	800d612 <_isatty_r+0x1a>
 800d60c:	682b      	ldr	r3, [r5, #0]
 800d60e:	b103      	cbz	r3, 800d612 <_isatty_r+0x1a>
 800d610:	6023      	str	r3, [r4, #0]
 800d612:	bd38      	pop	{r3, r4, r5, pc}
 800d614:	200022f0 	.word	0x200022f0

0800d618 <_lseek_r>:
 800d618:	b538      	push	{r3, r4, r5, lr}
 800d61a:	4d07      	ldr	r5, [pc, #28]	; (800d638 <_lseek_r+0x20>)
 800d61c:	4604      	mov	r4, r0
 800d61e:	4608      	mov	r0, r1
 800d620:	4611      	mov	r1, r2
 800d622:	2200      	movs	r2, #0
 800d624:	602a      	str	r2, [r5, #0]
 800d626:	461a      	mov	r2, r3
 800d628:	f7f4 fb3a 	bl	8001ca0 <_lseek>
 800d62c:	1c43      	adds	r3, r0, #1
 800d62e:	d102      	bne.n	800d636 <_lseek_r+0x1e>
 800d630:	682b      	ldr	r3, [r5, #0]
 800d632:	b103      	cbz	r3, 800d636 <_lseek_r+0x1e>
 800d634:	6023      	str	r3, [r4, #0]
 800d636:	bd38      	pop	{r3, r4, r5, pc}
 800d638:	200022f0 	.word	0x200022f0

0800d63c <_read_r>:
 800d63c:	b538      	push	{r3, r4, r5, lr}
 800d63e:	4d07      	ldr	r5, [pc, #28]	; (800d65c <_read_r+0x20>)
 800d640:	4604      	mov	r4, r0
 800d642:	4608      	mov	r0, r1
 800d644:	4611      	mov	r1, r2
 800d646:	2200      	movs	r2, #0
 800d648:	602a      	str	r2, [r5, #0]
 800d64a:	461a      	mov	r2, r3
 800d64c:	f7f4 fac8 	bl	8001be0 <_read>
 800d650:	1c43      	adds	r3, r0, #1
 800d652:	d102      	bne.n	800d65a <_read_r+0x1e>
 800d654:	682b      	ldr	r3, [r5, #0]
 800d656:	b103      	cbz	r3, 800d65a <_read_r+0x1e>
 800d658:	6023      	str	r3, [r4, #0]
 800d65a:	bd38      	pop	{r3, r4, r5, pc}
 800d65c:	200022f0 	.word	0x200022f0

0800d660 <_init>:
 800d660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d662:	bf00      	nop
 800d664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d666:	bc08      	pop	{r3}
 800d668:	469e      	mov	lr, r3
 800d66a:	4770      	bx	lr

0800d66c <_fini>:
 800d66c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d66e:	bf00      	nop
 800d670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d672:	bc08      	pop	{r3}
 800d674:	469e      	mov	lr, r3
 800d676:	4770      	bx	lr
