
emg_projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da44  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004c4  0800dbe8  0800dbe8  0001dbe8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0ac  0800e0ac  000202ec  2**0
                  CONTENTS
  4 .ARM          00000008  0800e0ac  0800e0ac  0001e0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0b4  0800e0b4  000202ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0b4  0800e0b4  0001e0b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e0b8  0800e0b8  0001e0b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002ec  20000000  0800e0bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fb0  200002f0  0800e3a8  000202f0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200022a0  0800e3a8  000222a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b7f9  00000000  00000000  0002031c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000043fd  00000000  00000000  0003bb15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001738  00000000  00000000  0003ff18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001538  00000000  00000000  00041650  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bb4b  00000000  00000000  00042b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ea0a  00000000  00000000  0005e6d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f7b3  00000000  00000000  0007d0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011c890  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000737c  00000000  00000000  0011c8e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002f0 	.word	0x200002f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800dbcc 	.word	0x0800dbcc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002f4 	.word	0x200002f4
 80001dc:	0800dbcc 	.word	0x0800dbcc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000f6e:	4b30      	ldr	r3, [pc, #192]	; (8001030 <MX_ADC1_Init+0xd4>)
 8000f70:	4a30      	ldr	r2, [pc, #192]	; (8001034 <MX_ADC1_Init+0xd8>)
 8000f72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f74:	4b2e      	ldr	r3, [pc, #184]	; (8001030 <MX_ADC1_Init+0xd4>)
 8000f76:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000f7a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	; (8001030 <MX_ADC1_Init+0xd4>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f82:	4b2b      	ldr	r3, [pc, #172]	; (8001030 <MX_ADC1_Init+0xd4>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f88:	4b29      	ldr	r3, [pc, #164]	; (8001030 <MX_ADC1_Init+0xd4>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f8e:	4b28      	ldr	r3, [pc, #160]	; (8001030 <MX_ADC1_Init+0xd4>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f96:	4b26      	ldr	r3, [pc, #152]	; (8001030 <MX_ADC1_Init+0xd4>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9c:	4b24      	ldr	r3, [pc, #144]	; (8001030 <MX_ADC1_Init+0xd4>)
 8000f9e:	4a26      	ldr	r2, [pc, #152]	; (8001038 <MX_ADC1_Init+0xdc>)
 8000fa0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa2:	4b23      	ldr	r3, [pc, #140]	; (8001030 <MX_ADC1_Init+0xd4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8000fa8:	4b21      	ldr	r3, [pc, #132]	; (8001030 <MX_ADC1_Init+0xd4>)
 8000faa:	2203      	movs	r2, #3
 8000fac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fae:	4b20      	ldr	r3, [pc, #128]	; (8001030 <MX_ADC1_Init+0xd4>)
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb6:	4b1e      	ldr	r3, [pc, #120]	; (8001030 <MX_ADC1_Init+0xd4>)
 8000fb8:	2201      	movs	r2, #1
 8000fba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fbc:	481c      	ldr	r0, [pc, #112]	; (8001030 <MX_ADC1_Init+0xd4>)
 8000fbe:	f001 f967 	bl	8002290 <HAL_ADC_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000fc8:	f000 fd78 	bl	8001abc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000fd4:	2305      	movs	r3, #5
 8000fd6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fd8:	463b      	mov	r3, r7
 8000fda:	4619      	mov	r1, r3
 8000fdc:	4814      	ldr	r0, [pc, #80]	; (8001030 <MX_ADC1_Init+0xd4>)
 8000fde:	f001 fbb9 	bl	8002754 <HAL_ADC_ConfigChannel>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000fe8:	f000 fd68 	bl	8001abc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000fec:	2304      	movs	r3, #4
 8000fee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8000ff4:	2303      	movs	r3, #3
 8000ff6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480c      	ldr	r0, [pc, #48]	; (8001030 <MX_ADC1_Init+0xd4>)
 8000ffe:	f001 fba9 	bl	8002754 <HAL_ADC_ConfigChannel>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001008:	f000 fd58 	bl	8001abc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800100c:	2305      	movs	r3, #5
 800100e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001010:	2303      	movs	r3, #3
 8001012:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001014:	463b      	mov	r3, r7
 8001016:	4619      	mov	r1, r3
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_ADC1_Init+0xd4>)
 800101a:	f001 fb9b 	bl	8002754 <HAL_ADC_ConfigChannel>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001024:	f000 fd4a 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001028:	bf00      	nop
 800102a:	3710      	adds	r7, #16
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000030c 	.word	0x2000030c
 8001034:	40012000 	.word	0x40012000
 8001038:	0f000001 	.word	0x0f000001

0800103c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a33      	ldr	r2, [pc, #204]	; (8001128 <HAL_ADC_MspInit+0xec>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d15f      	bne.n	800111e <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	4b32      	ldr	r3, [pc, #200]	; (800112c <HAL_ADC_MspInit+0xf0>)
 8001064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001066:	4a31      	ldr	r2, [pc, #196]	; (800112c <HAL_ADC_MspInit+0xf0>)
 8001068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800106c:	6453      	str	r3, [r2, #68]	; 0x44
 800106e:	4b2f      	ldr	r3, [pc, #188]	; (800112c <HAL_ADC_MspInit+0xf0>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b2b      	ldr	r3, [pc, #172]	; (800112c <HAL_ADC_MspInit+0xf0>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001082:	4a2a      	ldr	r2, [pc, #168]	; (800112c <HAL_ADC_MspInit+0xf0>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6313      	str	r3, [r2, #48]	; 0x30
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <HAL_ADC_MspInit+0xf0>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001096:	2332      	movs	r3, #50	; 0x32
 8001098:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800109a:	2303      	movs	r3, #3
 800109c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109e:	2300      	movs	r3, #0
 80010a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4821      	ldr	r0, [pc, #132]	; (8001130 <HAL_ADC_MspInit+0xf4>)
 80010aa:	f002 fa7f 	bl	80035ac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80010ae:	4b21      	ldr	r3, [pc, #132]	; (8001134 <HAL_ADC_MspInit+0xf8>)
 80010b0:	4a21      	ldr	r2, [pc, #132]	; (8001138 <HAL_ADC_MspInit+0xfc>)
 80010b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80010b4:	4b1f      	ldr	r3, [pc, #124]	; (8001134 <HAL_ADC_MspInit+0xf8>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010ba:	4b1e      	ldr	r3, [pc, #120]	; (8001134 <HAL_ADC_MspInit+0xf8>)
 80010bc:	2200      	movs	r2, #0
 80010be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80010c0:	4b1c      	ldr	r3, [pc, #112]	; (8001134 <HAL_ADC_MspInit+0xf8>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <HAL_ADC_MspInit+0xf8>)
 80010c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010ce:	4b19      	ldr	r3, [pc, #100]	; (8001134 <HAL_ADC_MspInit+0xf8>)
 80010d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010d6:	4b17      	ldr	r3, [pc, #92]	; (8001134 <HAL_ADC_MspInit+0xf8>)
 80010d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80010de:	4b15      	ldr	r3, [pc, #84]	; (8001134 <HAL_ADC_MspInit+0xf8>)
 80010e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <HAL_ADC_MspInit+0xf8>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ec:	4b11      	ldr	r3, [pc, #68]	; (8001134 <HAL_ADC_MspInit+0xf8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80010f2:	4810      	ldr	r0, [pc, #64]	; (8001134 <HAL_ADC_MspInit+0xf8>)
 80010f4:	f001 feea 	bl	8002ecc <HAL_DMA_Init>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80010fe:	f000 fcdd 	bl	8001abc <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <HAL_ADC_MspInit+0xf8>)
 8001106:	639a      	str	r2, [r3, #56]	; 0x38
 8001108:	4a0a      	ldr	r2, [pc, #40]	; (8001134 <HAL_ADC_MspInit+0xf8>)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	2100      	movs	r1, #0
 8001112:	2012      	movs	r0, #18
 8001114:	f001 fea3 	bl	8002e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001118:	2012      	movs	r0, #18
 800111a:	f001 febc 	bl	8002e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800111e:	bf00      	nop
 8001120:	3728      	adds	r7, #40	; 0x28
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40012000 	.word	0x40012000
 800112c:	40023800 	.word	0x40023800
 8001130:	40020000 	.word	0x40020000
 8001134:	20000354 	.word	0x20000354
 8001138:	40026410 	.word	0x40026410

0800113c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b082      	sub	sp, #8
 8001140:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	607b      	str	r3, [r7, #4]
 8001146:	4b0c      	ldr	r3, [pc, #48]	; (8001178 <MX_DMA_Init+0x3c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <MX_DMA_Init+0x3c>)
 800114c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b09      	ldr	r3, [pc, #36]	; (8001178 <MX_DMA_Init+0x3c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800115a:	607b      	str	r3, [r7, #4]
 800115c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	2038      	movs	r0, #56	; 0x38
 8001164:	f001 fe7b 	bl	8002e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001168:	2038      	movs	r0, #56	; 0x38
 800116a:	f001 fe94 	bl	8002e96 <HAL_NVIC_EnableIRQ>

}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800

0800117c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08a      	sub	sp, #40	; 0x28
 8001180:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001182:	f107 0314 	add.w	r3, r7, #20
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]
 800118a:	605a      	str	r2, [r3, #4]
 800118c:	609a      	str	r2, [r3, #8]
 800118e:	60da      	str	r2, [r3, #12]
 8001190:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	4b2e      	ldr	r3, [pc, #184]	; (8001250 <MX_GPIO_Init+0xd4>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a2d      	ldr	r2, [pc, #180]	; (8001250 <MX_GPIO_Init+0xd4>)
 800119c:	f043 0304 	orr.w	r3, r3, #4
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b2b      	ldr	r3, [pc, #172]	; (8001250 <MX_GPIO_Init+0xd4>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0304 	and.w	r3, r3, #4
 80011aa:	613b      	str	r3, [r7, #16]
 80011ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	4b27      	ldr	r3, [pc, #156]	; (8001250 <MX_GPIO_Init+0xd4>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	4a26      	ldr	r2, [pc, #152]	; (8001250 <MX_GPIO_Init+0xd4>)
 80011b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011bc:	6313      	str	r3, [r2, #48]	; 0x30
 80011be:	4b24      	ldr	r3, [pc, #144]	; (8001250 <MX_GPIO_Init+0xd4>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011c6:	60fb      	str	r3, [r7, #12]
 80011c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	4b20      	ldr	r3, [pc, #128]	; (8001250 <MX_GPIO_Init+0xd4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a1f      	ldr	r2, [pc, #124]	; (8001250 <MX_GPIO_Init+0xd4>)
 80011d4:	f043 0301 	orr.w	r3, r3, #1
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <MX_GPIO_Init+0xd4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0301 	and.w	r3, r3, #1
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b19      	ldr	r3, [pc, #100]	; (8001250 <MX_GPIO_Init+0xd4>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a18      	ldr	r2, [pc, #96]	; (8001250 <MX_GPIO_Init+0xd4>)
 80011f0:	f043 0302 	orr.w	r3, r3, #2
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_GPIO_Init+0xd4>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0302 	and.w	r3, r3, #2
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001202:	2301      	movs	r3, #1
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001206:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800120a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800120c:	2301      	movs	r3, #1
 800120e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	4619      	mov	r1, r3
 8001216:	480f      	ldr	r0, [pc, #60]	; (8001254 <MX_GPIO_Init+0xd8>)
 8001218:	f002 f9c8 	bl	80035ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 800121c:	231e      	movs	r3, #30
 800121e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001220:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001224:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001226:	2300      	movs	r3, #0
 8001228:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800122a:	f107 0314 	add.w	r3, r7, #20
 800122e:	4619      	mov	r1, r3
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <MX_GPIO_Init+0xdc>)
 8001232:	f002 f9bb 	bl	80035ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001236:	2200      	movs	r2, #0
 8001238:	2100      	movs	r1, #0
 800123a:	2006      	movs	r0, #6
 800123c:	f001 fe0f 	bl	8002e5e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001240:	2006      	movs	r0, #6
 8001242:	f001 fe28 	bl	8002e96 <HAL_NVIC_EnableIRQ>

}
 8001246:	bf00      	nop
 8001248:	3728      	adds	r7, #40	; 0x28
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	40023800 	.word	0x40023800
 8001254:	40020000 	.word	0x40020000
 8001258:	40020400 	.word	0x40020400

0800125c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_I2C1_Init+0x50>)
 8001262:	4a13      	ldr	r2, [pc, #76]	; (80012b0 <MX_I2C1_Init+0x54>)
 8001264:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_I2C1_Init+0x50>)
 8001268:	4a12      	ldr	r2, [pc, #72]	; (80012b4 <MX_I2C1_Init+0x58>)
 800126a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_I2C1_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_I2C1_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001278:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_I2C1_Init+0x50>)
 800127a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800127e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <MX_I2C1_Init+0x50>)
 8001282:	2200      	movs	r2, #0
 8001284:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_I2C1_Init+0x50>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <MX_I2C1_Init+0x50>)
 800128e:	2200      	movs	r2, #0
 8001290:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_I2C1_Init+0x50>)
 8001294:	2200      	movs	r2, #0
 8001296:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001298:	4804      	ldr	r0, [pc, #16]	; (80012ac <MX_I2C1_Init+0x50>)
 800129a:	f002 fb23 	bl	80038e4 <HAL_I2C_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012a4:	f000 fc0a 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	200003b4 	.word	0x200003b4
 80012b0:	40005400 	.word	0x40005400
 80012b4:	000186a0 	.word	0x000186a0

080012b8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b08a      	sub	sp, #40	; 0x28
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	605a      	str	r2, [r3, #4]
 80012ca:	609a      	str	r2, [r3, #8]
 80012cc:	60da      	str	r2, [r3, #12]
 80012ce:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a19      	ldr	r2, [pc, #100]	; (800133c <HAL_I2C_MspInit+0x84>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d12b      	bne.n	8001332 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	2300      	movs	r3, #0
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	4b18      	ldr	r3, [pc, #96]	; (8001340 <HAL_I2C_MspInit+0x88>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a17      	ldr	r2, [pc, #92]	; (8001340 <HAL_I2C_MspInit+0x88>)
 80012e4:	f043 0302 	orr.w	r3, r3, #2
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b15      	ldr	r3, [pc, #84]	; (8001340 <HAL_I2C_MspInit+0x88>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	613b      	str	r3, [r7, #16]
 80012f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80012f6:	23c0      	movs	r3, #192	; 0xc0
 80012f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fa:	2312      	movs	r3, #18
 80012fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001302:	2303      	movs	r3, #3
 8001304:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001306:	2304      	movs	r3, #4
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	f107 0314 	add.w	r3, r7, #20
 800130e:	4619      	mov	r1, r3
 8001310:	480c      	ldr	r0, [pc, #48]	; (8001344 <HAL_I2C_MspInit+0x8c>)
 8001312:	f002 f94b 	bl	80035ac <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60fb      	str	r3, [r7, #12]
 800131a:	4b09      	ldr	r3, [pc, #36]	; (8001340 <HAL_I2C_MspInit+0x88>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a08      	ldr	r2, [pc, #32]	; (8001340 <HAL_I2C_MspInit+0x88>)
 8001320:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b06      	ldr	r3, [pc, #24]	; (8001340 <HAL_I2C_MspInit+0x88>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001332:	bf00      	nop
 8001334:	3728      	adds	r7, #40	; 0x28
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40005400 	.word	0x40005400
 8001340:	40023800 	.word	0x40023800
 8001344:	40020400 	.word	0x40020400

08001348 <Signal_Buf_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Signal_Buf_Init(SignalFeature_t *signal){
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
	//Clear Filter Buffer
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
 8001354:	e009      	b.n	800136a <Signal_Buf_Init+0x22>
		signal->buf[n] = 0.0f;
 8001356:	7bfb      	ldrb	r3, [r7, #15]
 8001358:	687a      	ldr	r2, [r7, #4]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	f04f 0200 	mov.w	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 8001364:	7bfb      	ldrb	r3, [r7, #15]
 8001366:	3301      	adds	r3, #1
 8001368:	73fb      	strb	r3, [r7, #15]
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	2b31      	cmp	r3, #49	; 0x31
 800136e:	d9f2      	bls.n	8001356 <Signal_Buf_Init+0xe>
	}

	//Clear Buf Index
	signal->bufIndex = 0;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2200      	movs	r2, #0
 8001374:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

	//Clear Filter Output
	signal->energy = 0.0f;
 8001378:	6879      	ldr	r1, [r7, #4]
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	f04f 0300 	mov.w	r3, #0
 8001382:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
}
 8001386:	bf00      	nop
 8001388:	3714      	adds	r7, #20
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr

08001392 <Signal_Buf_Update>:

void Signal_Buf_Update(SignalFeature_t *signal, float inp){
 8001392:	b480      	push	{r7}
 8001394:	b083      	sub	sp, #12
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
 800139a:	ed87 0a00 	vstr	s0, [r7]
	/*Store Latest Sample in buffer */
	signal->buf[signal->bufIndex] = inp;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	4413      	add	r3, r2
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	601a      	str	r2, [r3, #0]

	/*increment buffer index and wrap around if necessary*/
	signal->bufIndex++;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80013b4:	3301      	adds	r3, #1
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8

	if(signal->bufIndex == SIGNAL_SAMPLES_LENGTH){
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80013c4:	2b32      	cmp	r3, #50	; 0x32
 80013c6:	d103      	bne.n	80013d0 <Signal_Buf_Update+0x3e>
		signal->bufIndex = 0;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2200      	movs	r2, #0
 80013cc:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
	}
}
 80013d0:	bf00      	nop
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <Signal_Energy_Calculate>:

float Signal_Energy_Calculate(SignalFeature_t *signal){
 80013dc:	b5b0      	push	{r4, r5, r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
	signal->energy = 0.0f;
 80013e4:	6879      	ldr	r1, [r7, #4]
 80013e6:	f04f 0200 	mov.w	r2, #0
 80013ea:	f04f 0300 	mov.w	r3, #0
 80013ee:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0

	uint8_t sumIndex = signal->bufIndex;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f893 30c8 	ldrb.w	r3, [r3, #200]	; 0xc8
 80013f8:	73fb      	strb	r3, [r7, #15]
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 80013fa:	2300      	movs	r3, #0
 80013fc:	73bb      	strb	r3, [r7, #14]
 80013fe:	e02b      	b.n	8001458 <Signal_Energy_Calculate+0x7c>
		/*Decrement Index and Wrap if Necessary*/
		if(sumIndex < SIGNAL_SAMPLES_LENGTH -1){
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	2b30      	cmp	r3, #48	; 0x30
 8001404:	d803      	bhi.n	800140e <Signal_Energy_Calculate+0x32>
			sumIndex++;
 8001406:	7bfb      	ldrb	r3, [r7, #15]
 8001408:	3301      	adds	r3, #1
 800140a:	73fb      	strb	r3, [r7, #15]
 800140c:	e001      	b.n	8001412 <Signal_Energy_Calculate+0x36>
		}else{
			sumIndex = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	73fb      	strb	r3, [r7, #15]
		}

		/*Multiply Impulse Response with Shifted input sample and add to output*/
		signal->energy += (signal->buf[n] * signal->buf[n]);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	e9d3 4534 	ldrd	r4, r5, [r3, #208]	; 0xd0
 8001418:	7bbb      	ldrb	r3, [r7, #14]
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	009b      	lsls	r3, r3, #2
 800141e:	4413      	add	r3, r2
 8001420:	ed93 7a00 	vldr	s14, [r3]
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	4413      	add	r3, r2
 800142c:	edd3 7a00 	vldr	s15, [r3]
 8001430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001434:	ee17 0a90 	vmov	r0, s15
 8001438:	f7ff f88e 	bl	8000558 <__aeabi_f2d>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4620      	mov	r0, r4
 8001442:	4629      	mov	r1, r5
 8001444:	f7fe ff2a 	bl	800029c <__adddf3>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	6879      	ldr	r1, [r7, #4]
 800144e:	e9c1 2334 	strd	r2, r3, [r1, #208]	; 0xd0
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 8001452:	7bbb      	ldrb	r3, [r7, #14]
 8001454:	3301      	adds	r3, #1
 8001456:	73bb      	strb	r3, [r7, #14]
 8001458:	7bbb      	ldrb	r3, [r7, #14]
 800145a:	2b31      	cmp	r3, #49	; 0x31
 800145c:	d9d0      	bls.n	8001400 <Signal_Energy_Calculate+0x24>
	}
	return signal->energy;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	e9d3 2334 	ldrd	r2, r3, [r3, #208]	; 0xd0
 8001464:	4610      	mov	r0, r2
 8001466:	4619      	mov	r1, r3
 8001468:	f7ff fba6 	bl	8000bb8 <__aeabi_d2f>
 800146c:	4603      	mov	r3, r0
 800146e:	ee07 3a90 	vmov	s15, r3
}
 8001472:	eeb0 0a67 	vmov.f32	s0, s15
 8001476:	3710      	adds	r7, #16
 8001478:	46bd      	mov	sp, r7
 800147a:	bdb0      	pop	{r4, r5, r7, pc}

0800147c <Signal_RMS_Calculate>:

float Signal_RMS_Calculate(SignalFeature_t *signal){
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
	float energy = Signal_Energy_Calculate(signal);
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f7ff ffa9 	bl	80013dc <Signal_Energy_Calculate>
 800148a:	ed87 0a03 	vstr	s0, [r7, #12]
	signal->rms = 0.0f;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f04f 0200 	mov.w	r2, #0
 8001494:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	signal->rms = sqrt(energy / SIGNAL_SAMPLES_LENGTH);
 8001498:	edd7 7a03 	vldr	s15, [r7, #12]
 800149c:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80014e0 <Signal_RMS_Calculate+0x64>
 80014a0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80014a4:	ee16 0a90 	vmov	r0, s13
 80014a8:	f7ff f856 	bl	8000558 <__aeabi_f2d>
 80014ac:	4602      	mov	r2, r0
 80014ae:	460b      	mov	r3, r1
 80014b0:	ec43 2b10 	vmov	d0, r2, r3
 80014b4:	f00c faac 	bl	800da10 <sqrt>
 80014b8:	ec53 2b10 	vmov	r2, r3, d0
 80014bc:	4610      	mov	r0, r2
 80014be:	4619      	mov	r1, r3
 80014c0:	f7ff fb7a 	bl	8000bb8 <__aeabi_d2f>
 80014c4:	4602      	mov	r2, r0
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	return signal->rms;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80014d2:	ee07 3a90 	vmov	s15, r3
}
 80014d6:	eeb0 0a67 	vmov.f32	s0, s15
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	42480000 	.word	0x42480000

080014e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	PID_Init(&pid, kp, ti, td, dt);
 80014e8:	4b1c      	ldr	r3, [pc, #112]	; (800155c <main+0x78>)
 80014ea:	edd3 7a00 	vldr	s15, [r3]
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <main+0x7c>)
 80014f0:	ed93 7a00 	vldr	s14, [r3]
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <main+0x80>)
 80014f6:	edd3 6a00 	vldr	s13, [r3]
 80014fa:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <main+0x84>)
 80014fc:	ed93 6a00 	vldr	s12, [r3]
 8001500:	eef0 1a46 	vmov.f32	s3, s12
 8001504:	eeb0 1a66 	vmov.f32	s2, s13
 8001508:	eef0 0a47 	vmov.f32	s1, s14
 800150c:	eeb0 0a67 	vmov.f32	s0, s15
 8001510:	4816      	ldr	r0, [pc, #88]	; (800156c <main+0x88>)
 8001512:	f000 fad8 	bl	8001ac6 <PID_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001516:	f000 fe25 	bl	8002164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800151a:	f000 f833 	bl	8001584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151e:	f7ff fe2d 	bl	800117c <MX_GPIO_Init>
  MX_DMA_Init();
 8001522:	f7ff fe0b 	bl	800113c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8001526:	f008 fd4d 	bl	8009fc4 <MX_USB_DEVICE_Init>
  MX_TIM10_Init();
 800152a:	f000 fd55 	bl	8001fd8 <MX_TIM10_Init>
  MX_ADC1_Init();
 800152e:	f7ff fd15 	bl	8000f5c <MX_ADC1_Init>
  MX_TIM9_Init();
 8001532:	f000 fced 	bl	8001f10 <MX_TIM9_Init>
  MX_I2C1_Init();
 8001536:	f7ff fe91 	bl	800125c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 800153a:	480d      	ldr	r0, [pc, #52]	; (8001570 <main+0x8c>)
 800153c:	f004 fa28 	bl	8005990 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001540:	2100      	movs	r1, #0
 8001542:	480c      	ldr	r0, [pc, #48]	; (8001574 <main+0x90>)
 8001544:	f004 fae0 	bl	8005b08 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 3);
 8001548:	2203      	movs	r2, #3
 800154a:	490b      	ldr	r1, [pc, #44]	; (8001578 <main+0x94>)
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <main+0x98>)
 800154e:	f000 fff3 	bl	8002538 <HAL_ADC_Start_DMA>

  Signal_Buf_Init(&sig);
 8001552:	480b      	ldr	r0, [pc, #44]	; (8001580 <main+0x9c>)
 8001554:	f7ff fef8 	bl	8001348 <Signal_Buf_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001558:	e7fe      	b.n	8001558 <main+0x74>
 800155a:	bf00      	nop
 800155c:	2000000c 	.word	0x2000000c
 8001560:	20000010 	.word	0x20000010
 8001564:	20000014 	.word	0x20000014
 8001568:	20000018 	.word	0x20000018
 800156c:	20000530 	.word	0x20000530
 8001570:	20000638 	.word	0x20000638
 8001574:	200005f0 	.word	0x200005f0
 8001578:	20000414 	.word	0x20000414
 800157c:	2000030c 	.word	0x2000030c
 8001580:	20000450 	.word	0x20000450

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b094      	sub	sp, #80	; 0x50
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0320 	add.w	r3, r7, #32
 800158e:	2230      	movs	r2, #48	; 0x30
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f009 fa76 	bl	800aa84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a8:	2300      	movs	r3, #0
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	4b29      	ldr	r3, [pc, #164]	; (8001654 <SystemClock_Config+0xd0>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	4a28      	ldr	r2, [pc, #160]	; (8001654 <SystemClock_Config+0xd0>)
 80015b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b6:	6413      	str	r3, [r2, #64]	; 0x40
 80015b8:	4b26      	ldr	r3, [pc, #152]	; (8001654 <SystemClock_Config+0xd0>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015c4:	2300      	movs	r3, #0
 80015c6:	607b      	str	r3, [r7, #4]
 80015c8:	4b23      	ldr	r3, [pc, #140]	; (8001658 <SystemClock_Config+0xd4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015d0:	4a21      	ldr	r2, [pc, #132]	; (8001658 <SystemClock_Config+0xd4>)
 80015d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015d6:	6013      	str	r3, [r2, #0]
 80015d8:	4b1f      	ldr	r3, [pc, #124]	; (8001658 <SystemClock_Config+0xd4>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015e4:	2301      	movs	r3, #1
 80015e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ee:	2302      	movs	r3, #2
 80015f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80015f8:	2319      	movs	r3, #25
 80015fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001600:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001602:	2304      	movs	r3, #4
 8001604:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001606:	2307      	movs	r3, #7
 8001608:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800160a:	f107 0320 	add.w	r3, r7, #32
 800160e:	4618      	mov	r0, r3
 8001610:	f003 fd2a 	bl	8005068 <HAL_RCC_OscConfig>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800161a:	f000 fa4f 	bl	8001abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161e:	230f      	movs	r3, #15
 8001620:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001622:	2302      	movs	r3, #2
 8001624:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800162a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800162e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001630:	2300      	movs	r3, #0
 8001632:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001634:	f107 030c 	add.w	r3, r7, #12
 8001638:	2102      	movs	r1, #2
 800163a:	4618      	mov	r0, r3
 800163c:	f003 ff8c 	bl	8005558 <HAL_RCC_ClockConfig>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001646:	f000 fa39 	bl	8001abc <Error_Handler>
  }
}
 800164a:	bf00      	nop
 800164c:	3750      	adds	r7, #80	; 0x50
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
 8001652:	bf00      	nop
 8001654:	40023800 	.word	0x40023800
 8001658:	40007000 	.word	0x40007000
 800165c:	00000000 	.word	0x00000000

08001660 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 8001660:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001662:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8001666:	af06      	add	r7, sp, #24
 8001668:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800166c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8001670:	6018      	str	r0, [r3, #0]
	if(htim->Instance == TIM10){
 8001672:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8001676:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a90      	ldr	r2, [pc, #576]	; (80018c0 <HAL_TIM_PeriodElapsedCallback+0x260>)
 8001680:	4293      	cmp	r3, r2
 8001682:	f040 81b4 	bne.w	80019ee <HAL_TIM_PeriodElapsedCallback+0x38e>
		char logbuf[512];

		uint8_t i = 0;
 8001686:	2300      	movs	r3, #0
 8001688:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
		char *p = strtok(usbd_buf_recv, ",");
 800168c:	498d      	ldr	r1, [pc, #564]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 800168e:	488e      	ldr	r0, [pc, #568]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001690:	f009 fe8a 	bl	800b3a8 <strtok>
 8001694:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
//		char *array[2];
//		array[0] = malloc(10);
//		array[1] = malloc(10);

		while(p != NULL){
 8001698:	e010      	b.n	80016bc <HAL_TIM_PeriodElapsedCallback+0x5c>
			array[i++] = p;
 800169a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800169e:	1c5a      	adds	r2, r3, #1
 80016a0:	f887 220f 	strb.w	r2, [r7, #527]	; 0x20f
 80016a4:	4619      	mov	r1, r3
 80016a6:	4a89      	ldr	r2, [pc, #548]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80016a8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80016ac:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
			p = strtok(NULL, ",");
 80016b0:	4984      	ldr	r1, [pc, #528]	; (80018c4 <HAL_TIM_PeriodElapsedCallback+0x264>)
 80016b2:	2000      	movs	r0, #0
 80016b4:	f009 fe78 	bl	800b3a8 <strtok>
 80016b8:	f8c7 0208 	str.w	r0, [r7, #520]	; 0x208
		while(p != NULL){
 80016bc:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1ea      	bne.n	800169a <HAL_TIM_PeriodElapsedCallback+0x3a>
		}

		parsedBuf[0] = atoi(array[0]);
 80016c4:	4b81      	ldr	r3, [pc, #516]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f009 f99f 	bl	800aa0c <atoi>
 80016ce:	4603      	mov	r3, r0
 80016d0:	4a7f      	ldr	r2, [pc, #508]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80016d2:	6013      	str	r3, [r2, #0]
		parsedBuf[1] = atoi(array[1]);
 80016d4:	4b7d      	ldr	r3, [pc, #500]	; (80018cc <HAL_TIM_PeriodElapsedCallback+0x26c>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	4618      	mov	r0, r3
 80016da:	f009 f997 	bl	800aa0c <atoi>
 80016de:	4603      	mov	r3, r0
 80016e0:	4a7b      	ldr	r2, [pc, #492]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80016e2:	6053      	str	r3, [r2, #4]


		if(parsedBuf[0] == 1){
 80016e4:	4b7a      	ldr	r3, [pc, #488]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d105      	bne.n	80016f8 <HAL_TIM_PeriodElapsedCallback+0x98>
			device_status = parsedBuf[1];
 80016ec:	4b78      	ldr	r3, [pc, #480]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	b2da      	uxtb	r2, r3
 80016f2:	4b78      	ldr	r3, [pc, #480]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80016f4:	701a      	strb	r2, [r3, #0]
 80016f6:	e010      	b.n	800171a <HAL_TIM_PeriodElapsedCallback+0xba>
		}else if(parsedBuf[0] == 2){
 80016f8:	4b75      	ldr	r3, [pc, #468]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d104      	bne.n	800170a <HAL_TIM_PeriodElapsedCallback+0xaa>
			emg_offset = parsedBuf[1];
 8001700:	4b73      	ldr	r3, [pc, #460]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	4a74      	ldr	r2, [pc, #464]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 8001706:	6013      	str	r3, [r2, #0]
 8001708:	e007      	b.n	800171a <HAL_TIM_PeriodElapsedCallback+0xba>
		}else if(parsedBuf[0] == 3){
 800170a:	4b71      	ldr	r3, [pc, #452]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	2b03      	cmp	r3, #3
 8001710:	d103      	bne.n	800171a <HAL_TIM_PeriodElapsedCallback+0xba>
			arm_condition_thresh = parsedBuf[1];
 8001712:	4b6f      	ldr	r3, [pc, #444]	; (80018d0 <HAL_TIM_PeriodElapsedCallback+0x270>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	4a71      	ldr	r2, [pc, #452]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001718:	6013      	str	r3, [r2, #0]
		}

		memset(usbd_buf_recv, NULL, sizeof(usbd_buf_recv));
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	2100      	movs	r1, #0
 800171e:	486a      	ldr	r0, [pc, #424]	; (80018c8 <HAL_TIM_PeriodElapsedCallback+0x268>)
 8001720:	f009 f9b0 	bl	800aa84 <memset>
		sum_fsr = fsr[0] + fsr[1];
 8001724:	4b6e      	ldr	r3, [pc, #440]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	4b6d      	ldr	r3, [pc, #436]	; (80018e0 <HAL_TIM_PeriodElapsedCallback+0x280>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4413      	add	r3, r2
 800172e:	4a6d      	ldr	r2, [pc, #436]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001730:	6013      	str	r3, [r2, #0]
		sum_fsr_to_voltage = (float)sum_fsr / 4096 * 3.3;
 8001732:	4b6c      	ldr	r3, [pc, #432]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	ee07 3a90 	vmov	s15, r3
 800173a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800173e:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80018e8 <HAL_TIM_PeriodElapsedCallback+0x288>
 8001742:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001746:	ee16 0a90 	vmov	r0, s13
 800174a:	f7fe ff05 	bl	8000558 <__aeabi_f2d>
 800174e:	a35a      	add	r3, pc, #360	; (adr r3, 80018b8 <HAL_TIM_PeriodElapsedCallback+0x258>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe ff58 	bl	8000608 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4610      	mov	r0, r2
 800175e:	4619      	mov	r1, r3
 8001760:	f7ff fa2a 	bl	8000bb8 <__aeabi_d2f>
 8001764:	4603      	mov	r3, r0
 8001766:	4a61      	ldr	r2, [pc, #388]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0x28c>)
 8001768:	6013      	str	r3, [r2, #0]
		pid_out = PID_Update(&pid, arm_pressure, sum_fsr) + 1500;
 800176a:	4b61      	ldr	r3, [pc, #388]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0x290>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a5d      	ldr	r2, [pc, #372]	; (80018e4 <HAL_TIM_PeriodElapsedCallback+0x284>)
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	4619      	mov	r1, r3
 8001774:	485f      	ldr	r0, [pc, #380]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0x294>)
 8001776:	f000 f9dd 	bl	8001b34 <PID_Update>
 800177a:	eef0 7a40 	vmov.f32	s15, s0
 800177e:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80018f8 <HAL_TIM_PeriodElapsedCallback+0x298>
 8001782:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001786:	4b5d      	ldr	r3, [pc, #372]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001788:	edc3 7a00 	vstr	s15, [r3]
		pid_out_clamped = pid_out;
 800178c:	4b5b      	ldr	r3, [pc, #364]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a5b      	ldr	r2, [pc, #364]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 8001792:	6013      	str	r3, [r2, #0]

		if(pid_out > 2000){
 8001794:	4b59      	ldr	r3, [pc, #356]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 8001796:	edd3 7a00 	vldr	s15, [r3]
 800179a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8001904 <HAL_TIM_PeriodElapsedCallback+0x2a4>
 800179e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a6:	dd03      	ble.n	80017b0 <HAL_TIM_PeriodElapsedCallback+0x150>
			pid_out_clamped = 2000;
 80017a8:	4b55      	ldr	r3, [pc, #340]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80017aa:	4a57      	ldr	r2, [pc, #348]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0x2a8>)
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	e00c      	b.n	80017ca <HAL_TIM_PeriodElapsedCallback+0x16a>
		}else if(pid_out < 1000){
 80017b0:	4b52      	ldr	r3, [pc, #328]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0x29c>)
 80017b2:	edd3 7a00 	vldr	s15, [r3]
 80017b6:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800190c <HAL_TIM_PeriodElapsedCallback+0x2ac>
 80017ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c2:	d502      	bpl.n	80017ca <HAL_TIM_PeriodElapsedCallback+0x16a>
			pid_out_clamped = 1000;
 80017c4:	4b4e      	ldr	r3, [pc, #312]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80017c6:	4a52      	ldr	r2, [pc, #328]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0x2b0>)
 80017c8:	601a      	str	r2, [r3, #0]
		}

		if(arm_state == 1 && device_status == 1){
 80017ca:	4b52      	ldr	r3, [pc, #328]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d10e      	bne.n	80017f0 <HAL_TIM_PeriodElapsedCallback+0x190>
 80017d2:	4b40      	ldr	r3, [pc, #256]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d10a      	bne.n	80017f0 <HAL_TIM_PeriodElapsedCallback+0x190>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, pid_out_clamped);
 80017da:	4b49      	ldr	r3, [pc, #292]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0x2a0>)
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	4b4d      	ldr	r3, [pc, #308]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017e8:	ee17 2a90 	vmov	r2, s15
 80017ec:	635a      	str	r2, [r3, #52]	; 0x34
 80017ee:	e012      	b.n	8001816 <HAL_TIM_PeriodElapsedCallback+0x1b6>
		}else if(arm_state == 0 && device_status == 1){
 80017f0:	4b48      	ldr	r3, [pc, #288]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d109      	bne.n	800180c <HAL_TIM_PeriodElapsedCallback+0x1ac>
 80017f8:	4b36      	ldr	r3, [pc, #216]	; (80018d4 <HAL_TIM_PeriodElapsedCallback+0x274>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d105      	bne.n	800180c <HAL_TIM_PeriodElapsedCallback+0x1ac>
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 1000);
 8001800:	4b45      	ldr	r3, [pc, #276]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001808:	635a      	str	r2, [r3, #52]	; 0x34
 800180a:	e004      	b.n	8001816 <HAL_TIM_PeriodElapsedCallback+0x1b6>
		}else{
			__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 1000);
 800180c:	4b42      	ldr	r3, [pc, #264]	; (8001918 <HAL_TIM_PeriodElapsedCallback+0x2b8>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001814:	635a      	str	r2, [r3, #52]	; 0x34
		}

//		emg_rawdiff = mav.out - emg_rawbfr;
		emg_rmv_offset = emg_raw - emg_offset;
 8001816:	4b41      	ldr	r3, [pc, #260]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001818:	881b      	ldrh	r3, [r3, #0]
 800181a:	461a      	mov	r2, r3
 800181c:	4b2e      	ldr	r3, [pc, #184]	; (80018d8 <HAL_TIM_PeriodElapsedCallback+0x278>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	4a3f      	ldr	r2, [pc, #252]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001824:	6013      	str	r3, [r2, #0]
		emg_rawdiff = emg_raw - emg_rawbfr;
 8001826:	4b3d      	ldr	r3, [pc, #244]	; (800191c <HAL_TIM_PeriodElapsedCallback+0x2bc>)
 8001828:	881b      	ldrh	r3, [r3, #0]
 800182a:	ee07 3a90 	vmov	s15, r3
 800182e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001832:	4b3c      	ldr	r3, [pc, #240]	; (8001924 <HAL_TIM_PeriodElapsedCallback+0x2c4>)
 8001834:	edd3 7a00 	vldr	s15, [r3]
 8001838:	ee77 7a67 	vsub.f32	s15, s14, s15
 800183c:	4b3a      	ldr	r3, [pc, #232]	; (8001928 <HAL_TIM_PeriodElapsedCallback+0x2c8>)
 800183e:	edc3 7a00 	vstr	s15, [r3]
//		emg_rawdiff = abs(emg_rawdiff);
//		if(emg_rawdiff < 0){
//			emg_rawdiff = emg_rawdiff * -1;
//		}
//
		Signal_Buf_Update(&sig, emg_rmv_offset);
 8001842:	4b37      	ldr	r3, [pc, #220]	; (8001920 <HAL_TIM_PeriodElapsedCallback+0x2c0>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	ee07 3a90 	vmov	s15, r3
 800184a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800184e:	eeb0 0a67 	vmov.f32	s0, s15
 8001852:	4836      	ldr	r0, [pc, #216]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001854:	f7ff fd9d 	bl	8001392 <Signal_Buf_Update>
		Signal_RMS_Calculate(&sig);
 8001858:	4834      	ldr	r0, [pc, #208]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 800185a:	f7ff fe0f 	bl	800147c <Signal_RMS_Calculate>

		if(sig.rms > arm_condition_thresh){
 800185e:	4b33      	ldr	r3, [pc, #204]	; (800192c <HAL_TIM_PeriodElapsedCallback+0x2cc>)
 8001860:	ed93 7a36 	vldr	s14, [r3, #216]	; 0xd8
 8001864:	4b1d      	ldr	r3, [pc, #116]	; (80018dc <HAL_TIM_PeriodElapsedCallback+0x27c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	ee07 3a90 	vmov	s15, r3
 800186c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001870:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001878:	dd62      	ble.n	8001940 <HAL_TIM_PeriodElapsedCallback+0x2e0>
			if(prosthetic_statebfr == true){
 800187a:	4b2d      	ldr	r3, [pc, #180]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d015      	beq.n	80018ae <HAL_TIM_PeriodElapsedCallback+0x24e>
				truth_counter_thresh++;
 8001882:	4b2c      	ldr	r3, [pc, #176]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001884:	881b      	ldrh	r3, [r3, #0]
 8001886:	3301      	adds	r3, #1
 8001888:	b29a      	uxth	r2, r3
 800188a:	4b2a      	ldr	r3, [pc, #168]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 800188c:	801a      	strh	r2, [r3, #0]
				if(truth_counter_thresh >= truth_counter_maxval){
 800188e:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <HAL_TIM_PeriodElapsedCallback+0x2d8>)
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	b29a      	uxth	r2, r3
 8001894:	4b27      	ldr	r3, [pc, #156]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 8001896:	881b      	ldrh	r3, [r3, #0]
 8001898:	429a      	cmp	r2, r3
 800189a:	d808      	bhi.n	80018ae <HAL_TIM_PeriodElapsedCallback+0x24e>
					prosthetic_state = true;
 800189c:	4b27      	ldr	r3, [pc, #156]	; (800193c <HAL_TIM_PeriodElapsedCallback+0x2dc>)
 800189e:	2201      	movs	r2, #1
 80018a0:	701a      	strb	r2, [r3, #0]
					arm_state = 1;
 80018a2:	4b1c      	ldr	r3, [pc, #112]	; (8001914 <HAL_TIM_PeriodElapsedCallback+0x2b4>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
					truth_counter_thresh = 0;
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <HAL_TIM_PeriodElapsedCallback+0x2d4>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	801a      	strh	r2, [r3, #0]
				}
			}
			prosthetic_statebfr = true;
 80018ae:	4b20      	ldr	r3, [pc, #128]	; (8001930 <HAL_TIM_PeriodElapsedCallback+0x2d0>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	e063      	b.n	800197e <HAL_TIM_PeriodElapsedCallback+0x31e>
 80018b6:	bf00      	nop
 80018b8:	66666666 	.word	0x66666666
 80018bc:	400a6666 	.word	0x400a6666
 80018c0:	40014400 	.word	0x40014400
 80018c4:	0800dbe8 	.word	0x0800dbe8
 80018c8:	20000558 	.word	0x20000558
 80018cc:	200005d8 	.word	0x200005d8
 80018d0:	200005e0 	.word	0x200005e0
 80018d4:	200005e8 	.word	0x200005e8
 80018d8:	2000001c 	.word	0x2000001c
 80018dc:	20000008 	.word	0x20000008
 80018e0:	20000420 	.word	0x20000420
 80018e4:	20000428 	.word	0x20000428
 80018e8:	45800000 	.word	0x45800000
 80018ec:	2000042c 	.word	0x2000042c
 80018f0:	20000000 	.word	0x20000000
 80018f4:	20000530 	.word	0x20000530
 80018f8:	44bb8000 	.word	0x44bb8000
 80018fc:	20000448 	.word	0x20000448
 8001900:	2000044c 	.word	0x2000044c
 8001904:	44fa0000 	.word	0x44fa0000
 8001908:	44fa0000 	.word	0x44fa0000
 800190c:	447a0000 	.word	0x447a0000
 8001910:	447a0000 	.word	0x447a0000
 8001914:	20000438 	.word	0x20000438
 8001918:	200005f0 	.word	0x200005f0
 800191c:	20000430 	.word	0x20000430
 8001920:	20000434 	.word	0x20000434
 8001924:	2000043c 	.word	0x2000043c
 8001928:	20000440 	.word	0x20000440
 800192c:	20000450 	.word	0x20000450
 8001930:	20000447 	.word	0x20000447
 8001934:	20000444 	.word	0x20000444
 8001938:	20000004 	.word	0x20000004
 800193c:	20000446 	.word	0x20000446
		}else{
			if(prosthetic_statebfr == false){
 8001940:	4b2d      	ldr	r3, [pc, #180]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x398>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	f083 0301 	eor.w	r3, r3, #1
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d014      	beq.n	8001978 <HAL_TIM_PeriodElapsedCallback+0x318>
				truth_counter_thresh++;
 800194e:	4b2b      	ldr	r3, [pc, #172]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	3301      	adds	r3, #1
 8001954:	b29a      	uxth	r2, r3
 8001956:	4b29      	ldr	r3, [pc, #164]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001958:	801a      	strh	r2, [r3, #0]
				if(truth_counter_thresh >= truth_counter_maxval_arm_closed){
 800195a:	4b28      	ldr	r3, [pc, #160]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x39c>)
 800195c:	881a      	ldrh	r2, [r3, #0]
 800195e:	4b28      	ldr	r3, [pc, #160]	; (8001a00 <HAL_TIM_PeriodElapsedCallback+0x3a0>)
 8001960:	881b      	ldrh	r3, [r3, #0]
 8001962:	429a      	cmp	r2, r3
 8001964:	d308      	bcc.n	8001978 <HAL_TIM_PeriodElapsedCallback+0x318>
					prosthetic_state = false;
 8001966:	4b27      	ldr	r3, [pc, #156]	; (8001a04 <HAL_TIM_PeriodElapsedCallback+0x3a4>)
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
					arm_state = 0;
 800196c:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <HAL_TIM_PeriodElapsedCallback+0x3a8>)
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
					truth_counter_thresh = 0;
 8001972:	4b22      	ldr	r3, [pc, #136]	; (80019fc <HAL_TIM_PeriodElapsedCallback+0x39c>)
 8001974:	2200      	movs	r2, #0
 8001976:	801a      	strh	r2, [r3, #0]
				}
			}
			prosthetic_statebfr = false;
 8001978:	4b1f      	ldr	r3, [pc, #124]	; (80019f8 <HAL_TIM_PeriodElapsedCallback+0x398>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
		}

//		sprintf(logbuf, "%.2f,%d,%.2f,%.2f,%.2f,\r\n",sig.rms, arm_condition_thresh, sum_fsr_to_voltage, pid_out, pid_out_clamped);
		sprintf(logbuf, "%.2f,%d,%.2f,%d,%d,\r\n",sig.rms, arm_condition_thresh, sum_fsr_to_voltage, sum_fsr, arm_pressure);
 800197e:	4b23      	ldr	r3, [pc, #140]	; (8001a0c <HAL_TIM_PeriodElapsedCallback+0x3ac>)
 8001980:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001984:	4618      	mov	r0, r3
 8001986:	f7fe fde7 	bl	8000558 <__aeabi_f2d>
 800198a:	4604      	mov	r4, r0
 800198c:	460d      	mov	r5, r1
 800198e:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <HAL_TIM_PeriodElapsedCallback+0x3b0>)
 8001990:	681e      	ldr	r6, [r3, #0]
 8001992:	4b20      	ldr	r3, [pc, #128]	; (8001a14 <HAL_TIM_PeriodElapsedCallback+0x3b4>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f7fe fdde 	bl	8000558 <__aeabi_f2d>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	491d      	ldr	r1, [pc, #116]	; (8001a18 <HAL_TIM_PeriodElapsedCallback+0x3b8>)
 80019a2:	6809      	ldr	r1, [r1, #0]
 80019a4:	481d      	ldr	r0, [pc, #116]	; (8001a1c <HAL_TIM_PeriodElapsedCallback+0x3bc>)
 80019a6:	6800      	ldr	r0, [r0, #0]
 80019a8:	f107 0c08 	add.w	ip, r7, #8
 80019ac:	9005      	str	r0, [sp, #20]
 80019ae:	9104      	str	r1, [sp, #16]
 80019b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019b4:	9600      	str	r6, [sp, #0]
 80019b6:	4622      	mov	r2, r4
 80019b8:	462b      	mov	r3, r5
 80019ba:	4919      	ldr	r1, [pc, #100]	; (8001a20 <HAL_TIM_PeriodElapsedCallback+0x3c0>)
 80019bc:	4660      	mov	r0, ip
 80019be:	f009 fcd3 	bl	800b368 <siprintf>
//		sprintf(logbuf, "%d,%.2f,%.2f,%d,%.2f\r\n", emg_raw, sig.rms, pid_out, sum_fsr, pid_out_clamped);
		CDC_Transmit_FS((uint8_t*)logbuf, strlen(logbuf));
 80019c2:	f107 0308 	add.w	r3, r7, #8
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7fe fc0a 	bl	80001e0 <strlen>
 80019cc:	4603      	mov	r3, r0
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	f107 0308 	add.w	r3, r7, #8
 80019d4:	4611      	mov	r1, r2
 80019d6:	4618      	mov	r0, r3
 80019d8:	f008 fbbc 	bl	800a154 <CDC_Transmit_FS>

		emg_rawbfr = emg_raw;
 80019dc:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <HAL_TIM_PeriodElapsedCallback+0x3c4>)
 80019de:	881b      	ldrh	r3, [r3, #0]
 80019e0:	ee07 3a90 	vmov	s15, r3
 80019e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 80019ea:	edc3 7a00 	vstr	s15, [r3]
	}
}
 80019ee:	bf00      	nop
 80019f0:	f507 7705 	add.w	r7, r7, #532	; 0x214
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019f8:	20000447 	.word	0x20000447
 80019fc:	20000444 	.word	0x20000444
 8001a00:	20000006 	.word	0x20000006
 8001a04:	20000446 	.word	0x20000446
 8001a08:	20000438 	.word	0x20000438
 8001a0c:	20000450 	.word	0x20000450
 8001a10:	20000008 	.word	0x20000008
 8001a14:	2000042c 	.word	0x2000042c
 8001a18:	20000428 	.word	0x20000428
 8001a1c:	20000000 	.word	0x20000000
 8001a20:	0800dbec 	.word	0x0800dbec
 8001a24:	20000430 	.word	0x20000430
 8001a28:	2000043c 	.word	0x2000043c

08001a2c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
	for(int i =0; i < 3; i++){
 8001a34:	2300      	movs	r3, #0
 8001a36:	60fb      	str	r3, [r7, #12]
 8001a38:	e00a      	b.n	8001a50 <HAL_ADC_ConvCpltCallback+0x24>
		adc[i] = adc_buffer[i];
 8001a3a:	4a11      	ldr	r2, [pc, #68]	; (8001a80 <HAL_ADC_ConvCpltCallback+0x54>)
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001a42:	4910      	ldr	r1, [pc, #64]	; (8001a84 <HAL_ADC_ConvCpltCallback+0x58>)
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i =0; i < 3; i++){
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	ddf1      	ble.n	8001a3a <HAL_ADC_ConvCpltCallback+0xe>
	}
	emg_raw = adc[0];
 8001a56:	4b0b      	ldr	r3, [pc, #44]	; (8001a84 <HAL_ADC_ConvCpltCallback+0x58>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	4b0a      	ldr	r3, [pc, #40]	; (8001a88 <HAL_ADC_ConvCpltCallback+0x5c>)
 8001a5e:	801a      	strh	r2, [r3, #0]
	fsr[0] = adc[1];
 8001a60:	4b08      	ldr	r3, [pc, #32]	; (8001a84 <HAL_ADC_ConvCpltCallback+0x58>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_ADC_ConvCpltCallback+0x60>)
 8001a68:	601a      	str	r2, [r3, #0]
	fsr[1] = adc[2];
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_ADC_ConvCpltCallback+0x58>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	461a      	mov	r2, r3
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_ADC_ConvCpltCallback+0x60>)
 8001a72:	605a      	str	r2, [r3, #4]

}
 8001a74:	bf00      	nop
 8001a76:	3714      	adds	r7, #20
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	20000414 	.word	0x20000414
 8001a84:	20000408 	.word	0x20000408
 8001a88:	20000430 	.word	0x20000430
 8001a8c:	20000420 	.word	0x20000420

08001a90 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 8001a9a:	88fb      	ldrh	r3, [r7, #6]
 8001a9c:	2b01      	cmp	r3, #1
 8001a9e:	d105      	bne.n	8001aac <HAL_GPIO_EXTI_Callback+0x1c>
		calibration_counter++;
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <HAL_GPIO_EXTI_Callback+0x28>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	b2da      	uxtb	r2, r3
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_GPIO_EXTI_Callback+0x28>)
 8001aaa:	701a      	strb	r2, [r3, #0]
	}
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	20000439 	.word	0x20000439

08001abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ac0:	b672      	cpsid	i
}
 8001ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ac4:	e7fe      	b.n	8001ac4 <Error_Handler+0x8>

08001ac6 <PID_Init>:
 *      Author: Nawab
 */

#include "pid.h"

void PID_Init(PID_t *pid, float _kp, float _ti, float _td, float _dt){
 8001ac6:	b480      	push	{r7}
 8001ac8:	b087      	sub	sp, #28
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6178      	str	r0, [r7, #20]
 8001ace:	ed87 0a04 	vstr	s0, [r7, #16]
 8001ad2:	edc7 0a03 	vstr	s1, [r7, #12]
 8001ad6:	ed87 1a02 	vstr	s2, [r7, #8]
 8001ada:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->kp = _kp;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	601a      	str	r2, [r3, #0]
	pid->ti = _ti;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	605a      	str	r2, [r3, #4]
	pid->td = _td;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	609a      	str	r2, [r3, #8]

	pid->p = 0;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	60da      	str	r2, [r3, #12]
	pid->i = 0;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
	pid->d = 0;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f04f 0200 	mov.w	r2, #0
 8001b06:	615a      	str	r2, [r3, #20]

	pid->e_now = 0;
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
	pid->e_prev = 0;
 8001b10:	697b      	ldr	r3, [r7, #20]
 8001b12:	f04f 0200 	mov.w	r2, #0
 8001b16:	61da      	str	r2, [r3, #28]
	pid->de = 0;
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	f04f 0200 	mov.w	r2, #0
 8001b1e:	621a      	str	r2, [r3, #32]
	pid->dt = _dt;
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b26:	bf00      	nop
 8001b28:	371c      	adds	r7, #28
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
	...

08001b34 <PID_Update>:

float PID_Update(PID_t *pid, int reference, int input){
 8001b34:	b480      	push	{r7}
 8001b36:	b087      	sub	sp, #28
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
	float out;
	pid->e_now = reference - input;
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	ee07 3a90 	vmov	s15, r3
 8001b4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->de = pid->e_now - pid->e_prev;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	ed93 7a06 	vldr	s14, [r3, #24]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001b60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	edc3 7a08 	vstr	s15, [r3, #32]

	pid->p = pid->kp * pid->e_now;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	ed93 7a00 	vldr	s14, [r3]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	edd3 7a06 	vldr	s15, [r3, #24]
 8001b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->i = pid->i + (pid->e_now * pid->dt);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	ed93 7a04 	vldr	s14, [r3, #16]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	edd3 6a06 	vldr	s13, [r3, #24]
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b92:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	edc3 7a04 	vstr	s15, [r3, #16]
	if(pid->i > 1000){
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	edd3 7a04 	vldr	s15, [r3, #16]
 8001ba6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001c4c <PID_Update+0x118>
 8001baa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb2:	dd03      	ble.n	8001bbc <PID_Update+0x88>
		pid->i = 1000;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	4a26      	ldr	r2, [pc, #152]	; (8001c50 <PID_Update+0x11c>)
 8001bb8:	611a      	str	r2, [r3, #16]
 8001bba:	e00c      	b.n	8001bd6 <PID_Update+0xa2>
	}else if(pid->i < -1000){
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	edd3 7a04 	vldr	s15, [r3, #16]
 8001bc2:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001c54 <PID_Update+0x120>
 8001bc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bce:	d502      	bpl.n	8001bd6 <PID_Update+0xa2>
		pid->i = -1000;
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	4a21      	ldr	r2, [pc, #132]	; (8001c58 <PID_Update+0x124>)
 8001bd4:	611a      	str	r2, [r3, #16]
	}
	pid->d = pid->de / pid->dt;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	edd3 6a08 	vldr	s13, [r3, #32]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001be2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	edc3 7a05 	vstr	s15, [r3, #20]

	out = pid->kp * (pid->p + (1 / pid->ti) * pid->i + pid->td * pid->d);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	ed93 7a00 	vldr	s14, [r3]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	edd3 6a03 	vldr	s13, [r3, #12]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8001bfe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8001c02:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c0c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c10:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	ed93 6a02 	vldr	s12, [r3, #8]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001c20:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001c28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c2c:	edc7 7a05 	vstr	s15, [r7, #20]
	pid->e_prev = pid->e_now;
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	699a      	ldr	r2, [r3, #24]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	61da      	str	r2, [r3, #28]
	return out;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	ee07 3a90 	vmov	s15, r3
}
 8001c3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c42:	371c      	adds	r7, #28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr
 8001c4c:	447a0000 	.word	0x447a0000
 8001c50:	447a0000 	.word	0x447a0000
 8001c54:	c47a0000 	.word	0xc47a0000
 8001c58:	c47a0000 	.word	0xc47a0000

08001c5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c62:	2300      	movs	r3, #0
 8001c64:	607b      	str	r3, [r7, #4]
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6a:	4a0f      	ldr	r2, [pc, #60]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c70:	6453      	str	r3, [r2, #68]	; 0x44
 8001c72:	4b0d      	ldr	r3, [pc, #52]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7a:	607b      	str	r3, [r7, #4]
 8001c7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	603b      	str	r3, [r7, #0]
 8001c82:	4b09      	ldr	r3, [pc, #36]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a08      	ldr	r2, [pc, #32]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b06      	ldr	r3, [pc, #24]	; (8001ca8 <HAL_MspInit+0x4c>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c96:	603b      	str	r3, [r7, #0]
 8001c98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40023800 	.word	0x40023800

08001cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <NMI_Handler+0x4>

08001cb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cb6:	e7fe      	b.n	8001cb6 <HardFault_Handler+0x4>

08001cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbc:	e7fe      	b.n	8001cbc <MemManage_Handler+0x4>

08001cbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc2:	e7fe      	b.n	8001cc2 <BusFault_Handler+0x4>

08001cc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cc8:	e7fe      	b.n	8001cc8 <UsageFault_Handler+0x4>

08001cca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cca:	b480      	push	{r7}
 8001ccc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cdc:	bf00      	nop
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr

08001ce6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cea:	bf00      	nop
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cf8:	f000 fa86 	bl	8002208 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001cfc:	bf00      	nop
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001d04:	2001      	movs	r0, #1
 8001d06:	f001 fdd5 	bl	80038b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001d0a:	bf00      	nop
 8001d0c:	bd80      	pop	{r7, pc}
	...

08001d10 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <ADC_IRQHandler+0x10>)
 8001d16:	f000 fafe 	bl	8002316 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	2000030c 	.word	0x2000030c

08001d24 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001d2a:	f003 ff9d 	bl	8005c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000638 	.word	0x20000638

08001d38 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <DMA2_Stream0_IRQHandler+0x10>)
 8001d3e:	f001 f9cb 	bl	80030d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20000354 	.word	0x20000354

08001d4c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <OTG_FS_IRQHandler+0x10>)
 8001d52:	f002 f85b 	bl	8003e0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	20001b64 	.word	0x20001b64

08001d60 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
	return 1;
 8001d64:	2301      	movs	r3, #1
}
 8001d66:	4618      	mov	r0, r3
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_kill>:

int _kill(int pid, int sig)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001d7a:	f008 fe4b 	bl	800aa14 <__errno>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	2216      	movs	r2, #22
 8001d82:	601a      	str	r2, [r3, #0]
	return -1;
 8001d84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3708      	adds	r7, #8
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <_exit>:

void _exit (int status)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f7ff ffe7 	bl	8001d70 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001da2:	e7fe      	b.n	8001da2 <_exit+0x12>

08001da4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b086      	sub	sp, #24
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	e00a      	b.n	8001dcc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001db6:	f3af 8000 	nop.w
 8001dba:	4601      	mov	r1, r0
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	60ba      	str	r2, [r7, #8]
 8001dc2:	b2ca      	uxtb	r2, r1
 8001dc4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	617b      	str	r3, [r7, #20]
 8001dcc:	697a      	ldr	r2, [r7, #20]
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	dbf0      	blt.n	8001db6 <_read+0x12>
	}

return len;
 8001dd4:	687b      	ldr	r3, [r7, #4]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3718      	adds	r7, #24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}

08001dde <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dde:	b580      	push	{r7, lr}
 8001de0:	b086      	sub	sp, #24
 8001de2:	af00      	add	r7, sp, #0
 8001de4:	60f8      	str	r0, [r7, #12]
 8001de6:	60b9      	str	r1, [r7, #8]
 8001de8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	e009      	b.n	8001e04 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	60ba      	str	r2, [r7, #8]
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	3301      	adds	r3, #1
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	dbf1      	blt.n	8001df0 <_write+0x12>
	}
	return len;
 8001e0c:	687b      	ldr	r3, [r7, #4]
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3718      	adds	r7, #24
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <_close>:

int _close(int file)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
	return -1;
 8001e1e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr

08001e2e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e3e:	605a      	str	r2, [r3, #4]
	return 0;
 8001e40:	2300      	movs	r3, #0
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	370c      	adds	r7, #12
 8001e46:	46bd      	mov	sp, r7
 8001e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4c:	4770      	bx	lr

08001e4e <_isatty>:

int _isatty(int file)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	b083      	sub	sp, #12
 8001e52:	af00      	add	r7, sp, #0
 8001e54:	6078      	str	r0, [r7, #4]
	return 1;
 8001e56:	2301      	movs	r3, #1
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b085      	sub	sp, #20
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
	return 0;
 8001e70:	2300      	movs	r3, #0
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e88:	4a14      	ldr	r2, [pc, #80]	; (8001edc <_sbrk+0x5c>)
 8001e8a:	4b15      	ldr	r3, [pc, #84]	; (8001ee0 <_sbrk+0x60>)
 8001e8c:	1ad3      	subs	r3, r2, r3
 8001e8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e94:	4b13      	ldr	r3, [pc, #76]	; (8001ee4 <_sbrk+0x64>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d102      	bne.n	8001ea2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <_sbrk+0x64>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <_sbrk+0x68>)
 8001ea0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <_sbrk+0x64>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d207      	bcs.n	8001ec0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001eb0:	f008 fdb0 	bl	800aa14 <__errno>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	220c      	movs	r2, #12
 8001eb8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
 8001ebe:	e009      	b.n	8001ed4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ec0:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <_sbrk+0x64>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <_sbrk+0x64>)
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4413      	add	r3, r2
 8001ece:	4a05      	ldr	r2, [pc, #20]	; (8001ee4 <_sbrk+0x64>)
 8001ed0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ed2:	68fb      	ldr	r3, [r7, #12]
}
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	3718      	adds	r7, #24
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	bd80      	pop	{r7, pc}
 8001edc:	20018000 	.word	0x20018000
 8001ee0:	00000400 	.word	0x00000400
 8001ee4:	200005ec 	.word	0x200005ec
 8001ee8:	200022a0 	.word	0x200022a0

08001eec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <SystemInit+0x20>)
 8001ef2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef6:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <SystemInit+0x20>)
 8001ef8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001efc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f00:	bf00      	nop
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
 8001f0a:	bf00      	nop
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <MX_TIM9_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b08c      	sub	sp, #48	; 0x30
 8001f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f16:	f107 0320 	add.w	r3, r7, #32
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
 8001f1e:	605a      	str	r2, [r3, #4]
 8001f20:	609a      	str	r2, [r3, #8]
 8001f22:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2200      	movs	r2, #0
 8001f28:	601a      	str	r2, [r3, #0]
 8001f2a:	605a      	str	r2, [r3, #4]
 8001f2c:	609a      	str	r2, [r3, #8]
 8001f2e:	60da      	str	r2, [r3, #12]
 8001f30:	611a      	str	r2, [r3, #16]
 8001f32:	615a      	str	r2, [r3, #20]
 8001f34:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001f36:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <MX_TIM9_Init+0xc0>)
 8001f38:	4a26      	ldr	r2, [pc, #152]	; (8001fd4 <MX_TIM9_Init+0xc4>)
 8001f3a:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 8001f3c:	4b24      	ldr	r3, [pc, #144]	; (8001fd0 <MX_TIM9_Init+0xc0>)
 8001f3e:	2253      	movs	r2, #83	; 0x53
 8001f40:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f42:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <MX_TIM9_Init+0xc0>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <MX_TIM9_Init+0xc0>)
 8001f4a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001f4e:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f50:	4b1f      	ldr	r3, [pc, #124]	; (8001fd0 <MX_TIM9_Init+0xc0>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f56:	4b1e      	ldr	r3, [pc, #120]	; (8001fd0 <MX_TIM9_Init+0xc0>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001f5c:	481c      	ldr	r0, [pc, #112]	; (8001fd0 <MX_TIM9_Init+0xc0>)
 8001f5e:	f003 fcc7 	bl	80058f0 <HAL_TIM_Base_Init>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001f68:	f7ff fda8 	bl	8001abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f6c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f70:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001f72:	f107 0320 	add.w	r3, r7, #32
 8001f76:	4619      	mov	r1, r3
 8001f78:	4815      	ldr	r0, [pc, #84]	; (8001fd0 <MX_TIM9_Init+0xc0>)
 8001f7a:	f004 f83f 	bl	8005ffc <HAL_TIM_ConfigClockSource>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d001      	beq.n	8001f88 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001f84:	f7ff fd9a 	bl	8001abc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001f88:	4811      	ldr	r0, [pc, #68]	; (8001fd0 <MX_TIM9_Init+0xc0>)
 8001f8a:	f003 fd63 	bl	8005a54 <HAL_TIM_PWM_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001f94:	f7ff fd92 	bl	8001abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f98:	2360      	movs	r3, #96	; 0x60
 8001f9a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8001f9c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001fa0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001faa:	1d3b      	adds	r3, r7, #4
 8001fac:	2200      	movs	r2, #0
 8001fae:	4619      	mov	r1, r3
 8001fb0:	4807      	ldr	r0, [pc, #28]	; (8001fd0 <MX_TIM9_Init+0xc0>)
 8001fb2:	f003 ff61 	bl	8005e78 <HAL_TIM_PWM_ConfigChannel>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8001fbc:	f7ff fd7e 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001fc0:	4803      	ldr	r0, [pc, #12]	; (8001fd0 <MX_TIM9_Init+0xc0>)
 8001fc2:	f000 f86b 	bl	800209c <HAL_TIM_MspPostInit>

}
 8001fc6:	bf00      	nop
 8001fc8:	3730      	adds	r7, #48	; 0x30
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200005f0 	.word	0x200005f0
 8001fd4:	40014000 	.word	0x40014000

08001fd8 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001fdc:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <MX_TIM10_Init+0x40>)
 8001fde:	4a0f      	ldr	r2, [pc, #60]	; (800201c <MX_TIM10_Init+0x44>)
 8001fe0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <MX_TIM10_Init+0x40>)
 8001fe4:	2253      	movs	r2, #83	; 0x53
 8001fe6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <MX_TIM10_Init+0x40>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 500-1;
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <MX_TIM10_Init+0x40>)
 8001ff0:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001ff4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff6:	4b08      	ldr	r3, [pc, #32]	; (8002018 <MX_TIM10_Init+0x40>)
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ffc:	4b06      	ldr	r3, [pc, #24]	; (8002018 <MX_TIM10_Init+0x40>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002002:	4805      	ldr	r0, [pc, #20]	; (8002018 <MX_TIM10_Init+0x40>)
 8002004:	f003 fc74 	bl	80058f0 <HAL_TIM_Base_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 800200e:	f7ff fd55 	bl	8001abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000638 	.word	0x20000638
 800201c:	40014400 	.word	0x40014400

08002020 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a18      	ldr	r2, [pc, #96]	; (8002090 <HAL_TIM_Base_MspInit+0x70>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d10e      	bne.n	8002050 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002032:	2300      	movs	r3, #0
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	4b17      	ldr	r3, [pc, #92]	; (8002094 <HAL_TIM_Base_MspInit+0x74>)
 8002038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203a:	4a16      	ldr	r2, [pc, #88]	; (8002094 <HAL_TIM_Base_MspInit+0x74>)
 800203c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002040:	6453      	str	r3, [r2, #68]	; 0x44
 8002042:	4b14      	ldr	r3, [pc, #80]	; (8002094 <HAL_TIM_Base_MspInit+0x74>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800204a:	60fb      	str	r3, [r7, #12]
 800204c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800204e:	e01a      	b.n	8002086 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a10      	ldr	r2, [pc, #64]	; (8002098 <HAL_TIM_Base_MspInit+0x78>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d115      	bne.n	8002086 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800205a:	2300      	movs	r3, #0
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <HAL_TIM_Base_MspInit+0x74>)
 8002060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002062:	4a0c      	ldr	r2, [pc, #48]	; (8002094 <HAL_TIM_Base_MspInit+0x74>)
 8002064:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002068:	6453      	str	r3, [r2, #68]	; 0x44
 800206a:	4b0a      	ldr	r3, [pc, #40]	; (8002094 <HAL_TIM_Base_MspInit+0x74>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002076:	2200      	movs	r2, #0
 8002078:	2100      	movs	r1, #0
 800207a:	2019      	movs	r0, #25
 800207c:	f000 feef 	bl	8002e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002080:	2019      	movs	r0, #25
 8002082:	f000 ff08 	bl	8002e96 <HAL_NVIC_EnableIRQ>
}
 8002086:	bf00      	nop
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40014000 	.word	0x40014000
 8002094:	40023800 	.word	0x40023800
 8002098:	40014400 	.word	0x40014400

0800209c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b088      	sub	sp, #32
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 030c 	add.w	r3, r7, #12
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a12      	ldr	r2, [pc, #72]	; (8002104 <HAL_TIM_MspPostInit+0x68>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d11d      	bne.n	80020fa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60bb      	str	r3, [r7, #8]
 80020c2:	4b11      	ldr	r3, [pc, #68]	; (8002108 <HAL_TIM_MspPostInit+0x6c>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a10      	ldr	r2, [pc, #64]	; (8002108 <HAL_TIM_MspPostInit+0x6c>)
 80020c8:	f043 0301 	orr.w	r3, r3, #1
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <HAL_TIM_MspPostInit+0x6c>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	60bb      	str	r3, [r7, #8]
 80020d8:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PA2     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80020da:	2304      	movs	r3, #4
 80020dc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020de:	2302      	movs	r3, #2
 80020e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020e2:	2300      	movs	r3, #0
 80020e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020e6:	2300      	movs	r3, #0
 80020e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80020ea:	2303      	movs	r3, #3
 80020ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020ee:	f107 030c 	add.w	r3, r7, #12
 80020f2:	4619      	mov	r1, r3
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <HAL_TIM_MspPostInit+0x70>)
 80020f6:	f001 fa59 	bl	80035ac <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80020fa:	bf00      	nop
 80020fc:	3720      	adds	r7, #32
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	40014000 	.word	0x40014000
 8002108:	40023800 	.word	0x40023800
 800210c:	40020000 	.word	0x40020000

08002110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002148 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002114:	480d      	ldr	r0, [pc, #52]	; (800214c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002116:	490e      	ldr	r1, [pc, #56]	; (8002150 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002118:	4a0e      	ldr	r2, [pc, #56]	; (8002154 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800211a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800211c:	e002      	b.n	8002124 <LoopCopyDataInit>

0800211e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800211e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002122:	3304      	adds	r3, #4

08002124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002128:	d3f9      	bcc.n	800211e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800212a:	4a0b      	ldr	r2, [pc, #44]	; (8002158 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800212c:	4c0b      	ldr	r4, [pc, #44]	; (800215c <LoopFillZerobss+0x26>)
  movs r3, #0
 800212e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002130:	e001      	b.n	8002136 <LoopFillZerobss>

08002132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002134:	3204      	adds	r2, #4

08002136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002138:	d3fb      	bcc.n	8002132 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800213a:	f7ff fed7 	bl	8001eec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800213e:	f008 fc6f 	bl	800aa20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002142:	f7ff f9cf 	bl	80014e4 <main>
  bx  lr    
 8002146:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002148:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800214c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002150:	200002ec 	.word	0x200002ec
  ldr r2, =_sidata
 8002154:	0800e0bc 	.word	0x0800e0bc
  ldr r2, =_sbss
 8002158:	200002f0 	.word	0x200002f0
  ldr r4, =_ebss
 800215c:	200022a0 	.word	0x200022a0

08002160 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002160:	e7fe      	b.n	8002160 <DMA1_Stream0_IRQHandler>
	...

08002164 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002168:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <HAL_Init+0x40>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a0d      	ldr	r2, [pc, #52]	; (80021a4 <HAL_Init+0x40>)
 800216e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002172:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_Init+0x40>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_Init+0x40>)
 800217a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800217e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002180:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <HAL_Init+0x40>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a07      	ldr	r2, [pc, #28]	; (80021a4 <HAL_Init+0x40>)
 8002186:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800218a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800218c:	2003      	movs	r0, #3
 800218e:	f000 fe5b 	bl	8002e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002192:	200f      	movs	r0, #15
 8002194:	f000 f808 	bl	80021a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002198:	f7ff fd60 	bl	8001c5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	40023c00 	.word	0x40023c00

080021a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80021b0:	4b12      	ldr	r3, [pc, #72]	; (80021fc <HAL_InitTick+0x54>)
 80021b2:	681a      	ldr	r2, [r3, #0]
 80021b4:	4b12      	ldr	r3, [pc, #72]	; (8002200 <HAL_InitTick+0x58>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	4619      	mov	r1, r3
 80021ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021be:	fbb3 f3f1 	udiv	r3, r3, r1
 80021c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c6:	4618      	mov	r0, r3
 80021c8:	f000 fe73 	bl	8002eb2 <HAL_SYSTICK_Config>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e00e      	b.n	80021f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b0f      	cmp	r3, #15
 80021da:	d80a      	bhi.n	80021f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021dc:	2200      	movs	r2, #0
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	f04f 30ff 	mov.w	r0, #4294967295
 80021e4:	f000 fe3b 	bl	8002e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021e8:	4a06      	ldr	r2, [pc, #24]	; (8002204 <HAL_InitTick+0x5c>)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e000      	b.n	80021f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3708      	adds	r7, #8
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	20000020 	.word	0x20000020
 8002200:	20000028 	.word	0x20000028
 8002204:	20000024 	.word	0x20000024

08002208 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800220c:	4b06      	ldr	r3, [pc, #24]	; (8002228 <HAL_IncTick+0x20>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	461a      	mov	r2, r3
 8002212:	4b06      	ldr	r3, [pc, #24]	; (800222c <HAL_IncTick+0x24>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	4413      	add	r3, r2
 8002218:	4a04      	ldr	r2, [pc, #16]	; (800222c <HAL_IncTick+0x24>)
 800221a:	6013      	str	r3, [r2, #0]
}
 800221c:	bf00      	nop
 800221e:	46bd      	mov	sp, r7
 8002220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002224:	4770      	bx	lr
 8002226:	bf00      	nop
 8002228:	20000028 	.word	0x20000028
 800222c:	20000680 	.word	0x20000680

08002230 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return uwTick;
 8002234:	4b03      	ldr	r3, [pc, #12]	; (8002244 <HAL_GetTick+0x14>)
 8002236:	681b      	ldr	r3, [r3, #0]
}
 8002238:	4618      	mov	r0, r3
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	20000680 	.word	0x20000680

08002248 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b084      	sub	sp, #16
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002250:	f7ff ffee 	bl	8002230 <HAL_GetTick>
 8002254:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002260:	d005      	beq.n	800226e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002262:	4b0a      	ldr	r3, [pc, #40]	; (800228c <HAL_Delay+0x44>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	461a      	mov	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4413      	add	r3, r2
 800226c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800226e:	bf00      	nop
 8002270:	f7ff ffde 	bl	8002230 <HAL_GetTick>
 8002274:	4602      	mov	r2, r0
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	1ad3      	subs	r3, r2, r3
 800227a:	68fa      	ldr	r2, [r7, #12]
 800227c:	429a      	cmp	r2, r3
 800227e:	d8f7      	bhi.n	8002270 <HAL_Delay+0x28>
  {
  }
}
 8002280:	bf00      	nop
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000028 	.word	0x20000028

08002290 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002298:	2300      	movs	r3, #0
 800229a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d101      	bne.n	80022a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e033      	b.n	800230e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d109      	bne.n	80022c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7fe fec4 	bl	800103c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	2200      	movs	r2, #0
 80022b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2200      	movs	r2, #0
 80022be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c6:	f003 0310 	and.w	r3, r3, #16
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d118      	bne.n	8002300 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80022d6:	f023 0302 	bic.w	r3, r3, #2
 80022da:	f043 0202 	orr.w	r2, r3, #2
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 fb58 	bl	8002998 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f023 0303 	bic.w	r3, r3, #3
 80022f6:	f043 0201 	orr.w	r2, r3, #1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	641a      	str	r2, [r3, #64]	; 0x40
 80022fe:	e001      	b.n	8002304 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800230c:	7bfb      	ldrb	r3, [r7, #15]
}
 800230e:	4618      	mov	r0, r3
 8002310:	3710      	adds	r7, #16
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800231e:	2300      	movs	r3, #0
 8002320:	617b      	str	r3, [r7, #20]
 8002322:	2300      	movs	r3, #0
 8002324:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	f003 0302 	and.w	r3, r3, #2
 800233c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	f003 0320 	and.w	r3, r3, #32
 8002344:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d049      	beq.n	80023e0 <HAL_ADC_IRQHandler+0xca>
 800234c:	693b      	ldr	r3, [r7, #16]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d046      	beq.n	80023e0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	f003 0310 	and.w	r3, r3, #16
 800235a:	2b00      	cmp	r3, #0
 800235c:	d105      	bne.n	800236a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d12b      	bne.n	80023d0 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800237c:	2b00      	cmp	r3, #0
 800237e:	d127      	bne.n	80023d0 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002386:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800238a:	2b00      	cmp	r3, #0
 800238c:	d006      	beq.n	800239c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002398:	2b00      	cmp	r3, #0
 800239a:	d119      	bne.n	80023d0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	685a      	ldr	r2, [r3, #4]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 0220 	bic.w	r2, r2, #32
 80023aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d105      	bne.n	80023d0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	f043 0201 	orr.w	r2, r3, #1
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f7ff fb2b 	bl	8001a2c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f06f 0212 	mvn.w	r2, #18
 80023de:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f003 0304 	and.w	r3, r3, #4
 80023e6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023ee:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d057      	beq.n	80024a6 <HAL_ADC_IRQHandler+0x190>
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d054      	beq.n	80024a6 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002400:	f003 0310 	and.w	r3, r3, #16
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800240c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d139      	bne.n	8002496 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002428:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800242c:	2b00      	cmp	r3, #0
 800242e:	d006      	beq.n	800243e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	689b      	ldr	r3, [r3, #8]
 8002436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800243a:	2b00      	cmp	r3, #0
 800243c:	d12b      	bne.n	8002496 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002448:	2b00      	cmp	r3, #0
 800244a:	d124      	bne.n	8002496 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002456:	2b00      	cmp	r3, #0
 8002458:	d11d      	bne.n	8002496 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800245e:	2b00      	cmp	r3, #0
 8002460:	d119      	bne.n	8002496 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002470:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002486:	2b00      	cmp	r3, #0
 8002488:	d105      	bne.n	8002496 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f043 0201 	orr.w	r2, r3, #1
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	f000 fbfc 	bl	8002c94 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f06f 020c 	mvn.w	r2, #12
 80024a4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f003 0301 	and.w	r3, r3, #1
 80024ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024b4:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d017      	beq.n	80024ec <HAL_ADC_IRQHandler+0x1d6>
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d014      	beq.n	80024ec <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0301 	and.w	r3, r3, #1
 80024cc:	2b01      	cmp	r3, #1
 80024ce:	d10d      	bne.n	80024ec <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80024dc:	6878      	ldr	r0, [r7, #4]
 80024de:	f000 f925 	bl	800272c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f06f 0201 	mvn.w	r2, #1
 80024ea:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80024fa:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d015      	beq.n	800252e <HAL_ADC_IRQHandler+0x218>
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d012      	beq.n	800252e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	f043 0202 	orr.w	r2, r3, #2
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f06f 0220 	mvn.w	r2, #32
 800251c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f000 f90e 	bl	8002740 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f06f 0220 	mvn.w	r2, #32
 800252c:	601a      	str	r2, [r3, #0]
  }
}
 800252e:	bf00      	nop
 8002530:	3718      	adds	r7, #24
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
	...

08002538 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	60b9      	str	r1, [r7, #8]
 8002542:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002544:	2300      	movs	r3, #0
 8002546:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_ADC_Start_DMA+0x1e>
 8002552:	2302      	movs	r3, #2
 8002554:	e0ce      	b.n	80026f4 <HAL_ADC_Start_DMA+0x1bc>
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 0301 	and.w	r3, r3, #1
 8002568:	2b01      	cmp	r3, #1
 800256a:	d018      	beq.n	800259e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f042 0201 	orr.w	r2, r2, #1
 800257a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800257c:	4b5f      	ldr	r3, [pc, #380]	; (80026fc <HAL_ADC_Start_DMA+0x1c4>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a5f      	ldr	r2, [pc, #380]	; (8002700 <HAL_ADC_Start_DMA+0x1c8>)
 8002582:	fba2 2303 	umull	r2, r3, r2, r3
 8002586:	0c9a      	lsrs	r2, r3, #18
 8002588:	4613      	mov	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	4413      	add	r3, r2
 800258e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002590:	e002      	b.n	8002598 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	3b01      	subs	r3, #1
 8002596:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002598:	693b      	ldr	r3, [r7, #16]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d1f9      	bne.n	8002592 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	689b      	ldr	r3, [r3, #8]
 80025a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025ac:	d107      	bne.n	80025be <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	689a      	ldr	r2, [r3, #8]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	f040 8086 	bne.w	80026da <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80025d6:	f023 0301 	bic.w	r3, r3, #1
 80025da:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	685b      	ldr	r3, [r3, #4]
 80025e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d007      	beq.n	8002600 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025f8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002604:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002608:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800260c:	d106      	bne.n	800261c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002612:	f023 0206 	bic.w	r2, r3, #6
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	645a      	str	r2, [r3, #68]	; 0x44
 800261a:	e002      	b.n	8002622 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	2200      	movs	r2, #0
 8002620:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800262a:	4b36      	ldr	r3, [pc, #216]	; (8002704 <HAL_ADC_Start_DMA+0x1cc>)
 800262c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002632:	4a35      	ldr	r2, [pc, #212]	; (8002708 <HAL_ADC_Start_DMA+0x1d0>)
 8002634:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263a:	4a34      	ldr	r2, [pc, #208]	; (800270c <HAL_ADC_Start_DMA+0x1d4>)
 800263c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002642:	4a33      	ldr	r2, [pc, #204]	; (8002710 <HAL_ADC_Start_DMA+0x1d8>)
 8002644:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800264e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800265e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689a      	ldr	r2, [r3, #8]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800266e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	334c      	adds	r3, #76	; 0x4c
 800267a:	4619      	mov	r1, r3
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f000 fcd2 	bl	8003028 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2b00      	cmp	r3, #0
 800268e:	d10f      	bne.n	80026b0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	689b      	ldr	r3, [r3, #8]
 8002696:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d129      	bne.n	80026f2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026ac:	609a      	str	r2, [r3, #8]
 80026ae:	e020      	b.n	80026f2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a17      	ldr	r2, [pc, #92]	; (8002714 <HAL_ADC_Start_DMA+0x1dc>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d11b      	bne.n	80026f2 <HAL_ADC_Start_DMA+0x1ba>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d114      	bne.n	80026f2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80026d6:	609a      	str	r2, [r3, #8]
 80026d8:	e00b      	b.n	80026f2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f043 0210 	orr.w	r2, r3, #16
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026ea:	f043 0201 	orr.w	r2, r3, #1
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3718      	adds	r7, #24
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	20000020 	.word	0x20000020
 8002700:	431bde83 	.word	0x431bde83
 8002704:	40012300 	.word	0x40012300
 8002708:	08002b91 	.word	0x08002b91
 800270c:	08002c4b 	.word	0x08002c4b
 8002710:	08002c67 	.word	0x08002c67
 8002714:	40012000 	.word	0x40012000

08002718 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002720:	bf00      	nop
 8002722:	370c      	adds	r7, #12
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800275e:	2300      	movs	r3, #0
 8002760:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002768:	2b01      	cmp	r3, #1
 800276a:	d101      	bne.n	8002770 <HAL_ADC_ConfigChannel+0x1c>
 800276c:	2302      	movs	r3, #2
 800276e:	e105      	b.n	800297c <HAL_ADC_ConfigChannel+0x228>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	2b09      	cmp	r3, #9
 800277e:	d925      	bls.n	80027cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	68d9      	ldr	r1, [r3, #12]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	b29b      	uxth	r3, r3
 800278c:	461a      	mov	r2, r3
 800278e:	4613      	mov	r3, r2
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	4413      	add	r3, r2
 8002794:	3b1e      	subs	r3, #30
 8002796:	2207      	movs	r2, #7
 8002798:	fa02 f303 	lsl.w	r3, r2, r3
 800279c:	43da      	mvns	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	400a      	ands	r2, r1
 80027a4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68d9      	ldr	r1, [r3, #12]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	689a      	ldr	r2, [r3, #8]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	4618      	mov	r0, r3
 80027b8:	4603      	mov	r3, r0
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	4403      	add	r3, r0
 80027be:	3b1e      	subs	r3, #30
 80027c0:	409a      	lsls	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	430a      	orrs	r2, r1
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	e022      	b.n	8002812 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	6919      	ldr	r1, [r3, #16]
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	b29b      	uxth	r3, r3
 80027d8:	461a      	mov	r2, r3
 80027da:	4613      	mov	r3, r2
 80027dc:	005b      	lsls	r3, r3, #1
 80027de:	4413      	add	r3, r2
 80027e0:	2207      	movs	r2, #7
 80027e2:	fa02 f303 	lsl.w	r3, r2, r3
 80027e6:	43da      	mvns	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	400a      	ands	r2, r1
 80027ee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6919      	ldr	r1, [r3, #16]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	b29b      	uxth	r3, r3
 8002800:	4618      	mov	r0, r3
 8002802:	4603      	mov	r3, r0
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	4403      	add	r3, r0
 8002808:	409a      	lsls	r2, r3
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	430a      	orrs	r2, r1
 8002810:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	2b06      	cmp	r3, #6
 8002818:	d824      	bhi.n	8002864 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	4413      	add	r3, r2
 800282a:	3b05      	subs	r3, #5
 800282c:	221f      	movs	r2, #31
 800282e:	fa02 f303 	lsl.w	r3, r2, r3
 8002832:	43da      	mvns	r2, r3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	400a      	ands	r2, r1
 800283a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	4618      	mov	r0, r3
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	685a      	ldr	r2, [r3, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	3b05      	subs	r3, #5
 8002856:	fa00 f203 	lsl.w	r2, r0, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	635a      	str	r2, [r3, #52]	; 0x34
 8002862:	e04c      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b0c      	cmp	r3, #12
 800286a:	d824      	bhi.n	80028b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685a      	ldr	r2, [r3, #4]
 8002876:	4613      	mov	r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	4413      	add	r3, r2
 800287c:	3b23      	subs	r3, #35	; 0x23
 800287e:	221f      	movs	r2, #31
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43da      	mvns	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	400a      	ands	r2, r1
 800288c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	b29b      	uxth	r3, r3
 800289a:	4618      	mov	r0, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	4413      	add	r3, r2
 80028a6:	3b23      	subs	r3, #35	; 0x23
 80028a8:	fa00 f203 	lsl.w	r2, r0, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	430a      	orrs	r2, r1
 80028b2:	631a      	str	r2, [r3, #48]	; 0x30
 80028b4:	e023      	b.n	80028fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	3b41      	subs	r3, #65	; 0x41
 80028c8:	221f      	movs	r2, #31
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	400a      	ands	r2, r1
 80028d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	4618      	mov	r0, r3
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685a      	ldr	r2, [r3, #4]
 80028ea:	4613      	mov	r3, r2
 80028ec:	009b      	lsls	r3, r3, #2
 80028ee:	4413      	add	r3, r2
 80028f0:	3b41      	subs	r3, #65	; 0x41
 80028f2:	fa00 f203 	lsl.w	r2, r0, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	430a      	orrs	r2, r1
 80028fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_ADC_ConfigChannel+0x234>)
 8002900:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a21      	ldr	r2, [pc, #132]	; (800298c <HAL_ADC_ConfigChannel+0x238>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d109      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x1cc>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	2b12      	cmp	r3, #18
 8002912:	d105      	bne.n	8002920 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a19      	ldr	r2, [pc, #100]	; (800298c <HAL_ADC_ConfigChannel+0x238>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d123      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x21e>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b10      	cmp	r3, #16
 8002930:	d003      	beq.n	800293a <HAL_ADC_ConfigChannel+0x1e6>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	2b11      	cmp	r3, #17
 8002938:	d11b      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b10      	cmp	r3, #16
 800294c:	d111      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800294e:	4b10      	ldr	r3, [pc, #64]	; (8002990 <HAL_ADC_ConfigChannel+0x23c>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a10      	ldr	r2, [pc, #64]	; (8002994 <HAL_ADC_ConfigChannel+0x240>)
 8002954:	fba2 2303 	umull	r2, r3, r2, r3
 8002958:	0c9a      	lsrs	r2, r3, #18
 800295a:	4613      	mov	r3, r2
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002964:	e002      	b.n	800296c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	3b01      	subs	r3, #1
 800296a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f9      	bne.n	8002966 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
}
 800297c:	4618      	mov	r0, r3
 800297e:	3714      	adds	r7, #20
 8002980:	46bd      	mov	sp, r7
 8002982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002986:	4770      	bx	lr
 8002988:	40012300 	.word	0x40012300
 800298c:	40012000 	.word	0x40012000
 8002990:	20000020 	.word	0x20000020
 8002994:	431bde83 	.word	0x431bde83

08002998 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002998:	b480      	push	{r7}
 800299a:	b085      	sub	sp, #20
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029a0:	4b79      	ldr	r3, [pc, #484]	; (8002b88 <ADC_Init+0x1f0>)
 80029a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	685a      	ldr	r2, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	431a      	orrs	r2, r3
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685a      	ldr	r2, [r3, #4]
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	6859      	ldr	r1, [r3, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	691b      	ldr	r3, [r3, #16]
 80029d8:	021a      	lsls	r2, r3, #8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6859      	ldr	r1, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	689a      	ldr	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	430a      	orrs	r2, r1
 8002a02:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	689a      	ldr	r2, [r3, #8]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a12:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	6899      	ldr	r1, [r3, #8]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68da      	ldr	r2, [r3, #12]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	430a      	orrs	r2, r1
 8002a24:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2a:	4a58      	ldr	r2, [pc, #352]	; (8002b8c <ADC_Init+0x1f4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d022      	beq.n	8002a76 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a3e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6899      	ldr	r1, [r3, #8]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a60:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6899      	ldr	r1, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	430a      	orrs	r2, r1
 8002a72:	609a      	str	r2, [r3, #8]
 8002a74:	e00f      	b.n	8002a96 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a94:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	689a      	ldr	r2, [r3, #8]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0202 	bic.w	r2, r2, #2
 8002aa4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	6899      	ldr	r1, [r3, #8]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	7e1b      	ldrb	r3, [r3, #24]
 8002ab0:	005a      	lsls	r2, r3, #1
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d01b      	beq.n	8002afc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ad2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685a      	ldr	r2, [r3, #4]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002ae2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6859      	ldr	r1, [r3, #4]
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	3b01      	subs	r3, #1
 8002af0:	035a      	lsls	r2, r3, #13
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	430a      	orrs	r2, r1
 8002af8:	605a      	str	r2, [r3, #4]
 8002afa:	e007      	b.n	8002b0c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	685a      	ldr	r2, [r3, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b0a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	3b01      	subs	r3, #1
 8002b28:	051a      	lsls	r2, r3, #20
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	689a      	ldr	r2, [r3, #8]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002b40:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	6899      	ldr	r1, [r3, #8]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b4e:	025a      	lsls	r2, r3, #9
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	430a      	orrs	r2, r1
 8002b56:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b66:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	6899      	ldr	r1, [r3, #8]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	029a      	lsls	r2, r3, #10
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	430a      	orrs	r2, r1
 8002b7a:	609a      	str	r2, [r3, #8]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr
 8002b88:	40012300 	.word	0x40012300
 8002b8c:	0f000001 	.word	0x0f000001

08002b90 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d13c      	bne.n	8002c24 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d12b      	bne.n	8002c1c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d127      	bne.n	8002c1c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d006      	beq.n	8002be8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d119      	bne.n	8002c1c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 0220 	bic.w	r2, r2, #32
 8002bf6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d105      	bne.n	8002c1c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c14:	f043 0201 	orr.w	r2, r3, #1
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f7fe ff05 	bl	8001a2c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c22:	e00e      	b.n	8002c42 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c28:	f003 0310 	and.w	r3, r3, #16
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d003      	beq.n	8002c38 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f7ff fd85 	bl	8002740 <HAL_ADC_ErrorCallback>
}
 8002c36:	e004      	b.n	8002c42 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	4798      	blx	r3
}
 8002c42:	bf00      	nop
 8002c44:	3710      	adds	r7, #16
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}

08002c4a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002c4a:	b580      	push	{r7, lr}
 8002c4c:	b084      	sub	sp, #16
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c56:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002c58:	68f8      	ldr	r0, [r7, #12]
 8002c5a:	f7ff fd5d 	bl	8002718 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b084      	sub	sp, #16
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c72:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2240      	movs	r2, #64	; 0x40
 8002c78:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c7e:	f043 0204 	orr.w	r2, r3, #4
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002c86:	68f8      	ldr	r0, [r7, #12]
 8002c88:	f7ff fd5a 	bl	8002740 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002c8c:	bf00      	nop
 8002c8e:	3710      	adds	r7, #16
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr

08002ca8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f003 0307 	and.w	r3, r3, #7
 8002cb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cb8:	4b0c      	ldr	r3, [pc, #48]	; (8002cec <__NVIC_SetPriorityGrouping+0x44>)
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ccc:	68bb      	ldr	r3, [r7, #8]
 8002cce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cda:	4a04      	ldr	r2, [pc, #16]	; (8002cec <__NVIC_SetPriorityGrouping+0x44>)
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	60d3      	str	r3, [r2, #12]
}
 8002ce0:	bf00      	nop
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cf4:	4b04      	ldr	r3, [pc, #16]	; (8002d08 <__NVIC_GetPriorityGrouping+0x18>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	0a1b      	lsrs	r3, r3, #8
 8002cfa:	f003 0307 	and.w	r3, r3, #7
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	4603      	mov	r3, r0
 8002d14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	db0b      	blt.n	8002d36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d1e:	79fb      	ldrb	r3, [r7, #7]
 8002d20:	f003 021f 	and.w	r2, r3, #31
 8002d24:	4907      	ldr	r1, [pc, #28]	; (8002d44 <__NVIC_EnableIRQ+0x38>)
 8002d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2a:	095b      	lsrs	r3, r3, #5
 8002d2c:	2001      	movs	r0, #1
 8002d2e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr
 8002d42:	bf00      	nop
 8002d44:	e000e100 	.word	0xe000e100

08002d48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	4603      	mov	r3, r0
 8002d50:	6039      	str	r1, [r7, #0]
 8002d52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	db0a      	blt.n	8002d72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	b2da      	uxtb	r2, r3
 8002d60:	490c      	ldr	r1, [pc, #48]	; (8002d94 <__NVIC_SetPriority+0x4c>)
 8002d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d66:	0112      	lsls	r2, r2, #4
 8002d68:	b2d2      	uxtb	r2, r2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d70:	e00a      	b.n	8002d88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	4908      	ldr	r1, [pc, #32]	; (8002d98 <__NVIC_SetPriority+0x50>)
 8002d78:	79fb      	ldrb	r3, [r7, #7]
 8002d7a:	f003 030f 	and.w	r3, r3, #15
 8002d7e:	3b04      	subs	r3, #4
 8002d80:	0112      	lsls	r2, r2, #4
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	440b      	add	r3, r1
 8002d86:	761a      	strb	r2, [r3, #24]
}
 8002d88:	bf00      	nop
 8002d8a:	370c      	adds	r7, #12
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d92:	4770      	bx	lr
 8002d94:	e000e100 	.word	0xe000e100
 8002d98:	e000ed00 	.word	0xe000ed00

08002d9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b089      	sub	sp, #36	; 0x24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f003 0307 	and.w	r3, r3, #7
 8002dae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f1c3 0307 	rsb	r3, r3, #7
 8002db6:	2b04      	cmp	r3, #4
 8002db8:	bf28      	it	cs
 8002dba:	2304      	movcs	r3, #4
 8002dbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	2b06      	cmp	r3, #6
 8002dc4:	d902      	bls.n	8002dcc <NVIC_EncodePriority+0x30>
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	3b03      	subs	r3, #3
 8002dca:	e000      	b.n	8002dce <NVIC_EncodePriority+0x32>
 8002dcc:	2300      	movs	r3, #0
 8002dce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dda:	43da      	mvns	r2, r3
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	401a      	ands	r2, r3
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de4:	f04f 31ff 	mov.w	r1, #4294967295
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	fa01 f303 	lsl.w	r3, r1, r3
 8002dee:	43d9      	mvns	r1, r3
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df4:	4313      	orrs	r3, r2
         );
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3724      	adds	r7, #36	; 0x24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
	...

08002e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	3b01      	subs	r3, #1
 8002e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e14:	d301      	bcc.n	8002e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e16:	2301      	movs	r3, #1
 8002e18:	e00f      	b.n	8002e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e1a:	4a0a      	ldr	r2, [pc, #40]	; (8002e44 <SysTick_Config+0x40>)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e22:	210f      	movs	r1, #15
 8002e24:	f04f 30ff 	mov.w	r0, #4294967295
 8002e28:	f7ff ff8e 	bl	8002d48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e2c:	4b05      	ldr	r3, [pc, #20]	; (8002e44 <SysTick_Config+0x40>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e32:	4b04      	ldr	r3, [pc, #16]	; (8002e44 <SysTick_Config+0x40>)
 8002e34:	2207      	movs	r2, #7
 8002e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
 8002e42:	bf00      	nop
 8002e44:	e000e010 	.word	0xe000e010

08002e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f7ff ff29 	bl	8002ca8 <__NVIC_SetPriorityGrouping>
}
 8002e56:	bf00      	nop
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b086      	sub	sp, #24
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	4603      	mov	r3, r0
 8002e66:	60b9      	str	r1, [r7, #8]
 8002e68:	607a      	str	r2, [r7, #4]
 8002e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e70:	f7ff ff3e 	bl	8002cf0 <__NVIC_GetPriorityGrouping>
 8002e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e76:	687a      	ldr	r2, [r7, #4]
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	6978      	ldr	r0, [r7, #20]
 8002e7c:	f7ff ff8e 	bl	8002d9c <NVIC_EncodePriority>
 8002e80:	4602      	mov	r2, r0
 8002e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ff5d 	bl	8002d48 <__NVIC_SetPriority>
}
 8002e8e:	bf00      	nop
 8002e90:	3718      	adds	r7, #24
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b082      	sub	sp, #8
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f7ff ff31 	bl	8002d0c <__NVIC_EnableIRQ>
}
 8002eaa:	bf00      	nop
 8002eac:	3708      	adds	r7, #8
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}

08002eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eb2:	b580      	push	{r7, lr}
 8002eb4:	b082      	sub	sp, #8
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7ff ffa2 	bl	8002e04 <SysTick_Config>
 8002ec0:	4603      	mov	r3, r0
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	3708      	adds	r7, #8
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b086      	sub	sp, #24
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ed8:	f7ff f9aa 	bl	8002230 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d101      	bne.n	8002ee8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e099      	b.n	800301c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f022 0201 	bic.w	r2, r2, #1
 8002f06:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f08:	e00f      	b.n	8002f2a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f0a:	f7ff f991 	bl	8002230 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b05      	cmp	r3, #5
 8002f16:	d908      	bls.n	8002f2a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2220      	movs	r2, #32
 8002f1c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2203      	movs	r2, #3
 8002f22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e078      	b.n	800301c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 0301 	and.w	r3, r3, #1
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d1e8      	bne.n	8002f0a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f40:	697a      	ldr	r2, [r7, #20]
 8002f42:	4b38      	ldr	r3, [pc, #224]	; (8003024 <HAL_DMA_Init+0x158>)
 8002f44:	4013      	ands	r3, r2
 8002f46:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685a      	ldr	r2, [r3, #4]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f56:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	691b      	ldr	r3, [r3, #16]
 8002f5c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f62:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f6e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a1b      	ldr	r3, [r3, #32]
 8002f74:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d107      	bne.n	8002f94 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	f023 0307 	bic.w	r3, r3, #7
 8002faa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb0:	697a      	ldr	r2, [r7, #20]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fba:	2b04      	cmp	r3, #4
 8002fbc:	d117      	bne.n	8002fee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	697a      	ldr	r2, [r7, #20]
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d00e      	beq.n	8002fee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002fd0:	6878      	ldr	r0, [r7, #4]
 8002fd2:	f000 fa6f 	bl	80034b4 <DMA_CheckFifoParam>
 8002fd6:	4603      	mov	r3, r0
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d008      	beq.n	8002fee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2240      	movs	r2, #64	; 0x40
 8002fe0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002fea:	2301      	movs	r3, #1
 8002fec:	e016      	b.n	800301c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 fa26 	bl	8003448 <DMA_CalcBaseAndBitshift>
 8002ffc:	4603      	mov	r3, r0
 8002ffe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003004:	223f      	movs	r2, #63	; 0x3f
 8003006:	409a      	lsls	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800301a:	2300      	movs	r3, #0
}
 800301c:	4618      	mov	r0, r3
 800301e:	3718      	adds	r7, #24
 8003020:	46bd      	mov	sp, r7
 8003022:	bd80      	pop	{r7, pc}
 8003024:	f010803f 	.word	0xf010803f

08003028 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	607a      	str	r2, [r7, #4]
 8003034:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003036:	2300      	movs	r3, #0
 8003038:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800303e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_DMA_Start_IT+0x26>
 800304a:	2302      	movs	r3, #2
 800304c:	e040      	b.n	80030d0 <HAL_DMA_Start_IT+0xa8>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b01      	cmp	r3, #1
 8003060:	d12f      	bne.n	80030c2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2202      	movs	r2, #2
 8003066:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	68b9      	ldr	r1, [r7, #8]
 8003076:	68f8      	ldr	r0, [r7, #12]
 8003078:	f000 f9b8 	bl	80033ec <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003080:	223f      	movs	r2, #63	; 0x3f
 8003082:	409a      	lsls	r2, r3
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f042 0216 	orr.w	r2, r2, #22
 8003096:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	2b00      	cmp	r3, #0
 800309e:	d007      	beq.n	80030b0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	681a      	ldr	r2, [r3, #0]
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f042 0208 	orr.w	r2, r2, #8
 80030ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f042 0201 	orr.w	r2, r2, #1
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	e005      	b.n	80030ce <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2200      	movs	r2, #0
 80030c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80030ca:	2302      	movs	r3, #2
 80030cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3718      	adds	r7, #24
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b086      	sub	sp, #24
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80030e4:	4b8e      	ldr	r3, [pc, #568]	; (8003320 <HAL_DMA_IRQHandler+0x248>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a8e      	ldr	r2, [pc, #568]	; (8003324 <HAL_DMA_IRQHandler+0x24c>)
 80030ea:	fba2 2303 	umull	r2, r3, r2, r3
 80030ee:	0a9b      	lsrs	r3, r3, #10
 80030f0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030f6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80030f8:	693b      	ldr	r3, [r7, #16]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003102:	2208      	movs	r2, #8
 8003104:	409a      	lsls	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	4013      	ands	r3, r2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d01a      	beq.n	8003144 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	681a      	ldr	r2, [r3, #0]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0204 	bic.w	r2, r2, #4
 800312a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003130:	2208      	movs	r2, #8
 8003132:	409a      	lsls	r2, r3
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800313c:	f043 0201 	orr.w	r2, r3, #1
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003148:	2201      	movs	r2, #1
 800314a:	409a      	lsls	r2, r3
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	4013      	ands	r3, r2
 8003150:	2b00      	cmp	r3, #0
 8003152:	d012      	beq.n	800317a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800315e:	2b00      	cmp	r3, #0
 8003160:	d00b      	beq.n	800317a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003166:	2201      	movs	r2, #1
 8003168:	409a      	lsls	r2, r3
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003172:	f043 0202 	orr.w	r2, r3, #2
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317e:	2204      	movs	r2, #4
 8003180:	409a      	lsls	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d012      	beq.n	80031b0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0302 	and.w	r3, r3, #2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00b      	beq.n	80031b0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319c:	2204      	movs	r2, #4
 800319e:	409a      	lsls	r2, r3
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a8:	f043 0204 	orr.w	r2, r3, #4
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031b4:	2210      	movs	r2, #16
 80031b6:	409a      	lsls	r2, r3
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4013      	ands	r3, r2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d043      	beq.n	8003248 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d03c      	beq.n	8003248 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d2:	2210      	movs	r2, #16
 80031d4:	409a      	lsls	r2, r3
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d018      	beq.n	800321a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d108      	bne.n	8003208 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d024      	beq.n	8003248 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	4798      	blx	r3
 8003206:	e01f      	b.n	8003248 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320c:	2b00      	cmp	r3, #0
 800320e:	d01b      	beq.n	8003248 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	4798      	blx	r3
 8003218:	e016      	b.n	8003248 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003224:	2b00      	cmp	r3, #0
 8003226:	d107      	bne.n	8003238 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0208 	bic.w	r2, r2, #8
 8003236:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323c:	2b00      	cmp	r3, #0
 800323e:	d003      	beq.n	8003248 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	2220      	movs	r2, #32
 800324e:	409a      	lsls	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	4013      	ands	r3, r2
 8003254:	2b00      	cmp	r3, #0
 8003256:	f000 808f 	beq.w	8003378 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f003 0310 	and.w	r3, r3, #16
 8003264:	2b00      	cmp	r3, #0
 8003266:	f000 8087 	beq.w	8003378 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800326e:	2220      	movs	r2, #32
 8003270:	409a      	lsls	r2, r3
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b05      	cmp	r3, #5
 8003280:	d136      	bne.n	80032f0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0216 	bic.w	r2, r2, #22
 8003290:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <HAL_DMA_IRQHandler+0x1da>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d007      	beq.n	80032c2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0208 	bic.w	r2, r2, #8
 80032c0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c6:	223f      	movs	r2, #63	; 0x3f
 80032c8:	409a      	lsls	r2, r3
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d07e      	beq.n	80033e4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	4798      	blx	r3
        }
        return;
 80032ee:	e079      	b.n	80033e4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d01d      	beq.n	800333a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d10d      	bne.n	8003328 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003310:	2b00      	cmp	r3, #0
 8003312:	d031      	beq.n	8003378 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003318:	6878      	ldr	r0, [r7, #4]
 800331a:	4798      	blx	r3
 800331c:	e02c      	b.n	8003378 <HAL_DMA_IRQHandler+0x2a0>
 800331e:	bf00      	nop
 8003320:	20000020 	.word	0x20000020
 8003324:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332c:	2b00      	cmp	r3, #0
 800332e:	d023      	beq.n	8003378 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	4798      	blx	r3
 8003338:	e01e      	b.n	8003378 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003344:	2b00      	cmp	r3, #0
 8003346:	d10f      	bne.n	8003368 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f022 0210 	bic.w	r2, r2, #16
 8003356:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337c:	2b00      	cmp	r3, #0
 800337e:	d032      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d022      	beq.n	80033d2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2205      	movs	r2, #5
 8003390:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f022 0201 	bic.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	3301      	adds	r3, #1
 80033a8:	60bb      	str	r3, [r7, #8]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d307      	bcc.n	80033c0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d1f2      	bne.n	80033a4 <HAL_DMA_IRQHandler+0x2cc>
 80033be:	e000      	b.n	80033c2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80033c0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2201      	movs	r2, #1
 80033c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d005      	beq.n	80033e6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	4798      	blx	r3
 80033e2:	e000      	b.n	80033e6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80033e4:	bf00      	nop
    }
  }
}
 80033e6:	3718      	adds	r7, #24
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}

080033ec <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b085      	sub	sp, #20
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003408:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	683a      	ldr	r2, [r7, #0]
 8003410:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	2b40      	cmp	r3, #64	; 0x40
 8003418:	d108      	bne.n	800342c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	68ba      	ldr	r2, [r7, #8]
 8003428:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800342a:	e007      	b.n	800343c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	68ba      	ldr	r2, [r7, #8]
 8003432:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	60da      	str	r2, [r3, #12]
}
 800343c:	bf00      	nop
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	b2db      	uxtb	r3, r3
 8003456:	3b10      	subs	r3, #16
 8003458:	4a14      	ldr	r2, [pc, #80]	; (80034ac <DMA_CalcBaseAndBitshift+0x64>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003462:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <DMA_CalcBaseAndBitshift+0x68>)
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	4413      	add	r3, r2
 8003468:	781b      	ldrb	r3, [r3, #0]
 800346a:	461a      	mov	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2b03      	cmp	r3, #3
 8003474:	d909      	bls.n	800348a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800347e:	f023 0303 	bic.w	r3, r3, #3
 8003482:	1d1a      	adds	r2, r3, #4
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	659a      	str	r2, [r3, #88]	; 0x58
 8003488:	e007      	b.n	800349a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003492:	f023 0303 	bic.w	r3, r3, #3
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	aaaaaaab 	.word	0xaaaaaaab
 80034b0:	0800dc64 	.word	0x0800dc64

080034b4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b085      	sub	sp, #20
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80034bc:	2300      	movs	r3, #0
 80034be:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d11f      	bne.n	800350e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2b03      	cmp	r3, #3
 80034d2:	d856      	bhi.n	8003582 <DMA_CheckFifoParam+0xce>
 80034d4:	a201      	add	r2, pc, #4	; (adr r2, 80034dc <DMA_CheckFifoParam+0x28>)
 80034d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034da:	bf00      	nop
 80034dc:	080034ed 	.word	0x080034ed
 80034e0:	080034ff 	.word	0x080034ff
 80034e4:	080034ed 	.word	0x080034ed
 80034e8:	08003583 	.word	0x08003583
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d046      	beq.n	8003586 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034fc:	e043      	b.n	8003586 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003506:	d140      	bne.n	800358a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800350c:	e03d      	b.n	800358a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003516:	d121      	bne.n	800355c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	2b03      	cmp	r3, #3
 800351c:	d837      	bhi.n	800358e <DMA_CheckFifoParam+0xda>
 800351e:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <DMA_CheckFifoParam+0x70>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	08003535 	.word	0x08003535
 8003528:	0800353b 	.word	0x0800353b
 800352c:	08003535 	.word	0x08003535
 8003530:	0800354d 	.word	0x0800354d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	73fb      	strb	r3, [r7, #15]
      break;
 8003538:	e030      	b.n	800359c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d025      	beq.n	8003592 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800354a:	e022      	b.n	8003592 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003554:	d11f      	bne.n	8003596 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800355a:	e01c      	b.n	8003596 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	2b02      	cmp	r3, #2
 8003560:	d903      	bls.n	800356a <DMA_CheckFifoParam+0xb6>
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	2b03      	cmp	r3, #3
 8003566:	d003      	beq.n	8003570 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003568:	e018      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	73fb      	strb	r3, [r7, #15]
      break;
 800356e:	e015      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003574:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00e      	beq.n	800359a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	73fb      	strb	r3, [r7, #15]
      break;
 8003580:	e00b      	b.n	800359a <DMA_CheckFifoParam+0xe6>
      break;
 8003582:	bf00      	nop
 8003584:	e00a      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      break;
 8003586:	bf00      	nop
 8003588:	e008      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      break;
 800358a:	bf00      	nop
 800358c:	e006      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      break;
 800358e:	bf00      	nop
 8003590:	e004      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      break;
 8003592:	bf00      	nop
 8003594:	e002      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      break;   
 8003596:	bf00      	nop
 8003598:	e000      	b.n	800359c <DMA_CheckFifoParam+0xe8>
      break;
 800359a:	bf00      	nop
    }
  } 
  
  return status; 
 800359c:	7bfb      	ldrb	r3, [r7, #15]
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3714      	adds	r7, #20
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr
 80035aa:	bf00      	nop

080035ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b089      	sub	sp, #36	; 0x24
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80035b6:	2300      	movs	r3, #0
 80035b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035c2:	2300      	movs	r3, #0
 80035c4:	61fb      	str	r3, [r7, #28]
 80035c6:	e159      	b.n	800387c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80035c8:	2201      	movs	r2, #1
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	fa02 f303 	lsl.w	r3, r2, r3
 80035d0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	697a      	ldr	r2, [r7, #20]
 80035d8:	4013      	ands	r3, r2
 80035da:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	429a      	cmp	r2, r3
 80035e2:	f040 8148 	bne.w	8003876 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f003 0303 	and.w	r3, r3, #3
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d005      	beq.n	80035fe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d130      	bne.n	8003660 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003604:	69fb      	ldr	r3, [r7, #28]
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	2203      	movs	r2, #3
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	43db      	mvns	r3, r3
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	4013      	ands	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	fa02 f303 	lsl.w	r3, r2, r3
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	4313      	orrs	r3, r2
 8003626:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003634:	2201      	movs	r2, #1
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	43db      	mvns	r3, r3
 800363e:	69ba      	ldr	r2, [r7, #24]
 8003640:	4013      	ands	r3, r2
 8003642:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	091b      	lsrs	r3, r3, #4
 800364a:	f003 0201 	and.w	r2, r3, #1
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	fa02 f303 	lsl.w	r3, r2, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4313      	orrs	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	69ba      	ldr	r2, [r7, #24]
 800365e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f003 0303 	and.w	r3, r3, #3
 8003668:	2b03      	cmp	r3, #3
 800366a:	d017      	beq.n	800369c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	2203      	movs	r2, #3
 8003678:	fa02 f303 	lsl.w	r3, r2, r3
 800367c:	43db      	mvns	r3, r3
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	4013      	ands	r3, r2
 8003682:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	fa02 f303 	lsl.w	r3, r2, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4313      	orrs	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	685b      	ldr	r3, [r3, #4]
 80036a0:	f003 0303 	and.w	r3, r3, #3
 80036a4:	2b02      	cmp	r3, #2
 80036a6:	d123      	bne.n	80036f0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80036a8:	69fb      	ldr	r3, [r7, #28]
 80036aa:	08da      	lsrs	r2, r3, #3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3208      	adds	r2, #8
 80036b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80036b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	220f      	movs	r2, #15
 80036c0:	fa02 f303 	lsl.w	r3, r2, r3
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	691a      	ldr	r2, [r3, #16]
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	4313      	orrs	r3, r2
 80036e0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	08da      	lsrs	r2, r3, #3
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	3208      	adds	r2, #8
 80036ea:	69b9      	ldr	r1, [r7, #24]
 80036ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80036f6:	69fb      	ldr	r3, [r7, #28]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	2203      	movs	r2, #3
 80036fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f003 0203 	and.w	r2, r3, #3
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	fa02 f303 	lsl.w	r3, r2, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4313      	orrs	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80a2 	beq.w	8003876 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003732:	2300      	movs	r3, #0
 8003734:	60fb      	str	r3, [r7, #12]
 8003736:	4b57      	ldr	r3, [pc, #348]	; (8003894 <HAL_GPIO_Init+0x2e8>)
 8003738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373a:	4a56      	ldr	r2, [pc, #344]	; (8003894 <HAL_GPIO_Init+0x2e8>)
 800373c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003740:	6453      	str	r3, [r2, #68]	; 0x44
 8003742:	4b54      	ldr	r3, [pc, #336]	; (8003894 <HAL_GPIO_Init+0x2e8>)
 8003744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003746:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800374a:	60fb      	str	r3, [r7, #12]
 800374c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800374e:	4a52      	ldr	r2, [pc, #328]	; (8003898 <HAL_GPIO_Init+0x2ec>)
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	089b      	lsrs	r3, r3, #2
 8003754:	3302      	adds	r3, #2
 8003756:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800375a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	f003 0303 	and.w	r3, r3, #3
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	220f      	movs	r2, #15
 8003766:	fa02 f303 	lsl.w	r3, r2, r3
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a49      	ldr	r2, [pc, #292]	; (800389c <HAL_GPIO_Init+0x2f0>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d019      	beq.n	80037ae <HAL_GPIO_Init+0x202>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a48      	ldr	r2, [pc, #288]	; (80038a0 <HAL_GPIO_Init+0x2f4>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d013      	beq.n	80037aa <HAL_GPIO_Init+0x1fe>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4a47      	ldr	r2, [pc, #284]	; (80038a4 <HAL_GPIO_Init+0x2f8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d00d      	beq.n	80037a6 <HAL_GPIO_Init+0x1fa>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	4a46      	ldr	r2, [pc, #280]	; (80038a8 <HAL_GPIO_Init+0x2fc>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d007      	beq.n	80037a2 <HAL_GPIO_Init+0x1f6>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4a45      	ldr	r2, [pc, #276]	; (80038ac <HAL_GPIO_Init+0x300>)
 8003796:	4293      	cmp	r3, r2
 8003798:	d101      	bne.n	800379e <HAL_GPIO_Init+0x1f2>
 800379a:	2304      	movs	r3, #4
 800379c:	e008      	b.n	80037b0 <HAL_GPIO_Init+0x204>
 800379e:	2307      	movs	r3, #7
 80037a0:	e006      	b.n	80037b0 <HAL_GPIO_Init+0x204>
 80037a2:	2303      	movs	r3, #3
 80037a4:	e004      	b.n	80037b0 <HAL_GPIO_Init+0x204>
 80037a6:	2302      	movs	r3, #2
 80037a8:	e002      	b.n	80037b0 <HAL_GPIO_Init+0x204>
 80037aa:	2301      	movs	r3, #1
 80037ac:	e000      	b.n	80037b0 <HAL_GPIO_Init+0x204>
 80037ae:	2300      	movs	r3, #0
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	f002 0203 	and.w	r2, r2, #3
 80037b6:	0092      	lsls	r2, r2, #2
 80037b8:	4093      	lsls	r3, r2
 80037ba:	69ba      	ldr	r2, [r7, #24]
 80037bc:	4313      	orrs	r3, r2
 80037be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80037c0:	4935      	ldr	r1, [pc, #212]	; (8003898 <HAL_GPIO_Init+0x2ec>)
 80037c2:	69fb      	ldr	r3, [r7, #28]
 80037c4:	089b      	lsrs	r3, r3, #2
 80037c6:	3302      	adds	r3, #2
 80037c8:	69ba      	ldr	r2, [r7, #24]
 80037ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80037ce:	4b38      	ldr	r3, [pc, #224]	; (80038b0 <HAL_GPIO_Init+0x304>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	43db      	mvns	r3, r3
 80037d8:	69ba      	ldr	r2, [r7, #24]
 80037da:	4013      	ands	r3, r2
 80037dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80037ea:	69ba      	ldr	r2, [r7, #24]
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80037f2:	4a2f      	ldr	r2, [pc, #188]	; (80038b0 <HAL_GPIO_Init+0x304>)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80037f8:	4b2d      	ldr	r3, [pc, #180]	; (80038b0 <HAL_GPIO_Init+0x304>)
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	43db      	mvns	r3, r3
 8003802:	69ba      	ldr	r2, [r7, #24]
 8003804:	4013      	ands	r3, r2
 8003806:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003814:	69ba      	ldr	r2, [r7, #24]
 8003816:	693b      	ldr	r3, [r7, #16]
 8003818:	4313      	orrs	r3, r2
 800381a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800381c:	4a24      	ldr	r2, [pc, #144]	; (80038b0 <HAL_GPIO_Init+0x304>)
 800381e:	69bb      	ldr	r3, [r7, #24]
 8003820:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003822:	4b23      	ldr	r3, [pc, #140]	; (80038b0 <HAL_GPIO_Init+0x304>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003828:	693b      	ldr	r3, [r7, #16]
 800382a:	43db      	mvns	r3, r3
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	4013      	ands	r3, r2
 8003830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800383a:	2b00      	cmp	r3, #0
 800383c:	d003      	beq.n	8003846 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800383e:	69ba      	ldr	r2, [r7, #24]
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	4313      	orrs	r3, r2
 8003844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003846:	4a1a      	ldr	r2, [pc, #104]	; (80038b0 <HAL_GPIO_Init+0x304>)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800384c:	4b18      	ldr	r3, [pc, #96]	; (80038b0 <HAL_GPIO_Init+0x304>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	43db      	mvns	r3, r3
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4013      	ands	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d003      	beq.n	8003870 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	4313      	orrs	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003870:	4a0f      	ldr	r2, [pc, #60]	; (80038b0 <HAL_GPIO_Init+0x304>)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	3301      	adds	r3, #1
 800387a:	61fb      	str	r3, [r7, #28]
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	2b0f      	cmp	r3, #15
 8003880:	f67f aea2 	bls.w	80035c8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003884:	bf00      	nop
 8003886:	bf00      	nop
 8003888:	3724      	adds	r7, #36	; 0x24
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40023800 	.word	0x40023800
 8003898:	40013800 	.word	0x40013800
 800389c:	40020000 	.word	0x40020000
 80038a0:	40020400 	.word	0x40020400
 80038a4:	40020800 	.word	0x40020800
 80038a8:	40020c00 	.word	0x40020c00
 80038ac:	40021000 	.word	0x40021000
 80038b0:	40013c00 	.word	0x40013c00

080038b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80038be:	4b08      	ldr	r3, [pc, #32]	; (80038e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038c0:	695a      	ldr	r2, [r3, #20]
 80038c2:	88fb      	ldrh	r3, [r7, #6]
 80038c4:	4013      	ands	r3, r2
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d006      	beq.n	80038d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80038ca:	4a05      	ldr	r2, [pc, #20]	; (80038e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80038d0:	88fb      	ldrh	r3, [r7, #6]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe f8dc 	bl	8001a90 <HAL_GPIO_EXTI_Callback>
  }
}
 80038d8:	bf00      	nop
 80038da:	3708      	adds	r7, #8
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}
 80038e0:	40013c00 	.word	0x40013c00

080038e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e12b      	b.n	8003b4e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fd fcd4 	bl	80012b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2224      	movs	r2, #36	; 0x24
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0201 	bic.w	r2, r2, #1
 8003926:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003936:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003946:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003948:	f001 ffbe 	bl	80058c8 <HAL_RCC_GetPCLK1Freq>
 800394c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4a81      	ldr	r2, [pc, #516]	; (8003b58 <HAL_I2C_Init+0x274>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d807      	bhi.n	8003968 <HAL_I2C_Init+0x84>
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	4a80      	ldr	r2, [pc, #512]	; (8003b5c <HAL_I2C_Init+0x278>)
 800395c:	4293      	cmp	r3, r2
 800395e:	bf94      	ite	ls
 8003960:	2301      	movls	r3, #1
 8003962:	2300      	movhi	r3, #0
 8003964:	b2db      	uxtb	r3, r3
 8003966:	e006      	b.n	8003976 <HAL_I2C_Init+0x92>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4a7d      	ldr	r2, [pc, #500]	; (8003b60 <HAL_I2C_Init+0x27c>)
 800396c:	4293      	cmp	r3, r2
 800396e:	bf94      	ite	ls
 8003970:	2301      	movls	r3, #1
 8003972:	2300      	movhi	r3, #0
 8003974:	b2db      	uxtb	r3, r3
 8003976:	2b00      	cmp	r3, #0
 8003978:	d001      	beq.n	800397e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800397a:	2301      	movs	r3, #1
 800397c:	e0e7      	b.n	8003b4e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	4a78      	ldr	r2, [pc, #480]	; (8003b64 <HAL_I2C_Init+0x280>)
 8003982:	fba2 2303 	umull	r2, r3, r2, r3
 8003986:	0c9b      	lsrs	r3, r3, #18
 8003988:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68ba      	ldr	r2, [r7, #8]
 800399a:	430a      	orrs	r2, r1
 800399c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	4a6a      	ldr	r2, [pc, #424]	; (8003b58 <HAL_I2C_Init+0x274>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d802      	bhi.n	80039b8 <HAL_I2C_Init+0xd4>
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	3301      	adds	r3, #1
 80039b6:	e009      	b.n	80039cc <HAL_I2C_Init+0xe8>
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80039be:	fb02 f303 	mul.w	r3, r2, r3
 80039c2:	4a69      	ldr	r2, [pc, #420]	; (8003b68 <HAL_I2C_Init+0x284>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	099b      	lsrs	r3, r3, #6
 80039ca:	3301      	adds	r3, #1
 80039cc:	687a      	ldr	r2, [r7, #4]
 80039ce:	6812      	ldr	r2, [r2, #0]
 80039d0:	430b      	orrs	r3, r1
 80039d2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69db      	ldr	r3, [r3, #28]
 80039da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80039de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	495c      	ldr	r1, [pc, #368]	; (8003b58 <HAL_I2C_Init+0x274>)
 80039e8:	428b      	cmp	r3, r1
 80039ea:	d819      	bhi.n	8003a20 <HAL_I2C_Init+0x13c>
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	1e59      	subs	r1, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80039fa:	1c59      	adds	r1, r3, #1
 80039fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003a00:	400b      	ands	r3, r1
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d00a      	beq.n	8003a1c <HAL_I2C_Init+0x138>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	1e59      	subs	r1, r3, #1
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	005b      	lsls	r3, r3, #1
 8003a10:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a14:	3301      	adds	r3, #1
 8003a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1a:	e051      	b.n	8003ac0 <HAL_I2C_Init+0x1dc>
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	e04f      	b.n	8003ac0 <HAL_I2C_Init+0x1dc>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d111      	bne.n	8003a4c <HAL_I2C_Init+0x168>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	1e58      	subs	r0, r3, #1
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6859      	ldr	r1, [r3, #4]
 8003a30:	460b      	mov	r3, r1
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	440b      	add	r3, r1
 8003a36:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	bf0c      	ite	eq
 8003a44:	2301      	moveq	r3, #1
 8003a46:	2300      	movne	r3, #0
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	e012      	b.n	8003a72 <HAL_I2C_Init+0x18e>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	1e58      	subs	r0, r3, #1
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6859      	ldr	r1, [r3, #4]
 8003a54:	460b      	mov	r3, r1
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	440b      	add	r3, r1
 8003a5a:	0099      	lsls	r1, r3, #2
 8003a5c:	440b      	add	r3, r1
 8003a5e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a62:	3301      	adds	r3, #1
 8003a64:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	bf0c      	ite	eq
 8003a6c:	2301      	moveq	r3, #1
 8003a6e:	2300      	movne	r3, #0
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d001      	beq.n	8003a7a <HAL_I2C_Init+0x196>
 8003a76:	2301      	movs	r3, #1
 8003a78:	e022      	b.n	8003ac0 <HAL_I2C_Init+0x1dc>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d10e      	bne.n	8003aa0 <HAL_I2C_Init+0x1bc>
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	1e58      	subs	r0, r3, #1
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6859      	ldr	r1, [r3, #4]
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	440b      	add	r3, r1
 8003a90:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a94:	3301      	adds	r3, #1
 8003a96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a9e:	e00f      	b.n	8003ac0 <HAL_I2C_Init+0x1dc>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	1e58      	subs	r0, r3, #1
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6859      	ldr	r1, [r3, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	0099      	lsls	r1, r3, #2
 8003ab0:	440b      	add	r3, r1
 8003ab2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003abc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	6809      	ldr	r1, [r1, #0]
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	69da      	ldr	r2, [r3, #28]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a1b      	ldr	r3, [r3, #32]
 8003ada:	431a      	orrs	r2, r3
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003aee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6911      	ldr	r1, [r2, #16]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	68d2      	ldr	r2, [r2, #12]
 8003afa:	4311      	orrs	r1, r2
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	6812      	ldr	r2, [r2, #0]
 8003b00:	430b      	orrs	r3, r1
 8003b02:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681a      	ldr	r2, [r3, #0]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f042 0201 	orr.w	r2, r2, #1
 8003b2e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b4c:	2300      	movs	r3, #0
}
 8003b4e:	4618      	mov	r0, r3
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	000186a0 	.word	0x000186a0
 8003b5c:	001e847f 	.word	0x001e847f
 8003b60:	003d08ff 	.word	0x003d08ff
 8003b64:	431bde83 	.word	0x431bde83
 8003b68:	10624dd3 	.word	0x10624dd3

08003b6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b6e:	b08f      	sub	sp, #60	; 0x3c
 8003b70:	af0a      	add	r7, sp, #40	; 0x28
 8003b72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d101      	bne.n	8003b7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e10f      	b.n	8003d9e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d106      	bne.n	8003b9e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f006 fc23 	bl	800a3e4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2203      	movs	r2, #3
 8003ba2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d102      	bne.n	8003bb8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f002 ff00 	bl	80069c2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	603b      	str	r3, [r7, #0]
 8003bc8:	687e      	ldr	r6, [r7, #4]
 8003bca:	466d      	mov	r5, sp
 8003bcc:	f106 0410 	add.w	r4, r6, #16
 8003bd0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bd4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bd6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bd8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bdc:	e885 0003 	stmia.w	r5, {r0, r1}
 8003be0:	1d33      	adds	r3, r6, #4
 8003be2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003be4:	6838      	ldr	r0, [r7, #0]
 8003be6:	f002 fdd8 	bl	800679a <USB_CoreInit>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d005      	beq.n	8003bfc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e0d0      	b.n	8003d9e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2100      	movs	r1, #0
 8003c02:	4618      	mov	r0, r3
 8003c04:	f002 feee 	bl	80069e4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c08:	2300      	movs	r3, #0
 8003c0a:	73fb      	strb	r3, [r7, #15]
 8003c0c:	e04a      	b.n	8003ca4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c0e:	7bfa      	ldrb	r2, [r7, #15]
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	4613      	mov	r3, r2
 8003c14:	00db      	lsls	r3, r3, #3
 8003c16:	4413      	add	r3, r2
 8003c18:	009b      	lsls	r3, r3, #2
 8003c1a:	440b      	add	r3, r1
 8003c1c:	333d      	adds	r3, #61	; 0x3d
 8003c1e:	2201      	movs	r2, #1
 8003c20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003c22:	7bfa      	ldrb	r2, [r7, #15]
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	00db      	lsls	r3, r3, #3
 8003c2a:	4413      	add	r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	333c      	adds	r3, #60	; 0x3c
 8003c32:	7bfa      	ldrb	r2, [r7, #15]
 8003c34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003c36:	7bfa      	ldrb	r2, [r7, #15]
 8003c38:	7bfb      	ldrb	r3, [r7, #15]
 8003c3a:	b298      	uxth	r0, r3
 8003c3c:	6879      	ldr	r1, [r7, #4]
 8003c3e:	4613      	mov	r3, r2
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4413      	add	r3, r2
 8003c44:	009b      	lsls	r3, r3, #2
 8003c46:	440b      	add	r3, r1
 8003c48:	3344      	adds	r3, #68	; 0x44
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003c4e:	7bfa      	ldrb	r2, [r7, #15]
 8003c50:	6879      	ldr	r1, [r7, #4]
 8003c52:	4613      	mov	r3, r2
 8003c54:	00db      	lsls	r3, r3, #3
 8003c56:	4413      	add	r3, r2
 8003c58:	009b      	lsls	r3, r3, #2
 8003c5a:	440b      	add	r3, r1
 8003c5c:	3340      	adds	r3, #64	; 0x40
 8003c5e:	2200      	movs	r2, #0
 8003c60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003c62:	7bfa      	ldrb	r2, [r7, #15]
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	4613      	mov	r3, r2
 8003c68:	00db      	lsls	r3, r3, #3
 8003c6a:	4413      	add	r3, r2
 8003c6c:	009b      	lsls	r3, r3, #2
 8003c6e:	440b      	add	r3, r1
 8003c70:	3348      	adds	r3, #72	; 0x48
 8003c72:	2200      	movs	r2, #0
 8003c74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003c76:	7bfa      	ldrb	r2, [r7, #15]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	00db      	lsls	r3, r3, #3
 8003c7e:	4413      	add	r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	334c      	adds	r3, #76	; 0x4c
 8003c86:	2200      	movs	r2, #0
 8003c88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003c8a:	7bfa      	ldrb	r2, [r7, #15]
 8003c8c:	6879      	ldr	r1, [r7, #4]
 8003c8e:	4613      	mov	r3, r2
 8003c90:	00db      	lsls	r3, r3, #3
 8003c92:	4413      	add	r3, r2
 8003c94:	009b      	lsls	r3, r3, #2
 8003c96:	440b      	add	r3, r1
 8003c98:	3354      	adds	r3, #84	; 0x54
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c9e:	7bfb      	ldrb	r3, [r7, #15]
 8003ca0:	3301      	adds	r3, #1
 8003ca2:	73fb      	strb	r3, [r7, #15]
 8003ca4:	7bfa      	ldrb	r2, [r7, #15]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d3af      	bcc.n	8003c0e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003cae:	2300      	movs	r3, #0
 8003cb0:	73fb      	strb	r3, [r7, #15]
 8003cb2:	e044      	b.n	8003d3e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003cb4:	7bfa      	ldrb	r2, [r7, #15]
 8003cb6:	6879      	ldr	r1, [r7, #4]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	00db      	lsls	r3, r3, #3
 8003cbc:	4413      	add	r3, r2
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	440b      	add	r3, r1
 8003cc2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003cca:	7bfa      	ldrb	r2, [r7, #15]
 8003ccc:	6879      	ldr	r1, [r7, #4]
 8003cce:	4613      	mov	r3, r2
 8003cd0:	00db      	lsls	r3, r3, #3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	440b      	add	r3, r1
 8003cd8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003cdc:	7bfa      	ldrb	r2, [r7, #15]
 8003cde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003ce0:	7bfa      	ldrb	r2, [r7, #15]
 8003ce2:	6879      	ldr	r1, [r7, #4]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	440b      	add	r3, r1
 8003cee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003cf6:	7bfa      	ldrb	r2, [r7, #15]
 8003cf8:	6879      	ldr	r1, [r7, #4]
 8003cfa:	4613      	mov	r3, r2
 8003cfc:	00db      	lsls	r3, r3, #3
 8003cfe:	4413      	add	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	440b      	add	r3, r1
 8003d04:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003d08:	2200      	movs	r2, #0
 8003d0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d0c:	7bfa      	ldrb	r2, [r7, #15]
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	4613      	mov	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4413      	add	r3, r2
 8003d16:	009b      	lsls	r3, r3, #2
 8003d18:	440b      	add	r3, r1
 8003d1a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003d22:	7bfa      	ldrb	r2, [r7, #15]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	00db      	lsls	r3, r3, #3
 8003d2a:	4413      	add	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003d34:	2200      	movs	r2, #0
 8003d36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d38:	7bfb      	ldrb	r3, [r7, #15]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	73fb      	strb	r3, [r7, #15]
 8003d3e:	7bfa      	ldrb	r2, [r7, #15]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d3b5      	bcc.n	8003cb4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	603b      	str	r3, [r7, #0]
 8003d4e:	687e      	ldr	r6, [r7, #4]
 8003d50:	466d      	mov	r5, sp
 8003d52:	f106 0410 	add.w	r4, r6, #16
 8003d56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d62:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d66:	1d33      	adds	r3, r6, #4
 8003d68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d6a:	6838      	ldr	r0, [r7, #0]
 8003d6c:	f002 fe86 	bl	8006a7c <USB_DevInit>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d005      	beq.n	8003d82 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2202      	movs	r2, #2
 8003d7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e00d      	b.n	8003d9e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2200      	movs	r2, #0
 8003d86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f003 ffd5 	bl	8007d46 <USB_DevDisconnect>

  return HAL_OK;
 8003d9c:	2300      	movs	r3, #0
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3714      	adds	r7, #20
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003da6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003da6:	b580      	push	{r7, lr}
 8003da8:	b084      	sub	sp, #16
 8003daa:	af00      	add	r7, sp, #0
 8003dac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <HAL_PCD_Start+0x1c>
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	e020      	b.n	8003e04 <HAL_PCD_Start+0x5e>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d109      	bne.n	8003de6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d005      	beq.n	8003de6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4618      	mov	r0, r3
 8003dec:	f002 fdd8 	bl	80069a0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f003 ff85 	bl	8007d04 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003e0c:	b590      	push	{r4, r7, lr}
 8003e0e:	b08d      	sub	sp, #52	; 0x34
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e1a:	6a3b      	ldr	r3, [r7, #32]
 8003e1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f004 f843 	bl	8007eae <USB_GetMode>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	f040 848a 	bne.w	8004744 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f003 ffa7 	bl	8007d88 <USB_ReadInterrupts>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	f000 8480 	beq.w	8004742 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	0a1b      	lsrs	r3, r3, #8
 8003e4c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f003 ff94 	bl	8007d88 <USB_ReadInterrupts>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f003 0302 	and.w	r3, r3, #2
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d107      	bne.n	8003e7a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	695a      	ldr	r2, [r3, #20]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f002 0202 	and.w	r2, r2, #2
 8003e78:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	4618      	mov	r0, r3
 8003e80:	f003 ff82 	bl	8007d88 <USB_ReadInterrupts>
 8003e84:	4603      	mov	r3, r0
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	2b10      	cmp	r3, #16
 8003e8c:	d161      	bne.n	8003f52 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	699a      	ldr	r2, [r3, #24]
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f022 0210 	bic.w	r2, r2, #16
 8003e9c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f003 020f 	and.w	r2, r3, #15
 8003eaa:	4613      	mov	r3, r2
 8003eac:	00db      	lsls	r3, r3, #3
 8003eae:	4413      	add	r3, r2
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	4413      	add	r3, r2
 8003eba:	3304      	adds	r3, #4
 8003ebc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	0c5b      	lsrs	r3, r3, #17
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d124      	bne.n	8003f14 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003eca:	69ba      	ldr	r2, [r7, #24]
 8003ecc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d035      	beq.n	8003f42 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	091b      	lsrs	r3, r3, #4
 8003ede:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003ee0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ee4:	b29b      	uxth	r3, r3
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	6a38      	ldr	r0, [r7, #32]
 8003eea:	f003 fdb9 	bl	8007a60 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eee:	697b      	ldr	r3, [r7, #20]
 8003ef0:	691a      	ldr	r2, [r3, #16]
 8003ef2:	69bb      	ldr	r3, [r7, #24]
 8003ef4:	091b      	lsrs	r3, r3, #4
 8003ef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003efa:	441a      	add	r2, r3
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	6a1a      	ldr	r2, [r3, #32]
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	091b      	lsrs	r3, r3, #4
 8003f08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f0c:	441a      	add	r2, r3
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	621a      	str	r2, [r3, #32]
 8003f12:	e016      	b.n	8003f42 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	0c5b      	lsrs	r3, r3, #17
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	2b06      	cmp	r3, #6
 8003f1e:	d110      	bne.n	8003f42 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003f26:	2208      	movs	r2, #8
 8003f28:	4619      	mov	r1, r3
 8003f2a:	6a38      	ldr	r0, [r7, #32]
 8003f2c:	f003 fd98 	bl	8007a60 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f30:	697b      	ldr	r3, [r7, #20]
 8003f32:	6a1a      	ldr	r2, [r3, #32]
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	091b      	lsrs	r3, r3, #4
 8003f38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f3c:	441a      	add	r2, r3
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	699a      	ldr	r2, [r3, #24]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f042 0210 	orr.w	r2, r2, #16
 8003f50:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4618      	mov	r0, r3
 8003f58:	f003 ff16 	bl	8007d88 <USB_ReadInterrupts>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003f66:	f040 80a7 	bne.w	80040b8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4618      	mov	r0, r3
 8003f74:	f003 ff1b 	bl	8007dae <USB_ReadDevAllOutEpInterrupt>
 8003f78:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003f7a:	e099      	b.n	80040b0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7e:	f003 0301 	and.w	r3, r3, #1
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f000 808e 	beq.w	80040a4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	4611      	mov	r1, r2
 8003f92:	4618      	mov	r0, r3
 8003f94:	f003 ff3f 	bl	8007e16 <USB_ReadDevOutEPInterrupt>
 8003f98:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	f003 0301 	and.w	r3, r3, #1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00c      	beq.n	8003fbe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003fb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fec3 	bl	8004d44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f003 0308 	and.w	r3, r3, #8
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00c      	beq.n	8003fe2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	015a      	lsls	r2, r3, #5
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	4413      	add	r3, r2
 8003fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003fd4:	461a      	mov	r2, r3
 8003fd6:	2308      	movs	r3, #8
 8003fd8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003fda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f000 ff99 	bl	8004f14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d008      	beq.n	8003ffe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fee:	015a      	lsls	r2, r3, #5
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	4413      	add	r3, r2
 8003ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff8:	461a      	mov	r2, r3
 8003ffa:	2310      	movs	r3, #16
 8003ffc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d030      	beq.n	800406a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004010:	2b80      	cmp	r3, #128	; 0x80
 8004012:	d109      	bne.n	8004028 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	69fa      	ldr	r2, [r7, #28]
 800401e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004026:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800402a:	4613      	mov	r3, r2
 800402c:	00db      	lsls	r3, r3, #3
 800402e:	4413      	add	r3, r2
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	4413      	add	r3, r2
 800403a:	3304      	adds	r3, #4
 800403c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800403e:	697b      	ldr	r3, [r7, #20]
 8004040:	78db      	ldrb	r3, [r3, #3]
 8004042:	2b01      	cmp	r3, #1
 8004044:	d108      	bne.n	8004058 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	2200      	movs	r2, #0
 800404a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800404c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404e:	b2db      	uxtb	r3, r3
 8004050:	4619      	mov	r1, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f006 facc 	bl	800a5f0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800405a:	015a      	lsls	r2, r3, #5
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	4413      	add	r3, r2
 8004060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004064:	461a      	mov	r2, r3
 8004066:	2302      	movs	r3, #2
 8004068:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d008      	beq.n	8004086 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	69fb      	ldr	r3, [r7, #28]
 800407a:	4413      	add	r3, r2
 800407c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004080:	461a      	mov	r2, r3
 8004082:	2320      	movs	r3, #32
 8004084:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800408c:	2b00      	cmp	r3, #0
 800408e:	d009      	beq.n	80040a4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	4413      	add	r3, r2
 8004098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800409c:	461a      	mov	r2, r3
 800409e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040a2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80040a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a6:	3301      	adds	r3, #1
 80040a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ac:	085b      	lsrs	r3, r3, #1
 80040ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	f47f af62 	bne.w	8003f7c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4618      	mov	r0, r3
 80040be:	f003 fe63 	bl	8007d88 <USB_ReadInterrupts>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040c8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040cc:	f040 80db 	bne.w	8004286 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4618      	mov	r0, r3
 80040d6:	f003 fe84 	bl	8007de2 <USB_ReadDevAllInEpInterrupt>
 80040da:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80040dc:	2300      	movs	r3, #0
 80040de:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80040e0:	e0cd      	b.n	800427e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 80c2 	beq.w	8004272 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	4611      	mov	r1, r2
 80040f8:	4618      	mov	r0, r3
 80040fa:	f003 feaa 	bl	8007e52 <USB_ReadDevInEPInterrupt>
 80040fe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f003 0301 	and.w	r3, r3, #1
 8004106:	2b00      	cmp	r3, #0
 8004108:	d057      	beq.n	80041ba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800410a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	2201      	movs	r2, #1
 8004112:	fa02 f303 	lsl.w	r3, r2, r3
 8004116:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800411e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	43db      	mvns	r3, r3
 8004124:	69f9      	ldr	r1, [r7, #28]
 8004126:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800412a:	4013      	ands	r3, r2
 800412c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	015a      	lsls	r2, r3, #5
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	4413      	add	r3, r2
 8004136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800413a:	461a      	mov	r2, r3
 800413c:	2301      	movs	r3, #1
 800413e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d132      	bne.n	80041ae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004148:	6879      	ldr	r1, [r7, #4]
 800414a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800414c:	4613      	mov	r3, r2
 800414e:	00db      	lsls	r3, r3, #3
 8004150:	4413      	add	r3, r2
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	334c      	adds	r3, #76	; 0x4c
 8004158:	6819      	ldr	r1, [r3, #0]
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800415e:	4613      	mov	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	4413      	add	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4403      	add	r3, r0
 8004168:	3348      	adds	r3, #72	; 0x48
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4419      	add	r1, r3
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004172:	4613      	mov	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	4413      	add	r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4403      	add	r3, r0
 800417c:	334c      	adds	r3, #76	; 0x4c
 800417e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004182:	2b00      	cmp	r3, #0
 8004184:	d113      	bne.n	80041ae <HAL_PCD_IRQHandler+0x3a2>
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800418a:	4613      	mov	r3, r2
 800418c:	00db      	lsls	r3, r3, #3
 800418e:	4413      	add	r3, r2
 8004190:	009b      	lsls	r3, r3, #2
 8004192:	440b      	add	r3, r1
 8004194:	3354      	adds	r3, #84	; 0x54
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d108      	bne.n	80041ae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6818      	ldr	r0, [r3, #0]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80041a6:	461a      	mov	r2, r3
 80041a8:	2101      	movs	r1, #1
 80041aa:	f003 feb1 	bl	8007f10 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80041ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	4619      	mov	r1, r3
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f006 f996 	bl	800a4e6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	f003 0308 	and.w	r3, r3, #8
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d008      	beq.n	80041d6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	015a      	lsls	r2, r3, #5
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	4413      	add	r3, r2
 80041cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d0:	461a      	mov	r2, r3
 80041d2:	2308      	movs	r3, #8
 80041d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d008      	beq.n	80041f2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ec:	461a      	mov	r2, r3
 80041ee:	2310      	movs	r3, #16
 80041f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d008      	beq.n	800420e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	015a      	lsls	r2, r3, #5
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	4413      	add	r3, r2
 8004204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004208:	461a      	mov	r2, r3
 800420a:	2340      	movs	r3, #64	; 0x40
 800420c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f003 0302 	and.w	r3, r3, #2
 8004214:	2b00      	cmp	r3, #0
 8004216:	d023      	beq.n	8004260 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004218:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800421a:	6a38      	ldr	r0, [r7, #32]
 800421c:	f002 fd92 	bl	8006d44 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004220:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004222:	4613      	mov	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	4413      	add	r3, r2
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	3338      	adds	r3, #56	; 0x38
 800422c:	687a      	ldr	r2, [r7, #4]
 800422e:	4413      	add	r3, r2
 8004230:	3304      	adds	r3, #4
 8004232:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	78db      	ldrb	r3, [r3, #3]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d108      	bne.n	800424e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	2200      	movs	r2, #0
 8004240:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	b2db      	uxtb	r3, r3
 8004246:	4619      	mov	r1, r3
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f006 f9e3 	bl	800a614 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800424e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004250:	015a      	lsls	r2, r3, #5
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	4413      	add	r3, r2
 8004256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800425a:	461a      	mov	r2, r3
 800425c:	2302      	movs	r3, #2
 800425e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004266:	2b00      	cmp	r3, #0
 8004268:	d003      	beq.n	8004272 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800426a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800426c:	6878      	ldr	r0, [r7, #4]
 800426e:	f000 fcdb 	bl	8004c28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004274:	3301      	adds	r3, #1
 8004276:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800427a:	085b      	lsrs	r3, r3, #1
 800427c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	2b00      	cmp	r3, #0
 8004282:	f47f af2e 	bne.w	80040e2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4618      	mov	r0, r3
 800428c:	f003 fd7c 	bl	8007d88 <USB_ReadInterrupts>
 8004290:	4603      	mov	r3, r0
 8004292:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004296:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800429a:	d122      	bne.n	80042e2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d108      	bne.n	80042cc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80042c2:	2100      	movs	r1, #0
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 fec3 	bl	8005050 <HAL_PCDEx_LPM_Callback>
 80042ca:	e002      	b.n	80042d2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f006 f981 	bl	800a5d4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695a      	ldr	r2, [r3, #20]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80042e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4618      	mov	r0, r3
 80042e8:	f003 fd4e 	bl	8007d88 <USB_ReadInterrupts>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042f6:	d112      	bne.n	800431e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 0301 	and.w	r3, r3, #1
 8004304:	2b01      	cmp	r3, #1
 8004306:	d102      	bne.n	800430e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f006 f93d 	bl	800a588 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	695a      	ldr	r2, [r3, #20]
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800431c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4618      	mov	r0, r3
 8004324:	f003 fd30 	bl	8007d88 <USB_ReadInterrupts>
 8004328:	4603      	mov	r3, r0
 800432a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800432e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004332:	f040 80b7 	bne.w	80044a4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	69fa      	ldr	r2, [r7, #28]
 8004340:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004344:	f023 0301 	bic.w	r3, r3, #1
 8004348:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2110      	movs	r1, #16
 8004350:	4618      	mov	r0, r3
 8004352:	f002 fcf7 	bl	8006d44 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004356:	2300      	movs	r3, #0
 8004358:	62fb      	str	r3, [r7, #44]	; 0x2c
 800435a:	e046      	b.n	80043ea <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800435c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004368:	461a      	mov	r2, r3
 800436a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800436e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004380:	0151      	lsls	r1, r2, #5
 8004382:	69fa      	ldr	r2, [r7, #28]
 8004384:	440a      	add	r2, r1
 8004386:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800438a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800438e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800439c:	461a      	mov	r2, r3
 800439e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043b4:	0151      	lsls	r1, r2, #5
 80043b6:	69fa      	ldr	r2, [r7, #28]
 80043b8:	440a      	add	r2, r1
 80043ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043d4:	0151      	lsls	r1, r2, #5
 80043d6:	69fa      	ldr	r2, [r7, #28]
 80043d8:	440a      	add	r2, r1
 80043da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80043de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e6:	3301      	adds	r3, #1
 80043e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d3b3      	bcc.n	800435c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fa:	69db      	ldr	r3, [r3, #28]
 80043fc:	69fa      	ldr	r2, [r7, #28]
 80043fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004402:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004406:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440c:	2b00      	cmp	r3, #0
 800440e:	d016      	beq.n	800443e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004416:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800441a:	69fa      	ldr	r2, [r7, #28]
 800441c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004420:	f043 030b 	orr.w	r3, r3, #11
 8004424:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004428:	69fb      	ldr	r3, [r7, #28]
 800442a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800442e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004436:	f043 030b 	orr.w	r3, r3, #11
 800443a:	6453      	str	r3, [r2, #68]	; 0x44
 800443c:	e015      	b.n	800446a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	69fa      	ldr	r2, [r7, #28]
 8004448:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800444c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004450:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8004454:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004456:	69fb      	ldr	r3, [r7, #28]
 8004458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	69fa      	ldr	r2, [r7, #28]
 8004460:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004464:	f043 030b 	orr.w	r3, r3, #11
 8004468:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004478:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800447c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6818      	ldr	r0, [r3, #0]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	691b      	ldr	r3, [r3, #16]
 8004486:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800448e:	461a      	mov	r2, r3
 8004490:	f003 fd3e 	bl	8007f10 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695a      	ldr	r2, [r3, #20]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80044a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f003 fc6d 	bl	8007d88 <USB_ReadInterrupts>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80044b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044b8:	d124      	bne.n	8004504 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f003 fd03 	bl	8007eca <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4618      	mov	r0, r3
 80044ca:	f002 fcb8 	bl	8006e3e <USB_GetDevSpeed>
 80044ce:	4603      	mov	r3, r0
 80044d0:	461a      	mov	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681c      	ldr	r4, [r3, #0]
 80044da:	f001 f9e9 	bl	80058b0 <HAL_RCC_GetHCLKFreq>
 80044de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	461a      	mov	r2, r3
 80044e8:	4620      	mov	r0, r4
 80044ea:	f002 f9b7 	bl	800685c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f006 f821 	bl	800a536 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695a      	ldr	r2, [r3, #20]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004502:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f003 fc3d 	bl	8007d88 <USB_ReadInterrupts>
 800450e:	4603      	mov	r3, r0
 8004510:	f003 0308 	and.w	r3, r3, #8
 8004514:	2b08      	cmp	r3, #8
 8004516:	d10a      	bne.n	800452e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004518:	6878      	ldr	r0, [r7, #4]
 800451a:	f005 fffe 	bl	800a51a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f002 0208 	and.w	r2, r2, #8
 800452c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4618      	mov	r0, r3
 8004534:	f003 fc28 	bl	8007d88 <USB_ReadInterrupts>
 8004538:	4603      	mov	r3, r0
 800453a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800453e:	2b80      	cmp	r3, #128	; 0x80
 8004540:	d122      	bne.n	8004588 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004542:	6a3b      	ldr	r3, [r7, #32]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800454e:	2301      	movs	r3, #1
 8004550:	627b      	str	r3, [r7, #36]	; 0x24
 8004552:	e014      	b.n	800457e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004554:	6879      	ldr	r1, [r7, #4]
 8004556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004558:	4613      	mov	r3, r2
 800455a:	00db      	lsls	r3, r3, #3
 800455c:	4413      	add	r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004566:	781b      	ldrb	r3, [r3, #0]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d105      	bne.n	8004578 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800456c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800456e:	b2db      	uxtb	r3, r3
 8004570:	4619      	mov	r1, r3
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f000 fb27 	bl	8004bc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457a:	3301      	adds	r3, #1
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004584:	429a      	cmp	r2, r3
 8004586:	d3e5      	bcc.n	8004554 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f003 fbfb 	bl	8007d88 <USB_ReadInterrupts>
 8004592:	4603      	mov	r3, r0
 8004594:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004598:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800459c:	d13b      	bne.n	8004616 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800459e:	2301      	movs	r3, #1
 80045a0:	627b      	str	r3, [r7, #36]	; 0x24
 80045a2:	e02b      	b.n	80045fc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80045a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	69fb      	ldr	r3, [r7, #28]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045b4:	6879      	ldr	r1, [r7, #4]
 80045b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045b8:	4613      	mov	r3, r2
 80045ba:	00db      	lsls	r3, r3, #3
 80045bc:	4413      	add	r3, r2
 80045be:	009b      	lsls	r3, r3, #2
 80045c0:	440b      	add	r3, r1
 80045c2:	3340      	adds	r3, #64	; 0x40
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d115      	bne.n	80045f6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80045ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	da12      	bge.n	80045f6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80045d0:	6879      	ldr	r1, [r7, #4]
 80045d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045d4:	4613      	mov	r3, r2
 80045d6:	00db      	lsls	r3, r3, #3
 80045d8:	4413      	add	r3, r2
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	440b      	add	r3, r1
 80045de:	333f      	adds	r3, #63	; 0x3f
 80045e0:	2201      	movs	r2, #1
 80045e2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80045e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	4619      	mov	r1, r3
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 fae8 	bl	8004bc6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	3301      	adds	r3, #1
 80045fa:	627b      	str	r3, [r7, #36]	; 0x24
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004602:	429a      	cmp	r2, r3
 8004604:	d3ce      	bcc.n	80045a4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	695a      	ldr	r2, [r3, #20]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004614:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	f003 fbb4 	bl	8007d88 <USB_ReadInterrupts>
 8004620:	4603      	mov	r3, r0
 8004622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004626:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800462a:	d155      	bne.n	80046d8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800462c:	2301      	movs	r3, #1
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
 8004630:	e045      	b.n	80046be <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004646:	4613      	mov	r3, r2
 8004648:	00db      	lsls	r3, r3, #3
 800464a:	4413      	add	r3, r2
 800464c:	009b      	lsls	r3, r3, #2
 800464e:	440b      	add	r3, r1
 8004650:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d12e      	bne.n	80046b8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800465a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800465c:	2b00      	cmp	r3, #0
 800465e:	da2b      	bge.n	80046b8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800466c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004670:	429a      	cmp	r2, r3
 8004672:	d121      	bne.n	80046b8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004674:	6879      	ldr	r1, [r7, #4]
 8004676:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004678:	4613      	mov	r3, r2
 800467a:	00db      	lsls	r3, r3, #3
 800467c:	4413      	add	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	440b      	add	r3, r1
 8004682:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004686:	2201      	movs	r2, #1
 8004688:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004692:	6a3b      	ldr	r3, [r7, #32]
 8004694:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d10a      	bne.n	80046b8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	69fa      	ldr	r2, [r7, #28]
 80046ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046b4:	6053      	str	r3, [r2, #4]
            break;
 80046b6:	e007      	b.n	80046c8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80046b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ba:	3301      	adds	r3, #1
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d3b4      	bcc.n	8004632 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	695a      	ldr	r2, [r3, #20]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80046d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	4618      	mov	r0, r3
 80046de:	f003 fb53 	bl	8007d88 <USB_ReadInterrupts>
 80046e2:	4603      	mov	r3, r0
 80046e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80046e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ec:	d10a      	bne.n	8004704 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f005 ffa2 	bl	800a638 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	695a      	ldr	r2, [r3, #20]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004702:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	4618      	mov	r0, r3
 800470a:	f003 fb3d 	bl	8007d88 <USB_ReadInterrupts>
 800470e:	4603      	mov	r3, r0
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b04      	cmp	r3, #4
 8004716:	d115      	bne.n	8004744 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004720:	69bb      	ldr	r3, [r7, #24]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d002      	beq.n	8004730 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f005 ff92 	bl	800a654 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6859      	ldr	r1, [r3, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	430a      	orrs	r2, r1
 800473e:	605a      	str	r2, [r3, #4]
 8004740:	e000      	b.n	8004744 <HAL_PCD_IRQHandler+0x938>
      return;
 8004742:	bf00      	nop
    }
  }
}
 8004744:	3734      	adds	r7, #52	; 0x34
 8004746:	46bd      	mov	sp, r7
 8004748:	bd90      	pop	{r4, r7, pc}

0800474a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b082      	sub	sp, #8
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	460b      	mov	r3, r1
 8004754:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800475c:	2b01      	cmp	r3, #1
 800475e:	d101      	bne.n	8004764 <HAL_PCD_SetAddress+0x1a>
 8004760:	2302      	movs	r3, #2
 8004762:	e013      	b.n	800478c <HAL_PCD_SetAddress+0x42>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	78fa      	ldrb	r2, [r7, #3]
 8004770:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	78fa      	ldrb	r2, [r7, #3]
 800477a:	4611      	mov	r1, r2
 800477c:	4618      	mov	r0, r3
 800477e:	f003 fa9b 	bl	8007cb8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800478a:	2300      	movs	r3, #0
}
 800478c:	4618      	mov	r0, r3
 800478e:	3708      	adds	r7, #8
 8004790:	46bd      	mov	sp, r7
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	4608      	mov	r0, r1
 800479e:	4611      	mov	r1, r2
 80047a0:	461a      	mov	r2, r3
 80047a2:	4603      	mov	r3, r0
 80047a4:	70fb      	strb	r3, [r7, #3]
 80047a6:	460b      	mov	r3, r1
 80047a8:	803b      	strh	r3, [r7, #0]
 80047aa:	4613      	mov	r3, r2
 80047ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80047ae:	2300      	movs	r3, #0
 80047b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80047b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	da0f      	bge.n	80047da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80047ba:	78fb      	ldrb	r3, [r7, #3]
 80047bc:	f003 020f 	and.w	r2, r3, #15
 80047c0:	4613      	mov	r3, r2
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	3338      	adds	r3, #56	; 0x38
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	4413      	add	r3, r2
 80047ce:	3304      	adds	r3, #4
 80047d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2201      	movs	r2, #1
 80047d6:	705a      	strb	r2, [r3, #1]
 80047d8:	e00f      	b.n	80047fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047da:	78fb      	ldrb	r3, [r7, #3]
 80047dc:	f003 020f 	and.w	r2, r3, #15
 80047e0:	4613      	mov	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	4413      	add	r3, r2
 80047f0:	3304      	adds	r3, #4
 80047f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2200      	movs	r2, #0
 80047f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80047fa:	78fb      	ldrb	r3, [r7, #3]
 80047fc:	f003 030f 	and.w	r3, r3, #15
 8004800:	b2da      	uxtb	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004806:	883a      	ldrh	r2, [r7, #0]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	78ba      	ldrb	r2, [r7, #2]
 8004810:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	785b      	ldrb	r3, [r3, #1]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d004      	beq.n	8004824 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	781b      	ldrb	r3, [r3, #0]
 800481e:	b29a      	uxth	r2, r3
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004824:	78bb      	ldrb	r3, [r7, #2]
 8004826:	2b02      	cmp	r3, #2
 8004828:	d102      	bne.n	8004830 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004836:	2b01      	cmp	r3, #1
 8004838:	d101      	bne.n	800483e <HAL_PCD_EP_Open+0xaa>
 800483a:	2302      	movs	r3, #2
 800483c:	e00e      	b.n	800485c <HAL_PCD_EP_Open+0xc8>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68f9      	ldr	r1, [r7, #12]
 800484c:	4618      	mov	r0, r3
 800484e:	f002 fb1b 	bl	8006e88 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800485a:	7afb      	ldrb	r3, [r7, #11]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}

08004864 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b084      	sub	sp, #16
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
 800486c:	460b      	mov	r3, r1
 800486e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004870:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004874:	2b00      	cmp	r3, #0
 8004876:	da0f      	bge.n	8004898 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	f003 020f 	and.w	r2, r3, #15
 800487e:	4613      	mov	r3, r2
 8004880:	00db      	lsls	r3, r3, #3
 8004882:	4413      	add	r3, r2
 8004884:	009b      	lsls	r3, r3, #2
 8004886:	3338      	adds	r3, #56	; 0x38
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	4413      	add	r3, r2
 800488c:	3304      	adds	r3, #4
 800488e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	2201      	movs	r2, #1
 8004894:	705a      	strb	r2, [r3, #1]
 8004896:	e00f      	b.n	80048b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004898:	78fb      	ldrb	r3, [r7, #3]
 800489a:	f003 020f 	and.w	r2, r3, #15
 800489e:	4613      	mov	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	4413      	add	r3, r2
 80048ae:	3304      	adds	r3, #4
 80048b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	2200      	movs	r2, #0
 80048b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80048b8:	78fb      	ldrb	r3, [r7, #3]
 80048ba:	f003 030f 	and.w	r3, r3, #15
 80048be:	b2da      	uxtb	r2, r3
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d101      	bne.n	80048d2 <HAL_PCD_EP_Close+0x6e>
 80048ce:	2302      	movs	r3, #2
 80048d0:	e00e      	b.n	80048f0 <HAL_PCD_EP_Close+0x8c>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68f9      	ldr	r1, [r7, #12]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f002 fb59 	bl	8006f98 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80048ee:	2300      	movs	r3, #0
}
 80048f0:	4618      	mov	r0, r3
 80048f2:	3710      	adds	r7, #16
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	60f8      	str	r0, [r7, #12]
 8004900:	607a      	str	r2, [r7, #4]
 8004902:	603b      	str	r3, [r7, #0]
 8004904:	460b      	mov	r3, r1
 8004906:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004908:	7afb      	ldrb	r3, [r7, #11]
 800490a:	f003 020f 	and.w	r2, r3, #15
 800490e:	4613      	mov	r3, r2
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	4413      	add	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	4413      	add	r3, r2
 800491e:	3304      	adds	r3, #4
 8004920:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	683a      	ldr	r2, [r7, #0]
 800492c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	2200      	movs	r2, #0
 8004932:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	2200      	movs	r2, #0
 8004938:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800493a:	7afb      	ldrb	r3, [r7, #11]
 800493c:	f003 030f 	and.w	r3, r3, #15
 8004940:	b2da      	uxtb	r2, r3
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	691b      	ldr	r3, [r3, #16]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d102      	bne.n	8004954 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004954:	7afb      	ldrb	r3, [r7, #11]
 8004956:	f003 030f 	and.w	r3, r3, #15
 800495a:	2b00      	cmp	r3, #0
 800495c:	d109      	bne.n	8004972 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6818      	ldr	r0, [r3, #0]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	691b      	ldr	r3, [r3, #16]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	461a      	mov	r2, r3
 800496a:	6979      	ldr	r1, [r7, #20]
 800496c:	f002 fe38 	bl	80075e0 <USB_EP0StartXfer>
 8004970:	e008      	b.n	8004984 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	6818      	ldr	r0, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	b2db      	uxtb	r3, r3
 800497c:	461a      	mov	r2, r3
 800497e:	6979      	ldr	r1, [r7, #20]
 8004980:	f002 fbe6 	bl	8007150 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	4618      	mov	r0, r3
 8004988:	3718      	adds	r7, #24
 800498a:	46bd      	mov	sp, r7
 800498c:	bd80      	pop	{r7, pc}

0800498e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800498e:	b480      	push	{r7}
 8004990:	b083      	sub	sp, #12
 8004992:	af00      	add	r7, sp, #0
 8004994:	6078      	str	r0, [r7, #4]
 8004996:	460b      	mov	r3, r1
 8004998:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800499a:	78fb      	ldrb	r3, [r7, #3]
 800499c:	f003 020f 	and.w	r2, r3, #15
 80049a0:	6879      	ldr	r1, [r7, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	440b      	add	r3, r1
 80049ac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80049b0:	681b      	ldr	r3, [r3, #0]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	370c      	adds	r7, #12
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80049be:	b580      	push	{r7, lr}
 80049c0:	b086      	sub	sp, #24
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	60f8      	str	r0, [r7, #12]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
 80049ca:	460b      	mov	r3, r1
 80049cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049ce:	7afb      	ldrb	r3, [r7, #11]
 80049d0:	f003 020f 	and.w	r2, r3, #15
 80049d4:	4613      	mov	r3, r2
 80049d6:	00db      	lsls	r3, r3, #3
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	3338      	adds	r3, #56	; 0x38
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	4413      	add	r3, r2
 80049e2:	3304      	adds	r3, #4
 80049e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	687a      	ldr	r2, [r7, #4]
 80049ea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	683a      	ldr	r2, [r7, #0]
 80049f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	2200      	movs	r2, #0
 80049f6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	2201      	movs	r2, #1
 80049fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049fe:	7afb      	ldrb	r3, [r7, #11]
 8004a00:	f003 030f 	and.w	r3, r3, #15
 8004a04:	b2da      	uxtb	r2, r3
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d102      	bne.n	8004a18 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a18:	7afb      	ldrb	r3, [r7, #11]
 8004a1a:	f003 030f 	and.w	r3, r3, #15
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d109      	bne.n	8004a36 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6818      	ldr	r0, [r3, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	b2db      	uxtb	r3, r3
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	6979      	ldr	r1, [r7, #20]
 8004a30:	f002 fdd6 	bl	80075e0 <USB_EP0StartXfer>
 8004a34:	e008      	b.n	8004a48 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	6818      	ldr	r0, [r3, #0]
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	6979      	ldr	r1, [r7, #20]
 8004a44:	f002 fb84 	bl	8007150 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}

08004a52 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a52:	b580      	push	{r7, lr}
 8004a54:	b084      	sub	sp, #16
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004a5e:	78fb      	ldrb	r3, [r7, #3]
 8004a60:	f003 020f 	and.w	r2, r3, #15
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d901      	bls.n	8004a70 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e050      	b.n	8004b12 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a70:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	da0f      	bge.n	8004a98 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a78:	78fb      	ldrb	r3, [r7, #3]
 8004a7a:	f003 020f 	and.w	r2, r3, #15
 8004a7e:	4613      	mov	r3, r2
 8004a80:	00db      	lsls	r3, r3, #3
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	3338      	adds	r3, #56	; 0x38
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	3304      	adds	r3, #4
 8004a8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	705a      	strb	r2, [r3, #1]
 8004a96:	e00d      	b.n	8004ab4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004a98:	78fa      	ldrb	r2, [r7, #3]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	00db      	lsls	r3, r3, #3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	3304      	adds	r3, #4
 8004aac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aba:	78fb      	ldrb	r3, [r7, #3]
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	b2da      	uxtb	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_PCD_EP_SetStall+0x82>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e01e      	b.n	8004b12 <HAL_PCD_EP_SetStall+0xc0>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	68f9      	ldr	r1, [r7, #12]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f003 f814 	bl	8007b10 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004ae8:	78fb      	ldrb	r3, [r7, #3]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10a      	bne.n	8004b08 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6818      	ldr	r0, [r3, #0]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	b2d9      	uxtb	r1, r3
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b02:	461a      	mov	r2, r3
 8004b04:	f003 fa04 	bl	8007f10 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3710      	adds	r7, #16
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}

08004b1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b1a:	b580      	push	{r7, lr}
 8004b1c:	b084      	sub	sp, #16
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	460b      	mov	r3, r1
 8004b24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004b26:	78fb      	ldrb	r3, [r7, #3]
 8004b28:	f003 020f 	and.w	r2, r3, #15
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d901      	bls.n	8004b38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e042      	b.n	8004bbe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004b38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	da0f      	bge.n	8004b60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b40:	78fb      	ldrb	r3, [r7, #3]
 8004b42:	f003 020f 	and.w	r2, r3, #15
 8004b46:	4613      	mov	r3, r2
 8004b48:	00db      	lsls	r3, r3, #3
 8004b4a:	4413      	add	r3, r2
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	3338      	adds	r3, #56	; 0x38
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	4413      	add	r3, r2
 8004b54:	3304      	adds	r3, #4
 8004b56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	705a      	strb	r2, [r3, #1]
 8004b5e:	e00f      	b.n	8004b80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b60:	78fb      	ldrb	r3, [r7, #3]
 8004b62:	f003 020f 	and.w	r2, r3, #15
 8004b66:	4613      	mov	r3, r2
 8004b68:	00db      	lsls	r3, r3, #3
 8004b6a:	4413      	add	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b72:	687a      	ldr	r2, [r7, #4]
 8004b74:	4413      	add	r3, r2
 8004b76:	3304      	adds	r3, #4
 8004b78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2200      	movs	r2, #0
 8004b84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b86:	78fb      	ldrb	r3, [r7, #3]
 8004b88:	f003 030f 	and.w	r3, r3, #15
 8004b8c:	b2da      	uxtb	r2, r3
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d101      	bne.n	8004ba0 <HAL_PCD_EP_ClrStall+0x86>
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	e00e      	b.n	8004bbe <HAL_PCD_EP_ClrStall+0xa4>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2201      	movs	r2, #1
 8004ba4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68f9      	ldr	r1, [r7, #12]
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f003 f81c 	bl	8007bec <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b084      	sub	sp, #16
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	460b      	mov	r3, r1
 8004bd0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004bd2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	da0c      	bge.n	8004bf4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bda:	78fb      	ldrb	r3, [r7, #3]
 8004bdc:	f003 020f 	and.w	r2, r3, #15
 8004be0:	4613      	mov	r3, r2
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4413      	add	r3, r2
 8004be6:	009b      	lsls	r3, r3, #2
 8004be8:	3338      	adds	r3, #56	; 0x38
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	4413      	add	r3, r2
 8004bee:	3304      	adds	r3, #4
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	e00c      	b.n	8004c0e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004bf4:	78fb      	ldrb	r3, [r7, #3]
 8004bf6:	f003 020f 	and.w	r2, r3, #15
 8004bfa:	4613      	mov	r3, r2
 8004bfc:	00db      	lsls	r3, r3, #3
 8004bfe:	4413      	add	r3, r2
 8004c00:	009b      	lsls	r3, r3, #2
 8004c02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c06:	687a      	ldr	r2, [r7, #4]
 8004c08:	4413      	add	r3, r2
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68f9      	ldr	r1, [r7, #12]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f002 fe3b 	bl	8007890 <USB_EPStopXfer>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004c1e:	7afb      	ldrb	r3, [r7, #11]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	; 0x28
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004c3c:	683a      	ldr	r2, [r7, #0]
 8004c3e:	4613      	mov	r3, r2
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	4413      	add	r3, r2
 8004c44:	009b      	lsls	r3, r3, #2
 8004c46:	3338      	adds	r3, #56	; 0x38
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	4413      	add	r3, r2
 8004c4c:	3304      	adds	r3, #4
 8004c4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6a1a      	ldr	r2, [r3, #32]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d901      	bls.n	8004c60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e06c      	b.n	8004d3a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	699a      	ldr	r2, [r3, #24]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6a1b      	ldr	r3, [r3, #32]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	69fa      	ldr	r2, [r7, #28]
 8004c72:	429a      	cmp	r2, r3
 8004c74:	d902      	bls.n	8004c7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	3303      	adds	r3, #3
 8004c80:	089b      	lsrs	r3, r3, #2
 8004c82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c84:	e02b      	b.n	8004cde <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	699a      	ldr	r2, [r3, #24]
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	6a1b      	ldr	r3, [r3, #32]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	69fa      	ldr	r2, [r7, #28]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d902      	bls.n	8004ca2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	68db      	ldr	r3, [r3, #12]
 8004ca0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004ca2:	69fb      	ldr	r3, [r7, #28]
 8004ca4:	3303      	adds	r3, #3
 8004ca6:	089b      	lsrs	r3, r3, #2
 8004ca8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6919      	ldr	r1, [r3, #16]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004cba:	b2db      	uxtb	r3, r3
 8004cbc:	9300      	str	r3, [sp, #0]
 8004cbe:	4603      	mov	r3, r0
 8004cc0:	6978      	ldr	r0, [r7, #20]
 8004cc2:	f002 fe8f 	bl	80079e4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	441a      	add	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	6a1a      	ldr	r2, [r3, #32]
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	441a      	add	r2, r3
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	b29b      	uxth	r3, r3
 8004cee:	69ba      	ldr	r2, [r7, #24]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d809      	bhi.n	8004d08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6a1a      	ldr	r2, [r3, #32]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d203      	bcs.n	8004d08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d1be      	bne.n	8004c86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	699a      	ldr	r2, [r3, #24]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6a1b      	ldr	r3, [r3, #32]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d811      	bhi.n	8004d38 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	f003 030f 	and.w	r3, r3, #15
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	43db      	mvns	r3, r3
 8004d2e:	6939      	ldr	r1, [r7, #16]
 8004d30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d34:	4013      	ands	r3, r2
 8004d36:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3720      	adds	r7, #32
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
	...

08004d44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b088      	sub	sp, #32
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	333c      	adds	r3, #60	; 0x3c
 8004d5c:	3304      	adds	r3, #4
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	015a      	lsls	r2, r3, #5
 8004d66:	69bb      	ldr	r3, [r7, #24]
 8004d68:	4413      	add	r3, r2
 8004d6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d17b      	bne.n	8004e72 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f003 0308 	and.w	r3, r3, #8
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d015      	beq.n	8004db0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	4a61      	ldr	r2, [pc, #388]	; (8004f0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	f240 80b9 	bls.w	8004f00 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	f000 80b3 	beq.w	8004f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	015a      	lsls	r2, r3, #5
 8004d9e:	69bb      	ldr	r3, [r7, #24]
 8004da0:	4413      	add	r3, r2
 8004da2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004da6:	461a      	mov	r2, r3
 8004da8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dac:	6093      	str	r3, [r2, #8]
 8004dae:	e0a7      	b.n	8004f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	f003 0320 	and.w	r3, r3, #32
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d009      	beq.n	8004dce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	69bb      	ldr	r3, [r7, #24]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	2320      	movs	r3, #32
 8004dca:	6093      	str	r3, [r2, #8]
 8004dcc:	e098      	b.n	8004f00 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	f040 8093 	bne.w	8004f00 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	4a4b      	ldr	r2, [pc, #300]	; (8004f0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d90f      	bls.n	8004e02 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	015a      	lsls	r2, r3, #5
 8004df0:	69bb      	ldr	r3, [r7, #24]
 8004df2:	4413      	add	r3, r2
 8004df4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004df8:	461a      	mov	r2, r3
 8004dfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dfe:	6093      	str	r3, [r2, #8]
 8004e00:	e07e      	b.n	8004f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004e02:	683a      	ldr	r2, [r7, #0]
 8004e04:	4613      	mov	r3, r2
 8004e06:	00db      	lsls	r3, r3, #3
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	4413      	add	r3, r2
 8004e14:	3304      	adds	r3, #4
 8004e16:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	0159      	lsls	r1, r3, #5
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	440b      	add	r3, r1
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e2e:	1ad2      	subs	r2, r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d114      	bne.n	8004e64 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	699b      	ldr	r3, [r3, #24]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6818      	ldr	r0, [r3, #0]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	2101      	movs	r1, #1
 8004e50:	f003 f85e 	bl	8007f10 <USB_EP0_OutStart>
 8004e54:	e006      	b.n	8004e64 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a1b      	ldr	r3, [r3, #32]
 8004e5e:	441a      	add	r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	4619      	mov	r1, r3
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f005 fb20 	bl	800a4b0 <HAL_PCD_DataOutStageCallback>
 8004e70:	e046      	b.n	8004f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	4a26      	ldr	r2, [pc, #152]	; (8004f10 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d124      	bne.n	8004ec4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	69bb      	ldr	r3, [r7, #24]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e90:	461a      	mov	r2, r3
 8004e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e96:	6093      	str	r3, [r2, #8]
 8004e98:	e032      	b.n	8004f00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	f003 0320 	and.w	r3, r3, #32
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d008      	beq.n	8004eb6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	69bb      	ldr	r3, [r7, #24]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	2320      	movs	r3, #32
 8004eb4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	4619      	mov	r1, r3
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	f005 faf7 	bl	800a4b0 <HAL_PCD_DataOutStageCallback>
 8004ec2:	e01d      	b.n	8004f00 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d114      	bne.n	8004ef4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004eca:	6879      	ldr	r1, [r7, #4]
 8004ecc:	683a      	ldr	r2, [r7, #0]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d108      	bne.n	8004ef4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6818      	ldr	r0, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004eec:	461a      	mov	r2, r3
 8004eee:	2100      	movs	r1, #0
 8004ef0:	f003 f80e 	bl	8007f10 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	4619      	mov	r1, r3
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f005 fad8 	bl	800a4b0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3720      	adds	r7, #32
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	4f54300a 	.word	0x4f54300a
 8004f10:	4f54310a 	.word	0x4f54310a

08004f14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b086      	sub	sp, #24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	333c      	adds	r3, #60	; 0x3c
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	015a      	lsls	r2, r3, #5
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	4413      	add	r3, r2
 8004f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	4a15      	ldr	r2, [pc, #84]	; (8004f9c <PCD_EP_OutSetupPacket_int+0x88>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d90e      	bls.n	8004f68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d009      	beq.n	8004f68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f60:	461a      	mov	r2, r3
 8004f62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f005 fa8f 	bl	800a48c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	4a0a      	ldr	r2, [pc, #40]	; (8004f9c <PCD_EP_OutSetupPacket_int+0x88>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d90c      	bls.n	8004f90 <PCD_EP_OutSetupPacket_int+0x7c>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d108      	bne.n	8004f90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6818      	ldr	r0, [r3, #0]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f88:	461a      	mov	r2, r3
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	f002 ffc0 	bl	8007f10 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	3718      	adds	r7, #24
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bd80      	pop	{r7, pc}
 8004f9a:	bf00      	nop
 8004f9c:	4f54300a 	.word	0x4f54300a

08004fa0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	460b      	mov	r3, r1
 8004faa:	70fb      	strb	r3, [r7, #3]
 8004fac:	4613      	mov	r3, r2
 8004fae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004fb8:	78fb      	ldrb	r3, [r7, #3]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d107      	bne.n	8004fce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004fbe:	883b      	ldrh	r3, [r7, #0]
 8004fc0:	0419      	lsls	r1, r3, #16
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	629a      	str	r2, [r3, #40]	; 0x28
 8004fcc:	e028      	b.n	8005020 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fd4:	0c1b      	lsrs	r3, r3, #16
 8004fd6:	68ba      	ldr	r2, [r7, #8]
 8004fd8:	4413      	add	r3, r2
 8004fda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004fdc:	2300      	movs	r3, #0
 8004fde:	73fb      	strb	r3, [r7, #15]
 8004fe0:	e00d      	b.n	8004ffe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681a      	ldr	r2, [r3, #0]
 8004fe6:	7bfb      	ldrb	r3, [r7, #15]
 8004fe8:	3340      	adds	r3, #64	; 0x40
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	4413      	add	r3, r2
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	0c1b      	lsrs	r3, r3, #16
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ff8:	7bfb      	ldrb	r3, [r7, #15]
 8004ffa:	3301      	adds	r3, #1
 8004ffc:	73fb      	strb	r3, [r7, #15]
 8004ffe:	7bfa      	ldrb	r2, [r7, #15]
 8005000:	78fb      	ldrb	r3, [r7, #3]
 8005002:	3b01      	subs	r3, #1
 8005004:	429a      	cmp	r2, r3
 8005006:	d3ec      	bcc.n	8004fe2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005008:	883b      	ldrh	r3, [r7, #0]
 800500a:	0418      	lsls	r0, r3, #16
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6819      	ldr	r1, [r3, #0]
 8005010:	78fb      	ldrb	r3, [r7, #3]
 8005012:	3b01      	subs	r3, #1
 8005014:	68ba      	ldr	r2, [r7, #8]
 8005016:	4302      	orrs	r2, r0
 8005018:	3340      	adds	r3, #64	; 0x40
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005020:	2300      	movs	r3, #0
}
 8005022:	4618      	mov	r0, r3
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502c:	4770      	bx	lr

0800502e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800502e:	b480      	push	{r7}
 8005030:	b083      	sub	sp, #12
 8005032:	af00      	add	r7, sp, #0
 8005034:	6078      	str	r0, [r7, #4]
 8005036:	460b      	mov	r3, r1
 8005038:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	887a      	ldrh	r2, [r7, #2]
 8005040:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005042:	2300      	movs	r3, #0
}
 8005044:	4618      	mov	r0, r3
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	460b      	mov	r3, r1
 800505a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b086      	sub	sp, #24
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d101      	bne.n	800507a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005076:	2301      	movs	r3, #1
 8005078:	e267      	b.n	800554a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d075      	beq.n	8005172 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005086:	4b88      	ldr	r3, [pc, #544]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 030c 	and.w	r3, r3, #12
 800508e:	2b04      	cmp	r3, #4
 8005090:	d00c      	beq.n	80050ac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005092:	4b85      	ldr	r3, [pc, #532]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800509a:	2b08      	cmp	r3, #8
 800509c:	d112      	bne.n	80050c4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800509e:	4b82      	ldr	r3, [pc, #520]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050aa:	d10b      	bne.n	80050c4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050ac:	4b7e      	ldr	r3, [pc, #504]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d05b      	beq.n	8005170 <HAL_RCC_OscConfig+0x108>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d157      	bne.n	8005170 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050c0:	2301      	movs	r3, #1
 80050c2:	e242      	b.n	800554a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050cc:	d106      	bne.n	80050dc <HAL_RCC_OscConfig+0x74>
 80050ce:	4b76      	ldr	r3, [pc, #472]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a75      	ldr	r2, [pc, #468]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 80050d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	e01d      	b.n	8005118 <HAL_RCC_OscConfig+0xb0>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050e4:	d10c      	bne.n	8005100 <HAL_RCC_OscConfig+0x98>
 80050e6:	4b70      	ldr	r3, [pc, #448]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a6f      	ldr	r2, [pc, #444]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 80050ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	4b6d      	ldr	r3, [pc, #436]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a6c      	ldr	r2, [pc, #432]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 80050f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050fc:	6013      	str	r3, [r2, #0]
 80050fe:	e00b      	b.n	8005118 <HAL_RCC_OscConfig+0xb0>
 8005100:	4b69      	ldr	r3, [pc, #420]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a68      	ldr	r2, [pc, #416]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800510a:	6013      	str	r3, [r2, #0]
 800510c:	4b66      	ldr	r3, [pc, #408]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a65      	ldr	r2, [pc, #404]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d013      	beq.n	8005148 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005120:	f7fd f886 	bl	8002230 <HAL_GetTick>
 8005124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005126:	e008      	b.n	800513a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005128:	f7fd f882 	bl	8002230 <HAL_GetTick>
 800512c:	4602      	mov	r2, r0
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	1ad3      	subs	r3, r2, r3
 8005132:	2b64      	cmp	r3, #100	; 0x64
 8005134:	d901      	bls.n	800513a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005136:	2303      	movs	r3, #3
 8005138:	e207      	b.n	800554a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513a:	4b5b      	ldr	r3, [pc, #364]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005142:	2b00      	cmp	r3, #0
 8005144:	d0f0      	beq.n	8005128 <HAL_RCC_OscConfig+0xc0>
 8005146:	e014      	b.n	8005172 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005148:	f7fd f872 	bl	8002230 <HAL_GetTick>
 800514c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800514e:	e008      	b.n	8005162 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005150:	f7fd f86e 	bl	8002230 <HAL_GetTick>
 8005154:	4602      	mov	r2, r0
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	1ad3      	subs	r3, r2, r3
 800515a:	2b64      	cmp	r3, #100	; 0x64
 800515c:	d901      	bls.n	8005162 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800515e:	2303      	movs	r3, #3
 8005160:	e1f3      	b.n	800554a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005162:	4b51      	ldr	r3, [pc, #324]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1f0      	bne.n	8005150 <HAL_RCC_OscConfig+0xe8>
 800516e:	e000      	b.n	8005172 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 0302 	and.w	r3, r3, #2
 800517a:	2b00      	cmp	r3, #0
 800517c:	d063      	beq.n	8005246 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800517e:	4b4a      	ldr	r3, [pc, #296]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 030c 	and.w	r3, r3, #12
 8005186:	2b00      	cmp	r3, #0
 8005188:	d00b      	beq.n	80051a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800518a:	4b47      	ldr	r3, [pc, #284]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005192:	2b08      	cmp	r3, #8
 8005194:	d11c      	bne.n	80051d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005196:	4b44      	ldr	r3, [pc, #272]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d116      	bne.n	80051d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051a2:	4b41      	ldr	r3, [pc, #260]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0302 	and.w	r3, r3, #2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d005      	beq.n	80051ba <HAL_RCC_OscConfig+0x152>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68db      	ldr	r3, [r3, #12]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d001      	beq.n	80051ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051b6:	2301      	movs	r3, #1
 80051b8:	e1c7      	b.n	800554a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ba:	4b3b      	ldr	r3, [pc, #236]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	691b      	ldr	r3, [r3, #16]
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	4937      	ldr	r1, [pc, #220]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ce:	e03a      	b.n	8005246 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d020      	beq.n	800521a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051d8:	4b34      	ldr	r3, [pc, #208]	; (80052ac <HAL_RCC_OscConfig+0x244>)
 80051da:	2201      	movs	r2, #1
 80051dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051de:	f7fd f827 	bl	8002230 <HAL_GetTick>
 80051e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051e6:	f7fd f823 	bl	8002230 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e1a8      	b.n	800554a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f8:	4b2b      	ldr	r3, [pc, #172]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0f0      	beq.n	80051e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005204:	4b28      	ldr	r3, [pc, #160]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	691b      	ldr	r3, [r3, #16]
 8005210:	00db      	lsls	r3, r3, #3
 8005212:	4925      	ldr	r1, [pc, #148]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 8005214:	4313      	orrs	r3, r2
 8005216:	600b      	str	r3, [r1, #0]
 8005218:	e015      	b.n	8005246 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800521a:	4b24      	ldr	r3, [pc, #144]	; (80052ac <HAL_RCC_OscConfig+0x244>)
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005220:	f7fd f806 	bl	8002230 <HAL_GetTick>
 8005224:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005226:	e008      	b.n	800523a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005228:	f7fd f802 	bl	8002230 <HAL_GetTick>
 800522c:	4602      	mov	r2, r0
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	2b02      	cmp	r3, #2
 8005234:	d901      	bls.n	800523a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005236:	2303      	movs	r3, #3
 8005238:	e187      	b.n	800554a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800523a:	4b1b      	ldr	r3, [pc, #108]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d1f0      	bne.n	8005228 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d036      	beq.n	80052c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	695b      	ldr	r3, [r3, #20]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d016      	beq.n	8005288 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800525a:	4b15      	ldr	r3, [pc, #84]	; (80052b0 <HAL_RCC_OscConfig+0x248>)
 800525c:	2201      	movs	r2, #1
 800525e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005260:	f7fc ffe6 	bl	8002230 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005268:	f7fc ffe2 	bl	8002230 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e167      	b.n	800554a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800527a:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <HAL_RCC_OscConfig+0x240>)
 800527c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d0f0      	beq.n	8005268 <HAL_RCC_OscConfig+0x200>
 8005286:	e01b      	b.n	80052c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005288:	4b09      	ldr	r3, [pc, #36]	; (80052b0 <HAL_RCC_OscConfig+0x248>)
 800528a:	2200      	movs	r2, #0
 800528c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800528e:	f7fc ffcf 	bl	8002230 <HAL_GetTick>
 8005292:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005294:	e00e      	b.n	80052b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005296:	f7fc ffcb 	bl	8002230 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	2b02      	cmp	r3, #2
 80052a2:	d907      	bls.n	80052b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052a4:	2303      	movs	r3, #3
 80052a6:	e150      	b.n	800554a <HAL_RCC_OscConfig+0x4e2>
 80052a8:	40023800 	.word	0x40023800
 80052ac:	42470000 	.word	0x42470000
 80052b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b4:	4b88      	ldr	r3, [pc, #544]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 80052b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b8:	f003 0302 	and.w	r3, r3, #2
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d1ea      	bne.n	8005296 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f003 0304 	and.w	r3, r3, #4
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	f000 8097 	beq.w	80053fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052ce:	2300      	movs	r3, #0
 80052d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052d2:	4b81      	ldr	r3, [pc, #516]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 80052d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10f      	bne.n	80052fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052de:	2300      	movs	r3, #0
 80052e0:	60bb      	str	r3, [r7, #8]
 80052e2:	4b7d      	ldr	r3, [pc, #500]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	4a7c      	ldr	r2, [pc, #496]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 80052e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ec:	6413      	str	r3, [r2, #64]	; 0x40
 80052ee:	4b7a      	ldr	r3, [pc, #488]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 80052f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f6:	60bb      	str	r3, [r7, #8]
 80052f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052fa:	2301      	movs	r3, #1
 80052fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052fe:	4b77      	ldr	r3, [pc, #476]	; (80054dc <HAL_RCC_OscConfig+0x474>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005306:	2b00      	cmp	r3, #0
 8005308:	d118      	bne.n	800533c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800530a:	4b74      	ldr	r3, [pc, #464]	; (80054dc <HAL_RCC_OscConfig+0x474>)
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a73      	ldr	r2, [pc, #460]	; (80054dc <HAL_RCC_OscConfig+0x474>)
 8005310:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005314:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005316:	f7fc ff8b 	bl	8002230 <HAL_GetTick>
 800531a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800531c:	e008      	b.n	8005330 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800531e:	f7fc ff87 	bl	8002230 <HAL_GetTick>
 8005322:	4602      	mov	r2, r0
 8005324:	693b      	ldr	r3, [r7, #16]
 8005326:	1ad3      	subs	r3, r2, r3
 8005328:	2b02      	cmp	r3, #2
 800532a:	d901      	bls.n	8005330 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e10c      	b.n	800554a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005330:	4b6a      	ldr	r3, [pc, #424]	; (80054dc <HAL_RCC_OscConfig+0x474>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005338:	2b00      	cmp	r3, #0
 800533a:	d0f0      	beq.n	800531e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d106      	bne.n	8005352 <HAL_RCC_OscConfig+0x2ea>
 8005344:	4b64      	ldr	r3, [pc, #400]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 8005346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005348:	4a63      	ldr	r2, [pc, #396]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 800534a:	f043 0301 	orr.w	r3, r3, #1
 800534e:	6713      	str	r3, [r2, #112]	; 0x70
 8005350:	e01c      	b.n	800538c <HAL_RCC_OscConfig+0x324>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	2b05      	cmp	r3, #5
 8005358:	d10c      	bne.n	8005374 <HAL_RCC_OscConfig+0x30c>
 800535a:	4b5f      	ldr	r3, [pc, #380]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 800535c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535e:	4a5e      	ldr	r2, [pc, #376]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 8005360:	f043 0304 	orr.w	r3, r3, #4
 8005364:	6713      	str	r3, [r2, #112]	; 0x70
 8005366:	4b5c      	ldr	r3, [pc, #368]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 8005368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800536a:	4a5b      	ldr	r2, [pc, #364]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 800536c:	f043 0301 	orr.w	r3, r3, #1
 8005370:	6713      	str	r3, [r2, #112]	; 0x70
 8005372:	e00b      	b.n	800538c <HAL_RCC_OscConfig+0x324>
 8005374:	4b58      	ldr	r3, [pc, #352]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 8005376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005378:	4a57      	ldr	r2, [pc, #348]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 800537a:	f023 0301 	bic.w	r3, r3, #1
 800537e:	6713      	str	r3, [r2, #112]	; 0x70
 8005380:	4b55      	ldr	r3, [pc, #340]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 8005382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005384:	4a54      	ldr	r2, [pc, #336]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 8005386:	f023 0304 	bic.w	r3, r3, #4
 800538a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d015      	beq.n	80053c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005394:	f7fc ff4c 	bl	8002230 <HAL_GetTick>
 8005398:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800539a:	e00a      	b.n	80053b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800539c:	f7fc ff48 	bl	8002230 <HAL_GetTick>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	1ad3      	subs	r3, r2, r3
 80053a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d901      	bls.n	80053b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053ae:	2303      	movs	r3, #3
 80053b0:	e0cb      	b.n	800554a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b2:	4b49      	ldr	r3, [pc, #292]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 80053b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b6:	f003 0302 	and.w	r3, r3, #2
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d0ee      	beq.n	800539c <HAL_RCC_OscConfig+0x334>
 80053be:	e014      	b.n	80053ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053c0:	f7fc ff36 	bl	8002230 <HAL_GetTick>
 80053c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053c6:	e00a      	b.n	80053de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053c8:	f7fc ff32 	bl	8002230 <HAL_GetTick>
 80053cc:	4602      	mov	r2, r0
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	1ad3      	subs	r3, r2, r3
 80053d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d901      	bls.n	80053de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80053da:	2303      	movs	r3, #3
 80053dc:	e0b5      	b.n	800554a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053de:	4b3e      	ldr	r3, [pc, #248]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 80053e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e2:	f003 0302 	and.w	r3, r3, #2
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1ee      	bne.n	80053c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053ea:	7dfb      	ldrb	r3, [r7, #23]
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d105      	bne.n	80053fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053f0:	4b39      	ldr	r3, [pc, #228]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	4a38      	ldr	r2, [pc, #224]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 80053f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	699b      	ldr	r3, [r3, #24]
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80a1 	beq.w	8005548 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005406:	4b34      	ldr	r3, [pc, #208]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f003 030c 	and.w	r3, r3, #12
 800540e:	2b08      	cmp	r3, #8
 8005410:	d05c      	beq.n	80054cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	2b02      	cmp	r3, #2
 8005418:	d141      	bne.n	800549e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800541a:	4b31      	ldr	r3, [pc, #196]	; (80054e0 <HAL_RCC_OscConfig+0x478>)
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005420:	f7fc ff06 	bl	8002230 <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005428:	f7fc ff02 	bl	8002230 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e087      	b.n	800554a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800543a:	4b27      	ldr	r3, [pc, #156]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1f0      	bne.n	8005428 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	69da      	ldr	r2, [r3, #28]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a1b      	ldr	r3, [r3, #32]
 800544e:	431a      	orrs	r2, r3
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005454:	019b      	lsls	r3, r3, #6
 8005456:	431a      	orrs	r2, r3
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800545c:	085b      	lsrs	r3, r3, #1
 800545e:	3b01      	subs	r3, #1
 8005460:	041b      	lsls	r3, r3, #16
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	061b      	lsls	r3, r3, #24
 800546a:	491b      	ldr	r1, [pc, #108]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 800546c:	4313      	orrs	r3, r2
 800546e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005470:	4b1b      	ldr	r3, [pc, #108]	; (80054e0 <HAL_RCC_OscConfig+0x478>)
 8005472:	2201      	movs	r2, #1
 8005474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005476:	f7fc fedb 	bl	8002230 <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800547e:	f7fc fed7 	bl	8002230 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e05c      	b.n	800554a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005490:	4b11      	ldr	r3, [pc, #68]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d0f0      	beq.n	800547e <HAL_RCC_OscConfig+0x416>
 800549c:	e054      	b.n	8005548 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800549e:	4b10      	ldr	r3, [pc, #64]	; (80054e0 <HAL_RCC_OscConfig+0x478>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a4:	f7fc fec4 	bl	8002230 <HAL_GetTick>
 80054a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054aa:	e008      	b.n	80054be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054ac:	f7fc fec0 	bl	8002230 <HAL_GetTick>
 80054b0:	4602      	mov	r2, r0
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	1ad3      	subs	r3, r2, r3
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d901      	bls.n	80054be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80054ba:	2303      	movs	r3, #3
 80054bc:	e045      	b.n	800554a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054be:	4b06      	ldr	r3, [pc, #24]	; (80054d8 <HAL_RCC_OscConfig+0x470>)
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1f0      	bne.n	80054ac <HAL_RCC_OscConfig+0x444>
 80054ca:	e03d      	b.n	8005548 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d107      	bne.n	80054e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80054d4:	2301      	movs	r3, #1
 80054d6:	e038      	b.n	800554a <HAL_RCC_OscConfig+0x4e2>
 80054d8:	40023800 	.word	0x40023800
 80054dc:	40007000 	.word	0x40007000
 80054e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054e4:	4b1b      	ldr	r3, [pc, #108]	; (8005554 <HAL_RCC_OscConfig+0x4ec>)
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	699b      	ldr	r3, [r3, #24]
 80054ee:	2b01      	cmp	r3, #1
 80054f0:	d028      	beq.n	8005544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d121      	bne.n	8005544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800550a:	429a      	cmp	r2, r3
 800550c:	d11a      	bne.n	8005544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005514:	4013      	ands	r3, r2
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800551a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800551c:	4293      	cmp	r3, r2
 800551e:	d111      	bne.n	8005544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800552a:	085b      	lsrs	r3, r3, #1
 800552c:	3b01      	subs	r3, #1
 800552e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005530:	429a      	cmp	r2, r3
 8005532:	d107      	bne.n	8005544 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800553e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005540:	429a      	cmp	r2, r3
 8005542:	d001      	beq.n	8005548 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	e000      	b.n	800554a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005548:	2300      	movs	r3, #0
}
 800554a:	4618      	mov	r0, r3
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	40023800 	.word	0x40023800

08005558 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d101      	bne.n	800556c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0cc      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800556c:	4b68      	ldr	r3, [pc, #416]	; (8005710 <HAL_RCC_ClockConfig+0x1b8>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0307 	and.w	r3, r3, #7
 8005574:	683a      	ldr	r2, [r7, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d90c      	bls.n	8005594 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800557a:	4b65      	ldr	r3, [pc, #404]	; (8005710 <HAL_RCC_ClockConfig+0x1b8>)
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005582:	4b63      	ldr	r3, [pc, #396]	; (8005710 <HAL_RCC_ClockConfig+0x1b8>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f003 0307 	and.w	r3, r3, #7
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	429a      	cmp	r2, r3
 800558e:	d001      	beq.n	8005594 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005590:	2301      	movs	r3, #1
 8005592:	e0b8      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0302 	and.w	r3, r3, #2
 800559c:	2b00      	cmp	r3, #0
 800559e:	d020      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0304 	and.w	r3, r3, #4
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055ac:	4b59      	ldr	r3, [pc, #356]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	4a58      	ldr	r2, [pc, #352]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0308 	and.w	r3, r3, #8
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d005      	beq.n	80055d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055c4:	4b53      	ldr	r3, [pc, #332]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	4a52      	ldr	r2, [pc, #328]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055d0:	4b50      	ldr	r3, [pc, #320]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	494d      	ldr	r1, [pc, #308]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d044      	beq.n	8005678 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d107      	bne.n	8005606 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055f6:	4b47      	ldr	r3, [pc, #284]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d119      	bne.n	8005636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e07f      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2b02      	cmp	r3, #2
 800560c:	d003      	beq.n	8005616 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005612:	2b03      	cmp	r3, #3
 8005614:	d107      	bne.n	8005626 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005616:	4b3f      	ldr	r3, [pc, #252]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d109      	bne.n	8005636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e06f      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005626:	4b3b      	ldr	r3, [pc, #236]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 0302 	and.w	r3, r3, #2
 800562e:	2b00      	cmp	r3, #0
 8005630:	d101      	bne.n	8005636 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e067      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005636:	4b37      	ldr	r3, [pc, #220]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	f023 0203 	bic.w	r2, r3, #3
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	685b      	ldr	r3, [r3, #4]
 8005642:	4934      	ldr	r1, [pc, #208]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 8005644:	4313      	orrs	r3, r2
 8005646:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005648:	f7fc fdf2 	bl	8002230 <HAL_GetTick>
 800564c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564e:	e00a      	b.n	8005666 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005650:	f7fc fdee 	bl	8002230 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f241 3288 	movw	r2, #5000	; 0x1388
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e04f      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005666:	4b2b      	ldr	r3, [pc, #172]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 8005668:	689b      	ldr	r3, [r3, #8]
 800566a:	f003 020c 	and.w	r2, r3, #12
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	429a      	cmp	r2, r3
 8005676:	d1eb      	bne.n	8005650 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005678:	4b25      	ldr	r3, [pc, #148]	; (8005710 <HAL_RCC_ClockConfig+0x1b8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f003 0307 	and.w	r3, r3, #7
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	429a      	cmp	r2, r3
 8005684:	d20c      	bcs.n	80056a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005686:	4b22      	ldr	r3, [pc, #136]	; (8005710 <HAL_RCC_ClockConfig+0x1b8>)
 8005688:	683a      	ldr	r2, [r7, #0]
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800568e:	4b20      	ldr	r3, [pc, #128]	; (8005710 <HAL_RCC_ClockConfig+0x1b8>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	429a      	cmp	r2, r3
 800569a:	d001      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e032      	b.n	8005706 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d008      	beq.n	80056be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056ac:	4b19      	ldr	r3, [pc, #100]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80056ae:	689b      	ldr	r3, [r3, #8]
 80056b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	4916      	ldr	r1, [pc, #88]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80056ba:	4313      	orrs	r3, r2
 80056bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f003 0308 	and.w	r3, r3, #8
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d009      	beq.n	80056de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056ca:	4b12      	ldr	r3, [pc, #72]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	691b      	ldr	r3, [r3, #16]
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	490e      	ldr	r1, [pc, #56]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056de:	f000 f821 	bl	8005724 <HAL_RCC_GetSysClockFreq>
 80056e2:	4602      	mov	r2, r0
 80056e4:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <HAL_RCC_ClockConfig+0x1bc>)
 80056e6:	689b      	ldr	r3, [r3, #8]
 80056e8:	091b      	lsrs	r3, r3, #4
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	490a      	ldr	r1, [pc, #40]	; (8005718 <HAL_RCC_ClockConfig+0x1c0>)
 80056f0:	5ccb      	ldrb	r3, [r1, r3]
 80056f2:	fa22 f303 	lsr.w	r3, r2, r3
 80056f6:	4a09      	ldr	r2, [pc, #36]	; (800571c <HAL_RCC_ClockConfig+0x1c4>)
 80056f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056fa:	4b09      	ldr	r3, [pc, #36]	; (8005720 <HAL_RCC_ClockConfig+0x1c8>)
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4618      	mov	r0, r3
 8005700:	f7fc fd52 	bl	80021a8 <HAL_InitTick>

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}
 800570e:	bf00      	nop
 8005710:	40023c00 	.word	0x40023c00
 8005714:	40023800 	.word	0x40023800
 8005718:	0800dc4c 	.word	0x0800dc4c
 800571c:	20000020 	.word	0x20000020
 8005720:	20000024 	.word	0x20000024

08005724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005728:	b090      	sub	sp, #64	; 0x40
 800572a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800572c:	2300      	movs	r3, #0
 800572e:	637b      	str	r3, [r7, #52]	; 0x34
 8005730:	2300      	movs	r3, #0
 8005732:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005734:	2300      	movs	r3, #0
 8005736:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005738:	2300      	movs	r3, #0
 800573a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800573c:	4b59      	ldr	r3, [pc, #356]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800573e:	689b      	ldr	r3, [r3, #8]
 8005740:	f003 030c 	and.w	r3, r3, #12
 8005744:	2b08      	cmp	r3, #8
 8005746:	d00d      	beq.n	8005764 <HAL_RCC_GetSysClockFreq+0x40>
 8005748:	2b08      	cmp	r3, #8
 800574a:	f200 80a1 	bhi.w	8005890 <HAL_RCC_GetSysClockFreq+0x16c>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d002      	beq.n	8005758 <HAL_RCC_GetSysClockFreq+0x34>
 8005752:	2b04      	cmp	r3, #4
 8005754:	d003      	beq.n	800575e <HAL_RCC_GetSysClockFreq+0x3a>
 8005756:	e09b      	b.n	8005890 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005758:	4b53      	ldr	r3, [pc, #332]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800575a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800575c:	e09b      	b.n	8005896 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800575e:	4b53      	ldr	r3, [pc, #332]	; (80058ac <HAL_RCC_GetSysClockFreq+0x188>)
 8005760:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005762:	e098      	b.n	8005896 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005764:	4b4f      	ldr	r3, [pc, #316]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800576c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800576e:	4b4d      	ldr	r3, [pc, #308]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d028      	beq.n	80057cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800577a:	4b4a      	ldr	r3, [pc, #296]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	099b      	lsrs	r3, r3, #6
 8005780:	2200      	movs	r2, #0
 8005782:	623b      	str	r3, [r7, #32]
 8005784:	627a      	str	r2, [r7, #36]	; 0x24
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800578c:	2100      	movs	r1, #0
 800578e:	4b47      	ldr	r3, [pc, #284]	; (80058ac <HAL_RCC_GetSysClockFreq+0x188>)
 8005790:	fb03 f201 	mul.w	r2, r3, r1
 8005794:	2300      	movs	r3, #0
 8005796:	fb00 f303 	mul.w	r3, r0, r3
 800579a:	4413      	add	r3, r2
 800579c:	4a43      	ldr	r2, [pc, #268]	; (80058ac <HAL_RCC_GetSysClockFreq+0x188>)
 800579e:	fba0 1202 	umull	r1, r2, r0, r2
 80057a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057a4:	460a      	mov	r2, r1
 80057a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80057a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057aa:	4413      	add	r3, r2
 80057ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b0:	2200      	movs	r2, #0
 80057b2:	61bb      	str	r3, [r7, #24]
 80057b4:	61fa      	str	r2, [r7, #28]
 80057b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80057be:	f7fb fa4b 	bl	8000c58 <__aeabi_uldivmod>
 80057c2:	4602      	mov	r2, r0
 80057c4:	460b      	mov	r3, r1
 80057c6:	4613      	mov	r3, r2
 80057c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ca:	e053      	b.n	8005874 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057cc:	4b35      	ldr	r3, [pc, #212]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	099b      	lsrs	r3, r3, #6
 80057d2:	2200      	movs	r2, #0
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	617a      	str	r2, [r7, #20]
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80057de:	f04f 0b00 	mov.w	fp, #0
 80057e2:	4652      	mov	r2, sl
 80057e4:	465b      	mov	r3, fp
 80057e6:	f04f 0000 	mov.w	r0, #0
 80057ea:	f04f 0100 	mov.w	r1, #0
 80057ee:	0159      	lsls	r1, r3, #5
 80057f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057f4:	0150      	lsls	r0, r2, #5
 80057f6:	4602      	mov	r2, r0
 80057f8:	460b      	mov	r3, r1
 80057fa:	ebb2 080a 	subs.w	r8, r2, sl
 80057fe:	eb63 090b 	sbc.w	r9, r3, fp
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800580e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005812:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005816:	ebb2 0408 	subs.w	r4, r2, r8
 800581a:	eb63 0509 	sbc.w	r5, r3, r9
 800581e:	f04f 0200 	mov.w	r2, #0
 8005822:	f04f 0300 	mov.w	r3, #0
 8005826:	00eb      	lsls	r3, r5, #3
 8005828:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800582c:	00e2      	lsls	r2, r4, #3
 800582e:	4614      	mov	r4, r2
 8005830:	461d      	mov	r5, r3
 8005832:	eb14 030a 	adds.w	r3, r4, sl
 8005836:	603b      	str	r3, [r7, #0]
 8005838:	eb45 030b 	adc.w	r3, r5, fp
 800583c:	607b      	str	r3, [r7, #4]
 800583e:	f04f 0200 	mov.w	r2, #0
 8005842:	f04f 0300 	mov.w	r3, #0
 8005846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800584a:	4629      	mov	r1, r5
 800584c:	028b      	lsls	r3, r1, #10
 800584e:	4621      	mov	r1, r4
 8005850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005854:	4621      	mov	r1, r4
 8005856:	028a      	lsls	r2, r1, #10
 8005858:	4610      	mov	r0, r2
 800585a:	4619      	mov	r1, r3
 800585c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585e:	2200      	movs	r2, #0
 8005860:	60bb      	str	r3, [r7, #8]
 8005862:	60fa      	str	r2, [r7, #12]
 8005864:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005868:	f7fb f9f6 	bl	8000c58 <__aeabi_uldivmod>
 800586c:	4602      	mov	r2, r0
 800586e:	460b      	mov	r3, r1
 8005870:	4613      	mov	r3, r2
 8005872:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005874:	4b0b      	ldr	r3, [pc, #44]	; (80058a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	0c1b      	lsrs	r3, r3, #16
 800587a:	f003 0303 	and.w	r3, r3, #3
 800587e:	3301      	adds	r3, #1
 8005880:	005b      	lsls	r3, r3, #1
 8005882:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005884:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	fbb2 f3f3 	udiv	r3, r2, r3
 800588c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800588e:	e002      	b.n	8005896 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8005892:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005896:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005898:	4618      	mov	r0, r3
 800589a:	3740      	adds	r7, #64	; 0x40
 800589c:	46bd      	mov	sp, r7
 800589e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058a2:	bf00      	nop
 80058a4:	40023800 	.word	0x40023800
 80058a8:	00f42400 	.word	0x00f42400
 80058ac:	017d7840 	.word	0x017d7840

080058b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058b0:	b480      	push	{r7}
 80058b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058b4:	4b03      	ldr	r3, [pc, #12]	; (80058c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80058b6:	681b      	ldr	r3, [r3, #0]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20000020 	.word	0x20000020

080058c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058cc:	f7ff fff0 	bl	80058b0 <HAL_RCC_GetHCLKFreq>
 80058d0:	4602      	mov	r2, r0
 80058d2:	4b05      	ldr	r3, [pc, #20]	; (80058e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	0a9b      	lsrs	r3, r3, #10
 80058d8:	f003 0307 	and.w	r3, r3, #7
 80058dc:	4903      	ldr	r1, [pc, #12]	; (80058ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80058de:	5ccb      	ldrb	r3, [r1, r3]
 80058e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	40023800 	.word	0x40023800
 80058ec:	0800dc5c 	.word	0x0800dc5c

080058f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b082      	sub	sp, #8
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d101      	bne.n	8005902 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058fe:	2301      	movs	r3, #1
 8005900:	e041      	b.n	8005986 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f7fc fb82 	bl	8002020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2202      	movs	r2, #2
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681a      	ldr	r2, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	3304      	adds	r3, #4
 800592c:	4619      	mov	r1, r3
 800592e:	4610      	mov	r0, r2
 8005930:	f000 fc54 	bl	80061dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2201      	movs	r2, #1
 8005940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2201      	movs	r2, #1
 8005950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2201      	movs	r2, #1
 8005958:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2201      	movs	r2, #1
 8005968:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2201      	movs	r2, #1
 8005978:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005984:	2300      	movs	r3, #0
}
 8005986:	4618      	mov	r0, r3
 8005988:	3708      	adds	r7, #8
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
	...

08005990 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005990:	b480      	push	{r7}
 8005992:	b085      	sub	sp, #20
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800599e:	b2db      	uxtb	r3, r3
 80059a0:	2b01      	cmp	r3, #1
 80059a2:	d001      	beq.n	80059a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	e044      	b.n	8005a32 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	68da      	ldr	r2, [r3, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	f042 0201 	orr.w	r2, r2, #1
 80059be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1e      	ldr	r2, [pc, #120]	; (8005a40 <HAL_TIM_Base_Start_IT+0xb0>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d018      	beq.n	80059fc <HAL_TIM_Base_Start_IT+0x6c>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059d2:	d013      	beq.n	80059fc <HAL_TIM_Base_Start_IT+0x6c>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1a      	ldr	r2, [pc, #104]	; (8005a44 <HAL_TIM_Base_Start_IT+0xb4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00e      	beq.n	80059fc <HAL_TIM_Base_Start_IT+0x6c>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a19      	ldr	r2, [pc, #100]	; (8005a48 <HAL_TIM_Base_Start_IT+0xb8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d009      	beq.n	80059fc <HAL_TIM_Base_Start_IT+0x6c>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <HAL_TIM_Base_Start_IT+0xbc>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <HAL_TIM_Base_Start_IT+0x6c>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a16      	ldr	r2, [pc, #88]	; (8005a50 <HAL_TIM_Base_Start_IT+0xc0>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d111      	bne.n	8005a20 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	f003 0307 	and.w	r3, r3, #7
 8005a06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	2b06      	cmp	r3, #6
 8005a0c:	d010      	beq.n	8005a30 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f042 0201 	orr.w	r2, r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a1e:	e007      	b.n	8005a30 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f042 0201 	orr.w	r2, r2, #1
 8005a2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40010000 	.word	0x40010000
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800
 8005a4c:	40000c00 	.word	0x40000c00
 8005a50:	40014000 	.word	0x40014000

08005a54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d101      	bne.n	8005a66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005a62:	2301      	movs	r3, #1
 8005a64:	e041      	b.n	8005aea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d106      	bne.n	8005a80 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	f000 f839 	bl	8005af2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2202      	movs	r2, #2
 8005a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	3304      	adds	r3, #4
 8005a90:	4619      	mov	r1, r3
 8005a92:	4610      	mov	r0, r2
 8005a94:	f000 fba2 	bl	80061dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2201      	movs	r2, #1
 8005aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2201      	movs	r2, #1
 8005abc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	2201      	movs	r2, #1
 8005adc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2201      	movs	r2, #1
 8005ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3708      	adds	r7, #8
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005af2:	b480      	push	{r7}
 8005af4:	b083      	sub	sp, #12
 8005af6:	af00      	add	r7, sp, #0
 8005af8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005afa:	bf00      	nop
 8005afc:	370c      	adds	r7, #12
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
	...

08005b08 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d109      	bne.n	8005b2c <HAL_TIM_PWM_Start+0x24>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	bf14      	ite	ne
 8005b24:	2301      	movne	r3, #1
 8005b26:	2300      	moveq	r3, #0
 8005b28:	b2db      	uxtb	r3, r3
 8005b2a:	e022      	b.n	8005b72 <HAL_TIM_PWM_Start+0x6a>
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d109      	bne.n	8005b46 <HAL_TIM_PWM_Start+0x3e>
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005b38:	b2db      	uxtb	r3, r3
 8005b3a:	2b01      	cmp	r3, #1
 8005b3c:	bf14      	ite	ne
 8005b3e:	2301      	movne	r3, #1
 8005b40:	2300      	moveq	r3, #0
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	e015      	b.n	8005b72 <HAL_TIM_PWM_Start+0x6a>
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	2b08      	cmp	r3, #8
 8005b4a:	d109      	bne.n	8005b60 <HAL_TIM_PWM_Start+0x58>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b52:	b2db      	uxtb	r3, r3
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	bf14      	ite	ne
 8005b58:	2301      	movne	r3, #1
 8005b5a:	2300      	moveq	r3, #0
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	e008      	b.n	8005b72 <HAL_TIM_PWM_Start+0x6a>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	bf14      	ite	ne
 8005b6c:	2301      	movne	r3, #1
 8005b6e:	2300      	moveq	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d001      	beq.n	8005b7a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005b76:	2301      	movs	r3, #1
 8005b78:	e068      	b.n	8005c4c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d104      	bne.n	8005b8a <HAL_TIM_PWM_Start+0x82>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2202      	movs	r2, #2
 8005b84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b88:	e013      	b.n	8005bb2 <HAL_TIM_PWM_Start+0xaa>
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	2b04      	cmp	r3, #4
 8005b8e:	d104      	bne.n	8005b9a <HAL_TIM_PWM_Start+0x92>
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2202      	movs	r2, #2
 8005b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b98:	e00b      	b.n	8005bb2 <HAL_TIM_PWM_Start+0xaa>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	2b08      	cmp	r3, #8
 8005b9e:	d104      	bne.n	8005baa <HAL_TIM_PWM_Start+0xa2>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2202      	movs	r2, #2
 8005ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ba8:	e003      	b.n	8005bb2 <HAL_TIM_PWM_Start+0xaa>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2202      	movs	r2, #2
 8005bae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	6839      	ldr	r1, [r7, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 fdb4 	bl	8006728 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4a23      	ldr	r2, [pc, #140]	; (8005c54 <HAL_TIM_PWM_Start+0x14c>)
 8005bc6:	4293      	cmp	r3, r2
 8005bc8:	d107      	bne.n	8005bda <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005bd8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a1d      	ldr	r2, [pc, #116]	; (8005c54 <HAL_TIM_PWM_Start+0x14c>)
 8005be0:	4293      	cmp	r3, r2
 8005be2:	d018      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x10e>
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bec:	d013      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x10e>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	4a19      	ldr	r2, [pc, #100]	; (8005c58 <HAL_TIM_PWM_Start+0x150>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d00e      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x10e>
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	4a17      	ldr	r2, [pc, #92]	; (8005c5c <HAL_TIM_PWM_Start+0x154>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d009      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x10e>
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a16      	ldr	r2, [pc, #88]	; (8005c60 <HAL_TIM_PWM_Start+0x158>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d004      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x10e>
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a14      	ldr	r2, [pc, #80]	; (8005c64 <HAL_TIM_PWM_Start+0x15c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d111      	bne.n	8005c3a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	689b      	ldr	r3, [r3, #8]
 8005c1c:	f003 0307 	and.w	r3, r3, #7
 8005c20:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2b06      	cmp	r3, #6
 8005c26:	d010      	beq.n	8005c4a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	f042 0201 	orr.w	r2, r2, #1
 8005c36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c38:	e007      	b.n	8005c4a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f042 0201 	orr.w	r2, r2, #1
 8005c48:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}
 8005c54:	40010000 	.word	0x40010000
 8005c58:	40000400 	.word	0x40000400
 8005c5c:	40000800 	.word	0x40000800
 8005c60:	40000c00 	.word	0x40000c00
 8005c64:	40014000 	.word	0x40014000

08005c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	691b      	ldr	r3, [r3, #16]
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b02      	cmp	r3, #2
 8005c7c:	d122      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b02      	cmp	r3, #2
 8005c8a:	d11b      	bne.n	8005cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f06f 0202 	mvn.w	r2, #2
 8005c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	699b      	ldr	r3, [r3, #24]
 8005ca2:	f003 0303 	and.w	r3, r3, #3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d003      	beq.n	8005cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fa77 	bl	800619e <HAL_TIM_IC_CaptureCallback>
 8005cb0:	e005      	b.n	8005cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 fa69 	bl	800618a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fa7a 	bl	80061b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	691b      	ldr	r3, [r3, #16]
 8005cca:	f003 0304 	and.w	r3, r3, #4
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d122      	bne.n	8005d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	f003 0304 	and.w	r3, r3, #4
 8005cdc:	2b04      	cmp	r3, #4
 8005cde:	d11b      	bne.n	8005d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f06f 0204 	mvn.w	r2, #4
 8005ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2202      	movs	r2, #2
 8005cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d003      	beq.n	8005d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 fa4d 	bl	800619e <HAL_TIM_IC_CaptureCallback>
 8005d04:	e005      	b.n	8005d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 fa3f 	bl	800618a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fa50 	bl	80061b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	f003 0308 	and.w	r3, r3, #8
 8005d22:	2b08      	cmp	r3, #8
 8005d24:	d122      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68db      	ldr	r3, [r3, #12]
 8005d2c:	f003 0308 	and.w	r3, r3, #8
 8005d30:	2b08      	cmp	r3, #8
 8005d32:	d11b      	bne.n	8005d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f06f 0208 	mvn.w	r2, #8
 8005d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2204      	movs	r2, #4
 8005d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69db      	ldr	r3, [r3, #28]
 8005d4a:	f003 0303 	and.w	r3, r3, #3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d003      	beq.n	8005d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 fa23 	bl	800619e <HAL_TIM_IC_CaptureCallback>
 8005d58:	e005      	b.n	8005d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f000 fa15 	bl	800618a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fa26 	bl	80061b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 0310 	and.w	r3, r3, #16
 8005d76:	2b10      	cmp	r3, #16
 8005d78:	d122      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	68db      	ldr	r3, [r3, #12]
 8005d80:	f003 0310 	and.w	r3, r3, #16
 8005d84:	2b10      	cmp	r3, #16
 8005d86:	d11b      	bne.n	8005dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f06f 0210 	mvn.w	r2, #16
 8005d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2208      	movs	r2, #8
 8005d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	69db      	ldr	r3, [r3, #28]
 8005d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d003      	beq.n	8005dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f9f9 	bl	800619e <HAL_TIM_IC_CaptureCallback>
 8005dac:	e005      	b.n	8005dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f9eb 	bl	800618a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f9fc 	bl	80061b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d10e      	bne.n	8005dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f003 0301 	and.w	r3, r3, #1
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d107      	bne.n	8005dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f06f 0201 	mvn.w	r2, #1
 8005de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7fb fc3a 	bl	8001660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005df6:	2b80      	cmp	r3, #128	; 0x80
 8005df8:	d10e      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68db      	ldr	r3, [r3, #12]
 8005e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e04:	2b80      	cmp	r3, #128	; 0x80
 8005e06:	d107      	bne.n	8005e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fcb7 	bl	8006786 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e22:	2b40      	cmp	r3, #64	; 0x40
 8005e24:	d10e      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e30:	2b40      	cmp	r3, #64	; 0x40
 8005e32:	d107      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f9c1 	bl	80061c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0320 	and.w	r3, r3, #32
 8005e4e:	2b20      	cmp	r3, #32
 8005e50:	d10e      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0320 	and.w	r3, r3, #32
 8005e5c:	2b20      	cmp	r3, #32
 8005e5e:	d107      	bne.n	8005e70 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0220 	mvn.w	r2, #32
 8005e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fc81 	bl	8006772 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005e70:	bf00      	nop
 8005e72:	3708      	adds	r7, #8
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b086      	sub	sp, #24
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005e84:	2300      	movs	r3, #0
 8005e86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d101      	bne.n	8005e96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005e92:	2302      	movs	r3, #2
 8005e94:	e0ae      	b.n	8005ff4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2b0c      	cmp	r3, #12
 8005ea2:	f200 809f 	bhi.w	8005fe4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ea6:	a201      	add	r2, pc, #4	; (adr r2, 8005eac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eac:	08005ee1 	.word	0x08005ee1
 8005eb0:	08005fe5 	.word	0x08005fe5
 8005eb4:	08005fe5 	.word	0x08005fe5
 8005eb8:	08005fe5 	.word	0x08005fe5
 8005ebc:	08005f21 	.word	0x08005f21
 8005ec0:	08005fe5 	.word	0x08005fe5
 8005ec4:	08005fe5 	.word	0x08005fe5
 8005ec8:	08005fe5 	.word	0x08005fe5
 8005ecc:	08005f63 	.word	0x08005f63
 8005ed0:	08005fe5 	.word	0x08005fe5
 8005ed4:	08005fe5 	.word	0x08005fe5
 8005ed8:	08005fe5 	.word	0x08005fe5
 8005edc:	08005fa3 	.word	0x08005fa3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68b9      	ldr	r1, [r7, #8]
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	f000 f9f8 	bl	80062dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	699a      	ldr	r2, [r3, #24]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f042 0208 	orr.w	r2, r2, #8
 8005efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	699a      	ldr	r2, [r3, #24]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 0204 	bic.w	r2, r2, #4
 8005f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6999      	ldr	r1, [r3, #24]
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	691a      	ldr	r2, [r3, #16]
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	619a      	str	r2, [r3, #24]
      break;
 8005f1e:	e064      	b.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	4618      	mov	r0, r3
 8005f28:	f000 fa3e 	bl	80063a8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	699a      	ldr	r2, [r3, #24]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005f3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	699a      	ldr	r2, [r3, #24]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	6999      	ldr	r1, [r3, #24]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	691b      	ldr	r3, [r3, #16]
 8005f56:	021a      	lsls	r2, r3, #8
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	619a      	str	r2, [r3, #24]
      break;
 8005f60:	e043      	b.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	68b9      	ldr	r1, [r7, #8]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 fa89 	bl	8006480 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	69da      	ldr	r2, [r3, #28]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f042 0208 	orr.w	r2, r2, #8
 8005f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	69da      	ldr	r2, [r3, #28]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0204 	bic.w	r2, r2, #4
 8005f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	69d9      	ldr	r1, [r3, #28]
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	691a      	ldr	r2, [r3, #16]
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	61da      	str	r2, [r3, #28]
      break;
 8005fa0:	e023      	b.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f000 fad3 	bl	8006554 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	69da      	ldr	r2, [r3, #28]
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005fbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	69da      	ldr	r2, [r3, #28]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005fcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69d9      	ldr	r1, [r3, #28]
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	021a      	lsls	r2, r3, #8
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	430a      	orrs	r2, r1
 8005fe0:	61da      	str	r2, [r3, #28]
      break;
 8005fe2:	e002      	b.n	8005fea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	75fb      	strb	r3, [r7, #23]
      break;
 8005fe8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ff2:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3718      	adds	r7, #24
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
 8006004:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006006:	2300      	movs	r3, #0
 8006008:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006010:	2b01      	cmp	r3, #1
 8006012:	d101      	bne.n	8006018 <HAL_TIM_ConfigClockSource+0x1c>
 8006014:	2302      	movs	r3, #2
 8006016:	e0b4      	b.n	8006182 <HAL_TIM_ConfigClockSource+0x186>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2202      	movs	r2, #2
 8006024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	689b      	ldr	r3, [r3, #8]
 800602e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006030:	68bb      	ldr	r3, [r7, #8]
 8006032:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800603e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68ba      	ldr	r2, [r7, #8]
 8006046:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006050:	d03e      	beq.n	80060d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006052:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006056:	f200 8087 	bhi.w	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 800605a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800605e:	f000 8086 	beq.w	800616e <HAL_TIM_ConfigClockSource+0x172>
 8006062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006066:	d87f      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006068:	2b70      	cmp	r3, #112	; 0x70
 800606a:	d01a      	beq.n	80060a2 <HAL_TIM_ConfigClockSource+0xa6>
 800606c:	2b70      	cmp	r3, #112	; 0x70
 800606e:	d87b      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006070:	2b60      	cmp	r3, #96	; 0x60
 8006072:	d050      	beq.n	8006116 <HAL_TIM_ConfigClockSource+0x11a>
 8006074:	2b60      	cmp	r3, #96	; 0x60
 8006076:	d877      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006078:	2b50      	cmp	r3, #80	; 0x50
 800607a:	d03c      	beq.n	80060f6 <HAL_TIM_ConfigClockSource+0xfa>
 800607c:	2b50      	cmp	r3, #80	; 0x50
 800607e:	d873      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006080:	2b40      	cmp	r3, #64	; 0x40
 8006082:	d058      	beq.n	8006136 <HAL_TIM_ConfigClockSource+0x13a>
 8006084:	2b40      	cmp	r3, #64	; 0x40
 8006086:	d86f      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006088:	2b30      	cmp	r3, #48	; 0x30
 800608a:	d064      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0x15a>
 800608c:	2b30      	cmp	r3, #48	; 0x30
 800608e:	d86b      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006090:	2b20      	cmp	r3, #32
 8006092:	d060      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0x15a>
 8006094:	2b20      	cmp	r3, #32
 8006096:	d867      	bhi.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
 8006098:	2b00      	cmp	r3, #0
 800609a:	d05c      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0x15a>
 800609c:	2b10      	cmp	r3, #16
 800609e:	d05a      	beq.n	8006156 <HAL_TIM_ConfigClockSource+0x15a>
 80060a0:	e062      	b.n	8006168 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6818      	ldr	r0, [r3, #0]
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	6899      	ldr	r1, [r3, #8]
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	685a      	ldr	r2, [r3, #4]
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	68db      	ldr	r3, [r3, #12]
 80060b2:	f000 fb19 	bl	80066e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80060c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	609a      	str	r2, [r3, #8]
      break;
 80060ce:	e04f      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6818      	ldr	r0, [r3, #0]
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	6899      	ldr	r1, [r3, #8]
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685a      	ldr	r2, [r3, #4]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	f000 fb02 	bl	80066e8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689a      	ldr	r2, [r3, #8]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80060f2:	609a      	str	r2, [r3, #8]
      break;
 80060f4:	e03c      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6818      	ldr	r0, [r3, #0]
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	6859      	ldr	r1, [r3, #4]
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	461a      	mov	r2, r3
 8006104:	f000 fa76 	bl	80065f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2150      	movs	r1, #80	; 0x50
 800610e:	4618      	mov	r0, r3
 8006110:	f000 facf 	bl	80066b2 <TIM_ITRx_SetConfig>
      break;
 8006114:	e02c      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6818      	ldr	r0, [r3, #0]
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	6859      	ldr	r1, [r3, #4]
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	68db      	ldr	r3, [r3, #12]
 8006122:	461a      	mov	r2, r3
 8006124:	f000 fa95 	bl	8006652 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	2160      	movs	r1, #96	; 0x60
 800612e:	4618      	mov	r0, r3
 8006130:	f000 fabf 	bl	80066b2 <TIM_ITRx_SetConfig>
      break;
 8006134:	e01c      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6818      	ldr	r0, [r3, #0]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	6859      	ldr	r1, [r3, #4]
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	68db      	ldr	r3, [r3, #12]
 8006142:	461a      	mov	r2, r3
 8006144:	f000 fa56 	bl	80065f4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2140      	movs	r1, #64	; 0x40
 800614e:	4618      	mov	r0, r3
 8006150:	f000 faaf 	bl	80066b2 <TIM_ITRx_SetConfig>
      break;
 8006154:	e00c      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	4619      	mov	r1, r3
 8006160:	4610      	mov	r0, r2
 8006162:	f000 faa6 	bl	80066b2 <TIM_ITRx_SetConfig>
      break;
 8006166:	e003      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	73fb      	strb	r3, [r7, #15]
      break;
 800616c:	e000      	b.n	8006170 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800616e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006180:	7bfb      	ldrb	r3, [r7, #15]
}
 8006182:	4618      	mov	r0, r3
 8006184:	3710      	adds	r7, #16
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800618a:	b480      	push	{r7}
 800618c:	b083      	sub	sp, #12
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800619e:	b480      	push	{r7}
 80061a0:	b083      	sub	sp, #12
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80061a6:	bf00      	nop
 80061a8:	370c      	adds	r7, #12
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr

080061b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061b2:	b480      	push	{r7}
 80061b4:	b083      	sub	sp, #12
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr

080061c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b083      	sub	sp, #12
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061ce:	bf00      	nop
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d8:	4770      	bx	lr
	...

080061dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	4a34      	ldr	r2, [pc, #208]	; (80062c0 <TIM_Base_SetConfig+0xe4>)
 80061f0:	4293      	cmp	r3, r2
 80061f2:	d00f      	beq.n	8006214 <TIM_Base_SetConfig+0x38>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061fa:	d00b      	beq.n	8006214 <TIM_Base_SetConfig+0x38>
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	4a31      	ldr	r2, [pc, #196]	; (80062c4 <TIM_Base_SetConfig+0xe8>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d007      	beq.n	8006214 <TIM_Base_SetConfig+0x38>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	4a30      	ldr	r2, [pc, #192]	; (80062c8 <TIM_Base_SetConfig+0xec>)
 8006208:	4293      	cmp	r3, r2
 800620a:	d003      	beq.n	8006214 <TIM_Base_SetConfig+0x38>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	4a2f      	ldr	r2, [pc, #188]	; (80062cc <TIM_Base_SetConfig+0xf0>)
 8006210:	4293      	cmp	r3, r2
 8006212:	d108      	bne.n	8006226 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800621a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	68fa      	ldr	r2, [r7, #12]
 8006222:	4313      	orrs	r3, r2
 8006224:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	4a25      	ldr	r2, [pc, #148]	; (80062c0 <TIM_Base_SetConfig+0xe4>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d01b      	beq.n	8006266 <TIM_Base_SetConfig+0x8a>
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006234:	d017      	beq.n	8006266 <TIM_Base_SetConfig+0x8a>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	4a22      	ldr	r2, [pc, #136]	; (80062c4 <TIM_Base_SetConfig+0xe8>)
 800623a:	4293      	cmp	r3, r2
 800623c:	d013      	beq.n	8006266 <TIM_Base_SetConfig+0x8a>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	4a21      	ldr	r2, [pc, #132]	; (80062c8 <TIM_Base_SetConfig+0xec>)
 8006242:	4293      	cmp	r3, r2
 8006244:	d00f      	beq.n	8006266 <TIM_Base_SetConfig+0x8a>
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	4a20      	ldr	r2, [pc, #128]	; (80062cc <TIM_Base_SetConfig+0xf0>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d00b      	beq.n	8006266 <TIM_Base_SetConfig+0x8a>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	4a1f      	ldr	r2, [pc, #124]	; (80062d0 <TIM_Base_SetConfig+0xf4>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d007      	beq.n	8006266 <TIM_Base_SetConfig+0x8a>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a1e      	ldr	r2, [pc, #120]	; (80062d4 <TIM_Base_SetConfig+0xf8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d003      	beq.n	8006266 <TIM_Base_SetConfig+0x8a>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	4a1d      	ldr	r2, [pc, #116]	; (80062d8 <TIM_Base_SetConfig+0xfc>)
 8006262:	4293      	cmp	r3, r2
 8006264:	d108      	bne.n	8006278 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800626c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	68db      	ldr	r3, [r3, #12]
 8006272:	68fa      	ldr	r2, [r7, #12]
 8006274:	4313      	orrs	r3, r2
 8006276:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	695b      	ldr	r3, [r3, #20]
 8006282:	4313      	orrs	r3, r2
 8006284:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	689a      	ldr	r2, [r3, #8]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a08      	ldr	r2, [pc, #32]	; (80062c0 <TIM_Base_SetConfig+0xe4>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d103      	bne.n	80062ac <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	691a      	ldr	r2, [r3, #16]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2201      	movs	r2, #1
 80062b0:	615a      	str	r2, [r3, #20]
}
 80062b2:	bf00      	nop
 80062b4:	3714      	adds	r7, #20
 80062b6:	46bd      	mov	sp, r7
 80062b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062bc:	4770      	bx	lr
 80062be:	bf00      	nop
 80062c0:	40010000 	.word	0x40010000
 80062c4:	40000400 	.word	0x40000400
 80062c8:	40000800 	.word	0x40000800
 80062cc:	40000c00 	.word	0x40000c00
 80062d0:	40014000 	.word	0x40014000
 80062d4:	40014400 	.word	0x40014400
 80062d8:	40014800 	.word	0x40014800

080062dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062dc:	b480      	push	{r7}
 80062de:	b087      	sub	sp, #28
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	f023 0201 	bic.w	r2, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6a1b      	ldr	r3, [r3, #32]
 80062f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	685b      	ldr	r3, [r3, #4]
 80062fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	699b      	ldr	r3, [r3, #24]
 8006302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800630a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f023 0303 	bic.w	r3, r3, #3
 8006312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68fa      	ldr	r2, [r7, #12]
 800631a:	4313      	orrs	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	f023 0302 	bic.w	r3, r3, #2
 8006324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	689b      	ldr	r3, [r3, #8]
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	4313      	orrs	r3, r2
 800632e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	4a1c      	ldr	r2, [pc, #112]	; (80063a4 <TIM_OC1_SetConfig+0xc8>)
 8006334:	4293      	cmp	r3, r2
 8006336:	d10c      	bne.n	8006352 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006338:	697b      	ldr	r3, [r7, #20]
 800633a:	f023 0308 	bic.w	r3, r3, #8
 800633e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	4313      	orrs	r3, r2
 8006348:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	f023 0304 	bic.w	r3, r3, #4
 8006350:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a13      	ldr	r2, [pc, #76]	; (80063a4 <TIM_OC1_SetConfig+0xc8>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d111      	bne.n	800637e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006360:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006362:	693b      	ldr	r3, [r7, #16]
 8006364:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006368:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	4313      	orrs	r3, r2
 8006372:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	699b      	ldr	r3, [r3, #24]
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	4313      	orrs	r3, r2
 800637c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	621a      	str	r2, [r3, #32]
}
 8006398:	bf00      	nop
 800639a:	371c      	adds	r7, #28
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	40010000 	.word	0x40010000

080063a8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	f023 0210 	bic.w	r2, r3, #16
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	699b      	ldr	r3, [r3, #24]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	f023 0320 	bic.w	r3, r3, #32
 80063f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	011b      	lsls	r3, r3, #4
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a1e      	ldr	r2, [pc, #120]	; (800647c <TIM_OC2_SetConfig+0xd4>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d10d      	bne.n	8006424 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800640e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	68db      	ldr	r3, [r3, #12]
 8006414:	011b      	lsls	r3, r3, #4
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006422:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	4a15      	ldr	r2, [pc, #84]	; (800647c <TIM_OC2_SetConfig+0xd4>)
 8006428:	4293      	cmp	r3, r2
 800642a:	d113      	bne.n	8006454 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800643a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	695b      	ldr	r3, [r3, #20]
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	693a      	ldr	r2, [r7, #16]
 8006444:	4313      	orrs	r3, r2
 8006446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	699b      	ldr	r3, [r3, #24]
 800644c:	009b      	lsls	r3, r3, #2
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	68fa      	ldr	r2, [r7, #12]
 800645e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	685a      	ldr	r2, [r3, #4]
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	697a      	ldr	r2, [r7, #20]
 800646c:	621a      	str	r2, [r3, #32]
}
 800646e:	bf00      	nop
 8006470:	371c      	adds	r7, #28
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop
 800647c:	40010000 	.word	0x40010000

08006480 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006480:	b480      	push	{r7}
 8006482:	b087      	sub	sp, #28
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
 8006488:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6a1b      	ldr	r3, [r3, #32]
 800649a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	69db      	ldr	r3, [r3, #28]
 80064a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	f023 0303 	bic.w	r3, r3, #3
 80064b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68fa      	ldr	r2, [r7, #12]
 80064be:	4313      	orrs	r3, r2
 80064c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80064c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	689b      	ldr	r3, [r3, #8]
 80064ce:	021b      	lsls	r3, r3, #8
 80064d0:	697a      	ldr	r2, [r7, #20]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a1d      	ldr	r2, [pc, #116]	; (8006550 <TIM_OC3_SetConfig+0xd0>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d10d      	bne.n	80064fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80064e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68db      	ldr	r3, [r3, #12]
 80064ea:	021b      	lsls	r3, r3, #8
 80064ec:	697a      	ldr	r2, [r7, #20]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80064f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	4a14      	ldr	r2, [pc, #80]	; (8006550 <TIM_OC3_SetConfig+0xd0>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d113      	bne.n	800652a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006508:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006510:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	011b      	lsls	r3, r3, #4
 8006518:	693a      	ldr	r2, [r7, #16]
 800651a:	4313      	orrs	r3, r2
 800651c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	011b      	lsls	r3, r3, #4
 8006524:	693a      	ldr	r2, [r7, #16]
 8006526:	4313      	orrs	r3, r2
 8006528:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	693a      	ldr	r2, [r7, #16]
 800652e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	685a      	ldr	r2, [r3, #4]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	621a      	str	r2, [r3, #32]
}
 8006544:	bf00      	nop
 8006546:	371c      	adds	r7, #28
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	40010000 	.word	0x40010000

08006554 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006554:	b480      	push	{r7}
 8006556:	b087      	sub	sp, #28
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6a1b      	ldr	r3, [r3, #32]
 8006562:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6a1b      	ldr	r3, [r3, #32]
 800656e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	69db      	ldr	r3, [r3, #28]
 800657a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800658a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	021b      	lsls	r3, r3, #8
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	4313      	orrs	r3, r2
 8006596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800659e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	689b      	ldr	r3, [r3, #8]
 80065a4:	031b      	lsls	r3, r3, #12
 80065a6:	693a      	ldr	r2, [r7, #16]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a10      	ldr	r2, [pc, #64]	; (80065f0 <TIM_OC4_SetConfig+0x9c>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d109      	bne.n	80065c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80065ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	695b      	ldr	r3, [r3, #20]
 80065c0:	019b      	lsls	r3, r3, #6
 80065c2:	697a      	ldr	r2, [r7, #20]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	68fa      	ldr	r2, [r7, #12]
 80065d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80065d4:	683b      	ldr	r3, [r7, #0]
 80065d6:	685a      	ldr	r2, [r3, #4]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	693a      	ldr	r2, [r7, #16]
 80065e0:	621a      	str	r2, [r3, #32]
}
 80065e2:	bf00      	nop
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ec:	4770      	bx	lr
 80065ee:	bf00      	nop
 80065f0:	40010000 	.word	0x40010000

080065f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065f4:	b480      	push	{r7}
 80065f6:	b087      	sub	sp, #28
 80065f8:	af00      	add	r7, sp, #0
 80065fa:	60f8      	str	r0, [r7, #12]
 80065fc:	60b9      	str	r1, [r7, #8]
 80065fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6a1b      	ldr	r3, [r3, #32]
 8006604:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	f023 0201 	bic.w	r2, r3, #1
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	699b      	ldr	r3, [r3, #24]
 8006616:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800661e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	011b      	lsls	r3, r3, #4
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	4313      	orrs	r3, r2
 8006628:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	f023 030a 	bic.w	r3, r3, #10
 8006630:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006632:	697a      	ldr	r2, [r7, #20]
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	4313      	orrs	r3, r2
 8006638:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	621a      	str	r2, [r3, #32]
}
 8006646:	bf00      	nop
 8006648:	371c      	adds	r7, #28
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr

08006652 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006652:	b480      	push	{r7}
 8006654:	b087      	sub	sp, #28
 8006656:	af00      	add	r7, sp, #0
 8006658:	60f8      	str	r0, [r7, #12]
 800665a:	60b9      	str	r1, [r7, #8]
 800665c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	6a1b      	ldr	r3, [r3, #32]
 8006662:	f023 0210 	bic.w	r2, r3, #16
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	699b      	ldr	r3, [r3, #24]
 800666e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	6a1b      	ldr	r3, [r3, #32]
 8006674:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800667c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	031b      	lsls	r3, r3, #12
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	4313      	orrs	r3, r2
 8006686:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800668e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	011b      	lsls	r3, r3, #4
 8006694:	693a      	ldr	r2, [r7, #16]
 8006696:	4313      	orrs	r3, r2
 8006698:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	697a      	ldr	r2, [r7, #20]
 800669e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	621a      	str	r2, [r3, #32]
}
 80066a6:	bf00      	nop
 80066a8:	371c      	adds	r7, #28
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr

080066b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066b2:	b480      	push	{r7}
 80066b4:	b085      	sub	sp, #20
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	6078      	str	r0, [r7, #4]
 80066ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	f043 0307 	orr.w	r3, r3, #7
 80066d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	68fa      	ldr	r2, [r7, #12]
 80066da:	609a      	str	r2, [r3, #8]
}
 80066dc:	bf00      	nop
 80066de:	3714      	adds	r7, #20
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr

080066e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b087      	sub	sp, #28
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	60f8      	str	r0, [r7, #12]
 80066f0:	60b9      	str	r1, [r7, #8]
 80066f2:	607a      	str	r2, [r7, #4]
 80066f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066fc:	697b      	ldr	r3, [r7, #20]
 80066fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006702:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	021a      	lsls	r2, r3, #8
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	431a      	orrs	r2, r3
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4313      	orrs	r3, r2
 8006710:	697a      	ldr	r2, [r7, #20]
 8006712:	4313      	orrs	r3, r2
 8006714:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	609a      	str	r2, [r3, #8]
}
 800671c:	bf00      	nop
 800671e:	371c      	adds	r7, #28
 8006720:	46bd      	mov	sp, r7
 8006722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006726:	4770      	bx	lr

08006728 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006728:	b480      	push	{r7}
 800672a:	b087      	sub	sp, #28
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	f003 031f 	and.w	r3, r3, #31
 800673a:	2201      	movs	r2, #1
 800673c:	fa02 f303 	lsl.w	r3, r2, r3
 8006740:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	6a1a      	ldr	r2, [r3, #32]
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	43db      	mvns	r3, r3
 800674a:	401a      	ands	r2, r3
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6a1a      	ldr	r2, [r3, #32]
 8006754:	68bb      	ldr	r3, [r7, #8]
 8006756:	f003 031f 	and.w	r3, r3, #31
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	fa01 f303 	lsl.w	r3, r1, r3
 8006760:	431a      	orrs	r2, r3
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	621a      	str	r2, [r3, #32]
}
 8006766:	bf00      	nop
 8006768:	371c      	adds	r7, #28
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006772:	b480      	push	{r7}
 8006774:	b083      	sub	sp, #12
 8006776:	af00      	add	r7, sp, #0
 8006778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800677a:	bf00      	nop
 800677c:	370c      	adds	r7, #12
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800678e:	bf00      	nop
 8006790:	370c      	adds	r7, #12
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr

0800679a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800679a:	b084      	sub	sp, #16
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	f107 001c 	add.w	r0, r7, #28
 80067a8:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d122      	bne.n	80067f8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80067c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067ca:	687a      	ldr	r2, [r7, #4]
 80067cc:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80067da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067dc:	2b01      	cmp	r3, #1
 80067de:	d105      	bne.n	80067ec <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	68db      	ldr	r3, [r3, #12]
 80067e4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f001 fbed 	bl	8007fcc <USB_CoreReset>
 80067f2:	4603      	mov	r3, r0
 80067f4:	73fb      	strb	r3, [r7, #15]
 80067f6:	e01a      	b.n	800682e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f001 fbe1 	bl	8007fcc <USB_CoreReset>
 800680a:	4603      	mov	r3, r0
 800680c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800680e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006810:	2b00      	cmp	r3, #0
 8006812:	d106      	bne.n	8006822 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006818:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	639a      	str	r2, [r3, #56]	; 0x38
 8006820:	e005      	b.n	800682e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006826:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800682e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006830:	2b01      	cmp	r3, #1
 8006832:	d10b      	bne.n	800684c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	f043 0206 	orr.w	r2, r3, #6
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f043 0220 	orr.w	r2, r3, #32
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800684c:	7bfb      	ldrb	r3, [r7, #15]
}
 800684e:	4618      	mov	r0, r3
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006858:	b004      	add	sp, #16
 800685a:	4770      	bx	lr

0800685c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800685c:	b480      	push	{r7}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	4613      	mov	r3, r2
 8006868:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800686a:	79fb      	ldrb	r3, [r7, #7]
 800686c:	2b02      	cmp	r3, #2
 800686e:	d165      	bne.n	800693c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	4a41      	ldr	r2, [pc, #260]	; (8006978 <USB_SetTurnaroundTime+0x11c>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d906      	bls.n	8006886 <USB_SetTurnaroundTime+0x2a>
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	4a40      	ldr	r2, [pc, #256]	; (800697c <USB_SetTurnaroundTime+0x120>)
 800687c:	4293      	cmp	r3, r2
 800687e:	d202      	bcs.n	8006886 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006880:	230f      	movs	r3, #15
 8006882:	617b      	str	r3, [r7, #20]
 8006884:	e062      	b.n	800694c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	4a3c      	ldr	r2, [pc, #240]	; (800697c <USB_SetTurnaroundTime+0x120>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d306      	bcc.n	800689c <USB_SetTurnaroundTime+0x40>
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	4a3b      	ldr	r2, [pc, #236]	; (8006980 <USB_SetTurnaroundTime+0x124>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d202      	bcs.n	800689c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006896:	230e      	movs	r3, #14
 8006898:	617b      	str	r3, [r7, #20]
 800689a:	e057      	b.n	800694c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	4a38      	ldr	r2, [pc, #224]	; (8006980 <USB_SetTurnaroundTime+0x124>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d306      	bcc.n	80068b2 <USB_SetTurnaroundTime+0x56>
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	4a37      	ldr	r2, [pc, #220]	; (8006984 <USB_SetTurnaroundTime+0x128>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d202      	bcs.n	80068b2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80068ac:	230d      	movs	r3, #13
 80068ae:	617b      	str	r3, [r7, #20]
 80068b0:	e04c      	b.n	800694c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80068b2:	68bb      	ldr	r3, [r7, #8]
 80068b4:	4a33      	ldr	r2, [pc, #204]	; (8006984 <USB_SetTurnaroundTime+0x128>)
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d306      	bcc.n	80068c8 <USB_SetTurnaroundTime+0x6c>
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	4a32      	ldr	r2, [pc, #200]	; (8006988 <USB_SetTurnaroundTime+0x12c>)
 80068be:	4293      	cmp	r3, r2
 80068c0:	d802      	bhi.n	80068c8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80068c2:	230c      	movs	r3, #12
 80068c4:	617b      	str	r3, [r7, #20]
 80068c6:	e041      	b.n	800694c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80068c8:	68bb      	ldr	r3, [r7, #8]
 80068ca:	4a2f      	ldr	r2, [pc, #188]	; (8006988 <USB_SetTurnaroundTime+0x12c>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d906      	bls.n	80068de <USB_SetTurnaroundTime+0x82>
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	4a2e      	ldr	r2, [pc, #184]	; (800698c <USB_SetTurnaroundTime+0x130>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d802      	bhi.n	80068de <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80068d8:	230b      	movs	r3, #11
 80068da:	617b      	str	r3, [r7, #20]
 80068dc:	e036      	b.n	800694c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	4a2a      	ldr	r2, [pc, #168]	; (800698c <USB_SetTurnaroundTime+0x130>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d906      	bls.n	80068f4 <USB_SetTurnaroundTime+0x98>
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	4a29      	ldr	r2, [pc, #164]	; (8006990 <USB_SetTurnaroundTime+0x134>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d802      	bhi.n	80068f4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80068ee:	230a      	movs	r3, #10
 80068f0:	617b      	str	r3, [r7, #20]
 80068f2:	e02b      	b.n	800694c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	4a26      	ldr	r2, [pc, #152]	; (8006990 <USB_SetTurnaroundTime+0x134>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d906      	bls.n	800690a <USB_SetTurnaroundTime+0xae>
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	4a25      	ldr	r2, [pc, #148]	; (8006994 <USB_SetTurnaroundTime+0x138>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d202      	bcs.n	800690a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006904:	2309      	movs	r3, #9
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	e020      	b.n	800694c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	4a21      	ldr	r2, [pc, #132]	; (8006994 <USB_SetTurnaroundTime+0x138>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d306      	bcc.n	8006920 <USB_SetTurnaroundTime+0xc4>
 8006912:	68bb      	ldr	r3, [r7, #8]
 8006914:	4a20      	ldr	r2, [pc, #128]	; (8006998 <USB_SetTurnaroundTime+0x13c>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d802      	bhi.n	8006920 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800691a:	2308      	movs	r3, #8
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	e015      	b.n	800694c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	4a1d      	ldr	r2, [pc, #116]	; (8006998 <USB_SetTurnaroundTime+0x13c>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d906      	bls.n	8006936 <USB_SetTurnaroundTime+0xda>
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	4a1c      	ldr	r2, [pc, #112]	; (800699c <USB_SetTurnaroundTime+0x140>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d202      	bcs.n	8006936 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006930:	2307      	movs	r3, #7
 8006932:	617b      	str	r3, [r7, #20]
 8006934:	e00a      	b.n	800694c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006936:	2306      	movs	r3, #6
 8006938:	617b      	str	r3, [r7, #20]
 800693a:	e007      	b.n	800694c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800693c:	79fb      	ldrb	r3, [r7, #7]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d102      	bne.n	8006948 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006942:	2309      	movs	r3, #9
 8006944:	617b      	str	r3, [r7, #20]
 8006946:	e001      	b.n	800694c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006948:	2309      	movs	r3, #9
 800694a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	68da      	ldr	r2, [r3, #12]
 800695c:	697b      	ldr	r3, [r7, #20]
 800695e:	029b      	lsls	r3, r3, #10
 8006960:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006964:	431a      	orrs	r2, r3
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	371c      	adds	r7, #28
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	00d8acbf 	.word	0x00d8acbf
 800697c:	00e4e1c0 	.word	0x00e4e1c0
 8006980:	00f42400 	.word	0x00f42400
 8006984:	01067380 	.word	0x01067380
 8006988:	011a499f 	.word	0x011a499f
 800698c:	01312cff 	.word	0x01312cff
 8006990:	014ca43f 	.word	0x014ca43f
 8006994:	016e3600 	.word	0x016e3600
 8006998:	01a6ab1f 	.word	0x01a6ab1f
 800699c:	01e84800 	.word	0x01e84800

080069a0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069a0:	b480      	push	{r7}
 80069a2:	b083      	sub	sp, #12
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	f043 0201 	orr.w	r2, r3, #1
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069b4:	2300      	movs	r3, #0
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	370c      	adds	r7, #12
 80069ba:	46bd      	mov	sp, r7
 80069bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c0:	4770      	bx	lr

080069c2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80069c2:	b480      	push	{r7}
 80069c4:	b083      	sub	sp, #12
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	f023 0201 	bic.w	r2, r3, #1
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
 80069ec:	460b      	mov	r3, r1
 80069ee:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80069f0:	2300      	movs	r3, #0
 80069f2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68db      	ldr	r3, [r3, #12]
 80069f8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d115      	bne.n	8006a32 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a12:	2001      	movs	r0, #1
 8006a14:	f7fb fc18 	bl	8002248 <HAL_Delay>
      ms++;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 fa45 	bl	8007eae <USB_GetMode>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b01      	cmp	r3, #1
 8006a28:	d01e      	beq.n	8006a68 <USB_SetCurrentMode+0x84>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2b31      	cmp	r3, #49	; 0x31
 8006a2e:	d9f0      	bls.n	8006a12 <USB_SetCurrentMode+0x2e>
 8006a30:	e01a      	b.n	8006a68 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a32:	78fb      	ldrb	r3, [r7, #3]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d115      	bne.n	8006a64 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	68db      	ldr	r3, [r3, #12]
 8006a3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a44:	2001      	movs	r0, #1
 8006a46:	f7fb fbff 	bl	8002248 <HAL_Delay>
      ms++;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f001 fa2c 	bl	8007eae <USB_GetMode>
 8006a56:	4603      	mov	r3, r0
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d005      	beq.n	8006a68 <USB_SetCurrentMode+0x84>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	2b31      	cmp	r3, #49	; 0x31
 8006a60:	d9f0      	bls.n	8006a44 <USB_SetCurrentMode+0x60>
 8006a62:	e001      	b.n	8006a68 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a64:	2301      	movs	r3, #1
 8006a66:	e005      	b.n	8006a74 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	2b32      	cmp	r3, #50	; 0x32
 8006a6c:	d101      	bne.n	8006a72 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	e000      	b.n	8006a74 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a72:	2300      	movs	r3, #0
}
 8006a74:	4618      	mov	r0, r3
 8006a76:	3710      	adds	r7, #16
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	bd80      	pop	{r7, pc}

08006a7c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	b580      	push	{r7, lr}
 8006a80:	b086      	sub	sp, #24
 8006a82:	af00      	add	r7, sp, #0
 8006a84:	6078      	str	r0, [r7, #4]
 8006a86:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a8a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a96:	2300      	movs	r3, #0
 8006a98:	613b      	str	r3, [r7, #16]
 8006a9a:	e009      	b.n	8006ab0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a9c:	687a      	ldr	r2, [r7, #4]
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	3340      	adds	r3, #64	; 0x40
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	4413      	add	r3, r2
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	3301      	adds	r3, #1
 8006aae:	613b      	str	r3, [r7, #16]
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	2b0e      	cmp	r3, #14
 8006ab4:	d9f2      	bls.n	8006a9c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006ab6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d11c      	bne.n	8006af6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	68fa      	ldr	r2, [r7, #12]
 8006ac6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006aca:	f043 0302 	orr.w	r3, r3, #2
 8006ace:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aec:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	639a      	str	r2, [r3, #56]	; 0x38
 8006af4:	e00b      	b.n	8006b0e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afa:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b06:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b14:	461a      	mov	r2, r3
 8006b16:	2300      	movs	r3, #0
 8006b18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b20:	4619      	mov	r1, r3
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b28:	461a      	mov	r2, r3
 8006b2a:	680b      	ldr	r3, [r1, #0]
 8006b2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	d10c      	bne.n	8006b4e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d104      	bne.n	8006b44 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 f965 	bl	8006e0c <USB_SetDevSpeed>
 8006b42:	e008      	b.n	8006b56 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b44:	2101      	movs	r1, #1
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 f960 	bl	8006e0c <USB_SetDevSpeed>
 8006b4c:	e003      	b.n	8006b56 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b4e:	2103      	movs	r1, #3
 8006b50:	6878      	ldr	r0, [r7, #4]
 8006b52:	f000 f95b 	bl	8006e0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b56:	2110      	movs	r1, #16
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 f8f3 	bl	8006d44 <USB_FlushTxFifo>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d001      	beq.n	8006b68 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 f91f 	bl	8006dac <USB_FlushRxFifo>
 8006b6e:	4603      	mov	r3, r0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d001      	beq.n	8006b78 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7e:	461a      	mov	r2, r3
 8006b80:	2300      	movs	r3, #0
 8006b82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b8a:	461a      	mov	r2, r3
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b96:	461a      	mov	r2, r3
 8006b98:	2300      	movs	r3, #0
 8006b9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b9c:	2300      	movs	r3, #0
 8006b9e:	613b      	str	r3, [r7, #16]
 8006ba0:	e043      	b.n	8006c2a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	015a      	lsls	r2, r3, #5
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	4413      	add	r3, r2
 8006baa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bb4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bb8:	d118      	bne.n	8006bec <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006bba:	693b      	ldr	r3, [r7, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10a      	bne.n	8006bd6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	015a      	lsls	r2, r3, #5
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	4413      	add	r3, r2
 8006bc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bcc:	461a      	mov	r2, r3
 8006bce:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006bd2:	6013      	str	r3, [r2, #0]
 8006bd4:	e013      	b.n	8006bfe <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	015a      	lsls	r2, r3, #5
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	4413      	add	r3, r2
 8006bde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be2:	461a      	mov	r2, r3
 8006be4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006be8:	6013      	str	r3, [r2, #0]
 8006bea:	e008      	b.n	8006bfe <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006bec:	693b      	ldr	r3, [r7, #16]
 8006bee:	015a      	lsls	r2, r3, #5
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006bfe:	693b      	ldr	r3, [r7, #16]
 8006c00:	015a      	lsls	r2, r3, #5
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	4413      	add	r3, r2
 8006c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	015a      	lsls	r2, r3, #5
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	4413      	add	r3, r2
 8006c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	3301      	adds	r3, #1
 8006c28:	613b      	str	r3, [r7, #16]
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	693a      	ldr	r2, [r7, #16]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d3b7      	bcc.n	8006ba2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c32:	2300      	movs	r3, #0
 8006c34:	613b      	str	r3, [r7, #16]
 8006c36:	e043      	b.n	8006cc0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c4e:	d118      	bne.n	8006c82 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006c50:	693b      	ldr	r3, [r7, #16]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10a      	bne.n	8006c6c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	015a      	lsls	r2, r3, #5
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	4413      	add	r3, r2
 8006c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c62:	461a      	mov	r2, r3
 8006c64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	e013      	b.n	8006c94 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	015a      	lsls	r2, r3, #5
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	4413      	add	r3, r2
 8006c74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c78:	461a      	mov	r2, r3
 8006c7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c7e:	6013      	str	r3, [r2, #0]
 8006c80:	e008      	b.n	8006c94 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	015a      	lsls	r2, r3, #5
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	4413      	add	r3, r2
 8006c8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8e:	461a      	mov	r2, r3
 8006c90:	2300      	movs	r3, #0
 8006c92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	015a      	lsls	r2, r3, #5
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ca0:	461a      	mov	r2, r3
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006ca6:	693b      	ldr	r3, [r7, #16]
 8006ca8:	015a      	lsls	r2, r3, #5
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	4413      	add	r3, r2
 8006cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006cb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	613b      	str	r3, [r7, #16]
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	693a      	ldr	r2, [r7, #16]
 8006cc4:	429a      	cmp	r2, r3
 8006cc6:	d3b7      	bcc.n	8006c38 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cce:	691b      	ldr	r3, [r3, #16]
 8006cd0:	68fa      	ldr	r2, [r7, #12]
 8006cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006cda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	2200      	movs	r2, #0
 8006ce0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006ce8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d105      	bne.n	8006cfc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	f043 0210 	orr.w	r2, r3, #16
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	699a      	ldr	r2, [r3, #24]
 8006d00:	4b0f      	ldr	r3, [pc, #60]	; (8006d40 <USB_DevInit+0x2c4>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	687a      	ldr	r2, [r7, #4]
 8006d06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006d08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d005      	beq.n	8006d1a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	f043 0208 	orr.w	r2, r3, #8
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d107      	bne.n	8006d30 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	699b      	ldr	r3, [r3, #24]
 8006d24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006d28:	f043 0304 	orr.w	r3, r3, #4
 8006d2c:	687a      	ldr	r2, [r7, #4]
 8006d2e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006d30:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006d3c:	b004      	add	sp, #16
 8006d3e:	4770      	bx	lr
 8006d40:	803c3800 	.word	0x803c3800

08006d44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b085      	sub	sp, #20
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	3301      	adds	r3, #1
 8006d56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4a13      	ldr	r2, [pc, #76]	; (8006da8 <USB_FlushTxFifo+0x64>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d901      	bls.n	8006d64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d60:	2303      	movs	r3, #3
 8006d62:	e01b      	b.n	8006d9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	691b      	ldr	r3, [r3, #16]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	daf2      	bge.n	8006d52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	019b      	lsls	r3, r3, #6
 8006d74:	f043 0220 	orr.w	r2, r3, #32
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	4a08      	ldr	r2, [pc, #32]	; (8006da8 <USB_FlushTxFifo+0x64>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d901      	bls.n	8006d8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e006      	b.n	8006d9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	f003 0320 	and.w	r3, r3, #32
 8006d96:	2b20      	cmp	r3, #32
 8006d98:	d0f0      	beq.n	8006d7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr
 8006da8:	00030d40 	.word	0x00030d40

08006dac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006db4:	2300      	movs	r3, #0
 8006db6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	4a11      	ldr	r2, [pc, #68]	; (8006e08 <USB_FlushRxFifo+0x5c>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d901      	bls.n	8006dca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e018      	b.n	8006dfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	daf2      	bge.n	8006db8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	2210      	movs	r2, #16
 8006dda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3301      	adds	r3, #1
 8006de0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4a08      	ldr	r2, [pc, #32]	; (8006e08 <USB_FlushRxFifo+0x5c>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d901      	bls.n	8006dee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e006      	b.n	8006dfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	f003 0310 	and.w	r3, r3, #16
 8006df6:	2b10      	cmp	r3, #16
 8006df8:	d0f0      	beq.n	8006ddc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006dfa:	2300      	movs	r3, #0
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3714      	adds	r7, #20
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr
 8006e08:	00030d40 	.word	0x00030d40

08006e0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b085      	sub	sp, #20
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e22:	681a      	ldr	r2, [r3, #0]
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	68f9      	ldr	r1, [r7, #12]
 8006e28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e2c:	4313      	orrs	r3, r2
 8006e2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006e30:	2300      	movs	r3, #0
}
 8006e32:	4618      	mov	r0, r3
 8006e34:	3714      	adds	r7, #20
 8006e36:	46bd      	mov	sp, r7
 8006e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3c:	4770      	bx	lr

08006e3e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006e3e:	b480      	push	{r7}
 8006e40:	b087      	sub	sp, #28
 8006e42:	af00      	add	r7, sp, #0
 8006e44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f003 0306 	and.w	r3, r3, #6
 8006e56:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d102      	bne.n	8006e64 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	75fb      	strb	r3, [r7, #23]
 8006e62:	e00a      	b.n	8006e7a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d002      	beq.n	8006e70 <USB_GetDevSpeed+0x32>
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	2b06      	cmp	r3, #6
 8006e6e:	d102      	bne.n	8006e76 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006e70:	2302      	movs	r3, #2
 8006e72:	75fb      	strb	r3, [r7, #23]
 8006e74:	e001      	b.n	8006e7a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006e76:	230f      	movs	r3, #15
 8006e78:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006e7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	371c      	adds	r7, #28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr

08006e88 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b085      	sub	sp, #20
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	781b      	ldrb	r3, [r3, #0]
 8006e9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	785b      	ldrb	r3, [r3, #1]
 8006ea0:	2b01      	cmp	r3, #1
 8006ea2:	d13a      	bne.n	8006f1a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006eaa:	69da      	ldr	r2, [r3, #28]
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	f003 030f 	and.w	r3, r3, #15
 8006eb4:	2101      	movs	r1, #1
 8006eb6:	fa01 f303 	lsl.w	r3, r1, r3
 8006eba:	b29b      	uxth	r3, r3
 8006ebc:	68f9      	ldr	r1, [r7, #12]
 8006ebe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	015a      	lsls	r2, r3, #5
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	4413      	add	r3, r2
 8006ece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d155      	bne.n	8006f88 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	015a      	lsls	r2, r3, #5
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	4413      	add	r3, r2
 8006ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	791b      	ldrb	r3, [r3, #4]
 8006ef6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006ef8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	059b      	lsls	r3, r3, #22
 8006efe:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006f00:	4313      	orrs	r3, r2
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	0151      	lsls	r1, r2, #5
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	440a      	add	r2, r1
 8006f0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f16:	6013      	str	r3, [r2, #0]
 8006f18:	e036      	b.n	8006f88 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f20:	69da      	ldr	r2, [r3, #28]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	781b      	ldrb	r3, [r3, #0]
 8006f26:	f003 030f 	and.w	r3, r3, #15
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f30:	041b      	lsls	r3, r3, #16
 8006f32:	68f9      	ldr	r1, [r7, #12]
 8006f34:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	015a      	lsls	r2, r3, #5
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d11a      	bne.n	8006f88 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	015a      	lsls	r2, r3, #5
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	4413      	add	r3, r2
 8006f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	791b      	ldrb	r3, [r3, #4]
 8006f6c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006f6e:	430b      	orrs	r3, r1
 8006f70:	4313      	orrs	r3, r2
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	0151      	lsls	r1, r2, #5
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	440a      	add	r2, r1
 8006f7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f86:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006f88:	2300      	movs	r3, #0
}
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	3714      	adds	r7, #20
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f94:	4770      	bx	lr
	...

08006f98 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b085      	sub	sp, #20
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	781b      	ldrb	r3, [r3, #0]
 8006faa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d161      	bne.n	8007078 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	015a      	lsls	r2, r3, #5
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	4413      	add	r3, r2
 8006fbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006fca:	d11f      	bne.n	800700c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	0151      	lsls	r1, r2, #5
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	440a      	add	r2, r1
 8006fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006fe6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006fea:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	015a      	lsls	r2, r3, #5
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	4413      	add	r3, r2
 8006ff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	68ba      	ldr	r2, [r7, #8]
 8006ffc:	0151      	lsls	r1, r2, #5
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	440a      	add	r2, r1
 8007002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007006:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800700a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007012:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	781b      	ldrb	r3, [r3, #0]
 8007018:	f003 030f 	and.w	r3, r3, #15
 800701c:	2101      	movs	r1, #1
 800701e:	fa01 f303 	lsl.w	r3, r1, r3
 8007022:	b29b      	uxth	r3, r3
 8007024:	43db      	mvns	r3, r3
 8007026:	68f9      	ldr	r1, [r7, #12]
 8007028:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800702c:	4013      	ands	r3, r2
 800702e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007036:	69da      	ldr	r2, [r3, #28]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	f003 030f 	and.w	r3, r3, #15
 8007040:	2101      	movs	r1, #1
 8007042:	fa01 f303 	lsl.w	r3, r1, r3
 8007046:	b29b      	uxth	r3, r3
 8007048:	43db      	mvns	r3, r3
 800704a:	68f9      	ldr	r1, [r7, #12]
 800704c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007050:	4013      	ands	r3, r2
 8007052:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	015a      	lsls	r2, r3, #5
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007060:	681a      	ldr	r2, [r3, #0]
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	0159      	lsls	r1, r3, #5
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	440b      	add	r3, r1
 800706a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800706e:	4619      	mov	r1, r3
 8007070:	4b35      	ldr	r3, [pc, #212]	; (8007148 <USB_DeactivateEndpoint+0x1b0>)
 8007072:	4013      	ands	r3, r2
 8007074:	600b      	str	r3, [r1, #0]
 8007076:	e060      	b.n	800713a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800708a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800708e:	d11f      	bne.n	80070d0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8007090:	68bb      	ldr	r3, [r7, #8]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68ba      	ldr	r2, [r7, #8]
 80070a0:	0151      	lsls	r1, r2, #5
 80070a2:	68fa      	ldr	r2, [r7, #12]
 80070a4:	440a      	add	r2, r1
 80070a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80070ae:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	015a      	lsls	r2, r3, #5
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	4413      	add	r3, r2
 80070b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	0151      	lsls	r1, r2, #5
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	440a      	add	r2, r1
 80070c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80070ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80070ce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	f003 030f 	and.w	r3, r3, #15
 80070e0:	2101      	movs	r1, #1
 80070e2:	fa01 f303 	lsl.w	r3, r1, r3
 80070e6:	041b      	lsls	r3, r3, #16
 80070e8:	43db      	mvns	r3, r3
 80070ea:	68f9      	ldr	r1, [r7, #12]
 80070ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80070f0:	4013      	ands	r3, r2
 80070f2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070fa:	69da      	ldr	r2, [r3, #28]
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	f003 030f 	and.w	r3, r3, #15
 8007104:	2101      	movs	r1, #1
 8007106:	fa01 f303 	lsl.w	r3, r1, r3
 800710a:	041b      	lsls	r3, r3, #16
 800710c:	43db      	mvns	r3, r3
 800710e:	68f9      	ldr	r1, [r7, #12]
 8007110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007114:	4013      	ands	r3, r2
 8007116:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007118:	68bb      	ldr	r3, [r7, #8]
 800711a:	015a      	lsls	r2, r3, #5
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	4413      	add	r3, r2
 8007120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007124:	681a      	ldr	r2, [r3, #0]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	0159      	lsls	r1, r3, #5
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	440b      	add	r3, r1
 800712e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007132:	4619      	mov	r1, r3
 8007134:	4b05      	ldr	r3, [pc, #20]	; (800714c <USB_DeactivateEndpoint+0x1b4>)
 8007136:	4013      	ands	r3, r2
 8007138:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800713a:	2300      	movs	r3, #0
}
 800713c:	4618      	mov	r0, r3
 800713e:	3714      	adds	r7, #20
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr
 8007148:	ec337800 	.word	0xec337800
 800714c:	eff37800 	.word	0xeff37800

08007150 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007150:	b580      	push	{r7, lr}
 8007152:	b08a      	sub	sp, #40	; 0x28
 8007154:	af02      	add	r7, sp, #8
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	4613      	mov	r3, r2
 800715c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007162:	68bb      	ldr	r3, [r7, #8]
 8007164:	781b      	ldrb	r3, [r3, #0]
 8007166:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007168:	68bb      	ldr	r3, [r7, #8]
 800716a:	785b      	ldrb	r3, [r3, #1]
 800716c:	2b01      	cmp	r3, #1
 800716e:	f040 815c 	bne.w	800742a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	699b      	ldr	r3, [r3, #24]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d132      	bne.n	80071e0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800717a:	69bb      	ldr	r3, [r7, #24]
 800717c:	015a      	lsls	r2, r3, #5
 800717e:	69fb      	ldr	r3, [r7, #28]
 8007180:	4413      	add	r3, r2
 8007182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007186:	691b      	ldr	r3, [r3, #16]
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	0151      	lsls	r1, r2, #5
 800718c:	69fa      	ldr	r2, [r7, #28]
 800718e:	440a      	add	r2, r1
 8007190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007194:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007198:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800719c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800719e:	69bb      	ldr	r3, [r7, #24]
 80071a0:	015a      	lsls	r2, r3, #5
 80071a2:	69fb      	ldr	r3, [r7, #28]
 80071a4:	4413      	add	r3, r2
 80071a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071aa:	691b      	ldr	r3, [r3, #16]
 80071ac:	69ba      	ldr	r2, [r7, #24]
 80071ae:	0151      	lsls	r1, r2, #5
 80071b0:	69fa      	ldr	r2, [r7, #28]
 80071b2:	440a      	add	r2, r1
 80071b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80071bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	69fb      	ldr	r3, [r7, #28]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	0151      	lsls	r1, r2, #5
 80071d0:	69fa      	ldr	r2, [r7, #28]
 80071d2:	440a      	add	r2, r1
 80071d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d8:	0cdb      	lsrs	r3, r3, #19
 80071da:	04db      	lsls	r3, r3, #19
 80071dc:	6113      	str	r3, [r2, #16]
 80071de:	e074      	b.n	80072ca <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80071e0:	69bb      	ldr	r3, [r7, #24]
 80071e2:	015a      	lsls	r2, r3, #5
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	4413      	add	r3, r2
 80071e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071ec:	691b      	ldr	r3, [r3, #16]
 80071ee:	69ba      	ldr	r2, [r7, #24]
 80071f0:	0151      	lsls	r1, r2, #5
 80071f2:	69fa      	ldr	r2, [r7, #28]
 80071f4:	440a      	add	r2, r1
 80071f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071fa:	0cdb      	lsrs	r3, r3, #19
 80071fc:	04db      	lsls	r3, r3, #19
 80071fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007200:	69bb      	ldr	r3, [r7, #24]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	69ba      	ldr	r2, [r7, #24]
 8007210:	0151      	lsls	r1, r2, #5
 8007212:	69fa      	ldr	r2, [r7, #28]
 8007214:	440a      	add	r2, r1
 8007216:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800721a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800721e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007222:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	015a      	lsls	r2, r3, #5
 8007228:	69fb      	ldr	r3, [r7, #28]
 800722a:	4413      	add	r3, r2
 800722c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007230:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	6999      	ldr	r1, [r3, #24]
 8007236:	68bb      	ldr	r3, [r7, #8]
 8007238:	68db      	ldr	r3, [r3, #12]
 800723a:	440b      	add	r3, r1
 800723c:	1e59      	subs	r1, r3, #1
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	68db      	ldr	r3, [r3, #12]
 8007242:	fbb1 f3f3 	udiv	r3, r1, r3
 8007246:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007248:	4b9d      	ldr	r3, [pc, #628]	; (80074c0 <USB_EPStartXfer+0x370>)
 800724a:	400b      	ands	r3, r1
 800724c:	69b9      	ldr	r1, [r7, #24]
 800724e:	0148      	lsls	r0, r1, #5
 8007250:	69f9      	ldr	r1, [r7, #28]
 8007252:	4401      	add	r1, r0
 8007254:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007258:	4313      	orrs	r3, r2
 800725a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800725c:	69bb      	ldr	r3, [r7, #24]
 800725e:	015a      	lsls	r2, r3, #5
 8007260:	69fb      	ldr	r3, [r7, #28]
 8007262:	4413      	add	r3, r2
 8007264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007268:	691a      	ldr	r2, [r3, #16]
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	699b      	ldr	r3, [r3, #24]
 800726e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007272:	69b9      	ldr	r1, [r7, #24]
 8007274:	0148      	lsls	r0, r1, #5
 8007276:	69f9      	ldr	r1, [r7, #28]
 8007278:	4401      	add	r1, r0
 800727a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800727e:	4313      	orrs	r3, r2
 8007280:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	791b      	ldrb	r3, [r3, #4]
 8007286:	2b01      	cmp	r3, #1
 8007288:	d11f      	bne.n	80072ca <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	4413      	add	r3, r2
 8007292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007296:	691b      	ldr	r3, [r3, #16]
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	0151      	lsls	r1, r2, #5
 800729c:	69fa      	ldr	r2, [r7, #28]
 800729e:	440a      	add	r2, r1
 80072a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072a4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80072a8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	015a      	lsls	r2, r3, #5
 80072ae:	69fb      	ldr	r3, [r7, #28]
 80072b0:	4413      	add	r3, r2
 80072b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	0151      	lsls	r1, r2, #5
 80072bc:	69fa      	ldr	r2, [r7, #28]
 80072be:	440a      	add	r2, r1
 80072c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80072c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80072c8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80072ca:	79fb      	ldrb	r3, [r7, #7]
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d14b      	bne.n	8007368 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	695b      	ldr	r3, [r3, #20]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d009      	beq.n	80072ec <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80072d8:	69bb      	ldr	r3, [r7, #24]
 80072da:	015a      	lsls	r2, r3, #5
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	4413      	add	r3, r2
 80072e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80072e4:	461a      	mov	r2, r3
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	695b      	ldr	r3, [r3, #20]
 80072ea:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	791b      	ldrb	r3, [r3, #4]
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d128      	bne.n	8007346 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80072f4:	69fb      	ldr	r3, [r7, #28]
 80072f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007300:	2b00      	cmp	r3, #0
 8007302:	d110      	bne.n	8007326 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	015a      	lsls	r2, r3, #5
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	4413      	add	r3, r2
 800730c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	69ba      	ldr	r2, [r7, #24]
 8007314:	0151      	lsls	r1, r2, #5
 8007316:	69fa      	ldr	r2, [r7, #28]
 8007318:	440a      	add	r2, r1
 800731a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800731e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007322:	6013      	str	r3, [r2, #0]
 8007324:	e00f      	b.n	8007346 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007326:	69bb      	ldr	r3, [r7, #24]
 8007328:	015a      	lsls	r2, r3, #5
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	4413      	add	r3, r2
 800732e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	69ba      	ldr	r2, [r7, #24]
 8007336:	0151      	lsls	r1, r2, #5
 8007338:	69fa      	ldr	r2, [r7, #28]
 800733a:	440a      	add	r2, r1
 800733c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007344:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007346:	69bb      	ldr	r3, [r7, #24]
 8007348:	015a      	lsls	r2, r3, #5
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	4413      	add	r3, r2
 800734e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	69ba      	ldr	r2, [r7, #24]
 8007356:	0151      	lsls	r1, r2, #5
 8007358:	69fa      	ldr	r2, [r7, #28]
 800735a:	440a      	add	r2, r1
 800735c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007360:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007364:	6013      	str	r3, [r2, #0]
 8007366:	e133      	b.n	80075d0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007368:	69bb      	ldr	r3, [r7, #24]
 800736a:	015a      	lsls	r2, r3, #5
 800736c:	69fb      	ldr	r3, [r7, #28]
 800736e:	4413      	add	r3, r2
 8007370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	69ba      	ldr	r2, [r7, #24]
 8007378:	0151      	lsls	r1, r2, #5
 800737a:	69fa      	ldr	r2, [r7, #28]
 800737c:	440a      	add	r2, r1
 800737e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007382:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007386:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	791b      	ldrb	r3, [r3, #4]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d015      	beq.n	80073bc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	699b      	ldr	r3, [r3, #24]
 8007394:	2b00      	cmp	r3, #0
 8007396:	f000 811b 	beq.w	80075d0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	f003 030f 	and.w	r3, r3, #15
 80073aa:	2101      	movs	r1, #1
 80073ac:	fa01 f303 	lsl.w	r3, r1, r3
 80073b0:	69f9      	ldr	r1, [r7, #28]
 80073b2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80073b6:	4313      	orrs	r3, r2
 80073b8:	634b      	str	r3, [r1, #52]	; 0x34
 80073ba:	e109      	b.n	80075d0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073c2:	689b      	ldr	r3, [r3, #8]
 80073c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d110      	bne.n	80073ee <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80073cc:	69bb      	ldr	r3, [r7, #24]
 80073ce:	015a      	lsls	r2, r3, #5
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	0151      	lsls	r1, r2, #5
 80073de:	69fa      	ldr	r2, [r7, #28]
 80073e0:	440a      	add	r2, r1
 80073e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80073e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073ea:	6013      	str	r3, [r2, #0]
 80073ec:	e00f      	b.n	800740e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80073ee:	69bb      	ldr	r3, [r7, #24]
 80073f0:	015a      	lsls	r2, r3, #5
 80073f2:	69fb      	ldr	r3, [r7, #28]
 80073f4:	4413      	add	r3, r2
 80073f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	69ba      	ldr	r2, [r7, #24]
 80073fe:	0151      	lsls	r1, r2, #5
 8007400:	69fa      	ldr	r2, [r7, #28]
 8007402:	440a      	add	r2, r1
 8007404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800740c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	6919      	ldr	r1, [r3, #16]
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	781a      	ldrb	r2, [r3, #0]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	699b      	ldr	r3, [r3, #24]
 800741a:	b298      	uxth	r0, r3
 800741c:	79fb      	ldrb	r3, [r7, #7]
 800741e:	9300      	str	r3, [sp, #0]
 8007420:	4603      	mov	r3, r0
 8007422:	68f8      	ldr	r0, [r7, #12]
 8007424:	f000 fade 	bl	80079e4 <USB_WritePacket>
 8007428:	e0d2      	b.n	80075d0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800742a:	69bb      	ldr	r3, [r7, #24]
 800742c:	015a      	lsls	r2, r3, #5
 800742e:	69fb      	ldr	r3, [r7, #28]
 8007430:	4413      	add	r3, r2
 8007432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007436:	691b      	ldr	r3, [r3, #16]
 8007438:	69ba      	ldr	r2, [r7, #24]
 800743a:	0151      	lsls	r1, r2, #5
 800743c:	69fa      	ldr	r2, [r7, #28]
 800743e:	440a      	add	r2, r1
 8007440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007444:	0cdb      	lsrs	r3, r3, #19
 8007446:	04db      	lsls	r3, r3, #19
 8007448:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800744a:	69bb      	ldr	r3, [r7, #24]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	4413      	add	r3, r2
 8007452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007456:	691b      	ldr	r3, [r3, #16]
 8007458:	69ba      	ldr	r2, [r7, #24]
 800745a:	0151      	lsls	r1, r2, #5
 800745c:	69fa      	ldr	r2, [r7, #28]
 800745e:	440a      	add	r2, r1
 8007460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007464:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007468:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800746c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	699b      	ldr	r3, [r3, #24]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d126      	bne.n	80074c4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007476:	69bb      	ldr	r3, [r7, #24]
 8007478:	015a      	lsls	r2, r3, #5
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	4413      	add	r3, r2
 800747e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007482:	691a      	ldr	r2, [r3, #16]
 8007484:	68bb      	ldr	r3, [r7, #8]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800748c:	69b9      	ldr	r1, [r7, #24]
 800748e:	0148      	lsls	r0, r1, #5
 8007490:	69f9      	ldr	r1, [r7, #28]
 8007492:	4401      	add	r1, r0
 8007494:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007498:	4313      	orrs	r3, r2
 800749a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800749c:	69bb      	ldr	r3, [r7, #24]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	69fb      	ldr	r3, [r7, #28]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	69ba      	ldr	r2, [r7, #24]
 80074ac:	0151      	lsls	r1, r2, #5
 80074ae:	69fa      	ldr	r2, [r7, #28]
 80074b0:	440a      	add	r2, r1
 80074b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80074b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074ba:	6113      	str	r3, [r2, #16]
 80074bc:	e03a      	b.n	8007534 <USB_EPStartXfer+0x3e4>
 80074be:	bf00      	nop
 80074c0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80074c4:	68bb      	ldr	r3, [r7, #8]
 80074c6:	699a      	ldr	r2, [r3, #24]
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	4413      	add	r3, r2
 80074ce:	1e5a      	subs	r2, r3, #1
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	68db      	ldr	r3, [r3, #12]
 80074d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80074d8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	8afa      	ldrh	r2, [r7, #22]
 80074e0:	fb03 f202 	mul.w	r2, r3, r2
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80074e8:	69bb      	ldr	r3, [r7, #24]
 80074ea:	015a      	lsls	r2, r3, #5
 80074ec:	69fb      	ldr	r3, [r7, #28]
 80074ee:	4413      	add	r3, r2
 80074f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80074f4:	691a      	ldr	r2, [r3, #16]
 80074f6:	8afb      	ldrh	r3, [r7, #22]
 80074f8:	04d9      	lsls	r1, r3, #19
 80074fa:	4b38      	ldr	r3, [pc, #224]	; (80075dc <USB_EPStartXfer+0x48c>)
 80074fc:	400b      	ands	r3, r1
 80074fe:	69b9      	ldr	r1, [r7, #24]
 8007500:	0148      	lsls	r0, r1, #5
 8007502:	69f9      	ldr	r1, [r7, #28]
 8007504:	4401      	add	r1, r0
 8007506:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800750a:	4313      	orrs	r3, r2
 800750c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	015a      	lsls	r2, r3, #5
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	4413      	add	r3, r2
 8007516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800751a:	691a      	ldr	r2, [r3, #16]
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	69db      	ldr	r3, [r3, #28]
 8007520:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007524:	69b9      	ldr	r1, [r7, #24]
 8007526:	0148      	lsls	r0, r1, #5
 8007528:	69f9      	ldr	r1, [r7, #28]
 800752a:	4401      	add	r1, r0
 800752c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007530:	4313      	orrs	r3, r2
 8007532:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007534:	79fb      	ldrb	r3, [r7, #7]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d10d      	bne.n	8007556 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d009      	beq.n	8007556 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	6919      	ldr	r1, [r3, #16]
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	4413      	add	r3, r2
 800754e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007552:	460a      	mov	r2, r1
 8007554:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007556:	68bb      	ldr	r3, [r7, #8]
 8007558:	791b      	ldrb	r3, [r3, #4]
 800755a:	2b01      	cmp	r3, #1
 800755c:	d128      	bne.n	80075b0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800755e:	69fb      	ldr	r3, [r7, #28]
 8007560:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800756a:	2b00      	cmp	r3, #0
 800756c:	d110      	bne.n	8007590 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	69fb      	ldr	r3, [r7, #28]
 8007574:	4413      	add	r3, r2
 8007576:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	69ba      	ldr	r2, [r7, #24]
 800757e:	0151      	lsls	r1, r2, #5
 8007580:	69fa      	ldr	r2, [r7, #28]
 8007582:	440a      	add	r2, r1
 8007584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007588:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800758c:	6013      	str	r3, [r2, #0]
 800758e:	e00f      	b.n	80075b0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007590:	69bb      	ldr	r3, [r7, #24]
 8007592:	015a      	lsls	r2, r3, #5
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	4413      	add	r3, r2
 8007598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	69ba      	ldr	r2, [r7, #24]
 80075a0:	0151      	lsls	r1, r2, #5
 80075a2:	69fa      	ldr	r2, [r7, #28]
 80075a4:	440a      	add	r2, r1
 80075a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075ae:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	015a      	lsls	r2, r3, #5
 80075b4:	69fb      	ldr	r3, [r7, #28]
 80075b6:	4413      	add	r3, r2
 80075b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	69ba      	ldr	r2, [r7, #24]
 80075c0:	0151      	lsls	r1, r2, #5
 80075c2:	69fa      	ldr	r2, [r7, #28]
 80075c4:	440a      	add	r2, r1
 80075c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80075ca:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80075d0:	2300      	movs	r3, #0
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3720      	adds	r7, #32
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}
 80075da:	bf00      	nop
 80075dc:	1ff80000 	.word	0x1ff80000

080075e0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b087      	sub	sp, #28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	60f8      	str	r0, [r7, #12]
 80075e8:	60b9      	str	r1, [r7, #8]
 80075ea:	4613      	mov	r3, r2
 80075ec:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	785b      	ldrb	r3, [r3, #1]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	f040 80ce 	bne.w	800779e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007602:	68bb      	ldr	r3, [r7, #8]
 8007604:	699b      	ldr	r3, [r3, #24]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d132      	bne.n	8007670 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800760a:	693b      	ldr	r3, [r7, #16]
 800760c:	015a      	lsls	r2, r3, #5
 800760e:	697b      	ldr	r3, [r7, #20]
 8007610:	4413      	add	r3, r2
 8007612:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007616:	691b      	ldr	r3, [r3, #16]
 8007618:	693a      	ldr	r2, [r7, #16]
 800761a:	0151      	lsls	r1, r2, #5
 800761c:	697a      	ldr	r2, [r7, #20]
 800761e:	440a      	add	r2, r1
 8007620:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007624:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007628:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800762c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	0151      	lsls	r1, r2, #5
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	440a      	add	r2, r1
 8007644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007648:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800764c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	015a      	lsls	r2, r3, #5
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	4413      	add	r3, r2
 8007656:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	0151      	lsls	r1, r2, #5
 8007660:	697a      	ldr	r2, [r7, #20]
 8007662:	440a      	add	r2, r1
 8007664:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007668:	0cdb      	lsrs	r3, r3, #19
 800766a:	04db      	lsls	r3, r3, #19
 800766c:	6113      	str	r3, [r2, #16]
 800766e:	e04e      	b.n	800770e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007670:	693b      	ldr	r3, [r7, #16]
 8007672:	015a      	lsls	r2, r3, #5
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	4413      	add	r3, r2
 8007678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	693a      	ldr	r2, [r7, #16]
 8007680:	0151      	lsls	r1, r2, #5
 8007682:	697a      	ldr	r2, [r7, #20]
 8007684:	440a      	add	r2, r1
 8007686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800768a:	0cdb      	lsrs	r3, r3, #19
 800768c:	04db      	lsls	r3, r3, #19
 800768e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007690:	693b      	ldr	r3, [r7, #16]
 8007692:	015a      	lsls	r2, r3, #5
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	4413      	add	r3, r2
 8007698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800769c:	691b      	ldr	r3, [r3, #16]
 800769e:	693a      	ldr	r2, [r7, #16]
 80076a0:	0151      	lsls	r1, r2, #5
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	440a      	add	r2, r1
 80076a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076aa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80076ae:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80076b2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80076b4:	68bb      	ldr	r3, [r7, #8]
 80076b6:	699a      	ldr	r2, [r3, #24]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	429a      	cmp	r2, r3
 80076be:	d903      	bls.n	80076c8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	68da      	ldr	r2, [r3, #12]
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	015a      	lsls	r2, r3, #5
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	4413      	add	r3, r2
 80076d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	693a      	ldr	r2, [r7, #16]
 80076d8:	0151      	lsls	r1, r2, #5
 80076da:	697a      	ldr	r2, [r7, #20]
 80076dc:	440a      	add	r2, r1
 80076de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80076e2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80076e6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	015a      	lsls	r2, r3, #5
 80076ec:	697b      	ldr	r3, [r7, #20]
 80076ee:	4413      	add	r3, r2
 80076f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80076f4:	691a      	ldr	r2, [r3, #16]
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076fe:	6939      	ldr	r1, [r7, #16]
 8007700:	0148      	lsls	r0, r1, #5
 8007702:	6979      	ldr	r1, [r7, #20]
 8007704:	4401      	add	r1, r0
 8007706:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800770a:	4313      	orrs	r3, r2
 800770c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800770e:	79fb      	ldrb	r3, [r7, #7]
 8007710:	2b01      	cmp	r3, #1
 8007712:	d11e      	bne.n	8007752 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	695b      	ldr	r3, [r3, #20]
 8007718:	2b00      	cmp	r3, #0
 800771a:	d009      	beq.n	8007730 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	015a      	lsls	r2, r3, #5
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	4413      	add	r3, r2
 8007724:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007728:	461a      	mov	r2, r3
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	015a      	lsls	r2, r3, #5
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	4413      	add	r3, r2
 8007738:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	0151      	lsls	r1, r2, #5
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	440a      	add	r2, r1
 8007746:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800774a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800774e:	6013      	str	r3, [r2, #0]
 8007750:	e097      	b.n	8007882 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	015a      	lsls	r2, r3, #5
 8007756:	697b      	ldr	r3, [r7, #20]
 8007758:	4413      	add	r3, r2
 800775a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	693a      	ldr	r2, [r7, #16]
 8007762:	0151      	lsls	r1, r2, #5
 8007764:	697a      	ldr	r2, [r7, #20]
 8007766:	440a      	add	r2, r1
 8007768:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800776c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007770:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	699b      	ldr	r3, [r3, #24]
 8007776:	2b00      	cmp	r3, #0
 8007778:	f000 8083 	beq.w	8007882 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007782:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	781b      	ldrb	r3, [r3, #0]
 8007788:	f003 030f 	and.w	r3, r3, #15
 800778c:	2101      	movs	r1, #1
 800778e:	fa01 f303 	lsl.w	r3, r1, r3
 8007792:	6979      	ldr	r1, [r7, #20]
 8007794:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007798:	4313      	orrs	r3, r2
 800779a:	634b      	str	r3, [r1, #52]	; 0x34
 800779c:	e071      	b.n	8007882 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	015a      	lsls	r2, r3, #5
 80077a2:	697b      	ldr	r3, [r7, #20]
 80077a4:	4413      	add	r3, r2
 80077a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077aa:	691b      	ldr	r3, [r3, #16]
 80077ac:	693a      	ldr	r2, [r7, #16]
 80077ae:	0151      	lsls	r1, r2, #5
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	440a      	add	r2, r1
 80077b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077b8:	0cdb      	lsrs	r3, r3, #19
 80077ba:	04db      	lsls	r3, r3, #19
 80077bc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	015a      	lsls	r2, r3, #5
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	4413      	add	r3, r2
 80077c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	693a      	ldr	r2, [r7, #16]
 80077ce:	0151      	lsls	r1, r2, #5
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	440a      	add	r2, r1
 80077d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80077dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80077e0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d003      	beq.n	80077f2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	68da      	ldr	r2, [r3, #12]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	68da      	ldr	r2, [r3, #12]
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	015a      	lsls	r2, r3, #5
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	4413      	add	r3, r2
 8007802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	0151      	lsls	r1, r2, #5
 800780c:	697a      	ldr	r2, [r7, #20]
 800780e:	440a      	add	r2, r1
 8007810:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007814:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007818:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	015a      	lsls	r2, r3, #5
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	4413      	add	r3, r2
 8007822:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007826:	691a      	ldr	r2, [r3, #16]
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	69db      	ldr	r3, [r3, #28]
 800782c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007830:	6939      	ldr	r1, [r7, #16]
 8007832:	0148      	lsls	r0, r1, #5
 8007834:	6979      	ldr	r1, [r7, #20]
 8007836:	4401      	add	r1, r0
 8007838:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800783c:	4313      	orrs	r3, r2
 800783e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007840:	79fb      	ldrb	r3, [r7, #7]
 8007842:	2b01      	cmp	r3, #1
 8007844:	d10d      	bne.n	8007862 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d009      	beq.n	8007862 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	6919      	ldr	r1, [r3, #16]
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	015a      	lsls	r2, r3, #5
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	4413      	add	r3, r2
 800785a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800785e:	460a      	mov	r2, r1
 8007860:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	015a      	lsls	r2, r3, #5
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	4413      	add	r3, r2
 800786a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	693a      	ldr	r2, [r7, #16]
 8007872:	0151      	lsls	r1, r2, #5
 8007874:	697a      	ldr	r2, [r7, #20]
 8007876:	440a      	add	r2, r1
 8007878:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800787c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007880:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007882:	2300      	movs	r3, #0
}
 8007884:	4618      	mov	r0, r3
 8007886:	371c      	adds	r7, #28
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr

08007890 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007890:	b480      	push	{r7}
 8007892:	b087      	sub	sp, #28
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800789a:	2300      	movs	r3, #0
 800789c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800789e:	2300      	movs	r3, #0
 80078a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	785b      	ldrb	r3, [r3, #1]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d14a      	bne.n	8007944 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80078ae:	683b      	ldr	r3, [r7, #0]
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	015a      	lsls	r2, r3, #5
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	4413      	add	r3, r2
 80078b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078c6:	f040 8086 	bne.w	80079d6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80078ca:	683b      	ldr	r3, [r7, #0]
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	015a      	lsls	r2, r3, #5
 80078d0:	693b      	ldr	r3, [r7, #16]
 80078d2:	4413      	add	r3, r2
 80078d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	683a      	ldr	r2, [r7, #0]
 80078dc:	7812      	ldrb	r2, [r2, #0]
 80078de:	0151      	lsls	r1, r2, #5
 80078e0:	693a      	ldr	r2, [r7, #16]
 80078e2:	440a      	add	r2, r1
 80078e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078e8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80078ec:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	015a      	lsls	r2, r3, #5
 80078f4:	693b      	ldr	r3, [r7, #16]
 80078f6:	4413      	add	r3, r2
 80078f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	683a      	ldr	r2, [r7, #0]
 8007900:	7812      	ldrb	r2, [r2, #0]
 8007902:	0151      	lsls	r1, r2, #5
 8007904:	693a      	ldr	r2, [r7, #16]
 8007906:	440a      	add	r2, r1
 8007908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800790c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007910:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	3301      	adds	r3, #1
 8007916:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	f242 7210 	movw	r2, #10000	; 0x2710
 800791e:	4293      	cmp	r3, r2
 8007920:	d902      	bls.n	8007928 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007922:	2301      	movs	r3, #1
 8007924:	75fb      	strb	r3, [r7, #23]
          break;
 8007926:	e056      	b.n	80079d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	015a      	lsls	r2, r3, #5
 800792e:	693b      	ldr	r3, [r7, #16]
 8007930:	4413      	add	r3, r2
 8007932:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800793c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007940:	d0e7      	beq.n	8007912 <USB_EPStopXfer+0x82>
 8007942:	e048      	b.n	80079d6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	015a      	lsls	r2, r3, #5
 800794a:	693b      	ldr	r3, [r7, #16]
 800794c:	4413      	add	r3, r2
 800794e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007958:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800795c:	d13b      	bne.n	80079d6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	015a      	lsls	r2, r3, #5
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	4413      	add	r3, r2
 8007968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	683a      	ldr	r2, [r7, #0]
 8007970:	7812      	ldrb	r2, [r2, #0]
 8007972:	0151      	lsls	r1, r2, #5
 8007974:	693a      	ldr	r2, [r7, #16]
 8007976:	440a      	add	r2, r1
 8007978:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800797c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007980:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	693b      	ldr	r3, [r7, #16]
 800798a:	4413      	add	r3, r2
 800798c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	683a      	ldr	r2, [r7, #0]
 8007994:	7812      	ldrb	r2, [r2, #0]
 8007996:	0151      	lsls	r1, r2, #5
 8007998:	693a      	ldr	r2, [r7, #16]
 800799a:	440a      	add	r2, r1
 800799c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80079a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079a4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3301      	adds	r3, #1
 80079aa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f242 7210 	movw	r2, #10000	; 0x2710
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d902      	bls.n	80079bc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	75fb      	strb	r3, [r7, #23]
          break;
 80079ba:	e00c      	b.n	80079d6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80079bc:	683b      	ldr	r3, [r7, #0]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	015a      	lsls	r2, r3, #5
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	4413      	add	r3, r2
 80079c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80079d0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80079d4:	d0e7      	beq.n	80079a6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80079d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079d8:	4618      	mov	r0, r3
 80079da:	371c      	adds	r7, #28
 80079dc:	46bd      	mov	sp, r7
 80079de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e2:	4770      	bx	lr

080079e4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b089      	sub	sp, #36	; 0x24
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	4611      	mov	r1, r2
 80079f0:	461a      	mov	r2, r3
 80079f2:	460b      	mov	r3, r1
 80079f4:	71fb      	strb	r3, [r7, #7]
 80079f6:	4613      	mov	r3, r2
 80079f8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007a02:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d123      	bne.n	8007a52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8007a0a:	88bb      	ldrh	r3, [r7, #4]
 8007a0c:	3303      	adds	r3, #3
 8007a0e:	089b      	lsrs	r3, r3, #2
 8007a10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007a12:	2300      	movs	r3, #0
 8007a14:	61bb      	str	r3, [r7, #24]
 8007a16:	e018      	b.n	8007a4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007a18:	79fb      	ldrb	r3, [r7, #7]
 8007a1a:	031a      	lsls	r2, r3, #12
 8007a1c:	697b      	ldr	r3, [r7, #20]
 8007a1e:	4413      	add	r3, r2
 8007a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a24:	461a      	mov	r2, r3
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007a2c:	69fb      	ldr	r3, [r7, #28]
 8007a2e:	3301      	adds	r3, #1
 8007a30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a32:	69fb      	ldr	r3, [r7, #28]
 8007a34:	3301      	adds	r3, #1
 8007a36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a38:	69fb      	ldr	r3, [r7, #28]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	3301      	adds	r3, #1
 8007a42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007a44:	69bb      	ldr	r3, [r7, #24]
 8007a46:	3301      	adds	r3, #1
 8007a48:	61bb      	str	r3, [r7, #24]
 8007a4a:	69ba      	ldr	r2, [r7, #24]
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d3e2      	bcc.n	8007a18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3724      	adds	r7, #36	; 0x24
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr

08007a60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b08b      	sub	sp, #44	; 0x2c
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007a76:	88fb      	ldrh	r3, [r7, #6]
 8007a78:	089b      	lsrs	r3, r3, #2
 8007a7a:	b29b      	uxth	r3, r3
 8007a7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007a7e:	88fb      	ldrh	r3, [r7, #6]
 8007a80:	f003 0303 	and.w	r3, r3, #3
 8007a84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007a86:	2300      	movs	r3, #0
 8007a88:	623b      	str	r3, [r7, #32]
 8007a8a:	e014      	b.n	8007ab6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007a92:	681a      	ldr	r2, [r3, #0]
 8007a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a96:	601a      	str	r2, [r3, #0]
    pDest++;
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa0:	3301      	adds	r3, #1
 8007aa2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa6:	3301      	adds	r3, #1
 8007aa8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aac:	3301      	adds	r3, #1
 8007aae:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007ab0:	6a3b      	ldr	r3, [r7, #32]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	623b      	str	r3, [r7, #32]
 8007ab6:	6a3a      	ldr	r2, [r7, #32]
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	429a      	cmp	r2, r3
 8007abc:	d3e6      	bcc.n	8007a8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007abe:	8bfb      	ldrh	r3, [r7, #30]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d01e      	beq.n	8007b02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f107 0310 	add.w	r3, r7, #16
 8007ad4:	6812      	ldr	r2, [r2, #0]
 8007ad6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007ad8:	693a      	ldr	r2, [r7, #16]
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	b2db      	uxtb	r3, r3
 8007ade:	00db      	lsls	r3, r3, #3
 8007ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8007ae4:	b2da      	uxtb	r2, r3
 8007ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae8:	701a      	strb	r2, [r3, #0]
      i++;
 8007aea:	6a3b      	ldr	r3, [r7, #32]
 8007aec:	3301      	adds	r3, #1
 8007aee:	623b      	str	r3, [r7, #32]
      pDest++;
 8007af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007af2:	3301      	adds	r3, #1
 8007af4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007af6:	8bfb      	ldrh	r3, [r7, #30]
 8007af8:	3b01      	subs	r3, #1
 8007afa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007afc:	8bfb      	ldrh	r3, [r7, #30]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d1ea      	bne.n	8007ad8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	372c      	adds	r7, #44	; 0x2c
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0e:	4770      	bx	lr

08007b10 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b085      	sub	sp, #20
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
 8007b18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	785b      	ldrb	r3, [r3, #1]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d12c      	bne.n	8007b86 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	015a      	lsls	r2, r3, #5
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4413      	add	r3, r2
 8007b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	db12      	blt.n	8007b64 <USB_EPSetStall+0x54>
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00f      	beq.n	8007b64 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	68ba      	ldr	r2, [r7, #8]
 8007b54:	0151      	lsls	r1, r2, #5
 8007b56:	68fa      	ldr	r2, [r7, #12]
 8007b58:	440a      	add	r2, r1
 8007b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007b62:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	68ba      	ldr	r2, [r7, #8]
 8007b74:	0151      	lsls	r1, r2, #5
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	440a      	add	r2, r1
 8007b7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007b7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007b82:	6013      	str	r3, [r2, #0]
 8007b84:	e02b      	b.n	8007bde <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	015a      	lsls	r2, r3, #5
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	4413      	add	r3, r2
 8007b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	db12      	blt.n	8007bbe <USB_EPSetStall+0xae>
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00f      	beq.n	8007bbe <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	015a      	lsls	r2, r3, #5
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	4413      	add	r3, r2
 8007ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	68ba      	ldr	r2, [r7, #8]
 8007bae:	0151      	lsls	r1, r2, #5
 8007bb0:	68fa      	ldr	r2, [r7, #12]
 8007bb2:	440a      	add	r2, r1
 8007bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bb8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007bbc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68ba      	ldr	r2, [r7, #8]
 8007bce:	0151      	lsls	r1, r2, #5
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	440a      	add	r2, r1
 8007bd4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bd8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007bdc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007bde:	2300      	movs	r3, #0
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b085      	sub	sp, #20
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007bfa:	683b      	ldr	r3, [r7, #0]
 8007bfc:	781b      	ldrb	r3, [r3, #0]
 8007bfe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007c00:	683b      	ldr	r3, [r7, #0]
 8007c02:	785b      	ldrb	r3, [r3, #1]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d128      	bne.n	8007c5a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	68ba      	ldr	r2, [r7, #8]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	68fa      	ldr	r2, [r7, #12]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c22:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c26:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	791b      	ldrb	r3, [r3, #4]
 8007c2c:	2b03      	cmp	r3, #3
 8007c2e:	d003      	beq.n	8007c38 <USB_EPClearStall+0x4c>
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	791b      	ldrb	r3, [r3, #4]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d138      	bne.n	8007caa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	68ba      	ldr	r2, [r7, #8]
 8007c48:	0151      	lsls	r1, r2, #5
 8007c4a:	68fa      	ldr	r2, [r7, #12]
 8007c4c:	440a      	add	r2, r1
 8007c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c56:	6013      	str	r3, [r2, #0]
 8007c58:	e027      	b.n	8007caa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	015a      	lsls	r2, r3, #5
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	4413      	add	r3, r2
 8007c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	68ba      	ldr	r2, [r7, #8]
 8007c6a:	0151      	lsls	r1, r2, #5
 8007c6c:	68fa      	ldr	r2, [r7, #12]
 8007c6e:	440a      	add	r2, r1
 8007c70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007c74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007c78:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	791b      	ldrb	r3, [r3, #4]
 8007c7e:	2b03      	cmp	r3, #3
 8007c80:	d003      	beq.n	8007c8a <USB_EPClearStall+0x9e>
 8007c82:	683b      	ldr	r3, [r7, #0]
 8007c84:	791b      	ldrb	r3, [r3, #4]
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d10f      	bne.n	8007caa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	015a      	lsls	r2, r3, #5
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	4413      	add	r3, r2
 8007c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68ba      	ldr	r2, [r7, #8]
 8007c9a:	0151      	lsls	r1, r2, #5
 8007c9c:	68fa      	ldr	r2, [r7, #12]
 8007c9e:	440a      	add	r2, r1
 8007ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ca8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007caa:	2300      	movs	r3, #0
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b085      	sub	sp, #20
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
 8007cc0:	460b      	mov	r3, r1
 8007cc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68fa      	ldr	r2, [r7, #12]
 8007cd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007cd6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007cda:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	78fb      	ldrb	r3, [r7, #3]
 8007ce6:	011b      	lsls	r3, r3, #4
 8007ce8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007cec:	68f9      	ldr	r1, [r7, #12]
 8007cee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007cf2:	4313      	orrs	r3, r2
 8007cf4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3714      	adds	r7, #20
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d04:	b480      	push	{r7}
 8007d06:	b085      	sub	sp, #20
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d1e:	f023 0303 	bic.w	r3, r3, #3
 8007d22:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	68fa      	ldr	r2, [r7, #12]
 8007d2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d32:	f023 0302 	bic.w	r3, r3, #2
 8007d36:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d38:	2300      	movs	r3, #0
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3714      	adds	r7, #20
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007d46:	b480      	push	{r7}
 8007d48:	b085      	sub	sp, #20
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68fa      	ldr	r2, [r7, #12]
 8007d5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007d60:	f023 0303 	bic.w	r3, r3, #3
 8007d64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	68fa      	ldr	r2, [r7, #12]
 8007d70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d74:	f043 0302 	orr.w	r3, r3, #2
 8007d78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d7a:	2300      	movs	r3, #0
}
 8007d7c:	4618      	mov	r0, r3
 8007d7e:	3714      	adds	r7, #20
 8007d80:	46bd      	mov	sp, r7
 8007d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d86:	4770      	bx	lr

08007d88 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b085      	sub	sp, #20
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	695b      	ldr	r3, [r3, #20]
 8007d94:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	699b      	ldr	r3, [r3, #24]
 8007d9a:	68fa      	ldr	r2, [r7, #12]
 8007d9c:	4013      	ands	r3, r2
 8007d9e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007da0:	68fb      	ldr	r3, [r7, #12]
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3714      	adds	r7, #20
 8007da6:	46bd      	mov	sp, r7
 8007da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dac:	4770      	bx	lr

08007dae <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007dae:	b480      	push	{r7}
 8007db0:	b085      	sub	sp, #20
 8007db2:	af00      	add	r7, sp, #0
 8007db4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dca:	69db      	ldr	r3, [r3, #28]
 8007dcc:	68ba      	ldr	r2, [r7, #8]
 8007dce:	4013      	ands	r3, r2
 8007dd0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007dd2:	68bb      	ldr	r3, [r7, #8]
 8007dd4:	0c1b      	lsrs	r3, r3, #16
}
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	3714      	adds	r7, #20
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b085      	sub	sp, #20
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dfe:	69db      	ldr	r3, [r3, #28]
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	4013      	ands	r3, r2
 8007e04:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	b29b      	uxth	r3, r3
}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3714      	adds	r7, #20
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e14:	4770      	bx	lr

08007e16 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e16:	b480      	push	{r7}
 8007e18:	b085      	sub	sp, #20
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6078      	str	r0, [r7, #4]
 8007e1e:	460b      	mov	r3, r1
 8007e20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007e26:	78fb      	ldrb	r3, [r7, #3]
 8007e28:	015a      	lsls	r2, r3, #5
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e32:	689b      	ldr	r3, [r3, #8]
 8007e34:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3c:	695b      	ldr	r3, [r3, #20]
 8007e3e:	68ba      	ldr	r2, [r7, #8]
 8007e40:	4013      	ands	r3, r2
 8007e42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007e44:	68bb      	ldr	r3, [r7, #8]
}
 8007e46:	4618      	mov	r0, r3
 8007e48:	3714      	adds	r7, #20
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr

08007e52 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b087      	sub	sp, #28
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
 8007e5a:	460b      	mov	r3, r1
 8007e5c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e74:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007e76:	78fb      	ldrb	r3, [r7, #3]
 8007e78:	f003 030f 	and.w	r3, r3, #15
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	fa22 f303 	lsr.w	r3, r2, r3
 8007e82:	01db      	lsls	r3, r3, #7
 8007e84:	b2db      	uxtb	r3, r3
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007e8c:	78fb      	ldrb	r3, [r7, #3]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	697b      	ldr	r3, [r7, #20]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	693a      	ldr	r2, [r7, #16]
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007ea0:	68bb      	ldr	r3, [r7, #8]
}
 8007ea2:	4618      	mov	r0, r3
 8007ea4:	371c      	adds	r7, #28
 8007ea6:	46bd      	mov	sp, r7
 8007ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eac:	4770      	bx	lr

08007eae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007eae:	b480      	push	{r7}
 8007eb0:	b083      	sub	sp, #12
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	f003 0301 	and.w	r3, r3, #1
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	370c      	adds	r7, #12
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr

08007eca <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007eca:	b480      	push	{r7}
 8007ecc:	b085      	sub	sp, #20
 8007ece:	af00      	add	r7, sp, #0
 8007ed0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	68fa      	ldr	r2, [r7, #12]
 8007ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ee4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007ee8:	f023 0307 	bic.w	r3, r3, #7
 8007eec:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ef4:	685b      	ldr	r3, [r3, #4]
 8007ef6:	68fa      	ldr	r2, [r7, #12]
 8007ef8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007efc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f00:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007f02:	2300      	movs	r3, #0
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3714      	adds	r7, #20
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr

08007f10 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b087      	sub	sp, #28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	460b      	mov	r3, r1
 8007f1a:	607a      	str	r2, [r7, #4]
 8007f1c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	333c      	adds	r3, #60	; 0x3c
 8007f26:	3304      	adds	r3, #4
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007f2c:	693b      	ldr	r3, [r7, #16]
 8007f2e:	4a26      	ldr	r2, [pc, #152]	; (8007fc8 <USB_EP0_OutStart+0xb8>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d90a      	bls.n	8007f4a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f44:	d101      	bne.n	8007f4a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007f46:	2300      	movs	r3, #0
 8007f48:	e037      	b.n	8007fba <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f50:	461a      	mov	r2, r3
 8007f52:	2300      	movs	r3, #0
 8007f54:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007f56:	697b      	ldr	r3, [r7, #20]
 8007f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f5c:	691b      	ldr	r3, [r3, #16]
 8007f5e:	697a      	ldr	r2, [r7, #20]
 8007f60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f64:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007f68:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f70:	691b      	ldr	r3, [r3, #16]
 8007f72:	697a      	ldr	r2, [r7, #20]
 8007f74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f78:	f043 0318 	orr.w	r3, r3, #24
 8007f7c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007f7e:	697b      	ldr	r3, [r7, #20]
 8007f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f84:	691b      	ldr	r3, [r3, #16]
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f8c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007f90:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007f92:	7afb      	ldrb	r3, [r7, #11]
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d10f      	bne.n	8007fb8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007f98:	697b      	ldr	r3, [r7, #20]
 8007f9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	697a      	ldr	r2, [r7, #20]
 8007fae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fb2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007fb6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	371c      	adds	r7, #28
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
 8007fc6:	bf00      	nop
 8007fc8:	4f54300a 	.word	0x4f54300a

08007fcc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007fcc:	b480      	push	{r7}
 8007fce:	b085      	sub	sp, #20
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	4a13      	ldr	r2, [pc, #76]	; (8008030 <USB_CoreReset+0x64>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d901      	bls.n	8007fea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007fe6:	2303      	movs	r3, #3
 8007fe8:	e01b      	b.n	8008022 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	691b      	ldr	r3, [r3, #16]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	daf2      	bge.n	8007fd8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	f043 0201 	orr.w	r2, r3, #1
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3301      	adds	r3, #1
 8008006:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4a09      	ldr	r2, [pc, #36]	; (8008030 <USB_CoreReset+0x64>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d901      	bls.n	8008014 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e006      	b.n	8008022 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	f003 0301 	and.w	r3, r3, #1
 800801c:	2b01      	cmp	r3, #1
 800801e:	d0f0      	beq.n	8008002 <USB_CoreReset+0x36>

  return HAL_OK;
 8008020:	2300      	movs	r3, #0
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	00030d40 	.word	0x00030d40

08008034 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	460b      	mov	r3, r1
 800803e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008040:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8008044:	f002 fc9e 	bl	800a984 <USBD_static_malloc>
 8008048:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d109      	bne.n	8008064 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	32b0      	adds	r2, #176	; 0xb0
 800805a:	2100      	movs	r1, #0
 800805c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8008060:	2302      	movs	r3, #2
 8008062:	e0d4      	b.n	800820e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8008064:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8008068:	2100      	movs	r1, #0
 800806a:	68f8      	ldr	r0, [r7, #12]
 800806c:	f002 fd0a 	bl	800aa84 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	32b0      	adds	r2, #176	; 0xb0
 800807a:	68f9      	ldr	r1, [r7, #12]
 800807c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	32b0      	adds	r2, #176	; 0xb0
 800808a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	7c1b      	ldrb	r3, [r3, #16]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d138      	bne.n	800810e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800809c:	4b5e      	ldr	r3, [pc, #376]	; (8008218 <USBD_CDC_Init+0x1e4>)
 800809e:	7819      	ldrb	r1, [r3, #0]
 80080a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080a4:	2202      	movs	r2, #2
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f002 fb49 	bl	800a73e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80080ac:	4b5a      	ldr	r3, [pc, #360]	; (8008218 <USBD_CDC_Init+0x1e4>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	f003 020f 	and.w	r2, r3, #15
 80080b4:	6879      	ldr	r1, [r7, #4]
 80080b6:	4613      	mov	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	440b      	add	r3, r1
 80080c0:	3324      	adds	r3, #36	; 0x24
 80080c2:	2201      	movs	r2, #1
 80080c4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80080c6:	4b55      	ldr	r3, [pc, #340]	; (800821c <USBD_CDC_Init+0x1e8>)
 80080c8:	7819      	ldrb	r1, [r3, #0]
 80080ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080ce:	2202      	movs	r2, #2
 80080d0:	6878      	ldr	r0, [r7, #4]
 80080d2:	f002 fb34 	bl	800a73e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80080d6:	4b51      	ldr	r3, [pc, #324]	; (800821c <USBD_CDC_Init+0x1e8>)
 80080d8:	781b      	ldrb	r3, [r3, #0]
 80080da:	f003 020f 	and.w	r2, r3, #15
 80080de:	6879      	ldr	r1, [r7, #4]
 80080e0:	4613      	mov	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	4413      	add	r3, r2
 80080e6:	009b      	lsls	r3, r3, #2
 80080e8:	440b      	add	r3, r1
 80080ea:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080ee:	2201      	movs	r2, #1
 80080f0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80080f2:	4b4b      	ldr	r3, [pc, #300]	; (8008220 <USBD_CDC_Init+0x1ec>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	f003 020f 	and.w	r2, r3, #15
 80080fa:	6879      	ldr	r1, [r7, #4]
 80080fc:	4613      	mov	r3, r2
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	4413      	add	r3, r2
 8008102:	009b      	lsls	r3, r3, #2
 8008104:	440b      	add	r3, r1
 8008106:	3326      	adds	r3, #38	; 0x26
 8008108:	2210      	movs	r2, #16
 800810a:	801a      	strh	r2, [r3, #0]
 800810c:	e035      	b.n	800817a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800810e:	4b42      	ldr	r3, [pc, #264]	; (8008218 <USBD_CDC_Init+0x1e4>)
 8008110:	7819      	ldrb	r1, [r3, #0]
 8008112:	2340      	movs	r3, #64	; 0x40
 8008114:	2202      	movs	r2, #2
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f002 fb11 	bl	800a73e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800811c:	4b3e      	ldr	r3, [pc, #248]	; (8008218 <USBD_CDC_Init+0x1e4>)
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	f003 020f 	and.w	r2, r3, #15
 8008124:	6879      	ldr	r1, [r7, #4]
 8008126:	4613      	mov	r3, r2
 8008128:	009b      	lsls	r3, r3, #2
 800812a:	4413      	add	r3, r2
 800812c:	009b      	lsls	r3, r3, #2
 800812e:	440b      	add	r3, r1
 8008130:	3324      	adds	r3, #36	; 0x24
 8008132:	2201      	movs	r2, #1
 8008134:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008136:	4b39      	ldr	r3, [pc, #228]	; (800821c <USBD_CDC_Init+0x1e8>)
 8008138:	7819      	ldrb	r1, [r3, #0]
 800813a:	2340      	movs	r3, #64	; 0x40
 800813c:	2202      	movs	r2, #2
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f002 fafd 	bl	800a73e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008144:	4b35      	ldr	r3, [pc, #212]	; (800821c <USBD_CDC_Init+0x1e8>)
 8008146:	781b      	ldrb	r3, [r3, #0]
 8008148:	f003 020f 	and.w	r2, r3, #15
 800814c:	6879      	ldr	r1, [r7, #4]
 800814e:	4613      	mov	r3, r2
 8008150:	009b      	lsls	r3, r3, #2
 8008152:	4413      	add	r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	440b      	add	r3, r1
 8008158:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800815c:	2201      	movs	r2, #1
 800815e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8008160:	4b2f      	ldr	r3, [pc, #188]	; (8008220 <USBD_CDC_Init+0x1ec>)
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	f003 020f 	and.w	r2, r3, #15
 8008168:	6879      	ldr	r1, [r7, #4]
 800816a:	4613      	mov	r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	4413      	add	r3, r2
 8008170:	009b      	lsls	r3, r3, #2
 8008172:	440b      	add	r3, r1
 8008174:	3326      	adds	r3, #38	; 0x26
 8008176:	2210      	movs	r2, #16
 8008178:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800817a:	4b29      	ldr	r3, [pc, #164]	; (8008220 <USBD_CDC_Init+0x1ec>)
 800817c:	7819      	ldrb	r1, [r3, #0]
 800817e:	2308      	movs	r3, #8
 8008180:	2203      	movs	r2, #3
 8008182:	6878      	ldr	r0, [r7, #4]
 8008184:	f002 fadb 	bl	800a73e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8008188:	4b25      	ldr	r3, [pc, #148]	; (8008220 <USBD_CDC_Init+0x1ec>)
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	f003 020f 	and.w	r2, r3, #15
 8008190:	6879      	ldr	r1, [r7, #4]
 8008192:	4613      	mov	r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	4413      	add	r3, r2
 8008198:	009b      	lsls	r3, r3, #2
 800819a:	440b      	add	r3, r1
 800819c:	3324      	adds	r3, #36	; 0x24
 800819e:	2201      	movs	r2, #1
 80081a0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	2200      	movs	r2, #0
 80081a6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	33b0      	adds	r3, #176	; 0xb0
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	2200      	movs	r2, #0
 80081c2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d101      	bne.n	80081dc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80081d8:	2302      	movs	r3, #2
 80081da:	e018      	b.n	800820e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	7c1b      	ldrb	r3, [r3, #16]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d10a      	bne.n	80081fa <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081e4:	4b0d      	ldr	r3, [pc, #52]	; (800821c <USBD_CDC_Init+0x1e8>)
 80081e6:	7819      	ldrb	r1, [r3, #0]
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80081ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f002 fb92 	bl	800a91c <USBD_LL_PrepareReceive>
 80081f8:	e008      	b.n	800820c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80081fa:	4b08      	ldr	r3, [pc, #32]	; (800821c <USBD_CDC_Init+0x1e8>)
 80081fc:	7819      	ldrb	r1, [r3, #0]
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008204:	2340      	movs	r3, #64	; 0x40
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f002 fb88 	bl	800a91c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800820c:	2300      	movs	r3, #0
}
 800820e:	4618      	mov	r0, r3
 8008210:	3710      	adds	r7, #16
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	200000b3 	.word	0x200000b3
 800821c:	200000b4 	.word	0x200000b4
 8008220:	200000b5 	.word	0x200000b5

08008224 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	460b      	mov	r3, r1
 800822e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8008230:	4b3a      	ldr	r3, [pc, #232]	; (800831c <USBD_CDC_DeInit+0xf8>)
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	4619      	mov	r1, r3
 8008236:	6878      	ldr	r0, [r7, #4]
 8008238:	f002 faa7 	bl	800a78a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800823c:	4b37      	ldr	r3, [pc, #220]	; (800831c <USBD_CDC_DeInit+0xf8>)
 800823e:	781b      	ldrb	r3, [r3, #0]
 8008240:	f003 020f 	and.w	r2, r3, #15
 8008244:	6879      	ldr	r1, [r7, #4]
 8008246:	4613      	mov	r3, r2
 8008248:	009b      	lsls	r3, r3, #2
 800824a:	4413      	add	r3, r2
 800824c:	009b      	lsls	r3, r3, #2
 800824e:	440b      	add	r3, r1
 8008250:	3324      	adds	r3, #36	; 0x24
 8008252:	2200      	movs	r2, #0
 8008254:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8008256:	4b32      	ldr	r3, [pc, #200]	; (8008320 <USBD_CDC_DeInit+0xfc>)
 8008258:	781b      	ldrb	r3, [r3, #0]
 800825a:	4619      	mov	r1, r3
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f002 fa94 	bl	800a78a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8008262:	4b2f      	ldr	r3, [pc, #188]	; (8008320 <USBD_CDC_DeInit+0xfc>)
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	f003 020f 	and.w	r2, r3, #15
 800826a:	6879      	ldr	r1, [r7, #4]
 800826c:	4613      	mov	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	440b      	add	r3, r1
 8008276:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800827a:	2200      	movs	r2, #0
 800827c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800827e:	4b29      	ldr	r3, [pc, #164]	; (8008324 <USBD_CDC_DeInit+0x100>)
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	4619      	mov	r1, r3
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f002 fa80 	bl	800a78a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800828a:	4b26      	ldr	r3, [pc, #152]	; (8008324 <USBD_CDC_DeInit+0x100>)
 800828c:	781b      	ldrb	r3, [r3, #0]
 800828e:	f003 020f 	and.w	r2, r3, #15
 8008292:	6879      	ldr	r1, [r7, #4]
 8008294:	4613      	mov	r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	4413      	add	r3, r2
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	440b      	add	r3, r1
 800829e:	3324      	adds	r3, #36	; 0x24
 80082a0:	2200      	movs	r2, #0
 80082a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80082a4:	4b1f      	ldr	r3, [pc, #124]	; (8008324 <USBD_CDC_DeInit+0x100>)
 80082a6:	781b      	ldrb	r3, [r3, #0]
 80082a8:	f003 020f 	and.w	r2, r3, #15
 80082ac:	6879      	ldr	r1, [r7, #4]
 80082ae:	4613      	mov	r3, r2
 80082b0:	009b      	lsls	r3, r3, #2
 80082b2:	4413      	add	r3, r2
 80082b4:	009b      	lsls	r3, r3, #2
 80082b6:	440b      	add	r3, r1
 80082b8:	3326      	adds	r3, #38	; 0x26
 80082ba:	2200      	movs	r2, #0
 80082bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	32b0      	adds	r2, #176	; 0xb0
 80082c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d01f      	beq.n	8008310 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	33b0      	adds	r3, #176	; 0xb0
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	4413      	add	r3, r2
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	685b      	ldr	r3, [r3, #4]
 80082e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	32b0      	adds	r2, #176	; 0xb0
 80082ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082f2:	4618      	mov	r0, r3
 80082f4:	f002 fb54 	bl	800a9a0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	32b0      	adds	r2, #176	; 0xb0
 8008302:	2100      	movs	r1, #0
 8008304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2200      	movs	r2, #0
 800830c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008310:	2300      	movs	r3, #0
}
 8008312:	4618      	mov	r0, r3
 8008314:	3708      	adds	r7, #8
 8008316:	46bd      	mov	sp, r7
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	200000b3 	.word	0x200000b3
 8008320:	200000b4 	.word	0x200000b4
 8008324:	200000b5 	.word	0x200000b5

08008328 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	32b0      	adds	r2, #176	; 0xb0
 800833c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008340:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008342:	2300      	movs	r3, #0
 8008344:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800834a:	2300      	movs	r3, #0
 800834c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	2b00      	cmp	r3, #0
 8008352:	d101      	bne.n	8008358 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008354:	2303      	movs	r3, #3
 8008356:	e0bf      	b.n	80084d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008360:	2b00      	cmp	r3, #0
 8008362:	d050      	beq.n	8008406 <USBD_CDC_Setup+0xde>
 8008364:	2b20      	cmp	r3, #32
 8008366:	f040 80af 	bne.w	80084c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800836a:	683b      	ldr	r3, [r7, #0]
 800836c:	88db      	ldrh	r3, [r3, #6]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d03a      	beq.n	80083e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	b25b      	sxtb	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	da1b      	bge.n	80083b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008382:	687a      	ldr	r2, [r7, #4]
 8008384:	33b0      	adds	r3, #176	; 0xb0
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	4413      	add	r3, r2
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	689b      	ldr	r3, [r3, #8]
 800838e:	683a      	ldr	r2, [r7, #0]
 8008390:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008392:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008394:	683a      	ldr	r2, [r7, #0]
 8008396:	88d2      	ldrh	r2, [r2, #6]
 8008398:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	88db      	ldrh	r3, [r3, #6]
 800839e:	2b07      	cmp	r3, #7
 80083a0:	bf28      	it	cs
 80083a2:	2307      	movcs	r3, #7
 80083a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80083a6:	693b      	ldr	r3, [r7, #16]
 80083a8:	89fa      	ldrh	r2, [r7, #14]
 80083aa:	4619      	mov	r1, r3
 80083ac:	6878      	ldr	r0, [r7, #4]
 80083ae:	f001 fd89 	bl	8009ec4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80083b2:	e090      	b.n	80084d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80083b4:	683b      	ldr	r3, [r7, #0]
 80083b6:	785a      	ldrb	r2, [r3, #1]
 80083b8:	693b      	ldr	r3, [r7, #16]
 80083ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80083be:	683b      	ldr	r3, [r7, #0]
 80083c0:	88db      	ldrh	r3, [r3, #6]
 80083c2:	2b3f      	cmp	r3, #63	; 0x3f
 80083c4:	d803      	bhi.n	80083ce <USBD_CDC_Setup+0xa6>
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	88db      	ldrh	r3, [r3, #6]
 80083ca:	b2da      	uxtb	r2, r3
 80083cc:	e000      	b.n	80083d0 <USBD_CDC_Setup+0xa8>
 80083ce:	2240      	movs	r2, #64	; 0x40
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80083d6:	6939      	ldr	r1, [r7, #16]
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80083de:	461a      	mov	r2, r3
 80083e0:	6878      	ldr	r0, [r7, #4]
 80083e2:	f001 fd9b 	bl	8009f1c <USBD_CtlPrepareRx>
      break;
 80083e6:	e076      	b.n	80084d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	33b0      	adds	r3, #176	; 0xb0
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	4413      	add	r3, r2
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	689b      	ldr	r3, [r3, #8]
 80083fa:	683a      	ldr	r2, [r7, #0]
 80083fc:	7850      	ldrb	r0, [r2, #1]
 80083fe:	2200      	movs	r2, #0
 8008400:	6839      	ldr	r1, [r7, #0]
 8008402:	4798      	blx	r3
      break;
 8008404:	e067      	b.n	80084d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	785b      	ldrb	r3, [r3, #1]
 800840a:	2b0b      	cmp	r3, #11
 800840c:	d851      	bhi.n	80084b2 <USBD_CDC_Setup+0x18a>
 800840e:	a201      	add	r2, pc, #4	; (adr r2, 8008414 <USBD_CDC_Setup+0xec>)
 8008410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008414:	08008445 	.word	0x08008445
 8008418:	080084c1 	.word	0x080084c1
 800841c:	080084b3 	.word	0x080084b3
 8008420:	080084b3 	.word	0x080084b3
 8008424:	080084b3 	.word	0x080084b3
 8008428:	080084b3 	.word	0x080084b3
 800842c:	080084b3 	.word	0x080084b3
 8008430:	080084b3 	.word	0x080084b3
 8008434:	080084b3 	.word	0x080084b3
 8008438:	080084b3 	.word	0x080084b3
 800843c:	0800846f 	.word	0x0800846f
 8008440:	08008499 	.word	0x08008499
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800844a:	b2db      	uxtb	r3, r3
 800844c:	2b03      	cmp	r3, #3
 800844e:	d107      	bne.n	8008460 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008450:	f107 030a 	add.w	r3, r7, #10
 8008454:	2202      	movs	r2, #2
 8008456:	4619      	mov	r1, r3
 8008458:	6878      	ldr	r0, [r7, #4]
 800845a:	f001 fd33 	bl	8009ec4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800845e:	e032      	b.n	80084c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008460:	6839      	ldr	r1, [r7, #0]
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f001 fcbd 	bl	8009de2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008468:	2303      	movs	r3, #3
 800846a:	75fb      	strb	r3, [r7, #23]
          break;
 800846c:	e02b      	b.n	80084c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008474:	b2db      	uxtb	r3, r3
 8008476:	2b03      	cmp	r3, #3
 8008478:	d107      	bne.n	800848a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800847a:	f107 030d 	add.w	r3, r7, #13
 800847e:	2201      	movs	r2, #1
 8008480:	4619      	mov	r1, r3
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f001 fd1e 	bl	8009ec4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008488:	e01d      	b.n	80084c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f001 fca8 	bl	8009de2 <USBD_CtlError>
            ret = USBD_FAIL;
 8008492:	2303      	movs	r3, #3
 8008494:	75fb      	strb	r3, [r7, #23]
          break;
 8008496:	e016      	b.n	80084c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800849e:	b2db      	uxtb	r3, r3
 80084a0:	2b03      	cmp	r3, #3
 80084a2:	d00f      	beq.n	80084c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80084a4:	6839      	ldr	r1, [r7, #0]
 80084a6:	6878      	ldr	r0, [r7, #4]
 80084a8:	f001 fc9b 	bl	8009de2 <USBD_CtlError>
            ret = USBD_FAIL;
 80084ac:	2303      	movs	r3, #3
 80084ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80084b0:	e008      	b.n	80084c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80084b2:	6839      	ldr	r1, [r7, #0]
 80084b4:	6878      	ldr	r0, [r7, #4]
 80084b6:	f001 fc94 	bl	8009de2 <USBD_CtlError>
          ret = USBD_FAIL;
 80084ba:	2303      	movs	r3, #3
 80084bc:	75fb      	strb	r3, [r7, #23]
          break;
 80084be:	e002      	b.n	80084c6 <USBD_CDC_Setup+0x19e>
          break;
 80084c0:	bf00      	nop
 80084c2:	e008      	b.n	80084d6 <USBD_CDC_Setup+0x1ae>
          break;
 80084c4:	bf00      	nop
      }
      break;
 80084c6:	e006      	b.n	80084d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80084c8:	6839      	ldr	r1, [r7, #0]
 80084ca:	6878      	ldr	r0, [r7, #4]
 80084cc:	f001 fc89 	bl	8009de2 <USBD_CtlError>
      ret = USBD_FAIL;
 80084d0:	2303      	movs	r3, #3
 80084d2:	75fb      	strb	r3, [r7, #23]
      break;
 80084d4:	bf00      	nop
  }

  return (uint8_t)ret;
 80084d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d8:	4618      	mov	r0, r3
 80084da:	3718      	adds	r7, #24
 80084dc:	46bd      	mov	sp, r7
 80084de:	bd80      	pop	{r7, pc}

080084e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80084e0:	b580      	push	{r7, lr}
 80084e2:	b084      	sub	sp, #16
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
 80084e8:	460b      	mov	r3, r1
 80084ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	32b0      	adds	r2, #176	; 0xb0
 80084fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d101      	bne.n	800850a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008506:	2303      	movs	r3, #3
 8008508:	e065      	b.n	80085d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	32b0      	adds	r2, #176	; 0xb0
 8008514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008518:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800851a:	78fb      	ldrb	r3, [r7, #3]
 800851c:	f003 020f 	and.w	r2, r3, #15
 8008520:	6879      	ldr	r1, [r7, #4]
 8008522:	4613      	mov	r3, r2
 8008524:	009b      	lsls	r3, r3, #2
 8008526:	4413      	add	r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	440b      	add	r3, r1
 800852c:	3318      	adds	r3, #24
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d02f      	beq.n	8008594 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008534:	78fb      	ldrb	r3, [r7, #3]
 8008536:	f003 020f 	and.w	r2, r3, #15
 800853a:	6879      	ldr	r1, [r7, #4]
 800853c:	4613      	mov	r3, r2
 800853e:	009b      	lsls	r3, r3, #2
 8008540:	4413      	add	r3, r2
 8008542:	009b      	lsls	r3, r3, #2
 8008544:	440b      	add	r3, r1
 8008546:	3318      	adds	r3, #24
 8008548:	681a      	ldr	r2, [r3, #0]
 800854a:	78fb      	ldrb	r3, [r7, #3]
 800854c:	f003 010f 	and.w	r1, r3, #15
 8008550:	68f8      	ldr	r0, [r7, #12]
 8008552:	460b      	mov	r3, r1
 8008554:	00db      	lsls	r3, r3, #3
 8008556:	440b      	add	r3, r1
 8008558:	009b      	lsls	r3, r3, #2
 800855a:	4403      	add	r3, r0
 800855c:	3348      	adds	r3, #72	; 0x48
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	fbb2 f1f3 	udiv	r1, r2, r3
 8008564:	fb01 f303 	mul.w	r3, r1, r3
 8008568:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800856a:	2b00      	cmp	r3, #0
 800856c:	d112      	bne.n	8008594 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800856e:	78fb      	ldrb	r3, [r7, #3]
 8008570:	f003 020f 	and.w	r2, r3, #15
 8008574:	6879      	ldr	r1, [r7, #4]
 8008576:	4613      	mov	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	440b      	add	r3, r1
 8008580:	3318      	adds	r3, #24
 8008582:	2200      	movs	r2, #0
 8008584:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008586:	78f9      	ldrb	r1, [r7, #3]
 8008588:	2300      	movs	r3, #0
 800858a:	2200      	movs	r2, #0
 800858c:	6878      	ldr	r0, [r7, #4]
 800858e:	f002 f9a4 	bl	800a8da <USBD_LL_Transmit>
 8008592:	e01f      	b.n	80085d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2200      	movs	r2, #0
 8008598:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085a2:	687a      	ldr	r2, [r7, #4]
 80085a4:	33b0      	adds	r3, #176	; 0xb0
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	691b      	ldr	r3, [r3, #16]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d010      	beq.n	80085d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80085b8:	687a      	ldr	r2, [r7, #4]
 80085ba:	33b0      	adds	r3, #176	; 0xb0
 80085bc:	009b      	lsls	r3, r3, #2
 80085be:	4413      	add	r3, r2
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	691b      	ldr	r3, [r3, #16]
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80085ca:	68ba      	ldr	r2, [r7, #8]
 80085cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80085d0:	78fa      	ldrb	r2, [r7, #3]
 80085d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80085d4:	2300      	movs	r3, #0
}
 80085d6:	4618      	mov	r0, r3
 80085d8:	3710      	adds	r7, #16
 80085da:	46bd      	mov	sp, r7
 80085dc:	bd80      	pop	{r7, pc}

080085de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80085de:	b580      	push	{r7, lr}
 80085e0:	b084      	sub	sp, #16
 80085e2:	af00      	add	r7, sp, #0
 80085e4:	6078      	str	r0, [r7, #4]
 80085e6:	460b      	mov	r3, r1
 80085e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	32b0      	adds	r2, #176	; 0xb0
 80085f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	32b0      	adds	r2, #176	; 0xb0
 8008604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d101      	bne.n	8008610 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800860c:	2303      	movs	r3, #3
 800860e:	e01a      	b.n	8008646 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008610:	78fb      	ldrb	r3, [r7, #3]
 8008612:	4619      	mov	r1, r3
 8008614:	6878      	ldr	r0, [r7, #4]
 8008616:	f002 f9a2 	bl	800a95e <USBD_LL_GetRxDataSize>
 800861a:	4602      	mov	r2, r0
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008628:	687a      	ldr	r2, [r7, #4]
 800862a:	33b0      	adds	r3, #176	; 0xb0
 800862c:	009b      	lsls	r3, r3, #2
 800862e:	4413      	add	r3, r2
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	68fa      	ldr	r2, [r7, #12]
 8008636:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800863a:	68fa      	ldr	r2, [r7, #12]
 800863c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8008640:	4611      	mov	r1, r2
 8008642:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008644:	2300      	movs	r3, #0
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800864e:	b580      	push	{r7, lr}
 8008650:	b084      	sub	sp, #16
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	32b0      	adds	r2, #176	; 0xb0
 8008660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008664:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	2b00      	cmp	r3, #0
 800866a:	d101      	bne.n	8008670 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800866c:	2303      	movs	r3, #3
 800866e:	e025      	b.n	80086bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008676:	687a      	ldr	r2, [r7, #4]
 8008678:	33b0      	adds	r3, #176	; 0xb0
 800867a:	009b      	lsls	r3, r3, #2
 800867c:	4413      	add	r3, r2
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d01a      	beq.n	80086ba <USBD_CDC_EP0_RxReady+0x6c>
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800868a:	2bff      	cmp	r3, #255	; 0xff
 800868c:	d015      	beq.n	80086ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008694:	687a      	ldr	r2, [r7, #4]
 8008696:	33b0      	adds	r3, #176	; 0xb0
 8008698:	009b      	lsls	r3, r3, #2
 800869a:	4413      	add	r3, r2
 800869c:	685b      	ldr	r3, [r3, #4]
 800869e:	689b      	ldr	r3, [r3, #8]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80086a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80086ae:	b292      	uxth	r2, r2
 80086b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	22ff      	movs	r2, #255	; 0xff
 80086b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80086ba:	2300      	movs	r3, #0
}
 80086bc:	4618      	mov	r0, r3
 80086be:	3710      	adds	r7, #16
 80086c0:	46bd      	mov	sp, r7
 80086c2:	bd80      	pop	{r7, pc}

080086c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80086cc:	2182      	movs	r1, #130	; 0x82
 80086ce:	4818      	ldr	r0, [pc, #96]	; (8008730 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086d0:	f000 fd4f 	bl	8009172 <USBD_GetEpDesc>
 80086d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80086d6:	2101      	movs	r1, #1
 80086d8:	4815      	ldr	r0, [pc, #84]	; (8008730 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086da:	f000 fd4a 	bl	8009172 <USBD_GetEpDesc>
 80086de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80086e0:	2181      	movs	r1, #129	; 0x81
 80086e2:	4813      	ldr	r0, [pc, #76]	; (8008730 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80086e4:	f000 fd45 	bl	8009172 <USBD_GetEpDesc>
 80086e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d002      	beq.n	80086f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80086f0:	697b      	ldr	r3, [r7, #20]
 80086f2:	2210      	movs	r2, #16
 80086f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d006      	beq.n	800870a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	2200      	movs	r2, #0
 8008700:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008704:	711a      	strb	r2, [r3, #4]
 8008706:	2200      	movs	r2, #0
 8008708:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d006      	beq.n	800871e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008718:	711a      	strb	r2, [r3, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2243      	movs	r2, #67	; 0x43
 8008722:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008724:	4b02      	ldr	r3, [pc, #8]	; (8008730 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008726:	4618      	mov	r0, r3
 8008728:	3718      	adds	r7, #24
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	20000070 	.word	0x20000070

08008734 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b086      	sub	sp, #24
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800873c:	2182      	movs	r1, #130	; 0x82
 800873e:	4818      	ldr	r0, [pc, #96]	; (80087a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008740:	f000 fd17 	bl	8009172 <USBD_GetEpDesc>
 8008744:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008746:	2101      	movs	r1, #1
 8008748:	4815      	ldr	r0, [pc, #84]	; (80087a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800874a:	f000 fd12 	bl	8009172 <USBD_GetEpDesc>
 800874e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008750:	2181      	movs	r1, #129	; 0x81
 8008752:	4813      	ldr	r0, [pc, #76]	; (80087a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008754:	f000 fd0d 	bl	8009172 <USBD_GetEpDesc>
 8008758:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d002      	beq.n	8008766 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	2210      	movs	r2, #16
 8008764:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d006      	beq.n	800877a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	2200      	movs	r2, #0
 8008770:	711a      	strb	r2, [r3, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f042 0202 	orr.w	r2, r2, #2
 8008778:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d006      	beq.n	800878e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2200      	movs	r2, #0
 8008784:	711a      	strb	r2, [r3, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f042 0202 	orr.w	r2, r2, #2
 800878c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	2243      	movs	r2, #67	; 0x43
 8008792:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008794:	4b02      	ldr	r3, [pc, #8]	; (80087a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008796:	4618      	mov	r0, r3
 8008798:	3718      	adds	r7, #24
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}
 800879e:	bf00      	nop
 80087a0:	20000070 	.word	0x20000070

080087a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b086      	sub	sp, #24
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80087ac:	2182      	movs	r1, #130	; 0x82
 80087ae:	4818      	ldr	r0, [pc, #96]	; (8008810 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087b0:	f000 fcdf 	bl	8009172 <USBD_GetEpDesc>
 80087b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80087b6:	2101      	movs	r1, #1
 80087b8:	4815      	ldr	r0, [pc, #84]	; (8008810 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087ba:	f000 fcda 	bl	8009172 <USBD_GetEpDesc>
 80087be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80087c0:	2181      	movs	r1, #129	; 0x81
 80087c2:	4813      	ldr	r0, [pc, #76]	; (8008810 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80087c4:	f000 fcd5 	bl	8009172 <USBD_GetEpDesc>
 80087c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	2210      	movs	r2, #16
 80087d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80087d6:	693b      	ldr	r3, [r7, #16]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d006      	beq.n	80087ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	2200      	movs	r2, #0
 80087e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087e4:	711a      	strb	r2, [r3, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d006      	beq.n	80087fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80087f8:	711a      	strb	r2, [r3, #4]
 80087fa:	2200      	movs	r2, #0
 80087fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2243      	movs	r2, #67	; 0x43
 8008802:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008804:	4b02      	ldr	r3, [pc, #8]	; (8008810 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008806:	4618      	mov	r0, r3
 8008808:	3718      	adds	r7, #24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20000070 	.word	0x20000070

08008814 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008814:	b480      	push	{r7}
 8008816:	b083      	sub	sp, #12
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	220a      	movs	r2, #10
 8008820:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008822:	4b03      	ldr	r3, [pc, #12]	; (8008830 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008824:	4618      	mov	r0, r3
 8008826:	370c      	adds	r7, #12
 8008828:	46bd      	mov	sp, r7
 800882a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882e:	4770      	bx	lr
 8008830:	2000002c 	.word	0x2000002c

08008834 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d101      	bne.n	8008848 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008844:	2303      	movs	r3, #3
 8008846:	e009      	b.n	800885c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	33b0      	adds	r3, #176	; 0xb0
 8008852:	009b      	lsls	r3, r3, #2
 8008854:	4413      	add	r3, r2
 8008856:	683a      	ldr	r2, [r7, #0]
 8008858:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800885a:	2300      	movs	r3, #0
}
 800885c:	4618      	mov	r0, r3
 800885e:	370c      	adds	r7, #12
 8008860:	46bd      	mov	sp, r7
 8008862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008866:	4770      	bx	lr

08008868 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008868:	b480      	push	{r7}
 800886a:	b087      	sub	sp, #28
 800886c:	af00      	add	r7, sp, #0
 800886e:	60f8      	str	r0, [r7, #12]
 8008870:	60b9      	str	r1, [r7, #8]
 8008872:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	32b0      	adds	r2, #176	; 0xb0
 800887e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008882:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008884:	697b      	ldr	r3, [r7, #20]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d101      	bne.n	800888e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800888a:	2303      	movs	r3, #3
 800888c:	e008      	b.n	80088a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	68ba      	ldr	r2, [r7, #8]
 8008892:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800889e:	2300      	movs	r3, #0
}
 80088a0:	4618      	mov	r0, r3
 80088a2:	371c      	adds	r7, #28
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	32b0      	adds	r2, #176	; 0xb0
 80088c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d101      	bne.n	80088d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80088cc:	2303      	movs	r3, #3
 80088ce:	e004      	b.n	80088da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	683a      	ldr	r2, [r7, #0]
 80088d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80088d8:	2300      	movs	r3, #0
}
 80088da:	4618      	mov	r0, r3
 80088dc:	3714      	adds	r7, #20
 80088de:	46bd      	mov	sp, r7
 80088e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e4:	4770      	bx	lr
	...

080088e8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	32b0      	adds	r2, #176	; 0xb0
 80088fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088fe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008900:	2301      	movs	r3, #1
 8008902:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	32b0      	adds	r2, #176	; 0xb0
 800890e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d101      	bne.n	800891a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008916:	2303      	movs	r3, #3
 8008918:	e025      	b.n	8008966 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800891a:	68bb      	ldr	r3, [r7, #8]
 800891c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008920:	2b00      	cmp	r3, #0
 8008922:	d11f      	bne.n	8008964 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	2201      	movs	r2, #1
 8008928:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800892c:	4b10      	ldr	r3, [pc, #64]	; (8008970 <USBD_CDC_TransmitPacket+0x88>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	f003 020f 	and.w	r2, r3, #15
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	4613      	mov	r3, r2
 800893e:	009b      	lsls	r3, r3, #2
 8008940:	4413      	add	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4403      	add	r3, r0
 8008946:	3318      	adds	r3, #24
 8008948:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800894a:	4b09      	ldr	r3, [pc, #36]	; (8008970 <USBD_CDC_TransmitPacket+0x88>)
 800894c:	7819      	ldrb	r1, [r3, #0]
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f001 ffbd 	bl	800a8da <USBD_LL_Transmit>

    ret = USBD_OK;
 8008960:	2300      	movs	r3, #0
 8008962:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008964:	7bfb      	ldrb	r3, [r7, #15]
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	200000b3 	.word	0x200000b3

08008974 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b084      	sub	sp, #16
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	32b0      	adds	r2, #176	; 0xb0
 8008986:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800898a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	32b0      	adds	r2, #176	; 0xb0
 8008996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d101      	bne.n	80089a2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800899e:	2303      	movs	r3, #3
 80089a0:	e018      	b.n	80089d4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	7c1b      	ldrb	r3, [r3, #16]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10a      	bne.n	80089c0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089aa:	4b0c      	ldr	r3, [pc, #48]	; (80089dc <USBD_CDC_ReceivePacket+0x68>)
 80089ac:	7819      	ldrb	r1, [r3, #0]
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f001 ffaf 	bl	800a91c <USBD_LL_PrepareReceive>
 80089be:	e008      	b.n	80089d2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80089c0:	4b06      	ldr	r3, [pc, #24]	; (80089dc <USBD_CDC_ReceivePacket+0x68>)
 80089c2:	7819      	ldrb	r1, [r3, #0]
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80089ca:	2340      	movs	r3, #64	; 0x40
 80089cc:	6878      	ldr	r0, [r7, #4]
 80089ce:	f001 ffa5 	bl	800a91c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80089d2:	2300      	movs	r3, #0
}
 80089d4:	4618      	mov	r0, r3
 80089d6:	3710      	adds	r7, #16
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	200000b4 	.word	0x200000b4

080089e0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80089e0:	b580      	push	{r7, lr}
 80089e2:	b086      	sub	sp, #24
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	60f8      	str	r0, [r7, #12]
 80089e8:	60b9      	str	r1, [r7, #8]
 80089ea:	4613      	mov	r3, r2
 80089ec:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	d101      	bne.n	80089f8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e01f      	b.n	8008a38 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008a10:	68bb      	ldr	r3, [r7, #8]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d003      	beq.n	8008a1e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	68ba      	ldr	r2, [r7, #8]
 8008a1a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2201      	movs	r2, #1
 8008a22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	79fa      	ldrb	r2, [r7, #7]
 8008a2a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f001 fe1f 	bl	800a670 <USBD_LL_Init>
 8008a32:	4603      	mov	r3, r0
 8008a34:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008a36:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3718      	adds	r7, #24
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b084      	sub	sp, #16
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008a4e:	683b      	ldr	r3, [r7, #0]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d101      	bne.n	8008a58 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008a54:	2303      	movs	r3, #3
 8008a56:	e025      	b.n	8008aa4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	683a      	ldr	r2, [r7, #0]
 8008a5c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	32ae      	adds	r2, #174	; 0xae
 8008a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d00f      	beq.n	8008a94 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	32ae      	adds	r2, #174	; 0xae
 8008a7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a84:	f107 020e 	add.w	r2, r7, #14
 8008a88:	4610      	mov	r0, r2
 8008a8a:	4798      	blx	r3
 8008a8c:	4602      	mov	r2, r0
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008a9a:	1c5a      	adds	r2, r3, #1
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008aa2:	2300      	movs	r3, #0
}
 8008aa4:	4618      	mov	r0, r3
 8008aa6:	3710      	adds	r7, #16
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}

08008aac <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f001 fe27 	bl	800a708 <USBD_LL_Start>
 8008aba:	4603      	mov	r3, r0
}
 8008abc:	4618      	mov	r0, r3
 8008abe:	3708      	adds	r7, #8
 8008ac0:	46bd      	mov	sp, r7
 8008ac2:	bd80      	pop	{r7, pc}

08008ac4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008ac4:	b480      	push	{r7}
 8008ac6:	b083      	sub	sp, #12
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008acc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008ace:	4618      	mov	r0, r3
 8008ad0:	370c      	adds	r7, #12
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad8:	4770      	bx	lr

08008ada <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008ada:	b580      	push	{r7, lr}
 8008adc:	b084      	sub	sp, #16
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d009      	beq.n	8008b08 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	78fa      	ldrb	r2, [r7, #3]
 8008afe:	4611      	mov	r1, r2
 8008b00:	6878      	ldr	r0, [r7, #4]
 8008b02:	4798      	blx	r3
 8008b04:	4603      	mov	r3, r0
 8008b06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	3710      	adds	r7, #16
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	bd80      	pop	{r7, pc}

08008b12 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b12:	b580      	push	{r7, lr}
 8008b14:	b084      	sub	sp, #16
 8008b16:	af00      	add	r7, sp, #0
 8008b18:	6078      	str	r0, [r7, #4]
 8008b1a:	460b      	mov	r3, r1
 8008b1c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	78fa      	ldrb	r2, [r7, #3]
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	4798      	blx	r3
 8008b32:	4603      	mov	r3, r0
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d001      	beq.n	8008b3c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b3e:	4618      	mov	r0, r3
 8008b40:	3710      	adds	r7, #16
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}

08008b46 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008b46:	b580      	push	{r7, lr}
 8008b48:	b084      	sub	sp, #16
 8008b4a:	af00      	add	r7, sp, #0
 8008b4c:	6078      	str	r0, [r7, #4]
 8008b4e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b56:	6839      	ldr	r1, [r7, #0]
 8008b58:	4618      	mov	r0, r3
 8008b5a:	f001 f908 	bl	8009d6e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	2201      	movs	r2, #1
 8008b62:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008b7a:	f003 031f 	and.w	r3, r3, #31
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d01a      	beq.n	8008bb8 <USBD_LL_SetupStage+0x72>
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d822      	bhi.n	8008bcc <USBD_LL_SetupStage+0x86>
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d002      	beq.n	8008b90 <USBD_LL_SetupStage+0x4a>
 8008b8a:	2b01      	cmp	r3, #1
 8008b8c:	d00a      	beq.n	8008ba4 <USBD_LL_SetupStage+0x5e>
 8008b8e:	e01d      	b.n	8008bcc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008b96:	4619      	mov	r1, r3
 8008b98:	6878      	ldr	r0, [r7, #4]
 8008b9a:	f000 fb5f 	bl	800925c <USBD_StdDevReq>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ba2:	e020      	b.n	8008be6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008baa:	4619      	mov	r1, r3
 8008bac:	6878      	ldr	r0, [r7, #4]
 8008bae:	f000 fbc7 	bl	8009340 <USBD_StdItfReq>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8008bb6:	e016      	b.n	8008be6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	6878      	ldr	r0, [r7, #4]
 8008bc2:	f000 fc29 	bl	8009418 <USBD_StdEPReq>
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	73fb      	strb	r3, [r7, #15]
      break;
 8008bca:	e00c      	b.n	8008be6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008bd2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008bd6:	b2db      	uxtb	r3, r3
 8008bd8:	4619      	mov	r1, r3
 8008bda:	6878      	ldr	r0, [r7, #4]
 8008bdc:	f001 fdf4 	bl	800a7c8 <USBD_LL_StallEP>
 8008be0:	4603      	mov	r3, r0
 8008be2:	73fb      	strb	r3, [r7, #15]
      break;
 8008be4:	bf00      	nop
  }

  return ret;
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b086      	sub	sp, #24
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	60f8      	str	r0, [r7, #12]
 8008bf8:	460b      	mov	r3, r1
 8008bfa:	607a      	str	r2, [r7, #4]
 8008bfc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008c02:	7afb      	ldrb	r3, [r7, #11]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d16e      	bne.n	8008ce6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008c0e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	f040 8098 	bne.w	8008d4c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	689a      	ldr	r2, [r3, #8]
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d913      	bls.n	8008c50 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	689a      	ldr	r2, [r3, #8]
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	68db      	ldr	r3, [r3, #12]
 8008c30:	1ad2      	subs	r2, r2, r3
 8008c32:	693b      	ldr	r3, [r7, #16]
 8008c34:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008c36:	693b      	ldr	r3, [r7, #16]
 8008c38:	68da      	ldr	r2, [r3, #12]
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	689b      	ldr	r3, [r3, #8]
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	bf28      	it	cs
 8008c42:	4613      	movcs	r3, r2
 8008c44:	461a      	mov	r2, r3
 8008c46:	6879      	ldr	r1, [r7, #4]
 8008c48:	68f8      	ldr	r0, [r7, #12]
 8008c4a:	f001 f984 	bl	8009f56 <USBD_CtlContinueRx>
 8008c4e:	e07d      	b.n	8008d4c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c56:	f003 031f 	and.w	r3, r3, #31
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d014      	beq.n	8008c88 <USBD_LL_DataOutStage+0x98>
 8008c5e:	2b02      	cmp	r3, #2
 8008c60:	d81d      	bhi.n	8008c9e <USBD_LL_DataOutStage+0xae>
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d002      	beq.n	8008c6c <USBD_LL_DataOutStage+0x7c>
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d003      	beq.n	8008c72 <USBD_LL_DataOutStage+0x82>
 8008c6a:	e018      	b.n	8008c9e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	75bb      	strb	r3, [r7, #22]
            break;
 8008c70:	e018      	b.n	8008ca4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	4619      	mov	r1, r3
 8008c7c:	68f8      	ldr	r0, [r7, #12]
 8008c7e:	f000 fa5e 	bl	800913e <USBD_CoreFindIF>
 8008c82:	4603      	mov	r3, r0
 8008c84:	75bb      	strb	r3, [r7, #22]
            break;
 8008c86:	e00d      	b.n	8008ca4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	4619      	mov	r1, r3
 8008c92:	68f8      	ldr	r0, [r7, #12]
 8008c94:	f000 fa60 	bl	8009158 <USBD_CoreFindEP>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	75bb      	strb	r3, [r7, #22]
            break;
 8008c9c:	e002      	b.n	8008ca4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	75bb      	strb	r3, [r7, #22]
            break;
 8008ca2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008ca4:	7dbb      	ldrb	r3, [r7, #22]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d119      	bne.n	8008cde <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008cb0:	b2db      	uxtb	r3, r3
 8008cb2:	2b03      	cmp	r3, #3
 8008cb4:	d113      	bne.n	8008cde <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008cb6:	7dba      	ldrb	r2, [r7, #22]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	32ae      	adds	r2, #174	; 0xae
 8008cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cc0:	691b      	ldr	r3, [r3, #16]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d00b      	beq.n	8008cde <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008cc6:	7dba      	ldrb	r2, [r7, #22]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008cce:	7dba      	ldrb	r2, [r7, #22]
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	32ae      	adds	r2, #174	; 0xae
 8008cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cd8:	691b      	ldr	r3, [r3, #16]
 8008cda:	68f8      	ldr	r0, [r7, #12]
 8008cdc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008cde:	68f8      	ldr	r0, [r7, #12]
 8008ce0:	f001 f94a 	bl	8009f78 <USBD_CtlSendStatus>
 8008ce4:	e032      	b.n	8008d4c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008ce6:	7afb      	ldrb	r3, [r7, #11]
 8008ce8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cec:	b2db      	uxtb	r3, r3
 8008cee:	4619      	mov	r1, r3
 8008cf0:	68f8      	ldr	r0, [r7, #12]
 8008cf2:	f000 fa31 	bl	8009158 <USBD_CoreFindEP>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cfa:	7dbb      	ldrb	r3, [r7, #22]
 8008cfc:	2bff      	cmp	r3, #255	; 0xff
 8008cfe:	d025      	beq.n	8008d4c <USBD_LL_DataOutStage+0x15c>
 8008d00:	7dbb      	ldrb	r3, [r7, #22]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d122      	bne.n	8008d4c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d0c:	b2db      	uxtb	r3, r3
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	d117      	bne.n	8008d42 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008d12:	7dba      	ldrb	r2, [r7, #22]
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	32ae      	adds	r2, #174	; 0xae
 8008d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d1c:	699b      	ldr	r3, [r3, #24]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d00f      	beq.n	8008d42 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008d22:	7dba      	ldrb	r2, [r7, #22]
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008d2a:	7dba      	ldrb	r2, [r7, #22]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	32ae      	adds	r2, #174	; 0xae
 8008d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d34:	699b      	ldr	r3, [r3, #24]
 8008d36:	7afa      	ldrb	r2, [r7, #11]
 8008d38:	4611      	mov	r1, r2
 8008d3a:	68f8      	ldr	r0, [r7, #12]
 8008d3c:	4798      	blx	r3
 8008d3e:	4603      	mov	r3, r0
 8008d40:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008d42:	7dfb      	ldrb	r3, [r7, #23]
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008d48:	7dfb      	ldrb	r3, [r7, #23]
 8008d4a:	e000      	b.n	8008d4e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008d4c:	2300      	movs	r3, #0
}
 8008d4e:	4618      	mov	r0, r3
 8008d50:	3718      	adds	r7, #24
 8008d52:	46bd      	mov	sp, r7
 8008d54:	bd80      	pop	{r7, pc}

08008d56 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008d56:	b580      	push	{r7, lr}
 8008d58:	b086      	sub	sp, #24
 8008d5a:	af00      	add	r7, sp, #0
 8008d5c:	60f8      	str	r0, [r7, #12]
 8008d5e:	460b      	mov	r3, r1
 8008d60:	607a      	str	r2, [r7, #4]
 8008d62:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008d64:	7afb      	ldrb	r3, [r7, #11]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d16f      	bne.n	8008e4a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	3314      	adds	r3, #20
 8008d6e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008d76:	2b02      	cmp	r3, #2
 8008d78:	d15a      	bne.n	8008e30 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	689a      	ldr	r2, [r3, #8]
 8008d7e:	693b      	ldr	r3, [r7, #16]
 8008d80:	68db      	ldr	r3, [r3, #12]
 8008d82:	429a      	cmp	r2, r3
 8008d84:	d914      	bls.n	8008db0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	689a      	ldr	r2, [r3, #8]
 8008d8a:	693b      	ldr	r3, [r7, #16]
 8008d8c:	68db      	ldr	r3, [r3, #12]
 8008d8e:	1ad2      	subs	r2, r2, r3
 8008d90:	693b      	ldr	r3, [r7, #16]
 8008d92:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	689b      	ldr	r3, [r3, #8]
 8008d98:	461a      	mov	r2, r3
 8008d9a:	6879      	ldr	r1, [r7, #4]
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f001 f8ac 	bl	8009efa <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008da2:	2300      	movs	r3, #0
 8008da4:	2200      	movs	r2, #0
 8008da6:	2100      	movs	r1, #0
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f001 fdb7 	bl	800a91c <USBD_LL_PrepareReceive>
 8008dae:	e03f      	b.n	8008e30 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	68da      	ldr	r2, [r3, #12]
 8008db4:	693b      	ldr	r3, [r7, #16]
 8008db6:	689b      	ldr	r3, [r3, #8]
 8008db8:	429a      	cmp	r2, r3
 8008dba:	d11c      	bne.n	8008df6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	685a      	ldr	r2, [r3, #4]
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d316      	bcc.n	8008df6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	685a      	ldr	r2, [r3, #4]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	d20f      	bcs.n	8008df6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	2100      	movs	r1, #0
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f001 f88d 	bl	8009efa <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008de8:	2300      	movs	r3, #0
 8008dea:	2200      	movs	r2, #0
 8008dec:	2100      	movs	r1, #0
 8008dee:	68f8      	ldr	r0, [r7, #12]
 8008df0:	f001 fd94 	bl	800a91c <USBD_LL_PrepareReceive>
 8008df4:	e01c      	b.n	8008e30 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfc:	b2db      	uxtb	r3, r3
 8008dfe:	2b03      	cmp	r3, #3
 8008e00:	d10f      	bne.n	8008e22 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e08:	68db      	ldr	r3, [r3, #12]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d009      	beq.n	8008e22 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e1c:	68db      	ldr	r3, [r3, #12]
 8008e1e:	68f8      	ldr	r0, [r7, #12]
 8008e20:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e22:	2180      	movs	r1, #128	; 0x80
 8008e24:	68f8      	ldr	r0, [r7, #12]
 8008e26:	f001 fccf 	bl	800a7c8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008e2a:	68f8      	ldr	r0, [r7, #12]
 8008e2c:	f001 f8b7 	bl	8009f9e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d03a      	beq.n	8008eb0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008e3a:	68f8      	ldr	r0, [r7, #12]
 8008e3c:	f7ff fe42 	bl	8008ac4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	2200      	movs	r2, #0
 8008e44:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008e48:	e032      	b.n	8008eb0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008e4a:	7afb      	ldrb	r3, [r7, #11]
 8008e4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	4619      	mov	r1, r3
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f000 f97f 	bl	8009158 <USBD_CoreFindEP>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008e5e:	7dfb      	ldrb	r3, [r7, #23]
 8008e60:	2bff      	cmp	r3, #255	; 0xff
 8008e62:	d025      	beq.n	8008eb0 <USBD_LL_DataInStage+0x15a>
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d122      	bne.n	8008eb0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e70:	b2db      	uxtb	r3, r3
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	d11c      	bne.n	8008eb0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008e76:	7dfa      	ldrb	r2, [r7, #23]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	32ae      	adds	r2, #174	; 0xae
 8008e7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e80:	695b      	ldr	r3, [r3, #20]
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d014      	beq.n	8008eb0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008e86:	7dfa      	ldrb	r2, [r7, #23]
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008e8e:	7dfa      	ldrb	r2, [r7, #23]
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	32ae      	adds	r2, #174	; 0xae
 8008e94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008e98:	695b      	ldr	r3, [r3, #20]
 8008e9a:	7afa      	ldrb	r2, [r7, #11]
 8008e9c:	4611      	mov	r1, r2
 8008e9e:	68f8      	ldr	r0, [r7, #12]
 8008ea0:	4798      	blx	r3
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008ea6:	7dbb      	ldrb	r3, [r7, #22]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d001      	beq.n	8008eb0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008eac:	7dbb      	ldrb	r3, [r7, #22]
 8008eae:	e000      	b.n	8008eb2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3718      	adds	r7, #24
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	2201      	movs	r2, #1
 8008eca:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	2200      	movs	r2, #0
 8008eda:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d014      	beq.n	8008f20 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d00e      	beq.n	8008f20 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	6852      	ldr	r2, [r2, #4]
 8008f0e:	b2d2      	uxtb	r2, r2
 8008f10:	4611      	mov	r1, r2
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	4798      	blx	r3
 8008f16:	4603      	mov	r3, r0
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d001      	beq.n	8008f20 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008f1c:	2303      	movs	r3, #3
 8008f1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f20:	2340      	movs	r3, #64	; 0x40
 8008f22:	2200      	movs	r2, #0
 8008f24:	2100      	movs	r1, #0
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f001 fc09 	bl	800a73e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	2201      	movs	r2, #1
 8008f30:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2240      	movs	r2, #64	; 0x40
 8008f38:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008f3c:	2340      	movs	r3, #64	; 0x40
 8008f3e:	2200      	movs	r2, #0
 8008f40:	2180      	movs	r1, #128	; 0x80
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f001 fbfb 	bl	800a73e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2240      	movs	r2, #64	; 0x40
 8008f52:	621a      	str	r2, [r3, #32]

  return ret;
 8008f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f56:	4618      	mov	r0, r3
 8008f58:	3710      	adds	r7, #16
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	bd80      	pop	{r7, pc}

08008f5e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008f5e:	b480      	push	{r7}
 8008f60:	b083      	sub	sp, #12
 8008f62:	af00      	add	r7, sp, #0
 8008f64:	6078      	str	r0, [r7, #4]
 8008f66:	460b      	mov	r3, r1
 8008f68:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	78fa      	ldrb	r2, [r7, #3]
 8008f6e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	370c      	adds	r7, #12
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr

08008f7e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008f7e:	b480      	push	{r7}
 8008f80:	b083      	sub	sp, #12
 8008f82:	af00      	add	r7, sp, #0
 8008f84:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f8c:	b2da      	uxtb	r2, r3
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2204      	movs	r2, #4
 8008f98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	370c      	adds	r7, #12
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa8:	4770      	bx	lr

08008faa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008faa:	b480      	push	{r7}
 8008fac:	b083      	sub	sp, #12
 8008fae:	af00      	add	r7, sp, #0
 8008fb0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	2b04      	cmp	r3, #4
 8008fbc:	d106      	bne.n	8008fcc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008fc4:	b2da      	uxtb	r2, r3
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr

08008fda <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b082      	sub	sp, #8
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008fe8:	b2db      	uxtb	r3, r3
 8008fea:	2b03      	cmp	r3, #3
 8008fec:	d110      	bne.n	8009010 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d00b      	beq.n	8009010 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ffe:	69db      	ldr	r3, [r3, #28]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d005      	beq.n	8009010 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	6878      	ldr	r0, [r7, #4]
 800900e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8009010:	2300      	movs	r3, #0
}
 8009012:	4618      	mov	r0, r3
 8009014:	3708      	adds	r7, #8
 8009016:	46bd      	mov	sp, r7
 8009018:	bd80      	pop	{r7, pc}

0800901a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800901a:	b580      	push	{r7, lr}
 800901c:	b082      	sub	sp, #8
 800901e:	af00      	add	r7, sp, #0
 8009020:	6078      	str	r0, [r7, #4]
 8009022:	460b      	mov	r3, r1
 8009024:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	32ae      	adds	r2, #174	; 0xae
 8009030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009034:	2b00      	cmp	r3, #0
 8009036:	d101      	bne.n	800903c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009038:	2303      	movs	r3, #3
 800903a:	e01c      	b.n	8009076 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009042:	b2db      	uxtb	r3, r3
 8009044:	2b03      	cmp	r3, #3
 8009046:	d115      	bne.n	8009074 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	32ae      	adds	r2, #174	; 0xae
 8009052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009056:	6a1b      	ldr	r3, [r3, #32]
 8009058:	2b00      	cmp	r3, #0
 800905a:	d00b      	beq.n	8009074 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	32ae      	adds	r2, #174	; 0xae
 8009066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800906a:	6a1b      	ldr	r3, [r3, #32]
 800906c:	78fa      	ldrb	r2, [r7, #3]
 800906e:	4611      	mov	r1, r2
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3708      	adds	r7, #8
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b082      	sub	sp, #8
 8009082:	af00      	add	r7, sp, #0
 8009084:	6078      	str	r0, [r7, #4]
 8009086:	460b      	mov	r3, r1
 8009088:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	32ae      	adds	r2, #174	; 0xae
 8009094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d101      	bne.n	80090a0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800909c:	2303      	movs	r3, #3
 800909e:	e01c      	b.n	80090da <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a6:	b2db      	uxtb	r3, r3
 80090a8:	2b03      	cmp	r3, #3
 80090aa:	d115      	bne.n	80090d8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	32ae      	adds	r2, #174	; 0xae
 80090b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d00b      	beq.n	80090d8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	32ae      	adds	r2, #174	; 0xae
 80090ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090d0:	78fa      	ldrb	r2, [r7, #3]
 80090d2:	4611      	mov	r1, r2
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80090d8:	2300      	movs	r3, #0
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3708      	adds	r7, #8
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}

080090e2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b083      	sub	sp, #12
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80090ea:	2300      	movs	r3, #0
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	370c      	adds	r7, #12
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr

080090f8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b084      	sub	sp, #16
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00e      	beq.n	8009134 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800911c:	685b      	ldr	r3, [r3, #4]
 800911e:	687a      	ldr	r2, [r7, #4]
 8009120:	6852      	ldr	r2, [r2, #4]
 8009122:	b2d2      	uxtb	r2, r2
 8009124:	4611      	mov	r1, r2
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	4798      	blx	r3
 800912a:	4603      	mov	r3, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8009130:	2303      	movs	r3, #3
 8009132:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009134:	7bfb      	ldrb	r3, [r7, #15]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800913e:	b480      	push	{r7}
 8009140:	b083      	sub	sp, #12
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
 8009146:	460b      	mov	r3, r1
 8009148:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800914a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800914c:	4618      	mov	r0, r3
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	460b      	mov	r3, r1
 8009162:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009164:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009166:	4618      	mov	r0, r3
 8009168:	370c      	adds	r7, #12
 800916a:	46bd      	mov	sp, r7
 800916c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009170:	4770      	bx	lr

08009172 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8009172:	b580      	push	{r7, lr}
 8009174:	b086      	sub	sp, #24
 8009176:	af00      	add	r7, sp, #0
 8009178:	6078      	str	r0, [r7, #4]
 800917a:	460b      	mov	r3, r1
 800917c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009186:	2300      	movs	r3, #0
 8009188:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	885b      	ldrh	r3, [r3, #2]
 800918e:	b29a      	uxth	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	b29b      	uxth	r3, r3
 8009196:	429a      	cmp	r2, r3
 8009198:	d920      	bls.n	80091dc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	781b      	ldrb	r3, [r3, #0]
 800919e:	b29b      	uxth	r3, r3
 80091a0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80091a2:	e013      	b.n	80091cc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80091a4:	f107 030a 	add.w	r3, r7, #10
 80091a8:	4619      	mov	r1, r3
 80091aa:	6978      	ldr	r0, [r7, #20]
 80091ac:	f000 f81b 	bl	80091e6 <USBD_GetNextDesc>
 80091b0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	785b      	ldrb	r3, [r3, #1]
 80091b6:	2b05      	cmp	r3, #5
 80091b8:	d108      	bne.n	80091cc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80091ba:	697b      	ldr	r3, [r7, #20]
 80091bc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80091be:	693b      	ldr	r3, [r7, #16]
 80091c0:	789b      	ldrb	r3, [r3, #2]
 80091c2:	78fa      	ldrb	r2, [r7, #3]
 80091c4:	429a      	cmp	r2, r3
 80091c6:	d008      	beq.n	80091da <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80091c8:	2300      	movs	r3, #0
 80091ca:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	885b      	ldrh	r3, [r3, #2]
 80091d0:	b29a      	uxth	r2, r3
 80091d2:	897b      	ldrh	r3, [r7, #10]
 80091d4:	429a      	cmp	r2, r3
 80091d6:	d8e5      	bhi.n	80091a4 <USBD_GetEpDesc+0x32>
 80091d8:	e000      	b.n	80091dc <USBD_GetEpDesc+0x6a>
          break;
 80091da:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80091dc:	693b      	ldr	r3, [r7, #16]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3718      	adds	r7, #24
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}

080091e6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80091e6:	b480      	push	{r7}
 80091e8:	b085      	sub	sp, #20
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
 80091ee:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	881a      	ldrh	r2, [r3, #0]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	b29b      	uxth	r3, r3
 80091fe:	4413      	add	r3, r2
 8009200:	b29a      	uxth	r2, r3
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	781b      	ldrb	r3, [r3, #0]
 800920a:	461a      	mov	r2, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	4413      	add	r3, r2
 8009210:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009212:	68fb      	ldr	r3, [r7, #12]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3714      	adds	r7, #20
 8009218:	46bd      	mov	sp, r7
 800921a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921e:	4770      	bx	lr

08009220 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009220:	b480      	push	{r7}
 8009222:	b087      	sub	sp, #28
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	781b      	ldrb	r3, [r3, #0]
 8009230:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	3301      	adds	r3, #1
 8009236:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	781b      	ldrb	r3, [r3, #0]
 800923c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800923e:	8a3b      	ldrh	r3, [r7, #16]
 8009240:	021b      	lsls	r3, r3, #8
 8009242:	b21a      	sxth	r2, r3
 8009244:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009248:	4313      	orrs	r3, r2
 800924a:	b21b      	sxth	r3, r3
 800924c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800924e:	89fb      	ldrh	r3, [r7, #14]
}
 8009250:	4618      	mov	r0, r3
 8009252:	371c      	adds	r7, #28
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800925c:	b580      	push	{r7, lr}
 800925e:	b084      	sub	sp, #16
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
 8009264:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009266:	2300      	movs	r3, #0
 8009268:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800926a:	683b      	ldr	r3, [r7, #0]
 800926c:	781b      	ldrb	r3, [r3, #0]
 800926e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009272:	2b40      	cmp	r3, #64	; 0x40
 8009274:	d005      	beq.n	8009282 <USBD_StdDevReq+0x26>
 8009276:	2b40      	cmp	r3, #64	; 0x40
 8009278:	d857      	bhi.n	800932a <USBD_StdDevReq+0xce>
 800927a:	2b00      	cmp	r3, #0
 800927c:	d00f      	beq.n	800929e <USBD_StdDevReq+0x42>
 800927e:	2b20      	cmp	r3, #32
 8009280:	d153      	bne.n	800932a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	32ae      	adds	r2, #174	; 0xae
 800928c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009290:	689b      	ldr	r3, [r3, #8]
 8009292:	6839      	ldr	r1, [r7, #0]
 8009294:	6878      	ldr	r0, [r7, #4]
 8009296:	4798      	blx	r3
 8009298:	4603      	mov	r3, r0
 800929a:	73fb      	strb	r3, [r7, #15]
      break;
 800929c:	e04a      	b.n	8009334 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	785b      	ldrb	r3, [r3, #1]
 80092a2:	2b09      	cmp	r3, #9
 80092a4:	d83b      	bhi.n	800931e <USBD_StdDevReq+0xc2>
 80092a6:	a201      	add	r2, pc, #4	; (adr r2, 80092ac <USBD_StdDevReq+0x50>)
 80092a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092ac:	08009301 	.word	0x08009301
 80092b0:	08009315 	.word	0x08009315
 80092b4:	0800931f 	.word	0x0800931f
 80092b8:	0800930b 	.word	0x0800930b
 80092bc:	0800931f 	.word	0x0800931f
 80092c0:	080092df 	.word	0x080092df
 80092c4:	080092d5 	.word	0x080092d5
 80092c8:	0800931f 	.word	0x0800931f
 80092cc:	080092f7 	.word	0x080092f7
 80092d0:	080092e9 	.word	0x080092e9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fa3c 	bl	8009754 <USBD_GetDescriptor>
          break;
 80092dc:	e024      	b.n	8009328 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80092de:	6839      	ldr	r1, [r7, #0]
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fba1 	bl	8009a28 <USBD_SetAddress>
          break;
 80092e6:	e01f      	b.n	8009328 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80092e8:	6839      	ldr	r1, [r7, #0]
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 fbe0 	bl	8009ab0 <USBD_SetConfig>
 80092f0:	4603      	mov	r3, r0
 80092f2:	73fb      	strb	r3, [r7, #15]
          break;
 80092f4:	e018      	b.n	8009328 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80092f6:	6839      	ldr	r1, [r7, #0]
 80092f8:	6878      	ldr	r0, [r7, #4]
 80092fa:	f000 fc83 	bl	8009c04 <USBD_GetConfig>
          break;
 80092fe:	e013      	b.n	8009328 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f000 fcb4 	bl	8009c70 <USBD_GetStatus>
          break;
 8009308:	e00e      	b.n	8009328 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800930a:	6839      	ldr	r1, [r7, #0]
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 fce3 	bl	8009cd8 <USBD_SetFeature>
          break;
 8009312:	e009      	b.n	8009328 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009314:	6839      	ldr	r1, [r7, #0]
 8009316:	6878      	ldr	r0, [r7, #4]
 8009318:	f000 fd07 	bl	8009d2a <USBD_ClrFeature>
          break;
 800931c:	e004      	b.n	8009328 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800931e:	6839      	ldr	r1, [r7, #0]
 8009320:	6878      	ldr	r0, [r7, #4]
 8009322:	f000 fd5e 	bl	8009de2 <USBD_CtlError>
          break;
 8009326:	bf00      	nop
      }
      break;
 8009328:	e004      	b.n	8009334 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800932a:	6839      	ldr	r1, [r7, #0]
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fd58 	bl	8009de2 <USBD_CtlError>
      break;
 8009332:	bf00      	nop
  }

  return ret;
 8009334:	7bfb      	ldrb	r3, [r7, #15]
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop

08009340 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800934a:	2300      	movs	r3, #0
 800934c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	781b      	ldrb	r3, [r3, #0]
 8009352:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009356:	2b40      	cmp	r3, #64	; 0x40
 8009358:	d005      	beq.n	8009366 <USBD_StdItfReq+0x26>
 800935a:	2b40      	cmp	r3, #64	; 0x40
 800935c:	d852      	bhi.n	8009404 <USBD_StdItfReq+0xc4>
 800935e:	2b00      	cmp	r3, #0
 8009360:	d001      	beq.n	8009366 <USBD_StdItfReq+0x26>
 8009362:	2b20      	cmp	r3, #32
 8009364:	d14e      	bne.n	8009404 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800936c:	b2db      	uxtb	r3, r3
 800936e:	3b01      	subs	r3, #1
 8009370:	2b02      	cmp	r3, #2
 8009372:	d840      	bhi.n	80093f6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	889b      	ldrh	r3, [r3, #4]
 8009378:	b2db      	uxtb	r3, r3
 800937a:	2b01      	cmp	r3, #1
 800937c:	d836      	bhi.n	80093ec <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800937e:	683b      	ldr	r3, [r7, #0]
 8009380:	889b      	ldrh	r3, [r3, #4]
 8009382:	b2db      	uxtb	r3, r3
 8009384:	4619      	mov	r1, r3
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f7ff fed9 	bl	800913e <USBD_CoreFindIF>
 800938c:	4603      	mov	r3, r0
 800938e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009390:	7bbb      	ldrb	r3, [r7, #14]
 8009392:	2bff      	cmp	r3, #255	; 0xff
 8009394:	d01d      	beq.n	80093d2 <USBD_StdItfReq+0x92>
 8009396:	7bbb      	ldrb	r3, [r7, #14]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d11a      	bne.n	80093d2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800939c:	7bba      	ldrb	r2, [r7, #14]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	32ae      	adds	r2, #174	; 0xae
 80093a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00f      	beq.n	80093cc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80093ac:	7bba      	ldrb	r2, [r7, #14]
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80093b4:	7bba      	ldrb	r2, [r7, #14]
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	32ae      	adds	r2, #174	; 0xae
 80093ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	6839      	ldr	r1, [r7, #0]
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	4798      	blx	r3
 80093c6:	4603      	mov	r3, r0
 80093c8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80093ca:	e004      	b.n	80093d6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80093cc:	2303      	movs	r3, #3
 80093ce:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80093d0:	e001      	b.n	80093d6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80093d2:	2303      	movs	r3, #3
 80093d4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	88db      	ldrh	r3, [r3, #6]
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d110      	bne.n	8009400 <USBD_StdItfReq+0xc0>
 80093de:	7bfb      	ldrb	r3, [r7, #15]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d10d      	bne.n	8009400 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fdc7 	bl	8009f78 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80093ea:	e009      	b.n	8009400 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80093ec:	6839      	ldr	r1, [r7, #0]
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 fcf7 	bl	8009de2 <USBD_CtlError>
          break;
 80093f4:	e004      	b.n	8009400 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80093f6:	6839      	ldr	r1, [r7, #0]
 80093f8:	6878      	ldr	r0, [r7, #4]
 80093fa:	f000 fcf2 	bl	8009de2 <USBD_CtlError>
          break;
 80093fe:	e000      	b.n	8009402 <USBD_StdItfReq+0xc2>
          break;
 8009400:	bf00      	nop
      }
      break;
 8009402:	e004      	b.n	800940e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009404:	6839      	ldr	r1, [r7, #0]
 8009406:	6878      	ldr	r0, [r7, #4]
 8009408:	f000 fceb 	bl	8009de2 <USBD_CtlError>
      break;
 800940c:	bf00      	nop
  }

  return ret;
 800940e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3710      	adds	r7, #16
 8009414:	46bd      	mov	sp, r7
 8009416:	bd80      	pop	{r7, pc}

08009418 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
 8009420:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009422:	2300      	movs	r3, #0
 8009424:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	889b      	ldrh	r3, [r3, #4]
 800942a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	781b      	ldrb	r3, [r3, #0]
 8009430:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8009434:	2b40      	cmp	r3, #64	; 0x40
 8009436:	d007      	beq.n	8009448 <USBD_StdEPReq+0x30>
 8009438:	2b40      	cmp	r3, #64	; 0x40
 800943a:	f200 817f 	bhi.w	800973c <USBD_StdEPReq+0x324>
 800943e:	2b00      	cmp	r3, #0
 8009440:	d02a      	beq.n	8009498 <USBD_StdEPReq+0x80>
 8009442:	2b20      	cmp	r3, #32
 8009444:	f040 817a 	bne.w	800973c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009448:	7bbb      	ldrb	r3, [r7, #14]
 800944a:	4619      	mov	r1, r3
 800944c:	6878      	ldr	r0, [r7, #4]
 800944e:	f7ff fe83 	bl	8009158 <USBD_CoreFindEP>
 8009452:	4603      	mov	r3, r0
 8009454:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009456:	7b7b      	ldrb	r3, [r7, #13]
 8009458:	2bff      	cmp	r3, #255	; 0xff
 800945a:	f000 8174 	beq.w	8009746 <USBD_StdEPReq+0x32e>
 800945e:	7b7b      	ldrb	r3, [r7, #13]
 8009460:	2b00      	cmp	r3, #0
 8009462:	f040 8170 	bne.w	8009746 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009466:	7b7a      	ldrb	r2, [r7, #13]
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800946e:	7b7a      	ldrb	r2, [r7, #13]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	32ae      	adds	r2, #174	; 0xae
 8009474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009478:	689b      	ldr	r3, [r3, #8]
 800947a:	2b00      	cmp	r3, #0
 800947c:	f000 8163 	beq.w	8009746 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009480:	7b7a      	ldrb	r2, [r7, #13]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	32ae      	adds	r2, #174	; 0xae
 8009486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800948a:	689b      	ldr	r3, [r3, #8]
 800948c:	6839      	ldr	r1, [r7, #0]
 800948e:	6878      	ldr	r0, [r7, #4]
 8009490:	4798      	blx	r3
 8009492:	4603      	mov	r3, r0
 8009494:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009496:	e156      	b.n	8009746 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	785b      	ldrb	r3, [r3, #1]
 800949c:	2b03      	cmp	r3, #3
 800949e:	d008      	beq.n	80094b2 <USBD_StdEPReq+0x9a>
 80094a0:	2b03      	cmp	r3, #3
 80094a2:	f300 8145 	bgt.w	8009730 <USBD_StdEPReq+0x318>
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	f000 809b 	beq.w	80095e2 <USBD_StdEPReq+0x1ca>
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d03c      	beq.n	800952a <USBD_StdEPReq+0x112>
 80094b0:	e13e      	b.n	8009730 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b02      	cmp	r3, #2
 80094bc:	d002      	beq.n	80094c4 <USBD_StdEPReq+0xac>
 80094be:	2b03      	cmp	r3, #3
 80094c0:	d016      	beq.n	80094f0 <USBD_StdEPReq+0xd8>
 80094c2:	e02c      	b.n	800951e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80094c4:	7bbb      	ldrb	r3, [r7, #14]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d00d      	beq.n	80094e6 <USBD_StdEPReq+0xce>
 80094ca:	7bbb      	ldrb	r3, [r7, #14]
 80094cc:	2b80      	cmp	r3, #128	; 0x80
 80094ce:	d00a      	beq.n	80094e6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80094d0:	7bbb      	ldrb	r3, [r7, #14]
 80094d2:	4619      	mov	r1, r3
 80094d4:	6878      	ldr	r0, [r7, #4]
 80094d6:	f001 f977 	bl	800a7c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80094da:	2180      	movs	r1, #128	; 0x80
 80094dc:	6878      	ldr	r0, [r7, #4]
 80094de:	f001 f973 	bl	800a7c8 <USBD_LL_StallEP>
 80094e2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80094e4:	e020      	b.n	8009528 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80094e6:	6839      	ldr	r1, [r7, #0]
 80094e8:	6878      	ldr	r0, [r7, #4]
 80094ea:	f000 fc7a 	bl	8009de2 <USBD_CtlError>
              break;
 80094ee:	e01b      	b.n	8009528 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	885b      	ldrh	r3, [r3, #2]
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d10e      	bne.n	8009516 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80094f8:	7bbb      	ldrb	r3, [r7, #14]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d00b      	beq.n	8009516 <USBD_StdEPReq+0xfe>
 80094fe:	7bbb      	ldrb	r3, [r7, #14]
 8009500:	2b80      	cmp	r3, #128	; 0x80
 8009502:	d008      	beq.n	8009516 <USBD_StdEPReq+0xfe>
 8009504:	683b      	ldr	r3, [r7, #0]
 8009506:	88db      	ldrh	r3, [r3, #6]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d104      	bne.n	8009516 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800950c:	7bbb      	ldrb	r3, [r7, #14]
 800950e:	4619      	mov	r1, r3
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f001 f959 	bl	800a7c8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fd2e 	bl	8009f78 <USBD_CtlSendStatus>

              break;
 800951c:	e004      	b.n	8009528 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800951e:	6839      	ldr	r1, [r7, #0]
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 fc5e 	bl	8009de2 <USBD_CtlError>
              break;
 8009526:	bf00      	nop
          }
          break;
 8009528:	e107      	b.n	800973a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009530:	b2db      	uxtb	r3, r3
 8009532:	2b02      	cmp	r3, #2
 8009534:	d002      	beq.n	800953c <USBD_StdEPReq+0x124>
 8009536:	2b03      	cmp	r3, #3
 8009538:	d016      	beq.n	8009568 <USBD_StdEPReq+0x150>
 800953a:	e04b      	b.n	80095d4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800953c:	7bbb      	ldrb	r3, [r7, #14]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d00d      	beq.n	800955e <USBD_StdEPReq+0x146>
 8009542:	7bbb      	ldrb	r3, [r7, #14]
 8009544:	2b80      	cmp	r3, #128	; 0x80
 8009546:	d00a      	beq.n	800955e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009548:	7bbb      	ldrb	r3, [r7, #14]
 800954a:	4619      	mov	r1, r3
 800954c:	6878      	ldr	r0, [r7, #4]
 800954e:	f001 f93b 	bl	800a7c8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009552:	2180      	movs	r1, #128	; 0x80
 8009554:	6878      	ldr	r0, [r7, #4]
 8009556:	f001 f937 	bl	800a7c8 <USBD_LL_StallEP>
 800955a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800955c:	e040      	b.n	80095e0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 fc3e 	bl	8009de2 <USBD_CtlError>
              break;
 8009566:	e03b      	b.n	80095e0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009568:	683b      	ldr	r3, [r7, #0]
 800956a:	885b      	ldrh	r3, [r3, #2]
 800956c:	2b00      	cmp	r3, #0
 800956e:	d136      	bne.n	80095de <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009570:	7bbb      	ldrb	r3, [r7, #14]
 8009572:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009576:	2b00      	cmp	r3, #0
 8009578:	d004      	beq.n	8009584 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800957a:	7bbb      	ldrb	r3, [r7, #14]
 800957c:	4619      	mov	r1, r3
 800957e:	6878      	ldr	r0, [r7, #4]
 8009580:	f001 f941 	bl	800a806 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	f000 fcf7 	bl	8009f78 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800958a:	7bbb      	ldrb	r3, [r7, #14]
 800958c:	4619      	mov	r1, r3
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f7ff fde2 	bl	8009158 <USBD_CoreFindEP>
 8009594:	4603      	mov	r3, r0
 8009596:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009598:	7b7b      	ldrb	r3, [r7, #13]
 800959a:	2bff      	cmp	r3, #255	; 0xff
 800959c:	d01f      	beq.n	80095de <USBD_StdEPReq+0x1c6>
 800959e:	7b7b      	ldrb	r3, [r7, #13]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d11c      	bne.n	80095de <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80095a4:	7b7a      	ldrb	r2, [r7, #13]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80095ac:	7b7a      	ldrb	r2, [r7, #13]
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	32ae      	adds	r2, #174	; 0xae
 80095b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095b6:	689b      	ldr	r3, [r3, #8]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d010      	beq.n	80095de <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80095bc:	7b7a      	ldrb	r2, [r7, #13]
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	32ae      	adds	r2, #174	; 0xae
 80095c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80095c6:	689b      	ldr	r3, [r3, #8]
 80095c8:	6839      	ldr	r1, [r7, #0]
 80095ca:	6878      	ldr	r0, [r7, #4]
 80095cc:	4798      	blx	r3
 80095ce:	4603      	mov	r3, r0
 80095d0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80095d2:	e004      	b.n	80095de <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80095d4:	6839      	ldr	r1, [r7, #0]
 80095d6:	6878      	ldr	r0, [r7, #4]
 80095d8:	f000 fc03 	bl	8009de2 <USBD_CtlError>
              break;
 80095dc:	e000      	b.n	80095e0 <USBD_StdEPReq+0x1c8>
              break;
 80095de:	bf00      	nop
          }
          break;
 80095e0:	e0ab      	b.n	800973a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d002      	beq.n	80095f4 <USBD_StdEPReq+0x1dc>
 80095ee:	2b03      	cmp	r3, #3
 80095f0:	d032      	beq.n	8009658 <USBD_StdEPReq+0x240>
 80095f2:	e097      	b.n	8009724 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095f4:	7bbb      	ldrb	r3, [r7, #14]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d007      	beq.n	800960a <USBD_StdEPReq+0x1f2>
 80095fa:	7bbb      	ldrb	r3, [r7, #14]
 80095fc:	2b80      	cmp	r3, #128	; 0x80
 80095fe:	d004      	beq.n	800960a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009600:	6839      	ldr	r1, [r7, #0]
 8009602:	6878      	ldr	r0, [r7, #4]
 8009604:	f000 fbed 	bl	8009de2 <USBD_CtlError>
                break;
 8009608:	e091      	b.n	800972e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800960a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800960e:	2b00      	cmp	r3, #0
 8009610:	da0b      	bge.n	800962a <USBD_StdEPReq+0x212>
 8009612:	7bbb      	ldrb	r3, [r7, #14]
 8009614:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009618:	4613      	mov	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4413      	add	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	3310      	adds	r3, #16
 8009622:	687a      	ldr	r2, [r7, #4]
 8009624:	4413      	add	r3, r2
 8009626:	3304      	adds	r3, #4
 8009628:	e00b      	b.n	8009642 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800962a:	7bbb      	ldrb	r3, [r7, #14]
 800962c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009630:	4613      	mov	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	4413      	add	r3, r2
 8009636:	009b      	lsls	r3, r3, #2
 8009638:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800963c:	687a      	ldr	r2, [r7, #4]
 800963e:	4413      	add	r3, r2
 8009640:	3304      	adds	r3, #4
 8009642:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	2200      	movs	r2, #0
 8009648:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	2202      	movs	r2, #2
 800964e:	4619      	mov	r1, r3
 8009650:	6878      	ldr	r0, [r7, #4]
 8009652:	f000 fc37 	bl	8009ec4 <USBD_CtlSendData>
              break;
 8009656:	e06a      	b.n	800972e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009658:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800965c:	2b00      	cmp	r3, #0
 800965e:	da11      	bge.n	8009684 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009660:	7bbb      	ldrb	r3, [r7, #14]
 8009662:	f003 020f 	and.w	r2, r3, #15
 8009666:	6879      	ldr	r1, [r7, #4]
 8009668:	4613      	mov	r3, r2
 800966a:	009b      	lsls	r3, r3, #2
 800966c:	4413      	add	r3, r2
 800966e:	009b      	lsls	r3, r3, #2
 8009670:	440b      	add	r3, r1
 8009672:	3324      	adds	r3, #36	; 0x24
 8009674:	881b      	ldrh	r3, [r3, #0]
 8009676:	2b00      	cmp	r3, #0
 8009678:	d117      	bne.n	80096aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800967a:	6839      	ldr	r1, [r7, #0]
 800967c:	6878      	ldr	r0, [r7, #4]
 800967e:	f000 fbb0 	bl	8009de2 <USBD_CtlError>
                  break;
 8009682:	e054      	b.n	800972e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009684:	7bbb      	ldrb	r3, [r7, #14]
 8009686:	f003 020f 	and.w	r2, r3, #15
 800968a:	6879      	ldr	r1, [r7, #4]
 800968c:	4613      	mov	r3, r2
 800968e:	009b      	lsls	r3, r3, #2
 8009690:	4413      	add	r3, r2
 8009692:	009b      	lsls	r3, r3, #2
 8009694:	440b      	add	r3, r1
 8009696:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800969a:	881b      	ldrh	r3, [r3, #0]
 800969c:	2b00      	cmp	r3, #0
 800969e:	d104      	bne.n	80096aa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 fb9d 	bl	8009de2 <USBD_CtlError>
                  break;
 80096a8:	e041      	b.n	800972e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	da0b      	bge.n	80096ca <USBD_StdEPReq+0x2b2>
 80096b2:	7bbb      	ldrb	r3, [r7, #14]
 80096b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096b8:	4613      	mov	r3, r2
 80096ba:	009b      	lsls	r3, r3, #2
 80096bc:	4413      	add	r3, r2
 80096be:	009b      	lsls	r3, r3, #2
 80096c0:	3310      	adds	r3, #16
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	4413      	add	r3, r2
 80096c6:	3304      	adds	r3, #4
 80096c8:	e00b      	b.n	80096e2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
 80096cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096d0:	4613      	mov	r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	4413      	add	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80096dc:	687a      	ldr	r2, [r7, #4]
 80096de:	4413      	add	r3, r2
 80096e0:	3304      	adds	r3, #4
 80096e2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80096e4:	7bbb      	ldrb	r3, [r7, #14]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d002      	beq.n	80096f0 <USBD_StdEPReq+0x2d8>
 80096ea:	7bbb      	ldrb	r3, [r7, #14]
 80096ec:	2b80      	cmp	r3, #128	; 0x80
 80096ee:	d103      	bne.n	80096f8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	2200      	movs	r2, #0
 80096f4:	601a      	str	r2, [r3, #0]
 80096f6:	e00e      	b.n	8009716 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80096f8:	7bbb      	ldrb	r3, [r7, #14]
 80096fa:	4619      	mov	r1, r3
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f001 f8a1 	bl	800a844 <USBD_LL_IsStallEP>
 8009702:	4603      	mov	r3, r0
 8009704:	2b00      	cmp	r3, #0
 8009706:	d003      	beq.n	8009710 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009708:	68bb      	ldr	r3, [r7, #8]
 800970a:	2201      	movs	r2, #1
 800970c:	601a      	str	r2, [r3, #0]
 800970e:	e002      	b.n	8009716 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	2200      	movs	r2, #0
 8009714:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009716:	68bb      	ldr	r3, [r7, #8]
 8009718:	2202      	movs	r2, #2
 800971a:	4619      	mov	r1, r3
 800971c:	6878      	ldr	r0, [r7, #4]
 800971e:	f000 fbd1 	bl	8009ec4 <USBD_CtlSendData>
              break;
 8009722:	e004      	b.n	800972e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009724:	6839      	ldr	r1, [r7, #0]
 8009726:	6878      	ldr	r0, [r7, #4]
 8009728:	f000 fb5b 	bl	8009de2 <USBD_CtlError>
              break;
 800972c:	bf00      	nop
          }
          break;
 800972e:	e004      	b.n	800973a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009730:	6839      	ldr	r1, [r7, #0]
 8009732:	6878      	ldr	r0, [r7, #4]
 8009734:	f000 fb55 	bl	8009de2 <USBD_CtlError>
          break;
 8009738:	bf00      	nop
      }
      break;
 800973a:	e005      	b.n	8009748 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800973c:	6839      	ldr	r1, [r7, #0]
 800973e:	6878      	ldr	r0, [r7, #4]
 8009740:	f000 fb4f 	bl	8009de2 <USBD_CtlError>
      break;
 8009744:	e000      	b.n	8009748 <USBD_StdEPReq+0x330>
      break;
 8009746:	bf00      	nop
  }

  return ret;
 8009748:	7bfb      	ldrb	r3, [r7, #15]
}
 800974a:	4618      	mov	r0, r3
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}
	...

08009754 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	6078      	str	r0, [r7, #4]
 800975c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800975e:	2300      	movs	r3, #0
 8009760:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009762:	2300      	movs	r3, #0
 8009764:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009766:	2300      	movs	r3, #0
 8009768:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800976a:	683b      	ldr	r3, [r7, #0]
 800976c:	885b      	ldrh	r3, [r3, #2]
 800976e:	0a1b      	lsrs	r3, r3, #8
 8009770:	b29b      	uxth	r3, r3
 8009772:	3b01      	subs	r3, #1
 8009774:	2b06      	cmp	r3, #6
 8009776:	f200 8128 	bhi.w	80099ca <USBD_GetDescriptor+0x276>
 800977a:	a201      	add	r2, pc, #4	; (adr r2, 8009780 <USBD_GetDescriptor+0x2c>)
 800977c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009780:	0800979d 	.word	0x0800979d
 8009784:	080097b5 	.word	0x080097b5
 8009788:	080097f5 	.word	0x080097f5
 800978c:	080099cb 	.word	0x080099cb
 8009790:	080099cb 	.word	0x080099cb
 8009794:	0800996b 	.word	0x0800996b
 8009798:	08009997 	.word	0x08009997
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	687a      	ldr	r2, [r7, #4]
 80097a6:	7c12      	ldrb	r2, [r2, #16]
 80097a8:	f107 0108 	add.w	r1, r7, #8
 80097ac:	4610      	mov	r0, r2
 80097ae:	4798      	blx	r3
 80097b0:	60f8      	str	r0, [r7, #12]
      break;
 80097b2:	e112      	b.n	80099da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	7c1b      	ldrb	r3, [r3, #16]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d10d      	bne.n	80097d8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c4:	f107 0208 	add.w	r2, r7, #8
 80097c8:	4610      	mov	r0, r2
 80097ca:	4798      	blx	r3
 80097cc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	3301      	adds	r3, #1
 80097d2:	2202      	movs	r2, #2
 80097d4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80097d6:	e100      	b.n	80099da <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e0:	f107 0208 	add.w	r2, r7, #8
 80097e4:	4610      	mov	r0, r2
 80097e6:	4798      	blx	r3
 80097e8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	3301      	adds	r3, #1
 80097ee:	2202      	movs	r2, #2
 80097f0:	701a      	strb	r2, [r3, #0]
      break;
 80097f2:	e0f2      	b.n	80099da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	885b      	ldrh	r3, [r3, #2]
 80097f8:	b2db      	uxtb	r3, r3
 80097fa:	2b05      	cmp	r3, #5
 80097fc:	f200 80ac 	bhi.w	8009958 <USBD_GetDescriptor+0x204>
 8009800:	a201      	add	r2, pc, #4	; (adr r2, 8009808 <USBD_GetDescriptor+0xb4>)
 8009802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009806:	bf00      	nop
 8009808:	08009821 	.word	0x08009821
 800980c:	08009855 	.word	0x08009855
 8009810:	08009889 	.word	0x08009889
 8009814:	080098bd 	.word	0x080098bd
 8009818:	080098f1 	.word	0x080098f1
 800981c:	08009925 	.word	0x08009925
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009826:	685b      	ldr	r3, [r3, #4]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d00b      	beq.n	8009844 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	7c12      	ldrb	r2, [r2, #16]
 8009838:	f107 0108 	add.w	r1, r7, #8
 800983c:	4610      	mov	r0, r2
 800983e:	4798      	blx	r3
 8009840:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009842:	e091      	b.n	8009968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009844:	6839      	ldr	r1, [r7, #0]
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 facb 	bl	8009de2 <USBD_CtlError>
            err++;
 800984c:	7afb      	ldrb	r3, [r7, #11]
 800984e:	3301      	adds	r3, #1
 8009850:	72fb      	strb	r3, [r7, #11]
          break;
 8009852:	e089      	b.n	8009968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800985a:	689b      	ldr	r3, [r3, #8]
 800985c:	2b00      	cmp	r3, #0
 800985e:	d00b      	beq.n	8009878 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	687a      	ldr	r2, [r7, #4]
 800986a:	7c12      	ldrb	r2, [r2, #16]
 800986c:	f107 0108 	add.w	r1, r7, #8
 8009870:	4610      	mov	r0, r2
 8009872:	4798      	blx	r3
 8009874:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009876:	e077      	b.n	8009968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009878:	6839      	ldr	r1, [r7, #0]
 800987a:	6878      	ldr	r0, [r7, #4]
 800987c:	f000 fab1 	bl	8009de2 <USBD_CtlError>
            err++;
 8009880:	7afb      	ldrb	r3, [r7, #11]
 8009882:	3301      	adds	r3, #1
 8009884:	72fb      	strb	r3, [r7, #11]
          break;
 8009886:	e06f      	b.n	8009968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800988e:	68db      	ldr	r3, [r3, #12]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00b      	beq.n	80098ac <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	7c12      	ldrb	r2, [r2, #16]
 80098a0:	f107 0108 	add.w	r1, r7, #8
 80098a4:	4610      	mov	r0, r2
 80098a6:	4798      	blx	r3
 80098a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098aa:	e05d      	b.n	8009968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098ac:	6839      	ldr	r1, [r7, #0]
 80098ae:	6878      	ldr	r0, [r7, #4]
 80098b0:	f000 fa97 	bl	8009de2 <USBD_CtlError>
            err++;
 80098b4:	7afb      	ldrb	r3, [r7, #11]
 80098b6:	3301      	adds	r3, #1
 80098b8:	72fb      	strb	r3, [r7, #11]
          break;
 80098ba:	e055      	b.n	8009968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098c2:	691b      	ldr	r3, [r3, #16]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d00b      	beq.n	80098e0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	687a      	ldr	r2, [r7, #4]
 80098d2:	7c12      	ldrb	r2, [r2, #16]
 80098d4:	f107 0108 	add.w	r1, r7, #8
 80098d8:	4610      	mov	r0, r2
 80098da:	4798      	blx	r3
 80098dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098de:	e043      	b.n	8009968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098e0:	6839      	ldr	r1, [r7, #0]
 80098e2:	6878      	ldr	r0, [r7, #4]
 80098e4:	f000 fa7d 	bl	8009de2 <USBD_CtlError>
            err++;
 80098e8:	7afb      	ldrb	r3, [r7, #11]
 80098ea:	3301      	adds	r3, #1
 80098ec:	72fb      	strb	r3, [r7, #11]
          break;
 80098ee:	e03b      	b.n	8009968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098f6:	695b      	ldr	r3, [r3, #20]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00b      	beq.n	8009914 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009902:	695b      	ldr	r3, [r3, #20]
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	7c12      	ldrb	r2, [r2, #16]
 8009908:	f107 0108 	add.w	r1, r7, #8
 800990c:	4610      	mov	r0, r2
 800990e:	4798      	blx	r3
 8009910:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009912:	e029      	b.n	8009968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	f000 fa63 	bl	8009de2 <USBD_CtlError>
            err++;
 800991c:	7afb      	ldrb	r3, [r7, #11]
 800991e:	3301      	adds	r3, #1
 8009920:	72fb      	strb	r3, [r7, #11]
          break;
 8009922:	e021      	b.n	8009968 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d00b      	beq.n	8009948 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	687a      	ldr	r2, [r7, #4]
 800993a:	7c12      	ldrb	r2, [r2, #16]
 800993c:	f107 0108 	add.w	r1, r7, #8
 8009940:	4610      	mov	r0, r2
 8009942:	4798      	blx	r3
 8009944:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009946:	e00f      	b.n	8009968 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009948:	6839      	ldr	r1, [r7, #0]
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f000 fa49 	bl	8009de2 <USBD_CtlError>
            err++;
 8009950:	7afb      	ldrb	r3, [r7, #11]
 8009952:	3301      	adds	r3, #1
 8009954:	72fb      	strb	r3, [r7, #11]
          break;
 8009956:	e007      	b.n	8009968 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009958:	6839      	ldr	r1, [r7, #0]
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f000 fa41 	bl	8009de2 <USBD_CtlError>
          err++;
 8009960:	7afb      	ldrb	r3, [r7, #11]
 8009962:	3301      	adds	r3, #1
 8009964:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009966:	bf00      	nop
      }
      break;
 8009968:	e037      	b.n	80099da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	7c1b      	ldrb	r3, [r3, #16]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d109      	bne.n	8009986 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800997a:	f107 0208 	add.w	r2, r7, #8
 800997e:	4610      	mov	r0, r2
 8009980:	4798      	blx	r3
 8009982:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009984:	e029      	b.n	80099da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 fa2a 	bl	8009de2 <USBD_CtlError>
        err++;
 800998e:	7afb      	ldrb	r3, [r7, #11]
 8009990:	3301      	adds	r3, #1
 8009992:	72fb      	strb	r3, [r7, #11]
      break;
 8009994:	e021      	b.n	80099da <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	7c1b      	ldrb	r3, [r3, #16]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d10d      	bne.n	80099ba <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80099a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099a6:	f107 0208 	add.w	r2, r7, #8
 80099aa:	4610      	mov	r0, r2
 80099ac:	4798      	blx	r3
 80099ae:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	3301      	adds	r3, #1
 80099b4:	2207      	movs	r2, #7
 80099b6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80099b8:	e00f      	b.n	80099da <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80099ba:	6839      	ldr	r1, [r7, #0]
 80099bc:	6878      	ldr	r0, [r7, #4]
 80099be:	f000 fa10 	bl	8009de2 <USBD_CtlError>
        err++;
 80099c2:	7afb      	ldrb	r3, [r7, #11]
 80099c4:	3301      	adds	r3, #1
 80099c6:	72fb      	strb	r3, [r7, #11]
      break;
 80099c8:	e007      	b.n	80099da <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80099ca:	6839      	ldr	r1, [r7, #0]
 80099cc:	6878      	ldr	r0, [r7, #4]
 80099ce:	f000 fa08 	bl	8009de2 <USBD_CtlError>
      err++;
 80099d2:	7afb      	ldrb	r3, [r7, #11]
 80099d4:	3301      	adds	r3, #1
 80099d6:	72fb      	strb	r3, [r7, #11]
      break;
 80099d8:	bf00      	nop
  }

  if (err != 0U)
 80099da:	7afb      	ldrb	r3, [r7, #11]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d11e      	bne.n	8009a1e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	88db      	ldrh	r3, [r3, #6]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d016      	beq.n	8009a16 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80099e8:	893b      	ldrh	r3, [r7, #8]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d00e      	beq.n	8009a0c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80099ee:	683b      	ldr	r3, [r7, #0]
 80099f0:	88da      	ldrh	r2, [r3, #6]
 80099f2:	893b      	ldrh	r3, [r7, #8]
 80099f4:	4293      	cmp	r3, r2
 80099f6:	bf28      	it	cs
 80099f8:	4613      	movcs	r3, r2
 80099fa:	b29b      	uxth	r3, r3
 80099fc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80099fe:	893b      	ldrh	r3, [r7, #8]
 8009a00:	461a      	mov	r2, r3
 8009a02:	68f9      	ldr	r1, [r7, #12]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fa5d 	bl	8009ec4 <USBD_CtlSendData>
 8009a0a:	e009      	b.n	8009a20 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009a0c:	6839      	ldr	r1, [r7, #0]
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 f9e7 	bl	8009de2 <USBD_CtlError>
 8009a14:	e004      	b.n	8009a20 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009a16:	6878      	ldr	r0, [r7, #4]
 8009a18:	f000 faae 	bl	8009f78 <USBD_CtlSendStatus>
 8009a1c:	e000      	b.n	8009a20 <USBD_GetDescriptor+0x2cc>
    return;
 8009a1e:	bf00      	nop
  }
}
 8009a20:	3710      	adds	r7, #16
 8009a22:	46bd      	mov	sp, r7
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop

08009a28 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b084      	sub	sp, #16
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
 8009a30:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009a32:	683b      	ldr	r3, [r7, #0]
 8009a34:	889b      	ldrh	r3, [r3, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d131      	bne.n	8009a9e <USBD_SetAddress+0x76>
 8009a3a:	683b      	ldr	r3, [r7, #0]
 8009a3c:	88db      	ldrh	r3, [r3, #6]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d12d      	bne.n	8009a9e <USBD_SetAddress+0x76>
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	885b      	ldrh	r3, [r3, #2]
 8009a46:	2b7f      	cmp	r3, #127	; 0x7f
 8009a48:	d829      	bhi.n	8009a9e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	885b      	ldrh	r3, [r3, #2]
 8009a4e:	b2db      	uxtb	r3, r3
 8009a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a54:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a5c:	b2db      	uxtb	r3, r3
 8009a5e:	2b03      	cmp	r3, #3
 8009a60:	d104      	bne.n	8009a6c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009a62:	6839      	ldr	r1, [r7, #0]
 8009a64:	6878      	ldr	r0, [r7, #4]
 8009a66:	f000 f9bc 	bl	8009de2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a6a:	e01d      	b.n	8009aa8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	7bfa      	ldrb	r2, [r7, #15]
 8009a70:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009a74:	7bfb      	ldrb	r3, [r7, #15]
 8009a76:	4619      	mov	r1, r3
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f000 ff0f 	bl	800a89c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009a7e:	6878      	ldr	r0, [r7, #4]
 8009a80:	f000 fa7a 	bl	8009f78 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d004      	beq.n	8009a94 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2202      	movs	r2, #2
 8009a8e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a92:	e009      	b.n	8009aa8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2201      	movs	r2, #1
 8009a98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009a9c:	e004      	b.n	8009aa8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f99e 	bl	8009de2 <USBD_CtlError>
  }
}
 8009aa6:	bf00      	nop
 8009aa8:	bf00      	nop
 8009aaa:	3710      	adds	r7, #16
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009aba:	2300      	movs	r3, #0
 8009abc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	885b      	ldrh	r3, [r3, #2]
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	4b4e      	ldr	r3, [pc, #312]	; (8009c00 <USBD_SetConfig+0x150>)
 8009ac6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009ac8:	4b4d      	ldr	r3, [pc, #308]	; (8009c00 <USBD_SetConfig+0x150>)
 8009aca:	781b      	ldrb	r3, [r3, #0]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d905      	bls.n	8009adc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009ad0:	6839      	ldr	r1, [r7, #0]
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f000 f985 	bl	8009de2 <USBD_CtlError>
    return USBD_FAIL;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	e08c      	b.n	8009bf6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b02      	cmp	r3, #2
 8009ae6:	d002      	beq.n	8009aee <USBD_SetConfig+0x3e>
 8009ae8:	2b03      	cmp	r3, #3
 8009aea:	d029      	beq.n	8009b40 <USBD_SetConfig+0x90>
 8009aec:	e075      	b.n	8009bda <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009aee:	4b44      	ldr	r3, [pc, #272]	; (8009c00 <USBD_SetConfig+0x150>)
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d020      	beq.n	8009b38 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009af6:	4b42      	ldr	r3, [pc, #264]	; (8009c00 <USBD_SetConfig+0x150>)
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	461a      	mov	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b00:	4b3f      	ldr	r3, [pc, #252]	; (8009c00 <USBD_SetConfig+0x150>)
 8009b02:	781b      	ldrb	r3, [r3, #0]
 8009b04:	4619      	mov	r1, r3
 8009b06:	6878      	ldr	r0, [r7, #4]
 8009b08:	f7fe ffe7 	bl	8008ada <USBD_SetClassConfig>
 8009b0c:	4603      	mov	r3, r0
 8009b0e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009b10:	7bfb      	ldrb	r3, [r7, #15]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d008      	beq.n	8009b28 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009b16:	6839      	ldr	r1, [r7, #0]
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	f000 f962 	bl	8009de2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2202      	movs	r2, #2
 8009b22:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b26:	e065      	b.n	8009bf4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009b28:	6878      	ldr	r0, [r7, #4]
 8009b2a:	f000 fa25 	bl	8009f78 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	2203      	movs	r2, #3
 8009b32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009b36:	e05d      	b.n	8009bf4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 fa1d 	bl	8009f78 <USBD_CtlSendStatus>
      break;
 8009b3e:	e059      	b.n	8009bf4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009b40:	4b2f      	ldr	r3, [pc, #188]	; (8009c00 <USBD_SetConfig+0x150>)
 8009b42:	781b      	ldrb	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d112      	bne.n	8009b6e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2202      	movs	r2, #2
 8009b4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009b50:	4b2b      	ldr	r3, [pc, #172]	; (8009c00 <USBD_SetConfig+0x150>)
 8009b52:	781b      	ldrb	r3, [r3, #0]
 8009b54:	461a      	mov	r2, r3
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009b5a:	4b29      	ldr	r3, [pc, #164]	; (8009c00 <USBD_SetConfig+0x150>)
 8009b5c:	781b      	ldrb	r3, [r3, #0]
 8009b5e:	4619      	mov	r1, r3
 8009b60:	6878      	ldr	r0, [r7, #4]
 8009b62:	f7fe ffd6 	bl	8008b12 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f000 fa06 	bl	8009f78 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009b6c:	e042      	b.n	8009bf4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009b6e:	4b24      	ldr	r3, [pc, #144]	; (8009c00 <USBD_SetConfig+0x150>)
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	461a      	mov	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	685b      	ldr	r3, [r3, #4]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d02a      	beq.n	8009bd2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	685b      	ldr	r3, [r3, #4]
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f7fe ffc4 	bl	8008b12 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009b8a:	4b1d      	ldr	r3, [pc, #116]	; (8009c00 <USBD_SetConfig+0x150>)
 8009b8c:	781b      	ldrb	r3, [r3, #0]
 8009b8e:	461a      	mov	r2, r3
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009b94:	4b1a      	ldr	r3, [pc, #104]	; (8009c00 <USBD_SetConfig+0x150>)
 8009b96:	781b      	ldrb	r3, [r3, #0]
 8009b98:	4619      	mov	r1, r3
 8009b9a:	6878      	ldr	r0, [r7, #4]
 8009b9c:	f7fe ff9d 	bl	8008ada <USBD_SetClassConfig>
 8009ba0:	4603      	mov	r3, r0
 8009ba2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009ba4:	7bfb      	ldrb	r3, [r7, #15]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00f      	beq.n	8009bca <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009baa:	6839      	ldr	r1, [r7, #0]
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 f918 	bl	8009de2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	685b      	ldr	r3, [r3, #4]
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	4619      	mov	r1, r3
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f7fe ffa9 	bl	8008b12 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2202      	movs	r2, #2
 8009bc4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009bc8:	e014      	b.n	8009bf4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009bca:	6878      	ldr	r0, [r7, #4]
 8009bcc:	f000 f9d4 	bl	8009f78 <USBD_CtlSendStatus>
      break;
 8009bd0:	e010      	b.n	8009bf4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f000 f9d0 	bl	8009f78 <USBD_CtlSendStatus>
      break;
 8009bd8:	e00c      	b.n	8009bf4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009bda:	6839      	ldr	r1, [r7, #0]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f000 f900 	bl	8009de2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009be2:	4b07      	ldr	r3, [pc, #28]	; (8009c00 <USBD_SetConfig+0x150>)
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f7fe ff92 	bl	8008b12 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	73fb      	strb	r3, [r7, #15]
      break;
 8009bf2:	bf00      	nop
  }

  return ret;
 8009bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	3710      	adds	r7, #16
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	bd80      	pop	{r7, pc}
 8009bfe:	bf00      	nop
 8009c00:	20000684 	.word	0x20000684

08009c04 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
 8009c0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	88db      	ldrh	r3, [r3, #6]
 8009c12:	2b01      	cmp	r3, #1
 8009c14:	d004      	beq.n	8009c20 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009c16:	6839      	ldr	r1, [r7, #0]
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f000 f8e2 	bl	8009de2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009c1e:	e023      	b.n	8009c68 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	2b02      	cmp	r3, #2
 8009c2a:	dc02      	bgt.n	8009c32 <USBD_GetConfig+0x2e>
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	dc03      	bgt.n	8009c38 <USBD_GetConfig+0x34>
 8009c30:	e015      	b.n	8009c5e <USBD_GetConfig+0x5a>
 8009c32:	2b03      	cmp	r3, #3
 8009c34:	d00b      	beq.n	8009c4e <USBD_GetConfig+0x4a>
 8009c36:	e012      	b.n	8009c5e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	3308      	adds	r3, #8
 8009c42:	2201      	movs	r2, #1
 8009c44:	4619      	mov	r1, r3
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f000 f93c 	bl	8009ec4 <USBD_CtlSendData>
        break;
 8009c4c:	e00c      	b.n	8009c68 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	3304      	adds	r3, #4
 8009c52:	2201      	movs	r2, #1
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f000 f934 	bl	8009ec4 <USBD_CtlSendData>
        break;
 8009c5c:	e004      	b.n	8009c68 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009c5e:	6839      	ldr	r1, [r7, #0]
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	f000 f8be 	bl	8009de2 <USBD_CtlError>
        break;
 8009c66:	bf00      	nop
}
 8009c68:	bf00      	nop
 8009c6a:	3708      	adds	r7, #8
 8009c6c:	46bd      	mov	sp, r7
 8009c6e:	bd80      	pop	{r7, pc}

08009c70 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b082      	sub	sp, #8
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009c80:	b2db      	uxtb	r3, r3
 8009c82:	3b01      	subs	r3, #1
 8009c84:	2b02      	cmp	r3, #2
 8009c86:	d81e      	bhi.n	8009cc6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	88db      	ldrh	r3, [r3, #6]
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d004      	beq.n	8009c9a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009c90:	6839      	ldr	r1, [r7, #0]
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	f000 f8a5 	bl	8009de2 <USBD_CtlError>
        break;
 8009c98:	e01a      	b.n	8009cd0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d005      	beq.n	8009cb6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	68db      	ldr	r3, [r3, #12]
 8009cae:	f043 0202 	orr.w	r2, r3, #2
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	330c      	adds	r3, #12
 8009cba:	2202      	movs	r2, #2
 8009cbc:	4619      	mov	r1, r3
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 f900 	bl	8009ec4 <USBD_CtlSendData>
      break;
 8009cc4:	e004      	b.n	8009cd0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	6878      	ldr	r0, [r7, #4]
 8009cca:	f000 f88a 	bl	8009de2 <USBD_CtlError>
      break;
 8009cce:	bf00      	nop
  }
}
 8009cd0:	bf00      	nop
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b082      	sub	sp, #8
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	885b      	ldrh	r3, [r3, #2]
 8009ce6:	2b01      	cmp	r3, #1
 8009ce8:	d107      	bne.n	8009cfa <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009cf2:	6878      	ldr	r0, [r7, #4]
 8009cf4:	f000 f940 	bl	8009f78 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009cf8:	e013      	b.n	8009d22 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009cfa:	683b      	ldr	r3, [r7, #0]
 8009cfc:	885b      	ldrh	r3, [r3, #2]
 8009cfe:	2b02      	cmp	r3, #2
 8009d00:	d10b      	bne.n	8009d1a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	889b      	ldrh	r3, [r3, #4]
 8009d06:	0a1b      	lsrs	r3, r3, #8
 8009d08:	b29b      	uxth	r3, r3
 8009d0a:	b2da      	uxtb	r2, r3
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f930 	bl	8009f78 <USBD_CtlSendStatus>
}
 8009d18:	e003      	b.n	8009d22 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009d1a:	6839      	ldr	r1, [r7, #0]
 8009d1c:	6878      	ldr	r0, [r7, #4]
 8009d1e:	f000 f860 	bl	8009de2 <USBD_CtlError>
}
 8009d22:	bf00      	nop
 8009d24:	3708      	adds	r7, #8
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}

08009d2a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d2a:	b580      	push	{r7, lr}
 8009d2c:	b082      	sub	sp, #8
 8009d2e:	af00      	add	r7, sp, #0
 8009d30:	6078      	str	r0, [r7, #4]
 8009d32:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	3b01      	subs	r3, #1
 8009d3e:	2b02      	cmp	r3, #2
 8009d40:	d80b      	bhi.n	8009d5a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	885b      	ldrh	r3, [r3, #2]
 8009d46:	2b01      	cmp	r3, #1
 8009d48:	d10c      	bne.n	8009d64 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009d52:	6878      	ldr	r0, [r7, #4]
 8009d54:	f000 f910 	bl	8009f78 <USBD_CtlSendStatus>
      }
      break;
 8009d58:	e004      	b.n	8009d64 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009d5a:	6839      	ldr	r1, [r7, #0]
 8009d5c:	6878      	ldr	r0, [r7, #4]
 8009d5e:	f000 f840 	bl	8009de2 <USBD_CtlError>
      break;
 8009d62:	e000      	b.n	8009d66 <USBD_ClrFeature+0x3c>
      break;
 8009d64:	bf00      	nop
  }
}
 8009d66:	bf00      	nop
 8009d68:	3708      	adds	r7, #8
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}

08009d6e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009d6e:	b580      	push	{r7, lr}
 8009d70:	b084      	sub	sp, #16
 8009d72:	af00      	add	r7, sp, #0
 8009d74:	6078      	str	r0, [r7, #4]
 8009d76:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	781a      	ldrb	r2, [r3, #0]
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	3301      	adds	r3, #1
 8009d88:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	781a      	ldrb	r2, [r3, #0]
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	3301      	adds	r3, #1
 8009d96:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	f7ff fa41 	bl	8009220 <SWAPBYTE>
 8009d9e:	4603      	mov	r3, r0
 8009da0:	461a      	mov	r2, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	3301      	adds	r3, #1
 8009daa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	3301      	adds	r3, #1
 8009db0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009db2:	68f8      	ldr	r0, [r7, #12]
 8009db4:	f7ff fa34 	bl	8009220 <SWAPBYTE>
 8009db8:	4603      	mov	r3, r0
 8009dba:	461a      	mov	r2, r3
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009dcc:	68f8      	ldr	r0, [r7, #12]
 8009dce:	f7ff fa27 	bl	8009220 <SWAPBYTE>
 8009dd2:	4603      	mov	r3, r0
 8009dd4:	461a      	mov	r2, r3
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	80da      	strh	r2, [r3, #6]
}
 8009dda:	bf00      	nop
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b082      	sub	sp, #8
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009dec:	2180      	movs	r1, #128	; 0x80
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f000 fcea 	bl	800a7c8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009df4:	2100      	movs	r1, #0
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 fce6 	bl	800a7c8 <USBD_LL_StallEP>
}
 8009dfc:	bf00      	nop
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}

08009e04 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	60f8      	str	r0, [r7, #12]
 8009e0c:	60b9      	str	r1, [r7, #8]
 8009e0e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009e10:	2300      	movs	r3, #0
 8009e12:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009e14:	68fb      	ldr	r3, [r7, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d036      	beq.n	8009e88 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009e1e:	6938      	ldr	r0, [r7, #16]
 8009e20:	f000 f836 	bl	8009e90 <USBD_GetLen>
 8009e24:	4603      	mov	r3, r0
 8009e26:	3301      	adds	r3, #1
 8009e28:	b29b      	uxth	r3, r3
 8009e2a:	005b      	lsls	r3, r3, #1
 8009e2c:	b29a      	uxth	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009e32:	7dfb      	ldrb	r3, [r7, #23]
 8009e34:	68ba      	ldr	r2, [r7, #8]
 8009e36:	4413      	add	r3, r2
 8009e38:	687a      	ldr	r2, [r7, #4]
 8009e3a:	7812      	ldrb	r2, [r2, #0]
 8009e3c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e3e:	7dfb      	ldrb	r3, [r7, #23]
 8009e40:	3301      	adds	r3, #1
 8009e42:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009e44:	7dfb      	ldrb	r3, [r7, #23]
 8009e46:	68ba      	ldr	r2, [r7, #8]
 8009e48:	4413      	add	r3, r2
 8009e4a:	2203      	movs	r2, #3
 8009e4c:	701a      	strb	r2, [r3, #0]
  idx++;
 8009e4e:	7dfb      	ldrb	r3, [r7, #23]
 8009e50:	3301      	adds	r3, #1
 8009e52:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009e54:	e013      	b.n	8009e7e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009e56:	7dfb      	ldrb	r3, [r7, #23]
 8009e58:	68ba      	ldr	r2, [r7, #8]
 8009e5a:	4413      	add	r3, r2
 8009e5c:	693a      	ldr	r2, [r7, #16]
 8009e5e:	7812      	ldrb	r2, [r2, #0]
 8009e60:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	3301      	adds	r3, #1
 8009e66:	613b      	str	r3, [r7, #16]
    idx++;
 8009e68:	7dfb      	ldrb	r3, [r7, #23]
 8009e6a:	3301      	adds	r3, #1
 8009e6c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009e6e:	7dfb      	ldrb	r3, [r7, #23]
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	4413      	add	r3, r2
 8009e74:	2200      	movs	r2, #0
 8009e76:	701a      	strb	r2, [r3, #0]
    idx++;
 8009e78:	7dfb      	ldrb	r3, [r7, #23]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d1e7      	bne.n	8009e56 <USBD_GetString+0x52>
 8009e86:	e000      	b.n	8009e8a <USBD_GetString+0x86>
    return;
 8009e88:	bf00      	nop
  }
}
 8009e8a:	3718      	adds	r7, #24
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b085      	sub	sp, #20
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009e98:	2300      	movs	r3, #0
 8009e9a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009ea0:	e005      	b.n	8009eae <USBD_GetLen+0x1e>
  {
    len++;
 8009ea2:	7bfb      	ldrb	r3, [r7, #15]
 8009ea4:	3301      	adds	r3, #1
 8009ea6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	3301      	adds	r3, #1
 8009eac:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	781b      	ldrb	r3, [r3, #0]
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1f5      	bne.n	8009ea2 <USBD_GetLen+0x12>
  }

  return len;
 8009eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb8:	4618      	mov	r0, r3
 8009eba:	3714      	adds	r7, #20
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b084      	sub	sp, #16
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	2202      	movs	r2, #2
 8009ed4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	687a      	ldr	r2, [r7, #4]
 8009edc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	68ba      	ldr	r2, [r7, #8]
 8009ee8:	2100      	movs	r1, #0
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f000 fcf5 	bl	800a8da <USBD_LL_Transmit>

  return USBD_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}

08009efa <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009efa:	b580      	push	{r7, lr}
 8009efc:	b084      	sub	sp, #16
 8009efe:	af00      	add	r7, sp, #0
 8009f00:	60f8      	str	r0, [r7, #12]
 8009f02:	60b9      	str	r1, [r7, #8]
 8009f04:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	68ba      	ldr	r2, [r7, #8]
 8009f0a:	2100      	movs	r1, #0
 8009f0c:	68f8      	ldr	r0, [r7, #12]
 8009f0e:	f000 fce4 	bl	800a8da <USBD_LL_Transmit>

  return USBD_OK;
 8009f12:	2300      	movs	r3, #0
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3710      	adds	r7, #16
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	bd80      	pop	{r7, pc}

08009f1c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b084      	sub	sp, #16
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2203      	movs	r2, #3
 8009f2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	687a      	ldr	r2, [r7, #4]
 8009f34:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	68ba      	ldr	r2, [r7, #8]
 8009f44:	2100      	movs	r1, #0
 8009f46:	68f8      	ldr	r0, [r7, #12]
 8009f48:	f000 fce8 	bl	800a91c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f4c:	2300      	movs	r3, #0
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3710      	adds	r7, #16
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}

08009f56 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009f56:	b580      	push	{r7, lr}
 8009f58:	b084      	sub	sp, #16
 8009f5a:	af00      	add	r7, sp, #0
 8009f5c:	60f8      	str	r0, [r7, #12]
 8009f5e:	60b9      	str	r1, [r7, #8]
 8009f60:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	68ba      	ldr	r2, [r7, #8]
 8009f66:	2100      	movs	r1, #0
 8009f68:	68f8      	ldr	r0, [r7, #12]
 8009f6a:	f000 fcd7 	bl	800a91c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009f6e:	2300      	movs	r3, #0
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3710      	adds	r7, #16
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b082      	sub	sp, #8
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2204      	movs	r2, #4
 8009f84:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009f88:	2300      	movs	r3, #0
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	6878      	ldr	r0, [r7, #4]
 8009f90:	f000 fca3 	bl	800a8da <USBD_LL_Transmit>

  return USBD_OK;
 8009f94:	2300      	movs	r3, #0
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b082      	sub	sp, #8
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2205      	movs	r2, #5
 8009faa:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009fae:	2300      	movs	r3, #0
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	f000 fcb1 	bl	800a91c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fba:	2300      	movs	r3, #0
}
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	3708      	adds	r7, #8
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	bd80      	pop	{r7, pc}

08009fc4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	4912      	ldr	r1, [pc, #72]	; (800a014 <MX_USB_DEVICE_Init+0x50>)
 8009fcc:	4812      	ldr	r0, [pc, #72]	; (800a018 <MX_USB_DEVICE_Init+0x54>)
 8009fce:	f7fe fd07 	bl	80089e0 <USBD_Init>
 8009fd2:	4603      	mov	r3, r0
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	d001      	beq.n	8009fdc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009fd8:	f7f7 fd70 	bl	8001abc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009fdc:	490f      	ldr	r1, [pc, #60]	; (800a01c <MX_USB_DEVICE_Init+0x58>)
 8009fde:	480e      	ldr	r0, [pc, #56]	; (800a018 <MX_USB_DEVICE_Init+0x54>)
 8009fe0:	f7fe fd2e 	bl	8008a40 <USBD_RegisterClass>
 8009fe4:	4603      	mov	r3, r0
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d001      	beq.n	8009fee <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009fea:	f7f7 fd67 	bl	8001abc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009fee:	490c      	ldr	r1, [pc, #48]	; (800a020 <MX_USB_DEVICE_Init+0x5c>)
 8009ff0:	4809      	ldr	r0, [pc, #36]	; (800a018 <MX_USB_DEVICE_Init+0x54>)
 8009ff2:	f7fe fc1f 	bl	8008834 <USBD_CDC_RegisterInterface>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d001      	beq.n	800a000 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009ffc:	f7f7 fd5e 	bl	8001abc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a000:	4805      	ldr	r0, [pc, #20]	; (800a018 <MX_USB_DEVICE_Init+0x54>)
 800a002:	f7fe fd53 	bl	8008aac <USBD_Start>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d001      	beq.n	800a010 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a00c:	f7f7 fd56 	bl	8001abc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a010:	bf00      	nop
 800a012:	bd80      	pop	{r7, pc}
 800a014:	200000cc 	.word	0x200000cc
 800a018:	20000688 	.word	0x20000688
 800a01c:	20000038 	.word	0x20000038
 800a020:	200000b8 	.word	0x200000b8

0800a024 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a028:	2200      	movs	r2, #0
 800a02a:	4905      	ldr	r1, [pc, #20]	; (800a040 <CDC_Init_FS+0x1c>)
 800a02c:	4805      	ldr	r0, [pc, #20]	; (800a044 <CDC_Init_FS+0x20>)
 800a02e:	f7fe fc1b 	bl	8008868 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a032:	4905      	ldr	r1, [pc, #20]	; (800a048 <CDC_Init_FS+0x24>)
 800a034:	4803      	ldr	r0, [pc, #12]	; (800a044 <CDC_Init_FS+0x20>)
 800a036:	f7fe fc39 	bl	80088ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a03a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	bd80      	pop	{r7, pc}
 800a040:	20001164 	.word	0x20001164
 800a044:	20000688 	.word	0x20000688
 800a048:	20000964 	.word	0x20000964

0800a04c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a04c:	b480      	push	{r7}
 800a04e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a050:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a052:	4618      	mov	r0, r3
 800a054:	46bd      	mov	sp, r7
 800a056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05a:	4770      	bx	lr

0800a05c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a05c:	b480      	push	{r7}
 800a05e:	b083      	sub	sp, #12
 800a060:	af00      	add	r7, sp, #0
 800a062:	4603      	mov	r3, r0
 800a064:	6039      	str	r1, [r7, #0]
 800a066:	71fb      	strb	r3, [r7, #7]
 800a068:	4613      	mov	r3, r2
 800a06a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a06c:	79fb      	ldrb	r3, [r7, #7]
 800a06e:	2b23      	cmp	r3, #35	; 0x23
 800a070:	d84a      	bhi.n	800a108 <CDC_Control_FS+0xac>
 800a072:	a201      	add	r2, pc, #4	; (adr r2, 800a078 <CDC_Control_FS+0x1c>)
 800a074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a078:	0800a109 	.word	0x0800a109
 800a07c:	0800a109 	.word	0x0800a109
 800a080:	0800a109 	.word	0x0800a109
 800a084:	0800a109 	.word	0x0800a109
 800a088:	0800a109 	.word	0x0800a109
 800a08c:	0800a109 	.word	0x0800a109
 800a090:	0800a109 	.word	0x0800a109
 800a094:	0800a109 	.word	0x0800a109
 800a098:	0800a109 	.word	0x0800a109
 800a09c:	0800a109 	.word	0x0800a109
 800a0a0:	0800a109 	.word	0x0800a109
 800a0a4:	0800a109 	.word	0x0800a109
 800a0a8:	0800a109 	.word	0x0800a109
 800a0ac:	0800a109 	.word	0x0800a109
 800a0b0:	0800a109 	.word	0x0800a109
 800a0b4:	0800a109 	.word	0x0800a109
 800a0b8:	0800a109 	.word	0x0800a109
 800a0bc:	0800a109 	.word	0x0800a109
 800a0c0:	0800a109 	.word	0x0800a109
 800a0c4:	0800a109 	.word	0x0800a109
 800a0c8:	0800a109 	.word	0x0800a109
 800a0cc:	0800a109 	.word	0x0800a109
 800a0d0:	0800a109 	.word	0x0800a109
 800a0d4:	0800a109 	.word	0x0800a109
 800a0d8:	0800a109 	.word	0x0800a109
 800a0dc:	0800a109 	.word	0x0800a109
 800a0e0:	0800a109 	.word	0x0800a109
 800a0e4:	0800a109 	.word	0x0800a109
 800a0e8:	0800a109 	.word	0x0800a109
 800a0ec:	0800a109 	.word	0x0800a109
 800a0f0:	0800a109 	.word	0x0800a109
 800a0f4:	0800a109 	.word	0x0800a109
 800a0f8:	0800a109 	.word	0x0800a109
 800a0fc:	0800a109 	.word	0x0800a109
 800a100:	0800a109 	.word	0x0800a109
 800a104:	0800a109 	.word	0x0800a109
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a108:	bf00      	nop
  }

  return (USBD_OK);
 800a10a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	370c      	adds	r7, #12
 800a110:	46bd      	mov	sp, r7
 800a112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a116:	4770      	bx	lr

0800a118 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b084      	sub	sp, #16
 800a11c:	af00      	add	r7, sp, #0
 800a11e:	6078      	str	r0, [r7, #4]
 800a120:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a122:	6879      	ldr	r1, [r7, #4]
 800a124:	4809      	ldr	r0, [pc, #36]	; (800a14c <CDC_Receive_FS+0x34>)
 800a126:	f7fe fbc1 	bl	80088ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a12a:	4808      	ldr	r0, [pc, #32]	; (800a14c <CDC_Receive_FS+0x34>)
 800a12c:	f7fe fc22 	bl	8008974 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 800a130:	683b      	ldr	r3, [r7, #0]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	73fb      	strb	r3, [r7, #15]
  memcpy(usbd_buf_recv, Buf, len);
 800a136:	7bfb      	ldrb	r3, [r7, #15]
 800a138:	461a      	mov	r2, r3
 800a13a:	6879      	ldr	r1, [r7, #4]
 800a13c:	4804      	ldr	r0, [pc, #16]	; (800a150 <CDC_Receive_FS+0x38>)
 800a13e:	f000 fc93 	bl	800aa68 <memcpy>
  return (USBD_OK);
 800a142:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a144:	4618      	mov	r0, r3
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}
 800a14c:	20000688 	.word	0x20000688
 800a150:	20000558 	.word	0x20000558

0800a154 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	460b      	mov	r3, r1
 800a15e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800a164:	4b0d      	ldr	r3, [pc, #52]	; (800a19c <CDC_Transmit_FS+0x48>)
 800a166:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800a16a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800a16c:	68bb      	ldr	r3, [r7, #8]
 800a16e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800a172:	2b00      	cmp	r3, #0
 800a174:	d001      	beq.n	800a17a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800a176:	2301      	movs	r3, #1
 800a178:	e00b      	b.n	800a192 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800a17a:	887b      	ldrh	r3, [r7, #2]
 800a17c:	461a      	mov	r2, r3
 800a17e:	6879      	ldr	r1, [r7, #4]
 800a180:	4806      	ldr	r0, [pc, #24]	; (800a19c <CDC_Transmit_FS+0x48>)
 800a182:	f7fe fb71 	bl	8008868 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800a186:	4805      	ldr	r0, [pc, #20]	; (800a19c <CDC_Transmit_FS+0x48>)
 800a188:	f7fe fbae 	bl	80088e8 <USBD_CDC_TransmitPacket>
 800a18c:	4603      	mov	r3, r0
 800a18e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800a190:	7bfb      	ldrb	r3, [r7, #15]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3710      	adds	r7, #16
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20000688 	.word	0x20000688

0800a1a0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a1a0:	b480      	push	{r7}
 800a1a2:	b087      	sub	sp, #28
 800a1a4:	af00      	add	r7, sp, #0
 800a1a6:	60f8      	str	r0, [r7, #12]
 800a1a8:	60b9      	str	r1, [r7, #8]
 800a1aa:	4613      	mov	r3, r2
 800a1ac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a1b2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	371c      	adds	r7, #28
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c0:	4770      	bx	lr
	...

0800a1c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b083      	sub	sp, #12
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	4603      	mov	r3, r0
 800a1cc:	6039      	str	r1, [r7, #0]
 800a1ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a1d0:	683b      	ldr	r3, [r7, #0]
 800a1d2:	2212      	movs	r2, #18
 800a1d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a1d6:	4b03      	ldr	r3, [pc, #12]	; (800a1e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a1d8:	4618      	mov	r0, r3
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr
 800a1e4:	200000e8 	.word	0x200000e8

0800a1e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b083      	sub	sp, #12
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	6039      	str	r1, [r7, #0]
 800a1f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	2204      	movs	r2, #4
 800a1f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a1fa:	4b03      	ldr	r3, [pc, #12]	; (800a208 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	370c      	adds	r7, #12
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr
 800a208:	200000fc 	.word	0x200000fc

0800a20c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a20c:	b580      	push	{r7, lr}
 800a20e:	b082      	sub	sp, #8
 800a210:	af00      	add	r7, sp, #0
 800a212:	4603      	mov	r3, r0
 800a214:	6039      	str	r1, [r7, #0]
 800a216:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a218:	79fb      	ldrb	r3, [r7, #7]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d105      	bne.n	800a22a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	4907      	ldr	r1, [pc, #28]	; (800a240 <USBD_FS_ProductStrDescriptor+0x34>)
 800a222:	4808      	ldr	r0, [pc, #32]	; (800a244 <USBD_FS_ProductStrDescriptor+0x38>)
 800a224:	f7ff fdee 	bl	8009e04 <USBD_GetString>
 800a228:	e004      	b.n	800a234 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	4904      	ldr	r1, [pc, #16]	; (800a240 <USBD_FS_ProductStrDescriptor+0x34>)
 800a22e:	4805      	ldr	r0, [pc, #20]	; (800a244 <USBD_FS_ProductStrDescriptor+0x38>)
 800a230:	f7ff fde8 	bl	8009e04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a234:	4b02      	ldr	r3, [pc, #8]	; (800a240 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a236:	4618      	mov	r0, r3
 800a238:	3708      	adds	r7, #8
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}
 800a23e:	bf00      	nop
 800a240:	20001964 	.word	0x20001964
 800a244:	0800dc04 	.word	0x0800dc04

0800a248 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b082      	sub	sp, #8
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	4603      	mov	r3, r0
 800a250:	6039      	str	r1, [r7, #0]
 800a252:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a254:	683a      	ldr	r2, [r7, #0]
 800a256:	4904      	ldr	r1, [pc, #16]	; (800a268 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a258:	4804      	ldr	r0, [pc, #16]	; (800a26c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a25a:	f7ff fdd3 	bl	8009e04 <USBD_GetString>
  return USBD_StrDesc;
 800a25e:	4b02      	ldr	r3, [pc, #8]	; (800a268 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a260:	4618      	mov	r0, r3
 800a262:	3708      	adds	r7, #8
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	20001964 	.word	0x20001964
 800a26c:	0800dc1c 	.word	0x0800dc1c

0800a270 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b082      	sub	sp, #8
 800a274:	af00      	add	r7, sp, #0
 800a276:	4603      	mov	r3, r0
 800a278:	6039      	str	r1, [r7, #0]
 800a27a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a27c:	683b      	ldr	r3, [r7, #0]
 800a27e:	221a      	movs	r2, #26
 800a280:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a282:	f000 f843 	bl	800a30c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a286:	4b02      	ldr	r3, [pc, #8]	; (800a290 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a288:	4618      	mov	r0, r3
 800a28a:	3708      	adds	r7, #8
 800a28c:	46bd      	mov	sp, r7
 800a28e:	bd80      	pop	{r7, pc}
 800a290:	20000100 	.word	0x20000100

0800a294 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a294:	b580      	push	{r7, lr}
 800a296:	b082      	sub	sp, #8
 800a298:	af00      	add	r7, sp, #0
 800a29a:	4603      	mov	r3, r0
 800a29c:	6039      	str	r1, [r7, #0]
 800a29e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a2a0:	79fb      	ldrb	r3, [r7, #7]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d105      	bne.n	800a2b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2a6:	683a      	ldr	r2, [r7, #0]
 800a2a8:	4907      	ldr	r1, [pc, #28]	; (800a2c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2aa:	4808      	ldr	r0, [pc, #32]	; (800a2cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2ac:	f7ff fdaa 	bl	8009e04 <USBD_GetString>
 800a2b0:	e004      	b.n	800a2bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a2b2:	683a      	ldr	r2, [r7, #0]
 800a2b4:	4904      	ldr	r1, [pc, #16]	; (800a2c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a2b6:	4805      	ldr	r0, [pc, #20]	; (800a2cc <USBD_FS_ConfigStrDescriptor+0x38>)
 800a2b8:	f7ff fda4 	bl	8009e04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2bc:	4b02      	ldr	r3, [pc, #8]	; (800a2c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	3708      	adds	r7, #8
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	bd80      	pop	{r7, pc}
 800a2c6:	bf00      	nop
 800a2c8:	20001964 	.word	0x20001964
 800a2cc:	0800dc30 	.word	0x0800dc30

0800a2d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	4603      	mov	r3, r0
 800a2d8:	6039      	str	r1, [r7, #0]
 800a2da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a2dc:	79fb      	ldrb	r3, [r7, #7]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d105      	bne.n	800a2ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a2e2:	683a      	ldr	r2, [r7, #0]
 800a2e4:	4907      	ldr	r1, [pc, #28]	; (800a304 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a2e6:	4808      	ldr	r0, [pc, #32]	; (800a308 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a2e8:	f7ff fd8c 	bl	8009e04 <USBD_GetString>
 800a2ec:	e004      	b.n	800a2f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a2ee:	683a      	ldr	r2, [r7, #0]
 800a2f0:	4904      	ldr	r1, [pc, #16]	; (800a304 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a2f2:	4805      	ldr	r0, [pc, #20]	; (800a308 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a2f4:	f7ff fd86 	bl	8009e04 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a2f8:	4b02      	ldr	r3, [pc, #8]	; (800a304 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a2fa:	4618      	mov	r0, r3
 800a2fc:	3708      	adds	r7, #8
 800a2fe:	46bd      	mov	sp, r7
 800a300:	bd80      	pop	{r7, pc}
 800a302:	bf00      	nop
 800a304:	20001964 	.word	0x20001964
 800a308:	0800dc3c 	.word	0x0800dc3c

0800a30c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b084      	sub	sp, #16
 800a310:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a312:	4b0f      	ldr	r3, [pc, #60]	; (800a350 <Get_SerialNum+0x44>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a318:	4b0e      	ldr	r3, [pc, #56]	; (800a354 <Get_SerialNum+0x48>)
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a31e:	4b0e      	ldr	r3, [pc, #56]	; (800a358 <Get_SerialNum+0x4c>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a324:	68fa      	ldr	r2, [r7, #12]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	4413      	add	r3, r2
 800a32a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d009      	beq.n	800a346 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a332:	2208      	movs	r2, #8
 800a334:	4909      	ldr	r1, [pc, #36]	; (800a35c <Get_SerialNum+0x50>)
 800a336:	68f8      	ldr	r0, [r7, #12]
 800a338:	f000 f814 	bl	800a364 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a33c:	2204      	movs	r2, #4
 800a33e:	4908      	ldr	r1, [pc, #32]	; (800a360 <Get_SerialNum+0x54>)
 800a340:	68b8      	ldr	r0, [r7, #8]
 800a342:	f000 f80f 	bl	800a364 <IntToUnicode>
  }
}
 800a346:	bf00      	nop
 800a348:	3710      	adds	r7, #16
 800a34a:	46bd      	mov	sp, r7
 800a34c:	bd80      	pop	{r7, pc}
 800a34e:	bf00      	nop
 800a350:	1fff7a10 	.word	0x1fff7a10
 800a354:	1fff7a14 	.word	0x1fff7a14
 800a358:	1fff7a18 	.word	0x1fff7a18
 800a35c:	20000102 	.word	0x20000102
 800a360:	20000112 	.word	0x20000112

0800a364 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a364:	b480      	push	{r7}
 800a366:	b087      	sub	sp, #28
 800a368:	af00      	add	r7, sp, #0
 800a36a:	60f8      	str	r0, [r7, #12]
 800a36c:	60b9      	str	r1, [r7, #8]
 800a36e:	4613      	mov	r3, r2
 800a370:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a372:	2300      	movs	r3, #0
 800a374:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a376:	2300      	movs	r3, #0
 800a378:	75fb      	strb	r3, [r7, #23]
 800a37a:	e027      	b.n	800a3cc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	0f1b      	lsrs	r3, r3, #28
 800a380:	2b09      	cmp	r3, #9
 800a382:	d80b      	bhi.n	800a39c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	0f1b      	lsrs	r3, r3, #28
 800a388:	b2da      	uxtb	r2, r3
 800a38a:	7dfb      	ldrb	r3, [r7, #23]
 800a38c:	005b      	lsls	r3, r3, #1
 800a38e:	4619      	mov	r1, r3
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	440b      	add	r3, r1
 800a394:	3230      	adds	r2, #48	; 0x30
 800a396:	b2d2      	uxtb	r2, r2
 800a398:	701a      	strb	r2, [r3, #0]
 800a39a:	e00a      	b.n	800a3b2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	0f1b      	lsrs	r3, r3, #28
 800a3a0:	b2da      	uxtb	r2, r3
 800a3a2:	7dfb      	ldrb	r3, [r7, #23]
 800a3a4:	005b      	lsls	r3, r3, #1
 800a3a6:	4619      	mov	r1, r3
 800a3a8:	68bb      	ldr	r3, [r7, #8]
 800a3aa:	440b      	add	r3, r1
 800a3ac:	3237      	adds	r2, #55	; 0x37
 800a3ae:	b2d2      	uxtb	r2, r2
 800a3b0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	011b      	lsls	r3, r3, #4
 800a3b6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a3b8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ba:	005b      	lsls	r3, r3, #1
 800a3bc:	3301      	adds	r3, #1
 800a3be:	68ba      	ldr	r2, [r7, #8]
 800a3c0:	4413      	add	r3, r2
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a3c6:	7dfb      	ldrb	r3, [r7, #23]
 800a3c8:	3301      	adds	r3, #1
 800a3ca:	75fb      	strb	r3, [r7, #23]
 800a3cc:	7dfa      	ldrb	r2, [r7, #23]
 800a3ce:	79fb      	ldrb	r3, [r7, #7]
 800a3d0:	429a      	cmp	r2, r3
 800a3d2:	d3d3      	bcc.n	800a37c <IntToUnicode+0x18>
  }
}
 800a3d4:	bf00      	nop
 800a3d6:	bf00      	nop
 800a3d8:	371c      	adds	r7, #28
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e0:	4770      	bx	lr
	...

0800a3e4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b08a      	sub	sp, #40	; 0x28
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a3ec:	f107 0314 	add.w	r3, r7, #20
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	605a      	str	r2, [r3, #4]
 800a3f6:	609a      	str	r2, [r3, #8]
 800a3f8:	60da      	str	r2, [r3, #12]
 800a3fa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a404:	d13a      	bne.n	800a47c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a406:	2300      	movs	r3, #0
 800a408:	613b      	str	r3, [r7, #16]
 800a40a:	4b1e      	ldr	r3, [pc, #120]	; (800a484 <HAL_PCD_MspInit+0xa0>)
 800a40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40e:	4a1d      	ldr	r2, [pc, #116]	; (800a484 <HAL_PCD_MspInit+0xa0>)
 800a410:	f043 0301 	orr.w	r3, r3, #1
 800a414:	6313      	str	r3, [r2, #48]	; 0x30
 800a416:	4b1b      	ldr	r3, [pc, #108]	; (800a484 <HAL_PCD_MspInit+0xa0>)
 800a418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41a:	f003 0301 	and.w	r3, r3, #1
 800a41e:	613b      	str	r3, [r7, #16]
 800a420:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a422:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a426:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a428:	2302      	movs	r3, #2
 800a42a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a42c:	2300      	movs	r3, #0
 800a42e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a430:	2303      	movs	r3, #3
 800a432:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a434:	230a      	movs	r3, #10
 800a436:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a438:	f107 0314 	add.w	r3, r7, #20
 800a43c:	4619      	mov	r1, r3
 800a43e:	4812      	ldr	r0, [pc, #72]	; (800a488 <HAL_PCD_MspInit+0xa4>)
 800a440:	f7f9 f8b4 	bl	80035ac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a444:	4b0f      	ldr	r3, [pc, #60]	; (800a484 <HAL_PCD_MspInit+0xa0>)
 800a446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a448:	4a0e      	ldr	r2, [pc, #56]	; (800a484 <HAL_PCD_MspInit+0xa0>)
 800a44a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a44e:	6353      	str	r3, [r2, #52]	; 0x34
 800a450:	2300      	movs	r3, #0
 800a452:	60fb      	str	r3, [r7, #12]
 800a454:	4b0b      	ldr	r3, [pc, #44]	; (800a484 <HAL_PCD_MspInit+0xa0>)
 800a456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a458:	4a0a      	ldr	r2, [pc, #40]	; (800a484 <HAL_PCD_MspInit+0xa0>)
 800a45a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a45e:	6453      	str	r3, [r2, #68]	; 0x44
 800a460:	4b08      	ldr	r3, [pc, #32]	; (800a484 <HAL_PCD_MspInit+0xa0>)
 800a462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a468:	60fb      	str	r3, [r7, #12]
 800a46a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a46c:	2200      	movs	r2, #0
 800a46e:	2100      	movs	r1, #0
 800a470:	2043      	movs	r0, #67	; 0x43
 800a472:	f7f8 fcf4 	bl	8002e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a476:	2043      	movs	r0, #67	; 0x43
 800a478:	f7f8 fd0d 	bl	8002e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a47c:	bf00      	nop
 800a47e:	3728      	adds	r7, #40	; 0x28
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	40023800 	.word	0x40023800
 800a488:	40020000 	.word	0x40020000

0800a48c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a4a0:	4619      	mov	r1, r3
 800a4a2:	4610      	mov	r0, r2
 800a4a4:	f7fe fb4f 	bl	8008b46 <USBD_LL_SetupStage>
}
 800a4a8:	bf00      	nop
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
 800a4b8:	460b      	mov	r3, r1
 800a4ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a4c2:	78fa      	ldrb	r2, [r7, #3]
 800a4c4:	6879      	ldr	r1, [r7, #4]
 800a4c6:	4613      	mov	r3, r2
 800a4c8:	00db      	lsls	r3, r3, #3
 800a4ca:	4413      	add	r3, r2
 800a4cc:	009b      	lsls	r3, r3, #2
 800a4ce:	440b      	add	r3, r1
 800a4d0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	78fb      	ldrb	r3, [r7, #3]
 800a4d8:	4619      	mov	r1, r3
 800a4da:	f7fe fb89 	bl	8008bf0 <USBD_LL_DataOutStage>
}
 800a4de:	bf00      	nop
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}

0800a4e6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4e6:	b580      	push	{r7, lr}
 800a4e8:	b082      	sub	sp, #8
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
 800a4ee:	460b      	mov	r3, r1
 800a4f0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a4f8:	78fa      	ldrb	r2, [r7, #3]
 800a4fa:	6879      	ldr	r1, [r7, #4]
 800a4fc:	4613      	mov	r3, r2
 800a4fe:	00db      	lsls	r3, r3, #3
 800a500:	4413      	add	r3, r2
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	440b      	add	r3, r1
 800a506:	334c      	adds	r3, #76	; 0x4c
 800a508:	681a      	ldr	r2, [r3, #0]
 800a50a:	78fb      	ldrb	r3, [r7, #3]
 800a50c:	4619      	mov	r1, r3
 800a50e:	f7fe fc22 	bl	8008d56 <USBD_LL_DataInStage>
}
 800a512:	bf00      	nop
 800a514:	3708      	adds	r7, #8
 800a516:	46bd      	mov	sp, r7
 800a518:	bd80      	pop	{r7, pc}

0800a51a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a51a:	b580      	push	{r7, lr}
 800a51c:	b082      	sub	sp, #8
 800a51e:	af00      	add	r7, sp, #0
 800a520:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fe fd56 	bl	8008fda <USBD_LL_SOF>
}
 800a52e:	bf00      	nop
 800a530:	3708      	adds	r7, #8
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}

0800a536 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a536:	b580      	push	{r7, lr}
 800a538:	b084      	sub	sp, #16
 800a53a:	af00      	add	r7, sp, #0
 800a53c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a53e:	2301      	movs	r3, #1
 800a540:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	68db      	ldr	r3, [r3, #12]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d102      	bne.n	800a550 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a54a:	2300      	movs	r3, #0
 800a54c:	73fb      	strb	r3, [r7, #15]
 800a54e:	e008      	b.n	800a562 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	68db      	ldr	r3, [r3, #12]
 800a554:	2b02      	cmp	r3, #2
 800a556:	d102      	bne.n	800a55e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a558:	2301      	movs	r3, #1
 800a55a:	73fb      	strb	r3, [r7, #15]
 800a55c:	e001      	b.n	800a562 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a55e:	f7f7 faad 	bl	8001abc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a568:	7bfa      	ldrb	r2, [r7, #15]
 800a56a:	4611      	mov	r1, r2
 800a56c:	4618      	mov	r0, r3
 800a56e:	f7fe fcf6 	bl	8008f5e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a578:	4618      	mov	r0, r3
 800a57a:	f7fe fc9e 	bl	8008eba <USBD_LL_Reset>
}
 800a57e:	bf00      	nop
 800a580:	3710      	adds	r7, #16
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}
	...

0800a588 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b082      	sub	sp, #8
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a596:	4618      	mov	r0, r3
 800a598:	f7fe fcf1 	bl	8008f7e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	6812      	ldr	r2, [r2, #0]
 800a5aa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a5ae:	f043 0301 	orr.w	r3, r3, #1
 800a5b2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6a1b      	ldr	r3, [r3, #32]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d005      	beq.n	800a5c8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a5bc:	4b04      	ldr	r3, [pc, #16]	; (800a5d0 <HAL_PCD_SuspendCallback+0x48>)
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	4a03      	ldr	r2, [pc, #12]	; (800a5d0 <HAL_PCD_SuspendCallback+0x48>)
 800a5c2:	f043 0306 	orr.w	r3, r3, #6
 800a5c6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a5c8:	bf00      	nop
 800a5ca:	3708      	adds	r7, #8
 800a5cc:	46bd      	mov	sp, r7
 800a5ce:	bd80      	pop	{r7, pc}
 800a5d0:	e000ed00 	.word	0xe000ed00

0800a5d4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b082      	sub	sp, #8
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7fe fce1 	bl	8008faa <USBD_LL_Resume>
}
 800a5e8:	bf00      	nop
 800a5ea:	3708      	adds	r7, #8
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	bd80      	pop	{r7, pc}

0800a5f0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a5f0:	b580      	push	{r7, lr}
 800a5f2:	b082      	sub	sp, #8
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a602:	78fa      	ldrb	r2, [r7, #3]
 800a604:	4611      	mov	r1, r2
 800a606:	4618      	mov	r0, r3
 800a608:	f7fe fd39 	bl	800907e <USBD_LL_IsoOUTIncomplete>
}
 800a60c:	bf00      	nop
 800a60e:	3708      	adds	r7, #8
 800a610:	46bd      	mov	sp, r7
 800a612:	bd80      	pop	{r7, pc}

0800a614 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	460b      	mov	r3, r1
 800a61e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a626:	78fa      	ldrb	r2, [r7, #3]
 800a628:	4611      	mov	r1, r2
 800a62a:	4618      	mov	r0, r3
 800a62c:	f7fe fcf5 	bl	800901a <USBD_LL_IsoINIncomplete>
}
 800a630:	bf00      	nop
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a646:	4618      	mov	r0, r3
 800a648:	f7fe fd4b 	bl	80090e2 <USBD_LL_DevConnected>
}
 800a64c:	bf00      	nop
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}

0800a654 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b082      	sub	sp, #8
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a662:	4618      	mov	r0, r3
 800a664:	f7fe fd48 	bl	80090f8 <USBD_LL_DevDisconnected>
}
 800a668:	bf00      	nop
 800a66a:	3708      	adds	r7, #8
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}

0800a670 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
 800a676:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	781b      	ldrb	r3, [r3, #0]
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d13c      	bne.n	800a6fa <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a680:	4a20      	ldr	r2, [pc, #128]	; (800a704 <USBD_LL_Init+0x94>)
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	4a1e      	ldr	r2, [pc, #120]	; (800a704 <USBD_LL_Init+0x94>)
 800a68c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a690:	4b1c      	ldr	r3, [pc, #112]	; (800a704 <USBD_LL_Init+0x94>)
 800a692:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a696:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a698:	4b1a      	ldr	r3, [pc, #104]	; (800a704 <USBD_LL_Init+0x94>)
 800a69a:	2204      	movs	r2, #4
 800a69c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a69e:	4b19      	ldr	r3, [pc, #100]	; (800a704 <USBD_LL_Init+0x94>)
 800a6a0:	2202      	movs	r2, #2
 800a6a2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a6a4:	4b17      	ldr	r3, [pc, #92]	; (800a704 <USBD_LL_Init+0x94>)
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a6aa:	4b16      	ldr	r3, [pc, #88]	; (800a704 <USBD_LL_Init+0x94>)
 800a6ac:	2202      	movs	r2, #2
 800a6ae:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a6b0:	4b14      	ldr	r3, [pc, #80]	; (800a704 <USBD_LL_Init+0x94>)
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a6b6:	4b13      	ldr	r3, [pc, #76]	; (800a704 <USBD_LL_Init+0x94>)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a6bc:	4b11      	ldr	r3, [pc, #68]	; (800a704 <USBD_LL_Init+0x94>)
 800a6be:	2200      	movs	r2, #0
 800a6c0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a6c2:	4b10      	ldr	r3, [pc, #64]	; (800a704 <USBD_LL_Init+0x94>)
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a6c8:	4b0e      	ldr	r3, [pc, #56]	; (800a704 <USBD_LL_Init+0x94>)
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a6ce:	480d      	ldr	r0, [pc, #52]	; (800a704 <USBD_LL_Init+0x94>)
 800a6d0:	f7f9 fa4c 	bl	8003b6c <HAL_PCD_Init>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a6da:	f7f7 f9ef 	bl	8001abc <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a6de:	2180      	movs	r1, #128	; 0x80
 800a6e0:	4808      	ldr	r0, [pc, #32]	; (800a704 <USBD_LL_Init+0x94>)
 800a6e2:	f7fa fca4 	bl	800502e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a6e6:	2240      	movs	r2, #64	; 0x40
 800a6e8:	2100      	movs	r1, #0
 800a6ea:	4806      	ldr	r0, [pc, #24]	; (800a704 <USBD_LL_Init+0x94>)
 800a6ec:	f7fa fc58 	bl	8004fa0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a6f0:	2280      	movs	r2, #128	; 0x80
 800a6f2:	2101      	movs	r1, #1
 800a6f4:	4803      	ldr	r0, [pc, #12]	; (800a704 <USBD_LL_Init+0x94>)
 800a6f6:	f7fa fc53 	bl	8004fa0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a6fa:	2300      	movs	r3, #0
}
 800a6fc:	4618      	mov	r0, r3
 800a6fe:	3708      	adds	r7, #8
 800a700:	46bd      	mov	sp, r7
 800a702:	bd80      	pop	{r7, pc}
 800a704:	20001b64 	.word	0x20001b64

0800a708 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a708:	b580      	push	{r7, lr}
 800a70a:	b084      	sub	sp, #16
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a710:	2300      	movs	r3, #0
 800a712:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a714:	2300      	movs	r3, #0
 800a716:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a71e:	4618      	mov	r0, r3
 800a720:	f7f9 fb41 	bl	8003da6 <HAL_PCD_Start>
 800a724:	4603      	mov	r3, r0
 800a726:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a728:	7bfb      	ldrb	r3, [r7, #15]
 800a72a:	4618      	mov	r0, r3
 800a72c:	f000 f942 	bl	800a9b4 <USBD_Get_USB_Status>
 800a730:	4603      	mov	r3, r0
 800a732:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a734:	7bbb      	ldrb	r3, [r7, #14]
}
 800a736:	4618      	mov	r0, r3
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}

0800a73e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a73e:	b580      	push	{r7, lr}
 800a740:	b084      	sub	sp, #16
 800a742:	af00      	add	r7, sp, #0
 800a744:	6078      	str	r0, [r7, #4]
 800a746:	4608      	mov	r0, r1
 800a748:	4611      	mov	r1, r2
 800a74a:	461a      	mov	r2, r3
 800a74c:	4603      	mov	r3, r0
 800a74e:	70fb      	strb	r3, [r7, #3]
 800a750:	460b      	mov	r3, r1
 800a752:	70bb      	strb	r3, [r7, #2]
 800a754:	4613      	mov	r3, r2
 800a756:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a758:	2300      	movs	r3, #0
 800a75a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a75c:	2300      	movs	r3, #0
 800a75e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a766:	78bb      	ldrb	r3, [r7, #2]
 800a768:	883a      	ldrh	r2, [r7, #0]
 800a76a:	78f9      	ldrb	r1, [r7, #3]
 800a76c:	f7fa f812 	bl	8004794 <HAL_PCD_EP_Open>
 800a770:	4603      	mov	r3, r0
 800a772:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a774:	7bfb      	ldrb	r3, [r7, #15]
 800a776:	4618      	mov	r0, r3
 800a778:	f000 f91c 	bl	800a9b4 <USBD_Get_USB_Status>
 800a77c:	4603      	mov	r3, r0
 800a77e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a780:	7bbb      	ldrb	r3, [r7, #14]
}
 800a782:	4618      	mov	r0, r3
 800a784:	3710      	adds	r7, #16
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}

0800a78a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a78a:	b580      	push	{r7, lr}
 800a78c:	b084      	sub	sp, #16
 800a78e:	af00      	add	r7, sp, #0
 800a790:	6078      	str	r0, [r7, #4]
 800a792:	460b      	mov	r3, r1
 800a794:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a796:	2300      	movs	r3, #0
 800a798:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a79a:	2300      	movs	r3, #0
 800a79c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a7a4:	78fa      	ldrb	r2, [r7, #3]
 800a7a6:	4611      	mov	r1, r2
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	f7fa f85b 	bl	8004864 <HAL_PCD_EP_Close>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7b2:	7bfb      	ldrb	r3, [r7, #15]
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f000 f8fd 	bl	800a9b4 <USBD_Get_USB_Status>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7be:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	3710      	adds	r7, #16
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	bd80      	pop	{r7, pc}

0800a7c8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7c8:	b580      	push	{r7, lr}
 800a7ca:	b084      	sub	sp, #16
 800a7cc:	af00      	add	r7, sp, #0
 800a7ce:	6078      	str	r0, [r7, #4]
 800a7d0:	460b      	mov	r3, r1
 800a7d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7d8:	2300      	movs	r3, #0
 800a7da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a7e2:	78fa      	ldrb	r2, [r7, #3]
 800a7e4:	4611      	mov	r1, r2
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f7fa f933 	bl	8004a52 <HAL_PCD_EP_SetStall>
 800a7ec:	4603      	mov	r3, r0
 800a7ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7f0:	7bfb      	ldrb	r3, [r7, #15]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f000 f8de 	bl	800a9b4 <USBD_Get_USB_Status>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7fc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7fe:	4618      	mov	r0, r3
 800a800:	3710      	adds	r7, #16
 800a802:	46bd      	mov	sp, r7
 800a804:	bd80      	pop	{r7, pc}

0800a806 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a806:	b580      	push	{r7, lr}
 800a808:	b084      	sub	sp, #16
 800a80a:	af00      	add	r7, sp, #0
 800a80c:	6078      	str	r0, [r7, #4]
 800a80e:	460b      	mov	r3, r1
 800a810:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a812:	2300      	movs	r3, #0
 800a814:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a816:	2300      	movs	r3, #0
 800a818:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a820:	78fa      	ldrb	r2, [r7, #3]
 800a822:	4611      	mov	r1, r2
 800a824:	4618      	mov	r0, r3
 800a826:	f7fa f978 	bl	8004b1a <HAL_PCD_EP_ClrStall>
 800a82a:	4603      	mov	r3, r0
 800a82c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a82e:	7bfb      	ldrb	r3, [r7, #15]
 800a830:	4618      	mov	r0, r3
 800a832:	f000 f8bf 	bl	800a9b4 <USBD_Get_USB_Status>
 800a836:	4603      	mov	r3, r0
 800a838:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a83a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3710      	adds	r7, #16
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	460b      	mov	r3, r1
 800a84e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a856:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a858:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	da0b      	bge.n	800a878 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a860:	78fb      	ldrb	r3, [r7, #3]
 800a862:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a866:	68f9      	ldr	r1, [r7, #12]
 800a868:	4613      	mov	r3, r2
 800a86a:	00db      	lsls	r3, r3, #3
 800a86c:	4413      	add	r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	440b      	add	r3, r1
 800a872:	333e      	adds	r3, #62	; 0x3e
 800a874:	781b      	ldrb	r3, [r3, #0]
 800a876:	e00b      	b.n	800a890 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a878:	78fb      	ldrb	r3, [r7, #3]
 800a87a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a87e:	68f9      	ldr	r1, [r7, #12]
 800a880:	4613      	mov	r3, r2
 800a882:	00db      	lsls	r3, r3, #3
 800a884:	4413      	add	r3, r2
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	440b      	add	r3, r1
 800a88a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a88e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a890:	4618      	mov	r0, r3
 800a892:	3714      	adds	r7, #20
 800a894:	46bd      	mov	sp, r7
 800a896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a89a:	4770      	bx	lr

0800a89c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b084      	sub	sp, #16
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8ac:	2300      	movs	r3, #0
 800a8ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a8b6:	78fa      	ldrb	r2, [r7, #3]
 800a8b8:	4611      	mov	r1, r2
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7f9 ff45 	bl	800474a <HAL_PCD_SetAddress>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a8c4:	7bfb      	ldrb	r3, [r7, #15]
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	f000 f874 	bl	800a9b4 <USBD_Get_USB_Status>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a8d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}

0800a8da <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a8da:	b580      	push	{r7, lr}
 800a8dc:	b086      	sub	sp, #24
 800a8de:	af00      	add	r7, sp, #0
 800a8e0:	60f8      	str	r0, [r7, #12]
 800a8e2:	607a      	str	r2, [r7, #4]
 800a8e4:	603b      	str	r3, [r7, #0]
 800a8e6:	460b      	mov	r3, r1
 800a8e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a8f8:	7af9      	ldrb	r1, [r7, #11]
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	687a      	ldr	r2, [r7, #4]
 800a8fe:	f7fa f85e 	bl	80049be <HAL_PCD_EP_Transmit>
 800a902:	4603      	mov	r3, r0
 800a904:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a906:	7dfb      	ldrb	r3, [r7, #23]
 800a908:	4618      	mov	r0, r3
 800a90a:	f000 f853 	bl	800a9b4 <USBD_Get_USB_Status>
 800a90e:	4603      	mov	r3, r0
 800a910:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a912:	7dbb      	ldrb	r3, [r7, #22]
}
 800a914:	4618      	mov	r0, r3
 800a916:	3718      	adds	r7, #24
 800a918:	46bd      	mov	sp, r7
 800a91a:	bd80      	pop	{r7, pc}

0800a91c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a91c:	b580      	push	{r7, lr}
 800a91e:	b086      	sub	sp, #24
 800a920:	af00      	add	r7, sp, #0
 800a922:	60f8      	str	r0, [r7, #12]
 800a924:	607a      	str	r2, [r7, #4]
 800a926:	603b      	str	r3, [r7, #0]
 800a928:	460b      	mov	r3, r1
 800a92a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a930:	2300      	movs	r3, #0
 800a932:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a93a:	7af9      	ldrb	r1, [r7, #11]
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	687a      	ldr	r2, [r7, #4]
 800a940:	f7f9 ffda 	bl	80048f8 <HAL_PCD_EP_Receive>
 800a944:	4603      	mov	r3, r0
 800a946:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a948:	7dfb      	ldrb	r3, [r7, #23]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f000 f832 	bl	800a9b4 <USBD_Get_USB_Status>
 800a950:	4603      	mov	r3, r0
 800a952:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a954:	7dbb      	ldrb	r3, [r7, #22]
}
 800a956:	4618      	mov	r0, r3
 800a958:	3718      	adds	r7, #24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}

0800a95e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a95e:	b580      	push	{r7, lr}
 800a960:	b082      	sub	sp, #8
 800a962:	af00      	add	r7, sp, #0
 800a964:	6078      	str	r0, [r7, #4]
 800a966:	460b      	mov	r3, r1
 800a968:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a970:	78fa      	ldrb	r2, [r7, #3]
 800a972:	4611      	mov	r1, r2
 800a974:	4618      	mov	r0, r3
 800a976:	f7fa f80a 	bl	800498e <HAL_PCD_EP_GetRxCount>
 800a97a:	4603      	mov	r3, r0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3708      	adds	r7, #8
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a984:	b480      	push	{r7}
 800a986:	b083      	sub	sp, #12
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a98c:	4b03      	ldr	r3, [pc, #12]	; (800a99c <USBD_static_malloc+0x18>)
}
 800a98e:	4618      	mov	r0, r3
 800a990:	370c      	adds	r7, #12
 800a992:	46bd      	mov	sp, r7
 800a994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a998:	4770      	bx	lr
 800a99a:	bf00      	nop
 800a99c:	20002070 	.word	0x20002070

0800a9a0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]

}
 800a9a8:	bf00      	nop
 800a9aa:	370c      	adds	r7, #12
 800a9ac:	46bd      	mov	sp, r7
 800a9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b2:	4770      	bx	lr

0800a9b4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b085      	sub	sp, #20
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a9be:	2300      	movs	r3, #0
 800a9c0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a9c2:	79fb      	ldrb	r3, [r7, #7]
 800a9c4:	2b03      	cmp	r3, #3
 800a9c6:	d817      	bhi.n	800a9f8 <USBD_Get_USB_Status+0x44>
 800a9c8:	a201      	add	r2, pc, #4	; (adr r2, 800a9d0 <USBD_Get_USB_Status+0x1c>)
 800a9ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9ce:	bf00      	nop
 800a9d0:	0800a9e1 	.word	0x0800a9e1
 800a9d4:	0800a9e7 	.word	0x0800a9e7
 800a9d8:	0800a9ed 	.word	0x0800a9ed
 800a9dc:	0800a9f3 	.word	0x0800a9f3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	73fb      	strb	r3, [r7, #15]
    break;
 800a9e4:	e00b      	b.n	800a9fe <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	73fb      	strb	r3, [r7, #15]
    break;
 800a9ea:	e008      	b.n	800a9fe <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	73fb      	strb	r3, [r7, #15]
    break;
 800a9f0:	e005      	b.n	800a9fe <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a9f2:	2303      	movs	r3, #3
 800a9f4:	73fb      	strb	r3, [r7, #15]
    break;
 800a9f6:	e002      	b.n	800a9fe <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a9f8:	2303      	movs	r3, #3
 800a9fa:	73fb      	strb	r3, [r7, #15]
    break;
 800a9fc:	bf00      	nop
  }
  return usb_status;
 800a9fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa00:	4618      	mov	r0, r3
 800aa02:	3714      	adds	r7, #20
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <atoi>:
 800aa0c:	220a      	movs	r2, #10
 800aa0e:	2100      	movs	r1, #0
 800aa10:	f000 bda8 	b.w	800b564 <strtol>

0800aa14 <__errno>:
 800aa14:	4b01      	ldr	r3, [pc, #4]	; (800aa1c <__errno+0x8>)
 800aa16:	6818      	ldr	r0, [r3, #0]
 800aa18:	4770      	bx	lr
 800aa1a:	bf00      	nop
 800aa1c:	2000011c 	.word	0x2000011c

0800aa20 <__libc_init_array>:
 800aa20:	b570      	push	{r4, r5, r6, lr}
 800aa22:	4d0d      	ldr	r5, [pc, #52]	; (800aa58 <__libc_init_array+0x38>)
 800aa24:	4c0d      	ldr	r4, [pc, #52]	; (800aa5c <__libc_init_array+0x3c>)
 800aa26:	1b64      	subs	r4, r4, r5
 800aa28:	10a4      	asrs	r4, r4, #2
 800aa2a:	2600      	movs	r6, #0
 800aa2c:	42a6      	cmp	r6, r4
 800aa2e:	d109      	bne.n	800aa44 <__libc_init_array+0x24>
 800aa30:	4d0b      	ldr	r5, [pc, #44]	; (800aa60 <__libc_init_array+0x40>)
 800aa32:	4c0c      	ldr	r4, [pc, #48]	; (800aa64 <__libc_init_array+0x44>)
 800aa34:	f003 f8ca 	bl	800dbcc <_init>
 800aa38:	1b64      	subs	r4, r4, r5
 800aa3a:	10a4      	asrs	r4, r4, #2
 800aa3c:	2600      	movs	r6, #0
 800aa3e:	42a6      	cmp	r6, r4
 800aa40:	d105      	bne.n	800aa4e <__libc_init_array+0x2e>
 800aa42:	bd70      	pop	{r4, r5, r6, pc}
 800aa44:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa48:	4798      	blx	r3
 800aa4a:	3601      	adds	r6, #1
 800aa4c:	e7ee      	b.n	800aa2c <__libc_init_array+0xc>
 800aa4e:	f855 3b04 	ldr.w	r3, [r5], #4
 800aa52:	4798      	blx	r3
 800aa54:	3601      	adds	r6, #1
 800aa56:	e7f2      	b.n	800aa3e <__libc_init_array+0x1e>
 800aa58:	0800e0b4 	.word	0x0800e0b4
 800aa5c:	0800e0b4 	.word	0x0800e0b4
 800aa60:	0800e0b4 	.word	0x0800e0b4
 800aa64:	0800e0b8 	.word	0x0800e0b8

0800aa68 <memcpy>:
 800aa68:	440a      	add	r2, r1
 800aa6a:	4291      	cmp	r1, r2
 800aa6c:	f100 33ff 	add.w	r3, r0, #4294967295
 800aa70:	d100      	bne.n	800aa74 <memcpy+0xc>
 800aa72:	4770      	bx	lr
 800aa74:	b510      	push	{r4, lr}
 800aa76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800aa7e:	4291      	cmp	r1, r2
 800aa80:	d1f9      	bne.n	800aa76 <memcpy+0xe>
 800aa82:	bd10      	pop	{r4, pc}

0800aa84 <memset>:
 800aa84:	4402      	add	r2, r0
 800aa86:	4603      	mov	r3, r0
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d100      	bne.n	800aa8e <memset+0xa>
 800aa8c:	4770      	bx	lr
 800aa8e:	f803 1b01 	strb.w	r1, [r3], #1
 800aa92:	e7f9      	b.n	800aa88 <memset+0x4>

0800aa94 <__cvt>:
 800aa94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa98:	ec55 4b10 	vmov	r4, r5, d0
 800aa9c:	2d00      	cmp	r5, #0
 800aa9e:	460e      	mov	r6, r1
 800aaa0:	4619      	mov	r1, r3
 800aaa2:	462b      	mov	r3, r5
 800aaa4:	bfbb      	ittet	lt
 800aaa6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800aaaa:	461d      	movlt	r5, r3
 800aaac:	2300      	movge	r3, #0
 800aaae:	232d      	movlt	r3, #45	; 0x2d
 800aab0:	700b      	strb	r3, [r1, #0]
 800aab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aab4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800aab8:	4691      	mov	r9, r2
 800aaba:	f023 0820 	bic.w	r8, r3, #32
 800aabe:	bfbc      	itt	lt
 800aac0:	4622      	movlt	r2, r4
 800aac2:	4614      	movlt	r4, r2
 800aac4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aac8:	d005      	beq.n	800aad6 <__cvt+0x42>
 800aaca:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800aace:	d100      	bne.n	800aad2 <__cvt+0x3e>
 800aad0:	3601      	adds	r6, #1
 800aad2:	2102      	movs	r1, #2
 800aad4:	e000      	b.n	800aad8 <__cvt+0x44>
 800aad6:	2103      	movs	r1, #3
 800aad8:	ab03      	add	r3, sp, #12
 800aada:	9301      	str	r3, [sp, #4]
 800aadc:	ab02      	add	r3, sp, #8
 800aade:	9300      	str	r3, [sp, #0]
 800aae0:	ec45 4b10 	vmov	d0, r4, r5
 800aae4:	4653      	mov	r3, sl
 800aae6:	4632      	mov	r2, r6
 800aae8:	f000 fdf2 	bl	800b6d0 <_dtoa_r>
 800aaec:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800aaf0:	4607      	mov	r7, r0
 800aaf2:	d102      	bne.n	800aafa <__cvt+0x66>
 800aaf4:	f019 0f01 	tst.w	r9, #1
 800aaf8:	d022      	beq.n	800ab40 <__cvt+0xac>
 800aafa:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800aafe:	eb07 0906 	add.w	r9, r7, r6
 800ab02:	d110      	bne.n	800ab26 <__cvt+0x92>
 800ab04:	783b      	ldrb	r3, [r7, #0]
 800ab06:	2b30      	cmp	r3, #48	; 0x30
 800ab08:	d10a      	bne.n	800ab20 <__cvt+0x8c>
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	4620      	mov	r0, r4
 800ab10:	4629      	mov	r1, r5
 800ab12:	f7f5 ffe1 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab16:	b918      	cbnz	r0, 800ab20 <__cvt+0x8c>
 800ab18:	f1c6 0601 	rsb	r6, r6, #1
 800ab1c:	f8ca 6000 	str.w	r6, [sl]
 800ab20:	f8da 3000 	ldr.w	r3, [sl]
 800ab24:	4499      	add	r9, r3
 800ab26:	2200      	movs	r2, #0
 800ab28:	2300      	movs	r3, #0
 800ab2a:	4620      	mov	r0, r4
 800ab2c:	4629      	mov	r1, r5
 800ab2e:	f7f5 ffd3 	bl	8000ad8 <__aeabi_dcmpeq>
 800ab32:	b108      	cbz	r0, 800ab38 <__cvt+0xa4>
 800ab34:	f8cd 900c 	str.w	r9, [sp, #12]
 800ab38:	2230      	movs	r2, #48	; 0x30
 800ab3a:	9b03      	ldr	r3, [sp, #12]
 800ab3c:	454b      	cmp	r3, r9
 800ab3e:	d307      	bcc.n	800ab50 <__cvt+0xbc>
 800ab40:	9b03      	ldr	r3, [sp, #12]
 800ab42:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ab44:	1bdb      	subs	r3, r3, r7
 800ab46:	4638      	mov	r0, r7
 800ab48:	6013      	str	r3, [r2, #0]
 800ab4a:	b004      	add	sp, #16
 800ab4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab50:	1c59      	adds	r1, r3, #1
 800ab52:	9103      	str	r1, [sp, #12]
 800ab54:	701a      	strb	r2, [r3, #0]
 800ab56:	e7f0      	b.n	800ab3a <__cvt+0xa6>

0800ab58 <__exponent>:
 800ab58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab5a:	4603      	mov	r3, r0
 800ab5c:	2900      	cmp	r1, #0
 800ab5e:	bfb8      	it	lt
 800ab60:	4249      	neglt	r1, r1
 800ab62:	f803 2b02 	strb.w	r2, [r3], #2
 800ab66:	bfb4      	ite	lt
 800ab68:	222d      	movlt	r2, #45	; 0x2d
 800ab6a:	222b      	movge	r2, #43	; 0x2b
 800ab6c:	2909      	cmp	r1, #9
 800ab6e:	7042      	strb	r2, [r0, #1]
 800ab70:	dd2a      	ble.n	800abc8 <__exponent+0x70>
 800ab72:	f10d 0407 	add.w	r4, sp, #7
 800ab76:	46a4      	mov	ip, r4
 800ab78:	270a      	movs	r7, #10
 800ab7a:	46a6      	mov	lr, r4
 800ab7c:	460a      	mov	r2, r1
 800ab7e:	fb91 f6f7 	sdiv	r6, r1, r7
 800ab82:	fb07 1516 	mls	r5, r7, r6, r1
 800ab86:	3530      	adds	r5, #48	; 0x30
 800ab88:	2a63      	cmp	r2, #99	; 0x63
 800ab8a:	f104 34ff 	add.w	r4, r4, #4294967295
 800ab8e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800ab92:	4631      	mov	r1, r6
 800ab94:	dcf1      	bgt.n	800ab7a <__exponent+0x22>
 800ab96:	3130      	adds	r1, #48	; 0x30
 800ab98:	f1ae 0502 	sub.w	r5, lr, #2
 800ab9c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800aba0:	1c44      	adds	r4, r0, #1
 800aba2:	4629      	mov	r1, r5
 800aba4:	4561      	cmp	r1, ip
 800aba6:	d30a      	bcc.n	800abbe <__exponent+0x66>
 800aba8:	f10d 0209 	add.w	r2, sp, #9
 800abac:	eba2 020e 	sub.w	r2, r2, lr
 800abb0:	4565      	cmp	r5, ip
 800abb2:	bf88      	it	hi
 800abb4:	2200      	movhi	r2, #0
 800abb6:	4413      	add	r3, r2
 800abb8:	1a18      	subs	r0, r3, r0
 800abba:	b003      	add	sp, #12
 800abbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abbe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800abc2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800abc6:	e7ed      	b.n	800aba4 <__exponent+0x4c>
 800abc8:	2330      	movs	r3, #48	; 0x30
 800abca:	3130      	adds	r1, #48	; 0x30
 800abcc:	7083      	strb	r3, [r0, #2]
 800abce:	70c1      	strb	r1, [r0, #3]
 800abd0:	1d03      	adds	r3, r0, #4
 800abd2:	e7f1      	b.n	800abb8 <__exponent+0x60>

0800abd4 <_printf_float>:
 800abd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abd8:	ed2d 8b02 	vpush	{d8}
 800abdc:	b08d      	sub	sp, #52	; 0x34
 800abde:	460c      	mov	r4, r1
 800abe0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800abe4:	4616      	mov	r6, r2
 800abe6:	461f      	mov	r7, r3
 800abe8:	4605      	mov	r5, r0
 800abea:	f001 fb71 	bl	800c2d0 <_localeconv_r>
 800abee:	f8d0 a000 	ldr.w	sl, [r0]
 800abf2:	4650      	mov	r0, sl
 800abf4:	f7f5 faf4 	bl	80001e0 <strlen>
 800abf8:	2300      	movs	r3, #0
 800abfa:	930a      	str	r3, [sp, #40]	; 0x28
 800abfc:	6823      	ldr	r3, [r4, #0]
 800abfe:	9305      	str	r3, [sp, #20]
 800ac00:	f8d8 3000 	ldr.w	r3, [r8]
 800ac04:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ac08:	3307      	adds	r3, #7
 800ac0a:	f023 0307 	bic.w	r3, r3, #7
 800ac0e:	f103 0208 	add.w	r2, r3, #8
 800ac12:	f8c8 2000 	str.w	r2, [r8]
 800ac16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac1a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ac1e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ac22:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ac26:	9307      	str	r3, [sp, #28]
 800ac28:	f8cd 8018 	str.w	r8, [sp, #24]
 800ac2c:	ee08 0a10 	vmov	s16, r0
 800ac30:	4b9f      	ldr	r3, [pc, #636]	; (800aeb0 <_printf_float+0x2dc>)
 800ac32:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac36:	f04f 32ff 	mov.w	r2, #4294967295
 800ac3a:	f7f5 ff7f 	bl	8000b3c <__aeabi_dcmpun>
 800ac3e:	bb88      	cbnz	r0, 800aca4 <_printf_float+0xd0>
 800ac40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ac44:	4b9a      	ldr	r3, [pc, #616]	; (800aeb0 <_printf_float+0x2dc>)
 800ac46:	f04f 32ff 	mov.w	r2, #4294967295
 800ac4a:	f7f5 ff59 	bl	8000b00 <__aeabi_dcmple>
 800ac4e:	bb48      	cbnz	r0, 800aca4 <_printf_float+0xd0>
 800ac50:	2200      	movs	r2, #0
 800ac52:	2300      	movs	r3, #0
 800ac54:	4640      	mov	r0, r8
 800ac56:	4649      	mov	r1, r9
 800ac58:	f7f5 ff48 	bl	8000aec <__aeabi_dcmplt>
 800ac5c:	b110      	cbz	r0, 800ac64 <_printf_float+0x90>
 800ac5e:	232d      	movs	r3, #45	; 0x2d
 800ac60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac64:	4b93      	ldr	r3, [pc, #588]	; (800aeb4 <_printf_float+0x2e0>)
 800ac66:	4894      	ldr	r0, [pc, #592]	; (800aeb8 <_printf_float+0x2e4>)
 800ac68:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ac6c:	bf94      	ite	ls
 800ac6e:	4698      	movls	r8, r3
 800ac70:	4680      	movhi	r8, r0
 800ac72:	2303      	movs	r3, #3
 800ac74:	6123      	str	r3, [r4, #16]
 800ac76:	9b05      	ldr	r3, [sp, #20]
 800ac78:	f023 0204 	bic.w	r2, r3, #4
 800ac7c:	6022      	str	r2, [r4, #0]
 800ac7e:	f04f 0900 	mov.w	r9, #0
 800ac82:	9700      	str	r7, [sp, #0]
 800ac84:	4633      	mov	r3, r6
 800ac86:	aa0b      	add	r2, sp, #44	; 0x2c
 800ac88:	4621      	mov	r1, r4
 800ac8a:	4628      	mov	r0, r5
 800ac8c:	f000 f9d8 	bl	800b040 <_printf_common>
 800ac90:	3001      	adds	r0, #1
 800ac92:	f040 8090 	bne.w	800adb6 <_printf_float+0x1e2>
 800ac96:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9a:	b00d      	add	sp, #52	; 0x34
 800ac9c:	ecbd 8b02 	vpop	{d8}
 800aca0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca4:	4642      	mov	r2, r8
 800aca6:	464b      	mov	r3, r9
 800aca8:	4640      	mov	r0, r8
 800acaa:	4649      	mov	r1, r9
 800acac:	f7f5 ff46 	bl	8000b3c <__aeabi_dcmpun>
 800acb0:	b140      	cbz	r0, 800acc4 <_printf_float+0xf0>
 800acb2:	464b      	mov	r3, r9
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	bfbc      	itt	lt
 800acb8:	232d      	movlt	r3, #45	; 0x2d
 800acba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800acbe:	487f      	ldr	r0, [pc, #508]	; (800aebc <_printf_float+0x2e8>)
 800acc0:	4b7f      	ldr	r3, [pc, #508]	; (800aec0 <_printf_float+0x2ec>)
 800acc2:	e7d1      	b.n	800ac68 <_printf_float+0x94>
 800acc4:	6863      	ldr	r3, [r4, #4]
 800acc6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800acca:	9206      	str	r2, [sp, #24]
 800accc:	1c5a      	adds	r2, r3, #1
 800acce:	d13f      	bne.n	800ad50 <_printf_float+0x17c>
 800acd0:	2306      	movs	r3, #6
 800acd2:	6063      	str	r3, [r4, #4]
 800acd4:	9b05      	ldr	r3, [sp, #20]
 800acd6:	6861      	ldr	r1, [r4, #4]
 800acd8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800acdc:	2300      	movs	r3, #0
 800acde:	9303      	str	r3, [sp, #12]
 800ace0:	ab0a      	add	r3, sp, #40	; 0x28
 800ace2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ace6:	ab09      	add	r3, sp, #36	; 0x24
 800ace8:	ec49 8b10 	vmov	d0, r8, r9
 800acec:	9300      	str	r3, [sp, #0]
 800acee:	6022      	str	r2, [r4, #0]
 800acf0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800acf4:	4628      	mov	r0, r5
 800acf6:	f7ff fecd 	bl	800aa94 <__cvt>
 800acfa:	9b06      	ldr	r3, [sp, #24]
 800acfc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800acfe:	2b47      	cmp	r3, #71	; 0x47
 800ad00:	4680      	mov	r8, r0
 800ad02:	d108      	bne.n	800ad16 <_printf_float+0x142>
 800ad04:	1cc8      	adds	r0, r1, #3
 800ad06:	db02      	blt.n	800ad0e <_printf_float+0x13a>
 800ad08:	6863      	ldr	r3, [r4, #4]
 800ad0a:	4299      	cmp	r1, r3
 800ad0c:	dd41      	ble.n	800ad92 <_printf_float+0x1be>
 800ad0e:	f1ab 0b02 	sub.w	fp, fp, #2
 800ad12:	fa5f fb8b 	uxtb.w	fp, fp
 800ad16:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ad1a:	d820      	bhi.n	800ad5e <_printf_float+0x18a>
 800ad1c:	3901      	subs	r1, #1
 800ad1e:	465a      	mov	r2, fp
 800ad20:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ad24:	9109      	str	r1, [sp, #36]	; 0x24
 800ad26:	f7ff ff17 	bl	800ab58 <__exponent>
 800ad2a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad2c:	1813      	adds	r3, r2, r0
 800ad2e:	2a01      	cmp	r2, #1
 800ad30:	4681      	mov	r9, r0
 800ad32:	6123      	str	r3, [r4, #16]
 800ad34:	dc02      	bgt.n	800ad3c <_printf_float+0x168>
 800ad36:	6822      	ldr	r2, [r4, #0]
 800ad38:	07d2      	lsls	r2, r2, #31
 800ad3a:	d501      	bpl.n	800ad40 <_printf_float+0x16c>
 800ad3c:	3301      	adds	r3, #1
 800ad3e:	6123      	str	r3, [r4, #16]
 800ad40:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d09c      	beq.n	800ac82 <_printf_float+0xae>
 800ad48:	232d      	movs	r3, #45	; 0x2d
 800ad4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad4e:	e798      	b.n	800ac82 <_printf_float+0xae>
 800ad50:	9a06      	ldr	r2, [sp, #24]
 800ad52:	2a47      	cmp	r2, #71	; 0x47
 800ad54:	d1be      	bne.n	800acd4 <_printf_float+0x100>
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d1bc      	bne.n	800acd4 <_printf_float+0x100>
 800ad5a:	2301      	movs	r3, #1
 800ad5c:	e7b9      	b.n	800acd2 <_printf_float+0xfe>
 800ad5e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ad62:	d118      	bne.n	800ad96 <_printf_float+0x1c2>
 800ad64:	2900      	cmp	r1, #0
 800ad66:	6863      	ldr	r3, [r4, #4]
 800ad68:	dd0b      	ble.n	800ad82 <_printf_float+0x1ae>
 800ad6a:	6121      	str	r1, [r4, #16]
 800ad6c:	b913      	cbnz	r3, 800ad74 <_printf_float+0x1a0>
 800ad6e:	6822      	ldr	r2, [r4, #0]
 800ad70:	07d0      	lsls	r0, r2, #31
 800ad72:	d502      	bpl.n	800ad7a <_printf_float+0x1a6>
 800ad74:	3301      	adds	r3, #1
 800ad76:	440b      	add	r3, r1
 800ad78:	6123      	str	r3, [r4, #16]
 800ad7a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ad7c:	f04f 0900 	mov.w	r9, #0
 800ad80:	e7de      	b.n	800ad40 <_printf_float+0x16c>
 800ad82:	b913      	cbnz	r3, 800ad8a <_printf_float+0x1b6>
 800ad84:	6822      	ldr	r2, [r4, #0]
 800ad86:	07d2      	lsls	r2, r2, #31
 800ad88:	d501      	bpl.n	800ad8e <_printf_float+0x1ba>
 800ad8a:	3302      	adds	r3, #2
 800ad8c:	e7f4      	b.n	800ad78 <_printf_float+0x1a4>
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e7f2      	b.n	800ad78 <_printf_float+0x1a4>
 800ad92:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ad96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad98:	4299      	cmp	r1, r3
 800ad9a:	db05      	blt.n	800ada8 <_printf_float+0x1d4>
 800ad9c:	6823      	ldr	r3, [r4, #0]
 800ad9e:	6121      	str	r1, [r4, #16]
 800ada0:	07d8      	lsls	r0, r3, #31
 800ada2:	d5ea      	bpl.n	800ad7a <_printf_float+0x1a6>
 800ada4:	1c4b      	adds	r3, r1, #1
 800ada6:	e7e7      	b.n	800ad78 <_printf_float+0x1a4>
 800ada8:	2900      	cmp	r1, #0
 800adaa:	bfd4      	ite	le
 800adac:	f1c1 0202 	rsble	r2, r1, #2
 800adb0:	2201      	movgt	r2, #1
 800adb2:	4413      	add	r3, r2
 800adb4:	e7e0      	b.n	800ad78 <_printf_float+0x1a4>
 800adb6:	6823      	ldr	r3, [r4, #0]
 800adb8:	055a      	lsls	r2, r3, #21
 800adba:	d407      	bmi.n	800adcc <_printf_float+0x1f8>
 800adbc:	6923      	ldr	r3, [r4, #16]
 800adbe:	4642      	mov	r2, r8
 800adc0:	4631      	mov	r1, r6
 800adc2:	4628      	mov	r0, r5
 800adc4:	47b8      	blx	r7
 800adc6:	3001      	adds	r0, #1
 800adc8:	d12c      	bne.n	800ae24 <_printf_float+0x250>
 800adca:	e764      	b.n	800ac96 <_printf_float+0xc2>
 800adcc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800add0:	f240 80e0 	bls.w	800af94 <_printf_float+0x3c0>
 800add4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800add8:	2200      	movs	r2, #0
 800adda:	2300      	movs	r3, #0
 800addc:	f7f5 fe7c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	d034      	beq.n	800ae4e <_printf_float+0x27a>
 800ade4:	4a37      	ldr	r2, [pc, #220]	; (800aec4 <_printf_float+0x2f0>)
 800ade6:	2301      	movs	r3, #1
 800ade8:	4631      	mov	r1, r6
 800adea:	4628      	mov	r0, r5
 800adec:	47b8      	blx	r7
 800adee:	3001      	adds	r0, #1
 800adf0:	f43f af51 	beq.w	800ac96 <_printf_float+0xc2>
 800adf4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800adf8:	429a      	cmp	r2, r3
 800adfa:	db02      	blt.n	800ae02 <_printf_float+0x22e>
 800adfc:	6823      	ldr	r3, [r4, #0]
 800adfe:	07d8      	lsls	r0, r3, #31
 800ae00:	d510      	bpl.n	800ae24 <_printf_float+0x250>
 800ae02:	ee18 3a10 	vmov	r3, s16
 800ae06:	4652      	mov	r2, sl
 800ae08:	4631      	mov	r1, r6
 800ae0a:	4628      	mov	r0, r5
 800ae0c:	47b8      	blx	r7
 800ae0e:	3001      	adds	r0, #1
 800ae10:	f43f af41 	beq.w	800ac96 <_printf_float+0xc2>
 800ae14:	f04f 0800 	mov.w	r8, #0
 800ae18:	f104 091a 	add.w	r9, r4, #26
 800ae1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae1e:	3b01      	subs	r3, #1
 800ae20:	4543      	cmp	r3, r8
 800ae22:	dc09      	bgt.n	800ae38 <_printf_float+0x264>
 800ae24:	6823      	ldr	r3, [r4, #0]
 800ae26:	079b      	lsls	r3, r3, #30
 800ae28:	f100 8105 	bmi.w	800b036 <_printf_float+0x462>
 800ae2c:	68e0      	ldr	r0, [r4, #12]
 800ae2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae30:	4298      	cmp	r0, r3
 800ae32:	bfb8      	it	lt
 800ae34:	4618      	movlt	r0, r3
 800ae36:	e730      	b.n	800ac9a <_printf_float+0xc6>
 800ae38:	2301      	movs	r3, #1
 800ae3a:	464a      	mov	r2, r9
 800ae3c:	4631      	mov	r1, r6
 800ae3e:	4628      	mov	r0, r5
 800ae40:	47b8      	blx	r7
 800ae42:	3001      	adds	r0, #1
 800ae44:	f43f af27 	beq.w	800ac96 <_printf_float+0xc2>
 800ae48:	f108 0801 	add.w	r8, r8, #1
 800ae4c:	e7e6      	b.n	800ae1c <_printf_float+0x248>
 800ae4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	dc39      	bgt.n	800aec8 <_printf_float+0x2f4>
 800ae54:	4a1b      	ldr	r2, [pc, #108]	; (800aec4 <_printf_float+0x2f0>)
 800ae56:	2301      	movs	r3, #1
 800ae58:	4631      	mov	r1, r6
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	47b8      	blx	r7
 800ae5e:	3001      	adds	r0, #1
 800ae60:	f43f af19 	beq.w	800ac96 <_printf_float+0xc2>
 800ae64:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ae68:	4313      	orrs	r3, r2
 800ae6a:	d102      	bne.n	800ae72 <_printf_float+0x29e>
 800ae6c:	6823      	ldr	r3, [r4, #0]
 800ae6e:	07d9      	lsls	r1, r3, #31
 800ae70:	d5d8      	bpl.n	800ae24 <_printf_float+0x250>
 800ae72:	ee18 3a10 	vmov	r3, s16
 800ae76:	4652      	mov	r2, sl
 800ae78:	4631      	mov	r1, r6
 800ae7a:	4628      	mov	r0, r5
 800ae7c:	47b8      	blx	r7
 800ae7e:	3001      	adds	r0, #1
 800ae80:	f43f af09 	beq.w	800ac96 <_printf_float+0xc2>
 800ae84:	f04f 0900 	mov.w	r9, #0
 800ae88:	f104 0a1a 	add.w	sl, r4, #26
 800ae8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae8e:	425b      	negs	r3, r3
 800ae90:	454b      	cmp	r3, r9
 800ae92:	dc01      	bgt.n	800ae98 <_printf_float+0x2c4>
 800ae94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae96:	e792      	b.n	800adbe <_printf_float+0x1ea>
 800ae98:	2301      	movs	r3, #1
 800ae9a:	4652      	mov	r2, sl
 800ae9c:	4631      	mov	r1, r6
 800ae9e:	4628      	mov	r0, r5
 800aea0:	47b8      	blx	r7
 800aea2:	3001      	adds	r0, #1
 800aea4:	f43f aef7 	beq.w	800ac96 <_printf_float+0xc2>
 800aea8:	f109 0901 	add.w	r9, r9, #1
 800aeac:	e7ee      	b.n	800ae8c <_printf_float+0x2b8>
 800aeae:	bf00      	nop
 800aeb0:	7fefffff 	.word	0x7fefffff
 800aeb4:	0800dc70 	.word	0x0800dc70
 800aeb8:	0800dc74 	.word	0x0800dc74
 800aebc:	0800dc7c 	.word	0x0800dc7c
 800aec0:	0800dc78 	.word	0x0800dc78
 800aec4:	0800dc80 	.word	0x0800dc80
 800aec8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800aeca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aecc:	429a      	cmp	r2, r3
 800aece:	bfa8      	it	ge
 800aed0:	461a      	movge	r2, r3
 800aed2:	2a00      	cmp	r2, #0
 800aed4:	4691      	mov	r9, r2
 800aed6:	dc37      	bgt.n	800af48 <_printf_float+0x374>
 800aed8:	f04f 0b00 	mov.w	fp, #0
 800aedc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800aee0:	f104 021a 	add.w	r2, r4, #26
 800aee4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800aee6:	9305      	str	r3, [sp, #20]
 800aee8:	eba3 0309 	sub.w	r3, r3, r9
 800aeec:	455b      	cmp	r3, fp
 800aeee:	dc33      	bgt.n	800af58 <_printf_float+0x384>
 800aef0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aef4:	429a      	cmp	r2, r3
 800aef6:	db3b      	blt.n	800af70 <_printf_float+0x39c>
 800aef8:	6823      	ldr	r3, [r4, #0]
 800aefa:	07da      	lsls	r2, r3, #31
 800aefc:	d438      	bmi.n	800af70 <_printf_float+0x39c>
 800aefe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af00:	9a05      	ldr	r2, [sp, #20]
 800af02:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af04:	1a9a      	subs	r2, r3, r2
 800af06:	eba3 0901 	sub.w	r9, r3, r1
 800af0a:	4591      	cmp	r9, r2
 800af0c:	bfa8      	it	ge
 800af0e:	4691      	movge	r9, r2
 800af10:	f1b9 0f00 	cmp.w	r9, #0
 800af14:	dc35      	bgt.n	800af82 <_printf_float+0x3ae>
 800af16:	f04f 0800 	mov.w	r8, #0
 800af1a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800af1e:	f104 0a1a 	add.w	sl, r4, #26
 800af22:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800af26:	1a9b      	subs	r3, r3, r2
 800af28:	eba3 0309 	sub.w	r3, r3, r9
 800af2c:	4543      	cmp	r3, r8
 800af2e:	f77f af79 	ble.w	800ae24 <_printf_float+0x250>
 800af32:	2301      	movs	r3, #1
 800af34:	4652      	mov	r2, sl
 800af36:	4631      	mov	r1, r6
 800af38:	4628      	mov	r0, r5
 800af3a:	47b8      	blx	r7
 800af3c:	3001      	adds	r0, #1
 800af3e:	f43f aeaa 	beq.w	800ac96 <_printf_float+0xc2>
 800af42:	f108 0801 	add.w	r8, r8, #1
 800af46:	e7ec      	b.n	800af22 <_printf_float+0x34e>
 800af48:	4613      	mov	r3, r2
 800af4a:	4631      	mov	r1, r6
 800af4c:	4642      	mov	r2, r8
 800af4e:	4628      	mov	r0, r5
 800af50:	47b8      	blx	r7
 800af52:	3001      	adds	r0, #1
 800af54:	d1c0      	bne.n	800aed8 <_printf_float+0x304>
 800af56:	e69e      	b.n	800ac96 <_printf_float+0xc2>
 800af58:	2301      	movs	r3, #1
 800af5a:	4631      	mov	r1, r6
 800af5c:	4628      	mov	r0, r5
 800af5e:	9205      	str	r2, [sp, #20]
 800af60:	47b8      	blx	r7
 800af62:	3001      	adds	r0, #1
 800af64:	f43f ae97 	beq.w	800ac96 <_printf_float+0xc2>
 800af68:	9a05      	ldr	r2, [sp, #20]
 800af6a:	f10b 0b01 	add.w	fp, fp, #1
 800af6e:	e7b9      	b.n	800aee4 <_printf_float+0x310>
 800af70:	ee18 3a10 	vmov	r3, s16
 800af74:	4652      	mov	r2, sl
 800af76:	4631      	mov	r1, r6
 800af78:	4628      	mov	r0, r5
 800af7a:	47b8      	blx	r7
 800af7c:	3001      	adds	r0, #1
 800af7e:	d1be      	bne.n	800aefe <_printf_float+0x32a>
 800af80:	e689      	b.n	800ac96 <_printf_float+0xc2>
 800af82:	9a05      	ldr	r2, [sp, #20]
 800af84:	464b      	mov	r3, r9
 800af86:	4442      	add	r2, r8
 800af88:	4631      	mov	r1, r6
 800af8a:	4628      	mov	r0, r5
 800af8c:	47b8      	blx	r7
 800af8e:	3001      	adds	r0, #1
 800af90:	d1c1      	bne.n	800af16 <_printf_float+0x342>
 800af92:	e680      	b.n	800ac96 <_printf_float+0xc2>
 800af94:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af96:	2a01      	cmp	r2, #1
 800af98:	dc01      	bgt.n	800af9e <_printf_float+0x3ca>
 800af9a:	07db      	lsls	r3, r3, #31
 800af9c:	d538      	bpl.n	800b010 <_printf_float+0x43c>
 800af9e:	2301      	movs	r3, #1
 800afa0:	4642      	mov	r2, r8
 800afa2:	4631      	mov	r1, r6
 800afa4:	4628      	mov	r0, r5
 800afa6:	47b8      	blx	r7
 800afa8:	3001      	adds	r0, #1
 800afaa:	f43f ae74 	beq.w	800ac96 <_printf_float+0xc2>
 800afae:	ee18 3a10 	vmov	r3, s16
 800afb2:	4652      	mov	r2, sl
 800afb4:	4631      	mov	r1, r6
 800afb6:	4628      	mov	r0, r5
 800afb8:	47b8      	blx	r7
 800afba:	3001      	adds	r0, #1
 800afbc:	f43f ae6b 	beq.w	800ac96 <_printf_float+0xc2>
 800afc0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800afc4:	2200      	movs	r2, #0
 800afc6:	2300      	movs	r3, #0
 800afc8:	f7f5 fd86 	bl	8000ad8 <__aeabi_dcmpeq>
 800afcc:	b9d8      	cbnz	r0, 800b006 <_printf_float+0x432>
 800afce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afd0:	f108 0201 	add.w	r2, r8, #1
 800afd4:	3b01      	subs	r3, #1
 800afd6:	4631      	mov	r1, r6
 800afd8:	4628      	mov	r0, r5
 800afda:	47b8      	blx	r7
 800afdc:	3001      	adds	r0, #1
 800afde:	d10e      	bne.n	800affe <_printf_float+0x42a>
 800afe0:	e659      	b.n	800ac96 <_printf_float+0xc2>
 800afe2:	2301      	movs	r3, #1
 800afe4:	4652      	mov	r2, sl
 800afe6:	4631      	mov	r1, r6
 800afe8:	4628      	mov	r0, r5
 800afea:	47b8      	blx	r7
 800afec:	3001      	adds	r0, #1
 800afee:	f43f ae52 	beq.w	800ac96 <_printf_float+0xc2>
 800aff2:	f108 0801 	add.w	r8, r8, #1
 800aff6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aff8:	3b01      	subs	r3, #1
 800affa:	4543      	cmp	r3, r8
 800affc:	dcf1      	bgt.n	800afe2 <_printf_float+0x40e>
 800affe:	464b      	mov	r3, r9
 800b000:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b004:	e6dc      	b.n	800adc0 <_printf_float+0x1ec>
 800b006:	f04f 0800 	mov.w	r8, #0
 800b00a:	f104 0a1a 	add.w	sl, r4, #26
 800b00e:	e7f2      	b.n	800aff6 <_printf_float+0x422>
 800b010:	2301      	movs	r3, #1
 800b012:	4642      	mov	r2, r8
 800b014:	e7df      	b.n	800afd6 <_printf_float+0x402>
 800b016:	2301      	movs	r3, #1
 800b018:	464a      	mov	r2, r9
 800b01a:	4631      	mov	r1, r6
 800b01c:	4628      	mov	r0, r5
 800b01e:	47b8      	blx	r7
 800b020:	3001      	adds	r0, #1
 800b022:	f43f ae38 	beq.w	800ac96 <_printf_float+0xc2>
 800b026:	f108 0801 	add.w	r8, r8, #1
 800b02a:	68e3      	ldr	r3, [r4, #12]
 800b02c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b02e:	1a5b      	subs	r3, r3, r1
 800b030:	4543      	cmp	r3, r8
 800b032:	dcf0      	bgt.n	800b016 <_printf_float+0x442>
 800b034:	e6fa      	b.n	800ae2c <_printf_float+0x258>
 800b036:	f04f 0800 	mov.w	r8, #0
 800b03a:	f104 0919 	add.w	r9, r4, #25
 800b03e:	e7f4      	b.n	800b02a <_printf_float+0x456>

0800b040 <_printf_common>:
 800b040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b044:	4616      	mov	r6, r2
 800b046:	4699      	mov	r9, r3
 800b048:	688a      	ldr	r2, [r1, #8]
 800b04a:	690b      	ldr	r3, [r1, #16]
 800b04c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b050:	4293      	cmp	r3, r2
 800b052:	bfb8      	it	lt
 800b054:	4613      	movlt	r3, r2
 800b056:	6033      	str	r3, [r6, #0]
 800b058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b05c:	4607      	mov	r7, r0
 800b05e:	460c      	mov	r4, r1
 800b060:	b10a      	cbz	r2, 800b066 <_printf_common+0x26>
 800b062:	3301      	adds	r3, #1
 800b064:	6033      	str	r3, [r6, #0]
 800b066:	6823      	ldr	r3, [r4, #0]
 800b068:	0699      	lsls	r1, r3, #26
 800b06a:	bf42      	ittt	mi
 800b06c:	6833      	ldrmi	r3, [r6, #0]
 800b06e:	3302      	addmi	r3, #2
 800b070:	6033      	strmi	r3, [r6, #0]
 800b072:	6825      	ldr	r5, [r4, #0]
 800b074:	f015 0506 	ands.w	r5, r5, #6
 800b078:	d106      	bne.n	800b088 <_printf_common+0x48>
 800b07a:	f104 0a19 	add.w	sl, r4, #25
 800b07e:	68e3      	ldr	r3, [r4, #12]
 800b080:	6832      	ldr	r2, [r6, #0]
 800b082:	1a9b      	subs	r3, r3, r2
 800b084:	42ab      	cmp	r3, r5
 800b086:	dc26      	bgt.n	800b0d6 <_printf_common+0x96>
 800b088:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b08c:	1e13      	subs	r3, r2, #0
 800b08e:	6822      	ldr	r2, [r4, #0]
 800b090:	bf18      	it	ne
 800b092:	2301      	movne	r3, #1
 800b094:	0692      	lsls	r2, r2, #26
 800b096:	d42b      	bmi.n	800b0f0 <_printf_common+0xb0>
 800b098:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b09c:	4649      	mov	r1, r9
 800b09e:	4638      	mov	r0, r7
 800b0a0:	47c0      	blx	r8
 800b0a2:	3001      	adds	r0, #1
 800b0a4:	d01e      	beq.n	800b0e4 <_printf_common+0xa4>
 800b0a6:	6823      	ldr	r3, [r4, #0]
 800b0a8:	68e5      	ldr	r5, [r4, #12]
 800b0aa:	6832      	ldr	r2, [r6, #0]
 800b0ac:	f003 0306 	and.w	r3, r3, #6
 800b0b0:	2b04      	cmp	r3, #4
 800b0b2:	bf08      	it	eq
 800b0b4:	1aad      	subeq	r5, r5, r2
 800b0b6:	68a3      	ldr	r3, [r4, #8]
 800b0b8:	6922      	ldr	r2, [r4, #16]
 800b0ba:	bf0c      	ite	eq
 800b0bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b0c0:	2500      	movne	r5, #0
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	bfc4      	itt	gt
 800b0c6:	1a9b      	subgt	r3, r3, r2
 800b0c8:	18ed      	addgt	r5, r5, r3
 800b0ca:	2600      	movs	r6, #0
 800b0cc:	341a      	adds	r4, #26
 800b0ce:	42b5      	cmp	r5, r6
 800b0d0:	d11a      	bne.n	800b108 <_printf_common+0xc8>
 800b0d2:	2000      	movs	r0, #0
 800b0d4:	e008      	b.n	800b0e8 <_printf_common+0xa8>
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	4652      	mov	r2, sl
 800b0da:	4649      	mov	r1, r9
 800b0dc:	4638      	mov	r0, r7
 800b0de:	47c0      	blx	r8
 800b0e0:	3001      	adds	r0, #1
 800b0e2:	d103      	bne.n	800b0ec <_printf_common+0xac>
 800b0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800b0e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0ec:	3501      	adds	r5, #1
 800b0ee:	e7c6      	b.n	800b07e <_printf_common+0x3e>
 800b0f0:	18e1      	adds	r1, r4, r3
 800b0f2:	1c5a      	adds	r2, r3, #1
 800b0f4:	2030      	movs	r0, #48	; 0x30
 800b0f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b0fa:	4422      	add	r2, r4
 800b0fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b100:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b104:	3302      	adds	r3, #2
 800b106:	e7c7      	b.n	800b098 <_printf_common+0x58>
 800b108:	2301      	movs	r3, #1
 800b10a:	4622      	mov	r2, r4
 800b10c:	4649      	mov	r1, r9
 800b10e:	4638      	mov	r0, r7
 800b110:	47c0      	blx	r8
 800b112:	3001      	adds	r0, #1
 800b114:	d0e6      	beq.n	800b0e4 <_printf_common+0xa4>
 800b116:	3601      	adds	r6, #1
 800b118:	e7d9      	b.n	800b0ce <_printf_common+0x8e>
	...

0800b11c <_printf_i>:
 800b11c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b120:	7e0f      	ldrb	r7, [r1, #24]
 800b122:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b124:	2f78      	cmp	r7, #120	; 0x78
 800b126:	4691      	mov	r9, r2
 800b128:	4680      	mov	r8, r0
 800b12a:	460c      	mov	r4, r1
 800b12c:	469a      	mov	sl, r3
 800b12e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b132:	d807      	bhi.n	800b144 <_printf_i+0x28>
 800b134:	2f62      	cmp	r7, #98	; 0x62
 800b136:	d80a      	bhi.n	800b14e <_printf_i+0x32>
 800b138:	2f00      	cmp	r7, #0
 800b13a:	f000 80d8 	beq.w	800b2ee <_printf_i+0x1d2>
 800b13e:	2f58      	cmp	r7, #88	; 0x58
 800b140:	f000 80a3 	beq.w	800b28a <_printf_i+0x16e>
 800b144:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b148:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b14c:	e03a      	b.n	800b1c4 <_printf_i+0xa8>
 800b14e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b152:	2b15      	cmp	r3, #21
 800b154:	d8f6      	bhi.n	800b144 <_printf_i+0x28>
 800b156:	a101      	add	r1, pc, #4	; (adr r1, 800b15c <_printf_i+0x40>)
 800b158:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b15c:	0800b1b5 	.word	0x0800b1b5
 800b160:	0800b1c9 	.word	0x0800b1c9
 800b164:	0800b145 	.word	0x0800b145
 800b168:	0800b145 	.word	0x0800b145
 800b16c:	0800b145 	.word	0x0800b145
 800b170:	0800b145 	.word	0x0800b145
 800b174:	0800b1c9 	.word	0x0800b1c9
 800b178:	0800b145 	.word	0x0800b145
 800b17c:	0800b145 	.word	0x0800b145
 800b180:	0800b145 	.word	0x0800b145
 800b184:	0800b145 	.word	0x0800b145
 800b188:	0800b2d5 	.word	0x0800b2d5
 800b18c:	0800b1f9 	.word	0x0800b1f9
 800b190:	0800b2b7 	.word	0x0800b2b7
 800b194:	0800b145 	.word	0x0800b145
 800b198:	0800b145 	.word	0x0800b145
 800b19c:	0800b2f7 	.word	0x0800b2f7
 800b1a0:	0800b145 	.word	0x0800b145
 800b1a4:	0800b1f9 	.word	0x0800b1f9
 800b1a8:	0800b145 	.word	0x0800b145
 800b1ac:	0800b145 	.word	0x0800b145
 800b1b0:	0800b2bf 	.word	0x0800b2bf
 800b1b4:	682b      	ldr	r3, [r5, #0]
 800b1b6:	1d1a      	adds	r2, r3, #4
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	602a      	str	r2, [r5, #0]
 800b1bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b1c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b1c4:	2301      	movs	r3, #1
 800b1c6:	e0a3      	b.n	800b310 <_printf_i+0x1f4>
 800b1c8:	6820      	ldr	r0, [r4, #0]
 800b1ca:	6829      	ldr	r1, [r5, #0]
 800b1cc:	0606      	lsls	r6, r0, #24
 800b1ce:	f101 0304 	add.w	r3, r1, #4
 800b1d2:	d50a      	bpl.n	800b1ea <_printf_i+0xce>
 800b1d4:	680e      	ldr	r6, [r1, #0]
 800b1d6:	602b      	str	r3, [r5, #0]
 800b1d8:	2e00      	cmp	r6, #0
 800b1da:	da03      	bge.n	800b1e4 <_printf_i+0xc8>
 800b1dc:	232d      	movs	r3, #45	; 0x2d
 800b1de:	4276      	negs	r6, r6
 800b1e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b1e4:	485e      	ldr	r0, [pc, #376]	; (800b360 <_printf_i+0x244>)
 800b1e6:	230a      	movs	r3, #10
 800b1e8:	e019      	b.n	800b21e <_printf_i+0x102>
 800b1ea:	680e      	ldr	r6, [r1, #0]
 800b1ec:	602b      	str	r3, [r5, #0]
 800b1ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b1f2:	bf18      	it	ne
 800b1f4:	b236      	sxthne	r6, r6
 800b1f6:	e7ef      	b.n	800b1d8 <_printf_i+0xbc>
 800b1f8:	682b      	ldr	r3, [r5, #0]
 800b1fa:	6820      	ldr	r0, [r4, #0]
 800b1fc:	1d19      	adds	r1, r3, #4
 800b1fe:	6029      	str	r1, [r5, #0]
 800b200:	0601      	lsls	r1, r0, #24
 800b202:	d501      	bpl.n	800b208 <_printf_i+0xec>
 800b204:	681e      	ldr	r6, [r3, #0]
 800b206:	e002      	b.n	800b20e <_printf_i+0xf2>
 800b208:	0646      	lsls	r6, r0, #25
 800b20a:	d5fb      	bpl.n	800b204 <_printf_i+0xe8>
 800b20c:	881e      	ldrh	r6, [r3, #0]
 800b20e:	4854      	ldr	r0, [pc, #336]	; (800b360 <_printf_i+0x244>)
 800b210:	2f6f      	cmp	r7, #111	; 0x6f
 800b212:	bf0c      	ite	eq
 800b214:	2308      	moveq	r3, #8
 800b216:	230a      	movne	r3, #10
 800b218:	2100      	movs	r1, #0
 800b21a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b21e:	6865      	ldr	r5, [r4, #4]
 800b220:	60a5      	str	r5, [r4, #8]
 800b222:	2d00      	cmp	r5, #0
 800b224:	bfa2      	ittt	ge
 800b226:	6821      	ldrge	r1, [r4, #0]
 800b228:	f021 0104 	bicge.w	r1, r1, #4
 800b22c:	6021      	strge	r1, [r4, #0]
 800b22e:	b90e      	cbnz	r6, 800b234 <_printf_i+0x118>
 800b230:	2d00      	cmp	r5, #0
 800b232:	d04d      	beq.n	800b2d0 <_printf_i+0x1b4>
 800b234:	4615      	mov	r5, r2
 800b236:	fbb6 f1f3 	udiv	r1, r6, r3
 800b23a:	fb03 6711 	mls	r7, r3, r1, r6
 800b23e:	5dc7      	ldrb	r7, [r0, r7]
 800b240:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b244:	4637      	mov	r7, r6
 800b246:	42bb      	cmp	r3, r7
 800b248:	460e      	mov	r6, r1
 800b24a:	d9f4      	bls.n	800b236 <_printf_i+0x11a>
 800b24c:	2b08      	cmp	r3, #8
 800b24e:	d10b      	bne.n	800b268 <_printf_i+0x14c>
 800b250:	6823      	ldr	r3, [r4, #0]
 800b252:	07de      	lsls	r6, r3, #31
 800b254:	d508      	bpl.n	800b268 <_printf_i+0x14c>
 800b256:	6923      	ldr	r3, [r4, #16]
 800b258:	6861      	ldr	r1, [r4, #4]
 800b25a:	4299      	cmp	r1, r3
 800b25c:	bfde      	ittt	le
 800b25e:	2330      	movle	r3, #48	; 0x30
 800b260:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b264:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b268:	1b52      	subs	r2, r2, r5
 800b26a:	6122      	str	r2, [r4, #16]
 800b26c:	f8cd a000 	str.w	sl, [sp]
 800b270:	464b      	mov	r3, r9
 800b272:	aa03      	add	r2, sp, #12
 800b274:	4621      	mov	r1, r4
 800b276:	4640      	mov	r0, r8
 800b278:	f7ff fee2 	bl	800b040 <_printf_common>
 800b27c:	3001      	adds	r0, #1
 800b27e:	d14c      	bne.n	800b31a <_printf_i+0x1fe>
 800b280:	f04f 30ff 	mov.w	r0, #4294967295
 800b284:	b004      	add	sp, #16
 800b286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b28a:	4835      	ldr	r0, [pc, #212]	; (800b360 <_printf_i+0x244>)
 800b28c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b290:	6829      	ldr	r1, [r5, #0]
 800b292:	6823      	ldr	r3, [r4, #0]
 800b294:	f851 6b04 	ldr.w	r6, [r1], #4
 800b298:	6029      	str	r1, [r5, #0]
 800b29a:	061d      	lsls	r5, r3, #24
 800b29c:	d514      	bpl.n	800b2c8 <_printf_i+0x1ac>
 800b29e:	07df      	lsls	r7, r3, #31
 800b2a0:	bf44      	itt	mi
 800b2a2:	f043 0320 	orrmi.w	r3, r3, #32
 800b2a6:	6023      	strmi	r3, [r4, #0]
 800b2a8:	b91e      	cbnz	r6, 800b2b2 <_printf_i+0x196>
 800b2aa:	6823      	ldr	r3, [r4, #0]
 800b2ac:	f023 0320 	bic.w	r3, r3, #32
 800b2b0:	6023      	str	r3, [r4, #0]
 800b2b2:	2310      	movs	r3, #16
 800b2b4:	e7b0      	b.n	800b218 <_printf_i+0xfc>
 800b2b6:	6823      	ldr	r3, [r4, #0]
 800b2b8:	f043 0320 	orr.w	r3, r3, #32
 800b2bc:	6023      	str	r3, [r4, #0]
 800b2be:	2378      	movs	r3, #120	; 0x78
 800b2c0:	4828      	ldr	r0, [pc, #160]	; (800b364 <_printf_i+0x248>)
 800b2c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b2c6:	e7e3      	b.n	800b290 <_printf_i+0x174>
 800b2c8:	0659      	lsls	r1, r3, #25
 800b2ca:	bf48      	it	mi
 800b2cc:	b2b6      	uxthmi	r6, r6
 800b2ce:	e7e6      	b.n	800b29e <_printf_i+0x182>
 800b2d0:	4615      	mov	r5, r2
 800b2d2:	e7bb      	b.n	800b24c <_printf_i+0x130>
 800b2d4:	682b      	ldr	r3, [r5, #0]
 800b2d6:	6826      	ldr	r6, [r4, #0]
 800b2d8:	6961      	ldr	r1, [r4, #20]
 800b2da:	1d18      	adds	r0, r3, #4
 800b2dc:	6028      	str	r0, [r5, #0]
 800b2de:	0635      	lsls	r5, r6, #24
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	d501      	bpl.n	800b2e8 <_printf_i+0x1cc>
 800b2e4:	6019      	str	r1, [r3, #0]
 800b2e6:	e002      	b.n	800b2ee <_printf_i+0x1d2>
 800b2e8:	0670      	lsls	r0, r6, #25
 800b2ea:	d5fb      	bpl.n	800b2e4 <_printf_i+0x1c8>
 800b2ec:	8019      	strh	r1, [r3, #0]
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	6123      	str	r3, [r4, #16]
 800b2f2:	4615      	mov	r5, r2
 800b2f4:	e7ba      	b.n	800b26c <_printf_i+0x150>
 800b2f6:	682b      	ldr	r3, [r5, #0]
 800b2f8:	1d1a      	adds	r2, r3, #4
 800b2fa:	602a      	str	r2, [r5, #0]
 800b2fc:	681d      	ldr	r5, [r3, #0]
 800b2fe:	6862      	ldr	r2, [r4, #4]
 800b300:	2100      	movs	r1, #0
 800b302:	4628      	mov	r0, r5
 800b304:	f7f4 ff74 	bl	80001f0 <memchr>
 800b308:	b108      	cbz	r0, 800b30e <_printf_i+0x1f2>
 800b30a:	1b40      	subs	r0, r0, r5
 800b30c:	6060      	str	r0, [r4, #4]
 800b30e:	6863      	ldr	r3, [r4, #4]
 800b310:	6123      	str	r3, [r4, #16]
 800b312:	2300      	movs	r3, #0
 800b314:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b318:	e7a8      	b.n	800b26c <_printf_i+0x150>
 800b31a:	6923      	ldr	r3, [r4, #16]
 800b31c:	462a      	mov	r2, r5
 800b31e:	4649      	mov	r1, r9
 800b320:	4640      	mov	r0, r8
 800b322:	47d0      	blx	sl
 800b324:	3001      	adds	r0, #1
 800b326:	d0ab      	beq.n	800b280 <_printf_i+0x164>
 800b328:	6823      	ldr	r3, [r4, #0]
 800b32a:	079b      	lsls	r3, r3, #30
 800b32c:	d413      	bmi.n	800b356 <_printf_i+0x23a>
 800b32e:	68e0      	ldr	r0, [r4, #12]
 800b330:	9b03      	ldr	r3, [sp, #12]
 800b332:	4298      	cmp	r0, r3
 800b334:	bfb8      	it	lt
 800b336:	4618      	movlt	r0, r3
 800b338:	e7a4      	b.n	800b284 <_printf_i+0x168>
 800b33a:	2301      	movs	r3, #1
 800b33c:	4632      	mov	r2, r6
 800b33e:	4649      	mov	r1, r9
 800b340:	4640      	mov	r0, r8
 800b342:	47d0      	blx	sl
 800b344:	3001      	adds	r0, #1
 800b346:	d09b      	beq.n	800b280 <_printf_i+0x164>
 800b348:	3501      	adds	r5, #1
 800b34a:	68e3      	ldr	r3, [r4, #12]
 800b34c:	9903      	ldr	r1, [sp, #12]
 800b34e:	1a5b      	subs	r3, r3, r1
 800b350:	42ab      	cmp	r3, r5
 800b352:	dcf2      	bgt.n	800b33a <_printf_i+0x21e>
 800b354:	e7eb      	b.n	800b32e <_printf_i+0x212>
 800b356:	2500      	movs	r5, #0
 800b358:	f104 0619 	add.w	r6, r4, #25
 800b35c:	e7f5      	b.n	800b34a <_printf_i+0x22e>
 800b35e:	bf00      	nop
 800b360:	0800dc82 	.word	0x0800dc82
 800b364:	0800dc93 	.word	0x0800dc93

0800b368 <siprintf>:
 800b368:	b40e      	push	{r1, r2, r3}
 800b36a:	b500      	push	{lr}
 800b36c:	b09c      	sub	sp, #112	; 0x70
 800b36e:	ab1d      	add	r3, sp, #116	; 0x74
 800b370:	9002      	str	r0, [sp, #8]
 800b372:	9006      	str	r0, [sp, #24]
 800b374:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b378:	4809      	ldr	r0, [pc, #36]	; (800b3a0 <siprintf+0x38>)
 800b37a:	9107      	str	r1, [sp, #28]
 800b37c:	9104      	str	r1, [sp, #16]
 800b37e:	4909      	ldr	r1, [pc, #36]	; (800b3a4 <siprintf+0x3c>)
 800b380:	f853 2b04 	ldr.w	r2, [r3], #4
 800b384:	9105      	str	r1, [sp, #20]
 800b386:	6800      	ldr	r0, [r0, #0]
 800b388:	9301      	str	r3, [sp, #4]
 800b38a:	a902      	add	r1, sp, #8
 800b38c:	f001 fc82 	bl	800cc94 <_svfiprintf_r>
 800b390:	9b02      	ldr	r3, [sp, #8]
 800b392:	2200      	movs	r2, #0
 800b394:	701a      	strb	r2, [r3, #0]
 800b396:	b01c      	add	sp, #112	; 0x70
 800b398:	f85d eb04 	ldr.w	lr, [sp], #4
 800b39c:	b003      	add	sp, #12
 800b39e:	4770      	bx	lr
 800b3a0:	2000011c 	.word	0x2000011c
 800b3a4:	ffff0208 	.word	0xffff0208

0800b3a8 <strtok>:
 800b3a8:	4b16      	ldr	r3, [pc, #88]	; (800b404 <strtok+0x5c>)
 800b3aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b3ac:	681e      	ldr	r6, [r3, #0]
 800b3ae:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b3b0:	4605      	mov	r5, r0
 800b3b2:	b9fc      	cbnz	r4, 800b3f4 <strtok+0x4c>
 800b3b4:	2050      	movs	r0, #80	; 0x50
 800b3b6:	9101      	str	r1, [sp, #4]
 800b3b8:	f000 ff8e 	bl	800c2d8 <malloc>
 800b3bc:	9901      	ldr	r1, [sp, #4]
 800b3be:	65b0      	str	r0, [r6, #88]	; 0x58
 800b3c0:	4602      	mov	r2, r0
 800b3c2:	b920      	cbnz	r0, 800b3ce <strtok+0x26>
 800b3c4:	4b10      	ldr	r3, [pc, #64]	; (800b408 <strtok+0x60>)
 800b3c6:	4811      	ldr	r0, [pc, #68]	; (800b40c <strtok+0x64>)
 800b3c8:	2157      	movs	r1, #87	; 0x57
 800b3ca:	f000 f8d5 	bl	800b578 <__assert_func>
 800b3ce:	e9c0 4400 	strd	r4, r4, [r0]
 800b3d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b3d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b3da:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b3de:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b3e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b3e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b3ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b3ee:	6184      	str	r4, [r0, #24]
 800b3f0:	7704      	strb	r4, [r0, #28]
 800b3f2:	6244      	str	r4, [r0, #36]	; 0x24
 800b3f4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	4628      	mov	r0, r5
 800b3fa:	b002      	add	sp, #8
 800b3fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b400:	f000 b806 	b.w	800b410 <__strtok_r>
 800b404:	2000011c 	.word	0x2000011c
 800b408:	0800dca4 	.word	0x0800dca4
 800b40c:	0800dcbb 	.word	0x0800dcbb

0800b410 <__strtok_r>:
 800b410:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b412:	b908      	cbnz	r0, 800b418 <__strtok_r+0x8>
 800b414:	6810      	ldr	r0, [r2, #0]
 800b416:	b188      	cbz	r0, 800b43c <__strtok_r+0x2c>
 800b418:	4604      	mov	r4, r0
 800b41a:	4620      	mov	r0, r4
 800b41c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b420:	460f      	mov	r7, r1
 800b422:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b426:	b91e      	cbnz	r6, 800b430 <__strtok_r+0x20>
 800b428:	b965      	cbnz	r5, 800b444 <__strtok_r+0x34>
 800b42a:	6015      	str	r5, [r2, #0]
 800b42c:	4628      	mov	r0, r5
 800b42e:	e005      	b.n	800b43c <__strtok_r+0x2c>
 800b430:	42b5      	cmp	r5, r6
 800b432:	d1f6      	bne.n	800b422 <__strtok_r+0x12>
 800b434:	2b00      	cmp	r3, #0
 800b436:	d1f0      	bne.n	800b41a <__strtok_r+0xa>
 800b438:	6014      	str	r4, [r2, #0]
 800b43a:	7003      	strb	r3, [r0, #0]
 800b43c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b43e:	461c      	mov	r4, r3
 800b440:	e00c      	b.n	800b45c <__strtok_r+0x4c>
 800b442:	b915      	cbnz	r5, 800b44a <__strtok_r+0x3a>
 800b444:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b448:	460e      	mov	r6, r1
 800b44a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b44e:	42ab      	cmp	r3, r5
 800b450:	d1f7      	bne.n	800b442 <__strtok_r+0x32>
 800b452:	2b00      	cmp	r3, #0
 800b454:	d0f3      	beq.n	800b43e <__strtok_r+0x2e>
 800b456:	2300      	movs	r3, #0
 800b458:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b45c:	6014      	str	r4, [r2, #0]
 800b45e:	e7ed      	b.n	800b43c <__strtok_r+0x2c>

0800b460 <_strtol_l.constprop.0>:
 800b460:	2b01      	cmp	r3, #1
 800b462:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b466:	d001      	beq.n	800b46c <_strtol_l.constprop.0+0xc>
 800b468:	2b24      	cmp	r3, #36	; 0x24
 800b46a:	d906      	bls.n	800b47a <_strtol_l.constprop.0+0x1a>
 800b46c:	f7ff fad2 	bl	800aa14 <__errno>
 800b470:	2316      	movs	r3, #22
 800b472:	6003      	str	r3, [r0, #0]
 800b474:	2000      	movs	r0, #0
 800b476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b47a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b560 <_strtol_l.constprop.0+0x100>
 800b47e:	460d      	mov	r5, r1
 800b480:	462e      	mov	r6, r5
 800b482:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b486:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b48a:	f017 0708 	ands.w	r7, r7, #8
 800b48e:	d1f7      	bne.n	800b480 <_strtol_l.constprop.0+0x20>
 800b490:	2c2d      	cmp	r4, #45	; 0x2d
 800b492:	d132      	bne.n	800b4fa <_strtol_l.constprop.0+0x9a>
 800b494:	782c      	ldrb	r4, [r5, #0]
 800b496:	2701      	movs	r7, #1
 800b498:	1cb5      	adds	r5, r6, #2
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d05b      	beq.n	800b556 <_strtol_l.constprop.0+0xf6>
 800b49e:	2b10      	cmp	r3, #16
 800b4a0:	d109      	bne.n	800b4b6 <_strtol_l.constprop.0+0x56>
 800b4a2:	2c30      	cmp	r4, #48	; 0x30
 800b4a4:	d107      	bne.n	800b4b6 <_strtol_l.constprop.0+0x56>
 800b4a6:	782c      	ldrb	r4, [r5, #0]
 800b4a8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b4ac:	2c58      	cmp	r4, #88	; 0x58
 800b4ae:	d14d      	bne.n	800b54c <_strtol_l.constprop.0+0xec>
 800b4b0:	786c      	ldrb	r4, [r5, #1]
 800b4b2:	2310      	movs	r3, #16
 800b4b4:	3502      	adds	r5, #2
 800b4b6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b4ba:	f108 38ff 	add.w	r8, r8, #4294967295
 800b4be:	f04f 0c00 	mov.w	ip, #0
 800b4c2:	fbb8 f9f3 	udiv	r9, r8, r3
 800b4c6:	4666      	mov	r6, ip
 800b4c8:	fb03 8a19 	mls	sl, r3, r9, r8
 800b4cc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b4d0:	f1be 0f09 	cmp.w	lr, #9
 800b4d4:	d816      	bhi.n	800b504 <_strtol_l.constprop.0+0xa4>
 800b4d6:	4674      	mov	r4, lr
 800b4d8:	42a3      	cmp	r3, r4
 800b4da:	dd24      	ble.n	800b526 <_strtol_l.constprop.0+0xc6>
 800b4dc:	f1bc 0f00 	cmp.w	ip, #0
 800b4e0:	db1e      	blt.n	800b520 <_strtol_l.constprop.0+0xc0>
 800b4e2:	45b1      	cmp	r9, r6
 800b4e4:	d31c      	bcc.n	800b520 <_strtol_l.constprop.0+0xc0>
 800b4e6:	d101      	bne.n	800b4ec <_strtol_l.constprop.0+0x8c>
 800b4e8:	45a2      	cmp	sl, r4
 800b4ea:	db19      	blt.n	800b520 <_strtol_l.constprop.0+0xc0>
 800b4ec:	fb06 4603 	mla	r6, r6, r3, r4
 800b4f0:	f04f 0c01 	mov.w	ip, #1
 800b4f4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b4f8:	e7e8      	b.n	800b4cc <_strtol_l.constprop.0+0x6c>
 800b4fa:	2c2b      	cmp	r4, #43	; 0x2b
 800b4fc:	bf04      	itt	eq
 800b4fe:	782c      	ldrbeq	r4, [r5, #0]
 800b500:	1cb5      	addeq	r5, r6, #2
 800b502:	e7ca      	b.n	800b49a <_strtol_l.constprop.0+0x3a>
 800b504:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b508:	f1be 0f19 	cmp.w	lr, #25
 800b50c:	d801      	bhi.n	800b512 <_strtol_l.constprop.0+0xb2>
 800b50e:	3c37      	subs	r4, #55	; 0x37
 800b510:	e7e2      	b.n	800b4d8 <_strtol_l.constprop.0+0x78>
 800b512:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800b516:	f1be 0f19 	cmp.w	lr, #25
 800b51a:	d804      	bhi.n	800b526 <_strtol_l.constprop.0+0xc6>
 800b51c:	3c57      	subs	r4, #87	; 0x57
 800b51e:	e7db      	b.n	800b4d8 <_strtol_l.constprop.0+0x78>
 800b520:	f04f 3cff 	mov.w	ip, #4294967295
 800b524:	e7e6      	b.n	800b4f4 <_strtol_l.constprop.0+0x94>
 800b526:	f1bc 0f00 	cmp.w	ip, #0
 800b52a:	da05      	bge.n	800b538 <_strtol_l.constprop.0+0xd8>
 800b52c:	2322      	movs	r3, #34	; 0x22
 800b52e:	6003      	str	r3, [r0, #0]
 800b530:	4646      	mov	r6, r8
 800b532:	b942      	cbnz	r2, 800b546 <_strtol_l.constprop.0+0xe6>
 800b534:	4630      	mov	r0, r6
 800b536:	e79e      	b.n	800b476 <_strtol_l.constprop.0+0x16>
 800b538:	b107      	cbz	r7, 800b53c <_strtol_l.constprop.0+0xdc>
 800b53a:	4276      	negs	r6, r6
 800b53c:	2a00      	cmp	r2, #0
 800b53e:	d0f9      	beq.n	800b534 <_strtol_l.constprop.0+0xd4>
 800b540:	f1bc 0f00 	cmp.w	ip, #0
 800b544:	d000      	beq.n	800b548 <_strtol_l.constprop.0+0xe8>
 800b546:	1e69      	subs	r1, r5, #1
 800b548:	6011      	str	r1, [r2, #0]
 800b54a:	e7f3      	b.n	800b534 <_strtol_l.constprop.0+0xd4>
 800b54c:	2430      	movs	r4, #48	; 0x30
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d1b1      	bne.n	800b4b6 <_strtol_l.constprop.0+0x56>
 800b552:	2308      	movs	r3, #8
 800b554:	e7af      	b.n	800b4b6 <_strtol_l.constprop.0+0x56>
 800b556:	2c30      	cmp	r4, #48	; 0x30
 800b558:	d0a5      	beq.n	800b4a6 <_strtol_l.constprop.0+0x46>
 800b55a:	230a      	movs	r3, #10
 800b55c:	e7ab      	b.n	800b4b6 <_strtol_l.constprop.0+0x56>
 800b55e:	bf00      	nop
 800b560:	0800dd55 	.word	0x0800dd55

0800b564 <strtol>:
 800b564:	4613      	mov	r3, r2
 800b566:	460a      	mov	r2, r1
 800b568:	4601      	mov	r1, r0
 800b56a:	4802      	ldr	r0, [pc, #8]	; (800b574 <strtol+0x10>)
 800b56c:	6800      	ldr	r0, [r0, #0]
 800b56e:	f7ff bf77 	b.w	800b460 <_strtol_l.constprop.0>
 800b572:	bf00      	nop
 800b574:	2000011c 	.word	0x2000011c

0800b578 <__assert_func>:
 800b578:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b57a:	4614      	mov	r4, r2
 800b57c:	461a      	mov	r2, r3
 800b57e:	4b09      	ldr	r3, [pc, #36]	; (800b5a4 <__assert_func+0x2c>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4605      	mov	r5, r0
 800b584:	68d8      	ldr	r0, [r3, #12]
 800b586:	b14c      	cbz	r4, 800b59c <__assert_func+0x24>
 800b588:	4b07      	ldr	r3, [pc, #28]	; (800b5a8 <__assert_func+0x30>)
 800b58a:	9100      	str	r1, [sp, #0]
 800b58c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b590:	4906      	ldr	r1, [pc, #24]	; (800b5ac <__assert_func+0x34>)
 800b592:	462b      	mov	r3, r5
 800b594:	f000 fe8a 	bl	800c2ac <fiprintf>
 800b598:	f001 fea6 	bl	800d2e8 <abort>
 800b59c:	4b04      	ldr	r3, [pc, #16]	; (800b5b0 <__assert_func+0x38>)
 800b59e:	461c      	mov	r4, r3
 800b5a0:	e7f3      	b.n	800b58a <__assert_func+0x12>
 800b5a2:	bf00      	nop
 800b5a4:	2000011c 	.word	0x2000011c
 800b5a8:	0800dd18 	.word	0x0800dd18
 800b5ac:	0800dd25 	.word	0x0800dd25
 800b5b0:	0800dd53 	.word	0x0800dd53

0800b5b4 <quorem>:
 800b5b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5b8:	6903      	ldr	r3, [r0, #16]
 800b5ba:	690c      	ldr	r4, [r1, #16]
 800b5bc:	42a3      	cmp	r3, r4
 800b5be:	4607      	mov	r7, r0
 800b5c0:	f2c0 8081 	blt.w	800b6c6 <quorem+0x112>
 800b5c4:	3c01      	subs	r4, #1
 800b5c6:	f101 0814 	add.w	r8, r1, #20
 800b5ca:	f100 0514 	add.w	r5, r0, #20
 800b5ce:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b5d2:	9301      	str	r3, [sp, #4]
 800b5d4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b5d8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	429a      	cmp	r2, r3
 800b5e0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b5e4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b5e8:	fbb2 f6f3 	udiv	r6, r2, r3
 800b5ec:	d331      	bcc.n	800b652 <quorem+0x9e>
 800b5ee:	f04f 0e00 	mov.w	lr, #0
 800b5f2:	4640      	mov	r0, r8
 800b5f4:	46ac      	mov	ip, r5
 800b5f6:	46f2      	mov	sl, lr
 800b5f8:	f850 2b04 	ldr.w	r2, [r0], #4
 800b5fc:	b293      	uxth	r3, r2
 800b5fe:	fb06 e303 	mla	r3, r6, r3, lr
 800b602:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b606:	b29b      	uxth	r3, r3
 800b608:	ebaa 0303 	sub.w	r3, sl, r3
 800b60c:	f8dc a000 	ldr.w	sl, [ip]
 800b610:	0c12      	lsrs	r2, r2, #16
 800b612:	fa13 f38a 	uxtah	r3, r3, sl
 800b616:	fb06 e202 	mla	r2, r6, r2, lr
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	9b00      	ldr	r3, [sp, #0]
 800b61e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b622:	b292      	uxth	r2, r2
 800b624:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b628:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b62c:	f8bd 3000 	ldrh.w	r3, [sp]
 800b630:	4581      	cmp	r9, r0
 800b632:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b636:	f84c 3b04 	str.w	r3, [ip], #4
 800b63a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b63e:	d2db      	bcs.n	800b5f8 <quorem+0x44>
 800b640:	f855 300b 	ldr.w	r3, [r5, fp]
 800b644:	b92b      	cbnz	r3, 800b652 <quorem+0x9e>
 800b646:	9b01      	ldr	r3, [sp, #4]
 800b648:	3b04      	subs	r3, #4
 800b64a:	429d      	cmp	r5, r3
 800b64c:	461a      	mov	r2, r3
 800b64e:	d32e      	bcc.n	800b6ae <quorem+0xfa>
 800b650:	613c      	str	r4, [r7, #16]
 800b652:	4638      	mov	r0, r7
 800b654:	f001 f8ca 	bl	800c7ec <__mcmp>
 800b658:	2800      	cmp	r0, #0
 800b65a:	db24      	blt.n	800b6a6 <quorem+0xf2>
 800b65c:	3601      	adds	r6, #1
 800b65e:	4628      	mov	r0, r5
 800b660:	f04f 0c00 	mov.w	ip, #0
 800b664:	f858 2b04 	ldr.w	r2, [r8], #4
 800b668:	f8d0 e000 	ldr.w	lr, [r0]
 800b66c:	b293      	uxth	r3, r2
 800b66e:	ebac 0303 	sub.w	r3, ip, r3
 800b672:	0c12      	lsrs	r2, r2, #16
 800b674:	fa13 f38e 	uxtah	r3, r3, lr
 800b678:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b67c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b680:	b29b      	uxth	r3, r3
 800b682:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b686:	45c1      	cmp	r9, r8
 800b688:	f840 3b04 	str.w	r3, [r0], #4
 800b68c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b690:	d2e8      	bcs.n	800b664 <quorem+0xb0>
 800b692:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b696:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b69a:	b922      	cbnz	r2, 800b6a6 <quorem+0xf2>
 800b69c:	3b04      	subs	r3, #4
 800b69e:	429d      	cmp	r5, r3
 800b6a0:	461a      	mov	r2, r3
 800b6a2:	d30a      	bcc.n	800b6ba <quorem+0x106>
 800b6a4:	613c      	str	r4, [r7, #16]
 800b6a6:	4630      	mov	r0, r6
 800b6a8:	b003      	add	sp, #12
 800b6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b6ae:	6812      	ldr	r2, [r2, #0]
 800b6b0:	3b04      	subs	r3, #4
 800b6b2:	2a00      	cmp	r2, #0
 800b6b4:	d1cc      	bne.n	800b650 <quorem+0x9c>
 800b6b6:	3c01      	subs	r4, #1
 800b6b8:	e7c7      	b.n	800b64a <quorem+0x96>
 800b6ba:	6812      	ldr	r2, [r2, #0]
 800b6bc:	3b04      	subs	r3, #4
 800b6be:	2a00      	cmp	r2, #0
 800b6c0:	d1f0      	bne.n	800b6a4 <quorem+0xf0>
 800b6c2:	3c01      	subs	r4, #1
 800b6c4:	e7eb      	b.n	800b69e <quorem+0xea>
 800b6c6:	2000      	movs	r0, #0
 800b6c8:	e7ee      	b.n	800b6a8 <quorem+0xf4>
 800b6ca:	0000      	movs	r0, r0
 800b6cc:	0000      	movs	r0, r0
	...

0800b6d0 <_dtoa_r>:
 800b6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6d4:	ed2d 8b04 	vpush	{d8-d9}
 800b6d8:	ec57 6b10 	vmov	r6, r7, d0
 800b6dc:	b093      	sub	sp, #76	; 0x4c
 800b6de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b6e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b6e4:	9106      	str	r1, [sp, #24]
 800b6e6:	ee10 aa10 	vmov	sl, s0
 800b6ea:	4604      	mov	r4, r0
 800b6ec:	9209      	str	r2, [sp, #36]	; 0x24
 800b6ee:	930c      	str	r3, [sp, #48]	; 0x30
 800b6f0:	46bb      	mov	fp, r7
 800b6f2:	b975      	cbnz	r5, 800b712 <_dtoa_r+0x42>
 800b6f4:	2010      	movs	r0, #16
 800b6f6:	f000 fdef 	bl	800c2d8 <malloc>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	6260      	str	r0, [r4, #36]	; 0x24
 800b6fe:	b920      	cbnz	r0, 800b70a <_dtoa_r+0x3a>
 800b700:	4ba7      	ldr	r3, [pc, #668]	; (800b9a0 <_dtoa_r+0x2d0>)
 800b702:	21ea      	movs	r1, #234	; 0xea
 800b704:	48a7      	ldr	r0, [pc, #668]	; (800b9a4 <_dtoa_r+0x2d4>)
 800b706:	f7ff ff37 	bl	800b578 <__assert_func>
 800b70a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b70e:	6005      	str	r5, [r0, #0]
 800b710:	60c5      	str	r5, [r0, #12]
 800b712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b714:	6819      	ldr	r1, [r3, #0]
 800b716:	b151      	cbz	r1, 800b72e <_dtoa_r+0x5e>
 800b718:	685a      	ldr	r2, [r3, #4]
 800b71a:	604a      	str	r2, [r1, #4]
 800b71c:	2301      	movs	r3, #1
 800b71e:	4093      	lsls	r3, r2
 800b720:	608b      	str	r3, [r1, #8]
 800b722:	4620      	mov	r0, r4
 800b724:	f000 fe20 	bl	800c368 <_Bfree>
 800b728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b72a:	2200      	movs	r2, #0
 800b72c:	601a      	str	r2, [r3, #0]
 800b72e:	1e3b      	subs	r3, r7, #0
 800b730:	bfaa      	itet	ge
 800b732:	2300      	movge	r3, #0
 800b734:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b738:	f8c8 3000 	strge.w	r3, [r8]
 800b73c:	4b9a      	ldr	r3, [pc, #616]	; (800b9a8 <_dtoa_r+0x2d8>)
 800b73e:	bfbc      	itt	lt
 800b740:	2201      	movlt	r2, #1
 800b742:	f8c8 2000 	strlt.w	r2, [r8]
 800b746:	ea33 030b 	bics.w	r3, r3, fp
 800b74a:	d11b      	bne.n	800b784 <_dtoa_r+0xb4>
 800b74c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b74e:	f242 730f 	movw	r3, #9999	; 0x270f
 800b752:	6013      	str	r3, [r2, #0]
 800b754:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b758:	4333      	orrs	r3, r6
 800b75a:	f000 8592 	beq.w	800c282 <_dtoa_r+0xbb2>
 800b75e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b760:	b963      	cbnz	r3, 800b77c <_dtoa_r+0xac>
 800b762:	4b92      	ldr	r3, [pc, #584]	; (800b9ac <_dtoa_r+0x2dc>)
 800b764:	e022      	b.n	800b7ac <_dtoa_r+0xdc>
 800b766:	4b92      	ldr	r3, [pc, #584]	; (800b9b0 <_dtoa_r+0x2e0>)
 800b768:	9301      	str	r3, [sp, #4]
 800b76a:	3308      	adds	r3, #8
 800b76c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b76e:	6013      	str	r3, [r2, #0]
 800b770:	9801      	ldr	r0, [sp, #4]
 800b772:	b013      	add	sp, #76	; 0x4c
 800b774:	ecbd 8b04 	vpop	{d8-d9}
 800b778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b77c:	4b8b      	ldr	r3, [pc, #556]	; (800b9ac <_dtoa_r+0x2dc>)
 800b77e:	9301      	str	r3, [sp, #4]
 800b780:	3303      	adds	r3, #3
 800b782:	e7f3      	b.n	800b76c <_dtoa_r+0x9c>
 800b784:	2200      	movs	r2, #0
 800b786:	2300      	movs	r3, #0
 800b788:	4650      	mov	r0, sl
 800b78a:	4659      	mov	r1, fp
 800b78c:	f7f5 f9a4 	bl	8000ad8 <__aeabi_dcmpeq>
 800b790:	ec4b ab19 	vmov	d9, sl, fp
 800b794:	4680      	mov	r8, r0
 800b796:	b158      	cbz	r0, 800b7b0 <_dtoa_r+0xe0>
 800b798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b79a:	2301      	movs	r3, #1
 800b79c:	6013      	str	r3, [r2, #0]
 800b79e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	f000 856b 	beq.w	800c27c <_dtoa_r+0xbac>
 800b7a6:	4883      	ldr	r0, [pc, #524]	; (800b9b4 <_dtoa_r+0x2e4>)
 800b7a8:	6018      	str	r0, [r3, #0]
 800b7aa:	1e43      	subs	r3, r0, #1
 800b7ac:	9301      	str	r3, [sp, #4]
 800b7ae:	e7df      	b.n	800b770 <_dtoa_r+0xa0>
 800b7b0:	ec4b ab10 	vmov	d0, sl, fp
 800b7b4:	aa10      	add	r2, sp, #64	; 0x40
 800b7b6:	a911      	add	r1, sp, #68	; 0x44
 800b7b8:	4620      	mov	r0, r4
 800b7ba:	f001 f8bd 	bl	800c938 <__d2b>
 800b7be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b7c2:	ee08 0a10 	vmov	s16, r0
 800b7c6:	2d00      	cmp	r5, #0
 800b7c8:	f000 8084 	beq.w	800b8d4 <_dtoa_r+0x204>
 800b7cc:	ee19 3a90 	vmov	r3, s19
 800b7d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b7d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b7d8:	4656      	mov	r6, sl
 800b7da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b7de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b7e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b7e6:	4b74      	ldr	r3, [pc, #464]	; (800b9b8 <_dtoa_r+0x2e8>)
 800b7e8:	2200      	movs	r2, #0
 800b7ea:	4630      	mov	r0, r6
 800b7ec:	4639      	mov	r1, r7
 800b7ee:	f7f4 fd53 	bl	8000298 <__aeabi_dsub>
 800b7f2:	a365      	add	r3, pc, #404	; (adr r3, 800b988 <_dtoa_r+0x2b8>)
 800b7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7f8:	f7f4 ff06 	bl	8000608 <__aeabi_dmul>
 800b7fc:	a364      	add	r3, pc, #400	; (adr r3, 800b990 <_dtoa_r+0x2c0>)
 800b7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b802:	f7f4 fd4b 	bl	800029c <__adddf3>
 800b806:	4606      	mov	r6, r0
 800b808:	4628      	mov	r0, r5
 800b80a:	460f      	mov	r7, r1
 800b80c:	f7f4 fe92 	bl	8000534 <__aeabi_i2d>
 800b810:	a361      	add	r3, pc, #388	; (adr r3, 800b998 <_dtoa_r+0x2c8>)
 800b812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b816:	f7f4 fef7 	bl	8000608 <__aeabi_dmul>
 800b81a:	4602      	mov	r2, r0
 800b81c:	460b      	mov	r3, r1
 800b81e:	4630      	mov	r0, r6
 800b820:	4639      	mov	r1, r7
 800b822:	f7f4 fd3b 	bl	800029c <__adddf3>
 800b826:	4606      	mov	r6, r0
 800b828:	460f      	mov	r7, r1
 800b82a:	f7f5 f99d 	bl	8000b68 <__aeabi_d2iz>
 800b82e:	2200      	movs	r2, #0
 800b830:	9000      	str	r0, [sp, #0]
 800b832:	2300      	movs	r3, #0
 800b834:	4630      	mov	r0, r6
 800b836:	4639      	mov	r1, r7
 800b838:	f7f5 f958 	bl	8000aec <__aeabi_dcmplt>
 800b83c:	b150      	cbz	r0, 800b854 <_dtoa_r+0x184>
 800b83e:	9800      	ldr	r0, [sp, #0]
 800b840:	f7f4 fe78 	bl	8000534 <__aeabi_i2d>
 800b844:	4632      	mov	r2, r6
 800b846:	463b      	mov	r3, r7
 800b848:	f7f5 f946 	bl	8000ad8 <__aeabi_dcmpeq>
 800b84c:	b910      	cbnz	r0, 800b854 <_dtoa_r+0x184>
 800b84e:	9b00      	ldr	r3, [sp, #0]
 800b850:	3b01      	subs	r3, #1
 800b852:	9300      	str	r3, [sp, #0]
 800b854:	9b00      	ldr	r3, [sp, #0]
 800b856:	2b16      	cmp	r3, #22
 800b858:	d85a      	bhi.n	800b910 <_dtoa_r+0x240>
 800b85a:	9a00      	ldr	r2, [sp, #0]
 800b85c:	4b57      	ldr	r3, [pc, #348]	; (800b9bc <_dtoa_r+0x2ec>)
 800b85e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b866:	ec51 0b19 	vmov	r0, r1, d9
 800b86a:	f7f5 f93f 	bl	8000aec <__aeabi_dcmplt>
 800b86e:	2800      	cmp	r0, #0
 800b870:	d050      	beq.n	800b914 <_dtoa_r+0x244>
 800b872:	9b00      	ldr	r3, [sp, #0]
 800b874:	3b01      	subs	r3, #1
 800b876:	9300      	str	r3, [sp, #0]
 800b878:	2300      	movs	r3, #0
 800b87a:	930b      	str	r3, [sp, #44]	; 0x2c
 800b87c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b87e:	1b5d      	subs	r5, r3, r5
 800b880:	1e6b      	subs	r3, r5, #1
 800b882:	9305      	str	r3, [sp, #20]
 800b884:	bf45      	ittet	mi
 800b886:	f1c5 0301 	rsbmi	r3, r5, #1
 800b88a:	9304      	strmi	r3, [sp, #16]
 800b88c:	2300      	movpl	r3, #0
 800b88e:	2300      	movmi	r3, #0
 800b890:	bf4c      	ite	mi
 800b892:	9305      	strmi	r3, [sp, #20]
 800b894:	9304      	strpl	r3, [sp, #16]
 800b896:	9b00      	ldr	r3, [sp, #0]
 800b898:	2b00      	cmp	r3, #0
 800b89a:	db3d      	blt.n	800b918 <_dtoa_r+0x248>
 800b89c:	9b05      	ldr	r3, [sp, #20]
 800b89e:	9a00      	ldr	r2, [sp, #0]
 800b8a0:	920a      	str	r2, [sp, #40]	; 0x28
 800b8a2:	4413      	add	r3, r2
 800b8a4:	9305      	str	r3, [sp, #20]
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	9307      	str	r3, [sp, #28]
 800b8aa:	9b06      	ldr	r3, [sp, #24]
 800b8ac:	2b09      	cmp	r3, #9
 800b8ae:	f200 8089 	bhi.w	800b9c4 <_dtoa_r+0x2f4>
 800b8b2:	2b05      	cmp	r3, #5
 800b8b4:	bfc4      	itt	gt
 800b8b6:	3b04      	subgt	r3, #4
 800b8b8:	9306      	strgt	r3, [sp, #24]
 800b8ba:	9b06      	ldr	r3, [sp, #24]
 800b8bc:	f1a3 0302 	sub.w	r3, r3, #2
 800b8c0:	bfcc      	ite	gt
 800b8c2:	2500      	movgt	r5, #0
 800b8c4:	2501      	movle	r5, #1
 800b8c6:	2b03      	cmp	r3, #3
 800b8c8:	f200 8087 	bhi.w	800b9da <_dtoa_r+0x30a>
 800b8cc:	e8df f003 	tbb	[pc, r3]
 800b8d0:	59383a2d 	.word	0x59383a2d
 800b8d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b8d8:	441d      	add	r5, r3
 800b8da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b8de:	2b20      	cmp	r3, #32
 800b8e0:	bfc1      	itttt	gt
 800b8e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b8e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b8ea:	fa0b f303 	lslgt.w	r3, fp, r3
 800b8ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b8f2:	bfda      	itte	le
 800b8f4:	f1c3 0320 	rsble	r3, r3, #32
 800b8f8:	fa06 f003 	lslle.w	r0, r6, r3
 800b8fc:	4318      	orrgt	r0, r3
 800b8fe:	f7f4 fe09 	bl	8000514 <__aeabi_ui2d>
 800b902:	2301      	movs	r3, #1
 800b904:	4606      	mov	r6, r0
 800b906:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b90a:	3d01      	subs	r5, #1
 800b90c:	930e      	str	r3, [sp, #56]	; 0x38
 800b90e:	e76a      	b.n	800b7e6 <_dtoa_r+0x116>
 800b910:	2301      	movs	r3, #1
 800b912:	e7b2      	b.n	800b87a <_dtoa_r+0x1aa>
 800b914:	900b      	str	r0, [sp, #44]	; 0x2c
 800b916:	e7b1      	b.n	800b87c <_dtoa_r+0x1ac>
 800b918:	9b04      	ldr	r3, [sp, #16]
 800b91a:	9a00      	ldr	r2, [sp, #0]
 800b91c:	1a9b      	subs	r3, r3, r2
 800b91e:	9304      	str	r3, [sp, #16]
 800b920:	4253      	negs	r3, r2
 800b922:	9307      	str	r3, [sp, #28]
 800b924:	2300      	movs	r3, #0
 800b926:	930a      	str	r3, [sp, #40]	; 0x28
 800b928:	e7bf      	b.n	800b8aa <_dtoa_r+0x1da>
 800b92a:	2300      	movs	r3, #0
 800b92c:	9308      	str	r3, [sp, #32]
 800b92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b930:	2b00      	cmp	r3, #0
 800b932:	dc55      	bgt.n	800b9e0 <_dtoa_r+0x310>
 800b934:	2301      	movs	r3, #1
 800b936:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b93a:	461a      	mov	r2, r3
 800b93c:	9209      	str	r2, [sp, #36]	; 0x24
 800b93e:	e00c      	b.n	800b95a <_dtoa_r+0x28a>
 800b940:	2301      	movs	r3, #1
 800b942:	e7f3      	b.n	800b92c <_dtoa_r+0x25c>
 800b944:	2300      	movs	r3, #0
 800b946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b948:	9308      	str	r3, [sp, #32]
 800b94a:	9b00      	ldr	r3, [sp, #0]
 800b94c:	4413      	add	r3, r2
 800b94e:	9302      	str	r3, [sp, #8]
 800b950:	3301      	adds	r3, #1
 800b952:	2b01      	cmp	r3, #1
 800b954:	9303      	str	r3, [sp, #12]
 800b956:	bfb8      	it	lt
 800b958:	2301      	movlt	r3, #1
 800b95a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b95c:	2200      	movs	r2, #0
 800b95e:	6042      	str	r2, [r0, #4]
 800b960:	2204      	movs	r2, #4
 800b962:	f102 0614 	add.w	r6, r2, #20
 800b966:	429e      	cmp	r6, r3
 800b968:	6841      	ldr	r1, [r0, #4]
 800b96a:	d93d      	bls.n	800b9e8 <_dtoa_r+0x318>
 800b96c:	4620      	mov	r0, r4
 800b96e:	f000 fcbb 	bl	800c2e8 <_Balloc>
 800b972:	9001      	str	r0, [sp, #4]
 800b974:	2800      	cmp	r0, #0
 800b976:	d13b      	bne.n	800b9f0 <_dtoa_r+0x320>
 800b978:	4b11      	ldr	r3, [pc, #68]	; (800b9c0 <_dtoa_r+0x2f0>)
 800b97a:	4602      	mov	r2, r0
 800b97c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b980:	e6c0      	b.n	800b704 <_dtoa_r+0x34>
 800b982:	2301      	movs	r3, #1
 800b984:	e7df      	b.n	800b946 <_dtoa_r+0x276>
 800b986:	bf00      	nop
 800b988:	636f4361 	.word	0x636f4361
 800b98c:	3fd287a7 	.word	0x3fd287a7
 800b990:	8b60c8b3 	.word	0x8b60c8b3
 800b994:	3fc68a28 	.word	0x3fc68a28
 800b998:	509f79fb 	.word	0x509f79fb
 800b99c:	3fd34413 	.word	0x3fd34413
 800b9a0:	0800dca4 	.word	0x0800dca4
 800b9a4:	0800de62 	.word	0x0800de62
 800b9a8:	7ff00000 	.word	0x7ff00000
 800b9ac:	0800de5e 	.word	0x0800de5e
 800b9b0:	0800de55 	.word	0x0800de55
 800b9b4:	0800dc81 	.word	0x0800dc81
 800b9b8:	3ff80000 	.word	0x3ff80000
 800b9bc:	0800df58 	.word	0x0800df58
 800b9c0:	0800debd 	.word	0x0800debd
 800b9c4:	2501      	movs	r5, #1
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	9306      	str	r3, [sp, #24]
 800b9ca:	9508      	str	r5, [sp, #32]
 800b9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b9d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b9d4:	2200      	movs	r2, #0
 800b9d6:	2312      	movs	r3, #18
 800b9d8:	e7b0      	b.n	800b93c <_dtoa_r+0x26c>
 800b9da:	2301      	movs	r3, #1
 800b9dc:	9308      	str	r3, [sp, #32]
 800b9de:	e7f5      	b.n	800b9cc <_dtoa_r+0x2fc>
 800b9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b9e6:	e7b8      	b.n	800b95a <_dtoa_r+0x28a>
 800b9e8:	3101      	adds	r1, #1
 800b9ea:	6041      	str	r1, [r0, #4]
 800b9ec:	0052      	lsls	r2, r2, #1
 800b9ee:	e7b8      	b.n	800b962 <_dtoa_r+0x292>
 800b9f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b9f2:	9a01      	ldr	r2, [sp, #4]
 800b9f4:	601a      	str	r2, [r3, #0]
 800b9f6:	9b03      	ldr	r3, [sp, #12]
 800b9f8:	2b0e      	cmp	r3, #14
 800b9fa:	f200 809d 	bhi.w	800bb38 <_dtoa_r+0x468>
 800b9fe:	2d00      	cmp	r5, #0
 800ba00:	f000 809a 	beq.w	800bb38 <_dtoa_r+0x468>
 800ba04:	9b00      	ldr	r3, [sp, #0]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	dd32      	ble.n	800ba70 <_dtoa_r+0x3a0>
 800ba0a:	4ab7      	ldr	r2, [pc, #732]	; (800bce8 <_dtoa_r+0x618>)
 800ba0c:	f003 030f 	and.w	r3, r3, #15
 800ba10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ba14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba18:	9b00      	ldr	r3, [sp, #0]
 800ba1a:	05d8      	lsls	r0, r3, #23
 800ba1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ba20:	d516      	bpl.n	800ba50 <_dtoa_r+0x380>
 800ba22:	4bb2      	ldr	r3, [pc, #712]	; (800bcec <_dtoa_r+0x61c>)
 800ba24:	ec51 0b19 	vmov	r0, r1, d9
 800ba28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ba2c:	f7f4 ff16 	bl	800085c <__aeabi_ddiv>
 800ba30:	f007 070f 	and.w	r7, r7, #15
 800ba34:	4682      	mov	sl, r0
 800ba36:	468b      	mov	fp, r1
 800ba38:	2503      	movs	r5, #3
 800ba3a:	4eac      	ldr	r6, [pc, #688]	; (800bcec <_dtoa_r+0x61c>)
 800ba3c:	b957      	cbnz	r7, 800ba54 <_dtoa_r+0x384>
 800ba3e:	4642      	mov	r2, r8
 800ba40:	464b      	mov	r3, r9
 800ba42:	4650      	mov	r0, sl
 800ba44:	4659      	mov	r1, fp
 800ba46:	f7f4 ff09 	bl	800085c <__aeabi_ddiv>
 800ba4a:	4682      	mov	sl, r0
 800ba4c:	468b      	mov	fp, r1
 800ba4e:	e028      	b.n	800baa2 <_dtoa_r+0x3d2>
 800ba50:	2502      	movs	r5, #2
 800ba52:	e7f2      	b.n	800ba3a <_dtoa_r+0x36a>
 800ba54:	07f9      	lsls	r1, r7, #31
 800ba56:	d508      	bpl.n	800ba6a <_dtoa_r+0x39a>
 800ba58:	4640      	mov	r0, r8
 800ba5a:	4649      	mov	r1, r9
 800ba5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800ba60:	f7f4 fdd2 	bl	8000608 <__aeabi_dmul>
 800ba64:	3501      	adds	r5, #1
 800ba66:	4680      	mov	r8, r0
 800ba68:	4689      	mov	r9, r1
 800ba6a:	107f      	asrs	r7, r7, #1
 800ba6c:	3608      	adds	r6, #8
 800ba6e:	e7e5      	b.n	800ba3c <_dtoa_r+0x36c>
 800ba70:	f000 809b 	beq.w	800bbaa <_dtoa_r+0x4da>
 800ba74:	9b00      	ldr	r3, [sp, #0]
 800ba76:	4f9d      	ldr	r7, [pc, #628]	; (800bcec <_dtoa_r+0x61c>)
 800ba78:	425e      	negs	r6, r3
 800ba7a:	4b9b      	ldr	r3, [pc, #620]	; (800bce8 <_dtoa_r+0x618>)
 800ba7c:	f006 020f 	and.w	r2, r6, #15
 800ba80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba88:	ec51 0b19 	vmov	r0, r1, d9
 800ba8c:	f7f4 fdbc 	bl	8000608 <__aeabi_dmul>
 800ba90:	1136      	asrs	r6, r6, #4
 800ba92:	4682      	mov	sl, r0
 800ba94:	468b      	mov	fp, r1
 800ba96:	2300      	movs	r3, #0
 800ba98:	2502      	movs	r5, #2
 800ba9a:	2e00      	cmp	r6, #0
 800ba9c:	d17a      	bne.n	800bb94 <_dtoa_r+0x4c4>
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d1d3      	bne.n	800ba4a <_dtoa_r+0x37a>
 800baa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	f000 8082 	beq.w	800bbae <_dtoa_r+0x4de>
 800baaa:	4b91      	ldr	r3, [pc, #580]	; (800bcf0 <_dtoa_r+0x620>)
 800baac:	2200      	movs	r2, #0
 800baae:	4650      	mov	r0, sl
 800bab0:	4659      	mov	r1, fp
 800bab2:	f7f5 f81b 	bl	8000aec <__aeabi_dcmplt>
 800bab6:	2800      	cmp	r0, #0
 800bab8:	d079      	beq.n	800bbae <_dtoa_r+0x4de>
 800baba:	9b03      	ldr	r3, [sp, #12]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d076      	beq.n	800bbae <_dtoa_r+0x4de>
 800bac0:	9b02      	ldr	r3, [sp, #8]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	dd36      	ble.n	800bb34 <_dtoa_r+0x464>
 800bac6:	9b00      	ldr	r3, [sp, #0]
 800bac8:	4650      	mov	r0, sl
 800baca:	4659      	mov	r1, fp
 800bacc:	1e5f      	subs	r7, r3, #1
 800bace:	2200      	movs	r2, #0
 800bad0:	4b88      	ldr	r3, [pc, #544]	; (800bcf4 <_dtoa_r+0x624>)
 800bad2:	f7f4 fd99 	bl	8000608 <__aeabi_dmul>
 800bad6:	9e02      	ldr	r6, [sp, #8]
 800bad8:	4682      	mov	sl, r0
 800bada:	468b      	mov	fp, r1
 800badc:	3501      	adds	r5, #1
 800bade:	4628      	mov	r0, r5
 800bae0:	f7f4 fd28 	bl	8000534 <__aeabi_i2d>
 800bae4:	4652      	mov	r2, sl
 800bae6:	465b      	mov	r3, fp
 800bae8:	f7f4 fd8e 	bl	8000608 <__aeabi_dmul>
 800baec:	4b82      	ldr	r3, [pc, #520]	; (800bcf8 <_dtoa_r+0x628>)
 800baee:	2200      	movs	r2, #0
 800baf0:	f7f4 fbd4 	bl	800029c <__adddf3>
 800baf4:	46d0      	mov	r8, sl
 800baf6:	46d9      	mov	r9, fp
 800baf8:	4682      	mov	sl, r0
 800bafa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bafe:	2e00      	cmp	r6, #0
 800bb00:	d158      	bne.n	800bbb4 <_dtoa_r+0x4e4>
 800bb02:	4b7e      	ldr	r3, [pc, #504]	; (800bcfc <_dtoa_r+0x62c>)
 800bb04:	2200      	movs	r2, #0
 800bb06:	4640      	mov	r0, r8
 800bb08:	4649      	mov	r1, r9
 800bb0a:	f7f4 fbc5 	bl	8000298 <__aeabi_dsub>
 800bb0e:	4652      	mov	r2, sl
 800bb10:	465b      	mov	r3, fp
 800bb12:	4680      	mov	r8, r0
 800bb14:	4689      	mov	r9, r1
 800bb16:	f7f5 f807 	bl	8000b28 <__aeabi_dcmpgt>
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	f040 8295 	bne.w	800c04a <_dtoa_r+0x97a>
 800bb20:	4652      	mov	r2, sl
 800bb22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bb26:	4640      	mov	r0, r8
 800bb28:	4649      	mov	r1, r9
 800bb2a:	f7f4 ffdf 	bl	8000aec <__aeabi_dcmplt>
 800bb2e:	2800      	cmp	r0, #0
 800bb30:	f040 8289 	bne.w	800c046 <_dtoa_r+0x976>
 800bb34:	ec5b ab19 	vmov	sl, fp, d9
 800bb38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	f2c0 8148 	blt.w	800bdd0 <_dtoa_r+0x700>
 800bb40:	9a00      	ldr	r2, [sp, #0]
 800bb42:	2a0e      	cmp	r2, #14
 800bb44:	f300 8144 	bgt.w	800bdd0 <_dtoa_r+0x700>
 800bb48:	4b67      	ldr	r3, [pc, #412]	; (800bce8 <_dtoa_r+0x618>)
 800bb4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bb52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f280 80d5 	bge.w	800bd04 <_dtoa_r+0x634>
 800bb5a:	9b03      	ldr	r3, [sp, #12]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	f300 80d1 	bgt.w	800bd04 <_dtoa_r+0x634>
 800bb62:	f040 826f 	bne.w	800c044 <_dtoa_r+0x974>
 800bb66:	4b65      	ldr	r3, [pc, #404]	; (800bcfc <_dtoa_r+0x62c>)
 800bb68:	2200      	movs	r2, #0
 800bb6a:	4640      	mov	r0, r8
 800bb6c:	4649      	mov	r1, r9
 800bb6e:	f7f4 fd4b 	bl	8000608 <__aeabi_dmul>
 800bb72:	4652      	mov	r2, sl
 800bb74:	465b      	mov	r3, fp
 800bb76:	f7f4 ffcd 	bl	8000b14 <__aeabi_dcmpge>
 800bb7a:	9e03      	ldr	r6, [sp, #12]
 800bb7c:	4637      	mov	r7, r6
 800bb7e:	2800      	cmp	r0, #0
 800bb80:	f040 8245 	bne.w	800c00e <_dtoa_r+0x93e>
 800bb84:	9d01      	ldr	r5, [sp, #4]
 800bb86:	2331      	movs	r3, #49	; 0x31
 800bb88:	f805 3b01 	strb.w	r3, [r5], #1
 800bb8c:	9b00      	ldr	r3, [sp, #0]
 800bb8e:	3301      	adds	r3, #1
 800bb90:	9300      	str	r3, [sp, #0]
 800bb92:	e240      	b.n	800c016 <_dtoa_r+0x946>
 800bb94:	07f2      	lsls	r2, r6, #31
 800bb96:	d505      	bpl.n	800bba4 <_dtoa_r+0x4d4>
 800bb98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bb9c:	f7f4 fd34 	bl	8000608 <__aeabi_dmul>
 800bba0:	3501      	adds	r5, #1
 800bba2:	2301      	movs	r3, #1
 800bba4:	1076      	asrs	r6, r6, #1
 800bba6:	3708      	adds	r7, #8
 800bba8:	e777      	b.n	800ba9a <_dtoa_r+0x3ca>
 800bbaa:	2502      	movs	r5, #2
 800bbac:	e779      	b.n	800baa2 <_dtoa_r+0x3d2>
 800bbae:	9f00      	ldr	r7, [sp, #0]
 800bbb0:	9e03      	ldr	r6, [sp, #12]
 800bbb2:	e794      	b.n	800bade <_dtoa_r+0x40e>
 800bbb4:	9901      	ldr	r1, [sp, #4]
 800bbb6:	4b4c      	ldr	r3, [pc, #304]	; (800bce8 <_dtoa_r+0x618>)
 800bbb8:	4431      	add	r1, r6
 800bbba:	910d      	str	r1, [sp, #52]	; 0x34
 800bbbc:	9908      	ldr	r1, [sp, #32]
 800bbbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bbc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bbc6:	2900      	cmp	r1, #0
 800bbc8:	d043      	beq.n	800bc52 <_dtoa_r+0x582>
 800bbca:	494d      	ldr	r1, [pc, #308]	; (800bd00 <_dtoa_r+0x630>)
 800bbcc:	2000      	movs	r0, #0
 800bbce:	f7f4 fe45 	bl	800085c <__aeabi_ddiv>
 800bbd2:	4652      	mov	r2, sl
 800bbd4:	465b      	mov	r3, fp
 800bbd6:	f7f4 fb5f 	bl	8000298 <__aeabi_dsub>
 800bbda:	9d01      	ldr	r5, [sp, #4]
 800bbdc:	4682      	mov	sl, r0
 800bbde:	468b      	mov	fp, r1
 800bbe0:	4649      	mov	r1, r9
 800bbe2:	4640      	mov	r0, r8
 800bbe4:	f7f4 ffc0 	bl	8000b68 <__aeabi_d2iz>
 800bbe8:	4606      	mov	r6, r0
 800bbea:	f7f4 fca3 	bl	8000534 <__aeabi_i2d>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	4640      	mov	r0, r8
 800bbf4:	4649      	mov	r1, r9
 800bbf6:	f7f4 fb4f 	bl	8000298 <__aeabi_dsub>
 800bbfa:	3630      	adds	r6, #48	; 0x30
 800bbfc:	f805 6b01 	strb.w	r6, [r5], #1
 800bc00:	4652      	mov	r2, sl
 800bc02:	465b      	mov	r3, fp
 800bc04:	4680      	mov	r8, r0
 800bc06:	4689      	mov	r9, r1
 800bc08:	f7f4 ff70 	bl	8000aec <__aeabi_dcmplt>
 800bc0c:	2800      	cmp	r0, #0
 800bc0e:	d163      	bne.n	800bcd8 <_dtoa_r+0x608>
 800bc10:	4642      	mov	r2, r8
 800bc12:	464b      	mov	r3, r9
 800bc14:	4936      	ldr	r1, [pc, #216]	; (800bcf0 <_dtoa_r+0x620>)
 800bc16:	2000      	movs	r0, #0
 800bc18:	f7f4 fb3e 	bl	8000298 <__aeabi_dsub>
 800bc1c:	4652      	mov	r2, sl
 800bc1e:	465b      	mov	r3, fp
 800bc20:	f7f4 ff64 	bl	8000aec <__aeabi_dcmplt>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	f040 80b5 	bne.w	800bd94 <_dtoa_r+0x6c4>
 800bc2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc2c:	429d      	cmp	r5, r3
 800bc2e:	d081      	beq.n	800bb34 <_dtoa_r+0x464>
 800bc30:	4b30      	ldr	r3, [pc, #192]	; (800bcf4 <_dtoa_r+0x624>)
 800bc32:	2200      	movs	r2, #0
 800bc34:	4650      	mov	r0, sl
 800bc36:	4659      	mov	r1, fp
 800bc38:	f7f4 fce6 	bl	8000608 <__aeabi_dmul>
 800bc3c:	4b2d      	ldr	r3, [pc, #180]	; (800bcf4 <_dtoa_r+0x624>)
 800bc3e:	4682      	mov	sl, r0
 800bc40:	468b      	mov	fp, r1
 800bc42:	4640      	mov	r0, r8
 800bc44:	4649      	mov	r1, r9
 800bc46:	2200      	movs	r2, #0
 800bc48:	f7f4 fcde 	bl	8000608 <__aeabi_dmul>
 800bc4c:	4680      	mov	r8, r0
 800bc4e:	4689      	mov	r9, r1
 800bc50:	e7c6      	b.n	800bbe0 <_dtoa_r+0x510>
 800bc52:	4650      	mov	r0, sl
 800bc54:	4659      	mov	r1, fp
 800bc56:	f7f4 fcd7 	bl	8000608 <__aeabi_dmul>
 800bc5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc5c:	9d01      	ldr	r5, [sp, #4]
 800bc5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800bc60:	4682      	mov	sl, r0
 800bc62:	468b      	mov	fp, r1
 800bc64:	4649      	mov	r1, r9
 800bc66:	4640      	mov	r0, r8
 800bc68:	f7f4 ff7e 	bl	8000b68 <__aeabi_d2iz>
 800bc6c:	4606      	mov	r6, r0
 800bc6e:	f7f4 fc61 	bl	8000534 <__aeabi_i2d>
 800bc72:	3630      	adds	r6, #48	; 0x30
 800bc74:	4602      	mov	r2, r0
 800bc76:	460b      	mov	r3, r1
 800bc78:	4640      	mov	r0, r8
 800bc7a:	4649      	mov	r1, r9
 800bc7c:	f7f4 fb0c 	bl	8000298 <__aeabi_dsub>
 800bc80:	f805 6b01 	strb.w	r6, [r5], #1
 800bc84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bc86:	429d      	cmp	r5, r3
 800bc88:	4680      	mov	r8, r0
 800bc8a:	4689      	mov	r9, r1
 800bc8c:	f04f 0200 	mov.w	r2, #0
 800bc90:	d124      	bne.n	800bcdc <_dtoa_r+0x60c>
 800bc92:	4b1b      	ldr	r3, [pc, #108]	; (800bd00 <_dtoa_r+0x630>)
 800bc94:	4650      	mov	r0, sl
 800bc96:	4659      	mov	r1, fp
 800bc98:	f7f4 fb00 	bl	800029c <__adddf3>
 800bc9c:	4602      	mov	r2, r0
 800bc9e:	460b      	mov	r3, r1
 800bca0:	4640      	mov	r0, r8
 800bca2:	4649      	mov	r1, r9
 800bca4:	f7f4 ff40 	bl	8000b28 <__aeabi_dcmpgt>
 800bca8:	2800      	cmp	r0, #0
 800bcaa:	d173      	bne.n	800bd94 <_dtoa_r+0x6c4>
 800bcac:	4652      	mov	r2, sl
 800bcae:	465b      	mov	r3, fp
 800bcb0:	4913      	ldr	r1, [pc, #76]	; (800bd00 <_dtoa_r+0x630>)
 800bcb2:	2000      	movs	r0, #0
 800bcb4:	f7f4 faf0 	bl	8000298 <__aeabi_dsub>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	460b      	mov	r3, r1
 800bcbc:	4640      	mov	r0, r8
 800bcbe:	4649      	mov	r1, r9
 800bcc0:	f7f4 ff14 	bl	8000aec <__aeabi_dcmplt>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	f43f af35 	beq.w	800bb34 <_dtoa_r+0x464>
 800bcca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bccc:	1e6b      	subs	r3, r5, #1
 800bcce:	930f      	str	r3, [sp, #60]	; 0x3c
 800bcd0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bcd4:	2b30      	cmp	r3, #48	; 0x30
 800bcd6:	d0f8      	beq.n	800bcca <_dtoa_r+0x5fa>
 800bcd8:	9700      	str	r7, [sp, #0]
 800bcda:	e049      	b.n	800bd70 <_dtoa_r+0x6a0>
 800bcdc:	4b05      	ldr	r3, [pc, #20]	; (800bcf4 <_dtoa_r+0x624>)
 800bcde:	f7f4 fc93 	bl	8000608 <__aeabi_dmul>
 800bce2:	4680      	mov	r8, r0
 800bce4:	4689      	mov	r9, r1
 800bce6:	e7bd      	b.n	800bc64 <_dtoa_r+0x594>
 800bce8:	0800df58 	.word	0x0800df58
 800bcec:	0800df30 	.word	0x0800df30
 800bcf0:	3ff00000 	.word	0x3ff00000
 800bcf4:	40240000 	.word	0x40240000
 800bcf8:	401c0000 	.word	0x401c0000
 800bcfc:	40140000 	.word	0x40140000
 800bd00:	3fe00000 	.word	0x3fe00000
 800bd04:	9d01      	ldr	r5, [sp, #4]
 800bd06:	4656      	mov	r6, sl
 800bd08:	465f      	mov	r7, fp
 800bd0a:	4642      	mov	r2, r8
 800bd0c:	464b      	mov	r3, r9
 800bd0e:	4630      	mov	r0, r6
 800bd10:	4639      	mov	r1, r7
 800bd12:	f7f4 fda3 	bl	800085c <__aeabi_ddiv>
 800bd16:	f7f4 ff27 	bl	8000b68 <__aeabi_d2iz>
 800bd1a:	4682      	mov	sl, r0
 800bd1c:	f7f4 fc0a 	bl	8000534 <__aeabi_i2d>
 800bd20:	4642      	mov	r2, r8
 800bd22:	464b      	mov	r3, r9
 800bd24:	f7f4 fc70 	bl	8000608 <__aeabi_dmul>
 800bd28:	4602      	mov	r2, r0
 800bd2a:	460b      	mov	r3, r1
 800bd2c:	4630      	mov	r0, r6
 800bd2e:	4639      	mov	r1, r7
 800bd30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800bd34:	f7f4 fab0 	bl	8000298 <__aeabi_dsub>
 800bd38:	f805 6b01 	strb.w	r6, [r5], #1
 800bd3c:	9e01      	ldr	r6, [sp, #4]
 800bd3e:	9f03      	ldr	r7, [sp, #12]
 800bd40:	1bae      	subs	r6, r5, r6
 800bd42:	42b7      	cmp	r7, r6
 800bd44:	4602      	mov	r2, r0
 800bd46:	460b      	mov	r3, r1
 800bd48:	d135      	bne.n	800bdb6 <_dtoa_r+0x6e6>
 800bd4a:	f7f4 faa7 	bl	800029c <__adddf3>
 800bd4e:	4642      	mov	r2, r8
 800bd50:	464b      	mov	r3, r9
 800bd52:	4606      	mov	r6, r0
 800bd54:	460f      	mov	r7, r1
 800bd56:	f7f4 fee7 	bl	8000b28 <__aeabi_dcmpgt>
 800bd5a:	b9d0      	cbnz	r0, 800bd92 <_dtoa_r+0x6c2>
 800bd5c:	4642      	mov	r2, r8
 800bd5e:	464b      	mov	r3, r9
 800bd60:	4630      	mov	r0, r6
 800bd62:	4639      	mov	r1, r7
 800bd64:	f7f4 feb8 	bl	8000ad8 <__aeabi_dcmpeq>
 800bd68:	b110      	cbz	r0, 800bd70 <_dtoa_r+0x6a0>
 800bd6a:	f01a 0f01 	tst.w	sl, #1
 800bd6e:	d110      	bne.n	800bd92 <_dtoa_r+0x6c2>
 800bd70:	4620      	mov	r0, r4
 800bd72:	ee18 1a10 	vmov	r1, s16
 800bd76:	f000 faf7 	bl	800c368 <_Bfree>
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	9800      	ldr	r0, [sp, #0]
 800bd7e:	702b      	strb	r3, [r5, #0]
 800bd80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd82:	3001      	adds	r0, #1
 800bd84:	6018      	str	r0, [r3, #0]
 800bd86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	f43f acf1 	beq.w	800b770 <_dtoa_r+0xa0>
 800bd8e:	601d      	str	r5, [r3, #0]
 800bd90:	e4ee      	b.n	800b770 <_dtoa_r+0xa0>
 800bd92:	9f00      	ldr	r7, [sp, #0]
 800bd94:	462b      	mov	r3, r5
 800bd96:	461d      	mov	r5, r3
 800bd98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bd9c:	2a39      	cmp	r2, #57	; 0x39
 800bd9e:	d106      	bne.n	800bdae <_dtoa_r+0x6de>
 800bda0:	9a01      	ldr	r2, [sp, #4]
 800bda2:	429a      	cmp	r2, r3
 800bda4:	d1f7      	bne.n	800bd96 <_dtoa_r+0x6c6>
 800bda6:	9901      	ldr	r1, [sp, #4]
 800bda8:	2230      	movs	r2, #48	; 0x30
 800bdaa:	3701      	adds	r7, #1
 800bdac:	700a      	strb	r2, [r1, #0]
 800bdae:	781a      	ldrb	r2, [r3, #0]
 800bdb0:	3201      	adds	r2, #1
 800bdb2:	701a      	strb	r2, [r3, #0]
 800bdb4:	e790      	b.n	800bcd8 <_dtoa_r+0x608>
 800bdb6:	4ba6      	ldr	r3, [pc, #664]	; (800c050 <_dtoa_r+0x980>)
 800bdb8:	2200      	movs	r2, #0
 800bdba:	f7f4 fc25 	bl	8000608 <__aeabi_dmul>
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	4606      	mov	r6, r0
 800bdc4:	460f      	mov	r7, r1
 800bdc6:	f7f4 fe87 	bl	8000ad8 <__aeabi_dcmpeq>
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	d09d      	beq.n	800bd0a <_dtoa_r+0x63a>
 800bdce:	e7cf      	b.n	800bd70 <_dtoa_r+0x6a0>
 800bdd0:	9a08      	ldr	r2, [sp, #32]
 800bdd2:	2a00      	cmp	r2, #0
 800bdd4:	f000 80d7 	beq.w	800bf86 <_dtoa_r+0x8b6>
 800bdd8:	9a06      	ldr	r2, [sp, #24]
 800bdda:	2a01      	cmp	r2, #1
 800bddc:	f300 80ba 	bgt.w	800bf54 <_dtoa_r+0x884>
 800bde0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bde2:	2a00      	cmp	r2, #0
 800bde4:	f000 80b2 	beq.w	800bf4c <_dtoa_r+0x87c>
 800bde8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bdec:	9e07      	ldr	r6, [sp, #28]
 800bdee:	9d04      	ldr	r5, [sp, #16]
 800bdf0:	9a04      	ldr	r2, [sp, #16]
 800bdf2:	441a      	add	r2, r3
 800bdf4:	9204      	str	r2, [sp, #16]
 800bdf6:	9a05      	ldr	r2, [sp, #20]
 800bdf8:	2101      	movs	r1, #1
 800bdfa:	441a      	add	r2, r3
 800bdfc:	4620      	mov	r0, r4
 800bdfe:	9205      	str	r2, [sp, #20]
 800be00:	f000 fb6a 	bl	800c4d8 <__i2b>
 800be04:	4607      	mov	r7, r0
 800be06:	2d00      	cmp	r5, #0
 800be08:	dd0c      	ble.n	800be24 <_dtoa_r+0x754>
 800be0a:	9b05      	ldr	r3, [sp, #20]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	dd09      	ble.n	800be24 <_dtoa_r+0x754>
 800be10:	42ab      	cmp	r3, r5
 800be12:	9a04      	ldr	r2, [sp, #16]
 800be14:	bfa8      	it	ge
 800be16:	462b      	movge	r3, r5
 800be18:	1ad2      	subs	r2, r2, r3
 800be1a:	9204      	str	r2, [sp, #16]
 800be1c:	9a05      	ldr	r2, [sp, #20]
 800be1e:	1aed      	subs	r5, r5, r3
 800be20:	1ad3      	subs	r3, r2, r3
 800be22:	9305      	str	r3, [sp, #20]
 800be24:	9b07      	ldr	r3, [sp, #28]
 800be26:	b31b      	cbz	r3, 800be70 <_dtoa_r+0x7a0>
 800be28:	9b08      	ldr	r3, [sp, #32]
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	f000 80af 	beq.w	800bf8e <_dtoa_r+0x8be>
 800be30:	2e00      	cmp	r6, #0
 800be32:	dd13      	ble.n	800be5c <_dtoa_r+0x78c>
 800be34:	4639      	mov	r1, r7
 800be36:	4632      	mov	r2, r6
 800be38:	4620      	mov	r0, r4
 800be3a:	f000 fc0d 	bl	800c658 <__pow5mult>
 800be3e:	ee18 2a10 	vmov	r2, s16
 800be42:	4601      	mov	r1, r0
 800be44:	4607      	mov	r7, r0
 800be46:	4620      	mov	r0, r4
 800be48:	f000 fb5c 	bl	800c504 <__multiply>
 800be4c:	ee18 1a10 	vmov	r1, s16
 800be50:	4680      	mov	r8, r0
 800be52:	4620      	mov	r0, r4
 800be54:	f000 fa88 	bl	800c368 <_Bfree>
 800be58:	ee08 8a10 	vmov	s16, r8
 800be5c:	9b07      	ldr	r3, [sp, #28]
 800be5e:	1b9a      	subs	r2, r3, r6
 800be60:	d006      	beq.n	800be70 <_dtoa_r+0x7a0>
 800be62:	ee18 1a10 	vmov	r1, s16
 800be66:	4620      	mov	r0, r4
 800be68:	f000 fbf6 	bl	800c658 <__pow5mult>
 800be6c:	ee08 0a10 	vmov	s16, r0
 800be70:	2101      	movs	r1, #1
 800be72:	4620      	mov	r0, r4
 800be74:	f000 fb30 	bl	800c4d8 <__i2b>
 800be78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	4606      	mov	r6, r0
 800be7e:	f340 8088 	ble.w	800bf92 <_dtoa_r+0x8c2>
 800be82:	461a      	mov	r2, r3
 800be84:	4601      	mov	r1, r0
 800be86:	4620      	mov	r0, r4
 800be88:	f000 fbe6 	bl	800c658 <__pow5mult>
 800be8c:	9b06      	ldr	r3, [sp, #24]
 800be8e:	2b01      	cmp	r3, #1
 800be90:	4606      	mov	r6, r0
 800be92:	f340 8081 	ble.w	800bf98 <_dtoa_r+0x8c8>
 800be96:	f04f 0800 	mov.w	r8, #0
 800be9a:	6933      	ldr	r3, [r6, #16]
 800be9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bea0:	6918      	ldr	r0, [r3, #16]
 800bea2:	f000 fac9 	bl	800c438 <__hi0bits>
 800bea6:	f1c0 0020 	rsb	r0, r0, #32
 800beaa:	9b05      	ldr	r3, [sp, #20]
 800beac:	4418      	add	r0, r3
 800beae:	f010 001f 	ands.w	r0, r0, #31
 800beb2:	f000 8092 	beq.w	800bfda <_dtoa_r+0x90a>
 800beb6:	f1c0 0320 	rsb	r3, r0, #32
 800beba:	2b04      	cmp	r3, #4
 800bebc:	f340 808a 	ble.w	800bfd4 <_dtoa_r+0x904>
 800bec0:	f1c0 001c 	rsb	r0, r0, #28
 800bec4:	9b04      	ldr	r3, [sp, #16]
 800bec6:	4403      	add	r3, r0
 800bec8:	9304      	str	r3, [sp, #16]
 800beca:	9b05      	ldr	r3, [sp, #20]
 800becc:	4403      	add	r3, r0
 800bece:	4405      	add	r5, r0
 800bed0:	9305      	str	r3, [sp, #20]
 800bed2:	9b04      	ldr	r3, [sp, #16]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	dd07      	ble.n	800bee8 <_dtoa_r+0x818>
 800bed8:	ee18 1a10 	vmov	r1, s16
 800bedc:	461a      	mov	r2, r3
 800bede:	4620      	mov	r0, r4
 800bee0:	f000 fc14 	bl	800c70c <__lshift>
 800bee4:	ee08 0a10 	vmov	s16, r0
 800bee8:	9b05      	ldr	r3, [sp, #20]
 800beea:	2b00      	cmp	r3, #0
 800beec:	dd05      	ble.n	800befa <_dtoa_r+0x82a>
 800beee:	4631      	mov	r1, r6
 800bef0:	461a      	mov	r2, r3
 800bef2:	4620      	mov	r0, r4
 800bef4:	f000 fc0a 	bl	800c70c <__lshift>
 800bef8:	4606      	mov	r6, r0
 800befa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800befc:	2b00      	cmp	r3, #0
 800befe:	d06e      	beq.n	800bfde <_dtoa_r+0x90e>
 800bf00:	ee18 0a10 	vmov	r0, s16
 800bf04:	4631      	mov	r1, r6
 800bf06:	f000 fc71 	bl	800c7ec <__mcmp>
 800bf0a:	2800      	cmp	r0, #0
 800bf0c:	da67      	bge.n	800bfde <_dtoa_r+0x90e>
 800bf0e:	9b00      	ldr	r3, [sp, #0]
 800bf10:	3b01      	subs	r3, #1
 800bf12:	ee18 1a10 	vmov	r1, s16
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	220a      	movs	r2, #10
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	f000 fa45 	bl	800c3ac <__multadd>
 800bf22:	9b08      	ldr	r3, [sp, #32]
 800bf24:	ee08 0a10 	vmov	s16, r0
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	f000 81b1 	beq.w	800c290 <_dtoa_r+0xbc0>
 800bf2e:	2300      	movs	r3, #0
 800bf30:	4639      	mov	r1, r7
 800bf32:	220a      	movs	r2, #10
 800bf34:	4620      	mov	r0, r4
 800bf36:	f000 fa39 	bl	800c3ac <__multadd>
 800bf3a:	9b02      	ldr	r3, [sp, #8]
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	4607      	mov	r7, r0
 800bf40:	f300 808e 	bgt.w	800c060 <_dtoa_r+0x990>
 800bf44:	9b06      	ldr	r3, [sp, #24]
 800bf46:	2b02      	cmp	r3, #2
 800bf48:	dc51      	bgt.n	800bfee <_dtoa_r+0x91e>
 800bf4a:	e089      	b.n	800c060 <_dtoa_r+0x990>
 800bf4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bf4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bf52:	e74b      	b.n	800bdec <_dtoa_r+0x71c>
 800bf54:	9b03      	ldr	r3, [sp, #12]
 800bf56:	1e5e      	subs	r6, r3, #1
 800bf58:	9b07      	ldr	r3, [sp, #28]
 800bf5a:	42b3      	cmp	r3, r6
 800bf5c:	bfbf      	itttt	lt
 800bf5e:	9b07      	ldrlt	r3, [sp, #28]
 800bf60:	9607      	strlt	r6, [sp, #28]
 800bf62:	1af2      	sublt	r2, r6, r3
 800bf64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bf66:	bfb6      	itet	lt
 800bf68:	189b      	addlt	r3, r3, r2
 800bf6a:	1b9e      	subge	r6, r3, r6
 800bf6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bf6e:	9b03      	ldr	r3, [sp, #12]
 800bf70:	bfb8      	it	lt
 800bf72:	2600      	movlt	r6, #0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	bfb7      	itett	lt
 800bf78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bf7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bf80:	1a9d      	sublt	r5, r3, r2
 800bf82:	2300      	movlt	r3, #0
 800bf84:	e734      	b.n	800bdf0 <_dtoa_r+0x720>
 800bf86:	9e07      	ldr	r6, [sp, #28]
 800bf88:	9d04      	ldr	r5, [sp, #16]
 800bf8a:	9f08      	ldr	r7, [sp, #32]
 800bf8c:	e73b      	b.n	800be06 <_dtoa_r+0x736>
 800bf8e:	9a07      	ldr	r2, [sp, #28]
 800bf90:	e767      	b.n	800be62 <_dtoa_r+0x792>
 800bf92:	9b06      	ldr	r3, [sp, #24]
 800bf94:	2b01      	cmp	r3, #1
 800bf96:	dc18      	bgt.n	800bfca <_dtoa_r+0x8fa>
 800bf98:	f1ba 0f00 	cmp.w	sl, #0
 800bf9c:	d115      	bne.n	800bfca <_dtoa_r+0x8fa>
 800bf9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bfa2:	b993      	cbnz	r3, 800bfca <_dtoa_r+0x8fa>
 800bfa4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bfa8:	0d1b      	lsrs	r3, r3, #20
 800bfaa:	051b      	lsls	r3, r3, #20
 800bfac:	b183      	cbz	r3, 800bfd0 <_dtoa_r+0x900>
 800bfae:	9b04      	ldr	r3, [sp, #16]
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	9304      	str	r3, [sp, #16]
 800bfb4:	9b05      	ldr	r3, [sp, #20]
 800bfb6:	3301      	adds	r3, #1
 800bfb8:	9305      	str	r3, [sp, #20]
 800bfba:	f04f 0801 	mov.w	r8, #1
 800bfbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f47f af6a 	bne.w	800be9a <_dtoa_r+0x7ca>
 800bfc6:	2001      	movs	r0, #1
 800bfc8:	e76f      	b.n	800beaa <_dtoa_r+0x7da>
 800bfca:	f04f 0800 	mov.w	r8, #0
 800bfce:	e7f6      	b.n	800bfbe <_dtoa_r+0x8ee>
 800bfd0:	4698      	mov	r8, r3
 800bfd2:	e7f4      	b.n	800bfbe <_dtoa_r+0x8ee>
 800bfd4:	f43f af7d 	beq.w	800bed2 <_dtoa_r+0x802>
 800bfd8:	4618      	mov	r0, r3
 800bfda:	301c      	adds	r0, #28
 800bfdc:	e772      	b.n	800bec4 <_dtoa_r+0x7f4>
 800bfde:	9b03      	ldr	r3, [sp, #12]
 800bfe0:	2b00      	cmp	r3, #0
 800bfe2:	dc37      	bgt.n	800c054 <_dtoa_r+0x984>
 800bfe4:	9b06      	ldr	r3, [sp, #24]
 800bfe6:	2b02      	cmp	r3, #2
 800bfe8:	dd34      	ble.n	800c054 <_dtoa_r+0x984>
 800bfea:	9b03      	ldr	r3, [sp, #12]
 800bfec:	9302      	str	r3, [sp, #8]
 800bfee:	9b02      	ldr	r3, [sp, #8]
 800bff0:	b96b      	cbnz	r3, 800c00e <_dtoa_r+0x93e>
 800bff2:	4631      	mov	r1, r6
 800bff4:	2205      	movs	r2, #5
 800bff6:	4620      	mov	r0, r4
 800bff8:	f000 f9d8 	bl	800c3ac <__multadd>
 800bffc:	4601      	mov	r1, r0
 800bffe:	4606      	mov	r6, r0
 800c000:	ee18 0a10 	vmov	r0, s16
 800c004:	f000 fbf2 	bl	800c7ec <__mcmp>
 800c008:	2800      	cmp	r0, #0
 800c00a:	f73f adbb 	bgt.w	800bb84 <_dtoa_r+0x4b4>
 800c00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c010:	9d01      	ldr	r5, [sp, #4]
 800c012:	43db      	mvns	r3, r3
 800c014:	9300      	str	r3, [sp, #0]
 800c016:	f04f 0800 	mov.w	r8, #0
 800c01a:	4631      	mov	r1, r6
 800c01c:	4620      	mov	r0, r4
 800c01e:	f000 f9a3 	bl	800c368 <_Bfree>
 800c022:	2f00      	cmp	r7, #0
 800c024:	f43f aea4 	beq.w	800bd70 <_dtoa_r+0x6a0>
 800c028:	f1b8 0f00 	cmp.w	r8, #0
 800c02c:	d005      	beq.n	800c03a <_dtoa_r+0x96a>
 800c02e:	45b8      	cmp	r8, r7
 800c030:	d003      	beq.n	800c03a <_dtoa_r+0x96a>
 800c032:	4641      	mov	r1, r8
 800c034:	4620      	mov	r0, r4
 800c036:	f000 f997 	bl	800c368 <_Bfree>
 800c03a:	4639      	mov	r1, r7
 800c03c:	4620      	mov	r0, r4
 800c03e:	f000 f993 	bl	800c368 <_Bfree>
 800c042:	e695      	b.n	800bd70 <_dtoa_r+0x6a0>
 800c044:	2600      	movs	r6, #0
 800c046:	4637      	mov	r7, r6
 800c048:	e7e1      	b.n	800c00e <_dtoa_r+0x93e>
 800c04a:	9700      	str	r7, [sp, #0]
 800c04c:	4637      	mov	r7, r6
 800c04e:	e599      	b.n	800bb84 <_dtoa_r+0x4b4>
 800c050:	40240000 	.word	0x40240000
 800c054:	9b08      	ldr	r3, [sp, #32]
 800c056:	2b00      	cmp	r3, #0
 800c058:	f000 80ca 	beq.w	800c1f0 <_dtoa_r+0xb20>
 800c05c:	9b03      	ldr	r3, [sp, #12]
 800c05e:	9302      	str	r3, [sp, #8]
 800c060:	2d00      	cmp	r5, #0
 800c062:	dd05      	ble.n	800c070 <_dtoa_r+0x9a0>
 800c064:	4639      	mov	r1, r7
 800c066:	462a      	mov	r2, r5
 800c068:	4620      	mov	r0, r4
 800c06a:	f000 fb4f 	bl	800c70c <__lshift>
 800c06e:	4607      	mov	r7, r0
 800c070:	f1b8 0f00 	cmp.w	r8, #0
 800c074:	d05b      	beq.n	800c12e <_dtoa_r+0xa5e>
 800c076:	6879      	ldr	r1, [r7, #4]
 800c078:	4620      	mov	r0, r4
 800c07a:	f000 f935 	bl	800c2e8 <_Balloc>
 800c07e:	4605      	mov	r5, r0
 800c080:	b928      	cbnz	r0, 800c08e <_dtoa_r+0x9be>
 800c082:	4b87      	ldr	r3, [pc, #540]	; (800c2a0 <_dtoa_r+0xbd0>)
 800c084:	4602      	mov	r2, r0
 800c086:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c08a:	f7ff bb3b 	b.w	800b704 <_dtoa_r+0x34>
 800c08e:	693a      	ldr	r2, [r7, #16]
 800c090:	3202      	adds	r2, #2
 800c092:	0092      	lsls	r2, r2, #2
 800c094:	f107 010c 	add.w	r1, r7, #12
 800c098:	300c      	adds	r0, #12
 800c09a:	f7fe fce5 	bl	800aa68 <memcpy>
 800c09e:	2201      	movs	r2, #1
 800c0a0:	4629      	mov	r1, r5
 800c0a2:	4620      	mov	r0, r4
 800c0a4:	f000 fb32 	bl	800c70c <__lshift>
 800c0a8:	9b01      	ldr	r3, [sp, #4]
 800c0aa:	f103 0901 	add.w	r9, r3, #1
 800c0ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	9305      	str	r3, [sp, #20]
 800c0b6:	f00a 0301 	and.w	r3, sl, #1
 800c0ba:	46b8      	mov	r8, r7
 800c0bc:	9304      	str	r3, [sp, #16]
 800c0be:	4607      	mov	r7, r0
 800c0c0:	4631      	mov	r1, r6
 800c0c2:	ee18 0a10 	vmov	r0, s16
 800c0c6:	f7ff fa75 	bl	800b5b4 <quorem>
 800c0ca:	4641      	mov	r1, r8
 800c0cc:	9002      	str	r0, [sp, #8]
 800c0ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c0d2:	ee18 0a10 	vmov	r0, s16
 800c0d6:	f000 fb89 	bl	800c7ec <__mcmp>
 800c0da:	463a      	mov	r2, r7
 800c0dc:	9003      	str	r0, [sp, #12]
 800c0de:	4631      	mov	r1, r6
 800c0e0:	4620      	mov	r0, r4
 800c0e2:	f000 fb9f 	bl	800c824 <__mdiff>
 800c0e6:	68c2      	ldr	r2, [r0, #12]
 800c0e8:	f109 3bff 	add.w	fp, r9, #4294967295
 800c0ec:	4605      	mov	r5, r0
 800c0ee:	bb02      	cbnz	r2, 800c132 <_dtoa_r+0xa62>
 800c0f0:	4601      	mov	r1, r0
 800c0f2:	ee18 0a10 	vmov	r0, s16
 800c0f6:	f000 fb79 	bl	800c7ec <__mcmp>
 800c0fa:	4602      	mov	r2, r0
 800c0fc:	4629      	mov	r1, r5
 800c0fe:	4620      	mov	r0, r4
 800c100:	9207      	str	r2, [sp, #28]
 800c102:	f000 f931 	bl	800c368 <_Bfree>
 800c106:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c10a:	ea43 0102 	orr.w	r1, r3, r2
 800c10e:	9b04      	ldr	r3, [sp, #16]
 800c110:	430b      	orrs	r3, r1
 800c112:	464d      	mov	r5, r9
 800c114:	d10f      	bne.n	800c136 <_dtoa_r+0xa66>
 800c116:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c11a:	d02a      	beq.n	800c172 <_dtoa_r+0xaa2>
 800c11c:	9b03      	ldr	r3, [sp, #12]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	dd02      	ble.n	800c128 <_dtoa_r+0xa58>
 800c122:	9b02      	ldr	r3, [sp, #8]
 800c124:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c128:	f88b a000 	strb.w	sl, [fp]
 800c12c:	e775      	b.n	800c01a <_dtoa_r+0x94a>
 800c12e:	4638      	mov	r0, r7
 800c130:	e7ba      	b.n	800c0a8 <_dtoa_r+0x9d8>
 800c132:	2201      	movs	r2, #1
 800c134:	e7e2      	b.n	800c0fc <_dtoa_r+0xa2c>
 800c136:	9b03      	ldr	r3, [sp, #12]
 800c138:	2b00      	cmp	r3, #0
 800c13a:	db04      	blt.n	800c146 <_dtoa_r+0xa76>
 800c13c:	9906      	ldr	r1, [sp, #24]
 800c13e:	430b      	orrs	r3, r1
 800c140:	9904      	ldr	r1, [sp, #16]
 800c142:	430b      	orrs	r3, r1
 800c144:	d122      	bne.n	800c18c <_dtoa_r+0xabc>
 800c146:	2a00      	cmp	r2, #0
 800c148:	ddee      	ble.n	800c128 <_dtoa_r+0xa58>
 800c14a:	ee18 1a10 	vmov	r1, s16
 800c14e:	2201      	movs	r2, #1
 800c150:	4620      	mov	r0, r4
 800c152:	f000 fadb 	bl	800c70c <__lshift>
 800c156:	4631      	mov	r1, r6
 800c158:	ee08 0a10 	vmov	s16, r0
 800c15c:	f000 fb46 	bl	800c7ec <__mcmp>
 800c160:	2800      	cmp	r0, #0
 800c162:	dc03      	bgt.n	800c16c <_dtoa_r+0xa9c>
 800c164:	d1e0      	bne.n	800c128 <_dtoa_r+0xa58>
 800c166:	f01a 0f01 	tst.w	sl, #1
 800c16a:	d0dd      	beq.n	800c128 <_dtoa_r+0xa58>
 800c16c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c170:	d1d7      	bne.n	800c122 <_dtoa_r+0xa52>
 800c172:	2339      	movs	r3, #57	; 0x39
 800c174:	f88b 3000 	strb.w	r3, [fp]
 800c178:	462b      	mov	r3, r5
 800c17a:	461d      	mov	r5, r3
 800c17c:	3b01      	subs	r3, #1
 800c17e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c182:	2a39      	cmp	r2, #57	; 0x39
 800c184:	d071      	beq.n	800c26a <_dtoa_r+0xb9a>
 800c186:	3201      	adds	r2, #1
 800c188:	701a      	strb	r2, [r3, #0]
 800c18a:	e746      	b.n	800c01a <_dtoa_r+0x94a>
 800c18c:	2a00      	cmp	r2, #0
 800c18e:	dd07      	ble.n	800c1a0 <_dtoa_r+0xad0>
 800c190:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c194:	d0ed      	beq.n	800c172 <_dtoa_r+0xaa2>
 800c196:	f10a 0301 	add.w	r3, sl, #1
 800c19a:	f88b 3000 	strb.w	r3, [fp]
 800c19e:	e73c      	b.n	800c01a <_dtoa_r+0x94a>
 800c1a0:	9b05      	ldr	r3, [sp, #20]
 800c1a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c1a6:	4599      	cmp	r9, r3
 800c1a8:	d047      	beq.n	800c23a <_dtoa_r+0xb6a>
 800c1aa:	ee18 1a10 	vmov	r1, s16
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	220a      	movs	r2, #10
 800c1b2:	4620      	mov	r0, r4
 800c1b4:	f000 f8fa 	bl	800c3ac <__multadd>
 800c1b8:	45b8      	cmp	r8, r7
 800c1ba:	ee08 0a10 	vmov	s16, r0
 800c1be:	f04f 0300 	mov.w	r3, #0
 800c1c2:	f04f 020a 	mov.w	r2, #10
 800c1c6:	4641      	mov	r1, r8
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	d106      	bne.n	800c1da <_dtoa_r+0xb0a>
 800c1cc:	f000 f8ee 	bl	800c3ac <__multadd>
 800c1d0:	4680      	mov	r8, r0
 800c1d2:	4607      	mov	r7, r0
 800c1d4:	f109 0901 	add.w	r9, r9, #1
 800c1d8:	e772      	b.n	800c0c0 <_dtoa_r+0x9f0>
 800c1da:	f000 f8e7 	bl	800c3ac <__multadd>
 800c1de:	4639      	mov	r1, r7
 800c1e0:	4680      	mov	r8, r0
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	220a      	movs	r2, #10
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f000 f8e0 	bl	800c3ac <__multadd>
 800c1ec:	4607      	mov	r7, r0
 800c1ee:	e7f1      	b.n	800c1d4 <_dtoa_r+0xb04>
 800c1f0:	9b03      	ldr	r3, [sp, #12]
 800c1f2:	9302      	str	r3, [sp, #8]
 800c1f4:	9d01      	ldr	r5, [sp, #4]
 800c1f6:	ee18 0a10 	vmov	r0, s16
 800c1fa:	4631      	mov	r1, r6
 800c1fc:	f7ff f9da 	bl	800b5b4 <quorem>
 800c200:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c204:	9b01      	ldr	r3, [sp, #4]
 800c206:	f805 ab01 	strb.w	sl, [r5], #1
 800c20a:	1aea      	subs	r2, r5, r3
 800c20c:	9b02      	ldr	r3, [sp, #8]
 800c20e:	4293      	cmp	r3, r2
 800c210:	dd09      	ble.n	800c226 <_dtoa_r+0xb56>
 800c212:	ee18 1a10 	vmov	r1, s16
 800c216:	2300      	movs	r3, #0
 800c218:	220a      	movs	r2, #10
 800c21a:	4620      	mov	r0, r4
 800c21c:	f000 f8c6 	bl	800c3ac <__multadd>
 800c220:	ee08 0a10 	vmov	s16, r0
 800c224:	e7e7      	b.n	800c1f6 <_dtoa_r+0xb26>
 800c226:	9b02      	ldr	r3, [sp, #8]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	bfc8      	it	gt
 800c22c:	461d      	movgt	r5, r3
 800c22e:	9b01      	ldr	r3, [sp, #4]
 800c230:	bfd8      	it	le
 800c232:	2501      	movle	r5, #1
 800c234:	441d      	add	r5, r3
 800c236:	f04f 0800 	mov.w	r8, #0
 800c23a:	ee18 1a10 	vmov	r1, s16
 800c23e:	2201      	movs	r2, #1
 800c240:	4620      	mov	r0, r4
 800c242:	f000 fa63 	bl	800c70c <__lshift>
 800c246:	4631      	mov	r1, r6
 800c248:	ee08 0a10 	vmov	s16, r0
 800c24c:	f000 face 	bl	800c7ec <__mcmp>
 800c250:	2800      	cmp	r0, #0
 800c252:	dc91      	bgt.n	800c178 <_dtoa_r+0xaa8>
 800c254:	d102      	bne.n	800c25c <_dtoa_r+0xb8c>
 800c256:	f01a 0f01 	tst.w	sl, #1
 800c25a:	d18d      	bne.n	800c178 <_dtoa_r+0xaa8>
 800c25c:	462b      	mov	r3, r5
 800c25e:	461d      	mov	r5, r3
 800c260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c264:	2a30      	cmp	r2, #48	; 0x30
 800c266:	d0fa      	beq.n	800c25e <_dtoa_r+0xb8e>
 800c268:	e6d7      	b.n	800c01a <_dtoa_r+0x94a>
 800c26a:	9a01      	ldr	r2, [sp, #4]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d184      	bne.n	800c17a <_dtoa_r+0xaaa>
 800c270:	9b00      	ldr	r3, [sp, #0]
 800c272:	3301      	adds	r3, #1
 800c274:	9300      	str	r3, [sp, #0]
 800c276:	2331      	movs	r3, #49	; 0x31
 800c278:	7013      	strb	r3, [r2, #0]
 800c27a:	e6ce      	b.n	800c01a <_dtoa_r+0x94a>
 800c27c:	4b09      	ldr	r3, [pc, #36]	; (800c2a4 <_dtoa_r+0xbd4>)
 800c27e:	f7ff ba95 	b.w	800b7ac <_dtoa_r+0xdc>
 800c282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c284:	2b00      	cmp	r3, #0
 800c286:	f47f aa6e 	bne.w	800b766 <_dtoa_r+0x96>
 800c28a:	4b07      	ldr	r3, [pc, #28]	; (800c2a8 <_dtoa_r+0xbd8>)
 800c28c:	f7ff ba8e 	b.w	800b7ac <_dtoa_r+0xdc>
 800c290:	9b02      	ldr	r3, [sp, #8]
 800c292:	2b00      	cmp	r3, #0
 800c294:	dcae      	bgt.n	800c1f4 <_dtoa_r+0xb24>
 800c296:	9b06      	ldr	r3, [sp, #24]
 800c298:	2b02      	cmp	r3, #2
 800c29a:	f73f aea8 	bgt.w	800bfee <_dtoa_r+0x91e>
 800c29e:	e7a9      	b.n	800c1f4 <_dtoa_r+0xb24>
 800c2a0:	0800debd 	.word	0x0800debd
 800c2a4:	0800dc80 	.word	0x0800dc80
 800c2a8:	0800de55 	.word	0x0800de55

0800c2ac <fiprintf>:
 800c2ac:	b40e      	push	{r1, r2, r3}
 800c2ae:	b503      	push	{r0, r1, lr}
 800c2b0:	4601      	mov	r1, r0
 800c2b2:	ab03      	add	r3, sp, #12
 800c2b4:	4805      	ldr	r0, [pc, #20]	; (800c2cc <fiprintf+0x20>)
 800c2b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2ba:	6800      	ldr	r0, [r0, #0]
 800c2bc:	9301      	str	r3, [sp, #4]
 800c2be:	f000 fe13 	bl	800cee8 <_vfiprintf_r>
 800c2c2:	b002      	add	sp, #8
 800c2c4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2c8:	b003      	add	sp, #12
 800c2ca:	4770      	bx	lr
 800c2cc:	2000011c 	.word	0x2000011c

0800c2d0 <_localeconv_r>:
 800c2d0:	4800      	ldr	r0, [pc, #0]	; (800c2d4 <_localeconv_r+0x4>)
 800c2d2:	4770      	bx	lr
 800c2d4:	20000270 	.word	0x20000270

0800c2d8 <malloc>:
 800c2d8:	4b02      	ldr	r3, [pc, #8]	; (800c2e4 <malloc+0xc>)
 800c2da:	4601      	mov	r1, r0
 800c2dc:	6818      	ldr	r0, [r3, #0]
 800c2de:	f000 bc09 	b.w	800caf4 <_malloc_r>
 800c2e2:	bf00      	nop
 800c2e4:	2000011c 	.word	0x2000011c

0800c2e8 <_Balloc>:
 800c2e8:	b570      	push	{r4, r5, r6, lr}
 800c2ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c2ec:	4604      	mov	r4, r0
 800c2ee:	460d      	mov	r5, r1
 800c2f0:	b976      	cbnz	r6, 800c310 <_Balloc+0x28>
 800c2f2:	2010      	movs	r0, #16
 800c2f4:	f7ff fff0 	bl	800c2d8 <malloc>
 800c2f8:	4602      	mov	r2, r0
 800c2fa:	6260      	str	r0, [r4, #36]	; 0x24
 800c2fc:	b920      	cbnz	r0, 800c308 <_Balloc+0x20>
 800c2fe:	4b18      	ldr	r3, [pc, #96]	; (800c360 <_Balloc+0x78>)
 800c300:	4818      	ldr	r0, [pc, #96]	; (800c364 <_Balloc+0x7c>)
 800c302:	2166      	movs	r1, #102	; 0x66
 800c304:	f7ff f938 	bl	800b578 <__assert_func>
 800c308:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c30c:	6006      	str	r6, [r0, #0]
 800c30e:	60c6      	str	r6, [r0, #12]
 800c310:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c312:	68f3      	ldr	r3, [r6, #12]
 800c314:	b183      	cbz	r3, 800c338 <_Balloc+0x50>
 800c316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c318:	68db      	ldr	r3, [r3, #12]
 800c31a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c31e:	b9b8      	cbnz	r0, 800c350 <_Balloc+0x68>
 800c320:	2101      	movs	r1, #1
 800c322:	fa01 f605 	lsl.w	r6, r1, r5
 800c326:	1d72      	adds	r2, r6, #5
 800c328:	0092      	lsls	r2, r2, #2
 800c32a:	4620      	mov	r0, r4
 800c32c:	f000 fb60 	bl	800c9f0 <_calloc_r>
 800c330:	b160      	cbz	r0, 800c34c <_Balloc+0x64>
 800c332:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c336:	e00e      	b.n	800c356 <_Balloc+0x6e>
 800c338:	2221      	movs	r2, #33	; 0x21
 800c33a:	2104      	movs	r1, #4
 800c33c:	4620      	mov	r0, r4
 800c33e:	f000 fb57 	bl	800c9f0 <_calloc_r>
 800c342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c344:	60f0      	str	r0, [r6, #12]
 800c346:	68db      	ldr	r3, [r3, #12]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d1e4      	bne.n	800c316 <_Balloc+0x2e>
 800c34c:	2000      	movs	r0, #0
 800c34e:	bd70      	pop	{r4, r5, r6, pc}
 800c350:	6802      	ldr	r2, [r0, #0]
 800c352:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c356:	2300      	movs	r3, #0
 800c358:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c35c:	e7f7      	b.n	800c34e <_Balloc+0x66>
 800c35e:	bf00      	nop
 800c360:	0800dca4 	.word	0x0800dca4
 800c364:	0800dece 	.word	0x0800dece

0800c368 <_Bfree>:
 800c368:	b570      	push	{r4, r5, r6, lr}
 800c36a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c36c:	4605      	mov	r5, r0
 800c36e:	460c      	mov	r4, r1
 800c370:	b976      	cbnz	r6, 800c390 <_Bfree+0x28>
 800c372:	2010      	movs	r0, #16
 800c374:	f7ff ffb0 	bl	800c2d8 <malloc>
 800c378:	4602      	mov	r2, r0
 800c37a:	6268      	str	r0, [r5, #36]	; 0x24
 800c37c:	b920      	cbnz	r0, 800c388 <_Bfree+0x20>
 800c37e:	4b09      	ldr	r3, [pc, #36]	; (800c3a4 <_Bfree+0x3c>)
 800c380:	4809      	ldr	r0, [pc, #36]	; (800c3a8 <_Bfree+0x40>)
 800c382:	218a      	movs	r1, #138	; 0x8a
 800c384:	f7ff f8f8 	bl	800b578 <__assert_func>
 800c388:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c38c:	6006      	str	r6, [r0, #0]
 800c38e:	60c6      	str	r6, [r0, #12]
 800c390:	b13c      	cbz	r4, 800c3a2 <_Bfree+0x3a>
 800c392:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c394:	6862      	ldr	r2, [r4, #4]
 800c396:	68db      	ldr	r3, [r3, #12]
 800c398:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c39c:	6021      	str	r1, [r4, #0]
 800c39e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c3a2:	bd70      	pop	{r4, r5, r6, pc}
 800c3a4:	0800dca4 	.word	0x0800dca4
 800c3a8:	0800dece 	.word	0x0800dece

0800c3ac <__multadd>:
 800c3ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3b0:	690d      	ldr	r5, [r1, #16]
 800c3b2:	4607      	mov	r7, r0
 800c3b4:	460c      	mov	r4, r1
 800c3b6:	461e      	mov	r6, r3
 800c3b8:	f101 0c14 	add.w	ip, r1, #20
 800c3bc:	2000      	movs	r0, #0
 800c3be:	f8dc 3000 	ldr.w	r3, [ip]
 800c3c2:	b299      	uxth	r1, r3
 800c3c4:	fb02 6101 	mla	r1, r2, r1, r6
 800c3c8:	0c1e      	lsrs	r6, r3, #16
 800c3ca:	0c0b      	lsrs	r3, r1, #16
 800c3cc:	fb02 3306 	mla	r3, r2, r6, r3
 800c3d0:	b289      	uxth	r1, r1
 800c3d2:	3001      	adds	r0, #1
 800c3d4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c3d8:	4285      	cmp	r5, r0
 800c3da:	f84c 1b04 	str.w	r1, [ip], #4
 800c3de:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c3e2:	dcec      	bgt.n	800c3be <__multadd+0x12>
 800c3e4:	b30e      	cbz	r6, 800c42a <__multadd+0x7e>
 800c3e6:	68a3      	ldr	r3, [r4, #8]
 800c3e8:	42ab      	cmp	r3, r5
 800c3ea:	dc19      	bgt.n	800c420 <__multadd+0x74>
 800c3ec:	6861      	ldr	r1, [r4, #4]
 800c3ee:	4638      	mov	r0, r7
 800c3f0:	3101      	adds	r1, #1
 800c3f2:	f7ff ff79 	bl	800c2e8 <_Balloc>
 800c3f6:	4680      	mov	r8, r0
 800c3f8:	b928      	cbnz	r0, 800c406 <__multadd+0x5a>
 800c3fa:	4602      	mov	r2, r0
 800c3fc:	4b0c      	ldr	r3, [pc, #48]	; (800c430 <__multadd+0x84>)
 800c3fe:	480d      	ldr	r0, [pc, #52]	; (800c434 <__multadd+0x88>)
 800c400:	21b5      	movs	r1, #181	; 0xb5
 800c402:	f7ff f8b9 	bl	800b578 <__assert_func>
 800c406:	6922      	ldr	r2, [r4, #16]
 800c408:	3202      	adds	r2, #2
 800c40a:	f104 010c 	add.w	r1, r4, #12
 800c40e:	0092      	lsls	r2, r2, #2
 800c410:	300c      	adds	r0, #12
 800c412:	f7fe fb29 	bl	800aa68 <memcpy>
 800c416:	4621      	mov	r1, r4
 800c418:	4638      	mov	r0, r7
 800c41a:	f7ff ffa5 	bl	800c368 <_Bfree>
 800c41e:	4644      	mov	r4, r8
 800c420:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c424:	3501      	adds	r5, #1
 800c426:	615e      	str	r6, [r3, #20]
 800c428:	6125      	str	r5, [r4, #16]
 800c42a:	4620      	mov	r0, r4
 800c42c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c430:	0800debd 	.word	0x0800debd
 800c434:	0800dece 	.word	0x0800dece

0800c438 <__hi0bits>:
 800c438:	0c03      	lsrs	r3, r0, #16
 800c43a:	041b      	lsls	r3, r3, #16
 800c43c:	b9d3      	cbnz	r3, 800c474 <__hi0bits+0x3c>
 800c43e:	0400      	lsls	r0, r0, #16
 800c440:	2310      	movs	r3, #16
 800c442:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c446:	bf04      	itt	eq
 800c448:	0200      	lsleq	r0, r0, #8
 800c44a:	3308      	addeq	r3, #8
 800c44c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c450:	bf04      	itt	eq
 800c452:	0100      	lsleq	r0, r0, #4
 800c454:	3304      	addeq	r3, #4
 800c456:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c45a:	bf04      	itt	eq
 800c45c:	0080      	lsleq	r0, r0, #2
 800c45e:	3302      	addeq	r3, #2
 800c460:	2800      	cmp	r0, #0
 800c462:	db05      	blt.n	800c470 <__hi0bits+0x38>
 800c464:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c468:	f103 0301 	add.w	r3, r3, #1
 800c46c:	bf08      	it	eq
 800c46e:	2320      	moveq	r3, #32
 800c470:	4618      	mov	r0, r3
 800c472:	4770      	bx	lr
 800c474:	2300      	movs	r3, #0
 800c476:	e7e4      	b.n	800c442 <__hi0bits+0xa>

0800c478 <__lo0bits>:
 800c478:	6803      	ldr	r3, [r0, #0]
 800c47a:	f013 0207 	ands.w	r2, r3, #7
 800c47e:	4601      	mov	r1, r0
 800c480:	d00b      	beq.n	800c49a <__lo0bits+0x22>
 800c482:	07da      	lsls	r2, r3, #31
 800c484:	d423      	bmi.n	800c4ce <__lo0bits+0x56>
 800c486:	0798      	lsls	r0, r3, #30
 800c488:	bf49      	itett	mi
 800c48a:	085b      	lsrmi	r3, r3, #1
 800c48c:	089b      	lsrpl	r3, r3, #2
 800c48e:	2001      	movmi	r0, #1
 800c490:	600b      	strmi	r3, [r1, #0]
 800c492:	bf5c      	itt	pl
 800c494:	600b      	strpl	r3, [r1, #0]
 800c496:	2002      	movpl	r0, #2
 800c498:	4770      	bx	lr
 800c49a:	b298      	uxth	r0, r3
 800c49c:	b9a8      	cbnz	r0, 800c4ca <__lo0bits+0x52>
 800c49e:	0c1b      	lsrs	r3, r3, #16
 800c4a0:	2010      	movs	r0, #16
 800c4a2:	b2da      	uxtb	r2, r3
 800c4a4:	b90a      	cbnz	r2, 800c4aa <__lo0bits+0x32>
 800c4a6:	3008      	adds	r0, #8
 800c4a8:	0a1b      	lsrs	r3, r3, #8
 800c4aa:	071a      	lsls	r2, r3, #28
 800c4ac:	bf04      	itt	eq
 800c4ae:	091b      	lsreq	r3, r3, #4
 800c4b0:	3004      	addeq	r0, #4
 800c4b2:	079a      	lsls	r2, r3, #30
 800c4b4:	bf04      	itt	eq
 800c4b6:	089b      	lsreq	r3, r3, #2
 800c4b8:	3002      	addeq	r0, #2
 800c4ba:	07da      	lsls	r2, r3, #31
 800c4bc:	d403      	bmi.n	800c4c6 <__lo0bits+0x4e>
 800c4be:	085b      	lsrs	r3, r3, #1
 800c4c0:	f100 0001 	add.w	r0, r0, #1
 800c4c4:	d005      	beq.n	800c4d2 <__lo0bits+0x5a>
 800c4c6:	600b      	str	r3, [r1, #0]
 800c4c8:	4770      	bx	lr
 800c4ca:	4610      	mov	r0, r2
 800c4cc:	e7e9      	b.n	800c4a2 <__lo0bits+0x2a>
 800c4ce:	2000      	movs	r0, #0
 800c4d0:	4770      	bx	lr
 800c4d2:	2020      	movs	r0, #32
 800c4d4:	4770      	bx	lr
	...

0800c4d8 <__i2b>:
 800c4d8:	b510      	push	{r4, lr}
 800c4da:	460c      	mov	r4, r1
 800c4dc:	2101      	movs	r1, #1
 800c4de:	f7ff ff03 	bl	800c2e8 <_Balloc>
 800c4e2:	4602      	mov	r2, r0
 800c4e4:	b928      	cbnz	r0, 800c4f2 <__i2b+0x1a>
 800c4e6:	4b05      	ldr	r3, [pc, #20]	; (800c4fc <__i2b+0x24>)
 800c4e8:	4805      	ldr	r0, [pc, #20]	; (800c500 <__i2b+0x28>)
 800c4ea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c4ee:	f7ff f843 	bl	800b578 <__assert_func>
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	6144      	str	r4, [r0, #20]
 800c4f6:	6103      	str	r3, [r0, #16]
 800c4f8:	bd10      	pop	{r4, pc}
 800c4fa:	bf00      	nop
 800c4fc:	0800debd 	.word	0x0800debd
 800c500:	0800dece 	.word	0x0800dece

0800c504 <__multiply>:
 800c504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c508:	4691      	mov	r9, r2
 800c50a:	690a      	ldr	r2, [r1, #16]
 800c50c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c510:	429a      	cmp	r2, r3
 800c512:	bfb8      	it	lt
 800c514:	460b      	movlt	r3, r1
 800c516:	460c      	mov	r4, r1
 800c518:	bfbc      	itt	lt
 800c51a:	464c      	movlt	r4, r9
 800c51c:	4699      	movlt	r9, r3
 800c51e:	6927      	ldr	r7, [r4, #16]
 800c520:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c524:	68a3      	ldr	r3, [r4, #8]
 800c526:	6861      	ldr	r1, [r4, #4]
 800c528:	eb07 060a 	add.w	r6, r7, sl
 800c52c:	42b3      	cmp	r3, r6
 800c52e:	b085      	sub	sp, #20
 800c530:	bfb8      	it	lt
 800c532:	3101      	addlt	r1, #1
 800c534:	f7ff fed8 	bl	800c2e8 <_Balloc>
 800c538:	b930      	cbnz	r0, 800c548 <__multiply+0x44>
 800c53a:	4602      	mov	r2, r0
 800c53c:	4b44      	ldr	r3, [pc, #272]	; (800c650 <__multiply+0x14c>)
 800c53e:	4845      	ldr	r0, [pc, #276]	; (800c654 <__multiply+0x150>)
 800c540:	f240 115d 	movw	r1, #349	; 0x15d
 800c544:	f7ff f818 	bl	800b578 <__assert_func>
 800c548:	f100 0514 	add.w	r5, r0, #20
 800c54c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c550:	462b      	mov	r3, r5
 800c552:	2200      	movs	r2, #0
 800c554:	4543      	cmp	r3, r8
 800c556:	d321      	bcc.n	800c59c <__multiply+0x98>
 800c558:	f104 0314 	add.w	r3, r4, #20
 800c55c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c560:	f109 0314 	add.w	r3, r9, #20
 800c564:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c568:	9202      	str	r2, [sp, #8]
 800c56a:	1b3a      	subs	r2, r7, r4
 800c56c:	3a15      	subs	r2, #21
 800c56e:	f022 0203 	bic.w	r2, r2, #3
 800c572:	3204      	adds	r2, #4
 800c574:	f104 0115 	add.w	r1, r4, #21
 800c578:	428f      	cmp	r7, r1
 800c57a:	bf38      	it	cc
 800c57c:	2204      	movcc	r2, #4
 800c57e:	9201      	str	r2, [sp, #4]
 800c580:	9a02      	ldr	r2, [sp, #8]
 800c582:	9303      	str	r3, [sp, #12]
 800c584:	429a      	cmp	r2, r3
 800c586:	d80c      	bhi.n	800c5a2 <__multiply+0x9e>
 800c588:	2e00      	cmp	r6, #0
 800c58a:	dd03      	ble.n	800c594 <__multiply+0x90>
 800c58c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c590:	2b00      	cmp	r3, #0
 800c592:	d05a      	beq.n	800c64a <__multiply+0x146>
 800c594:	6106      	str	r6, [r0, #16]
 800c596:	b005      	add	sp, #20
 800c598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c59c:	f843 2b04 	str.w	r2, [r3], #4
 800c5a0:	e7d8      	b.n	800c554 <__multiply+0x50>
 800c5a2:	f8b3 a000 	ldrh.w	sl, [r3]
 800c5a6:	f1ba 0f00 	cmp.w	sl, #0
 800c5aa:	d024      	beq.n	800c5f6 <__multiply+0xf2>
 800c5ac:	f104 0e14 	add.w	lr, r4, #20
 800c5b0:	46a9      	mov	r9, r5
 800c5b2:	f04f 0c00 	mov.w	ip, #0
 800c5b6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c5ba:	f8d9 1000 	ldr.w	r1, [r9]
 800c5be:	fa1f fb82 	uxth.w	fp, r2
 800c5c2:	b289      	uxth	r1, r1
 800c5c4:	fb0a 110b 	mla	r1, sl, fp, r1
 800c5c8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c5cc:	f8d9 2000 	ldr.w	r2, [r9]
 800c5d0:	4461      	add	r1, ip
 800c5d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c5d6:	fb0a c20b 	mla	r2, sl, fp, ip
 800c5da:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c5de:	b289      	uxth	r1, r1
 800c5e0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c5e4:	4577      	cmp	r7, lr
 800c5e6:	f849 1b04 	str.w	r1, [r9], #4
 800c5ea:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c5ee:	d8e2      	bhi.n	800c5b6 <__multiply+0xb2>
 800c5f0:	9a01      	ldr	r2, [sp, #4]
 800c5f2:	f845 c002 	str.w	ip, [r5, r2]
 800c5f6:	9a03      	ldr	r2, [sp, #12]
 800c5f8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c5fc:	3304      	adds	r3, #4
 800c5fe:	f1b9 0f00 	cmp.w	r9, #0
 800c602:	d020      	beq.n	800c646 <__multiply+0x142>
 800c604:	6829      	ldr	r1, [r5, #0]
 800c606:	f104 0c14 	add.w	ip, r4, #20
 800c60a:	46ae      	mov	lr, r5
 800c60c:	f04f 0a00 	mov.w	sl, #0
 800c610:	f8bc b000 	ldrh.w	fp, [ip]
 800c614:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c618:	fb09 220b 	mla	r2, r9, fp, r2
 800c61c:	4492      	add	sl, r2
 800c61e:	b289      	uxth	r1, r1
 800c620:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c624:	f84e 1b04 	str.w	r1, [lr], #4
 800c628:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c62c:	f8be 1000 	ldrh.w	r1, [lr]
 800c630:	0c12      	lsrs	r2, r2, #16
 800c632:	fb09 1102 	mla	r1, r9, r2, r1
 800c636:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c63a:	4567      	cmp	r7, ip
 800c63c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c640:	d8e6      	bhi.n	800c610 <__multiply+0x10c>
 800c642:	9a01      	ldr	r2, [sp, #4]
 800c644:	50a9      	str	r1, [r5, r2]
 800c646:	3504      	adds	r5, #4
 800c648:	e79a      	b.n	800c580 <__multiply+0x7c>
 800c64a:	3e01      	subs	r6, #1
 800c64c:	e79c      	b.n	800c588 <__multiply+0x84>
 800c64e:	bf00      	nop
 800c650:	0800debd 	.word	0x0800debd
 800c654:	0800dece 	.word	0x0800dece

0800c658 <__pow5mult>:
 800c658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c65c:	4615      	mov	r5, r2
 800c65e:	f012 0203 	ands.w	r2, r2, #3
 800c662:	4606      	mov	r6, r0
 800c664:	460f      	mov	r7, r1
 800c666:	d007      	beq.n	800c678 <__pow5mult+0x20>
 800c668:	4c25      	ldr	r4, [pc, #148]	; (800c700 <__pow5mult+0xa8>)
 800c66a:	3a01      	subs	r2, #1
 800c66c:	2300      	movs	r3, #0
 800c66e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c672:	f7ff fe9b 	bl	800c3ac <__multadd>
 800c676:	4607      	mov	r7, r0
 800c678:	10ad      	asrs	r5, r5, #2
 800c67a:	d03d      	beq.n	800c6f8 <__pow5mult+0xa0>
 800c67c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c67e:	b97c      	cbnz	r4, 800c6a0 <__pow5mult+0x48>
 800c680:	2010      	movs	r0, #16
 800c682:	f7ff fe29 	bl	800c2d8 <malloc>
 800c686:	4602      	mov	r2, r0
 800c688:	6270      	str	r0, [r6, #36]	; 0x24
 800c68a:	b928      	cbnz	r0, 800c698 <__pow5mult+0x40>
 800c68c:	4b1d      	ldr	r3, [pc, #116]	; (800c704 <__pow5mult+0xac>)
 800c68e:	481e      	ldr	r0, [pc, #120]	; (800c708 <__pow5mult+0xb0>)
 800c690:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c694:	f7fe ff70 	bl	800b578 <__assert_func>
 800c698:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c69c:	6004      	str	r4, [r0, #0]
 800c69e:	60c4      	str	r4, [r0, #12]
 800c6a0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c6a4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c6a8:	b94c      	cbnz	r4, 800c6be <__pow5mult+0x66>
 800c6aa:	f240 2171 	movw	r1, #625	; 0x271
 800c6ae:	4630      	mov	r0, r6
 800c6b0:	f7ff ff12 	bl	800c4d8 <__i2b>
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c6ba:	4604      	mov	r4, r0
 800c6bc:	6003      	str	r3, [r0, #0]
 800c6be:	f04f 0900 	mov.w	r9, #0
 800c6c2:	07eb      	lsls	r3, r5, #31
 800c6c4:	d50a      	bpl.n	800c6dc <__pow5mult+0x84>
 800c6c6:	4639      	mov	r1, r7
 800c6c8:	4622      	mov	r2, r4
 800c6ca:	4630      	mov	r0, r6
 800c6cc:	f7ff ff1a 	bl	800c504 <__multiply>
 800c6d0:	4639      	mov	r1, r7
 800c6d2:	4680      	mov	r8, r0
 800c6d4:	4630      	mov	r0, r6
 800c6d6:	f7ff fe47 	bl	800c368 <_Bfree>
 800c6da:	4647      	mov	r7, r8
 800c6dc:	106d      	asrs	r5, r5, #1
 800c6de:	d00b      	beq.n	800c6f8 <__pow5mult+0xa0>
 800c6e0:	6820      	ldr	r0, [r4, #0]
 800c6e2:	b938      	cbnz	r0, 800c6f4 <__pow5mult+0x9c>
 800c6e4:	4622      	mov	r2, r4
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	4630      	mov	r0, r6
 800c6ea:	f7ff ff0b 	bl	800c504 <__multiply>
 800c6ee:	6020      	str	r0, [r4, #0]
 800c6f0:	f8c0 9000 	str.w	r9, [r0]
 800c6f4:	4604      	mov	r4, r0
 800c6f6:	e7e4      	b.n	800c6c2 <__pow5mult+0x6a>
 800c6f8:	4638      	mov	r0, r7
 800c6fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6fe:	bf00      	nop
 800c700:	0800e020 	.word	0x0800e020
 800c704:	0800dca4 	.word	0x0800dca4
 800c708:	0800dece 	.word	0x0800dece

0800c70c <__lshift>:
 800c70c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c710:	460c      	mov	r4, r1
 800c712:	6849      	ldr	r1, [r1, #4]
 800c714:	6923      	ldr	r3, [r4, #16]
 800c716:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c71a:	68a3      	ldr	r3, [r4, #8]
 800c71c:	4607      	mov	r7, r0
 800c71e:	4691      	mov	r9, r2
 800c720:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c724:	f108 0601 	add.w	r6, r8, #1
 800c728:	42b3      	cmp	r3, r6
 800c72a:	db0b      	blt.n	800c744 <__lshift+0x38>
 800c72c:	4638      	mov	r0, r7
 800c72e:	f7ff fddb 	bl	800c2e8 <_Balloc>
 800c732:	4605      	mov	r5, r0
 800c734:	b948      	cbnz	r0, 800c74a <__lshift+0x3e>
 800c736:	4602      	mov	r2, r0
 800c738:	4b2a      	ldr	r3, [pc, #168]	; (800c7e4 <__lshift+0xd8>)
 800c73a:	482b      	ldr	r0, [pc, #172]	; (800c7e8 <__lshift+0xdc>)
 800c73c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c740:	f7fe ff1a 	bl	800b578 <__assert_func>
 800c744:	3101      	adds	r1, #1
 800c746:	005b      	lsls	r3, r3, #1
 800c748:	e7ee      	b.n	800c728 <__lshift+0x1c>
 800c74a:	2300      	movs	r3, #0
 800c74c:	f100 0114 	add.w	r1, r0, #20
 800c750:	f100 0210 	add.w	r2, r0, #16
 800c754:	4618      	mov	r0, r3
 800c756:	4553      	cmp	r3, sl
 800c758:	db37      	blt.n	800c7ca <__lshift+0xbe>
 800c75a:	6920      	ldr	r0, [r4, #16]
 800c75c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c760:	f104 0314 	add.w	r3, r4, #20
 800c764:	f019 091f 	ands.w	r9, r9, #31
 800c768:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c76c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c770:	d02f      	beq.n	800c7d2 <__lshift+0xc6>
 800c772:	f1c9 0e20 	rsb	lr, r9, #32
 800c776:	468a      	mov	sl, r1
 800c778:	f04f 0c00 	mov.w	ip, #0
 800c77c:	681a      	ldr	r2, [r3, #0]
 800c77e:	fa02 f209 	lsl.w	r2, r2, r9
 800c782:	ea42 020c 	orr.w	r2, r2, ip
 800c786:	f84a 2b04 	str.w	r2, [sl], #4
 800c78a:	f853 2b04 	ldr.w	r2, [r3], #4
 800c78e:	4298      	cmp	r0, r3
 800c790:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c794:	d8f2      	bhi.n	800c77c <__lshift+0x70>
 800c796:	1b03      	subs	r3, r0, r4
 800c798:	3b15      	subs	r3, #21
 800c79a:	f023 0303 	bic.w	r3, r3, #3
 800c79e:	3304      	adds	r3, #4
 800c7a0:	f104 0215 	add.w	r2, r4, #21
 800c7a4:	4290      	cmp	r0, r2
 800c7a6:	bf38      	it	cc
 800c7a8:	2304      	movcc	r3, #4
 800c7aa:	f841 c003 	str.w	ip, [r1, r3]
 800c7ae:	f1bc 0f00 	cmp.w	ip, #0
 800c7b2:	d001      	beq.n	800c7b8 <__lshift+0xac>
 800c7b4:	f108 0602 	add.w	r6, r8, #2
 800c7b8:	3e01      	subs	r6, #1
 800c7ba:	4638      	mov	r0, r7
 800c7bc:	612e      	str	r6, [r5, #16]
 800c7be:	4621      	mov	r1, r4
 800c7c0:	f7ff fdd2 	bl	800c368 <_Bfree>
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ca:	f842 0f04 	str.w	r0, [r2, #4]!
 800c7ce:	3301      	adds	r3, #1
 800c7d0:	e7c1      	b.n	800c756 <__lshift+0x4a>
 800c7d2:	3904      	subs	r1, #4
 800c7d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7d8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c7dc:	4298      	cmp	r0, r3
 800c7de:	d8f9      	bhi.n	800c7d4 <__lshift+0xc8>
 800c7e0:	e7ea      	b.n	800c7b8 <__lshift+0xac>
 800c7e2:	bf00      	nop
 800c7e4:	0800debd 	.word	0x0800debd
 800c7e8:	0800dece 	.word	0x0800dece

0800c7ec <__mcmp>:
 800c7ec:	b530      	push	{r4, r5, lr}
 800c7ee:	6902      	ldr	r2, [r0, #16]
 800c7f0:	690c      	ldr	r4, [r1, #16]
 800c7f2:	1b12      	subs	r2, r2, r4
 800c7f4:	d10e      	bne.n	800c814 <__mcmp+0x28>
 800c7f6:	f100 0314 	add.w	r3, r0, #20
 800c7fa:	3114      	adds	r1, #20
 800c7fc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c800:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c804:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c808:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c80c:	42a5      	cmp	r5, r4
 800c80e:	d003      	beq.n	800c818 <__mcmp+0x2c>
 800c810:	d305      	bcc.n	800c81e <__mcmp+0x32>
 800c812:	2201      	movs	r2, #1
 800c814:	4610      	mov	r0, r2
 800c816:	bd30      	pop	{r4, r5, pc}
 800c818:	4283      	cmp	r3, r0
 800c81a:	d3f3      	bcc.n	800c804 <__mcmp+0x18>
 800c81c:	e7fa      	b.n	800c814 <__mcmp+0x28>
 800c81e:	f04f 32ff 	mov.w	r2, #4294967295
 800c822:	e7f7      	b.n	800c814 <__mcmp+0x28>

0800c824 <__mdiff>:
 800c824:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c828:	460c      	mov	r4, r1
 800c82a:	4606      	mov	r6, r0
 800c82c:	4611      	mov	r1, r2
 800c82e:	4620      	mov	r0, r4
 800c830:	4690      	mov	r8, r2
 800c832:	f7ff ffdb 	bl	800c7ec <__mcmp>
 800c836:	1e05      	subs	r5, r0, #0
 800c838:	d110      	bne.n	800c85c <__mdiff+0x38>
 800c83a:	4629      	mov	r1, r5
 800c83c:	4630      	mov	r0, r6
 800c83e:	f7ff fd53 	bl	800c2e8 <_Balloc>
 800c842:	b930      	cbnz	r0, 800c852 <__mdiff+0x2e>
 800c844:	4b3a      	ldr	r3, [pc, #232]	; (800c930 <__mdiff+0x10c>)
 800c846:	4602      	mov	r2, r0
 800c848:	f240 2132 	movw	r1, #562	; 0x232
 800c84c:	4839      	ldr	r0, [pc, #228]	; (800c934 <__mdiff+0x110>)
 800c84e:	f7fe fe93 	bl	800b578 <__assert_func>
 800c852:	2301      	movs	r3, #1
 800c854:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c858:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c85c:	bfa4      	itt	ge
 800c85e:	4643      	movge	r3, r8
 800c860:	46a0      	movge	r8, r4
 800c862:	4630      	mov	r0, r6
 800c864:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c868:	bfa6      	itte	ge
 800c86a:	461c      	movge	r4, r3
 800c86c:	2500      	movge	r5, #0
 800c86e:	2501      	movlt	r5, #1
 800c870:	f7ff fd3a 	bl	800c2e8 <_Balloc>
 800c874:	b920      	cbnz	r0, 800c880 <__mdiff+0x5c>
 800c876:	4b2e      	ldr	r3, [pc, #184]	; (800c930 <__mdiff+0x10c>)
 800c878:	4602      	mov	r2, r0
 800c87a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c87e:	e7e5      	b.n	800c84c <__mdiff+0x28>
 800c880:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c884:	6926      	ldr	r6, [r4, #16]
 800c886:	60c5      	str	r5, [r0, #12]
 800c888:	f104 0914 	add.w	r9, r4, #20
 800c88c:	f108 0514 	add.w	r5, r8, #20
 800c890:	f100 0e14 	add.w	lr, r0, #20
 800c894:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c898:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c89c:	f108 0210 	add.w	r2, r8, #16
 800c8a0:	46f2      	mov	sl, lr
 800c8a2:	2100      	movs	r1, #0
 800c8a4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c8a8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c8ac:	fa1f f883 	uxth.w	r8, r3
 800c8b0:	fa11 f18b 	uxtah	r1, r1, fp
 800c8b4:	0c1b      	lsrs	r3, r3, #16
 800c8b6:	eba1 0808 	sub.w	r8, r1, r8
 800c8ba:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c8be:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c8c2:	fa1f f888 	uxth.w	r8, r8
 800c8c6:	1419      	asrs	r1, r3, #16
 800c8c8:	454e      	cmp	r6, r9
 800c8ca:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c8ce:	f84a 3b04 	str.w	r3, [sl], #4
 800c8d2:	d8e7      	bhi.n	800c8a4 <__mdiff+0x80>
 800c8d4:	1b33      	subs	r3, r6, r4
 800c8d6:	3b15      	subs	r3, #21
 800c8d8:	f023 0303 	bic.w	r3, r3, #3
 800c8dc:	3304      	adds	r3, #4
 800c8de:	3415      	adds	r4, #21
 800c8e0:	42a6      	cmp	r6, r4
 800c8e2:	bf38      	it	cc
 800c8e4:	2304      	movcc	r3, #4
 800c8e6:	441d      	add	r5, r3
 800c8e8:	4473      	add	r3, lr
 800c8ea:	469e      	mov	lr, r3
 800c8ec:	462e      	mov	r6, r5
 800c8ee:	4566      	cmp	r6, ip
 800c8f0:	d30e      	bcc.n	800c910 <__mdiff+0xec>
 800c8f2:	f10c 0203 	add.w	r2, ip, #3
 800c8f6:	1b52      	subs	r2, r2, r5
 800c8f8:	f022 0203 	bic.w	r2, r2, #3
 800c8fc:	3d03      	subs	r5, #3
 800c8fe:	45ac      	cmp	ip, r5
 800c900:	bf38      	it	cc
 800c902:	2200      	movcc	r2, #0
 800c904:	441a      	add	r2, r3
 800c906:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c90a:	b17b      	cbz	r3, 800c92c <__mdiff+0x108>
 800c90c:	6107      	str	r7, [r0, #16]
 800c90e:	e7a3      	b.n	800c858 <__mdiff+0x34>
 800c910:	f856 8b04 	ldr.w	r8, [r6], #4
 800c914:	fa11 f288 	uxtah	r2, r1, r8
 800c918:	1414      	asrs	r4, r2, #16
 800c91a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c91e:	b292      	uxth	r2, r2
 800c920:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c924:	f84e 2b04 	str.w	r2, [lr], #4
 800c928:	1421      	asrs	r1, r4, #16
 800c92a:	e7e0      	b.n	800c8ee <__mdiff+0xca>
 800c92c:	3f01      	subs	r7, #1
 800c92e:	e7ea      	b.n	800c906 <__mdiff+0xe2>
 800c930:	0800debd 	.word	0x0800debd
 800c934:	0800dece 	.word	0x0800dece

0800c938 <__d2b>:
 800c938:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c93c:	4689      	mov	r9, r1
 800c93e:	2101      	movs	r1, #1
 800c940:	ec57 6b10 	vmov	r6, r7, d0
 800c944:	4690      	mov	r8, r2
 800c946:	f7ff fccf 	bl	800c2e8 <_Balloc>
 800c94a:	4604      	mov	r4, r0
 800c94c:	b930      	cbnz	r0, 800c95c <__d2b+0x24>
 800c94e:	4602      	mov	r2, r0
 800c950:	4b25      	ldr	r3, [pc, #148]	; (800c9e8 <__d2b+0xb0>)
 800c952:	4826      	ldr	r0, [pc, #152]	; (800c9ec <__d2b+0xb4>)
 800c954:	f240 310a 	movw	r1, #778	; 0x30a
 800c958:	f7fe fe0e 	bl	800b578 <__assert_func>
 800c95c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c960:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c964:	bb35      	cbnz	r5, 800c9b4 <__d2b+0x7c>
 800c966:	2e00      	cmp	r6, #0
 800c968:	9301      	str	r3, [sp, #4]
 800c96a:	d028      	beq.n	800c9be <__d2b+0x86>
 800c96c:	4668      	mov	r0, sp
 800c96e:	9600      	str	r6, [sp, #0]
 800c970:	f7ff fd82 	bl	800c478 <__lo0bits>
 800c974:	9900      	ldr	r1, [sp, #0]
 800c976:	b300      	cbz	r0, 800c9ba <__d2b+0x82>
 800c978:	9a01      	ldr	r2, [sp, #4]
 800c97a:	f1c0 0320 	rsb	r3, r0, #32
 800c97e:	fa02 f303 	lsl.w	r3, r2, r3
 800c982:	430b      	orrs	r3, r1
 800c984:	40c2      	lsrs	r2, r0
 800c986:	6163      	str	r3, [r4, #20]
 800c988:	9201      	str	r2, [sp, #4]
 800c98a:	9b01      	ldr	r3, [sp, #4]
 800c98c:	61a3      	str	r3, [r4, #24]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	bf14      	ite	ne
 800c992:	2202      	movne	r2, #2
 800c994:	2201      	moveq	r2, #1
 800c996:	6122      	str	r2, [r4, #16]
 800c998:	b1d5      	cbz	r5, 800c9d0 <__d2b+0x98>
 800c99a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c99e:	4405      	add	r5, r0
 800c9a0:	f8c9 5000 	str.w	r5, [r9]
 800c9a4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c9a8:	f8c8 0000 	str.w	r0, [r8]
 800c9ac:	4620      	mov	r0, r4
 800c9ae:	b003      	add	sp, #12
 800c9b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c9b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c9b8:	e7d5      	b.n	800c966 <__d2b+0x2e>
 800c9ba:	6161      	str	r1, [r4, #20]
 800c9bc:	e7e5      	b.n	800c98a <__d2b+0x52>
 800c9be:	a801      	add	r0, sp, #4
 800c9c0:	f7ff fd5a 	bl	800c478 <__lo0bits>
 800c9c4:	9b01      	ldr	r3, [sp, #4]
 800c9c6:	6163      	str	r3, [r4, #20]
 800c9c8:	2201      	movs	r2, #1
 800c9ca:	6122      	str	r2, [r4, #16]
 800c9cc:	3020      	adds	r0, #32
 800c9ce:	e7e3      	b.n	800c998 <__d2b+0x60>
 800c9d0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c9d4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c9d8:	f8c9 0000 	str.w	r0, [r9]
 800c9dc:	6918      	ldr	r0, [r3, #16]
 800c9de:	f7ff fd2b 	bl	800c438 <__hi0bits>
 800c9e2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c9e6:	e7df      	b.n	800c9a8 <__d2b+0x70>
 800c9e8:	0800debd 	.word	0x0800debd
 800c9ec:	0800dece 	.word	0x0800dece

0800c9f0 <_calloc_r>:
 800c9f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9f2:	fba1 2402 	umull	r2, r4, r1, r2
 800c9f6:	b94c      	cbnz	r4, 800ca0c <_calloc_r+0x1c>
 800c9f8:	4611      	mov	r1, r2
 800c9fa:	9201      	str	r2, [sp, #4]
 800c9fc:	f000 f87a 	bl	800caf4 <_malloc_r>
 800ca00:	9a01      	ldr	r2, [sp, #4]
 800ca02:	4605      	mov	r5, r0
 800ca04:	b930      	cbnz	r0, 800ca14 <_calloc_r+0x24>
 800ca06:	4628      	mov	r0, r5
 800ca08:	b003      	add	sp, #12
 800ca0a:	bd30      	pop	{r4, r5, pc}
 800ca0c:	220c      	movs	r2, #12
 800ca0e:	6002      	str	r2, [r0, #0]
 800ca10:	2500      	movs	r5, #0
 800ca12:	e7f8      	b.n	800ca06 <_calloc_r+0x16>
 800ca14:	4621      	mov	r1, r4
 800ca16:	f7fe f835 	bl	800aa84 <memset>
 800ca1a:	e7f4      	b.n	800ca06 <_calloc_r+0x16>

0800ca1c <_free_r>:
 800ca1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca1e:	2900      	cmp	r1, #0
 800ca20:	d044      	beq.n	800caac <_free_r+0x90>
 800ca22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca26:	9001      	str	r0, [sp, #4]
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	f1a1 0404 	sub.w	r4, r1, #4
 800ca2e:	bfb8      	it	lt
 800ca30:	18e4      	addlt	r4, r4, r3
 800ca32:	f000 fead 	bl	800d790 <__malloc_lock>
 800ca36:	4a1e      	ldr	r2, [pc, #120]	; (800cab0 <_free_r+0x94>)
 800ca38:	9801      	ldr	r0, [sp, #4]
 800ca3a:	6813      	ldr	r3, [r2, #0]
 800ca3c:	b933      	cbnz	r3, 800ca4c <_free_r+0x30>
 800ca3e:	6063      	str	r3, [r4, #4]
 800ca40:	6014      	str	r4, [r2, #0]
 800ca42:	b003      	add	sp, #12
 800ca44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca48:	f000 bea8 	b.w	800d79c <__malloc_unlock>
 800ca4c:	42a3      	cmp	r3, r4
 800ca4e:	d908      	bls.n	800ca62 <_free_r+0x46>
 800ca50:	6825      	ldr	r5, [r4, #0]
 800ca52:	1961      	adds	r1, r4, r5
 800ca54:	428b      	cmp	r3, r1
 800ca56:	bf01      	itttt	eq
 800ca58:	6819      	ldreq	r1, [r3, #0]
 800ca5a:	685b      	ldreq	r3, [r3, #4]
 800ca5c:	1949      	addeq	r1, r1, r5
 800ca5e:	6021      	streq	r1, [r4, #0]
 800ca60:	e7ed      	b.n	800ca3e <_free_r+0x22>
 800ca62:	461a      	mov	r2, r3
 800ca64:	685b      	ldr	r3, [r3, #4]
 800ca66:	b10b      	cbz	r3, 800ca6c <_free_r+0x50>
 800ca68:	42a3      	cmp	r3, r4
 800ca6a:	d9fa      	bls.n	800ca62 <_free_r+0x46>
 800ca6c:	6811      	ldr	r1, [r2, #0]
 800ca6e:	1855      	adds	r5, r2, r1
 800ca70:	42a5      	cmp	r5, r4
 800ca72:	d10b      	bne.n	800ca8c <_free_r+0x70>
 800ca74:	6824      	ldr	r4, [r4, #0]
 800ca76:	4421      	add	r1, r4
 800ca78:	1854      	adds	r4, r2, r1
 800ca7a:	42a3      	cmp	r3, r4
 800ca7c:	6011      	str	r1, [r2, #0]
 800ca7e:	d1e0      	bne.n	800ca42 <_free_r+0x26>
 800ca80:	681c      	ldr	r4, [r3, #0]
 800ca82:	685b      	ldr	r3, [r3, #4]
 800ca84:	6053      	str	r3, [r2, #4]
 800ca86:	4421      	add	r1, r4
 800ca88:	6011      	str	r1, [r2, #0]
 800ca8a:	e7da      	b.n	800ca42 <_free_r+0x26>
 800ca8c:	d902      	bls.n	800ca94 <_free_r+0x78>
 800ca8e:	230c      	movs	r3, #12
 800ca90:	6003      	str	r3, [r0, #0]
 800ca92:	e7d6      	b.n	800ca42 <_free_r+0x26>
 800ca94:	6825      	ldr	r5, [r4, #0]
 800ca96:	1961      	adds	r1, r4, r5
 800ca98:	428b      	cmp	r3, r1
 800ca9a:	bf04      	itt	eq
 800ca9c:	6819      	ldreq	r1, [r3, #0]
 800ca9e:	685b      	ldreq	r3, [r3, #4]
 800caa0:	6063      	str	r3, [r4, #4]
 800caa2:	bf04      	itt	eq
 800caa4:	1949      	addeq	r1, r1, r5
 800caa6:	6021      	streq	r1, [r4, #0]
 800caa8:	6054      	str	r4, [r2, #4]
 800caaa:	e7ca      	b.n	800ca42 <_free_r+0x26>
 800caac:	b003      	add	sp, #12
 800caae:	bd30      	pop	{r4, r5, pc}
 800cab0:	20002290 	.word	0x20002290

0800cab4 <sbrk_aligned>:
 800cab4:	b570      	push	{r4, r5, r6, lr}
 800cab6:	4e0e      	ldr	r6, [pc, #56]	; (800caf0 <sbrk_aligned+0x3c>)
 800cab8:	460c      	mov	r4, r1
 800caba:	6831      	ldr	r1, [r6, #0]
 800cabc:	4605      	mov	r5, r0
 800cabe:	b911      	cbnz	r1, 800cac6 <sbrk_aligned+0x12>
 800cac0:	f000 fb42 	bl	800d148 <_sbrk_r>
 800cac4:	6030      	str	r0, [r6, #0]
 800cac6:	4621      	mov	r1, r4
 800cac8:	4628      	mov	r0, r5
 800caca:	f000 fb3d 	bl	800d148 <_sbrk_r>
 800cace:	1c43      	adds	r3, r0, #1
 800cad0:	d00a      	beq.n	800cae8 <sbrk_aligned+0x34>
 800cad2:	1cc4      	adds	r4, r0, #3
 800cad4:	f024 0403 	bic.w	r4, r4, #3
 800cad8:	42a0      	cmp	r0, r4
 800cada:	d007      	beq.n	800caec <sbrk_aligned+0x38>
 800cadc:	1a21      	subs	r1, r4, r0
 800cade:	4628      	mov	r0, r5
 800cae0:	f000 fb32 	bl	800d148 <_sbrk_r>
 800cae4:	3001      	adds	r0, #1
 800cae6:	d101      	bne.n	800caec <sbrk_aligned+0x38>
 800cae8:	f04f 34ff 	mov.w	r4, #4294967295
 800caec:	4620      	mov	r0, r4
 800caee:	bd70      	pop	{r4, r5, r6, pc}
 800caf0:	20002294 	.word	0x20002294

0800caf4 <_malloc_r>:
 800caf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800caf8:	1ccd      	adds	r5, r1, #3
 800cafa:	f025 0503 	bic.w	r5, r5, #3
 800cafe:	3508      	adds	r5, #8
 800cb00:	2d0c      	cmp	r5, #12
 800cb02:	bf38      	it	cc
 800cb04:	250c      	movcc	r5, #12
 800cb06:	2d00      	cmp	r5, #0
 800cb08:	4607      	mov	r7, r0
 800cb0a:	db01      	blt.n	800cb10 <_malloc_r+0x1c>
 800cb0c:	42a9      	cmp	r1, r5
 800cb0e:	d905      	bls.n	800cb1c <_malloc_r+0x28>
 800cb10:	230c      	movs	r3, #12
 800cb12:	603b      	str	r3, [r7, #0]
 800cb14:	2600      	movs	r6, #0
 800cb16:	4630      	mov	r0, r6
 800cb18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb1c:	4e2e      	ldr	r6, [pc, #184]	; (800cbd8 <_malloc_r+0xe4>)
 800cb1e:	f000 fe37 	bl	800d790 <__malloc_lock>
 800cb22:	6833      	ldr	r3, [r6, #0]
 800cb24:	461c      	mov	r4, r3
 800cb26:	bb34      	cbnz	r4, 800cb76 <_malloc_r+0x82>
 800cb28:	4629      	mov	r1, r5
 800cb2a:	4638      	mov	r0, r7
 800cb2c:	f7ff ffc2 	bl	800cab4 <sbrk_aligned>
 800cb30:	1c43      	adds	r3, r0, #1
 800cb32:	4604      	mov	r4, r0
 800cb34:	d14d      	bne.n	800cbd2 <_malloc_r+0xde>
 800cb36:	6834      	ldr	r4, [r6, #0]
 800cb38:	4626      	mov	r6, r4
 800cb3a:	2e00      	cmp	r6, #0
 800cb3c:	d140      	bne.n	800cbc0 <_malloc_r+0xcc>
 800cb3e:	6823      	ldr	r3, [r4, #0]
 800cb40:	4631      	mov	r1, r6
 800cb42:	4638      	mov	r0, r7
 800cb44:	eb04 0803 	add.w	r8, r4, r3
 800cb48:	f000 fafe 	bl	800d148 <_sbrk_r>
 800cb4c:	4580      	cmp	r8, r0
 800cb4e:	d13a      	bne.n	800cbc6 <_malloc_r+0xd2>
 800cb50:	6821      	ldr	r1, [r4, #0]
 800cb52:	3503      	adds	r5, #3
 800cb54:	1a6d      	subs	r5, r5, r1
 800cb56:	f025 0503 	bic.w	r5, r5, #3
 800cb5a:	3508      	adds	r5, #8
 800cb5c:	2d0c      	cmp	r5, #12
 800cb5e:	bf38      	it	cc
 800cb60:	250c      	movcc	r5, #12
 800cb62:	4629      	mov	r1, r5
 800cb64:	4638      	mov	r0, r7
 800cb66:	f7ff ffa5 	bl	800cab4 <sbrk_aligned>
 800cb6a:	3001      	adds	r0, #1
 800cb6c:	d02b      	beq.n	800cbc6 <_malloc_r+0xd2>
 800cb6e:	6823      	ldr	r3, [r4, #0]
 800cb70:	442b      	add	r3, r5
 800cb72:	6023      	str	r3, [r4, #0]
 800cb74:	e00e      	b.n	800cb94 <_malloc_r+0xa0>
 800cb76:	6822      	ldr	r2, [r4, #0]
 800cb78:	1b52      	subs	r2, r2, r5
 800cb7a:	d41e      	bmi.n	800cbba <_malloc_r+0xc6>
 800cb7c:	2a0b      	cmp	r2, #11
 800cb7e:	d916      	bls.n	800cbae <_malloc_r+0xba>
 800cb80:	1961      	adds	r1, r4, r5
 800cb82:	42a3      	cmp	r3, r4
 800cb84:	6025      	str	r5, [r4, #0]
 800cb86:	bf18      	it	ne
 800cb88:	6059      	strne	r1, [r3, #4]
 800cb8a:	6863      	ldr	r3, [r4, #4]
 800cb8c:	bf08      	it	eq
 800cb8e:	6031      	streq	r1, [r6, #0]
 800cb90:	5162      	str	r2, [r4, r5]
 800cb92:	604b      	str	r3, [r1, #4]
 800cb94:	4638      	mov	r0, r7
 800cb96:	f104 060b 	add.w	r6, r4, #11
 800cb9a:	f000 fdff 	bl	800d79c <__malloc_unlock>
 800cb9e:	f026 0607 	bic.w	r6, r6, #7
 800cba2:	1d23      	adds	r3, r4, #4
 800cba4:	1af2      	subs	r2, r6, r3
 800cba6:	d0b6      	beq.n	800cb16 <_malloc_r+0x22>
 800cba8:	1b9b      	subs	r3, r3, r6
 800cbaa:	50a3      	str	r3, [r4, r2]
 800cbac:	e7b3      	b.n	800cb16 <_malloc_r+0x22>
 800cbae:	6862      	ldr	r2, [r4, #4]
 800cbb0:	42a3      	cmp	r3, r4
 800cbb2:	bf0c      	ite	eq
 800cbb4:	6032      	streq	r2, [r6, #0]
 800cbb6:	605a      	strne	r2, [r3, #4]
 800cbb8:	e7ec      	b.n	800cb94 <_malloc_r+0xa0>
 800cbba:	4623      	mov	r3, r4
 800cbbc:	6864      	ldr	r4, [r4, #4]
 800cbbe:	e7b2      	b.n	800cb26 <_malloc_r+0x32>
 800cbc0:	4634      	mov	r4, r6
 800cbc2:	6876      	ldr	r6, [r6, #4]
 800cbc4:	e7b9      	b.n	800cb3a <_malloc_r+0x46>
 800cbc6:	230c      	movs	r3, #12
 800cbc8:	603b      	str	r3, [r7, #0]
 800cbca:	4638      	mov	r0, r7
 800cbcc:	f000 fde6 	bl	800d79c <__malloc_unlock>
 800cbd0:	e7a1      	b.n	800cb16 <_malloc_r+0x22>
 800cbd2:	6025      	str	r5, [r4, #0]
 800cbd4:	e7de      	b.n	800cb94 <_malloc_r+0xa0>
 800cbd6:	bf00      	nop
 800cbd8:	20002290 	.word	0x20002290

0800cbdc <__ssputs_r>:
 800cbdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbe0:	688e      	ldr	r6, [r1, #8]
 800cbe2:	429e      	cmp	r6, r3
 800cbe4:	4682      	mov	sl, r0
 800cbe6:	460c      	mov	r4, r1
 800cbe8:	4690      	mov	r8, r2
 800cbea:	461f      	mov	r7, r3
 800cbec:	d838      	bhi.n	800cc60 <__ssputs_r+0x84>
 800cbee:	898a      	ldrh	r2, [r1, #12]
 800cbf0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cbf4:	d032      	beq.n	800cc5c <__ssputs_r+0x80>
 800cbf6:	6825      	ldr	r5, [r4, #0]
 800cbf8:	6909      	ldr	r1, [r1, #16]
 800cbfa:	eba5 0901 	sub.w	r9, r5, r1
 800cbfe:	6965      	ldr	r5, [r4, #20]
 800cc00:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cc04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cc08:	3301      	adds	r3, #1
 800cc0a:	444b      	add	r3, r9
 800cc0c:	106d      	asrs	r5, r5, #1
 800cc0e:	429d      	cmp	r5, r3
 800cc10:	bf38      	it	cc
 800cc12:	461d      	movcc	r5, r3
 800cc14:	0553      	lsls	r3, r2, #21
 800cc16:	d531      	bpl.n	800cc7c <__ssputs_r+0xa0>
 800cc18:	4629      	mov	r1, r5
 800cc1a:	f7ff ff6b 	bl	800caf4 <_malloc_r>
 800cc1e:	4606      	mov	r6, r0
 800cc20:	b950      	cbnz	r0, 800cc38 <__ssputs_r+0x5c>
 800cc22:	230c      	movs	r3, #12
 800cc24:	f8ca 3000 	str.w	r3, [sl]
 800cc28:	89a3      	ldrh	r3, [r4, #12]
 800cc2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc2e:	81a3      	strh	r3, [r4, #12]
 800cc30:	f04f 30ff 	mov.w	r0, #4294967295
 800cc34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc38:	6921      	ldr	r1, [r4, #16]
 800cc3a:	464a      	mov	r2, r9
 800cc3c:	f7fd ff14 	bl	800aa68 <memcpy>
 800cc40:	89a3      	ldrh	r3, [r4, #12]
 800cc42:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc4a:	81a3      	strh	r3, [r4, #12]
 800cc4c:	6126      	str	r6, [r4, #16]
 800cc4e:	6165      	str	r5, [r4, #20]
 800cc50:	444e      	add	r6, r9
 800cc52:	eba5 0509 	sub.w	r5, r5, r9
 800cc56:	6026      	str	r6, [r4, #0]
 800cc58:	60a5      	str	r5, [r4, #8]
 800cc5a:	463e      	mov	r6, r7
 800cc5c:	42be      	cmp	r6, r7
 800cc5e:	d900      	bls.n	800cc62 <__ssputs_r+0x86>
 800cc60:	463e      	mov	r6, r7
 800cc62:	6820      	ldr	r0, [r4, #0]
 800cc64:	4632      	mov	r2, r6
 800cc66:	4641      	mov	r1, r8
 800cc68:	f000 fd78 	bl	800d75c <memmove>
 800cc6c:	68a3      	ldr	r3, [r4, #8]
 800cc6e:	1b9b      	subs	r3, r3, r6
 800cc70:	60a3      	str	r3, [r4, #8]
 800cc72:	6823      	ldr	r3, [r4, #0]
 800cc74:	4433      	add	r3, r6
 800cc76:	6023      	str	r3, [r4, #0]
 800cc78:	2000      	movs	r0, #0
 800cc7a:	e7db      	b.n	800cc34 <__ssputs_r+0x58>
 800cc7c:	462a      	mov	r2, r5
 800cc7e:	f000 fd93 	bl	800d7a8 <_realloc_r>
 800cc82:	4606      	mov	r6, r0
 800cc84:	2800      	cmp	r0, #0
 800cc86:	d1e1      	bne.n	800cc4c <__ssputs_r+0x70>
 800cc88:	6921      	ldr	r1, [r4, #16]
 800cc8a:	4650      	mov	r0, sl
 800cc8c:	f7ff fec6 	bl	800ca1c <_free_r>
 800cc90:	e7c7      	b.n	800cc22 <__ssputs_r+0x46>
	...

0800cc94 <_svfiprintf_r>:
 800cc94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc98:	4698      	mov	r8, r3
 800cc9a:	898b      	ldrh	r3, [r1, #12]
 800cc9c:	061b      	lsls	r3, r3, #24
 800cc9e:	b09d      	sub	sp, #116	; 0x74
 800cca0:	4607      	mov	r7, r0
 800cca2:	460d      	mov	r5, r1
 800cca4:	4614      	mov	r4, r2
 800cca6:	d50e      	bpl.n	800ccc6 <_svfiprintf_r+0x32>
 800cca8:	690b      	ldr	r3, [r1, #16]
 800ccaa:	b963      	cbnz	r3, 800ccc6 <_svfiprintf_r+0x32>
 800ccac:	2140      	movs	r1, #64	; 0x40
 800ccae:	f7ff ff21 	bl	800caf4 <_malloc_r>
 800ccb2:	6028      	str	r0, [r5, #0]
 800ccb4:	6128      	str	r0, [r5, #16]
 800ccb6:	b920      	cbnz	r0, 800ccc2 <_svfiprintf_r+0x2e>
 800ccb8:	230c      	movs	r3, #12
 800ccba:	603b      	str	r3, [r7, #0]
 800ccbc:	f04f 30ff 	mov.w	r0, #4294967295
 800ccc0:	e0d1      	b.n	800ce66 <_svfiprintf_r+0x1d2>
 800ccc2:	2340      	movs	r3, #64	; 0x40
 800ccc4:	616b      	str	r3, [r5, #20]
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	9309      	str	r3, [sp, #36]	; 0x24
 800ccca:	2320      	movs	r3, #32
 800cccc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccd0:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccd4:	2330      	movs	r3, #48	; 0x30
 800ccd6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ce80 <_svfiprintf_r+0x1ec>
 800ccda:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccde:	f04f 0901 	mov.w	r9, #1
 800cce2:	4623      	mov	r3, r4
 800cce4:	469a      	mov	sl, r3
 800cce6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccea:	b10a      	cbz	r2, 800ccf0 <_svfiprintf_r+0x5c>
 800ccec:	2a25      	cmp	r2, #37	; 0x25
 800ccee:	d1f9      	bne.n	800cce4 <_svfiprintf_r+0x50>
 800ccf0:	ebba 0b04 	subs.w	fp, sl, r4
 800ccf4:	d00b      	beq.n	800cd0e <_svfiprintf_r+0x7a>
 800ccf6:	465b      	mov	r3, fp
 800ccf8:	4622      	mov	r2, r4
 800ccfa:	4629      	mov	r1, r5
 800ccfc:	4638      	mov	r0, r7
 800ccfe:	f7ff ff6d 	bl	800cbdc <__ssputs_r>
 800cd02:	3001      	adds	r0, #1
 800cd04:	f000 80aa 	beq.w	800ce5c <_svfiprintf_r+0x1c8>
 800cd08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd0a:	445a      	add	r2, fp
 800cd0c:	9209      	str	r2, [sp, #36]	; 0x24
 800cd0e:	f89a 3000 	ldrb.w	r3, [sl]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	f000 80a2 	beq.w	800ce5c <_svfiprintf_r+0x1c8>
 800cd18:	2300      	movs	r3, #0
 800cd1a:	f04f 32ff 	mov.w	r2, #4294967295
 800cd1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd22:	f10a 0a01 	add.w	sl, sl, #1
 800cd26:	9304      	str	r3, [sp, #16]
 800cd28:	9307      	str	r3, [sp, #28]
 800cd2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd2e:	931a      	str	r3, [sp, #104]	; 0x68
 800cd30:	4654      	mov	r4, sl
 800cd32:	2205      	movs	r2, #5
 800cd34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd38:	4851      	ldr	r0, [pc, #324]	; (800ce80 <_svfiprintf_r+0x1ec>)
 800cd3a:	f7f3 fa59 	bl	80001f0 <memchr>
 800cd3e:	9a04      	ldr	r2, [sp, #16]
 800cd40:	b9d8      	cbnz	r0, 800cd7a <_svfiprintf_r+0xe6>
 800cd42:	06d0      	lsls	r0, r2, #27
 800cd44:	bf44      	itt	mi
 800cd46:	2320      	movmi	r3, #32
 800cd48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd4c:	0711      	lsls	r1, r2, #28
 800cd4e:	bf44      	itt	mi
 800cd50:	232b      	movmi	r3, #43	; 0x2b
 800cd52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd56:	f89a 3000 	ldrb.w	r3, [sl]
 800cd5a:	2b2a      	cmp	r3, #42	; 0x2a
 800cd5c:	d015      	beq.n	800cd8a <_svfiprintf_r+0xf6>
 800cd5e:	9a07      	ldr	r2, [sp, #28]
 800cd60:	4654      	mov	r4, sl
 800cd62:	2000      	movs	r0, #0
 800cd64:	f04f 0c0a 	mov.w	ip, #10
 800cd68:	4621      	mov	r1, r4
 800cd6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd6e:	3b30      	subs	r3, #48	; 0x30
 800cd70:	2b09      	cmp	r3, #9
 800cd72:	d94e      	bls.n	800ce12 <_svfiprintf_r+0x17e>
 800cd74:	b1b0      	cbz	r0, 800cda4 <_svfiprintf_r+0x110>
 800cd76:	9207      	str	r2, [sp, #28]
 800cd78:	e014      	b.n	800cda4 <_svfiprintf_r+0x110>
 800cd7a:	eba0 0308 	sub.w	r3, r0, r8
 800cd7e:	fa09 f303 	lsl.w	r3, r9, r3
 800cd82:	4313      	orrs	r3, r2
 800cd84:	9304      	str	r3, [sp, #16]
 800cd86:	46a2      	mov	sl, r4
 800cd88:	e7d2      	b.n	800cd30 <_svfiprintf_r+0x9c>
 800cd8a:	9b03      	ldr	r3, [sp, #12]
 800cd8c:	1d19      	adds	r1, r3, #4
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	9103      	str	r1, [sp, #12]
 800cd92:	2b00      	cmp	r3, #0
 800cd94:	bfbb      	ittet	lt
 800cd96:	425b      	neglt	r3, r3
 800cd98:	f042 0202 	orrlt.w	r2, r2, #2
 800cd9c:	9307      	strge	r3, [sp, #28]
 800cd9e:	9307      	strlt	r3, [sp, #28]
 800cda0:	bfb8      	it	lt
 800cda2:	9204      	strlt	r2, [sp, #16]
 800cda4:	7823      	ldrb	r3, [r4, #0]
 800cda6:	2b2e      	cmp	r3, #46	; 0x2e
 800cda8:	d10c      	bne.n	800cdc4 <_svfiprintf_r+0x130>
 800cdaa:	7863      	ldrb	r3, [r4, #1]
 800cdac:	2b2a      	cmp	r3, #42	; 0x2a
 800cdae:	d135      	bne.n	800ce1c <_svfiprintf_r+0x188>
 800cdb0:	9b03      	ldr	r3, [sp, #12]
 800cdb2:	1d1a      	adds	r2, r3, #4
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	9203      	str	r2, [sp, #12]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	bfb8      	it	lt
 800cdbc:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdc0:	3402      	adds	r4, #2
 800cdc2:	9305      	str	r3, [sp, #20]
 800cdc4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ce90 <_svfiprintf_r+0x1fc>
 800cdc8:	7821      	ldrb	r1, [r4, #0]
 800cdca:	2203      	movs	r2, #3
 800cdcc:	4650      	mov	r0, sl
 800cdce:	f7f3 fa0f 	bl	80001f0 <memchr>
 800cdd2:	b140      	cbz	r0, 800cde6 <_svfiprintf_r+0x152>
 800cdd4:	2340      	movs	r3, #64	; 0x40
 800cdd6:	eba0 000a 	sub.w	r0, r0, sl
 800cdda:	fa03 f000 	lsl.w	r0, r3, r0
 800cdde:	9b04      	ldr	r3, [sp, #16]
 800cde0:	4303      	orrs	r3, r0
 800cde2:	3401      	adds	r4, #1
 800cde4:	9304      	str	r3, [sp, #16]
 800cde6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdea:	4826      	ldr	r0, [pc, #152]	; (800ce84 <_svfiprintf_r+0x1f0>)
 800cdec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdf0:	2206      	movs	r2, #6
 800cdf2:	f7f3 f9fd 	bl	80001f0 <memchr>
 800cdf6:	2800      	cmp	r0, #0
 800cdf8:	d038      	beq.n	800ce6c <_svfiprintf_r+0x1d8>
 800cdfa:	4b23      	ldr	r3, [pc, #140]	; (800ce88 <_svfiprintf_r+0x1f4>)
 800cdfc:	bb1b      	cbnz	r3, 800ce46 <_svfiprintf_r+0x1b2>
 800cdfe:	9b03      	ldr	r3, [sp, #12]
 800ce00:	3307      	adds	r3, #7
 800ce02:	f023 0307 	bic.w	r3, r3, #7
 800ce06:	3308      	adds	r3, #8
 800ce08:	9303      	str	r3, [sp, #12]
 800ce0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce0c:	4433      	add	r3, r6
 800ce0e:	9309      	str	r3, [sp, #36]	; 0x24
 800ce10:	e767      	b.n	800cce2 <_svfiprintf_r+0x4e>
 800ce12:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce16:	460c      	mov	r4, r1
 800ce18:	2001      	movs	r0, #1
 800ce1a:	e7a5      	b.n	800cd68 <_svfiprintf_r+0xd4>
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	3401      	adds	r4, #1
 800ce20:	9305      	str	r3, [sp, #20]
 800ce22:	4619      	mov	r1, r3
 800ce24:	f04f 0c0a 	mov.w	ip, #10
 800ce28:	4620      	mov	r0, r4
 800ce2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce2e:	3a30      	subs	r2, #48	; 0x30
 800ce30:	2a09      	cmp	r2, #9
 800ce32:	d903      	bls.n	800ce3c <_svfiprintf_r+0x1a8>
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d0c5      	beq.n	800cdc4 <_svfiprintf_r+0x130>
 800ce38:	9105      	str	r1, [sp, #20]
 800ce3a:	e7c3      	b.n	800cdc4 <_svfiprintf_r+0x130>
 800ce3c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce40:	4604      	mov	r4, r0
 800ce42:	2301      	movs	r3, #1
 800ce44:	e7f0      	b.n	800ce28 <_svfiprintf_r+0x194>
 800ce46:	ab03      	add	r3, sp, #12
 800ce48:	9300      	str	r3, [sp, #0]
 800ce4a:	462a      	mov	r2, r5
 800ce4c:	4b0f      	ldr	r3, [pc, #60]	; (800ce8c <_svfiprintf_r+0x1f8>)
 800ce4e:	a904      	add	r1, sp, #16
 800ce50:	4638      	mov	r0, r7
 800ce52:	f7fd febf 	bl	800abd4 <_printf_float>
 800ce56:	1c42      	adds	r2, r0, #1
 800ce58:	4606      	mov	r6, r0
 800ce5a:	d1d6      	bne.n	800ce0a <_svfiprintf_r+0x176>
 800ce5c:	89ab      	ldrh	r3, [r5, #12]
 800ce5e:	065b      	lsls	r3, r3, #25
 800ce60:	f53f af2c 	bmi.w	800ccbc <_svfiprintf_r+0x28>
 800ce64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce66:	b01d      	add	sp, #116	; 0x74
 800ce68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce6c:	ab03      	add	r3, sp, #12
 800ce6e:	9300      	str	r3, [sp, #0]
 800ce70:	462a      	mov	r2, r5
 800ce72:	4b06      	ldr	r3, [pc, #24]	; (800ce8c <_svfiprintf_r+0x1f8>)
 800ce74:	a904      	add	r1, sp, #16
 800ce76:	4638      	mov	r0, r7
 800ce78:	f7fe f950 	bl	800b11c <_printf_i>
 800ce7c:	e7eb      	b.n	800ce56 <_svfiprintf_r+0x1c2>
 800ce7e:	bf00      	nop
 800ce80:	0800e02c 	.word	0x0800e02c
 800ce84:	0800e036 	.word	0x0800e036
 800ce88:	0800abd5 	.word	0x0800abd5
 800ce8c:	0800cbdd 	.word	0x0800cbdd
 800ce90:	0800e032 	.word	0x0800e032

0800ce94 <__sfputc_r>:
 800ce94:	6893      	ldr	r3, [r2, #8]
 800ce96:	3b01      	subs	r3, #1
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	b410      	push	{r4}
 800ce9c:	6093      	str	r3, [r2, #8]
 800ce9e:	da08      	bge.n	800ceb2 <__sfputc_r+0x1e>
 800cea0:	6994      	ldr	r4, [r2, #24]
 800cea2:	42a3      	cmp	r3, r4
 800cea4:	db01      	blt.n	800ceaa <__sfputc_r+0x16>
 800cea6:	290a      	cmp	r1, #10
 800cea8:	d103      	bne.n	800ceb2 <__sfputc_r+0x1e>
 800ceaa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ceae:	f000 b95b 	b.w	800d168 <__swbuf_r>
 800ceb2:	6813      	ldr	r3, [r2, #0]
 800ceb4:	1c58      	adds	r0, r3, #1
 800ceb6:	6010      	str	r0, [r2, #0]
 800ceb8:	7019      	strb	r1, [r3, #0]
 800ceba:	4608      	mov	r0, r1
 800cebc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cec0:	4770      	bx	lr

0800cec2 <__sfputs_r>:
 800cec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cec4:	4606      	mov	r6, r0
 800cec6:	460f      	mov	r7, r1
 800cec8:	4614      	mov	r4, r2
 800ceca:	18d5      	adds	r5, r2, r3
 800cecc:	42ac      	cmp	r4, r5
 800cece:	d101      	bne.n	800ced4 <__sfputs_r+0x12>
 800ced0:	2000      	movs	r0, #0
 800ced2:	e007      	b.n	800cee4 <__sfputs_r+0x22>
 800ced4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ced8:	463a      	mov	r2, r7
 800ceda:	4630      	mov	r0, r6
 800cedc:	f7ff ffda 	bl	800ce94 <__sfputc_r>
 800cee0:	1c43      	adds	r3, r0, #1
 800cee2:	d1f3      	bne.n	800cecc <__sfputs_r+0xa>
 800cee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cee8 <_vfiprintf_r>:
 800cee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceec:	460d      	mov	r5, r1
 800ceee:	b09d      	sub	sp, #116	; 0x74
 800cef0:	4614      	mov	r4, r2
 800cef2:	4698      	mov	r8, r3
 800cef4:	4606      	mov	r6, r0
 800cef6:	b118      	cbz	r0, 800cf00 <_vfiprintf_r+0x18>
 800cef8:	6983      	ldr	r3, [r0, #24]
 800cefa:	b90b      	cbnz	r3, 800cf00 <_vfiprintf_r+0x18>
 800cefc:	f000 fb16 	bl	800d52c <__sinit>
 800cf00:	4b89      	ldr	r3, [pc, #548]	; (800d128 <_vfiprintf_r+0x240>)
 800cf02:	429d      	cmp	r5, r3
 800cf04:	d11b      	bne.n	800cf3e <_vfiprintf_r+0x56>
 800cf06:	6875      	ldr	r5, [r6, #4]
 800cf08:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf0a:	07d9      	lsls	r1, r3, #31
 800cf0c:	d405      	bmi.n	800cf1a <_vfiprintf_r+0x32>
 800cf0e:	89ab      	ldrh	r3, [r5, #12]
 800cf10:	059a      	lsls	r2, r3, #22
 800cf12:	d402      	bmi.n	800cf1a <_vfiprintf_r+0x32>
 800cf14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf16:	f000 fba7 	bl	800d668 <__retarget_lock_acquire_recursive>
 800cf1a:	89ab      	ldrh	r3, [r5, #12]
 800cf1c:	071b      	lsls	r3, r3, #28
 800cf1e:	d501      	bpl.n	800cf24 <_vfiprintf_r+0x3c>
 800cf20:	692b      	ldr	r3, [r5, #16]
 800cf22:	b9eb      	cbnz	r3, 800cf60 <_vfiprintf_r+0x78>
 800cf24:	4629      	mov	r1, r5
 800cf26:	4630      	mov	r0, r6
 800cf28:	f000 f970 	bl	800d20c <__swsetup_r>
 800cf2c:	b1c0      	cbz	r0, 800cf60 <_vfiprintf_r+0x78>
 800cf2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf30:	07dc      	lsls	r4, r3, #31
 800cf32:	d50e      	bpl.n	800cf52 <_vfiprintf_r+0x6a>
 800cf34:	f04f 30ff 	mov.w	r0, #4294967295
 800cf38:	b01d      	add	sp, #116	; 0x74
 800cf3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf3e:	4b7b      	ldr	r3, [pc, #492]	; (800d12c <_vfiprintf_r+0x244>)
 800cf40:	429d      	cmp	r5, r3
 800cf42:	d101      	bne.n	800cf48 <_vfiprintf_r+0x60>
 800cf44:	68b5      	ldr	r5, [r6, #8]
 800cf46:	e7df      	b.n	800cf08 <_vfiprintf_r+0x20>
 800cf48:	4b79      	ldr	r3, [pc, #484]	; (800d130 <_vfiprintf_r+0x248>)
 800cf4a:	429d      	cmp	r5, r3
 800cf4c:	bf08      	it	eq
 800cf4e:	68f5      	ldreq	r5, [r6, #12]
 800cf50:	e7da      	b.n	800cf08 <_vfiprintf_r+0x20>
 800cf52:	89ab      	ldrh	r3, [r5, #12]
 800cf54:	0598      	lsls	r0, r3, #22
 800cf56:	d4ed      	bmi.n	800cf34 <_vfiprintf_r+0x4c>
 800cf58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf5a:	f000 fb86 	bl	800d66a <__retarget_lock_release_recursive>
 800cf5e:	e7e9      	b.n	800cf34 <_vfiprintf_r+0x4c>
 800cf60:	2300      	movs	r3, #0
 800cf62:	9309      	str	r3, [sp, #36]	; 0x24
 800cf64:	2320      	movs	r3, #32
 800cf66:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf6a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf6e:	2330      	movs	r3, #48	; 0x30
 800cf70:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d134 <_vfiprintf_r+0x24c>
 800cf74:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf78:	f04f 0901 	mov.w	r9, #1
 800cf7c:	4623      	mov	r3, r4
 800cf7e:	469a      	mov	sl, r3
 800cf80:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf84:	b10a      	cbz	r2, 800cf8a <_vfiprintf_r+0xa2>
 800cf86:	2a25      	cmp	r2, #37	; 0x25
 800cf88:	d1f9      	bne.n	800cf7e <_vfiprintf_r+0x96>
 800cf8a:	ebba 0b04 	subs.w	fp, sl, r4
 800cf8e:	d00b      	beq.n	800cfa8 <_vfiprintf_r+0xc0>
 800cf90:	465b      	mov	r3, fp
 800cf92:	4622      	mov	r2, r4
 800cf94:	4629      	mov	r1, r5
 800cf96:	4630      	mov	r0, r6
 800cf98:	f7ff ff93 	bl	800cec2 <__sfputs_r>
 800cf9c:	3001      	adds	r0, #1
 800cf9e:	f000 80aa 	beq.w	800d0f6 <_vfiprintf_r+0x20e>
 800cfa2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfa4:	445a      	add	r2, fp
 800cfa6:	9209      	str	r2, [sp, #36]	; 0x24
 800cfa8:	f89a 3000 	ldrb.w	r3, [sl]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	f000 80a2 	beq.w	800d0f6 <_vfiprintf_r+0x20e>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfbc:	f10a 0a01 	add.w	sl, sl, #1
 800cfc0:	9304      	str	r3, [sp, #16]
 800cfc2:	9307      	str	r3, [sp, #28]
 800cfc4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfc8:	931a      	str	r3, [sp, #104]	; 0x68
 800cfca:	4654      	mov	r4, sl
 800cfcc:	2205      	movs	r2, #5
 800cfce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfd2:	4858      	ldr	r0, [pc, #352]	; (800d134 <_vfiprintf_r+0x24c>)
 800cfd4:	f7f3 f90c 	bl	80001f0 <memchr>
 800cfd8:	9a04      	ldr	r2, [sp, #16]
 800cfda:	b9d8      	cbnz	r0, 800d014 <_vfiprintf_r+0x12c>
 800cfdc:	06d1      	lsls	r1, r2, #27
 800cfde:	bf44      	itt	mi
 800cfe0:	2320      	movmi	r3, #32
 800cfe2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfe6:	0713      	lsls	r3, r2, #28
 800cfe8:	bf44      	itt	mi
 800cfea:	232b      	movmi	r3, #43	; 0x2b
 800cfec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cff0:	f89a 3000 	ldrb.w	r3, [sl]
 800cff4:	2b2a      	cmp	r3, #42	; 0x2a
 800cff6:	d015      	beq.n	800d024 <_vfiprintf_r+0x13c>
 800cff8:	9a07      	ldr	r2, [sp, #28]
 800cffa:	4654      	mov	r4, sl
 800cffc:	2000      	movs	r0, #0
 800cffe:	f04f 0c0a 	mov.w	ip, #10
 800d002:	4621      	mov	r1, r4
 800d004:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d008:	3b30      	subs	r3, #48	; 0x30
 800d00a:	2b09      	cmp	r3, #9
 800d00c:	d94e      	bls.n	800d0ac <_vfiprintf_r+0x1c4>
 800d00e:	b1b0      	cbz	r0, 800d03e <_vfiprintf_r+0x156>
 800d010:	9207      	str	r2, [sp, #28]
 800d012:	e014      	b.n	800d03e <_vfiprintf_r+0x156>
 800d014:	eba0 0308 	sub.w	r3, r0, r8
 800d018:	fa09 f303 	lsl.w	r3, r9, r3
 800d01c:	4313      	orrs	r3, r2
 800d01e:	9304      	str	r3, [sp, #16]
 800d020:	46a2      	mov	sl, r4
 800d022:	e7d2      	b.n	800cfca <_vfiprintf_r+0xe2>
 800d024:	9b03      	ldr	r3, [sp, #12]
 800d026:	1d19      	adds	r1, r3, #4
 800d028:	681b      	ldr	r3, [r3, #0]
 800d02a:	9103      	str	r1, [sp, #12]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	bfbb      	ittet	lt
 800d030:	425b      	neglt	r3, r3
 800d032:	f042 0202 	orrlt.w	r2, r2, #2
 800d036:	9307      	strge	r3, [sp, #28]
 800d038:	9307      	strlt	r3, [sp, #28]
 800d03a:	bfb8      	it	lt
 800d03c:	9204      	strlt	r2, [sp, #16]
 800d03e:	7823      	ldrb	r3, [r4, #0]
 800d040:	2b2e      	cmp	r3, #46	; 0x2e
 800d042:	d10c      	bne.n	800d05e <_vfiprintf_r+0x176>
 800d044:	7863      	ldrb	r3, [r4, #1]
 800d046:	2b2a      	cmp	r3, #42	; 0x2a
 800d048:	d135      	bne.n	800d0b6 <_vfiprintf_r+0x1ce>
 800d04a:	9b03      	ldr	r3, [sp, #12]
 800d04c:	1d1a      	adds	r2, r3, #4
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	9203      	str	r2, [sp, #12]
 800d052:	2b00      	cmp	r3, #0
 800d054:	bfb8      	it	lt
 800d056:	f04f 33ff 	movlt.w	r3, #4294967295
 800d05a:	3402      	adds	r4, #2
 800d05c:	9305      	str	r3, [sp, #20]
 800d05e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d144 <_vfiprintf_r+0x25c>
 800d062:	7821      	ldrb	r1, [r4, #0]
 800d064:	2203      	movs	r2, #3
 800d066:	4650      	mov	r0, sl
 800d068:	f7f3 f8c2 	bl	80001f0 <memchr>
 800d06c:	b140      	cbz	r0, 800d080 <_vfiprintf_r+0x198>
 800d06e:	2340      	movs	r3, #64	; 0x40
 800d070:	eba0 000a 	sub.w	r0, r0, sl
 800d074:	fa03 f000 	lsl.w	r0, r3, r0
 800d078:	9b04      	ldr	r3, [sp, #16]
 800d07a:	4303      	orrs	r3, r0
 800d07c:	3401      	adds	r4, #1
 800d07e:	9304      	str	r3, [sp, #16]
 800d080:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d084:	482c      	ldr	r0, [pc, #176]	; (800d138 <_vfiprintf_r+0x250>)
 800d086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d08a:	2206      	movs	r2, #6
 800d08c:	f7f3 f8b0 	bl	80001f0 <memchr>
 800d090:	2800      	cmp	r0, #0
 800d092:	d03f      	beq.n	800d114 <_vfiprintf_r+0x22c>
 800d094:	4b29      	ldr	r3, [pc, #164]	; (800d13c <_vfiprintf_r+0x254>)
 800d096:	bb1b      	cbnz	r3, 800d0e0 <_vfiprintf_r+0x1f8>
 800d098:	9b03      	ldr	r3, [sp, #12]
 800d09a:	3307      	adds	r3, #7
 800d09c:	f023 0307 	bic.w	r3, r3, #7
 800d0a0:	3308      	adds	r3, #8
 800d0a2:	9303      	str	r3, [sp, #12]
 800d0a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0a6:	443b      	add	r3, r7
 800d0a8:	9309      	str	r3, [sp, #36]	; 0x24
 800d0aa:	e767      	b.n	800cf7c <_vfiprintf_r+0x94>
 800d0ac:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0b0:	460c      	mov	r4, r1
 800d0b2:	2001      	movs	r0, #1
 800d0b4:	e7a5      	b.n	800d002 <_vfiprintf_r+0x11a>
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	3401      	adds	r4, #1
 800d0ba:	9305      	str	r3, [sp, #20]
 800d0bc:	4619      	mov	r1, r3
 800d0be:	f04f 0c0a 	mov.w	ip, #10
 800d0c2:	4620      	mov	r0, r4
 800d0c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0c8:	3a30      	subs	r2, #48	; 0x30
 800d0ca:	2a09      	cmp	r2, #9
 800d0cc:	d903      	bls.n	800d0d6 <_vfiprintf_r+0x1ee>
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d0c5      	beq.n	800d05e <_vfiprintf_r+0x176>
 800d0d2:	9105      	str	r1, [sp, #20]
 800d0d4:	e7c3      	b.n	800d05e <_vfiprintf_r+0x176>
 800d0d6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0da:	4604      	mov	r4, r0
 800d0dc:	2301      	movs	r3, #1
 800d0de:	e7f0      	b.n	800d0c2 <_vfiprintf_r+0x1da>
 800d0e0:	ab03      	add	r3, sp, #12
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	462a      	mov	r2, r5
 800d0e6:	4b16      	ldr	r3, [pc, #88]	; (800d140 <_vfiprintf_r+0x258>)
 800d0e8:	a904      	add	r1, sp, #16
 800d0ea:	4630      	mov	r0, r6
 800d0ec:	f7fd fd72 	bl	800abd4 <_printf_float>
 800d0f0:	4607      	mov	r7, r0
 800d0f2:	1c78      	adds	r0, r7, #1
 800d0f4:	d1d6      	bne.n	800d0a4 <_vfiprintf_r+0x1bc>
 800d0f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0f8:	07d9      	lsls	r1, r3, #31
 800d0fa:	d405      	bmi.n	800d108 <_vfiprintf_r+0x220>
 800d0fc:	89ab      	ldrh	r3, [r5, #12]
 800d0fe:	059a      	lsls	r2, r3, #22
 800d100:	d402      	bmi.n	800d108 <_vfiprintf_r+0x220>
 800d102:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d104:	f000 fab1 	bl	800d66a <__retarget_lock_release_recursive>
 800d108:	89ab      	ldrh	r3, [r5, #12]
 800d10a:	065b      	lsls	r3, r3, #25
 800d10c:	f53f af12 	bmi.w	800cf34 <_vfiprintf_r+0x4c>
 800d110:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d112:	e711      	b.n	800cf38 <_vfiprintf_r+0x50>
 800d114:	ab03      	add	r3, sp, #12
 800d116:	9300      	str	r3, [sp, #0]
 800d118:	462a      	mov	r2, r5
 800d11a:	4b09      	ldr	r3, [pc, #36]	; (800d140 <_vfiprintf_r+0x258>)
 800d11c:	a904      	add	r1, sp, #16
 800d11e:	4630      	mov	r0, r6
 800d120:	f7fd fffc 	bl	800b11c <_printf_i>
 800d124:	e7e4      	b.n	800d0f0 <_vfiprintf_r+0x208>
 800d126:	bf00      	nop
 800d128:	0800e060 	.word	0x0800e060
 800d12c:	0800e080 	.word	0x0800e080
 800d130:	0800e040 	.word	0x0800e040
 800d134:	0800e02c 	.word	0x0800e02c
 800d138:	0800e036 	.word	0x0800e036
 800d13c:	0800abd5 	.word	0x0800abd5
 800d140:	0800cec3 	.word	0x0800cec3
 800d144:	0800e032 	.word	0x0800e032

0800d148 <_sbrk_r>:
 800d148:	b538      	push	{r3, r4, r5, lr}
 800d14a:	4d06      	ldr	r5, [pc, #24]	; (800d164 <_sbrk_r+0x1c>)
 800d14c:	2300      	movs	r3, #0
 800d14e:	4604      	mov	r4, r0
 800d150:	4608      	mov	r0, r1
 800d152:	602b      	str	r3, [r5, #0]
 800d154:	f7f4 fe94 	bl	8001e80 <_sbrk>
 800d158:	1c43      	adds	r3, r0, #1
 800d15a:	d102      	bne.n	800d162 <_sbrk_r+0x1a>
 800d15c:	682b      	ldr	r3, [r5, #0]
 800d15e:	b103      	cbz	r3, 800d162 <_sbrk_r+0x1a>
 800d160:	6023      	str	r3, [r4, #0]
 800d162:	bd38      	pop	{r3, r4, r5, pc}
 800d164:	2000229c 	.word	0x2000229c

0800d168 <__swbuf_r>:
 800d168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d16a:	460e      	mov	r6, r1
 800d16c:	4614      	mov	r4, r2
 800d16e:	4605      	mov	r5, r0
 800d170:	b118      	cbz	r0, 800d17a <__swbuf_r+0x12>
 800d172:	6983      	ldr	r3, [r0, #24]
 800d174:	b90b      	cbnz	r3, 800d17a <__swbuf_r+0x12>
 800d176:	f000 f9d9 	bl	800d52c <__sinit>
 800d17a:	4b21      	ldr	r3, [pc, #132]	; (800d200 <__swbuf_r+0x98>)
 800d17c:	429c      	cmp	r4, r3
 800d17e:	d12b      	bne.n	800d1d8 <__swbuf_r+0x70>
 800d180:	686c      	ldr	r4, [r5, #4]
 800d182:	69a3      	ldr	r3, [r4, #24]
 800d184:	60a3      	str	r3, [r4, #8]
 800d186:	89a3      	ldrh	r3, [r4, #12]
 800d188:	071a      	lsls	r2, r3, #28
 800d18a:	d52f      	bpl.n	800d1ec <__swbuf_r+0x84>
 800d18c:	6923      	ldr	r3, [r4, #16]
 800d18e:	b36b      	cbz	r3, 800d1ec <__swbuf_r+0x84>
 800d190:	6923      	ldr	r3, [r4, #16]
 800d192:	6820      	ldr	r0, [r4, #0]
 800d194:	1ac0      	subs	r0, r0, r3
 800d196:	6963      	ldr	r3, [r4, #20]
 800d198:	b2f6      	uxtb	r6, r6
 800d19a:	4283      	cmp	r3, r0
 800d19c:	4637      	mov	r7, r6
 800d19e:	dc04      	bgt.n	800d1aa <__swbuf_r+0x42>
 800d1a0:	4621      	mov	r1, r4
 800d1a2:	4628      	mov	r0, r5
 800d1a4:	f000 f92e 	bl	800d404 <_fflush_r>
 800d1a8:	bb30      	cbnz	r0, 800d1f8 <__swbuf_r+0x90>
 800d1aa:	68a3      	ldr	r3, [r4, #8]
 800d1ac:	3b01      	subs	r3, #1
 800d1ae:	60a3      	str	r3, [r4, #8]
 800d1b0:	6823      	ldr	r3, [r4, #0]
 800d1b2:	1c5a      	adds	r2, r3, #1
 800d1b4:	6022      	str	r2, [r4, #0]
 800d1b6:	701e      	strb	r6, [r3, #0]
 800d1b8:	6963      	ldr	r3, [r4, #20]
 800d1ba:	3001      	adds	r0, #1
 800d1bc:	4283      	cmp	r3, r0
 800d1be:	d004      	beq.n	800d1ca <__swbuf_r+0x62>
 800d1c0:	89a3      	ldrh	r3, [r4, #12]
 800d1c2:	07db      	lsls	r3, r3, #31
 800d1c4:	d506      	bpl.n	800d1d4 <__swbuf_r+0x6c>
 800d1c6:	2e0a      	cmp	r6, #10
 800d1c8:	d104      	bne.n	800d1d4 <__swbuf_r+0x6c>
 800d1ca:	4621      	mov	r1, r4
 800d1cc:	4628      	mov	r0, r5
 800d1ce:	f000 f919 	bl	800d404 <_fflush_r>
 800d1d2:	b988      	cbnz	r0, 800d1f8 <__swbuf_r+0x90>
 800d1d4:	4638      	mov	r0, r7
 800d1d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1d8:	4b0a      	ldr	r3, [pc, #40]	; (800d204 <__swbuf_r+0x9c>)
 800d1da:	429c      	cmp	r4, r3
 800d1dc:	d101      	bne.n	800d1e2 <__swbuf_r+0x7a>
 800d1de:	68ac      	ldr	r4, [r5, #8]
 800d1e0:	e7cf      	b.n	800d182 <__swbuf_r+0x1a>
 800d1e2:	4b09      	ldr	r3, [pc, #36]	; (800d208 <__swbuf_r+0xa0>)
 800d1e4:	429c      	cmp	r4, r3
 800d1e6:	bf08      	it	eq
 800d1e8:	68ec      	ldreq	r4, [r5, #12]
 800d1ea:	e7ca      	b.n	800d182 <__swbuf_r+0x1a>
 800d1ec:	4621      	mov	r1, r4
 800d1ee:	4628      	mov	r0, r5
 800d1f0:	f000 f80c 	bl	800d20c <__swsetup_r>
 800d1f4:	2800      	cmp	r0, #0
 800d1f6:	d0cb      	beq.n	800d190 <__swbuf_r+0x28>
 800d1f8:	f04f 37ff 	mov.w	r7, #4294967295
 800d1fc:	e7ea      	b.n	800d1d4 <__swbuf_r+0x6c>
 800d1fe:	bf00      	nop
 800d200:	0800e060 	.word	0x0800e060
 800d204:	0800e080 	.word	0x0800e080
 800d208:	0800e040 	.word	0x0800e040

0800d20c <__swsetup_r>:
 800d20c:	4b32      	ldr	r3, [pc, #200]	; (800d2d8 <__swsetup_r+0xcc>)
 800d20e:	b570      	push	{r4, r5, r6, lr}
 800d210:	681d      	ldr	r5, [r3, #0]
 800d212:	4606      	mov	r6, r0
 800d214:	460c      	mov	r4, r1
 800d216:	b125      	cbz	r5, 800d222 <__swsetup_r+0x16>
 800d218:	69ab      	ldr	r3, [r5, #24]
 800d21a:	b913      	cbnz	r3, 800d222 <__swsetup_r+0x16>
 800d21c:	4628      	mov	r0, r5
 800d21e:	f000 f985 	bl	800d52c <__sinit>
 800d222:	4b2e      	ldr	r3, [pc, #184]	; (800d2dc <__swsetup_r+0xd0>)
 800d224:	429c      	cmp	r4, r3
 800d226:	d10f      	bne.n	800d248 <__swsetup_r+0x3c>
 800d228:	686c      	ldr	r4, [r5, #4]
 800d22a:	89a3      	ldrh	r3, [r4, #12]
 800d22c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d230:	0719      	lsls	r1, r3, #28
 800d232:	d42c      	bmi.n	800d28e <__swsetup_r+0x82>
 800d234:	06dd      	lsls	r5, r3, #27
 800d236:	d411      	bmi.n	800d25c <__swsetup_r+0x50>
 800d238:	2309      	movs	r3, #9
 800d23a:	6033      	str	r3, [r6, #0]
 800d23c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d240:	81a3      	strh	r3, [r4, #12]
 800d242:	f04f 30ff 	mov.w	r0, #4294967295
 800d246:	e03e      	b.n	800d2c6 <__swsetup_r+0xba>
 800d248:	4b25      	ldr	r3, [pc, #148]	; (800d2e0 <__swsetup_r+0xd4>)
 800d24a:	429c      	cmp	r4, r3
 800d24c:	d101      	bne.n	800d252 <__swsetup_r+0x46>
 800d24e:	68ac      	ldr	r4, [r5, #8]
 800d250:	e7eb      	b.n	800d22a <__swsetup_r+0x1e>
 800d252:	4b24      	ldr	r3, [pc, #144]	; (800d2e4 <__swsetup_r+0xd8>)
 800d254:	429c      	cmp	r4, r3
 800d256:	bf08      	it	eq
 800d258:	68ec      	ldreq	r4, [r5, #12]
 800d25a:	e7e6      	b.n	800d22a <__swsetup_r+0x1e>
 800d25c:	0758      	lsls	r0, r3, #29
 800d25e:	d512      	bpl.n	800d286 <__swsetup_r+0x7a>
 800d260:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d262:	b141      	cbz	r1, 800d276 <__swsetup_r+0x6a>
 800d264:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d268:	4299      	cmp	r1, r3
 800d26a:	d002      	beq.n	800d272 <__swsetup_r+0x66>
 800d26c:	4630      	mov	r0, r6
 800d26e:	f7ff fbd5 	bl	800ca1c <_free_r>
 800d272:	2300      	movs	r3, #0
 800d274:	6363      	str	r3, [r4, #52]	; 0x34
 800d276:	89a3      	ldrh	r3, [r4, #12]
 800d278:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d27c:	81a3      	strh	r3, [r4, #12]
 800d27e:	2300      	movs	r3, #0
 800d280:	6063      	str	r3, [r4, #4]
 800d282:	6923      	ldr	r3, [r4, #16]
 800d284:	6023      	str	r3, [r4, #0]
 800d286:	89a3      	ldrh	r3, [r4, #12]
 800d288:	f043 0308 	orr.w	r3, r3, #8
 800d28c:	81a3      	strh	r3, [r4, #12]
 800d28e:	6923      	ldr	r3, [r4, #16]
 800d290:	b94b      	cbnz	r3, 800d2a6 <__swsetup_r+0x9a>
 800d292:	89a3      	ldrh	r3, [r4, #12]
 800d294:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d29c:	d003      	beq.n	800d2a6 <__swsetup_r+0x9a>
 800d29e:	4621      	mov	r1, r4
 800d2a0:	4630      	mov	r0, r6
 800d2a2:	f000 fa09 	bl	800d6b8 <__smakebuf_r>
 800d2a6:	89a0      	ldrh	r0, [r4, #12]
 800d2a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2ac:	f010 0301 	ands.w	r3, r0, #1
 800d2b0:	d00a      	beq.n	800d2c8 <__swsetup_r+0xbc>
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	60a3      	str	r3, [r4, #8]
 800d2b6:	6963      	ldr	r3, [r4, #20]
 800d2b8:	425b      	negs	r3, r3
 800d2ba:	61a3      	str	r3, [r4, #24]
 800d2bc:	6923      	ldr	r3, [r4, #16]
 800d2be:	b943      	cbnz	r3, 800d2d2 <__swsetup_r+0xc6>
 800d2c0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d2c4:	d1ba      	bne.n	800d23c <__swsetup_r+0x30>
 800d2c6:	bd70      	pop	{r4, r5, r6, pc}
 800d2c8:	0781      	lsls	r1, r0, #30
 800d2ca:	bf58      	it	pl
 800d2cc:	6963      	ldrpl	r3, [r4, #20]
 800d2ce:	60a3      	str	r3, [r4, #8]
 800d2d0:	e7f4      	b.n	800d2bc <__swsetup_r+0xb0>
 800d2d2:	2000      	movs	r0, #0
 800d2d4:	e7f7      	b.n	800d2c6 <__swsetup_r+0xba>
 800d2d6:	bf00      	nop
 800d2d8:	2000011c 	.word	0x2000011c
 800d2dc:	0800e060 	.word	0x0800e060
 800d2e0:	0800e080 	.word	0x0800e080
 800d2e4:	0800e040 	.word	0x0800e040

0800d2e8 <abort>:
 800d2e8:	b508      	push	{r3, lr}
 800d2ea:	2006      	movs	r0, #6
 800d2ec:	f000 fab4 	bl	800d858 <raise>
 800d2f0:	2001      	movs	r0, #1
 800d2f2:	f7f4 fd4d 	bl	8001d90 <_exit>
	...

0800d2f8 <__sflush_r>:
 800d2f8:	898a      	ldrh	r2, [r1, #12]
 800d2fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2fe:	4605      	mov	r5, r0
 800d300:	0710      	lsls	r0, r2, #28
 800d302:	460c      	mov	r4, r1
 800d304:	d458      	bmi.n	800d3b8 <__sflush_r+0xc0>
 800d306:	684b      	ldr	r3, [r1, #4]
 800d308:	2b00      	cmp	r3, #0
 800d30a:	dc05      	bgt.n	800d318 <__sflush_r+0x20>
 800d30c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d30e:	2b00      	cmp	r3, #0
 800d310:	dc02      	bgt.n	800d318 <__sflush_r+0x20>
 800d312:	2000      	movs	r0, #0
 800d314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d318:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d31a:	2e00      	cmp	r6, #0
 800d31c:	d0f9      	beq.n	800d312 <__sflush_r+0x1a>
 800d31e:	2300      	movs	r3, #0
 800d320:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d324:	682f      	ldr	r7, [r5, #0]
 800d326:	602b      	str	r3, [r5, #0]
 800d328:	d032      	beq.n	800d390 <__sflush_r+0x98>
 800d32a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d32c:	89a3      	ldrh	r3, [r4, #12]
 800d32e:	075a      	lsls	r2, r3, #29
 800d330:	d505      	bpl.n	800d33e <__sflush_r+0x46>
 800d332:	6863      	ldr	r3, [r4, #4]
 800d334:	1ac0      	subs	r0, r0, r3
 800d336:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d338:	b10b      	cbz	r3, 800d33e <__sflush_r+0x46>
 800d33a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d33c:	1ac0      	subs	r0, r0, r3
 800d33e:	2300      	movs	r3, #0
 800d340:	4602      	mov	r2, r0
 800d342:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d344:	6a21      	ldr	r1, [r4, #32]
 800d346:	4628      	mov	r0, r5
 800d348:	47b0      	blx	r6
 800d34a:	1c43      	adds	r3, r0, #1
 800d34c:	89a3      	ldrh	r3, [r4, #12]
 800d34e:	d106      	bne.n	800d35e <__sflush_r+0x66>
 800d350:	6829      	ldr	r1, [r5, #0]
 800d352:	291d      	cmp	r1, #29
 800d354:	d82c      	bhi.n	800d3b0 <__sflush_r+0xb8>
 800d356:	4a2a      	ldr	r2, [pc, #168]	; (800d400 <__sflush_r+0x108>)
 800d358:	40ca      	lsrs	r2, r1
 800d35a:	07d6      	lsls	r6, r2, #31
 800d35c:	d528      	bpl.n	800d3b0 <__sflush_r+0xb8>
 800d35e:	2200      	movs	r2, #0
 800d360:	6062      	str	r2, [r4, #4]
 800d362:	04d9      	lsls	r1, r3, #19
 800d364:	6922      	ldr	r2, [r4, #16]
 800d366:	6022      	str	r2, [r4, #0]
 800d368:	d504      	bpl.n	800d374 <__sflush_r+0x7c>
 800d36a:	1c42      	adds	r2, r0, #1
 800d36c:	d101      	bne.n	800d372 <__sflush_r+0x7a>
 800d36e:	682b      	ldr	r3, [r5, #0]
 800d370:	b903      	cbnz	r3, 800d374 <__sflush_r+0x7c>
 800d372:	6560      	str	r0, [r4, #84]	; 0x54
 800d374:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d376:	602f      	str	r7, [r5, #0]
 800d378:	2900      	cmp	r1, #0
 800d37a:	d0ca      	beq.n	800d312 <__sflush_r+0x1a>
 800d37c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d380:	4299      	cmp	r1, r3
 800d382:	d002      	beq.n	800d38a <__sflush_r+0x92>
 800d384:	4628      	mov	r0, r5
 800d386:	f7ff fb49 	bl	800ca1c <_free_r>
 800d38a:	2000      	movs	r0, #0
 800d38c:	6360      	str	r0, [r4, #52]	; 0x34
 800d38e:	e7c1      	b.n	800d314 <__sflush_r+0x1c>
 800d390:	6a21      	ldr	r1, [r4, #32]
 800d392:	2301      	movs	r3, #1
 800d394:	4628      	mov	r0, r5
 800d396:	47b0      	blx	r6
 800d398:	1c41      	adds	r1, r0, #1
 800d39a:	d1c7      	bne.n	800d32c <__sflush_r+0x34>
 800d39c:	682b      	ldr	r3, [r5, #0]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d0c4      	beq.n	800d32c <__sflush_r+0x34>
 800d3a2:	2b1d      	cmp	r3, #29
 800d3a4:	d001      	beq.n	800d3aa <__sflush_r+0xb2>
 800d3a6:	2b16      	cmp	r3, #22
 800d3a8:	d101      	bne.n	800d3ae <__sflush_r+0xb6>
 800d3aa:	602f      	str	r7, [r5, #0]
 800d3ac:	e7b1      	b.n	800d312 <__sflush_r+0x1a>
 800d3ae:	89a3      	ldrh	r3, [r4, #12]
 800d3b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3b4:	81a3      	strh	r3, [r4, #12]
 800d3b6:	e7ad      	b.n	800d314 <__sflush_r+0x1c>
 800d3b8:	690f      	ldr	r7, [r1, #16]
 800d3ba:	2f00      	cmp	r7, #0
 800d3bc:	d0a9      	beq.n	800d312 <__sflush_r+0x1a>
 800d3be:	0793      	lsls	r3, r2, #30
 800d3c0:	680e      	ldr	r6, [r1, #0]
 800d3c2:	bf08      	it	eq
 800d3c4:	694b      	ldreq	r3, [r1, #20]
 800d3c6:	600f      	str	r7, [r1, #0]
 800d3c8:	bf18      	it	ne
 800d3ca:	2300      	movne	r3, #0
 800d3cc:	eba6 0807 	sub.w	r8, r6, r7
 800d3d0:	608b      	str	r3, [r1, #8]
 800d3d2:	f1b8 0f00 	cmp.w	r8, #0
 800d3d6:	dd9c      	ble.n	800d312 <__sflush_r+0x1a>
 800d3d8:	6a21      	ldr	r1, [r4, #32]
 800d3da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d3dc:	4643      	mov	r3, r8
 800d3de:	463a      	mov	r2, r7
 800d3e0:	4628      	mov	r0, r5
 800d3e2:	47b0      	blx	r6
 800d3e4:	2800      	cmp	r0, #0
 800d3e6:	dc06      	bgt.n	800d3f6 <__sflush_r+0xfe>
 800d3e8:	89a3      	ldrh	r3, [r4, #12]
 800d3ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3ee:	81a3      	strh	r3, [r4, #12]
 800d3f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d3f4:	e78e      	b.n	800d314 <__sflush_r+0x1c>
 800d3f6:	4407      	add	r7, r0
 800d3f8:	eba8 0800 	sub.w	r8, r8, r0
 800d3fc:	e7e9      	b.n	800d3d2 <__sflush_r+0xda>
 800d3fe:	bf00      	nop
 800d400:	20400001 	.word	0x20400001

0800d404 <_fflush_r>:
 800d404:	b538      	push	{r3, r4, r5, lr}
 800d406:	690b      	ldr	r3, [r1, #16]
 800d408:	4605      	mov	r5, r0
 800d40a:	460c      	mov	r4, r1
 800d40c:	b913      	cbnz	r3, 800d414 <_fflush_r+0x10>
 800d40e:	2500      	movs	r5, #0
 800d410:	4628      	mov	r0, r5
 800d412:	bd38      	pop	{r3, r4, r5, pc}
 800d414:	b118      	cbz	r0, 800d41e <_fflush_r+0x1a>
 800d416:	6983      	ldr	r3, [r0, #24]
 800d418:	b90b      	cbnz	r3, 800d41e <_fflush_r+0x1a>
 800d41a:	f000 f887 	bl	800d52c <__sinit>
 800d41e:	4b14      	ldr	r3, [pc, #80]	; (800d470 <_fflush_r+0x6c>)
 800d420:	429c      	cmp	r4, r3
 800d422:	d11b      	bne.n	800d45c <_fflush_r+0x58>
 800d424:	686c      	ldr	r4, [r5, #4]
 800d426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d0ef      	beq.n	800d40e <_fflush_r+0xa>
 800d42e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d430:	07d0      	lsls	r0, r2, #31
 800d432:	d404      	bmi.n	800d43e <_fflush_r+0x3a>
 800d434:	0599      	lsls	r1, r3, #22
 800d436:	d402      	bmi.n	800d43e <_fflush_r+0x3a>
 800d438:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d43a:	f000 f915 	bl	800d668 <__retarget_lock_acquire_recursive>
 800d43e:	4628      	mov	r0, r5
 800d440:	4621      	mov	r1, r4
 800d442:	f7ff ff59 	bl	800d2f8 <__sflush_r>
 800d446:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d448:	07da      	lsls	r2, r3, #31
 800d44a:	4605      	mov	r5, r0
 800d44c:	d4e0      	bmi.n	800d410 <_fflush_r+0xc>
 800d44e:	89a3      	ldrh	r3, [r4, #12]
 800d450:	059b      	lsls	r3, r3, #22
 800d452:	d4dd      	bmi.n	800d410 <_fflush_r+0xc>
 800d454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d456:	f000 f908 	bl	800d66a <__retarget_lock_release_recursive>
 800d45a:	e7d9      	b.n	800d410 <_fflush_r+0xc>
 800d45c:	4b05      	ldr	r3, [pc, #20]	; (800d474 <_fflush_r+0x70>)
 800d45e:	429c      	cmp	r4, r3
 800d460:	d101      	bne.n	800d466 <_fflush_r+0x62>
 800d462:	68ac      	ldr	r4, [r5, #8]
 800d464:	e7df      	b.n	800d426 <_fflush_r+0x22>
 800d466:	4b04      	ldr	r3, [pc, #16]	; (800d478 <_fflush_r+0x74>)
 800d468:	429c      	cmp	r4, r3
 800d46a:	bf08      	it	eq
 800d46c:	68ec      	ldreq	r4, [r5, #12]
 800d46e:	e7da      	b.n	800d426 <_fflush_r+0x22>
 800d470:	0800e060 	.word	0x0800e060
 800d474:	0800e080 	.word	0x0800e080
 800d478:	0800e040 	.word	0x0800e040

0800d47c <std>:
 800d47c:	2300      	movs	r3, #0
 800d47e:	b510      	push	{r4, lr}
 800d480:	4604      	mov	r4, r0
 800d482:	e9c0 3300 	strd	r3, r3, [r0]
 800d486:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d48a:	6083      	str	r3, [r0, #8]
 800d48c:	8181      	strh	r1, [r0, #12]
 800d48e:	6643      	str	r3, [r0, #100]	; 0x64
 800d490:	81c2      	strh	r2, [r0, #14]
 800d492:	6183      	str	r3, [r0, #24]
 800d494:	4619      	mov	r1, r3
 800d496:	2208      	movs	r2, #8
 800d498:	305c      	adds	r0, #92	; 0x5c
 800d49a:	f7fd faf3 	bl	800aa84 <memset>
 800d49e:	4b05      	ldr	r3, [pc, #20]	; (800d4b4 <std+0x38>)
 800d4a0:	6263      	str	r3, [r4, #36]	; 0x24
 800d4a2:	4b05      	ldr	r3, [pc, #20]	; (800d4b8 <std+0x3c>)
 800d4a4:	62a3      	str	r3, [r4, #40]	; 0x28
 800d4a6:	4b05      	ldr	r3, [pc, #20]	; (800d4bc <std+0x40>)
 800d4a8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d4aa:	4b05      	ldr	r3, [pc, #20]	; (800d4c0 <std+0x44>)
 800d4ac:	6224      	str	r4, [r4, #32]
 800d4ae:	6323      	str	r3, [r4, #48]	; 0x30
 800d4b0:	bd10      	pop	{r4, pc}
 800d4b2:	bf00      	nop
 800d4b4:	0800d891 	.word	0x0800d891
 800d4b8:	0800d8b3 	.word	0x0800d8b3
 800d4bc:	0800d8eb 	.word	0x0800d8eb
 800d4c0:	0800d90f 	.word	0x0800d90f

0800d4c4 <_cleanup_r>:
 800d4c4:	4901      	ldr	r1, [pc, #4]	; (800d4cc <_cleanup_r+0x8>)
 800d4c6:	f000 b8af 	b.w	800d628 <_fwalk_reent>
 800d4ca:	bf00      	nop
 800d4cc:	0800d405 	.word	0x0800d405

0800d4d0 <__sfmoreglue>:
 800d4d0:	b570      	push	{r4, r5, r6, lr}
 800d4d2:	2268      	movs	r2, #104	; 0x68
 800d4d4:	1e4d      	subs	r5, r1, #1
 800d4d6:	4355      	muls	r5, r2
 800d4d8:	460e      	mov	r6, r1
 800d4da:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d4de:	f7ff fb09 	bl	800caf4 <_malloc_r>
 800d4e2:	4604      	mov	r4, r0
 800d4e4:	b140      	cbz	r0, 800d4f8 <__sfmoreglue+0x28>
 800d4e6:	2100      	movs	r1, #0
 800d4e8:	e9c0 1600 	strd	r1, r6, [r0]
 800d4ec:	300c      	adds	r0, #12
 800d4ee:	60a0      	str	r0, [r4, #8]
 800d4f0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d4f4:	f7fd fac6 	bl	800aa84 <memset>
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	bd70      	pop	{r4, r5, r6, pc}

0800d4fc <__sfp_lock_acquire>:
 800d4fc:	4801      	ldr	r0, [pc, #4]	; (800d504 <__sfp_lock_acquire+0x8>)
 800d4fe:	f000 b8b3 	b.w	800d668 <__retarget_lock_acquire_recursive>
 800d502:	bf00      	nop
 800d504:	20002299 	.word	0x20002299

0800d508 <__sfp_lock_release>:
 800d508:	4801      	ldr	r0, [pc, #4]	; (800d510 <__sfp_lock_release+0x8>)
 800d50a:	f000 b8ae 	b.w	800d66a <__retarget_lock_release_recursive>
 800d50e:	bf00      	nop
 800d510:	20002299 	.word	0x20002299

0800d514 <__sinit_lock_acquire>:
 800d514:	4801      	ldr	r0, [pc, #4]	; (800d51c <__sinit_lock_acquire+0x8>)
 800d516:	f000 b8a7 	b.w	800d668 <__retarget_lock_acquire_recursive>
 800d51a:	bf00      	nop
 800d51c:	2000229a 	.word	0x2000229a

0800d520 <__sinit_lock_release>:
 800d520:	4801      	ldr	r0, [pc, #4]	; (800d528 <__sinit_lock_release+0x8>)
 800d522:	f000 b8a2 	b.w	800d66a <__retarget_lock_release_recursive>
 800d526:	bf00      	nop
 800d528:	2000229a 	.word	0x2000229a

0800d52c <__sinit>:
 800d52c:	b510      	push	{r4, lr}
 800d52e:	4604      	mov	r4, r0
 800d530:	f7ff fff0 	bl	800d514 <__sinit_lock_acquire>
 800d534:	69a3      	ldr	r3, [r4, #24]
 800d536:	b11b      	cbz	r3, 800d540 <__sinit+0x14>
 800d538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d53c:	f7ff bff0 	b.w	800d520 <__sinit_lock_release>
 800d540:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d544:	6523      	str	r3, [r4, #80]	; 0x50
 800d546:	4b13      	ldr	r3, [pc, #76]	; (800d594 <__sinit+0x68>)
 800d548:	4a13      	ldr	r2, [pc, #76]	; (800d598 <__sinit+0x6c>)
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	62a2      	str	r2, [r4, #40]	; 0x28
 800d54e:	42a3      	cmp	r3, r4
 800d550:	bf04      	itt	eq
 800d552:	2301      	moveq	r3, #1
 800d554:	61a3      	streq	r3, [r4, #24]
 800d556:	4620      	mov	r0, r4
 800d558:	f000 f820 	bl	800d59c <__sfp>
 800d55c:	6060      	str	r0, [r4, #4]
 800d55e:	4620      	mov	r0, r4
 800d560:	f000 f81c 	bl	800d59c <__sfp>
 800d564:	60a0      	str	r0, [r4, #8]
 800d566:	4620      	mov	r0, r4
 800d568:	f000 f818 	bl	800d59c <__sfp>
 800d56c:	2200      	movs	r2, #0
 800d56e:	60e0      	str	r0, [r4, #12]
 800d570:	2104      	movs	r1, #4
 800d572:	6860      	ldr	r0, [r4, #4]
 800d574:	f7ff ff82 	bl	800d47c <std>
 800d578:	68a0      	ldr	r0, [r4, #8]
 800d57a:	2201      	movs	r2, #1
 800d57c:	2109      	movs	r1, #9
 800d57e:	f7ff ff7d 	bl	800d47c <std>
 800d582:	68e0      	ldr	r0, [r4, #12]
 800d584:	2202      	movs	r2, #2
 800d586:	2112      	movs	r1, #18
 800d588:	f7ff ff78 	bl	800d47c <std>
 800d58c:	2301      	movs	r3, #1
 800d58e:	61a3      	str	r3, [r4, #24]
 800d590:	e7d2      	b.n	800d538 <__sinit+0xc>
 800d592:	bf00      	nop
 800d594:	0800dc6c 	.word	0x0800dc6c
 800d598:	0800d4c5 	.word	0x0800d4c5

0800d59c <__sfp>:
 800d59c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d59e:	4607      	mov	r7, r0
 800d5a0:	f7ff ffac 	bl	800d4fc <__sfp_lock_acquire>
 800d5a4:	4b1e      	ldr	r3, [pc, #120]	; (800d620 <__sfp+0x84>)
 800d5a6:	681e      	ldr	r6, [r3, #0]
 800d5a8:	69b3      	ldr	r3, [r6, #24]
 800d5aa:	b913      	cbnz	r3, 800d5b2 <__sfp+0x16>
 800d5ac:	4630      	mov	r0, r6
 800d5ae:	f7ff ffbd 	bl	800d52c <__sinit>
 800d5b2:	3648      	adds	r6, #72	; 0x48
 800d5b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d5b8:	3b01      	subs	r3, #1
 800d5ba:	d503      	bpl.n	800d5c4 <__sfp+0x28>
 800d5bc:	6833      	ldr	r3, [r6, #0]
 800d5be:	b30b      	cbz	r3, 800d604 <__sfp+0x68>
 800d5c0:	6836      	ldr	r6, [r6, #0]
 800d5c2:	e7f7      	b.n	800d5b4 <__sfp+0x18>
 800d5c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d5c8:	b9d5      	cbnz	r5, 800d600 <__sfp+0x64>
 800d5ca:	4b16      	ldr	r3, [pc, #88]	; (800d624 <__sfp+0x88>)
 800d5cc:	60e3      	str	r3, [r4, #12]
 800d5ce:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d5d2:	6665      	str	r5, [r4, #100]	; 0x64
 800d5d4:	f000 f847 	bl	800d666 <__retarget_lock_init_recursive>
 800d5d8:	f7ff ff96 	bl	800d508 <__sfp_lock_release>
 800d5dc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d5e0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d5e4:	6025      	str	r5, [r4, #0]
 800d5e6:	61a5      	str	r5, [r4, #24]
 800d5e8:	2208      	movs	r2, #8
 800d5ea:	4629      	mov	r1, r5
 800d5ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d5f0:	f7fd fa48 	bl	800aa84 <memset>
 800d5f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d5f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d5fc:	4620      	mov	r0, r4
 800d5fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d600:	3468      	adds	r4, #104	; 0x68
 800d602:	e7d9      	b.n	800d5b8 <__sfp+0x1c>
 800d604:	2104      	movs	r1, #4
 800d606:	4638      	mov	r0, r7
 800d608:	f7ff ff62 	bl	800d4d0 <__sfmoreglue>
 800d60c:	4604      	mov	r4, r0
 800d60e:	6030      	str	r0, [r6, #0]
 800d610:	2800      	cmp	r0, #0
 800d612:	d1d5      	bne.n	800d5c0 <__sfp+0x24>
 800d614:	f7ff ff78 	bl	800d508 <__sfp_lock_release>
 800d618:	230c      	movs	r3, #12
 800d61a:	603b      	str	r3, [r7, #0]
 800d61c:	e7ee      	b.n	800d5fc <__sfp+0x60>
 800d61e:	bf00      	nop
 800d620:	0800dc6c 	.word	0x0800dc6c
 800d624:	ffff0001 	.word	0xffff0001

0800d628 <_fwalk_reent>:
 800d628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d62c:	4606      	mov	r6, r0
 800d62e:	4688      	mov	r8, r1
 800d630:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d634:	2700      	movs	r7, #0
 800d636:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d63a:	f1b9 0901 	subs.w	r9, r9, #1
 800d63e:	d505      	bpl.n	800d64c <_fwalk_reent+0x24>
 800d640:	6824      	ldr	r4, [r4, #0]
 800d642:	2c00      	cmp	r4, #0
 800d644:	d1f7      	bne.n	800d636 <_fwalk_reent+0xe>
 800d646:	4638      	mov	r0, r7
 800d648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d64c:	89ab      	ldrh	r3, [r5, #12]
 800d64e:	2b01      	cmp	r3, #1
 800d650:	d907      	bls.n	800d662 <_fwalk_reent+0x3a>
 800d652:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d656:	3301      	adds	r3, #1
 800d658:	d003      	beq.n	800d662 <_fwalk_reent+0x3a>
 800d65a:	4629      	mov	r1, r5
 800d65c:	4630      	mov	r0, r6
 800d65e:	47c0      	blx	r8
 800d660:	4307      	orrs	r7, r0
 800d662:	3568      	adds	r5, #104	; 0x68
 800d664:	e7e9      	b.n	800d63a <_fwalk_reent+0x12>

0800d666 <__retarget_lock_init_recursive>:
 800d666:	4770      	bx	lr

0800d668 <__retarget_lock_acquire_recursive>:
 800d668:	4770      	bx	lr

0800d66a <__retarget_lock_release_recursive>:
 800d66a:	4770      	bx	lr

0800d66c <__swhatbuf_r>:
 800d66c:	b570      	push	{r4, r5, r6, lr}
 800d66e:	460e      	mov	r6, r1
 800d670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d674:	2900      	cmp	r1, #0
 800d676:	b096      	sub	sp, #88	; 0x58
 800d678:	4614      	mov	r4, r2
 800d67a:	461d      	mov	r5, r3
 800d67c:	da08      	bge.n	800d690 <__swhatbuf_r+0x24>
 800d67e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d682:	2200      	movs	r2, #0
 800d684:	602a      	str	r2, [r5, #0]
 800d686:	061a      	lsls	r2, r3, #24
 800d688:	d410      	bmi.n	800d6ac <__swhatbuf_r+0x40>
 800d68a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d68e:	e00e      	b.n	800d6ae <__swhatbuf_r+0x42>
 800d690:	466a      	mov	r2, sp
 800d692:	f000 f96f 	bl	800d974 <_fstat_r>
 800d696:	2800      	cmp	r0, #0
 800d698:	dbf1      	blt.n	800d67e <__swhatbuf_r+0x12>
 800d69a:	9a01      	ldr	r2, [sp, #4]
 800d69c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d6a0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d6a4:	425a      	negs	r2, r3
 800d6a6:	415a      	adcs	r2, r3
 800d6a8:	602a      	str	r2, [r5, #0]
 800d6aa:	e7ee      	b.n	800d68a <__swhatbuf_r+0x1e>
 800d6ac:	2340      	movs	r3, #64	; 0x40
 800d6ae:	2000      	movs	r0, #0
 800d6b0:	6023      	str	r3, [r4, #0]
 800d6b2:	b016      	add	sp, #88	; 0x58
 800d6b4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d6b8 <__smakebuf_r>:
 800d6b8:	898b      	ldrh	r3, [r1, #12]
 800d6ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d6bc:	079d      	lsls	r5, r3, #30
 800d6be:	4606      	mov	r6, r0
 800d6c0:	460c      	mov	r4, r1
 800d6c2:	d507      	bpl.n	800d6d4 <__smakebuf_r+0x1c>
 800d6c4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d6c8:	6023      	str	r3, [r4, #0]
 800d6ca:	6123      	str	r3, [r4, #16]
 800d6cc:	2301      	movs	r3, #1
 800d6ce:	6163      	str	r3, [r4, #20]
 800d6d0:	b002      	add	sp, #8
 800d6d2:	bd70      	pop	{r4, r5, r6, pc}
 800d6d4:	ab01      	add	r3, sp, #4
 800d6d6:	466a      	mov	r2, sp
 800d6d8:	f7ff ffc8 	bl	800d66c <__swhatbuf_r>
 800d6dc:	9900      	ldr	r1, [sp, #0]
 800d6de:	4605      	mov	r5, r0
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	f7ff fa07 	bl	800caf4 <_malloc_r>
 800d6e6:	b948      	cbnz	r0, 800d6fc <__smakebuf_r+0x44>
 800d6e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6ec:	059a      	lsls	r2, r3, #22
 800d6ee:	d4ef      	bmi.n	800d6d0 <__smakebuf_r+0x18>
 800d6f0:	f023 0303 	bic.w	r3, r3, #3
 800d6f4:	f043 0302 	orr.w	r3, r3, #2
 800d6f8:	81a3      	strh	r3, [r4, #12]
 800d6fa:	e7e3      	b.n	800d6c4 <__smakebuf_r+0xc>
 800d6fc:	4b0d      	ldr	r3, [pc, #52]	; (800d734 <__smakebuf_r+0x7c>)
 800d6fe:	62b3      	str	r3, [r6, #40]	; 0x28
 800d700:	89a3      	ldrh	r3, [r4, #12]
 800d702:	6020      	str	r0, [r4, #0]
 800d704:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d708:	81a3      	strh	r3, [r4, #12]
 800d70a:	9b00      	ldr	r3, [sp, #0]
 800d70c:	6163      	str	r3, [r4, #20]
 800d70e:	9b01      	ldr	r3, [sp, #4]
 800d710:	6120      	str	r0, [r4, #16]
 800d712:	b15b      	cbz	r3, 800d72c <__smakebuf_r+0x74>
 800d714:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d718:	4630      	mov	r0, r6
 800d71a:	f000 f93d 	bl	800d998 <_isatty_r>
 800d71e:	b128      	cbz	r0, 800d72c <__smakebuf_r+0x74>
 800d720:	89a3      	ldrh	r3, [r4, #12]
 800d722:	f023 0303 	bic.w	r3, r3, #3
 800d726:	f043 0301 	orr.w	r3, r3, #1
 800d72a:	81a3      	strh	r3, [r4, #12]
 800d72c:	89a0      	ldrh	r0, [r4, #12]
 800d72e:	4305      	orrs	r5, r0
 800d730:	81a5      	strh	r5, [r4, #12]
 800d732:	e7cd      	b.n	800d6d0 <__smakebuf_r+0x18>
 800d734:	0800d4c5 	.word	0x0800d4c5

0800d738 <__ascii_mbtowc>:
 800d738:	b082      	sub	sp, #8
 800d73a:	b901      	cbnz	r1, 800d73e <__ascii_mbtowc+0x6>
 800d73c:	a901      	add	r1, sp, #4
 800d73e:	b142      	cbz	r2, 800d752 <__ascii_mbtowc+0x1a>
 800d740:	b14b      	cbz	r3, 800d756 <__ascii_mbtowc+0x1e>
 800d742:	7813      	ldrb	r3, [r2, #0]
 800d744:	600b      	str	r3, [r1, #0]
 800d746:	7812      	ldrb	r2, [r2, #0]
 800d748:	1e10      	subs	r0, r2, #0
 800d74a:	bf18      	it	ne
 800d74c:	2001      	movne	r0, #1
 800d74e:	b002      	add	sp, #8
 800d750:	4770      	bx	lr
 800d752:	4610      	mov	r0, r2
 800d754:	e7fb      	b.n	800d74e <__ascii_mbtowc+0x16>
 800d756:	f06f 0001 	mvn.w	r0, #1
 800d75a:	e7f8      	b.n	800d74e <__ascii_mbtowc+0x16>

0800d75c <memmove>:
 800d75c:	4288      	cmp	r0, r1
 800d75e:	b510      	push	{r4, lr}
 800d760:	eb01 0402 	add.w	r4, r1, r2
 800d764:	d902      	bls.n	800d76c <memmove+0x10>
 800d766:	4284      	cmp	r4, r0
 800d768:	4623      	mov	r3, r4
 800d76a:	d807      	bhi.n	800d77c <memmove+0x20>
 800d76c:	1e43      	subs	r3, r0, #1
 800d76e:	42a1      	cmp	r1, r4
 800d770:	d008      	beq.n	800d784 <memmove+0x28>
 800d772:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d776:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d77a:	e7f8      	b.n	800d76e <memmove+0x12>
 800d77c:	4402      	add	r2, r0
 800d77e:	4601      	mov	r1, r0
 800d780:	428a      	cmp	r2, r1
 800d782:	d100      	bne.n	800d786 <memmove+0x2a>
 800d784:	bd10      	pop	{r4, pc}
 800d786:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d78a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d78e:	e7f7      	b.n	800d780 <memmove+0x24>

0800d790 <__malloc_lock>:
 800d790:	4801      	ldr	r0, [pc, #4]	; (800d798 <__malloc_lock+0x8>)
 800d792:	f7ff bf69 	b.w	800d668 <__retarget_lock_acquire_recursive>
 800d796:	bf00      	nop
 800d798:	20002298 	.word	0x20002298

0800d79c <__malloc_unlock>:
 800d79c:	4801      	ldr	r0, [pc, #4]	; (800d7a4 <__malloc_unlock+0x8>)
 800d79e:	f7ff bf64 	b.w	800d66a <__retarget_lock_release_recursive>
 800d7a2:	bf00      	nop
 800d7a4:	20002298 	.word	0x20002298

0800d7a8 <_realloc_r>:
 800d7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ac:	4680      	mov	r8, r0
 800d7ae:	4614      	mov	r4, r2
 800d7b0:	460e      	mov	r6, r1
 800d7b2:	b921      	cbnz	r1, 800d7be <_realloc_r+0x16>
 800d7b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7b8:	4611      	mov	r1, r2
 800d7ba:	f7ff b99b 	b.w	800caf4 <_malloc_r>
 800d7be:	b92a      	cbnz	r2, 800d7cc <_realloc_r+0x24>
 800d7c0:	f7ff f92c 	bl	800ca1c <_free_r>
 800d7c4:	4625      	mov	r5, r4
 800d7c6:	4628      	mov	r0, r5
 800d7c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7cc:	f000 f906 	bl	800d9dc <_malloc_usable_size_r>
 800d7d0:	4284      	cmp	r4, r0
 800d7d2:	4607      	mov	r7, r0
 800d7d4:	d802      	bhi.n	800d7dc <_realloc_r+0x34>
 800d7d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d7da:	d812      	bhi.n	800d802 <_realloc_r+0x5a>
 800d7dc:	4621      	mov	r1, r4
 800d7de:	4640      	mov	r0, r8
 800d7e0:	f7ff f988 	bl	800caf4 <_malloc_r>
 800d7e4:	4605      	mov	r5, r0
 800d7e6:	2800      	cmp	r0, #0
 800d7e8:	d0ed      	beq.n	800d7c6 <_realloc_r+0x1e>
 800d7ea:	42bc      	cmp	r4, r7
 800d7ec:	4622      	mov	r2, r4
 800d7ee:	4631      	mov	r1, r6
 800d7f0:	bf28      	it	cs
 800d7f2:	463a      	movcs	r2, r7
 800d7f4:	f7fd f938 	bl	800aa68 <memcpy>
 800d7f8:	4631      	mov	r1, r6
 800d7fa:	4640      	mov	r0, r8
 800d7fc:	f7ff f90e 	bl	800ca1c <_free_r>
 800d800:	e7e1      	b.n	800d7c6 <_realloc_r+0x1e>
 800d802:	4635      	mov	r5, r6
 800d804:	e7df      	b.n	800d7c6 <_realloc_r+0x1e>

0800d806 <_raise_r>:
 800d806:	291f      	cmp	r1, #31
 800d808:	b538      	push	{r3, r4, r5, lr}
 800d80a:	4604      	mov	r4, r0
 800d80c:	460d      	mov	r5, r1
 800d80e:	d904      	bls.n	800d81a <_raise_r+0x14>
 800d810:	2316      	movs	r3, #22
 800d812:	6003      	str	r3, [r0, #0]
 800d814:	f04f 30ff 	mov.w	r0, #4294967295
 800d818:	bd38      	pop	{r3, r4, r5, pc}
 800d81a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d81c:	b112      	cbz	r2, 800d824 <_raise_r+0x1e>
 800d81e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d822:	b94b      	cbnz	r3, 800d838 <_raise_r+0x32>
 800d824:	4620      	mov	r0, r4
 800d826:	f000 f831 	bl	800d88c <_getpid_r>
 800d82a:	462a      	mov	r2, r5
 800d82c:	4601      	mov	r1, r0
 800d82e:	4620      	mov	r0, r4
 800d830:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d834:	f000 b818 	b.w	800d868 <_kill_r>
 800d838:	2b01      	cmp	r3, #1
 800d83a:	d00a      	beq.n	800d852 <_raise_r+0x4c>
 800d83c:	1c59      	adds	r1, r3, #1
 800d83e:	d103      	bne.n	800d848 <_raise_r+0x42>
 800d840:	2316      	movs	r3, #22
 800d842:	6003      	str	r3, [r0, #0]
 800d844:	2001      	movs	r0, #1
 800d846:	e7e7      	b.n	800d818 <_raise_r+0x12>
 800d848:	2400      	movs	r4, #0
 800d84a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d84e:	4628      	mov	r0, r5
 800d850:	4798      	blx	r3
 800d852:	2000      	movs	r0, #0
 800d854:	e7e0      	b.n	800d818 <_raise_r+0x12>
	...

0800d858 <raise>:
 800d858:	4b02      	ldr	r3, [pc, #8]	; (800d864 <raise+0xc>)
 800d85a:	4601      	mov	r1, r0
 800d85c:	6818      	ldr	r0, [r3, #0]
 800d85e:	f7ff bfd2 	b.w	800d806 <_raise_r>
 800d862:	bf00      	nop
 800d864:	2000011c 	.word	0x2000011c

0800d868 <_kill_r>:
 800d868:	b538      	push	{r3, r4, r5, lr}
 800d86a:	4d07      	ldr	r5, [pc, #28]	; (800d888 <_kill_r+0x20>)
 800d86c:	2300      	movs	r3, #0
 800d86e:	4604      	mov	r4, r0
 800d870:	4608      	mov	r0, r1
 800d872:	4611      	mov	r1, r2
 800d874:	602b      	str	r3, [r5, #0]
 800d876:	f7f4 fa7b 	bl	8001d70 <_kill>
 800d87a:	1c43      	adds	r3, r0, #1
 800d87c:	d102      	bne.n	800d884 <_kill_r+0x1c>
 800d87e:	682b      	ldr	r3, [r5, #0]
 800d880:	b103      	cbz	r3, 800d884 <_kill_r+0x1c>
 800d882:	6023      	str	r3, [r4, #0]
 800d884:	bd38      	pop	{r3, r4, r5, pc}
 800d886:	bf00      	nop
 800d888:	2000229c 	.word	0x2000229c

0800d88c <_getpid_r>:
 800d88c:	f7f4 ba68 	b.w	8001d60 <_getpid>

0800d890 <__sread>:
 800d890:	b510      	push	{r4, lr}
 800d892:	460c      	mov	r4, r1
 800d894:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d898:	f000 f8a8 	bl	800d9ec <_read_r>
 800d89c:	2800      	cmp	r0, #0
 800d89e:	bfab      	itete	ge
 800d8a0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d8a2:	89a3      	ldrhlt	r3, [r4, #12]
 800d8a4:	181b      	addge	r3, r3, r0
 800d8a6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d8aa:	bfac      	ite	ge
 800d8ac:	6563      	strge	r3, [r4, #84]	; 0x54
 800d8ae:	81a3      	strhlt	r3, [r4, #12]
 800d8b0:	bd10      	pop	{r4, pc}

0800d8b2 <__swrite>:
 800d8b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8b6:	461f      	mov	r7, r3
 800d8b8:	898b      	ldrh	r3, [r1, #12]
 800d8ba:	05db      	lsls	r3, r3, #23
 800d8bc:	4605      	mov	r5, r0
 800d8be:	460c      	mov	r4, r1
 800d8c0:	4616      	mov	r6, r2
 800d8c2:	d505      	bpl.n	800d8d0 <__swrite+0x1e>
 800d8c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8c8:	2302      	movs	r3, #2
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	f000 f874 	bl	800d9b8 <_lseek_r>
 800d8d0:	89a3      	ldrh	r3, [r4, #12]
 800d8d2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8d6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8da:	81a3      	strh	r3, [r4, #12]
 800d8dc:	4632      	mov	r2, r6
 800d8de:	463b      	mov	r3, r7
 800d8e0:	4628      	mov	r0, r5
 800d8e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e6:	f000 b823 	b.w	800d930 <_write_r>

0800d8ea <__sseek>:
 800d8ea:	b510      	push	{r4, lr}
 800d8ec:	460c      	mov	r4, r1
 800d8ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8f2:	f000 f861 	bl	800d9b8 <_lseek_r>
 800d8f6:	1c43      	adds	r3, r0, #1
 800d8f8:	89a3      	ldrh	r3, [r4, #12]
 800d8fa:	bf15      	itete	ne
 800d8fc:	6560      	strne	r0, [r4, #84]	; 0x54
 800d8fe:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d902:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d906:	81a3      	strheq	r3, [r4, #12]
 800d908:	bf18      	it	ne
 800d90a:	81a3      	strhne	r3, [r4, #12]
 800d90c:	bd10      	pop	{r4, pc}

0800d90e <__sclose>:
 800d90e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d912:	f000 b81f 	b.w	800d954 <_close_r>

0800d916 <__ascii_wctomb>:
 800d916:	b149      	cbz	r1, 800d92c <__ascii_wctomb+0x16>
 800d918:	2aff      	cmp	r2, #255	; 0xff
 800d91a:	bf85      	ittet	hi
 800d91c:	238a      	movhi	r3, #138	; 0x8a
 800d91e:	6003      	strhi	r3, [r0, #0]
 800d920:	700a      	strbls	r2, [r1, #0]
 800d922:	f04f 30ff 	movhi.w	r0, #4294967295
 800d926:	bf98      	it	ls
 800d928:	2001      	movls	r0, #1
 800d92a:	4770      	bx	lr
 800d92c:	4608      	mov	r0, r1
 800d92e:	4770      	bx	lr

0800d930 <_write_r>:
 800d930:	b538      	push	{r3, r4, r5, lr}
 800d932:	4d07      	ldr	r5, [pc, #28]	; (800d950 <_write_r+0x20>)
 800d934:	4604      	mov	r4, r0
 800d936:	4608      	mov	r0, r1
 800d938:	4611      	mov	r1, r2
 800d93a:	2200      	movs	r2, #0
 800d93c:	602a      	str	r2, [r5, #0]
 800d93e:	461a      	mov	r2, r3
 800d940:	f7f4 fa4d 	bl	8001dde <_write>
 800d944:	1c43      	adds	r3, r0, #1
 800d946:	d102      	bne.n	800d94e <_write_r+0x1e>
 800d948:	682b      	ldr	r3, [r5, #0]
 800d94a:	b103      	cbz	r3, 800d94e <_write_r+0x1e>
 800d94c:	6023      	str	r3, [r4, #0]
 800d94e:	bd38      	pop	{r3, r4, r5, pc}
 800d950:	2000229c 	.word	0x2000229c

0800d954 <_close_r>:
 800d954:	b538      	push	{r3, r4, r5, lr}
 800d956:	4d06      	ldr	r5, [pc, #24]	; (800d970 <_close_r+0x1c>)
 800d958:	2300      	movs	r3, #0
 800d95a:	4604      	mov	r4, r0
 800d95c:	4608      	mov	r0, r1
 800d95e:	602b      	str	r3, [r5, #0]
 800d960:	f7f4 fa59 	bl	8001e16 <_close>
 800d964:	1c43      	adds	r3, r0, #1
 800d966:	d102      	bne.n	800d96e <_close_r+0x1a>
 800d968:	682b      	ldr	r3, [r5, #0]
 800d96a:	b103      	cbz	r3, 800d96e <_close_r+0x1a>
 800d96c:	6023      	str	r3, [r4, #0]
 800d96e:	bd38      	pop	{r3, r4, r5, pc}
 800d970:	2000229c 	.word	0x2000229c

0800d974 <_fstat_r>:
 800d974:	b538      	push	{r3, r4, r5, lr}
 800d976:	4d07      	ldr	r5, [pc, #28]	; (800d994 <_fstat_r+0x20>)
 800d978:	2300      	movs	r3, #0
 800d97a:	4604      	mov	r4, r0
 800d97c:	4608      	mov	r0, r1
 800d97e:	4611      	mov	r1, r2
 800d980:	602b      	str	r3, [r5, #0]
 800d982:	f7f4 fa54 	bl	8001e2e <_fstat>
 800d986:	1c43      	adds	r3, r0, #1
 800d988:	d102      	bne.n	800d990 <_fstat_r+0x1c>
 800d98a:	682b      	ldr	r3, [r5, #0]
 800d98c:	b103      	cbz	r3, 800d990 <_fstat_r+0x1c>
 800d98e:	6023      	str	r3, [r4, #0]
 800d990:	bd38      	pop	{r3, r4, r5, pc}
 800d992:	bf00      	nop
 800d994:	2000229c 	.word	0x2000229c

0800d998 <_isatty_r>:
 800d998:	b538      	push	{r3, r4, r5, lr}
 800d99a:	4d06      	ldr	r5, [pc, #24]	; (800d9b4 <_isatty_r+0x1c>)
 800d99c:	2300      	movs	r3, #0
 800d99e:	4604      	mov	r4, r0
 800d9a0:	4608      	mov	r0, r1
 800d9a2:	602b      	str	r3, [r5, #0]
 800d9a4:	f7f4 fa53 	bl	8001e4e <_isatty>
 800d9a8:	1c43      	adds	r3, r0, #1
 800d9aa:	d102      	bne.n	800d9b2 <_isatty_r+0x1a>
 800d9ac:	682b      	ldr	r3, [r5, #0]
 800d9ae:	b103      	cbz	r3, 800d9b2 <_isatty_r+0x1a>
 800d9b0:	6023      	str	r3, [r4, #0]
 800d9b2:	bd38      	pop	{r3, r4, r5, pc}
 800d9b4:	2000229c 	.word	0x2000229c

0800d9b8 <_lseek_r>:
 800d9b8:	b538      	push	{r3, r4, r5, lr}
 800d9ba:	4d07      	ldr	r5, [pc, #28]	; (800d9d8 <_lseek_r+0x20>)
 800d9bc:	4604      	mov	r4, r0
 800d9be:	4608      	mov	r0, r1
 800d9c0:	4611      	mov	r1, r2
 800d9c2:	2200      	movs	r2, #0
 800d9c4:	602a      	str	r2, [r5, #0]
 800d9c6:	461a      	mov	r2, r3
 800d9c8:	f7f4 fa4c 	bl	8001e64 <_lseek>
 800d9cc:	1c43      	adds	r3, r0, #1
 800d9ce:	d102      	bne.n	800d9d6 <_lseek_r+0x1e>
 800d9d0:	682b      	ldr	r3, [r5, #0]
 800d9d2:	b103      	cbz	r3, 800d9d6 <_lseek_r+0x1e>
 800d9d4:	6023      	str	r3, [r4, #0]
 800d9d6:	bd38      	pop	{r3, r4, r5, pc}
 800d9d8:	2000229c 	.word	0x2000229c

0800d9dc <_malloc_usable_size_r>:
 800d9dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9e0:	1f18      	subs	r0, r3, #4
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	bfbc      	itt	lt
 800d9e6:	580b      	ldrlt	r3, [r1, r0]
 800d9e8:	18c0      	addlt	r0, r0, r3
 800d9ea:	4770      	bx	lr

0800d9ec <_read_r>:
 800d9ec:	b538      	push	{r3, r4, r5, lr}
 800d9ee:	4d07      	ldr	r5, [pc, #28]	; (800da0c <_read_r+0x20>)
 800d9f0:	4604      	mov	r4, r0
 800d9f2:	4608      	mov	r0, r1
 800d9f4:	4611      	mov	r1, r2
 800d9f6:	2200      	movs	r2, #0
 800d9f8:	602a      	str	r2, [r5, #0]
 800d9fa:	461a      	mov	r2, r3
 800d9fc:	f7f4 f9d2 	bl	8001da4 <_read>
 800da00:	1c43      	adds	r3, r0, #1
 800da02:	d102      	bne.n	800da0a <_read_r+0x1e>
 800da04:	682b      	ldr	r3, [r5, #0]
 800da06:	b103      	cbz	r3, 800da0a <_read_r+0x1e>
 800da08:	6023      	str	r3, [r4, #0]
 800da0a:	bd38      	pop	{r3, r4, r5, pc}
 800da0c:	2000229c 	.word	0x2000229c

0800da10 <sqrt>:
 800da10:	b538      	push	{r3, r4, r5, lr}
 800da12:	ed2d 8b02 	vpush	{d8}
 800da16:	ec55 4b10 	vmov	r4, r5, d0
 800da1a:	f000 f825 	bl	800da68 <__ieee754_sqrt>
 800da1e:	4622      	mov	r2, r4
 800da20:	462b      	mov	r3, r5
 800da22:	4620      	mov	r0, r4
 800da24:	4629      	mov	r1, r5
 800da26:	eeb0 8a40 	vmov.f32	s16, s0
 800da2a:	eef0 8a60 	vmov.f32	s17, s1
 800da2e:	f7f3 f885 	bl	8000b3c <__aeabi_dcmpun>
 800da32:	b990      	cbnz	r0, 800da5a <sqrt+0x4a>
 800da34:	2200      	movs	r2, #0
 800da36:	2300      	movs	r3, #0
 800da38:	4620      	mov	r0, r4
 800da3a:	4629      	mov	r1, r5
 800da3c:	f7f3 f856 	bl	8000aec <__aeabi_dcmplt>
 800da40:	b158      	cbz	r0, 800da5a <sqrt+0x4a>
 800da42:	f7fc ffe7 	bl	800aa14 <__errno>
 800da46:	2321      	movs	r3, #33	; 0x21
 800da48:	6003      	str	r3, [r0, #0]
 800da4a:	2200      	movs	r2, #0
 800da4c:	2300      	movs	r3, #0
 800da4e:	4610      	mov	r0, r2
 800da50:	4619      	mov	r1, r3
 800da52:	f7f2 ff03 	bl	800085c <__aeabi_ddiv>
 800da56:	ec41 0b18 	vmov	d8, r0, r1
 800da5a:	eeb0 0a48 	vmov.f32	s0, s16
 800da5e:	eef0 0a68 	vmov.f32	s1, s17
 800da62:	ecbd 8b02 	vpop	{d8}
 800da66:	bd38      	pop	{r3, r4, r5, pc}

0800da68 <__ieee754_sqrt>:
 800da68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da6c:	ec55 4b10 	vmov	r4, r5, d0
 800da70:	4e55      	ldr	r6, [pc, #340]	; (800dbc8 <__ieee754_sqrt+0x160>)
 800da72:	43ae      	bics	r6, r5
 800da74:	ee10 0a10 	vmov	r0, s0
 800da78:	ee10 3a10 	vmov	r3, s0
 800da7c:	462a      	mov	r2, r5
 800da7e:	4629      	mov	r1, r5
 800da80:	d110      	bne.n	800daa4 <__ieee754_sqrt+0x3c>
 800da82:	ee10 2a10 	vmov	r2, s0
 800da86:	462b      	mov	r3, r5
 800da88:	f7f2 fdbe 	bl	8000608 <__aeabi_dmul>
 800da8c:	4602      	mov	r2, r0
 800da8e:	460b      	mov	r3, r1
 800da90:	4620      	mov	r0, r4
 800da92:	4629      	mov	r1, r5
 800da94:	f7f2 fc02 	bl	800029c <__adddf3>
 800da98:	4604      	mov	r4, r0
 800da9a:	460d      	mov	r5, r1
 800da9c:	ec45 4b10 	vmov	d0, r4, r5
 800daa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daa4:	2d00      	cmp	r5, #0
 800daa6:	dc10      	bgt.n	800daca <__ieee754_sqrt+0x62>
 800daa8:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800daac:	4330      	orrs	r0, r6
 800daae:	d0f5      	beq.n	800da9c <__ieee754_sqrt+0x34>
 800dab0:	b15d      	cbz	r5, 800daca <__ieee754_sqrt+0x62>
 800dab2:	ee10 2a10 	vmov	r2, s0
 800dab6:	462b      	mov	r3, r5
 800dab8:	ee10 0a10 	vmov	r0, s0
 800dabc:	f7f2 fbec 	bl	8000298 <__aeabi_dsub>
 800dac0:	4602      	mov	r2, r0
 800dac2:	460b      	mov	r3, r1
 800dac4:	f7f2 feca 	bl	800085c <__aeabi_ddiv>
 800dac8:	e7e6      	b.n	800da98 <__ieee754_sqrt+0x30>
 800daca:	1512      	asrs	r2, r2, #20
 800dacc:	d074      	beq.n	800dbb8 <__ieee754_sqrt+0x150>
 800dace:	07d4      	lsls	r4, r2, #31
 800dad0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800dad4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800dad8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800dadc:	bf5e      	ittt	pl
 800dade:	0fda      	lsrpl	r2, r3, #31
 800dae0:	005b      	lslpl	r3, r3, #1
 800dae2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800dae6:	2400      	movs	r4, #0
 800dae8:	0fda      	lsrs	r2, r3, #31
 800daea:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800daee:	107f      	asrs	r7, r7, #1
 800daf0:	005b      	lsls	r3, r3, #1
 800daf2:	2516      	movs	r5, #22
 800daf4:	4620      	mov	r0, r4
 800daf6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dafa:	1886      	adds	r6, r0, r2
 800dafc:	428e      	cmp	r6, r1
 800dafe:	bfde      	ittt	le
 800db00:	1b89      	suble	r1, r1, r6
 800db02:	18b0      	addle	r0, r6, r2
 800db04:	18a4      	addle	r4, r4, r2
 800db06:	0049      	lsls	r1, r1, #1
 800db08:	3d01      	subs	r5, #1
 800db0a:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800db0e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800db12:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800db16:	d1f0      	bne.n	800dafa <__ieee754_sqrt+0x92>
 800db18:	462a      	mov	r2, r5
 800db1a:	f04f 0e20 	mov.w	lr, #32
 800db1e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800db22:	4281      	cmp	r1, r0
 800db24:	eb06 0c05 	add.w	ip, r6, r5
 800db28:	dc02      	bgt.n	800db30 <__ieee754_sqrt+0xc8>
 800db2a:	d113      	bne.n	800db54 <__ieee754_sqrt+0xec>
 800db2c:	459c      	cmp	ip, r3
 800db2e:	d811      	bhi.n	800db54 <__ieee754_sqrt+0xec>
 800db30:	f1bc 0f00 	cmp.w	ip, #0
 800db34:	eb0c 0506 	add.w	r5, ip, r6
 800db38:	da43      	bge.n	800dbc2 <__ieee754_sqrt+0x15a>
 800db3a:	2d00      	cmp	r5, #0
 800db3c:	db41      	blt.n	800dbc2 <__ieee754_sqrt+0x15a>
 800db3e:	f100 0801 	add.w	r8, r0, #1
 800db42:	1a09      	subs	r1, r1, r0
 800db44:	459c      	cmp	ip, r3
 800db46:	bf88      	it	hi
 800db48:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800db4c:	eba3 030c 	sub.w	r3, r3, ip
 800db50:	4432      	add	r2, r6
 800db52:	4640      	mov	r0, r8
 800db54:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800db58:	f1be 0e01 	subs.w	lr, lr, #1
 800db5c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800db60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800db64:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800db68:	d1db      	bne.n	800db22 <__ieee754_sqrt+0xba>
 800db6a:	430b      	orrs	r3, r1
 800db6c:	d006      	beq.n	800db7c <__ieee754_sqrt+0x114>
 800db6e:	1c50      	adds	r0, r2, #1
 800db70:	bf13      	iteet	ne
 800db72:	3201      	addne	r2, #1
 800db74:	3401      	addeq	r4, #1
 800db76:	4672      	moveq	r2, lr
 800db78:	f022 0201 	bicne.w	r2, r2, #1
 800db7c:	1063      	asrs	r3, r4, #1
 800db7e:	0852      	lsrs	r2, r2, #1
 800db80:	07e1      	lsls	r1, r4, #31
 800db82:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800db86:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800db8a:	bf48      	it	mi
 800db8c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800db90:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800db94:	4614      	mov	r4, r2
 800db96:	e781      	b.n	800da9c <__ieee754_sqrt+0x34>
 800db98:	0ad9      	lsrs	r1, r3, #11
 800db9a:	3815      	subs	r0, #21
 800db9c:	055b      	lsls	r3, r3, #21
 800db9e:	2900      	cmp	r1, #0
 800dba0:	d0fa      	beq.n	800db98 <__ieee754_sqrt+0x130>
 800dba2:	02cd      	lsls	r5, r1, #11
 800dba4:	d50a      	bpl.n	800dbbc <__ieee754_sqrt+0x154>
 800dba6:	f1c2 0420 	rsb	r4, r2, #32
 800dbaa:	fa23 f404 	lsr.w	r4, r3, r4
 800dbae:	1e55      	subs	r5, r2, #1
 800dbb0:	4093      	lsls	r3, r2
 800dbb2:	4321      	orrs	r1, r4
 800dbb4:	1b42      	subs	r2, r0, r5
 800dbb6:	e78a      	b.n	800dace <__ieee754_sqrt+0x66>
 800dbb8:	4610      	mov	r0, r2
 800dbba:	e7f0      	b.n	800db9e <__ieee754_sqrt+0x136>
 800dbbc:	0049      	lsls	r1, r1, #1
 800dbbe:	3201      	adds	r2, #1
 800dbc0:	e7ef      	b.n	800dba2 <__ieee754_sqrt+0x13a>
 800dbc2:	4680      	mov	r8, r0
 800dbc4:	e7bd      	b.n	800db42 <__ieee754_sqrt+0xda>
 800dbc6:	bf00      	nop
 800dbc8:	7ff00000 	.word	0x7ff00000

0800dbcc <_init>:
 800dbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbce:	bf00      	nop
 800dbd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbd2:	bc08      	pop	{r3}
 800dbd4:	469e      	mov	lr, r3
 800dbd6:	4770      	bx	lr

0800dbd8 <_fini>:
 800dbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dbda:	bf00      	nop
 800dbdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dbde:	bc08      	pop	{r3}
 800dbe0:	469e      	mov	lr, r3
 800dbe2:	4770      	bx	lr
