
emg_projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d508  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  0800d6a8  0800d6a8  0001d6a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800daf4  0800daf4  0002030c  2**0
                  CONTENTS
  4 .ARM          00000008  0800daf4  0800daf4  0001daf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dafc  0800dafc  0002030c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dafc  0800dafc  0001dafc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db00  0800db00  0001db00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000030c  20000000  0800db04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ffc  2000030c  0800de10  0002030c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002308  0800de10  00022308  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002030c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b814  00000000  00000000  0002033c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044fc  00000000  00000000  0003bb50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001758  00000000  00000000  00040050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001548  00000000  00000000  000417a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001caa2  00000000  00000000  00042cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eeba  00000000  00000000  0005f792  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f796  00000000  00000000  0007e64c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011dde2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007214  00000000  00000000  0011de34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000030c 	.word	0x2000030c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800d690 	.word	0x0800d690

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000310 	.word	0x20000310
 80001dc:	0800d690 	.word	0x0800d690

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b974 	b.w	8000eb8 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9d08      	ldr	r5, [sp, #32]
 8000bee:	4604      	mov	r4, r0
 8000bf0:	468e      	mov	lr, r1
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d14d      	bne.n	8000c92 <__udivmoddi4+0xaa>
 8000bf6:	428a      	cmp	r2, r1
 8000bf8:	4694      	mov	ip, r2
 8000bfa:	d969      	bls.n	8000cd0 <__udivmoddi4+0xe8>
 8000bfc:	fab2 f282 	clz	r2, r2
 8000c00:	b152      	cbz	r2, 8000c18 <__udivmoddi4+0x30>
 8000c02:	fa01 f302 	lsl.w	r3, r1, r2
 8000c06:	f1c2 0120 	rsb	r1, r2, #32
 8000c0a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c0e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c12:	ea41 0e03 	orr.w	lr, r1, r3
 8000c16:	4094      	lsls	r4, r2
 8000c18:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c1c:	0c21      	lsrs	r1, r4, #16
 8000c1e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c22:	fa1f f78c 	uxth.w	r7, ip
 8000c26:	fb08 e316 	mls	r3, r8, r6, lr
 8000c2a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c2e:	fb06 f107 	mul.w	r1, r6, r7
 8000c32:	4299      	cmp	r1, r3
 8000c34:	d90a      	bls.n	8000c4c <__udivmoddi4+0x64>
 8000c36:	eb1c 0303 	adds.w	r3, ip, r3
 8000c3a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c3e:	f080 811f 	bcs.w	8000e80 <__udivmoddi4+0x298>
 8000c42:	4299      	cmp	r1, r3
 8000c44:	f240 811c 	bls.w	8000e80 <__udivmoddi4+0x298>
 8000c48:	3e02      	subs	r6, #2
 8000c4a:	4463      	add	r3, ip
 8000c4c:	1a5b      	subs	r3, r3, r1
 8000c4e:	b2a4      	uxth	r4, r4
 8000c50:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c54:	fb08 3310 	mls	r3, r8, r0, r3
 8000c58:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c5c:	fb00 f707 	mul.w	r7, r0, r7
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x92>
 8000c64:	eb1c 0404 	adds.w	r4, ip, r4
 8000c68:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c6c:	f080 810a 	bcs.w	8000e84 <__udivmoddi4+0x29c>
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	f240 8107 	bls.w	8000e84 <__udivmoddi4+0x29c>
 8000c76:	4464      	add	r4, ip
 8000c78:	3802      	subs	r0, #2
 8000c7a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c7e:	1be4      	subs	r4, r4, r7
 8000c80:	2600      	movs	r6, #0
 8000c82:	b11d      	cbz	r5, 8000c8c <__udivmoddi4+0xa4>
 8000c84:	40d4      	lsrs	r4, r2
 8000c86:	2300      	movs	r3, #0
 8000c88:	e9c5 4300 	strd	r4, r3, [r5]
 8000c8c:	4631      	mov	r1, r6
 8000c8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c92:	428b      	cmp	r3, r1
 8000c94:	d909      	bls.n	8000caa <__udivmoddi4+0xc2>
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	f000 80ef 	beq.w	8000e7a <__udivmoddi4+0x292>
 8000c9c:	2600      	movs	r6, #0
 8000c9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca2:	4630      	mov	r0, r6
 8000ca4:	4631      	mov	r1, r6
 8000ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000caa:	fab3 f683 	clz	r6, r3
 8000cae:	2e00      	cmp	r6, #0
 8000cb0:	d14a      	bne.n	8000d48 <__udivmoddi4+0x160>
 8000cb2:	428b      	cmp	r3, r1
 8000cb4:	d302      	bcc.n	8000cbc <__udivmoddi4+0xd4>
 8000cb6:	4282      	cmp	r2, r0
 8000cb8:	f200 80f9 	bhi.w	8000eae <__udivmoddi4+0x2c6>
 8000cbc:	1a84      	subs	r4, r0, r2
 8000cbe:	eb61 0303 	sbc.w	r3, r1, r3
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	469e      	mov	lr, r3
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	d0e0      	beq.n	8000c8c <__udivmoddi4+0xa4>
 8000cca:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cce:	e7dd      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000cd0:	b902      	cbnz	r2, 8000cd4 <__udivmoddi4+0xec>
 8000cd2:	deff      	udf	#255	; 0xff
 8000cd4:	fab2 f282 	clz	r2, r2
 8000cd8:	2a00      	cmp	r2, #0
 8000cda:	f040 8092 	bne.w	8000e02 <__udivmoddi4+0x21a>
 8000cde:	eba1 010c 	sub.w	r1, r1, ip
 8000ce2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ce6:	fa1f fe8c 	uxth.w	lr, ip
 8000cea:	2601      	movs	r6, #1
 8000cec:	0c20      	lsrs	r0, r4, #16
 8000cee:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cf2:	fb07 1113 	mls	r1, r7, r3, r1
 8000cf6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cfa:	fb0e f003 	mul.w	r0, lr, r3
 8000cfe:	4288      	cmp	r0, r1
 8000d00:	d908      	bls.n	8000d14 <__udivmoddi4+0x12c>
 8000d02:	eb1c 0101 	adds.w	r1, ip, r1
 8000d06:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d0a:	d202      	bcs.n	8000d12 <__udivmoddi4+0x12a>
 8000d0c:	4288      	cmp	r0, r1
 8000d0e:	f200 80cb 	bhi.w	8000ea8 <__udivmoddi4+0x2c0>
 8000d12:	4643      	mov	r3, r8
 8000d14:	1a09      	subs	r1, r1, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d1c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d20:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d24:	fb0e fe00 	mul.w	lr, lr, r0
 8000d28:	45a6      	cmp	lr, r4
 8000d2a:	d908      	bls.n	8000d3e <__udivmoddi4+0x156>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d34:	d202      	bcs.n	8000d3c <__udivmoddi4+0x154>
 8000d36:	45a6      	cmp	lr, r4
 8000d38:	f200 80bb 	bhi.w	8000eb2 <__udivmoddi4+0x2ca>
 8000d3c:	4608      	mov	r0, r1
 8000d3e:	eba4 040e 	sub.w	r4, r4, lr
 8000d42:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d46:	e79c      	b.n	8000c82 <__udivmoddi4+0x9a>
 8000d48:	f1c6 0720 	rsb	r7, r6, #32
 8000d4c:	40b3      	lsls	r3, r6
 8000d4e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d52:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d56:	fa20 f407 	lsr.w	r4, r0, r7
 8000d5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d5e:	431c      	orrs	r4, r3
 8000d60:	40f9      	lsrs	r1, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fa00 f306 	lsl.w	r3, r0, r6
 8000d6a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d6e:	0c20      	lsrs	r0, r4, #16
 8000d70:	fa1f fe8c 	uxth.w	lr, ip
 8000d74:	fb09 1118 	mls	r1, r9, r8, r1
 8000d78:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d7c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d80:	4288      	cmp	r0, r1
 8000d82:	fa02 f206 	lsl.w	r2, r2, r6
 8000d86:	d90b      	bls.n	8000da0 <__udivmoddi4+0x1b8>
 8000d88:	eb1c 0101 	adds.w	r1, ip, r1
 8000d8c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d90:	f080 8088 	bcs.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d94:	4288      	cmp	r0, r1
 8000d96:	f240 8085 	bls.w	8000ea4 <__udivmoddi4+0x2bc>
 8000d9a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d9e:	4461      	add	r1, ip
 8000da0:	1a09      	subs	r1, r1, r0
 8000da2:	b2a4      	uxth	r4, r4
 8000da4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000da8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dac:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000db0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db4:	458e      	cmp	lr, r1
 8000db6:	d908      	bls.n	8000dca <__udivmoddi4+0x1e2>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc0:	d26c      	bcs.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc2:	458e      	cmp	lr, r1
 8000dc4:	d96a      	bls.n	8000e9c <__udivmoddi4+0x2b4>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4461      	add	r1, ip
 8000dca:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dce:	fba0 9402 	umull	r9, r4, r0, r2
 8000dd2:	eba1 010e 	sub.w	r1, r1, lr
 8000dd6:	42a1      	cmp	r1, r4
 8000dd8:	46c8      	mov	r8, r9
 8000dda:	46a6      	mov	lr, r4
 8000ddc:	d356      	bcc.n	8000e8c <__udivmoddi4+0x2a4>
 8000dde:	d053      	beq.n	8000e88 <__udivmoddi4+0x2a0>
 8000de0:	b15d      	cbz	r5, 8000dfa <__udivmoddi4+0x212>
 8000de2:	ebb3 0208 	subs.w	r2, r3, r8
 8000de6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dea:	fa01 f707 	lsl.w	r7, r1, r7
 8000dee:	fa22 f306 	lsr.w	r3, r2, r6
 8000df2:	40f1      	lsrs	r1, r6
 8000df4:	431f      	orrs	r7, r3
 8000df6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dfa:	2600      	movs	r6, #0
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	f1c2 0320 	rsb	r3, r2, #32
 8000e06:	40d8      	lsrs	r0, r3
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e10:	4091      	lsls	r1, r2
 8000e12:	4301      	orrs	r1, r0
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa1f fe8c 	uxth.w	lr, ip
 8000e1c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e20:	fb07 3610 	mls	r6, r7, r0, r3
 8000e24:	0c0b      	lsrs	r3, r1, #16
 8000e26:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e2a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e2e:	429e      	cmp	r6, r3
 8000e30:	fa04 f402 	lsl.w	r4, r4, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x260>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e3e:	d22f      	bcs.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e40:	429e      	cmp	r6, r3
 8000e42:	d92d      	bls.n	8000ea0 <__udivmoddi4+0x2b8>
 8000e44:	3802      	subs	r0, #2
 8000e46:	4463      	add	r3, ip
 8000e48:	1b9b      	subs	r3, r3, r6
 8000e4a:	b289      	uxth	r1, r1
 8000e4c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e50:	fb07 3316 	mls	r3, r7, r6, r3
 8000e54:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e58:	fb06 f30e 	mul.w	r3, r6, lr
 8000e5c:	428b      	cmp	r3, r1
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x28a>
 8000e60:	eb1c 0101 	adds.w	r1, ip, r1
 8000e64:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e68:	d216      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d914      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e6e:	3e02      	subs	r6, #2
 8000e70:	4461      	add	r1, ip
 8000e72:	1ac9      	subs	r1, r1, r3
 8000e74:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e78:	e738      	b.n	8000cec <__udivmoddi4+0x104>
 8000e7a:	462e      	mov	r6, r5
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	e705      	b.n	8000c8c <__udivmoddi4+0xa4>
 8000e80:	4606      	mov	r6, r0
 8000e82:	e6e3      	b.n	8000c4c <__udivmoddi4+0x64>
 8000e84:	4618      	mov	r0, r3
 8000e86:	e6f8      	b.n	8000c7a <__udivmoddi4+0x92>
 8000e88:	454b      	cmp	r3, r9
 8000e8a:	d2a9      	bcs.n	8000de0 <__udivmoddi4+0x1f8>
 8000e8c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e90:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e94:	3801      	subs	r0, #1
 8000e96:	e7a3      	b.n	8000de0 <__udivmoddi4+0x1f8>
 8000e98:	4646      	mov	r6, r8
 8000e9a:	e7ea      	b.n	8000e72 <__udivmoddi4+0x28a>
 8000e9c:	4620      	mov	r0, r4
 8000e9e:	e794      	b.n	8000dca <__udivmoddi4+0x1e2>
 8000ea0:	4640      	mov	r0, r8
 8000ea2:	e7d1      	b.n	8000e48 <__udivmoddi4+0x260>
 8000ea4:	46d0      	mov	r8, sl
 8000ea6:	e77b      	b.n	8000da0 <__udivmoddi4+0x1b8>
 8000ea8:	3b02      	subs	r3, #2
 8000eaa:	4461      	add	r1, ip
 8000eac:	e732      	b.n	8000d14 <__udivmoddi4+0x12c>
 8000eae:	4630      	mov	r0, r6
 8000eb0:	e709      	b.n	8000cc6 <__udivmoddi4+0xde>
 8000eb2:	4464      	add	r4, ip
 8000eb4:	3802      	subs	r0, #2
 8000eb6:	e742      	b.n	8000d3e <__udivmoddi4+0x156>

08000eb8 <__aeabi_idiv0>:
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop

08000ebc <FIRFilter_Init>:
#include "FIRFilter.h"

//static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {-0.027313375519213704,-0.02397030968726964,-0.07322923821766152,-0.17458688342254686,-0.23710222197190461,-0.11556723292677823,0.1941226814572781,0.4717067279432907,0.4717067279432907,0.1941226814572781,-0.11556723292677823,-0.23710222197190461,-0.17458688342254686,-0.07322923821766152,-0.02397030968726964,-0.027313375519213704};
static float FIR_IMPULSE_RESPONSE[FIR_FILTER_LENGTH] = {0.1f, 0.1f , 0.1f , 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f, 0.1f};

void FIRFilter_Init(FIRFilter *fir){
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
	//Clear Filter Buffer
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++){
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	73fb      	strb	r3, [r7, #15]
 8000ec8:	e009      	b.n	8000ede <FIRFilter_Init+0x22>
		fir->buf[n] = 0.0f;
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
 8000ecc:	687a      	ldr	r2, [r7, #4]
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	4413      	add	r3, r2
 8000ed2:	f04f 0200 	mov.w	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++){
 8000ed8:	7bfb      	ldrb	r3, [r7, #15]
 8000eda:	3301      	adds	r3, #1
 8000edc:	73fb      	strb	r3, [r7, #15]
 8000ede:	7bfb      	ldrb	r3, [r7, #15]
 8000ee0:	2b09      	cmp	r3, #9
 8000ee2:	d9f2      	bls.n	8000eca <FIRFilter_Init+0xe>
	}

	//Clear Buf Index
	fir->bufIndex = 0;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	//Clear Filter Output
	fir->out = 0.0f;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f04f 0200 	mov.w	r2, #0
 8000ef2:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <FIRFilter_Update>:

float FIRFilter_Update(FIRFilter *fir, float inp){
 8000f00:	b480      	push	{r7}
 8000f02:	b085      	sub	sp, #20
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	6078      	str	r0, [r7, #4]
 8000f08:	ed87 0a00 	vstr	s0, [r7]
	/*Store Latest Sample in buffer */
	fir->buf[fir->bufIndex] = inp;
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	683a      	ldr	r2, [r7, #0]
 8000f1a:	601a      	str	r2, [r3, #0]

	/*increment buffer index and wrap around if necessary*/
	fir->bufIndex++;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f22:	3301      	adds	r3, #1
 8000f24:	b2da      	uxtb	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

	if(fir->bufIndex == FIR_FILTER_LENGTH - 1){
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f32:	2b09      	cmp	r3, #9
 8000f34:	d103      	bne.n	8000f3e <FIRFilter_Update+0x3e>
		fir->bufIndex = 0;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	2200      	movs	r2, #0
 8000f3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	}

	/*Compute New Output Sample (Via Convolution)*/
	fir->out = 0.0f;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	f04f 0200 	mov.w	r2, #0
 8000f44:	62da      	str	r2, [r3, #44]	; 0x2c

	uint8_t sumIndex = fir->bufIndex;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8000f4c:	73fb      	strb	r3, [r7, #15]

	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++){
 8000f4e:	2300      	movs	r3, #0
 8000f50:	73bb      	strb	r3, [r7, #14]
 8000f52:	e021      	b.n	8000f98 <FIRFilter_Update+0x98>
		/*Decrement Index and Wrap if Necessary*/
		if(sumIndex > 0){
 8000f54:	7bfb      	ldrb	r3, [r7, #15]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d003      	beq.n	8000f62 <FIRFilter_Update+0x62>
			sumIndex--;
 8000f5a:	7bfb      	ldrb	r3, [r7, #15]
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	73fb      	strb	r3, [r7, #15]
 8000f60:	e001      	b.n	8000f66 <FIRFilter_Update+0x66>
		}else{
			sumIndex = FIR_FILTER_LENGTH - 1;
 8000f62:	2309      	movs	r3, #9
 8000f64:	73fb      	strb	r3, [r7, #15]
		}

		/*Multiply Impulse Response with Shifted input sample and add to output*/
		fir->out += FIR_IMPULSE_RESPONSE[n] * fir->buf[sumIndex];
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8000f6c:	7bbb      	ldrb	r3, [r7, #14]
 8000f6e:	4a11      	ldr	r2, [pc, #68]	; (8000fb4 <FIRFilter_Update+0xb4>)
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	4413      	add	r3, r2
 8000f74:	edd3 6a00 	vldr	s13, [r3]
 8000f78:	7bfb      	ldrb	r3, [r7, #15]
 8000f7a:	687a      	ldr	r2, [r7, #4]
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	4413      	add	r3, r2
 8000f80:	edd3 7a00 	vldr	s15, [r3]
 8000f84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	for(uint8_t n = 0; n < FIR_FILTER_LENGTH; n++){
 8000f92:	7bbb      	ldrb	r3, [r7, #14]
 8000f94:	3301      	adds	r3, #1
 8000f96:	73bb      	strb	r3, [r7, #14]
 8000f98:	7bbb      	ldrb	r3, [r7, #14]
 8000f9a:	2b09      	cmp	r3, #9
 8000f9c:	d9da      	bls.n	8000f54 <FIRFilter_Update+0x54>
	}

	/*return filtered output*/
	return fir->out;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa2:	ee07 3a90 	vmov	s15, r3
}
 8000fa6:	eeb0 0a67 	vmov.f32	s0, s15
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fca:	4b30      	ldr	r3, [pc, #192]	; (800108c <MX_ADC1_Init+0xd4>)
 8000fcc:	4a30      	ldr	r2, [pc, #192]	; (8001090 <MX_ADC1_Init+0xd8>)
 8000fce:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fd0:	4b2e      	ldr	r3, [pc, #184]	; (800108c <MX_ADC1_Init+0xd4>)
 8000fd2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fd6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fd8:	4b2c      	ldr	r3, [pc, #176]	; (800108c <MX_ADC1_Init+0xd4>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fde:	4b2b      	ldr	r3, [pc, #172]	; (800108c <MX_ADC1_Init+0xd4>)
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fe4:	4b29      	ldr	r3, [pc, #164]	; (800108c <MX_ADC1_Init+0xd4>)
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <MX_ADC1_Init+0xd4>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ff2:	4b26      	ldr	r3, [pc, #152]	; (800108c <MX_ADC1_Init+0xd4>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ff8:	4b24      	ldr	r3, [pc, #144]	; (800108c <MX_ADC1_Init+0xd4>)
 8000ffa:	4a26      	ldr	r2, [pc, #152]	; (8001094 <MX_ADC1_Init+0xdc>)
 8000ffc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ffe:	4b23      	ldr	r3, [pc, #140]	; (800108c <MX_ADC1_Init+0xd4>)
 8001000:	2200      	movs	r2, #0
 8001002:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 8001004:	4b21      	ldr	r3, [pc, #132]	; (800108c <MX_ADC1_Init+0xd4>)
 8001006:	2203      	movs	r2, #3
 8001008:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800100a:	4b20      	ldr	r3, [pc, #128]	; (800108c <MX_ADC1_Init+0xd4>)
 800100c:	2201      	movs	r2, #1
 800100e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001012:	4b1e      	ldr	r3, [pc, #120]	; (800108c <MX_ADC1_Init+0xd4>)
 8001014:	2201      	movs	r2, #1
 8001016:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001018:	481c      	ldr	r0, [pc, #112]	; (800108c <MX_ADC1_Init+0xd4>)
 800101a:	f001 f871 	bl	8002100 <HAL_ADC_Init>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001024:	f000 fc82 	bl	800192c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001028:	2301      	movs	r3, #1
 800102a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800102c:	2301      	movs	r3, #1
 800102e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8001030:	2302      	movs	r3, #2
 8001032:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	4619      	mov	r1, r3
 8001038:	4814      	ldr	r0, [pc, #80]	; (800108c <MX_ADC1_Init+0xd4>)
 800103a:	f001 fac3 	bl	80025c4 <HAL_ADC_ConfigChannel>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001044:	f000 fc72 	bl	800192c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001048:	2304      	movs	r3, #4
 800104a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800104c:	2302      	movs	r3, #2
 800104e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001050:	2303      	movs	r3, #3
 8001052:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001054:	463b      	mov	r3, r7
 8001056:	4619      	mov	r1, r3
 8001058:	480c      	ldr	r0, [pc, #48]	; (800108c <MX_ADC1_Init+0xd4>)
 800105a:	f001 fab3 	bl	80025c4 <HAL_ADC_ConfigChannel>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001064:	f000 fc62 	bl	800192c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001068:	2305      	movs	r3, #5
 800106a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 800106c:	2303      	movs	r3, #3
 800106e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001070:	463b      	mov	r3, r7
 8001072:	4619      	mov	r1, r3
 8001074:	4805      	ldr	r0, [pc, #20]	; (800108c <MX_ADC1_Init+0xd4>)
 8001076:	f001 faa5 	bl	80025c4 <HAL_ADC_ConfigChannel>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001080:	f000 fc54 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001084:	bf00      	nop
 8001086:	3710      	adds	r7, #16
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	20000328 	.word	0x20000328
 8001090:	40012000 	.word	0x40012000
 8001094:	0f000001 	.word	0x0f000001

08001098 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08a      	sub	sp, #40	; 0x28
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	605a      	str	r2, [r3, #4]
 80010aa:	609a      	str	r2, [r3, #8]
 80010ac:	60da      	str	r2, [r3, #12]
 80010ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a33      	ldr	r2, [pc, #204]	; (8001184 <HAL_ADC_MspInit+0xec>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d15f      	bne.n	800117a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b32      	ldr	r3, [pc, #200]	; (8001188 <HAL_ADC_MspInit+0xf0>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a31      	ldr	r2, [pc, #196]	; (8001188 <HAL_ADC_MspInit+0xf0>)
 80010c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <HAL_ADC_MspInit+0xf0>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <HAL_ADC_MspInit+0xf0>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	4a2a      	ldr	r2, [pc, #168]	; (8001188 <HAL_ADC_MspInit+0xf0>)
 80010e0:	f043 0301 	orr.w	r3, r3, #1
 80010e4:	6313      	str	r3, [r2, #48]	; 0x30
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <HAL_ADC_MspInit+0xf0>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	f003 0301 	and.w	r3, r3, #1
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80010f2:	2332      	movs	r3, #50	; 0x32
 80010f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010f6:	2303      	movs	r3, #3
 80010f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fa:	2300      	movs	r3, #0
 80010fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4821      	ldr	r0, [pc, #132]	; (800118c <HAL_ADC_MspInit+0xf4>)
 8001106:	f002 f989 	bl	800341c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <HAL_ADC_MspInit+0xf8>)
 800110c:	4a21      	ldr	r2, [pc, #132]	; (8001194 <HAL_ADC_MspInit+0xfc>)
 800110e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <HAL_ADC_MspInit+0xf8>)
 8001112:	2200      	movs	r2, #0
 8001114:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <HAL_ADC_MspInit+0xf8>)
 8001118:	2200      	movs	r2, #0
 800111a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800111c:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <HAL_ADC_MspInit+0xf8>)
 800111e:	2200      	movs	r2, #0
 8001120:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001122:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <HAL_ADC_MspInit+0xf8>)
 8001124:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001128:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800112a:	4b19      	ldr	r3, [pc, #100]	; (8001190 <HAL_ADC_MspInit+0xf8>)
 800112c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001130:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <HAL_ADC_MspInit+0xf8>)
 8001134:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001138:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800113a:	4b15      	ldr	r3, [pc, #84]	; (8001190 <HAL_ADC_MspInit+0xf8>)
 800113c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001140:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <HAL_ADC_MspInit+0xf8>)
 8001144:	2200      	movs	r2, #0
 8001146:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_ADC_MspInit+0xf8>)
 800114a:	2200      	movs	r2, #0
 800114c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800114e:	4810      	ldr	r0, [pc, #64]	; (8001190 <HAL_ADC_MspInit+0xf8>)
 8001150:	f001 fdf4 	bl	8002d3c <HAL_DMA_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800115a:	f000 fbe7 	bl	800192c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <HAL_ADC_MspInit+0xf8>)
 8001162:	639a      	str	r2, [r3, #56]	; 0x38
 8001164:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <HAL_ADC_MspInit+0xf8>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800116a:	2200      	movs	r2, #0
 800116c:	2100      	movs	r1, #0
 800116e:	2012      	movs	r0, #18
 8001170:	f001 fdad 	bl	8002cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001174:	2012      	movs	r0, #18
 8001176:	f001 fdc6 	bl	8002d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800117a:	bf00      	nop
 800117c:	3728      	adds	r7, #40	; 0x28
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40012000 	.word	0x40012000
 8001188:	40023800 	.word	0x40023800
 800118c:	40020000 	.word	0x40020000
 8001190:	20000370 	.word	0x20000370
 8001194:	40026410 	.word	0x40026410

08001198 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	607b      	str	r3, [r7, #4]
 80011a2:	4b0c      	ldr	r3, [pc, #48]	; (80011d4 <MX_DMA_Init+0x3c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a0b      	ldr	r2, [pc, #44]	; (80011d4 <MX_DMA_Init+0x3c>)
 80011a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b09      	ldr	r3, [pc, #36]	; (80011d4 <MX_DMA_Init+0x3c>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011ba:	2200      	movs	r2, #0
 80011bc:	2100      	movs	r1, #0
 80011be:	2038      	movs	r0, #56	; 0x38
 80011c0:	f001 fd85 	bl	8002cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011c4:	2038      	movs	r0, #56	; 0x38
 80011c6:	f001 fd9e 	bl	8002d06 <HAL_NVIC_EnableIRQ>

}
 80011ca:	bf00      	nop
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40023800 	.word	0x40023800

080011d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b08a      	sub	sp, #40	; 0x28
 80011dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	2200      	movs	r2, #0
 80011e4:	601a      	str	r2, [r3, #0]
 80011e6:	605a      	str	r2, [r3, #4]
 80011e8:	609a      	str	r2, [r3, #8]
 80011ea:	60da      	str	r2, [r3, #12]
 80011ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <MX_GPIO_Init+0xd4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a2d      	ldr	r2, [pc, #180]	; (80012ac <MX_GPIO_Init+0xd4>)
 80011f8:	f043 0304 	orr.w	r3, r3, #4
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <MX_GPIO_Init+0xd4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0304 	and.w	r3, r3, #4
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b27      	ldr	r3, [pc, #156]	; (80012ac <MX_GPIO_Init+0xd4>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001212:	4a26      	ldr	r2, [pc, #152]	; (80012ac <MX_GPIO_Init+0xd4>)
 8001214:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001218:	6313      	str	r3, [r2, #48]	; 0x30
 800121a:	4b24      	ldr	r3, [pc, #144]	; (80012ac <MX_GPIO_Init+0xd4>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <MX_GPIO_Init+0xd4>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a1f      	ldr	r2, [pc, #124]	; (80012ac <MX_GPIO_Init+0xd4>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <MX_GPIO_Init+0xd4>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <MX_GPIO_Init+0xd4>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a18      	ldr	r2, [pc, #96]	; (80012ac <MX_GPIO_Init+0xd4>)
 800124c:	f043 0302 	orr.w	r3, r3, #2
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <MX_GPIO_Init+0xd4>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0302 	and.w	r3, r3, #2
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800125e:	2301      	movs	r3, #1
 8001260:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001262:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001266:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001268:	2301      	movs	r3, #1
 800126a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126c:	f107 0314 	add.w	r3, r7, #20
 8001270:	4619      	mov	r1, r3
 8001272:	480f      	ldr	r0, [pc, #60]	; (80012b0 <MX_GPIO_Init+0xd8>)
 8001274:	f002 f8d2 	bl	800341c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001278:	231e      	movs	r3, #30
 800127a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800127c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001280:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	4619      	mov	r1, r3
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <MX_GPIO_Init+0xdc>)
 800128e:	f002 f8c5 	bl	800341c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2100      	movs	r1, #0
 8001296:	2006      	movs	r0, #6
 8001298:	f001 fd19 	bl	8002cce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800129c:	2006      	movs	r0, #6
 800129e:	f001 fd32 	bl	8002d06 <HAL_NVIC_EnableIRQ>

}
 80012a2:	bf00      	nop
 80012a4:	3728      	adds	r7, #40	; 0x28
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800
 80012b0:	40020000 	.word	0x40020000
 80012b4:	40020400 	.word	0x40020400

080012b8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012bc:	4b12      	ldr	r3, [pc, #72]	; (8001308 <MX_I2C1_Init+0x50>)
 80012be:	4a13      	ldr	r2, [pc, #76]	; (800130c <MX_I2C1_Init+0x54>)
 80012c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012c2:	4b11      	ldr	r3, [pc, #68]	; (8001308 <MX_I2C1_Init+0x50>)
 80012c4:	4a12      	ldr	r2, [pc, #72]	; (8001310 <MX_I2C1_Init+0x58>)
 80012c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c8:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <MX_I2C1_Init+0x50>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012ce:	4b0e      	ldr	r3, [pc, #56]	; (8001308 <MX_I2C1_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012d4:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <MX_I2C1_Init+0x50>)
 80012d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012dc:	4b0a      	ldr	r3, [pc, #40]	; (8001308 <MX_I2C1_Init+0x50>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <MX_I2C1_Init+0x50>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e8:	4b07      	ldr	r3, [pc, #28]	; (8001308 <MX_I2C1_Init+0x50>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ee:	4b06      	ldr	r3, [pc, #24]	; (8001308 <MX_I2C1_Init+0x50>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_I2C1_Init+0x50>)
 80012f6:	f002 fa2d 	bl	8003754 <HAL_I2C_Init>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001300:	f000 fb14 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200003d0 	.word	0x200003d0
 800130c:	40005400 	.word	0x40005400
 8001310:	000186a0 	.word	0x000186a0

08001314 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b08a      	sub	sp, #40	; 0x28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	2200      	movs	r2, #0
 8001322:	601a      	str	r2, [r3, #0]
 8001324:	605a      	str	r2, [r3, #4]
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a19      	ldr	r2, [pc, #100]	; (8001398 <HAL_I2C_MspInit+0x84>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d12b      	bne.n	800138e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b18      	ldr	r3, [pc, #96]	; (800139c <HAL_I2C_MspInit+0x88>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a17      	ldr	r2, [pc, #92]	; (800139c <HAL_I2C_MspInit+0x88>)
 8001340:	f043 0302 	orr.w	r3, r3, #2
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <HAL_I2C_MspInit+0x88>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001352:	23c0      	movs	r3, #192	; 0xc0
 8001354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001356:	2312      	movs	r3, #18
 8001358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001362:	2304      	movs	r3, #4
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001366:	f107 0314 	add.w	r3, r7, #20
 800136a:	4619      	mov	r1, r3
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <HAL_I2C_MspInit+0x8c>)
 800136e:	f002 f855 	bl	800341c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b09      	ldr	r3, [pc, #36]	; (800139c <HAL_I2C_MspInit+0x88>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	4a08      	ldr	r2, [pc, #32]	; (800139c <HAL_I2C_MspInit+0x88>)
 800137c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001380:	6413      	str	r3, [r2, #64]	; 0x40
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_I2C_MspInit+0x88>)
 8001384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001386:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800138e:	bf00      	nop
 8001390:	3728      	adds	r7, #40	; 0x28
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40005400 	.word	0x40005400
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020400 	.word	0x40020400

080013a4 <Signal_Buf_Init>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Signal_Buf_Init(SignalFeature_t *signal){
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	//Clear Filter Buffer
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 80013ac:	2300      	movs	r3, #0
 80013ae:	73fb      	strb	r3, [r7, #15]
 80013b0:	e009      	b.n	80013c6 <Signal_Buf_Init+0x22>
		signal->buf[n] = 0.0f;
 80013b2:	7bfb      	ldrb	r3, [r7, #15]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	009b      	lsls	r3, r3, #2
 80013b8:	4413      	add	r3, r2
 80013ba:	f04f 0200 	mov.w	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	3301      	adds	r3, #1
 80013c4:	73fb      	strb	r3, [r7, #15]
 80013c6:	7bfb      	ldrb	r3, [r7, #15]
 80013c8:	2b63      	cmp	r3, #99	; 0x63
 80013ca:	d9f2      	bls.n	80013b2 <Signal_Buf_Init+0xe>
	}

	//Clear Buf Index
	signal->bufIndex = 0;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190

	//Clear Filter Output
	signal->energy = 0.0f;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <Signal_Buf_Update>:

void Signal_Buf_Update(SignalFeature_t *signal, float inp){
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
 80013f2:	ed87 0a00 	vstr	s0, [r7]
	/*Store Latest Sample in buffer */
	signal->buf[signal->bufIndex] = inp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 80013fc:	687a      	ldr	r2, [r7, #4]
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	683a      	ldr	r2, [r7, #0]
 8001404:	601a      	str	r2, [r3, #0]

	/*increment buffer index and wrap around if necessary*/
	signal->bufIndex++;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 800140c:	3301      	adds	r3, #1
 800140e:	b2da      	uxtb	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190

	if(signal->bufIndex == SIGNAL_SAMPLES_LENGTH){
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 800141c:	2b64      	cmp	r3, #100	; 0x64
 800141e:	d103      	bne.n	8001428 <Signal_Buf_Update+0x3e>
		signal->bufIndex = 0;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2200      	movs	r2, #0
 8001424:	f883 2190 	strb.w	r2, [r3, #400]	; 0x190
	}
}
 8001428:	bf00      	nop
 800142a:	370c      	adds	r7, #12
 800142c:	46bd      	mov	sp, r7
 800142e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001432:	4770      	bx	lr

08001434 <Signal_Energy_Calculate>:

float Signal_Energy_Calculate(SignalFeature_t *signal){
 8001434:	b480      	push	{r7}
 8001436:	b085      	sub	sp, #20
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	signal->energy = 0.0f;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f04f 0200 	mov.w	r2, #0
 8001442:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194

	uint8_t sumIndex = signal->bufIndex;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f893 3190 	ldrb.w	r3, [r3, #400]	; 0x190
 800144c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 800144e:	2300      	movs	r3, #0
 8001450:	73bb      	strb	r3, [r7, #14]
 8001452:	e021      	b.n	8001498 <Signal_Energy_Calculate+0x64>
		/*Decrement Index and Wrap if Necessary*/
		if(sumIndex < SIGNAL_SAMPLES_LENGTH -1){
 8001454:	7bfb      	ldrb	r3, [r7, #15]
 8001456:	2b62      	cmp	r3, #98	; 0x62
 8001458:	d803      	bhi.n	8001462 <Signal_Energy_Calculate+0x2e>
			sumIndex++;
 800145a:	7bfb      	ldrb	r3, [r7, #15]
 800145c:	3301      	adds	r3, #1
 800145e:	73fb      	strb	r3, [r7, #15]
 8001460:	e001      	b.n	8001466 <Signal_Energy_Calculate+0x32>
		}else{
			sumIndex = 0;
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
		}

		/*Multiply Impulse Response with Shifted input sample and add to output*/
		signal->energy += (signal->buf[n] * signal->buf[n]);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	ed93 7a65 	vldr	s14, [r3, #404]	; 0x194
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	687a      	ldr	r2, [r7, #4]
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	4413      	add	r3, r2
 8001474:	edd3 6a00 	vldr	s13, [r3]
 8001478:	7bbb      	ldrb	r3, [r7, #14]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001488:	ee77 7a27 	vadd.f32	s15, s14, s15
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	edc3 7a65 	vstr	s15, [r3, #404]	; 0x194
	for(uint8_t n = 0; n < SIGNAL_SAMPLES_LENGTH; n++){
 8001492:	7bbb      	ldrb	r3, [r7, #14]
 8001494:	3301      	adds	r3, #1
 8001496:	73bb      	strb	r3, [r7, #14]
 8001498:	7bbb      	ldrb	r3, [r7, #14]
 800149a:	2b63      	cmp	r3, #99	; 0x63
 800149c:	d9da      	bls.n	8001454 <Signal_Energy_Calculate+0x20>
	}
	return signal->energy;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 80014a4:	ee07 3a90 	vmov	s15, r3
}
 80014a8:	eeb0 0a67 	vmov.f32	s0, s15
 80014ac:	3714      	adds	r7, #20
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr
	...

080014b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	PID_Init(&pid, kp, ti, td, dt);
 80014bc:	4b1d      	ldr	r3, [pc, #116]	; (8001534 <main+0x7c>)
 80014be:	edd3 7a00 	vldr	s15, [r3]
 80014c2:	4b1d      	ldr	r3, [pc, #116]	; (8001538 <main+0x80>)
 80014c4:	ed93 7a00 	vldr	s14, [r3]
 80014c8:	4b1c      	ldr	r3, [pc, #112]	; (800153c <main+0x84>)
 80014ca:	edd3 6a00 	vldr	s13, [r3]
 80014ce:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <main+0x88>)
 80014d0:	ed93 6a00 	vldr	s12, [r3]
 80014d4:	eef0 1a46 	vmov.f32	s3, s12
 80014d8:	eeb0 1a66 	vmov.f32	s2, s13
 80014dc:	eef0 0a47 	vmov.f32	s1, s14
 80014e0:	eeb0 0a67 	vmov.f32	s0, s15
 80014e4:	4817      	ldr	r0, [pc, #92]	; (8001544 <main+0x8c>)
 80014e6:	f000 fa26 	bl	8001936 <PID_Init>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ea:	f000 fd73 	bl	8001fd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ee:	f000 f837 	bl	8001560 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f2:	f7ff fe71 	bl	80011d8 <MX_GPIO_Init>
  MX_DMA_Init();
 80014f6:	f7ff fe4f 	bl	8001198 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80014fa:	f008 fc9b 	bl	8009e34 <MX_USB_DEVICE_Init>
  MX_TIM10_Init();
 80014fe:	f000 fca3 	bl	8001e48 <MX_TIM10_Init>
  MX_ADC1_Init();
 8001502:	f7ff fd59 	bl	8000fb8 <MX_ADC1_Init>
  MX_TIM9_Init();
 8001506:	f000 fc3b 	bl	8001d80 <MX_TIM9_Init>
  MX_I2C1_Init();
 800150a:	f7ff fed5 	bl	80012b8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim10);
 800150e:	480e      	ldr	r0, [pc, #56]	; (8001548 <main+0x90>)
 8001510:	f004 f976 	bl	8005800 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001514:	2100      	movs	r1, #0
 8001516:	480d      	ldr	r0, [pc, #52]	; (800154c <main+0x94>)
 8001518:	f004 fa2e 	bl	8005978 <HAL_TIM_PWM_Start>
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 3);
 800151c:	2203      	movs	r2, #3
 800151e:	490c      	ldr	r1, [pc, #48]	; (8001550 <main+0x98>)
 8001520:	480c      	ldr	r0, [pc, #48]	; (8001554 <main+0x9c>)
 8001522:	f000 ff41 	bl	80023a8 <HAL_ADC_Start_DMA>

  FIRFilter_Init(&mav);
 8001526:	480c      	ldr	r0, [pc, #48]	; (8001558 <main+0xa0>)
 8001528:	f7ff fcc8 	bl	8000ebc <FIRFilter_Init>
  Signal_Buf_Init(&sig);
 800152c:	480b      	ldr	r0, [pc, #44]	; (800155c <main+0xa4>)
 800152e:	f7ff ff39 	bl	80013a4 <Signal_Buf_Init>
//  pid.dt = dt;
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001532:	e7fe      	b.n	8001532 <main+0x7a>
 8001534:	20000030 	.word	0x20000030
 8001538:	20000034 	.word	0x20000034
 800153c:	20000038 	.word	0x20000038
 8001540:	2000003c 	.word	0x2000003c
 8001544:	2000062c 	.word	0x2000062c
 8001548:	200006a0 	.word	0x200006a0
 800154c:	20000658 	.word	0x20000658
 8001550:	20000430 	.word	0x20000430
 8001554:	20000328 	.word	0x20000328
 8001558:	20000464 	.word	0x20000464
 800155c:	20000494 	.word	0x20000494

08001560 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b094      	sub	sp, #80	; 0x50
 8001564:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001566:	f107 0320 	add.w	r3, r7, #32
 800156a:	2230      	movs	r2, #48	; 0x30
 800156c:	2100      	movs	r1, #0
 800156e:	4618      	mov	r0, r3
 8001570:	f009 f9a4 	bl	800a8bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001584:	2300      	movs	r3, #0
 8001586:	60bb      	str	r3, [r7, #8]
 8001588:	4b29      	ldr	r3, [pc, #164]	; (8001630 <SystemClock_Config+0xd0>)
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	4a28      	ldr	r2, [pc, #160]	; (8001630 <SystemClock_Config+0xd0>)
 800158e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001592:	6413      	str	r3, [r2, #64]	; 0x40
 8001594:	4b26      	ldr	r3, [pc, #152]	; (8001630 <SystemClock_Config+0xd0>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015a0:	2300      	movs	r3, #0
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	4b23      	ldr	r3, [pc, #140]	; (8001634 <SystemClock_Config+0xd4>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80015ac:	4a21      	ldr	r2, [pc, #132]	; (8001634 <SystemClock_Config+0xd4>)
 80015ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015b2:	6013      	str	r3, [r2, #0]
 80015b4:	4b1f      	ldr	r3, [pc, #124]	; (8001634 <SystemClock_Config+0xd4>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015c0:	2301      	movs	r3, #1
 80015c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ca:	2302      	movs	r3, #2
 80015cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80015d4:	2319      	movs	r3, #25
 80015d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80015d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80015dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80015de:	2304      	movs	r3, #4
 80015e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80015e2:	2307      	movs	r3, #7
 80015e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e6:	f107 0320 	add.w	r3, r7, #32
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 fc74 	bl	8004ed8 <HAL_RCC_OscConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015f6:	f000 f999 	bl	800192c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fa:	230f      	movs	r3, #15
 80015fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015fe:	2302      	movs	r3, #2
 8001600:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800160a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160c:	2300      	movs	r3, #0
 800160e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001610:	f107 030c 	add.w	r3, r7, #12
 8001614:	2102      	movs	r1, #2
 8001616:	4618      	mov	r0, r3
 8001618:	f003 fed6 	bl	80053c8 <HAL_RCC_ClockConfig>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001622:	f000 f983 	bl	800192c <Error_Handler>
  }
}
 8001626:	bf00      	nop
 8001628:	3750      	adds	r7, #80	; 0x50
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40023800 	.word	0x40023800
 8001634:	40007000 	.word	0x40007000

08001638 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback (TIM_HandleTypeDef *htim){
 8001638:	b580      	push	{r7, lr}
 800163a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 800163e:	af02      	add	r7, sp, #8
 8001640:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 8001644:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001648:	6018      	str	r0, [r3, #0]
	if(htim->Instance == TIM10){
 800164a:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 800164e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a78      	ldr	r2, [pc, #480]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x200>)
 8001658:	4293      	cmp	r3, r2
 800165a:	f040 80e7 	bne.w	800182c <HAL_TIM_PeriodElapsedCallback+0x1f4>
//		__HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, servo_pwm);

		char logbuf[1024];
		FIRFilter_Update(&mav, emg_raw);
 800165e:	4b77      	ldr	r3, [pc, #476]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x204>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	ee07 3a90 	vmov	s15, r3
 8001666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800166a:	eeb0 0a67 	vmov.f32	s0, s15
 800166e:	4874      	ldr	r0, [pc, #464]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8001670:	f7ff fc46 	bl	8000f00 <FIRFilter_Update>
		pid_out = PID_Update(&pid, arm_pressure, fsr[0]) + 1500;
 8001674:	4b73      	ldr	r3, [pc, #460]	; (8001844 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a73      	ldr	r2, [pc, #460]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x210>)
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	4619      	mov	r1, r3
 800167e:	4873      	ldr	r0, [pc, #460]	; (800184c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8001680:	f000 f990 	bl	80019a4 <PID_Update>
 8001684:	eef0 7a40 	vmov.f32	s15, s0
 8001688:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001850 <HAL_TIM_PeriodElapsedCallback+0x218>
 800168c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001690:	4b70      	ldr	r3, [pc, #448]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001692:	edc3 7a00 	vstr	s15, [r3]
		pid_out_clamped = pid_out;
 8001696:	4b6f      	ldr	r3, [pc, #444]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a6f      	ldr	r2, [pc, #444]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x220>)
 800169c:	6013      	str	r3, [r2, #0]

		if(pid_out > 2000){
 800169e:	4b6d      	ldr	r3, [pc, #436]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800185c <HAL_TIM_PeriodElapsedCallback+0x224>
 80016a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016b0:	dd03      	ble.n	80016ba <HAL_TIM_PeriodElapsedCallback+0x82>
			pid_out_clamped = 2000;
 80016b2:	4b69      	ldr	r3, [pc, #420]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80016b4:	4a6a      	ldr	r2, [pc, #424]	; (8001860 <HAL_TIM_PeriodElapsedCallback+0x228>)
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	e00c      	b.n	80016d4 <HAL_TIM_PeriodElapsedCallback+0x9c>
		}else if(pid_out < 1000){
 80016ba:	4b66      	ldr	r3, [pc, #408]	; (8001854 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8001864 <HAL_TIM_PeriodElapsedCallback+0x22c>
 80016c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80016c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016cc:	d502      	bpl.n	80016d4 <HAL_TIM_PeriodElapsedCallback+0x9c>
			pid_out_clamped = 1000;
 80016ce:	4b62      	ldr	r3, [pc, #392]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80016d0:	4a65      	ldr	r2, [pc, #404]	; (8001868 <HAL_TIM_PeriodElapsedCallback+0x230>)
 80016d2:	601a      	str	r2, [r3, #0]
		}

		if(arm_state_manual == 1){
 80016d4:	4b65      	ldr	r3, [pc, #404]	; (800186c <HAL_TIM_PeriodElapsedCallback+0x234>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d10a      	bne.n	80016f2 <HAL_TIM_PeriodElapsedCallback+0xba>
		  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, pid_out_clamped);
 80016dc:	4b5e      	ldr	r3, [pc, #376]	; (8001858 <HAL_TIM_PeriodElapsedCallback+0x220>)
 80016de:	edd3 7a00 	vldr	s15, [r3]
 80016e2:	4b63      	ldr	r3, [pc, #396]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80016ea:	ee17 2a90 	vmov	r2, s15
 80016ee:	635a      	str	r2, [r3, #52]	; 0x34
 80016f0:	e004      	b.n	80016fc <HAL_TIM_PeriodElapsedCallback+0xc4>
		}else{
		  __HAL_TIM_SET_COMPARE(&htim9, TIM_CHANNEL_1, 1000);
 80016f2:	4b5f      	ldr	r3, [pc, #380]	; (8001870 <HAL_TIM_PeriodElapsedCallback+0x238>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80016fa:	635a      	str	r2, [r3, #52]	; 0x34
		}

//		emg_rawdiff = mav.out - emg_rawbfr;
		emg_rawdiff = emg_raw - emg_rawbfr;
 80016fc:	4b4f      	ldr	r3, [pc, #316]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x204>)
 80016fe:	881b      	ldrh	r3, [r3, #0]
 8001700:	ee07 3a90 	vmov	s15, r3
 8001704:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001708:	4b5a      	ldr	r3, [pc, #360]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 800170a:	edd3 7a00 	vldr	s15, [r3]
 800170e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001712:	4b59      	ldr	r3, [pc, #356]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001714:	edc3 7a00 	vstr	s15, [r3]
//		emg_rawdiff = abs(emg_rawdiff);
		if(emg_rawdiff < 0){
 8001718:	4b57      	ldr	r3, [pc, #348]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001726:	d507      	bpl.n	8001738 <HAL_TIM_PeriodElapsedCallback+0x100>
			emg_rawdiff = emg_rawdiff * -1;
 8001728:	4b53      	ldr	r3, [pc, #332]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800172a:	edd3 7a00 	vldr	s15, [r3]
 800172e:	eef1 7a67 	vneg.f32	s15, s15
 8001732:	4b51      	ldr	r3, [pc, #324]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8001734:	edc3 7a00 	vstr	s15, [r3]
		}
		Signal_Buf_Update(&sig, emg_rawdiff);
 8001738:	4b4f      	ldr	r3, [pc, #316]	; (8001878 <HAL_TIM_PeriodElapsedCallback+0x240>)
 800173a:	edd3 7a00 	vldr	s15, [r3]
 800173e:	eeb0 0a67 	vmov.f32	s0, s15
 8001742:	484e      	ldr	r0, [pc, #312]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001744:	f7ff fe51 	bl	80013ea <Signal_Buf_Update>
		Signal_Energy_Calculate(&sig);
 8001748:	484c      	ldr	r0, [pc, #304]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x244>)
 800174a:	f7ff fe73 	bl	8001434 <Signal_Energy_Calculate>

		if(sig.energy > arm_condition_thresh){
 800174e:	4b4b      	ldr	r3, [pc, #300]	; (800187c <HAL_TIM_PeriodElapsedCallback+0x244>)
 8001750:	ed93 7a65 	vldr	s14, [r3, #404]	; 0x194
 8001754:	4b4a      	ldr	r3, [pc, #296]	; (8001880 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	ee07 3a90 	vmov	s15, r3
 800175c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001768:	dd1c      	ble.n	80017a4 <HAL_TIM_PeriodElapsedCallback+0x16c>
			if(prosthetic_statebfr == true){
 800176a:	4b46      	ldr	r3, [pc, #280]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d014      	beq.n	800179c <HAL_TIM_PeriodElapsedCallback+0x164>
				truth_counter_thresh++;
 8001772:	4b45      	ldr	r3, [pc, #276]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	3301      	adds	r3, #1
 8001778:	b2da      	uxtb	r2, r3
 800177a:	4b43      	ldr	r3, [pc, #268]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x250>)
 800177c:	701a      	strb	r2, [r3, #0]
				if(truth_counter_thresh >= truth_counter_maxval){
 800177e:	4b42      	ldr	r3, [pc, #264]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001780:	781a      	ldrb	r2, [r3, #0]
 8001782:	4b42      	ldr	r3, [pc, #264]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x254>)
 8001784:	781b      	ldrb	r3, [r3, #0]
 8001786:	429a      	cmp	r2, r3
 8001788:	d308      	bcc.n	800179c <HAL_TIM_PeriodElapsedCallback+0x164>
					prosthetic_state = true;
 800178a:	4b41      	ldr	r3, [pc, #260]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x258>)
 800178c:	2201      	movs	r2, #1
 800178e:	701a      	strb	r2, [r3, #0]
					arm_state = 1;
 8001790:	4b40      	ldr	r3, [pc, #256]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 8001792:	2201      	movs	r2, #1
 8001794:	701a      	strb	r2, [r3, #0]
					truth_counter_thresh = 0;
 8001796:	4b3c      	ldr	r3, [pc, #240]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x250>)
 8001798:	2200      	movs	r2, #0
 800179a:	701a      	strb	r2, [r3, #0]
				}
			}
			prosthetic_statebfr = true;
 800179c:	4b39      	ldr	r3, [pc, #228]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 800179e:	2201      	movs	r2, #1
 80017a0:	701a      	strb	r2, [r3, #0]
 80017a2:	e01e      	b.n	80017e2 <HAL_TIM_PeriodElapsedCallback+0x1aa>
		}else{
			if(prosthetic_statebfr == false){
 80017a4:	4b37      	ldr	r3, [pc, #220]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	f083 0301 	eor.w	r3, r3, #1
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d014      	beq.n	80017dc <HAL_TIM_PeriodElapsedCallback+0x1a4>
				truth_counter_thresh++;
 80017b2:	4b35      	ldr	r3, [pc, #212]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	3301      	adds	r3, #1
 80017b8:	b2da      	uxtb	r2, r3
 80017ba:	4b33      	ldr	r3, [pc, #204]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80017bc:	701a      	strb	r2, [r3, #0]
				if(truth_counter_thresh >= truth_counter_maxval){
 80017be:	4b32      	ldr	r3, [pc, #200]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80017c0:	781a      	ldrb	r2, [r3, #0]
 80017c2:	4b32      	ldr	r3, [pc, #200]	; (800188c <HAL_TIM_PeriodElapsedCallback+0x254>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d308      	bcc.n	80017dc <HAL_TIM_PeriodElapsedCallback+0x1a4>
					prosthetic_state = false;
 80017ca:	4b31      	ldr	r3, [pc, #196]	; (8001890 <HAL_TIM_PeriodElapsedCallback+0x258>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
					arm_state = 0;
 80017d0:	4b30      	ldr	r3, [pc, #192]	; (8001894 <HAL_TIM_PeriodElapsedCallback+0x25c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	701a      	strb	r2, [r3, #0]
					truth_counter_thresh = 0;
 80017d6:	4b2c      	ldr	r3, [pc, #176]	; (8001888 <HAL_TIM_PeriodElapsedCallback+0x250>)
 80017d8:	2200      	movs	r2, #0
 80017da:	701a      	strb	r2, [r3, #0]
				}
			}
			prosthetic_statebfr = false;
 80017dc:	4b29      	ldr	r3, [pc, #164]	; (8001884 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 80017de:	2200      	movs	r2, #0
 80017e0:	701a      	strb	r2, [r3, #0]
		}

//		sprintf(logbuf, "%.2f,%d,%.2f,%.2f\r\n",emg_raw, fsr, arm_pressure, pid_out);
		sprintf(logbuf, "%d,%d,%d\r\n",emg_raw, fsr[0], fsr[1]);
 80017e2:	4b16      	ldr	r3, [pc, #88]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x204>)
 80017e4:	881b      	ldrh	r3, [r3, #0]
 80017e6:	4619      	mov	r1, r3
 80017e8:	4b17      	ldr	r3, [pc, #92]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	4b16      	ldr	r3, [pc, #88]	; (8001848 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f107 0008 	add.w	r0, r7, #8
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	4613      	mov	r3, r2
 80017f8:	460a      	mov	r2, r1
 80017fa:	4927      	ldr	r1, [pc, #156]	; (8001898 <HAL_TIM_PeriodElapsedCallback+0x260>)
 80017fc:	f009 fcd0 	bl	800b1a0 <siprintf>
		CDC_Transmit_FS((uint8_t*)logbuf, strlen(logbuf));
 8001800:	f107 0308 	add.w	r3, r7, #8
 8001804:	4618      	mov	r0, r3
 8001806:	f7fe fceb 	bl	80001e0 <strlen>
 800180a:	4603      	mov	r3, r0
 800180c:	b29a      	uxth	r2, r3
 800180e:	f107 0308 	add.w	r3, r7, #8
 8001812:	4611      	mov	r1, r2
 8001814:	4618      	mov	r0, r3
 8001816:	f008 fbcb 	bl	8009fb0 <CDC_Transmit_FS>

//		emg_rawbfr = mav.out;
		emg_rawbfr = emg_raw;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x204>)
 800181c:	881b      	ldrh	r3, [r3, #0]
 800181e:	ee07 3a90 	vmov	s15, r3
 8001822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001826:	4b13      	ldr	r3, [pc, #76]	; (8001874 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8001828:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800182c:	bf00      	nop
 800182e:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	40014400 	.word	0x40014400
 800183c:	20000448 	.word	0x20000448
 8001840:	20000464 	.word	0x20000464
 8001844:	20000444 	.word	0x20000444
 8001848:	2000043c 	.word	0x2000043c
 800184c:	2000062c 	.word	0x2000062c
 8001850:	44bb8000 	.word	0x44bb8000
 8001854:	2000045c 	.word	0x2000045c
 8001858:	20000460 	.word	0x20000460
 800185c:	44fa0000 	.word	0x44fa0000
 8001860:	44fa0000 	.word	0x44fa0000
 8001864:	447a0000 	.word	0x447a0000
 8001868:	447a0000 	.word	0x447a0000
 800186c:	2000044b 	.word	0x2000044b
 8001870:	20000658 	.word	0x20000658
 8001874:	20000450 	.word	0x20000450
 8001878:	20000454 	.word	0x20000454
 800187c:	20000494 	.word	0x20000494
 8001880:	2000002c 	.word	0x2000002c
 8001884:	2000045a 	.word	0x2000045a
 8001888:	20000458 	.word	0x20000458
 800188c:	20000028 	.word	0x20000028
 8001890:	20000459 	.word	0x20000459
 8001894:	2000044a 	.word	0x2000044a
 8001898:	0800d6a8 	.word	0x0800d6a8

0800189c <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	for(int i =0; i < 3; i++){
 80018a4:	2300      	movs	r3, #0
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	e00a      	b.n	80018c0 <HAL_ADC_ConvCpltCallback+0x24>
		adc[i] = adc_buffer[i];
 80018aa:	4a11      	ldr	r2, [pc, #68]	; (80018f0 <HAL_ADC_ConvCpltCallback+0x54>)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80018b2:	4910      	ldr	r1, [pc, #64]	; (80018f4 <HAL_ADC_ConvCpltCallback+0x58>)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i =0; i < 3; i++){
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3301      	adds	r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	ddf1      	ble.n	80018aa <HAL_ADC_ConvCpltCallback+0xe>
	}
	emg_raw = adc[0];
 80018c6:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_ADC_ConvCpltCallback+0x58>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_ADC_ConvCpltCallback+0x5c>)
 80018ce:	801a      	strh	r2, [r3, #0]
	fsr[0] = adc[1];
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_ADC_ConvCpltCallback+0x58>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	461a      	mov	r2, r3
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_ADC_ConvCpltCallback+0x60>)
 80018d8:	601a      	str	r2, [r3, #0]
	fsr[1] = adc[2];
 80018da:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_ADC_ConvCpltCallback+0x58>)
 80018dc:	689b      	ldr	r3, [r3, #8]
 80018de:	461a      	mov	r2, r3
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <HAL_ADC_ConvCpltCallback+0x60>)
 80018e2:	605a      	str	r2, [r3, #4]

}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	20000430 	.word	0x20000430
 80018f4:	20000424 	.word	0x20000424
 80018f8:	20000448 	.word	0x20000448
 80018fc:	2000043c 	.word	0x2000043c

08001900 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_0){
 800190a:	88fb      	ldrh	r3, [r7, #6]
 800190c:	2b01      	cmp	r3, #1
 800190e:	d105      	bne.n	800191c <HAL_GPIO_EXTI_Callback+0x1c>
		calibration_counter++;
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_GPIO_EXTI_Callback+0x28>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	3301      	adds	r3, #1
 8001916:	b2da      	uxtb	r2, r3
 8001918:	4b03      	ldr	r3, [pc, #12]	; (8001928 <HAL_GPIO_EXTI_Callback+0x28>)
 800191a:	701a      	strb	r2, [r3, #0]
	}
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	2000044c 	.word	0x2000044c

0800192c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001930:	b672      	cpsid	i
}
 8001932:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001934:	e7fe      	b.n	8001934 <Error_Handler+0x8>

08001936 <PID_Init>:
 *      Author: Nawab
 */

#include "pid.h"

void PID_Init(PID_t *pid, float _kp, float _ti, float _td, float _dt){
 8001936:	b480      	push	{r7}
 8001938:	b087      	sub	sp, #28
 800193a:	af00      	add	r7, sp, #0
 800193c:	6178      	str	r0, [r7, #20]
 800193e:	ed87 0a04 	vstr	s0, [r7, #16]
 8001942:	edc7 0a03 	vstr	s1, [r7, #12]
 8001946:	ed87 1a02 	vstr	s2, [r7, #8]
 800194a:	edc7 1a01 	vstr	s3, [r7, #4]
	pid->kp = _kp;
 800194e:	697b      	ldr	r3, [r7, #20]
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	601a      	str	r2, [r3, #0]
	pid->ti = _ti;
 8001954:	697b      	ldr	r3, [r7, #20]
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	605a      	str	r2, [r3, #4]
	pid->td = _td;
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	68ba      	ldr	r2, [r7, #8]
 800195e:	609a      	str	r2, [r3, #8]

	pid->p = 0;
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	60da      	str	r2, [r3, #12]
	pid->i = 0;
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	f04f 0200 	mov.w	r2, #0
 800196e:	611a      	str	r2, [r3, #16]
	pid->d = 0;
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	f04f 0200 	mov.w	r2, #0
 8001976:	615a      	str	r2, [r3, #20]

	pid->e_now = 0;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	f04f 0200 	mov.w	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
	pid->e_prev = 0;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	f04f 0200 	mov.w	r2, #0
 8001986:	61da      	str	r2, [r3, #28]
	pid->de = 0;
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	621a      	str	r2, [r3, #32]
	pid->dt = _dt;
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001996:	bf00      	nop
 8001998:	371c      	adds	r7, #28
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
	...

080019a4 <PID_Update>:

float PID_Update(PID_t *pid, int reference, int input){
 80019a4:	b480      	push	{r7}
 80019a6:	b087      	sub	sp, #28
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
	float out;
	pid->e_now = reference - input;
 80019b0:	68ba      	ldr	r2, [r7, #8]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	ee07 3a90 	vmov	s15, r3
 80019ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	edc3 7a06 	vstr	s15, [r3, #24]
	pid->de = pid->e_now - pid->e_prev;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	ed93 7a06 	vldr	s14, [r3, #24]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	edd3 7a07 	vldr	s15, [r3, #28]
 80019d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	edc3 7a08 	vstr	s15, [r3, #32]

	pid->p = pid->kp * pid->e_now;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	ed93 7a00 	vldr	s14, [r3]
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	edd3 7a06 	vldr	s15, [r3, #24]
 80019e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	edc3 7a03 	vstr	s15, [r3, #12]
	pid->i = pid->i + (pid->e_now * pid->dt);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	ed93 7a04 	vldr	s14, [r3, #16]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	edd3 6a06 	vldr	s13, [r3, #24]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001a02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	edc3 7a04 	vstr	s15, [r3, #16]
	if(pid->i > 1000){
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a16:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8001abc <PID_Update+0x118>
 8001a1a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a22:	dd03      	ble.n	8001a2c <PID_Update+0x88>
		pid->i = 1000;
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	4a26      	ldr	r2, [pc, #152]	; (8001ac0 <PID_Update+0x11c>)
 8001a28:	611a      	str	r2, [r3, #16]
 8001a2a:	e00c      	b.n	8001a46 <PID_Update+0xa2>
	}else if(pid->i < -1000){
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a32:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8001ac4 <PID_Update+0x120>
 8001a36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a3e:	d502      	bpl.n	8001a46 <PID_Update+0xa2>
		pid->i = -1000;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	4a21      	ldr	r2, [pc, #132]	; (8001ac8 <PID_Update+0x124>)
 8001a44:	611a      	str	r2, [r3, #16]
	}
	pid->d = pid->de / pid->dt;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	edd3 6a08 	vldr	s13, [r3, #32]
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001a52:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	edc3 7a05 	vstr	s15, [r3, #20]

	out = pid->kp * (pid->p + (1 / pid->ti) * pid->i + pid->td * pid->d);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	ed93 7a00 	vldr	s14, [r3]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	edd3 6a03 	vldr	s13, [r3, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a6e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8001a72:	ee85 6aa7 	vdiv.f32	s12, s11, s15
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	edd3 7a04 	vldr	s15, [r3, #16]
 8001a7c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a80:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	ed93 6a02 	vldr	s12, [r3, #8]
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001a90:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001a94:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001a98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a9c:	edc7 7a05 	vstr	s15, [r7, #20]
	pid->e_prev = pid->e_now;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	699a      	ldr	r2, [r3, #24]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	61da      	str	r2, [r3, #28]
	return out;
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	ee07 3a90 	vmov	s15, r3
}
 8001aae:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab2:	371c      	adds	r7, #28
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	447a0000 	.word	0x447a0000
 8001ac0:	447a0000 	.word	0x447a0000
 8001ac4:	c47a0000 	.word	0xc47a0000
 8001ac8:	c47a0000 	.word	0xc47a0000

08001acc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	b083      	sub	sp, #12
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	607b      	str	r3, [r7, #4]
 8001ad6:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <HAL_MspInit+0x4c>)
 8001ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ada:	4a0f      	ldr	r2, [pc, #60]	; (8001b18 <HAL_MspInit+0x4c>)
 8001adc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae2:	4b0d      	ldr	r3, [pc, #52]	; (8001b18 <HAL_MspInit+0x4c>)
 8001ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aee:	2300      	movs	r3, #0
 8001af0:	603b      	str	r3, [r7, #0]
 8001af2:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_MspInit+0x4c>)
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	4a08      	ldr	r2, [pc, #32]	; (8001b18 <HAL_MspInit+0x4c>)
 8001af8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001afc:	6413      	str	r3, [r2, #64]	; 0x40
 8001afe:	4b06      	ldr	r3, [pc, #24]	; (8001b18 <HAL_MspInit+0x4c>)
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b06:	603b      	str	r3, [r7, #0]
 8001b08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b0a:	bf00      	nop
 8001b0c:	370c      	adds	r7, #12
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	40023800 	.word	0x40023800

08001b1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b20:	e7fe      	b.n	8001b20 <NMI_Handler+0x4>

08001b22 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b22:	b480      	push	{r7}
 8001b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b26:	e7fe      	b.n	8001b26 <HardFault_Handler+0x4>

08001b28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b2c:	e7fe      	b.n	8001b2c <MemManage_Handler+0x4>

08001b2e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b32:	e7fe      	b.n	8001b32 <BusFault_Handler+0x4>

08001b34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <UsageFault_Handler+0x4>

08001b3a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b3a:	b480      	push	{r7}
 8001b3c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b4c:	bf00      	nop
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr

08001b56 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b56:	b480      	push	{r7}
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b68:	f000 fa86 	bl	8002078 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b6c:	bf00      	nop
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b74:	2001      	movs	r0, #1
 8001b76:	f001 fdd5 	bl	8003724 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <ADC_IRQHandler+0x10>)
 8001b86:	f000 fafe 	bl	8002186 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000328 	.word	0x20000328

08001b94 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001b9a:	f003 ff9d 	bl	8005ad8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200006a0 	.word	0x200006a0

08001ba8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001bac:	4802      	ldr	r0, [pc, #8]	; (8001bb8 <DMA2_Stream0_IRQHandler+0x10>)
 8001bae:	f001 f9cb 	bl	8002f48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20000370 	.word	0x20000370

08001bbc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001bc0:	4802      	ldr	r0, [pc, #8]	; (8001bcc <OTG_FS_IRQHandler+0x10>)
 8001bc2:	f002 f85b 	bl	8003c7c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20001bcc 	.word	0x20001bcc

08001bd0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	af00      	add	r7, sp, #0
	return 1;
 8001bd4:	2301      	movs	r3, #1
}
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bde:	4770      	bx	lr

08001be0 <_kill>:

int _kill(int pid, int sig)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b082      	sub	sp, #8
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001bea:	f008 fe3d 	bl	800a868 <__errno>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2216      	movs	r2, #22
 8001bf2:	601a      	str	r2, [r3, #0]
	return -1;
 8001bf4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_exit>:

void _exit (int status)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c08:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ffe7 	bl	8001be0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c12:	e7fe      	b.n	8001c12 <_exit+0x12>

08001c14 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b086      	sub	sp, #24
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	60f8      	str	r0, [r7, #12]
 8001c1c:	60b9      	str	r1, [r7, #8]
 8001c1e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	e00a      	b.n	8001c3c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001c26:	f3af 8000 	nop.w
 8001c2a:	4601      	mov	r1, r0
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	1c5a      	adds	r2, r3, #1
 8001c30:	60ba      	str	r2, [r7, #8]
 8001c32:	b2ca      	uxtb	r2, r1
 8001c34:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbf0      	blt.n	8001c26 <_read+0x12>
	}

return len;
 8001c44:	687b      	ldr	r3, [r7, #4]
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3718      	adds	r7, #24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c4e:	b580      	push	{r7, lr}
 8001c50:	b086      	sub	sp, #24
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	60f8      	str	r0, [r7, #12]
 8001c56:	60b9      	str	r1, [r7, #8]
 8001c58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	e009      	b.n	8001c74 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	1c5a      	adds	r2, r3, #1
 8001c64:	60ba      	str	r2, [r7, #8]
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	3301      	adds	r3, #1
 8001c72:	617b      	str	r3, [r7, #20]
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	dbf1      	blt.n	8001c60 <_write+0x12>
	}
	return len;
 8001c7c:	687b      	ldr	r3, [r7, #4]
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	3718      	adds	r7, #24
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd80      	pop	{r7, pc}

08001c86 <_close>:

int _close(int file)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
	return -1;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr

08001c9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c9e:	b480      	push	{r7}
 8001ca0:	b083      	sub	sp, #12
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	6078      	str	r0, [r7, #4]
 8001ca6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cae:	605a      	str	r2, [r3, #4]
	return 0;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <_isatty>:

int _isatty(int file)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
	return 1;
 8001cc6:	2301      	movs	r3, #1
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b085      	sub	sp, #20
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	60f8      	str	r0, [r7, #12]
 8001cdc:	60b9      	str	r1, [r7, #8]
 8001cde:	607a      	str	r2, [r7, #4]
	return 0;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3714      	adds	r7, #20
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b086      	sub	sp, #24
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001cf8:	4a14      	ldr	r2, [pc, #80]	; (8001d4c <_sbrk+0x5c>)
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <_sbrk+0x60>)
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d00:	697b      	ldr	r3, [r7, #20]
 8001d02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <_sbrk+0x64>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d102      	bne.n	8001d12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d0c:	4b11      	ldr	r3, [pc, #68]	; (8001d54 <_sbrk+0x64>)
 8001d0e:	4a12      	ldr	r2, [pc, #72]	; (8001d58 <_sbrk+0x68>)
 8001d10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <_sbrk+0x64>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4413      	add	r3, r2
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d207      	bcs.n	8001d30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d20:	f008 fda2 	bl	800a868 <__errno>
 8001d24:	4603      	mov	r3, r0
 8001d26:	220c      	movs	r2, #12
 8001d28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2e:	e009      	b.n	8001d44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <_sbrk+0x64>)
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d36:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <_sbrk+0x64>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4413      	add	r3, r2
 8001d3e:	4a05      	ldr	r2, [pc, #20]	; (8001d54 <_sbrk+0x64>)
 8001d40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d42:	68fb      	ldr	r3, [r7, #12]
}
 8001d44:	4618      	mov	r0, r3
 8001d46:	3718      	adds	r7, #24
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	20018000 	.word	0x20018000
 8001d50:	00000400 	.word	0x00000400
 8001d54:	20000654 	.word	0x20000654
 8001d58:	20002308 	.word	0x20002308

08001d5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d60:	4b06      	ldr	r3, [pc, #24]	; (8001d7c <SystemInit+0x20>)
 8001d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d66:	4a05      	ldr	r2, [pc, #20]	; (8001d7c <SystemInit+0x20>)
 8001d68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d70:	bf00      	nop
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	e000ed00 	.word	0xe000ed00

08001d80 <MX_TIM9_Init>:
TIM_HandleTypeDef htim9;
TIM_HandleTypeDef htim10;

/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b08c      	sub	sp, #48	; 0x30
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d86:	f107 0320 	add.w	r3, r7, #32
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d94:	1d3b      	adds	r3, r7, #4
 8001d96:	2200      	movs	r2, #0
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	605a      	str	r2, [r3, #4]
 8001d9c:	609a      	str	r2, [r3, #8]
 8001d9e:	60da      	str	r2, [r3, #12]
 8001da0:	611a      	str	r2, [r3, #16]
 8001da2:	615a      	str	r2, [r3, #20]
 8001da4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001da6:	4b26      	ldr	r3, [pc, #152]	; (8001e40 <MX_TIM9_Init+0xc0>)
 8001da8:	4a26      	ldr	r2, [pc, #152]	; (8001e44 <MX_TIM9_Init+0xc4>)
 8001daa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 84-1;
 8001dac:	4b24      	ldr	r3, [pc, #144]	; (8001e40 <MX_TIM9_Init+0xc0>)
 8001dae:	2253      	movs	r2, #83	; 0x53
 8001db0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db2:	4b23      	ldr	r3, [pc, #140]	; (8001e40 <MX_TIM9_Init+0xc0>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 20000-1;
 8001db8:	4b21      	ldr	r3, [pc, #132]	; (8001e40 <MX_TIM9_Init+0xc0>)
 8001dba:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001dbe:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc0:	4b1f      	ldr	r3, [pc, #124]	; (8001e40 <MX_TIM9_Init+0xc0>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dc6:	4b1e      	ldr	r3, [pc, #120]	; (8001e40 <MX_TIM9_Init+0xc0>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001dcc:	481c      	ldr	r0, [pc, #112]	; (8001e40 <MX_TIM9_Init+0xc0>)
 8001dce:	f003 fcc7 	bl	8005760 <HAL_TIM_Base_Init>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d001      	beq.n	8001ddc <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001dd8:	f7ff fda8 	bl	800192c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ddc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001de0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001de2:	f107 0320 	add.w	r3, r7, #32
 8001de6:	4619      	mov	r1, r3
 8001de8:	4815      	ldr	r0, [pc, #84]	; (8001e40 <MX_TIM9_Init+0xc0>)
 8001dea:	f004 f83f 	bl	8005e6c <HAL_TIM_ConfigClockSource>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001df4:	f7ff fd9a 	bl	800192c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001df8:	4811      	ldr	r0, [pc, #68]	; (8001e40 <MX_TIM9_Init+0xc0>)
 8001dfa:	f003 fd63 	bl	80058c4 <HAL_TIM_PWM_Init>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001e04:	f7ff fd92 	bl	800192c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e08:	2360      	movs	r3, #96	; 0x60
 8001e0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1500;
 8001e0c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8001e10:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e12:	2300      	movs	r3, #0
 8001e14:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e16:	2300      	movs	r3, #0
 8001e18:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	4619      	mov	r1, r3
 8001e20:	4807      	ldr	r0, [pc, #28]	; (8001e40 <MX_TIM9_Init+0xc0>)
 8001e22:	f003 ff61 	bl	8005ce8 <HAL_TIM_PWM_ConfigChannel>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d001      	beq.n	8001e30 <MX_TIM9_Init+0xb0>
  {
    Error_Handler();
 8001e2c:	f7ff fd7e 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001e30:	4803      	ldr	r0, [pc, #12]	; (8001e40 <MX_TIM9_Init+0xc0>)
 8001e32:	f000 f86b 	bl	8001f0c <HAL_TIM_MspPostInit>

}
 8001e36:	bf00      	nop
 8001e38:	3730      	adds	r7, #48	; 0x30
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	20000658 	.word	0x20000658
 8001e44:	40014000 	.word	0x40014000

08001e48 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001e4c:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_TIM10_Init+0x40>)
 8001e4e:	4a0f      	ldr	r2, [pc, #60]	; (8001e8c <MX_TIM10_Init+0x44>)
 8001e50:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84-1;
 8001e52:	4b0d      	ldr	r3, [pc, #52]	; (8001e88 <MX_TIM10_Init+0x40>)
 8001e54:	2253      	movs	r2, #83	; 0x53
 8001e56:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <MX_TIM10_Init+0x40>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 500-1;
 8001e5e:	4b0a      	ldr	r3, [pc, #40]	; (8001e88 <MX_TIM10_Init+0x40>)
 8001e60:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001e64:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <MX_TIM10_Init+0x40>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <MX_TIM10_Init+0x40>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_TIM10_Init+0x40>)
 8001e74:	f003 fc74 	bl	8005760 <HAL_TIM_Base_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_TIM10_Init+0x3a>
  {
    Error_Handler();
 8001e7e:	f7ff fd55 	bl	800192c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200006a0 	.word	0x200006a0
 8001e8c:	40014400 	.word	0x40014400

08001e90 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM9)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_TIM_Base_MspInit+0x70>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d10e      	bne.n	8001ec0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* TIM9 clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <HAL_TIM_Base_MspInit+0x74>)
 8001ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eaa:	4a16      	ldr	r2, [pc, #88]	; (8001f04 <HAL_TIM_Base_MspInit+0x74>)
 8001eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb2:	4b14      	ldr	r3, [pc, #80]	; (8001f04 <HAL_TIM_Base_MspInit+0x74>)
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001ebe:	e01a      	b.n	8001ef6 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM10)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a10      	ldr	r2, [pc, #64]	; (8001f08 <HAL_TIM_Base_MspInit+0x78>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d115      	bne.n	8001ef6 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001eca:	2300      	movs	r3, #0
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	4b0d      	ldr	r3, [pc, #52]	; (8001f04 <HAL_TIM_Base_MspInit+0x74>)
 8001ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ed2:	4a0c      	ldr	r2, [pc, #48]	; (8001f04 <HAL_TIM_Base_MspInit+0x74>)
 8001ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ed8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eda:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <HAL_TIM_Base_MspInit+0x74>)
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee2:	60bb      	str	r3, [r7, #8]
 8001ee4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	2100      	movs	r1, #0
 8001eea:	2019      	movs	r0, #25
 8001eec:	f000 feef 	bl	8002cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ef0:	2019      	movs	r0, #25
 8001ef2:	f000 ff08 	bl	8002d06 <HAL_NVIC_EnableIRQ>
}
 8001ef6:	bf00      	nop
 8001ef8:	3710      	adds	r7, #16
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	40014000 	.word	0x40014000
 8001f04:	40023800 	.word	0x40023800
 8001f08:	40014400 	.word	0x40014400

08001f0c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f14:	f107 030c 	add.w	r3, r7, #12
 8001f18:	2200      	movs	r2, #0
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	605a      	str	r2, [r3, #4]
 8001f1e:	609a      	str	r2, [r3, #8]
 8001f20:	60da      	str	r2, [r3, #12]
 8001f22:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM9)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <HAL_TIM_MspPostInit+0x68>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d11d      	bne.n	8001f6a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <HAL_TIM_MspPostInit+0x6c>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a10      	ldr	r2, [pc, #64]	; (8001f78 <HAL_TIM_MspPostInit+0x6c>)
 8001f38:	f043 0301 	orr.w	r3, r3, #1
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <HAL_TIM_MspPostInit+0x6c>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	60bb      	str	r3, [r7, #8]
 8001f48:	68bb      	ldr	r3, [r7, #8]
    /**TIM9 GPIO Configuration
    PA2     ------> TIM9_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001f4a:	2304      	movs	r3, #4
 8001f4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f4e:	2302      	movs	r3, #2
 8001f50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f56:	2300      	movs	r3, #0
 8001f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f5e:	f107 030c 	add.w	r3, r7, #12
 8001f62:	4619      	mov	r1, r3
 8001f64:	4805      	ldr	r0, [pc, #20]	; (8001f7c <HAL_TIM_MspPostInit+0x70>)
 8001f66:	f001 fa59 	bl	800341c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8001f6a:	bf00      	nop
 8001f6c:	3720      	adds	r7, #32
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	40014000 	.word	0x40014000
 8001f78:	40023800 	.word	0x40023800
 8001f7c:	40020000 	.word	0x40020000

08001f80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001f80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fb8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f84:	480d      	ldr	r0, [pc, #52]	; (8001fbc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f86:	490e      	ldr	r1, [pc, #56]	; (8001fc0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f88:	4a0e      	ldr	r2, [pc, #56]	; (8001fc4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f8c:	e002      	b.n	8001f94 <LoopCopyDataInit>

08001f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f92:	3304      	adds	r3, #4

08001f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f98:	d3f9      	bcc.n	8001f8e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f9c:	4c0b      	ldr	r4, [pc, #44]	; (8001fcc <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fa0:	e001      	b.n	8001fa6 <LoopFillZerobss>

08001fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa4:	3204      	adds	r2, #4

08001fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fa8:	d3fb      	bcc.n	8001fa2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001faa:	f7ff fed7 	bl	8001d5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fae:	f008 fc61 	bl	800a874 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fb2:	f7ff fa81 	bl	80014b8 <main>
  bx  lr    
 8001fb6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001fb8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001fbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fc0:	2000030c 	.word	0x2000030c
  ldr r2, =_sidata
 8001fc4:	0800db04 	.word	0x0800db04
  ldr r2, =_sbss
 8001fc8:	2000030c 	.word	0x2000030c
  ldr r4, =_ebss
 8001fcc:	20002308 	.word	0x20002308

08001fd0 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <DMA1_Stream0_IRQHandler>
	...

08001fd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fd8:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a0d      	ldr	r2, [pc, #52]	; (8002014 <HAL_Init+0x40>)
 8001fde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fe4:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <HAL_Init+0x40>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a0a      	ldr	r2, [pc, #40]	; (8002014 <HAL_Init+0x40>)
 8001fea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ff0:	4b08      	ldr	r3, [pc, #32]	; (8002014 <HAL_Init+0x40>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a07      	ldr	r2, [pc, #28]	; (8002014 <HAL_Init+0x40>)
 8001ff6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ffc:	2003      	movs	r0, #3
 8001ffe:	f000 fe5b 	bl	8002cb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002002:	200f      	movs	r0, #15
 8002004:	f000 f808 	bl	8002018 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002008:	f7ff fd60 	bl	8001acc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023c00 	.word	0x40023c00

08002018 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <HAL_InitTick+0x54>)
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	4b12      	ldr	r3, [pc, #72]	; (8002070 <HAL_InitTick+0x58>)
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	4619      	mov	r1, r3
 800202a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800202e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002032:	fbb2 f3f3 	udiv	r3, r2, r3
 8002036:	4618      	mov	r0, r3
 8002038:	f000 fe73 	bl	8002d22 <HAL_SYSTICK_Config>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e00e      	b.n	8002064 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2b0f      	cmp	r3, #15
 800204a:	d80a      	bhi.n	8002062 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800204c:	2200      	movs	r2, #0
 800204e:	6879      	ldr	r1, [r7, #4]
 8002050:	f04f 30ff 	mov.w	r0, #4294967295
 8002054:	f000 fe3b 	bl	8002cce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002058:	4a06      	ldr	r2, [pc, #24]	; (8002074 <HAL_InitTick+0x5c>)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
 8002060:	e000      	b.n	8002064 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
}
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	20000040 	.word	0x20000040
 8002070:	20000048 	.word	0x20000048
 8002074:	20000044 	.word	0x20000044

08002078 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800207c:	4b06      	ldr	r3, [pc, #24]	; (8002098 <HAL_IncTick+0x20>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	461a      	mov	r2, r3
 8002082:	4b06      	ldr	r3, [pc, #24]	; (800209c <HAL_IncTick+0x24>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4413      	add	r3, r2
 8002088:	4a04      	ldr	r2, [pc, #16]	; (800209c <HAL_IncTick+0x24>)
 800208a:	6013      	str	r3, [r2, #0]
}
 800208c:	bf00      	nop
 800208e:	46bd      	mov	sp, r7
 8002090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002094:	4770      	bx	lr
 8002096:	bf00      	nop
 8002098:	20000048 	.word	0x20000048
 800209c:	200006e8 	.word	0x200006e8

080020a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return uwTick;
 80020a4:	4b03      	ldr	r3, [pc, #12]	; (80020b4 <HAL_GetTick+0x14>)
 80020a6:	681b      	ldr	r3, [r3, #0]
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	200006e8 	.word	0x200006e8

080020b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020c0:	f7ff ffee 	bl	80020a0 <HAL_GetTick>
 80020c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020d0:	d005      	beq.n	80020de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020d2:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <HAL_Delay+0x44>)
 80020d4:	781b      	ldrb	r3, [r3, #0]
 80020d6:	461a      	mov	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	4413      	add	r3, r2
 80020dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80020de:	bf00      	nop
 80020e0:	f7ff ffde 	bl	80020a0 <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d8f7      	bhi.n	80020e0 <HAL_Delay+0x28>
  {
  }
}
 80020f0:	bf00      	nop
 80020f2:	bf00      	nop
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000048 	.word	0x20000048

08002100 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002108:	2300      	movs	r3, #0
 800210a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d101      	bne.n	8002116 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	e033      	b.n	800217e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	2b00      	cmp	r3, #0
 800211c:	d109      	bne.n	8002132 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7fe ffba 	bl	8001098 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2200      	movs	r2, #0
 8002128:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	f003 0310 	and.w	r3, r3, #16
 800213a:	2b00      	cmp	r3, #0
 800213c:	d118      	bne.n	8002170 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002146:	f023 0302 	bic.w	r3, r3, #2
 800214a:	f043 0202 	orr.w	r2, r3, #2
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 fb58 	bl	8002808 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f023 0303 	bic.w	r3, r3, #3
 8002166:	f043 0201 	orr.w	r2, r3, #1
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	641a      	str	r2, [r3, #64]	; 0x40
 800216e:	e001      	b.n	8002174 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800217c:	7bfb      	ldrb	r3, [r7, #15]
}
 800217e:	4618      	mov	r0, r3
 8002180:	3710      	adds	r7, #16
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002186:	b580      	push	{r7, lr}
 8002188:	b086      	sub	sp, #24
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800218e:	2300      	movs	r3, #0
 8002190:	617b      	str	r3, [r7, #20]
 8002192:	2300      	movs	r3, #0
 8002194:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	f003 0320 	and.w	r3, r3, #32
 80021b4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d049      	beq.n	8002250 <HAL_ADC_IRQHandler+0xca>
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d046      	beq.n	8002250 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c6:	f003 0310 	and.w	r3, r3, #16
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d105      	bne.n	80021da <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d12b      	bne.n	8002240 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d127      	bne.n	8002240 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d006      	beq.n	800220c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002208:	2b00      	cmp	r3, #0
 800220a:	d119      	bne.n	8002240 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0220 	bic.w	r2, r2, #32
 800221a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002220:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d105      	bne.n	8002240 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002238:	f043 0201 	orr.w	r2, r3, #1
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002240:	6878      	ldr	r0, [r7, #4]
 8002242:	f7ff fb2b 	bl	800189c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f06f 0212 	mvn.w	r2, #18
 800224e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800225e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d057      	beq.n	8002316 <HAL_ADC_IRQHandler+0x190>
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d054      	beq.n	8002316 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f003 0310 	and.w	r3, r3, #16
 8002274:	2b00      	cmp	r3, #0
 8002276:	d105      	bne.n	8002284 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227c:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d139      	bne.n	8002306 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002298:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800229c:	2b00      	cmp	r3, #0
 800229e:	d006      	beq.n	80022ae <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	689b      	ldr	r3, [r3, #8]
 80022a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d12b      	bne.n	8002306 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d124      	bne.n	8002306 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d11d      	bne.n	8002306 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d119      	bne.n	8002306 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	685a      	ldr	r2, [r3, #4]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80022e0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fe:	f043 0201 	orr.w	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 fbfc 	bl	8002b04 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f06f 020c 	mvn.w	r2, #12
 8002314:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002324:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d017      	beq.n	800235c <HAL_ADC_IRQHandler+0x1d6>
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d014      	beq.n	800235c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b01      	cmp	r3, #1
 800233e:	d10d      	bne.n	800235c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f000 f925 	bl	800259c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f06f 0201 	mvn.w	r2, #1
 800235a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	f003 0320 	and.w	r3, r3, #32
 8002362:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800236a:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800236c:	697b      	ldr	r3, [r7, #20]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d015      	beq.n	800239e <HAL_ADC_IRQHandler+0x218>
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d012      	beq.n	800239e <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800237c:	f043 0202 	orr.w	r2, r3, #2
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f06f 0220 	mvn.w	r2, #32
 800238c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f000 f90e 	bl	80025b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f06f 0220 	mvn.w	r2, #32
 800239c:	601a      	str	r2, [r3, #0]
  }
}
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
	...

080023a8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d101      	bne.n	80023c6 <HAL_ADC_Start_DMA+0x1e>
 80023c2:	2302      	movs	r3, #2
 80023c4:	e0ce      	b.n	8002564 <HAL_ADC_Start_DMA+0x1bc>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2201      	movs	r2, #1
 80023ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	f003 0301 	and.w	r3, r3, #1
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d018      	beq.n	800240e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f042 0201 	orr.w	r2, r2, #1
 80023ea:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80023ec:	4b5f      	ldr	r3, [pc, #380]	; (800256c <HAL_ADC_Start_DMA+0x1c4>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a5f      	ldr	r2, [pc, #380]	; (8002570 <HAL_ADC_Start_DMA+0x1c8>)
 80023f2:	fba2 2303 	umull	r2, r3, r2, r3
 80023f6:	0c9a      	lsrs	r2, r3, #18
 80023f8:	4613      	mov	r3, r2
 80023fa:	005b      	lsls	r3, r3, #1
 80023fc:	4413      	add	r3, r2
 80023fe:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002400:	e002      	b.n	8002408 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	3b01      	subs	r3, #1
 8002406:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f9      	bne.n	8002402 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002418:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800241c:	d107      	bne.n	800242e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800242c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b01      	cmp	r3, #1
 800243a:	f040 8086 	bne.w	800254a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002446:	f023 0301 	bic.w	r3, r3, #1
 800244a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800245c:	2b00      	cmp	r3, #0
 800245e:	d007      	beq.n	8002470 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002464:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002468:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800247c:	d106      	bne.n	800248c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	f023 0206 	bic.w	r2, r3, #6
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	645a      	str	r2, [r3, #68]	; 0x44
 800248a:	e002      	b.n	8002492 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800249a:	4b36      	ldr	r3, [pc, #216]	; (8002574 <HAL_ADC_Start_DMA+0x1cc>)
 800249c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a2:	4a35      	ldr	r2, [pc, #212]	; (8002578 <HAL_ADC_Start_DMA+0x1d0>)
 80024a4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024aa:	4a34      	ldr	r2, [pc, #208]	; (800257c <HAL_ADC_Start_DMA+0x1d4>)
 80024ac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b2:	4a33      	ldr	r2, [pc, #204]	; (8002580 <HAL_ADC_Start_DMA+0x1d8>)
 80024b4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80024be:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80024ce:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	689a      	ldr	r2, [r3, #8]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80024de:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	334c      	adds	r3, #76	; 0x4c
 80024ea:	4619      	mov	r1, r3
 80024ec:	68ba      	ldr	r2, [r7, #8]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	f000 fcd2 	bl	8002e98 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f003 031f 	and.w	r3, r3, #31
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10f      	bne.n	8002520 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d129      	bne.n	8002562 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689a      	ldr	r2, [r3, #8]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800251c:	609a      	str	r2, [r3, #8]
 800251e:	e020      	b.n	8002562 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a17      	ldr	r2, [pc, #92]	; (8002584 <HAL_ADC_Start_DMA+0x1dc>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d11b      	bne.n	8002562 <HAL_ADC_Start_DMA+0x1ba>
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d114      	bne.n	8002562 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	689a      	ldr	r2, [r3, #8]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	e00b      	b.n	8002562 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	f043 0210 	orr.w	r2, r3, #16
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255a:	f043 0201 	orr.w	r2, r3, #1
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002562:	2300      	movs	r3, #0
}
 8002564:	4618      	mov	r0, r3
 8002566:	3718      	adds	r7, #24
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000040 	.word	0x20000040
 8002570:	431bde83 	.word	0x431bde83
 8002574:	40012300 	.word	0x40012300
 8002578:	08002a01 	.word	0x08002a01
 800257c:	08002abb 	.word	0x08002abb
 8002580:	08002ad7 	.word	0x08002ad7
 8002584:	40012000 	.word	0x40012000

08002588 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
 80025cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80025ce:	2300      	movs	r3, #0
 80025d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025d8:	2b01      	cmp	r3, #1
 80025da:	d101      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x1c>
 80025dc:	2302      	movs	r3, #2
 80025de:	e105      	b.n	80027ec <HAL_ADC_ConfigChannel+0x228>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2b09      	cmp	r3, #9
 80025ee:	d925      	bls.n	800263c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68d9      	ldr	r1, [r3, #12]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	461a      	mov	r2, r3
 80025fe:	4613      	mov	r3, r2
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	4413      	add	r3, r2
 8002604:	3b1e      	subs	r3, #30
 8002606:	2207      	movs	r2, #7
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43da      	mvns	r2, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	400a      	ands	r2, r1
 8002614:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68d9      	ldr	r1, [r3, #12]
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	689a      	ldr	r2, [r3, #8]
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	b29b      	uxth	r3, r3
 8002626:	4618      	mov	r0, r3
 8002628:	4603      	mov	r3, r0
 800262a:	005b      	lsls	r3, r3, #1
 800262c:	4403      	add	r3, r0
 800262e:	3b1e      	subs	r3, #30
 8002630:	409a      	lsls	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	430a      	orrs	r2, r1
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	e022      	b.n	8002682 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	6919      	ldr	r1, [r3, #16]
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	b29b      	uxth	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	4613      	mov	r3, r2
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	4413      	add	r3, r2
 8002650:	2207      	movs	r2, #7
 8002652:	fa02 f303 	lsl.w	r3, r2, r3
 8002656:	43da      	mvns	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	400a      	ands	r2, r1
 800265e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	6919      	ldr	r1, [r3, #16]
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	689a      	ldr	r2, [r3, #8]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	b29b      	uxth	r3, r3
 8002670:	4618      	mov	r0, r3
 8002672:	4603      	mov	r3, r0
 8002674:	005b      	lsls	r3, r3, #1
 8002676:	4403      	add	r3, r0
 8002678:	409a      	lsls	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	2b06      	cmp	r3, #6
 8002688:	d824      	bhi.n	80026d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685a      	ldr	r2, [r3, #4]
 8002694:	4613      	mov	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	4413      	add	r3, r2
 800269a:	3b05      	subs	r3, #5
 800269c:	221f      	movs	r2, #31
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	400a      	ands	r2, r1
 80026aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	4618      	mov	r0, r3
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685a      	ldr	r2, [r3, #4]
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	3b05      	subs	r3, #5
 80026c6:	fa00 f203 	lsl.w	r2, r0, r3
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	635a      	str	r2, [r3, #52]	; 0x34
 80026d2:	e04c      	b.n	800276e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b0c      	cmp	r3, #12
 80026da:	d824      	bhi.n	8002726 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685a      	ldr	r2, [r3, #4]
 80026e6:	4613      	mov	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	4413      	add	r3, r2
 80026ec:	3b23      	subs	r3, #35	; 0x23
 80026ee:	221f      	movs	r2, #31
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	43da      	mvns	r2, r3
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	400a      	ands	r2, r1
 80026fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	b29b      	uxth	r3, r3
 800270a:	4618      	mov	r0, r3
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	4613      	mov	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	4413      	add	r3, r2
 8002716:	3b23      	subs	r3, #35	; 0x23
 8002718:	fa00 f203 	lsl.w	r2, r0, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	430a      	orrs	r2, r1
 8002722:	631a      	str	r2, [r3, #48]	; 0x30
 8002724:	e023      	b.n	800276e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	4413      	add	r3, r2
 8002736:	3b41      	subs	r3, #65	; 0x41
 8002738:	221f      	movs	r2, #31
 800273a:	fa02 f303 	lsl.w	r3, r2, r3
 800273e:	43da      	mvns	r2, r3
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	400a      	ands	r2, r1
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	4618      	mov	r0, r3
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	685a      	ldr	r2, [r3, #4]
 800275a:	4613      	mov	r3, r2
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	4413      	add	r3, r2
 8002760:	3b41      	subs	r3, #65	; 0x41
 8002762:	fa00 f203 	lsl.w	r2, r0, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800276e:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <HAL_ADC_ConfigChannel+0x234>)
 8002770:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4a21      	ldr	r2, [pc, #132]	; (80027fc <HAL_ADC_ConfigChannel+0x238>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d109      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1cc>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2b12      	cmp	r3, #18
 8002782:	d105      	bne.n	8002790 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a19      	ldr	r2, [pc, #100]	; (80027fc <HAL_ADC_ConfigChannel+0x238>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d123      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x21e>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	2b10      	cmp	r3, #16
 80027a0:	d003      	beq.n	80027aa <HAL_ADC_ConfigChannel+0x1e6>
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b11      	cmp	r3, #17
 80027a8:	d11b      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2b10      	cmp	r3, #16
 80027bc:	d111      	bne.n	80027e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80027be:	4b10      	ldr	r3, [pc, #64]	; (8002800 <HAL_ADC_ConfigChannel+0x23c>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a10      	ldr	r2, [pc, #64]	; (8002804 <HAL_ADC_ConfigChannel+0x240>)
 80027c4:	fba2 2303 	umull	r2, r3, r2, r3
 80027c8:	0c9a      	lsrs	r2, r3, #18
 80027ca:	4613      	mov	r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	4413      	add	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027d4:	e002      	b.n	80027dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80027d6:	68bb      	ldr	r3, [r7, #8]
 80027d8:	3b01      	subs	r3, #1
 80027da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f9      	bne.n	80027d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80027ea:	2300      	movs	r3, #0
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	40012300 	.word	0x40012300
 80027fc:	40012000 	.word	0x40012000
 8002800:	20000040 	.word	0x20000040
 8002804:	431bde83 	.word	0x431bde83

08002808 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002810:	4b79      	ldr	r3, [pc, #484]	; (80029f8 <ADC_Init+0x1f0>)
 8002812:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	685a      	ldr	r2, [r3, #4]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	431a      	orrs	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	685a      	ldr	r2, [r3, #4]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800283c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	021a      	lsls	r2, r3, #8
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	430a      	orrs	r2, r1
 8002850:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002860:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	6859      	ldr	r1, [r3, #4]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	689a      	ldr	r2, [r3, #8]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002882:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	6899      	ldr	r1, [r3, #8]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68da      	ldr	r2, [r3, #12]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289a:	4a58      	ldr	r2, [pc, #352]	; (80029fc <ADC_Init+0x1f4>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d022      	beq.n	80028e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689a      	ldr	r2, [r3, #8]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	6899      	ldr	r1, [r3, #8]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689a      	ldr	r2, [r3, #8]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80028d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	6899      	ldr	r1, [r3, #8]
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	430a      	orrs	r2, r1
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	e00f      	b.n	8002906 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	689a      	ldr	r2, [r3, #8]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80028f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	689a      	ldr	r2, [r3, #8]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002904:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689a      	ldr	r2, [r3, #8]
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f022 0202 	bic.w	r2, r2, #2
 8002914:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6899      	ldr	r1, [r3, #8]
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	7e1b      	ldrb	r3, [r3, #24]
 8002920:	005a      	lsls	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	430a      	orrs	r2, r1
 8002928:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d01b      	beq.n	800296c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	685a      	ldr	r2, [r3, #4]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002942:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002952:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6859      	ldr	r1, [r3, #4]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800295e:	3b01      	subs	r3, #1
 8002960:	035a      	lsls	r2, r3, #13
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	430a      	orrs	r2, r1
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	e007      	b.n	800297c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800297a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800298a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	69db      	ldr	r3, [r3, #28]
 8002996:	3b01      	subs	r3, #1
 8002998:	051a      	lsls	r2, r3, #20
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80029b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	6899      	ldr	r1, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80029be:	025a      	lsls	r2, r3, #9
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	430a      	orrs	r2, r1
 80029c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689a      	ldr	r2, [r3, #8]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6899      	ldr	r1, [r3, #8]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	695b      	ldr	r3, [r3, #20]
 80029e2:	029a      	lsls	r2, r3, #10
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	430a      	orrs	r2, r1
 80029ea:	609a      	str	r2, [r3, #8]
}
 80029ec:	bf00      	nop
 80029ee:	3714      	adds	r7, #20
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	40012300 	.word	0x40012300
 80029fc:	0f000001 	.word	0x0f000001

08002a00 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a0c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d13c      	bne.n	8002a94 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d12b      	bne.n	8002a8c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d127      	bne.n	8002a8c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d006      	beq.n	8002a58 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d119      	bne.n	8002a8c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685a      	ldr	r2, [r3, #4]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f022 0220 	bic.w	r2, r2, #32
 8002a66:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d105      	bne.n	8002a8c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a84:	f043 0201 	orr.w	r2, r3, #1
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a8c:	68f8      	ldr	r0, [r7, #12]
 8002a8e:	f7fe ff05 	bl	800189c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002a92:	e00e      	b.n	8002ab2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	f003 0310 	and.w	r3, r3, #16
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d003      	beq.n	8002aa8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002aa0:	68f8      	ldr	r0, [r7, #12]
 8002aa2:	f7ff fd85 	bl	80025b0 <HAL_ADC_ErrorCallback>
}
 8002aa6:	e004      	b.n	8002ab2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4798      	blx	r3
}
 8002ab2:	bf00      	nop
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b084      	sub	sp, #16
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ac8:	68f8      	ldr	r0, [r7, #12]
 8002aca:	f7ff fd5d 	bl	8002588 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b084      	sub	sp, #16
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ae2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2240      	movs	r2, #64	; 0x40
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aee:	f043 0204 	orr.w	r2, r3, #4
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002af6:	68f8      	ldr	r0, [r7, #12]
 8002af8:	f7ff fd5a 	bl	80025b0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002afc:	bf00      	nop
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <__NVIC_SetPriorityGrouping+0x44>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b34:	4013      	ands	r3, r2
 8002b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b4a:	4a04      	ldr	r2, [pc, #16]	; (8002b5c <__NVIC_SetPriorityGrouping+0x44>)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	60d3      	str	r3, [r2, #12]
}
 8002b50:	bf00      	nop
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b64:	4b04      	ldr	r3, [pc, #16]	; (8002b78 <__NVIC_GetPriorityGrouping+0x18>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	0a1b      	lsrs	r3, r3, #8
 8002b6a:	f003 0307 	and.w	r3, r3, #7
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	db0b      	blt.n	8002ba6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	f003 021f 	and.w	r2, r3, #31
 8002b94:	4907      	ldr	r1, [pc, #28]	; (8002bb4 <__NVIC_EnableIRQ+0x38>)
 8002b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	e000e100 	.word	0xe000e100

08002bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	6039      	str	r1, [r7, #0]
 8002bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	db0a      	blt.n	8002be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	490c      	ldr	r1, [pc, #48]	; (8002c04 <__NVIC_SetPriority+0x4c>)
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	0112      	lsls	r2, r2, #4
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	440b      	add	r3, r1
 8002bdc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be0:	e00a      	b.n	8002bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	4908      	ldr	r1, [pc, #32]	; (8002c08 <__NVIC_SetPriority+0x50>)
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	3b04      	subs	r3, #4
 8002bf0:	0112      	lsls	r2, r2, #4
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	761a      	strb	r2, [r3, #24]
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000e100 	.word	0xe000e100
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b089      	sub	sp, #36	; 0x24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f1c3 0307 	rsb	r3, r3, #7
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	bf28      	it	cs
 8002c2a:	2304      	movcs	r3, #4
 8002c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3304      	adds	r3, #4
 8002c32:	2b06      	cmp	r3, #6
 8002c34:	d902      	bls.n	8002c3c <NVIC_EncodePriority+0x30>
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3b03      	subs	r3, #3
 8002c3a:	e000      	b.n	8002c3e <NVIC_EncodePriority+0x32>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c40:	f04f 32ff 	mov.w	r2, #4294967295
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43da      	mvns	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	401a      	ands	r2, r3
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c54:	f04f 31ff 	mov.w	r1, #4294967295
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5e:	43d9      	mvns	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c64:	4313      	orrs	r3, r2
         );
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3724      	adds	r7, #36	; 0x24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	3b01      	subs	r3, #1
 8002c80:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c84:	d301      	bcc.n	8002c8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c86:	2301      	movs	r3, #1
 8002c88:	e00f      	b.n	8002caa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c8a:	4a0a      	ldr	r2, [pc, #40]	; (8002cb4 <SysTick_Config+0x40>)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c92:	210f      	movs	r1, #15
 8002c94:	f04f 30ff 	mov.w	r0, #4294967295
 8002c98:	f7ff ff8e 	bl	8002bb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c9c:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <SysTick_Config+0x40>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ca2:	4b04      	ldr	r3, [pc, #16]	; (8002cb4 <SysTick_Config+0x40>)
 8002ca4:	2207      	movs	r2, #7
 8002ca6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3708      	adds	r7, #8
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	e000e010 	.word	0xe000e010

08002cb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f7ff ff29 	bl	8002b18 <__NVIC_SetPriorityGrouping>
}
 8002cc6:	bf00      	nop
 8002cc8:	3708      	adds	r7, #8
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}

08002cce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002cce:	b580      	push	{r7, lr}
 8002cd0:	b086      	sub	sp, #24
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
 8002cda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ce0:	f7ff ff3e 	bl	8002b60 <__NVIC_GetPriorityGrouping>
 8002ce4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	68b9      	ldr	r1, [r7, #8]
 8002cea:	6978      	ldr	r0, [r7, #20]
 8002cec:	f7ff ff8e 	bl	8002c0c <NVIC_EncodePriority>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf6:	4611      	mov	r1, r2
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7ff ff5d 	bl	8002bb8 <__NVIC_SetPriority>
}
 8002cfe:	bf00      	nop
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff ff31 	bl	8002b7c <__NVIC_EnableIRQ>
}
 8002d1a:	bf00      	nop
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}

08002d22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d22:	b580      	push	{r7, lr}
 8002d24:	b082      	sub	sp, #8
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7ff ffa2 	bl	8002c74 <SysTick_Config>
 8002d30:	4603      	mov	r3, r0
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3708      	adds	r7, #8
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
	...

08002d3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d48:	f7ff f9aa 	bl	80020a0 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d101      	bne.n	8002d58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	e099      	b.n	8002e8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2202      	movs	r2, #2
 8002d5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0201 	bic.w	r2, r2, #1
 8002d76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d78:	e00f      	b.n	8002d9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d7a:	f7ff f991 	bl	80020a0 <HAL_GetTick>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	2b05      	cmp	r3, #5
 8002d86:	d908      	bls.n	8002d9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2220      	movs	r2, #32
 8002d8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2203      	movs	r2, #3
 8002d92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e078      	b.n	8002e8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0301 	and.w	r3, r3, #1
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1e8      	bne.n	8002d7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	4b38      	ldr	r3, [pc, #224]	; (8002e94 <HAL_DMA_Init+0x158>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685a      	ldr	r2, [r3, #4]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002dc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002dd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002dde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a1b      	ldr	r3, [r3, #32]
 8002de4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002de6:	697a      	ldr	r2, [r7, #20]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df0:	2b04      	cmp	r3, #4
 8002df2:	d107      	bne.n	8002e04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	697a      	ldr	r2, [r7, #20]
 8002e00:	4313      	orrs	r3, r2
 8002e02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	695b      	ldr	r3, [r3, #20]
 8002e12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	f023 0307 	bic.w	r3, r3, #7
 8002e1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	697a      	ldr	r2, [r7, #20]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	2b04      	cmp	r3, #4
 8002e2c:	d117      	bne.n	8002e5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	4313      	orrs	r3, r2
 8002e36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00e      	beq.n	8002e5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 fa6f 	bl	8003324 <DMA_CheckFifoParam>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d008      	beq.n	8002e5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2240      	movs	r2, #64	; 0x40
 8002e50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2201      	movs	r2, #1
 8002e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e016      	b.n	8002e8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	697a      	ldr	r2, [r7, #20]
 8002e64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002e66:	6878      	ldr	r0, [r7, #4]
 8002e68:	f000 fa26 	bl	80032b8 <DMA_CalcBaseAndBitshift>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e74:	223f      	movs	r2, #63	; 0x3f
 8002e76:	409a      	lsls	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2201      	movs	r2, #1
 8002e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002e8a:	2300      	movs	r3, #0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3718      	adds	r7, #24
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	f010803f 	.word	0xf010803f

08002e98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b086      	sub	sp, #24
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60f8      	str	r0, [r7, #12]
 8002ea0:	60b9      	str	r1, [r7, #8]
 8002ea2:	607a      	str	r2, [r7, #4]
 8002ea4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002eb6:	2b01      	cmp	r3, #1
 8002eb8:	d101      	bne.n	8002ebe <HAL_DMA_Start_IT+0x26>
 8002eba:	2302      	movs	r3, #2
 8002ebc:	e040      	b.n	8002f40 <HAL_DMA_Start_IT+0xa8>
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d12f      	bne.n	8002f32 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2202      	movs	r2, #2
 8002ed6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	68b9      	ldr	r1, [r7, #8]
 8002ee6:	68f8      	ldr	r0, [r7, #12]
 8002ee8:	f000 f9b8 	bl	800325c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef0:	223f      	movs	r2, #63	; 0x3f
 8002ef2:	409a      	lsls	r2, r3
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f042 0216 	orr.w	r2, r2, #22
 8002f06:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d007      	beq.n	8002f20 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0208 	orr.w	r2, r2, #8
 8002f1e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 0201 	orr.w	r2, r2, #1
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	e005      	b.n	8002f3e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002f3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3718      	adds	r7, #24
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}

08002f48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b086      	sub	sp, #24
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002f54:	4b8e      	ldr	r3, [pc, #568]	; (8003190 <HAL_DMA_IRQHandler+0x248>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a8e      	ldr	r2, [pc, #568]	; (8003194 <HAL_DMA_IRQHandler+0x24c>)
 8002f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f5e:	0a9b      	lsrs	r3, r3, #10
 8002f60:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f66:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f72:	2208      	movs	r2, #8
 8002f74:	409a      	lsls	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d01a      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0304 	and.w	r3, r3, #4
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d013      	beq.n	8002fb4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0204 	bic.w	r2, r2, #4
 8002f9a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa0:	2208      	movs	r2, #8
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	f043 0201 	orr.w	r2, r3, #1
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fb8:	2201      	movs	r2, #1
 8002fba:	409a      	lsls	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d012      	beq.n	8002fea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d00b      	beq.n	8002fea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	409a      	lsls	r2, r3
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fe2:	f043 0202 	orr.w	r2, r3, #2
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fee:	2204      	movs	r2, #4
 8002ff0:	409a      	lsls	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	4013      	ands	r3, r2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d012      	beq.n	8003020 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 0302 	and.w	r3, r3, #2
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	2204      	movs	r2, #4
 800300e:	409a      	lsls	r2, r3
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003018:	f043 0204 	orr.w	r2, r3, #4
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003024:	2210      	movs	r2, #16
 8003026:	409a      	lsls	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d043      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0308 	and.w	r3, r3, #8
 800303a:	2b00      	cmp	r3, #0
 800303c:	d03c      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003042:	2210      	movs	r2, #16
 8003044:	409a      	lsls	r2, r3
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d018      	beq.n	800308a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d108      	bne.n	8003078 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	2b00      	cmp	r3, #0
 800306c:	d024      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	4798      	blx	r3
 8003076:	e01f      	b.n	80030b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307c:	2b00      	cmp	r3, #0
 800307e:	d01b      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003084:	6878      	ldr	r0, [r7, #4]
 8003086:	4798      	blx	r3
 8003088:	e016      	b.n	80030b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003094:	2b00      	cmp	r3, #0
 8003096:	d107      	bne.n	80030a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0208 	bic.w	r2, r2, #8
 80030a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d003      	beq.n	80030b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030bc:	2220      	movs	r2, #32
 80030be:	409a      	lsls	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4013      	ands	r3, r2
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	f000 808f 	beq.w	80031e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0310 	and.w	r3, r3, #16
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	f000 8087 	beq.w	80031e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030de:	2220      	movs	r2, #32
 80030e0:	409a      	lsls	r2, r3
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030ec:	b2db      	uxtb	r3, r3
 80030ee:	2b05      	cmp	r3, #5
 80030f0:	d136      	bne.n	8003160 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0216 	bic.w	r2, r2, #22
 8003100:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	695a      	ldr	r2, [r3, #20]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003110:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	2b00      	cmp	r3, #0
 8003118:	d103      	bne.n	8003122 <HAL_DMA_IRQHandler+0x1da>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800311e:	2b00      	cmp	r3, #0
 8003120:	d007      	beq.n	8003132 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 0208 	bic.w	r2, r2, #8
 8003130:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003136:	223f      	movs	r2, #63	; 0x3f
 8003138:	409a      	lsls	r2, r3
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003152:	2b00      	cmp	r3, #0
 8003154:	d07e      	beq.n	8003254 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	4798      	blx	r3
        }
        return;
 800315e:	e079      	b.n	8003254 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d01d      	beq.n	80031aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10d      	bne.n	8003198 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003180:	2b00      	cmp	r3, #0
 8003182:	d031      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	4798      	blx	r3
 800318c:	e02c      	b.n	80031e8 <HAL_DMA_IRQHandler+0x2a0>
 800318e:	bf00      	nop
 8003190:	20000040 	.word	0x20000040
 8003194:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800319c:	2b00      	cmp	r3, #0
 800319e:	d023      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	4798      	blx	r3
 80031a8:	e01e      	b.n	80031e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d10f      	bne.n	80031d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681a      	ldr	r2, [r3, #0]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f022 0210 	bic.w	r2, r2, #16
 80031c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d032      	beq.n	8003256 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031f4:	f003 0301 	and.w	r3, r3, #1
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d022      	beq.n	8003242 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2205      	movs	r2, #5
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	3301      	adds	r3, #1
 8003218:	60bb      	str	r3, [r7, #8]
 800321a:	697a      	ldr	r2, [r7, #20]
 800321c:	429a      	cmp	r2, r3
 800321e:	d307      	bcc.n	8003230 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f2      	bne.n	8003214 <HAL_DMA_IRQHandler+0x2cc>
 800322e:	e000      	b.n	8003232 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003230:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800324e:	6878      	ldr	r0, [r7, #4]
 8003250:	4798      	blx	r3
 8003252:	e000      	b.n	8003256 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003254:	bf00      	nop
    }
  }
}
 8003256:	3718      	adds	r7, #24
 8003258:	46bd      	mov	sp, r7
 800325a:	bd80      	pop	{r7, pc}

0800325c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800325c:	b480      	push	{r7}
 800325e:	b085      	sub	sp, #20
 8003260:	af00      	add	r7, sp, #0
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	60b9      	str	r1, [r7, #8]
 8003266:	607a      	str	r2, [r7, #4]
 8003268:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	681a      	ldr	r2, [r3, #0]
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003278:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b40      	cmp	r3, #64	; 0x40
 8003288:	d108      	bne.n	800329c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800329a:	e007      	b.n	80032ac <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	68ba      	ldr	r2, [r7, #8]
 80032a2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	60da      	str	r2, [r3, #12]
}
 80032ac:	bf00      	nop
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	3b10      	subs	r3, #16
 80032c8:	4a14      	ldr	r2, [pc, #80]	; (800331c <DMA_CalcBaseAndBitshift+0x64>)
 80032ca:	fba2 2303 	umull	r2, r3, r2, r3
 80032ce:	091b      	lsrs	r3, r3, #4
 80032d0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80032d2:	4a13      	ldr	r2, [pc, #76]	; (8003320 <DMA_CalcBaseAndBitshift+0x68>)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	4413      	add	r3, r2
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2b03      	cmp	r3, #3
 80032e4:	d909      	bls.n	80032fa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80032ee:	f023 0303 	bic.w	r3, r3, #3
 80032f2:	1d1a      	adds	r2, r3, #4
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	659a      	str	r2, [r3, #88]	; 0x58
 80032f8:	e007      	b.n	800330a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	687a      	ldr	r2, [r7, #4]
 8003308:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800330e:	4618      	mov	r0, r3
 8003310:	3714      	adds	r7, #20
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr
 800331a:	bf00      	nop
 800331c:	aaaaaaab 	.word	0xaaaaaaab
 8003320:	0800d714 	.word	0x0800d714

08003324 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003324:	b480      	push	{r7}
 8003326:	b085      	sub	sp, #20
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800332c:	2300      	movs	r3, #0
 800332e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003334:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d11f      	bne.n	800337e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	2b03      	cmp	r3, #3
 8003342:	d856      	bhi.n	80033f2 <DMA_CheckFifoParam+0xce>
 8003344:	a201      	add	r2, pc, #4	; (adr r2, 800334c <DMA_CheckFifoParam+0x28>)
 8003346:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800334a:	bf00      	nop
 800334c:	0800335d 	.word	0x0800335d
 8003350:	0800336f 	.word	0x0800336f
 8003354:	0800335d 	.word	0x0800335d
 8003358:	080033f3 	.word	0x080033f3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003360:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d046      	beq.n	80033f6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800336c:	e043      	b.n	80033f6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003372:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003376:	d140      	bne.n	80033fa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003378:	2301      	movs	r3, #1
 800337a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800337c:	e03d      	b.n	80033fa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	699b      	ldr	r3, [r3, #24]
 8003382:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003386:	d121      	bne.n	80033cc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2b03      	cmp	r3, #3
 800338c:	d837      	bhi.n	80033fe <DMA_CheckFifoParam+0xda>
 800338e:	a201      	add	r2, pc, #4	; (adr r2, 8003394 <DMA_CheckFifoParam+0x70>)
 8003390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003394:	080033a5 	.word	0x080033a5
 8003398:	080033ab 	.word	0x080033ab
 800339c:	080033a5 	.word	0x080033a5
 80033a0:	080033bd 	.word	0x080033bd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	73fb      	strb	r3, [r7, #15]
      break;
 80033a8:	e030      	b.n	800340c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d025      	beq.n	8003402 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033ba:	e022      	b.n	8003402 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80033c4:	d11f      	bne.n	8003406 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80033ca:	e01c      	b.n	8003406 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d903      	bls.n	80033da <DMA_CheckFifoParam+0xb6>
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	2b03      	cmp	r3, #3
 80033d6:	d003      	beq.n	80033e0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80033d8:	e018      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	73fb      	strb	r3, [r7, #15]
      break;
 80033de:	e015      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d00e      	beq.n	800340a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
      break;
 80033f0:	e00b      	b.n	800340a <DMA_CheckFifoParam+0xe6>
      break;
 80033f2:	bf00      	nop
 80033f4:	e00a      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 80033f6:	bf00      	nop
 80033f8:	e008      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 80033fa:	bf00      	nop
 80033fc:	e006      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 80033fe:	bf00      	nop
 8003400:	e004      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 8003402:	bf00      	nop
 8003404:	e002      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;   
 8003406:	bf00      	nop
 8003408:	e000      	b.n	800340c <DMA_CheckFifoParam+0xe8>
      break;
 800340a:	bf00      	nop
    }
  } 
  
  return status; 
 800340c:	7bfb      	ldrb	r3, [r7, #15]
}
 800340e:	4618      	mov	r0, r3
 8003410:	3714      	adds	r7, #20
 8003412:	46bd      	mov	sp, r7
 8003414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003418:	4770      	bx	lr
 800341a:	bf00      	nop

0800341c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800341c:	b480      	push	{r7}
 800341e:	b089      	sub	sp, #36	; 0x24
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
 8003424:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003426:	2300      	movs	r3, #0
 8003428:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800342a:	2300      	movs	r3, #0
 800342c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800342e:	2300      	movs	r3, #0
 8003430:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
 8003436:	e159      	b.n	80036ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003438:	2201      	movs	r2, #1
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	fa02 f303 	lsl.w	r3, r2, r3
 8003440:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	697a      	ldr	r2, [r7, #20]
 8003448:	4013      	ands	r3, r2
 800344a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800344c:	693a      	ldr	r2, [r7, #16]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	429a      	cmp	r2, r3
 8003452:	f040 8148 	bne.w	80036e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	2b01      	cmp	r3, #1
 8003460:	d005      	beq.n	800346e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800346a:	2b02      	cmp	r3, #2
 800346c:	d130      	bne.n	80034d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	2203      	movs	r2, #3
 800347a:	fa02 f303 	lsl.w	r3, r2, r3
 800347e:	43db      	mvns	r3, r3
 8003480:	69ba      	ldr	r2, [r7, #24]
 8003482:	4013      	ands	r3, r2
 8003484:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	fa02 f303 	lsl.w	r3, r2, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4313      	orrs	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	69ba      	ldr	r2, [r7, #24]
 800349c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80034a4:	2201      	movs	r2, #1
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	43db      	mvns	r3, r3
 80034ae:	69ba      	ldr	r2, [r7, #24]
 80034b0:	4013      	ands	r3, r2
 80034b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	091b      	lsrs	r3, r3, #4
 80034ba:	f003 0201 	and.w	r2, r3, #1
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	fa02 f303 	lsl.w	r3, r2, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f003 0303 	and.w	r3, r3, #3
 80034d8:	2b03      	cmp	r3, #3
 80034da:	d017      	beq.n	800350c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	2203      	movs	r2, #3
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43db      	mvns	r3, r3
 80034ee:	69ba      	ldr	r2, [r7, #24]
 80034f0:	4013      	ands	r3, r2
 80034f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	689a      	ldr	r2, [r3, #8]
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003500:	69ba      	ldr	r2, [r7, #24]
 8003502:	4313      	orrs	r3, r2
 8003504:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69ba      	ldr	r2, [r7, #24]
 800350a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f003 0303 	and.w	r3, r3, #3
 8003514:	2b02      	cmp	r3, #2
 8003516:	d123      	bne.n	8003560 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	08da      	lsrs	r2, r3, #3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3208      	adds	r2, #8
 8003520:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003524:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	f003 0307 	and.w	r3, r3, #7
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	220f      	movs	r2, #15
 8003530:	fa02 f303 	lsl.w	r3, r2, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	4013      	ands	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	691a      	ldr	r2, [r3, #16]
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	fa02 f303 	lsl.w	r3, r2, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4313      	orrs	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	08da      	lsrs	r2, r3, #3
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	3208      	adds	r2, #8
 800355a:	69b9      	ldr	r1, [r7, #24]
 800355c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003566:	69fb      	ldr	r3, [r7, #28]
 8003568:	005b      	lsls	r3, r3, #1
 800356a:	2203      	movs	r2, #3
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0203 	and.w	r2, r3, #3
 8003580:	69fb      	ldr	r3, [r7, #28]
 8003582:	005b      	lsls	r3, r3, #1
 8003584:	fa02 f303 	lsl.w	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 80a2 	beq.w	80036e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]
 80035a6:	4b57      	ldr	r3, [pc, #348]	; (8003704 <HAL_GPIO_Init+0x2e8>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	4a56      	ldr	r2, [pc, #344]	; (8003704 <HAL_GPIO_Init+0x2e8>)
 80035ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035b0:	6453      	str	r3, [r2, #68]	; 0x44
 80035b2:	4b54      	ldr	r3, [pc, #336]	; (8003704 <HAL_GPIO_Init+0x2e8>)
 80035b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ba:	60fb      	str	r3, [r7, #12]
 80035bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035be:	4a52      	ldr	r2, [pc, #328]	; (8003708 <HAL_GPIO_Init+0x2ec>)
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	089b      	lsrs	r3, r3, #2
 80035c4:	3302      	adds	r3, #2
 80035c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	f003 0303 	and.w	r3, r3, #3
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	220f      	movs	r2, #15
 80035d6:	fa02 f303 	lsl.w	r3, r2, r3
 80035da:	43db      	mvns	r3, r3
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	4013      	ands	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a49      	ldr	r2, [pc, #292]	; (800370c <HAL_GPIO_Init+0x2f0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d019      	beq.n	800361e <HAL_GPIO_Init+0x202>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a48      	ldr	r2, [pc, #288]	; (8003710 <HAL_GPIO_Init+0x2f4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d013      	beq.n	800361a <HAL_GPIO_Init+0x1fe>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a47      	ldr	r2, [pc, #284]	; (8003714 <HAL_GPIO_Init+0x2f8>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d00d      	beq.n	8003616 <HAL_GPIO_Init+0x1fa>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a46      	ldr	r2, [pc, #280]	; (8003718 <HAL_GPIO_Init+0x2fc>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d007      	beq.n	8003612 <HAL_GPIO_Init+0x1f6>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a45      	ldr	r2, [pc, #276]	; (800371c <HAL_GPIO_Init+0x300>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d101      	bne.n	800360e <HAL_GPIO_Init+0x1f2>
 800360a:	2304      	movs	r3, #4
 800360c:	e008      	b.n	8003620 <HAL_GPIO_Init+0x204>
 800360e:	2307      	movs	r3, #7
 8003610:	e006      	b.n	8003620 <HAL_GPIO_Init+0x204>
 8003612:	2303      	movs	r3, #3
 8003614:	e004      	b.n	8003620 <HAL_GPIO_Init+0x204>
 8003616:	2302      	movs	r3, #2
 8003618:	e002      	b.n	8003620 <HAL_GPIO_Init+0x204>
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <HAL_GPIO_Init+0x204>
 800361e:	2300      	movs	r3, #0
 8003620:	69fa      	ldr	r2, [r7, #28]
 8003622:	f002 0203 	and.w	r2, r2, #3
 8003626:	0092      	lsls	r2, r2, #2
 8003628:	4093      	lsls	r3, r2
 800362a:	69ba      	ldr	r2, [r7, #24]
 800362c:	4313      	orrs	r3, r2
 800362e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003630:	4935      	ldr	r1, [pc, #212]	; (8003708 <HAL_GPIO_Init+0x2ec>)
 8003632:	69fb      	ldr	r3, [r7, #28]
 8003634:	089b      	lsrs	r3, r3, #2
 8003636:	3302      	adds	r3, #2
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800363e:	4b38      	ldr	r3, [pc, #224]	; (8003720 <HAL_GPIO_Init+0x304>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	43db      	mvns	r3, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4013      	ands	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4313      	orrs	r3, r2
 8003660:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003662:	4a2f      	ldr	r2, [pc, #188]	; (8003720 <HAL_GPIO_Init+0x304>)
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003668:	4b2d      	ldr	r3, [pc, #180]	; (8003720 <HAL_GPIO_Init+0x304>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	43db      	mvns	r3, r3
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	4013      	ands	r3, r2
 8003676:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	685b      	ldr	r3, [r3, #4]
 800367c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d003      	beq.n	800368c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003684:	69ba      	ldr	r2, [r7, #24]
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	4313      	orrs	r3, r2
 800368a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800368c:	4a24      	ldr	r2, [pc, #144]	; (8003720 <HAL_GPIO_Init+0x304>)
 800368e:	69bb      	ldr	r3, [r7, #24]
 8003690:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003692:	4b23      	ldr	r3, [pc, #140]	; (8003720 <HAL_GPIO_Init+0x304>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	43db      	mvns	r3, r3
 800369c:	69ba      	ldr	r2, [r7, #24]
 800369e:	4013      	ands	r3, r2
 80036a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d003      	beq.n	80036b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036ae:	69ba      	ldr	r2, [r7, #24]
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036b6:	4a1a      	ldr	r2, [pc, #104]	; (8003720 <HAL_GPIO_Init+0x304>)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036bc:	4b18      	ldr	r3, [pc, #96]	; (8003720 <HAL_GPIO_Init+0x304>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	43db      	mvns	r3, r3
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4013      	ands	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036e0:	4a0f      	ldr	r2, [pc, #60]	; (8003720 <HAL_GPIO_Init+0x304>)
 80036e2:	69bb      	ldr	r3, [r7, #24]
 80036e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	3301      	adds	r3, #1
 80036ea:	61fb      	str	r3, [r7, #28]
 80036ec:	69fb      	ldr	r3, [r7, #28]
 80036ee:	2b0f      	cmp	r3, #15
 80036f0:	f67f aea2 	bls.w	8003438 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036f4:	bf00      	nop
 80036f6:	bf00      	nop
 80036f8:	3724      	adds	r7, #36	; 0x24
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40023800 	.word	0x40023800
 8003708:	40013800 	.word	0x40013800
 800370c:	40020000 	.word	0x40020000
 8003710:	40020400 	.word	0x40020400
 8003714:	40020800 	.word	0x40020800
 8003718:	40020c00 	.word	0x40020c00
 800371c:	40021000 	.word	0x40021000
 8003720:	40013c00 	.word	0x40013c00

08003724 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800372e:	4b08      	ldr	r3, [pc, #32]	; (8003750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	88fb      	ldrh	r3, [r7, #6]
 8003734:	4013      	ands	r3, r2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d006      	beq.n	8003748 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800373a:	4a05      	ldr	r2, [pc, #20]	; (8003750 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800373c:	88fb      	ldrh	r3, [r7, #6]
 800373e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	4618      	mov	r0, r3
 8003744:	f7fe f8dc 	bl	8001900 <HAL_GPIO_EXTI_Callback>
  }
}
 8003748:	bf00      	nop
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	40013c00 	.word	0x40013c00

08003754 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d101      	bne.n	8003766 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e12b      	b.n	80039be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800377a:	6878      	ldr	r0, [r7, #4]
 800377c:	f7fd fdca 	bl	8001314 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2224      	movs	r2, #36	; 0x24
 8003784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	681a      	ldr	r2, [r3, #0]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f022 0201 	bic.w	r2, r2, #1
 8003796:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037b8:	f001 ffbe 	bl	8005738 <HAL_RCC_GetPCLK1Freq>
 80037bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	4a81      	ldr	r2, [pc, #516]	; (80039c8 <HAL_I2C_Init+0x274>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d807      	bhi.n	80037d8 <HAL_I2C_Init+0x84>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	4a80      	ldr	r2, [pc, #512]	; (80039cc <HAL_I2C_Init+0x278>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	bf94      	ite	ls
 80037d0:	2301      	movls	r3, #1
 80037d2:	2300      	movhi	r3, #0
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	e006      	b.n	80037e6 <HAL_I2C_Init+0x92>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4a7d      	ldr	r2, [pc, #500]	; (80039d0 <HAL_I2C_Init+0x27c>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	bf94      	ite	ls
 80037e0:	2301      	movls	r3, #1
 80037e2:	2300      	movhi	r3, #0
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e0e7      	b.n	80039be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	4a78      	ldr	r2, [pc, #480]	; (80039d4 <HAL_I2C_Init+0x280>)
 80037f2:	fba2 2303 	umull	r2, r3, r2, r3
 80037f6:	0c9b      	lsrs	r3, r3, #18
 80037f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	430a      	orrs	r2, r1
 800380c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	4a6a      	ldr	r2, [pc, #424]	; (80039c8 <HAL_I2C_Init+0x274>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d802      	bhi.n	8003828 <HAL_I2C_Init+0xd4>
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	3301      	adds	r3, #1
 8003826:	e009      	b.n	800383c <HAL_I2C_Init+0xe8>
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800382e:	fb02 f303 	mul.w	r3, r2, r3
 8003832:	4a69      	ldr	r2, [pc, #420]	; (80039d8 <HAL_I2C_Init+0x284>)
 8003834:	fba2 2303 	umull	r2, r3, r2, r3
 8003838:	099b      	lsrs	r3, r3, #6
 800383a:	3301      	adds	r3, #1
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	430b      	orrs	r3, r1
 8003842:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	69db      	ldr	r3, [r3, #28]
 800384a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800384e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	495c      	ldr	r1, [pc, #368]	; (80039c8 <HAL_I2C_Init+0x274>)
 8003858:	428b      	cmp	r3, r1
 800385a:	d819      	bhi.n	8003890 <HAL_I2C_Init+0x13c>
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	1e59      	subs	r1, r3, #1
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	685b      	ldr	r3, [r3, #4]
 8003864:	005b      	lsls	r3, r3, #1
 8003866:	fbb1 f3f3 	udiv	r3, r1, r3
 800386a:	1c59      	adds	r1, r3, #1
 800386c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003870:	400b      	ands	r3, r1
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00a      	beq.n	800388c <HAL_I2C_Init+0x138>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	1e59      	subs	r1, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	fbb1 f3f3 	udiv	r3, r1, r3
 8003884:	3301      	adds	r3, #1
 8003886:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388a:	e051      	b.n	8003930 <HAL_I2C_Init+0x1dc>
 800388c:	2304      	movs	r3, #4
 800388e:	e04f      	b.n	8003930 <HAL_I2C_Init+0x1dc>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d111      	bne.n	80038bc <HAL_I2C_Init+0x168>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	1e58      	subs	r0, r3, #1
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6859      	ldr	r1, [r3, #4]
 80038a0:	460b      	mov	r3, r1
 80038a2:	005b      	lsls	r3, r3, #1
 80038a4:	440b      	add	r3, r1
 80038a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038aa:	3301      	adds	r3, #1
 80038ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	bf0c      	ite	eq
 80038b4:	2301      	moveq	r3, #1
 80038b6:	2300      	movne	r3, #0
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	e012      	b.n	80038e2 <HAL_I2C_Init+0x18e>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	1e58      	subs	r0, r3, #1
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6859      	ldr	r1, [r3, #4]
 80038c4:	460b      	mov	r3, r1
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	440b      	add	r3, r1
 80038ca:	0099      	lsls	r1, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80038d2:	3301      	adds	r3, #1
 80038d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d8:	2b00      	cmp	r3, #0
 80038da:	bf0c      	ite	eq
 80038dc:	2301      	moveq	r3, #1
 80038de:	2300      	movne	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <HAL_I2C_Init+0x196>
 80038e6:	2301      	movs	r3, #1
 80038e8:	e022      	b.n	8003930 <HAL_I2C_Init+0x1dc>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d10e      	bne.n	8003910 <HAL_I2C_Init+0x1bc>
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	1e58      	subs	r0, r3, #1
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6859      	ldr	r1, [r3, #4]
 80038fa:	460b      	mov	r3, r1
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	440b      	add	r3, r1
 8003900:	fbb0 f3f3 	udiv	r3, r0, r3
 8003904:	3301      	adds	r3, #1
 8003906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800390e:	e00f      	b.n	8003930 <HAL_I2C_Init+0x1dc>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	1e58      	subs	r0, r3, #1
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6859      	ldr	r1, [r3, #4]
 8003918:	460b      	mov	r3, r1
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	0099      	lsls	r1, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	fbb0 f3f3 	udiv	r3, r0, r3
 8003926:	3301      	adds	r3, #1
 8003928:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800392c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	6809      	ldr	r1, [r1, #0]
 8003934:	4313      	orrs	r3, r2
 8003936:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	69da      	ldr	r2, [r3, #28]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	430a      	orrs	r2, r1
 8003952:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	689b      	ldr	r3, [r3, #8]
 800395a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800395e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003962:	687a      	ldr	r2, [r7, #4]
 8003964:	6911      	ldr	r1, [r2, #16]
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	68d2      	ldr	r2, [r2, #12]
 800396a:	4311      	orrs	r1, r2
 800396c:	687a      	ldr	r2, [r7, #4]
 800396e:	6812      	ldr	r2, [r2, #0]
 8003970:	430b      	orrs	r3, r1
 8003972:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	68db      	ldr	r3, [r3, #12]
 800397a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	695a      	ldr	r2, [r3, #20]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	699b      	ldr	r3, [r3, #24]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	430a      	orrs	r2, r1
 800398e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681a      	ldr	r2, [r3, #0]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f042 0201 	orr.w	r2, r2, #1
 800399e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2220      	movs	r2, #32
 80039aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039bc:	2300      	movs	r3, #0
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	000186a0 	.word	0x000186a0
 80039cc:	001e847f 	.word	0x001e847f
 80039d0:	003d08ff 	.word	0x003d08ff
 80039d4:	431bde83 	.word	0x431bde83
 80039d8:	10624dd3 	.word	0x10624dd3

080039dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80039dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039de:	b08f      	sub	sp, #60	; 0x3c
 80039e0:	af0a      	add	r7, sp, #40	; 0x28
 80039e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d101      	bne.n	80039ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e10f      	b.n	8003c0e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d106      	bne.n	8003a0e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f006 fc19 	bl	800a240 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2203      	movs	r2, #3
 8003a12:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d102      	bne.n	8003a28 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4618      	mov	r0, r3
 8003a2e:	f002 ff00 	bl	8006832 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	603b      	str	r3, [r7, #0]
 8003a38:	687e      	ldr	r6, [r7, #4]
 8003a3a:	466d      	mov	r5, sp
 8003a3c:	f106 0410 	add.w	r4, r6, #16
 8003a40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003a46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003a48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003a4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003a50:	1d33      	adds	r3, r6, #4
 8003a52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a54:	6838      	ldr	r0, [r7, #0]
 8003a56:	f002 fdd8 	bl	800660a <USB_CoreInit>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d005      	beq.n	8003a6c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0d0      	b.n	8003c0e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	2100      	movs	r1, #0
 8003a72:	4618      	mov	r0, r3
 8003a74:	f002 feee 	bl	8006854 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a78:	2300      	movs	r3, #0
 8003a7a:	73fb      	strb	r3, [r7, #15]
 8003a7c:	e04a      	b.n	8003b14 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003a7e:	7bfa      	ldrb	r2, [r7, #15]
 8003a80:	6879      	ldr	r1, [r7, #4]
 8003a82:	4613      	mov	r3, r2
 8003a84:	00db      	lsls	r3, r3, #3
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	333d      	adds	r3, #61	; 0x3d
 8003a8e:	2201      	movs	r2, #1
 8003a90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003a92:	7bfa      	ldrb	r2, [r7, #15]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	00db      	lsls	r3, r3, #3
 8003a9a:	4413      	add	r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	333c      	adds	r3, #60	; 0x3c
 8003aa2:	7bfa      	ldrb	r2, [r7, #15]
 8003aa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003aa6:	7bfa      	ldrb	r2, [r7, #15]
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	b298      	uxth	r0, r3
 8003aac:	6879      	ldr	r1, [r7, #4]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	009b      	lsls	r3, r3, #2
 8003ab6:	440b      	add	r3, r1
 8003ab8:	3344      	adds	r3, #68	; 0x44
 8003aba:	4602      	mov	r2, r0
 8003abc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003abe:	7bfa      	ldrb	r2, [r7, #15]
 8003ac0:	6879      	ldr	r1, [r7, #4]
 8003ac2:	4613      	mov	r3, r2
 8003ac4:	00db      	lsls	r3, r3, #3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	009b      	lsls	r3, r3, #2
 8003aca:	440b      	add	r3, r1
 8003acc:	3340      	adds	r3, #64	; 0x40
 8003ace:	2200      	movs	r2, #0
 8003ad0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003ad2:	7bfa      	ldrb	r2, [r7, #15]
 8003ad4:	6879      	ldr	r1, [r7, #4]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	00db      	lsls	r3, r3, #3
 8003ada:	4413      	add	r3, r2
 8003adc:	009b      	lsls	r3, r3, #2
 8003ade:	440b      	add	r3, r1
 8003ae0:	3348      	adds	r3, #72	; 0x48
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003ae6:	7bfa      	ldrb	r2, [r7, #15]
 8003ae8:	6879      	ldr	r1, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	00db      	lsls	r3, r3, #3
 8003aee:	4413      	add	r3, r2
 8003af0:	009b      	lsls	r3, r3, #2
 8003af2:	440b      	add	r3, r1
 8003af4:	334c      	adds	r3, #76	; 0x4c
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003afa:	7bfa      	ldrb	r2, [r7, #15]
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	4613      	mov	r3, r2
 8003b00:	00db      	lsls	r3, r3, #3
 8003b02:	4413      	add	r3, r2
 8003b04:	009b      	lsls	r3, r3, #2
 8003b06:	440b      	add	r3, r1
 8003b08:	3354      	adds	r3, #84	; 0x54
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b0e:	7bfb      	ldrb	r3, [r7, #15]
 8003b10:	3301      	adds	r3, #1
 8003b12:	73fb      	strb	r3, [r7, #15]
 8003b14:	7bfa      	ldrb	r2, [r7, #15]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d3af      	bcc.n	8003a7e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003b1e:	2300      	movs	r3, #0
 8003b20:	73fb      	strb	r3, [r7, #15]
 8003b22:	e044      	b.n	8003bae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003b24:	7bfa      	ldrb	r2, [r7, #15]
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003b36:	2200      	movs	r2, #0
 8003b38:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003b3a:	7bfa      	ldrb	r2, [r7, #15]
 8003b3c:	6879      	ldr	r1, [r7, #4]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003b4c:	7bfa      	ldrb	r2, [r7, #15]
 8003b4e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003b50:	7bfa      	ldrb	r2, [r7, #15]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	4613      	mov	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003b62:	2200      	movs	r2, #0
 8003b64:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003b66:	7bfa      	ldrb	r2, [r7, #15]
 8003b68:	6879      	ldr	r1, [r7, #4]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	00db      	lsls	r3, r3, #3
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	440b      	add	r3, r1
 8003b74:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003b78:	2200      	movs	r2, #0
 8003b7a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003b7c:	7bfa      	ldrb	r2, [r7, #15]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	00db      	lsls	r3, r3, #3
 8003b84:	4413      	add	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003b92:	7bfa      	ldrb	r2, [r7, #15]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ba8:	7bfb      	ldrb	r3, [r7, #15]
 8003baa:	3301      	adds	r3, #1
 8003bac:	73fb      	strb	r3, [r7, #15]
 8003bae:	7bfa      	ldrb	r2, [r7, #15]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d3b5      	bcc.n	8003b24 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	603b      	str	r3, [r7, #0]
 8003bbe:	687e      	ldr	r6, [r7, #4]
 8003bc0:	466d      	mov	r5, sp
 8003bc2:	f106 0410 	add.w	r4, r6, #16
 8003bc6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bc8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003bcc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003bce:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003bd2:	e885 0003 	stmia.w	r5, {r0, r1}
 8003bd6:	1d33      	adds	r3, r6, #4
 8003bd8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003bda:	6838      	ldr	r0, [r7, #0]
 8003bdc:	f002 fe86 	bl	80068ec <USB_DevInit>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d005      	beq.n	8003bf2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2202      	movs	r2, #2
 8003bea:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e00d      	b.n	8003c0e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f003 ffd5 	bl	8007bb6 <USB_DevDisconnect>

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3714      	adds	r7, #20
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c16 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d101      	bne.n	8003c32 <HAL_PCD_Start+0x1c>
 8003c2e:	2302      	movs	r3, #2
 8003c30:	e020      	b.n	8003c74 <HAL_PCD_Start+0x5e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2201      	movs	r2, #1
 8003c36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d109      	bne.n	8003c56 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d005      	beq.n	8003c56 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	f002 fdd8 	bl	8006810 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f003 ff85 	bl	8007b74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3710      	adds	r7, #16
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003c7c:	b590      	push	{r4, r7, lr}
 8003c7e:	b08d      	sub	sp, #52	; 0x34
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c8a:	6a3b      	ldr	r3, [r7, #32]
 8003c8c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f004 f843 	bl	8007d1e <USB_GetMode>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f040 848a 	bne.w	80045b4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f003 ffa7 	bl	8007bf8 <USB_ReadInterrupts>
 8003caa:	4603      	mov	r3, r0
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 8480 	beq.w	80045b2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cb8:	689b      	ldr	r3, [r3, #8]
 8003cba:	0a1b      	lsrs	r3, r3, #8
 8003cbc:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f003 ff94 	bl	8007bf8 <USB_ReadInterrupts>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f003 0302 	and.w	r3, r3, #2
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d107      	bne.n	8003cea <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	695a      	ldr	r2, [r3, #20]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f002 0202 	and.w	r2, r2, #2
 8003ce8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f003 ff82 	bl	8007bf8 <USB_ReadInterrupts>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	f003 0310 	and.w	r3, r3, #16
 8003cfa:	2b10      	cmp	r3, #16
 8003cfc:	d161      	bne.n	8003dc2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	699a      	ldr	r2, [r3, #24]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 0210 	bic.w	r2, r2, #16
 8003d0c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	f003 020f 	and.w	r2, r3, #15
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	4413      	add	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	4413      	add	r3, r2
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	0c5b      	lsrs	r3, r3, #17
 8003d32:	f003 030f 	and.w	r3, r3, #15
 8003d36:	2b02      	cmp	r3, #2
 8003d38:	d124      	bne.n	8003d84 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003d40:	4013      	ands	r3, r2
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d035      	beq.n	8003db2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	091b      	lsrs	r3, r3, #4
 8003d4e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003d50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	461a      	mov	r2, r3
 8003d58:	6a38      	ldr	r0, [r7, #32]
 8003d5a:	f003 fdb9 	bl	80078d0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	691a      	ldr	r2, [r3, #16]
 8003d62:	69bb      	ldr	r3, [r7, #24]
 8003d64:	091b      	lsrs	r3, r3, #4
 8003d66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d6a:	441a      	add	r2, r3
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	6a1a      	ldr	r2, [r3, #32]
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	091b      	lsrs	r3, r3, #4
 8003d78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d7c:	441a      	add	r2, r3
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	621a      	str	r2, [r3, #32]
 8003d82:	e016      	b.n	8003db2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	0c5b      	lsrs	r3, r3, #17
 8003d88:	f003 030f 	and.w	r3, r3, #15
 8003d8c:	2b06      	cmp	r3, #6
 8003d8e:	d110      	bne.n	8003db2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003d96:	2208      	movs	r2, #8
 8003d98:	4619      	mov	r1, r3
 8003d9a:	6a38      	ldr	r0, [r7, #32]
 8003d9c:	f003 fd98 	bl	80078d0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	6a1a      	ldr	r2, [r3, #32]
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	091b      	lsrs	r3, r3, #4
 8003da8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dac:	441a      	add	r2, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699a      	ldr	r2, [r3, #24]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0210 	orr.w	r2, r2, #16
 8003dc0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f003 ff16 	bl	8007bf8 <USB_ReadInterrupts>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003dd6:	f040 80a7 	bne.w	8003f28 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4618      	mov	r0, r3
 8003de4:	f003 ff1b 	bl	8007c1e <USB_ReadDevAllOutEpInterrupt>
 8003de8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003dea:	e099      	b.n	8003f20 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dee:	f003 0301 	and.w	r3, r3, #1
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 808e 	beq.w	8003f14 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dfe:	b2d2      	uxtb	r2, r2
 8003e00:	4611      	mov	r1, r2
 8003e02:	4618      	mov	r0, r3
 8003e04:	f003 ff3f 	bl	8007c86 <USB_ReadDevOutEPInterrupt>
 8003e08:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00c      	beq.n	8003e2e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e20:	461a      	mov	r2, r3
 8003e22:	2301      	movs	r3, #1
 8003e24:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003e26:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e28:	6878      	ldr	r0, [r7, #4]
 8003e2a:	f000 fec3 	bl	8004bb4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00c      	beq.n	8003e52 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e44:	461a      	mov	r2, r3
 8003e46:	2308      	movs	r3, #8
 8003e48:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003e4a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f000 ff99 	bl	8004d84 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d008      	beq.n	8003e6e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5e:	015a      	lsls	r2, r3, #5
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	4413      	add	r3, r2
 8003e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e68:	461a      	mov	r2, r3
 8003e6a:	2310      	movs	r3, #16
 8003e6c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d030      	beq.n	8003eda <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003e78:	6a3b      	ldr	r3, [r7, #32]
 8003e7a:	695b      	ldr	r3, [r3, #20]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e80:	2b80      	cmp	r3, #128	; 0x80
 8003e82:	d109      	bne.n	8003e98 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8a:	685b      	ldr	r3, [r3, #4]
 8003e8c:	69fa      	ldr	r2, [r7, #28]
 8003e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e92:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e96:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e9a:	4613      	mov	r3, r2
 8003e9c:	00db      	lsls	r3, r3, #3
 8003e9e:	4413      	add	r3, r2
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3304      	adds	r3, #4
 8003eac:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	78db      	ldrb	r3, [r3, #3]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d108      	bne.n	8003ec8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f006 fac2 	bl	800a44c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eca:	015a      	lsls	r2, r3, #5
 8003ecc:	69fb      	ldr	r3, [r7, #28]
 8003ece:	4413      	add	r3, r2
 8003ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed4:	461a      	mov	r2, r3
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	f003 0320 	and.w	r3, r3, #32
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d008      	beq.n	8003ef6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ef0:	461a      	mov	r2, r3
 8003ef2:	2320      	movs	r3, #32
 8003ef4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d009      	beq.n	8003f14 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	015a      	lsls	r2, r3, #5
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	4413      	add	r3, r2
 8003f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0c:	461a      	mov	r2, r3
 8003f0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003f12:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f16:	3301      	adds	r3, #1
 8003f18:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f47f af62 	bne.w	8003dec <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f003 fe63 	bl	8007bf8 <USB_ReadInterrupts>
 8003f32:	4603      	mov	r3, r0
 8003f34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f38:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003f3c:	f040 80db 	bne.w	80040f6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f003 fe84 	bl	8007c52 <USB_ReadDevAllInEpInterrupt>
 8003f4a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003f50:	e0cd      	b.n	80040ee <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003f52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f54:	f003 0301 	and.w	r3, r3, #1
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	f000 80c2 	beq.w	80040e2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	4611      	mov	r1, r2
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f003 feaa 	bl	8007cc2 <USB_ReadDevInEPInterrupt>
 8003f6e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d057      	beq.n	800402a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f7c:	f003 030f 	and.w	r3, r3, #15
 8003f80:	2201      	movs	r2, #1
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	43db      	mvns	r3, r3
 8003f94:	69f9      	ldr	r1, [r7, #28]
 8003f96:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f9a:	4013      	ands	r3, r2
 8003f9c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa0:	015a      	lsls	r2, r3, #5
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	4413      	add	r3, r2
 8003fa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003faa:	461a      	mov	r2, r3
 8003fac:	2301      	movs	r3, #1
 8003fae:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d132      	bne.n	800401e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fbc:	4613      	mov	r3, r2
 8003fbe:	00db      	lsls	r3, r3, #3
 8003fc0:	4413      	add	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	440b      	add	r3, r1
 8003fc6:	334c      	adds	r3, #76	; 0x4c
 8003fc8:	6819      	ldr	r1, [r3, #0]
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fce:	4613      	mov	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	4413      	add	r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	4403      	add	r3, r0
 8003fd8:	3348      	adds	r3, #72	; 0x48
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4419      	add	r1, r3
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	4413      	add	r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	4403      	add	r3, r0
 8003fec:	334c      	adds	r3, #76	; 0x4c
 8003fee:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d113      	bne.n	800401e <HAL_PCD_IRQHandler+0x3a2>
 8003ff6:	6879      	ldr	r1, [r7, #4]
 8003ff8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	00db      	lsls	r3, r3, #3
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	3354      	adds	r3, #84	; 0x54
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d108      	bne.n	800401e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6818      	ldr	r0, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004016:	461a      	mov	r2, r3
 8004018:	2101      	movs	r1, #1
 800401a:	f003 feb1 	bl	8007d80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800401e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004020:	b2db      	uxtb	r3, r3
 8004022:	4619      	mov	r1, r3
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f006 f98c 	bl	800a342 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f003 0308 	and.w	r3, r3, #8
 8004030:	2b00      	cmp	r3, #0
 8004032:	d008      	beq.n	8004046 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	4413      	add	r3, r2
 800403c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004040:	461a      	mov	r2, r3
 8004042:	2308      	movs	r3, #8
 8004044:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	f003 0310 	and.w	r3, r3, #16
 800404c:	2b00      	cmp	r3, #0
 800404e:	d008      	beq.n	8004062 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405c:	461a      	mov	r2, r3
 800405e:	2310      	movs	r3, #16
 8004060:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004068:	2b00      	cmp	r3, #0
 800406a:	d008      	beq.n	800407e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800406c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	69fb      	ldr	r3, [r7, #28]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004078:	461a      	mov	r2, r3
 800407a:	2340      	movs	r3, #64	; 0x40
 800407c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d023      	beq.n	80040d0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800408a:	6a38      	ldr	r0, [r7, #32]
 800408c:	f002 fd92 	bl	8006bb4 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004090:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004092:	4613      	mov	r3, r2
 8004094:	00db      	lsls	r3, r3, #3
 8004096:	4413      	add	r3, r2
 8004098:	009b      	lsls	r3, r3, #2
 800409a:	3338      	adds	r3, #56	; 0x38
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	4413      	add	r3, r2
 80040a0:	3304      	adds	r3, #4
 80040a2:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	78db      	ldrb	r3, [r3, #3]
 80040a8:	2b01      	cmp	r3, #1
 80040aa:	d108      	bne.n	80040be <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	2200      	movs	r2, #0
 80040b0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80040b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	4619      	mov	r1, r3
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f006 f9d9 	bl	800a470 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80040be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c0:	015a      	lsls	r2, r3, #5
 80040c2:	69fb      	ldr	r3, [r7, #28]
 80040c4:	4413      	add	r3, r2
 80040c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040ca:	461a      	mov	r2, r3
 80040cc:	2302      	movs	r3, #2
 80040ce:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d003      	beq.n	80040e2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80040da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fcdb 	bl	8004a98 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80040e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e4:	3301      	adds	r3, #1
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	085b      	lsrs	r3, r3, #1
 80040ec:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	f47f af2e 	bne.w	8003f52 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4618      	mov	r0, r3
 80040fc:	f003 fd7c 	bl	8007bf8 <USB_ReadInterrupts>
 8004100:	4603      	mov	r3, r0
 8004102:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004106:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800410a:	d122      	bne.n	8004152 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	69fa      	ldr	r2, [r7, #28]
 8004116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800411a:	f023 0301 	bic.w	r3, r3, #1
 800411e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004126:	2b01      	cmp	r3, #1
 8004128:	d108      	bne.n	800413c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004132:	2100      	movs	r1, #0
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fec3 	bl	8004ec0 <HAL_PCDEx_LPM_Callback>
 800413a:	e002      	b.n	8004142 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f006 f977 	bl	800a430 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	695a      	ldr	r2, [r3, #20]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004150:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f003 fd4e 	bl	8007bf8 <USB_ReadInterrupts>
 800415c:	4603      	mov	r3, r0
 800415e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004166:	d112      	bne.n	800418e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 0301 	and.w	r3, r3, #1
 8004174:	2b01      	cmp	r3, #1
 8004176:	d102      	bne.n	800417e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f006 f933 	bl	800a3e4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695a      	ldr	r2, [r3, #20]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800418c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4618      	mov	r0, r3
 8004194:	f003 fd30 	bl	8007bf8 <USB_ReadInterrupts>
 8004198:	4603      	mov	r3, r0
 800419a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800419e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041a2:	f040 80b7 	bne.w	8004314 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80041a6:	69fb      	ldr	r3, [r7, #28]
 80041a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	69fa      	ldr	r2, [r7, #28]
 80041b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041b4:	f023 0301 	bic.w	r3, r3, #1
 80041b8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	2110      	movs	r1, #16
 80041c0:	4618      	mov	r0, r3
 80041c2:	f002 fcf7 	bl	8006bb4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80041c6:	2300      	movs	r3, #0
 80041c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ca:	e046      	b.n	800425a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80041cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d8:	461a      	mov	r2, r3
 80041da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041de:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80041e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e2:	015a      	lsls	r2, r3, #5
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	4413      	add	r3, r2
 80041e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041f0:	0151      	lsls	r1, r2, #5
 80041f2:	69fa      	ldr	r2, [r7, #28]
 80041f4:	440a      	add	r2, r1
 80041f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041fe:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004202:	015a      	lsls	r2, r3, #5
 8004204:	69fb      	ldr	r3, [r7, #28]
 8004206:	4413      	add	r3, r2
 8004208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800420c:	461a      	mov	r2, r3
 800420e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004212:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004224:	0151      	lsls	r1, r2, #5
 8004226:	69fa      	ldr	r2, [r7, #28]
 8004228:	440a      	add	r2, r1
 800422a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800422e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004232:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004244:	0151      	lsls	r1, r2, #5
 8004246:	69fa      	ldr	r2, [r7, #28]
 8004248:	440a      	add	r2, r1
 800424a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800424e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004252:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004256:	3301      	adds	r3, #1
 8004258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004260:	429a      	cmp	r2, r3
 8004262:	d3b3      	bcc.n	80041cc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426a:	69db      	ldr	r3, [r3, #28]
 800426c:	69fa      	ldr	r2, [r7, #28]
 800426e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004272:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004276:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427c:	2b00      	cmp	r3, #0
 800427e:	d016      	beq.n	80042ae <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004290:	f043 030b 	orr.w	r3, r3, #11
 8004294:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a0:	69fa      	ldr	r2, [r7, #28]
 80042a2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042a6:	f043 030b 	orr.w	r3, r3, #11
 80042aa:	6453      	str	r3, [r2, #68]	; 0x44
 80042ac:	e015      	b.n	80042da <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b4:	695b      	ldr	r3, [r3, #20]
 80042b6:	69fa      	ldr	r2, [r7, #28]
 80042b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80042c0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80042c4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042cc:	691b      	ldr	r3, [r3, #16]
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042d4:	f043 030b 	orr.w	r3, r3, #11
 80042d8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80042da:	69fb      	ldr	r3, [r7, #28]
 80042dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69fa      	ldr	r2, [r7, #28]
 80042e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80042e8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80042ec:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6818      	ldr	r0, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80042fe:	461a      	mov	r2, r3
 8004300:	f003 fd3e 	bl	8007d80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695a      	ldr	r2, [r3, #20]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8004312:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4618      	mov	r0, r3
 800431a:	f003 fc6d 	bl	8007bf8 <USB_ReadInterrupts>
 800431e:	4603      	mov	r3, r0
 8004320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004328:	d124      	bne.n	8004374 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f003 fd03 	bl	8007d3a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4618      	mov	r0, r3
 800433a:	f002 fcb8 	bl	8006cae <USB_GetDevSpeed>
 800433e:	4603      	mov	r3, r0
 8004340:	461a      	mov	r2, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681c      	ldr	r4, [r3, #0]
 800434a:	f001 f9e9 	bl	8005720 <HAL_RCC_GetHCLKFreq>
 800434e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004354:	b2db      	uxtb	r3, r3
 8004356:	461a      	mov	r2, r3
 8004358:	4620      	mov	r0, r4
 800435a:	f002 f9b7 	bl	80066cc <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f006 f817 	bl	800a392 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	695a      	ldr	r2, [r3, #20]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004372:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f003 fc3d 	bl	8007bf8 <USB_ReadInterrupts>
 800437e:	4603      	mov	r3, r0
 8004380:	f003 0308 	and.w	r3, r3, #8
 8004384:	2b08      	cmp	r3, #8
 8004386:	d10a      	bne.n	800439e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f005 fff4 	bl	800a376 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f002 0208 	and.w	r2, r2, #8
 800439c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f003 fc28 	bl	8007bf8 <USB_ReadInterrupts>
 80043a8:	4603      	mov	r3, r0
 80043aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043ae:	2b80      	cmp	r3, #128	; 0x80
 80043b0:	d122      	bne.n	80043f8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80043b2:	6a3b      	ldr	r3, [r7, #32]
 80043b4:	699b      	ldr	r3, [r3, #24]
 80043b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043ba:	6a3b      	ldr	r3, [r7, #32]
 80043bc:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043be:	2301      	movs	r3, #1
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
 80043c2:	e014      	b.n	80043ee <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80043c4:	6879      	ldr	r1, [r7, #4]
 80043c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043c8:	4613      	mov	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	440b      	add	r3, r1
 80043d2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d105      	bne.n	80043e8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80043dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043de:	b2db      	uxtb	r3, r3
 80043e0:	4619      	mov	r1, r3
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f000 fb27 	bl	8004a36 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	3301      	adds	r3, #1
 80043ec:	627b      	str	r3, [r7, #36]	; 0x24
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d3e5      	bcc.n	80043c4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f003 fbfb 	bl	8007bf8 <USB_ReadInterrupts>
 8004402:	4603      	mov	r3, r0
 8004404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004408:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800440c:	d13b      	bne.n	8004486 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800440e:	2301      	movs	r3, #1
 8004410:	627b      	str	r3, [r7, #36]	; 0x24
 8004412:	e02b      	b.n	800446c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	015a      	lsls	r2, r3, #5
 8004418:	69fb      	ldr	r3, [r7, #28]
 800441a:	4413      	add	r3, r2
 800441c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004428:	4613      	mov	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	4413      	add	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	3340      	adds	r3, #64	; 0x40
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b01      	cmp	r3, #1
 8004438:	d115      	bne.n	8004466 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800443a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800443c:	2b00      	cmp	r3, #0
 800443e:	da12      	bge.n	8004466 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004440:	6879      	ldr	r1, [r7, #4]
 8004442:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004444:	4613      	mov	r3, r2
 8004446:	00db      	lsls	r3, r3, #3
 8004448:	4413      	add	r3, r2
 800444a:	009b      	lsls	r3, r3, #2
 800444c:	440b      	add	r3, r1
 800444e:	333f      	adds	r3, #63	; 0x3f
 8004450:	2201      	movs	r2, #1
 8004452:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	b2db      	uxtb	r3, r3
 8004458:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800445c:	b2db      	uxtb	r3, r3
 800445e:	4619      	mov	r1, r3
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f000 fae8 	bl	8004a36 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004468:	3301      	adds	r3, #1
 800446a:	627b      	str	r3, [r7, #36]	; 0x24
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004472:	429a      	cmp	r2, r3
 8004474:	d3ce      	bcc.n	8004414 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	695a      	ldr	r2, [r3, #20]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004484:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f003 fbb4 	bl	8007bf8 <USB_ReadInterrupts>
 8004490:	4603      	mov	r3, r0
 8004492:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004496:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800449a:	d155      	bne.n	8004548 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800449c:	2301      	movs	r3, #1
 800449e:	627b      	str	r3, [r7, #36]	; 0x24
 80044a0:	e045      	b.n	800452e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80044a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b6:	4613      	mov	r3, r2
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4413      	add	r3, r2
 80044bc:	009b      	lsls	r3, r3, #2
 80044be:	440b      	add	r3, r1
 80044c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d12e      	bne.n	8004528 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	da2b      	bge.n	8004528 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80044dc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d121      	bne.n	8004528 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80044e4:	6879      	ldr	r1, [r7, #4]
 80044e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e8:	4613      	mov	r3, r2
 80044ea:	00db      	lsls	r3, r3, #3
 80044ec:	4413      	add	r3, r2
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	440b      	add	r3, r1
 80044f2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80044f6:	2201      	movs	r2, #1
 80044f8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80044fa:	6a3b      	ldr	r3, [r7, #32]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004502:	6a3b      	ldr	r3, [r7, #32]
 8004504:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004506:	6a3b      	ldr	r3, [r7, #32]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450e:	2b00      	cmp	r3, #0
 8004510:	d10a      	bne.n	8004528 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	69fa      	ldr	r2, [r7, #28]
 800451c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004520:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004524:	6053      	str	r3, [r2, #4]
            break;
 8004526:	e007      	b.n	8004538 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452a:	3301      	adds	r3, #1
 800452c:	627b      	str	r3, [r7, #36]	; 0x24
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004534:	429a      	cmp	r2, r3
 8004536:	d3b4      	bcc.n	80044a2 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004546:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f003 fb53 	bl	8007bf8 <USB_ReadInterrupts>
 8004552:	4603      	mov	r3, r0
 8004554:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004558:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800455c:	d10a      	bne.n	8004574 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f005 ff98 	bl	800a494 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	695a      	ldr	r2, [r3, #20]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004572:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4618      	mov	r0, r3
 800457a:	f003 fb3d 	bl	8007bf8 <USB_ReadInterrupts>
 800457e:	4603      	mov	r3, r0
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b04      	cmp	r3, #4
 8004586:	d115      	bne.n	80045b4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004590:	69bb      	ldr	r3, [r7, #24]
 8004592:	f003 0304 	and.w	r3, r3, #4
 8004596:	2b00      	cmp	r3, #0
 8004598:	d002      	beq.n	80045a0 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f005 ff88 	bl	800a4b0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6859      	ldr	r1, [r3, #4]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	605a      	str	r2, [r3, #4]
 80045b0:	e000      	b.n	80045b4 <HAL_PCD_IRQHandler+0x938>
      return;
 80045b2:	bf00      	nop
    }
  }
}
 80045b4:	3734      	adds	r7, #52	; 0x34
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd90      	pop	{r4, r7, pc}

080045ba <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80045ba:	b580      	push	{r7, lr}
 80045bc:	b082      	sub	sp, #8
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	460b      	mov	r3, r1
 80045c4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d101      	bne.n	80045d4 <HAL_PCD_SetAddress+0x1a>
 80045d0:	2302      	movs	r3, #2
 80045d2:	e013      	b.n	80045fc <HAL_PCD_SetAddress+0x42>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	78fa      	ldrb	r2, [r7, #3]
 80045ea:	4611      	mov	r1, r2
 80045ec:	4618      	mov	r0, r3
 80045ee:	f003 fa9b 	bl	8007b28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045fa:	2300      	movs	r3, #0
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3708      	adds	r7, #8
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	4608      	mov	r0, r1
 800460e:	4611      	mov	r1, r2
 8004610:	461a      	mov	r2, r3
 8004612:	4603      	mov	r3, r0
 8004614:	70fb      	strb	r3, [r7, #3]
 8004616:	460b      	mov	r3, r1
 8004618:	803b      	strh	r3, [r7, #0]
 800461a:	4613      	mov	r3, r2
 800461c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800461e:	2300      	movs	r3, #0
 8004620:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004622:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004626:	2b00      	cmp	r3, #0
 8004628:	da0f      	bge.n	800464a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800462a:	78fb      	ldrb	r3, [r7, #3]
 800462c:	f003 020f 	and.w	r2, r3, #15
 8004630:	4613      	mov	r3, r2
 8004632:	00db      	lsls	r3, r3, #3
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	3338      	adds	r3, #56	; 0x38
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	4413      	add	r3, r2
 800463e:	3304      	adds	r3, #4
 8004640:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	2201      	movs	r2, #1
 8004646:	705a      	strb	r2, [r3, #1]
 8004648:	e00f      	b.n	800466a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800464a:	78fb      	ldrb	r3, [r7, #3]
 800464c:	f003 020f 	and.w	r2, r3, #15
 8004650:	4613      	mov	r3, r2
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	4413      	add	r3, r2
 8004660:	3304      	adds	r3, #4
 8004662:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800466a:	78fb      	ldrb	r3, [r7, #3]
 800466c:	f003 030f 	and.w	r3, r3, #15
 8004670:	b2da      	uxtb	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004676:	883a      	ldrh	r2, [r7, #0]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	78ba      	ldrb	r2, [r7, #2]
 8004680:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	785b      	ldrb	r3, [r3, #1]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d004      	beq.n	8004694 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	b29a      	uxth	r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004694:	78bb      	ldrb	r3, [r7, #2]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d102      	bne.n	80046a0 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_PCD_EP_Open+0xaa>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e00e      	b.n	80046cc <HAL_PCD_EP_Open+0xc8>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68f9      	ldr	r1, [r7, #12]
 80046bc:	4618      	mov	r0, r3
 80046be:	f002 fb1b 	bl	8006cf8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80046ca:	7afb      	ldrb	r3, [r7, #11]
}
 80046cc:	4618      	mov	r0, r3
 80046ce:	3710      	adds	r7, #16
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b084      	sub	sp, #16
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
 80046dc:	460b      	mov	r3, r1
 80046de:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	da0f      	bge.n	8004708 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046e8:	78fb      	ldrb	r3, [r7, #3]
 80046ea:	f003 020f 	and.w	r2, r3, #15
 80046ee:	4613      	mov	r3, r2
 80046f0:	00db      	lsls	r3, r3, #3
 80046f2:	4413      	add	r3, r2
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	3338      	adds	r3, #56	; 0x38
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	4413      	add	r3, r2
 80046fc:	3304      	adds	r3, #4
 80046fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	705a      	strb	r2, [r3, #1]
 8004706:	e00f      	b.n	8004728 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004708:	78fb      	ldrb	r3, [r7, #3]
 800470a:	f003 020f 	and.w	r2, r3, #15
 800470e:	4613      	mov	r3, r2
 8004710:	00db      	lsls	r3, r3, #3
 8004712:	4413      	add	r3, r2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	4413      	add	r3, r2
 800471e:	3304      	adds	r3, #4
 8004720:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004728:	78fb      	ldrb	r3, [r7, #3]
 800472a:	f003 030f 	and.w	r3, r3, #15
 800472e:	b2da      	uxtb	r2, r3
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800473a:	2b01      	cmp	r3, #1
 800473c:	d101      	bne.n	8004742 <HAL_PCD_EP_Close+0x6e>
 800473e:	2302      	movs	r3, #2
 8004740:	e00e      	b.n	8004760 <HAL_PCD_EP_Close+0x8c>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2201      	movs	r2, #1
 8004746:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68f9      	ldr	r1, [r7, #12]
 8004750:	4618      	mov	r0, r3
 8004752:	f002 fb59 	bl	8006e08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800475e:	2300      	movs	r3, #0
}
 8004760:	4618      	mov	r0, r3
 8004762:	3710      	adds	r7, #16
 8004764:	46bd      	mov	sp, r7
 8004766:	bd80      	pop	{r7, pc}

08004768 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b086      	sub	sp, #24
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	607a      	str	r2, [r7, #4]
 8004772:	603b      	str	r3, [r7, #0]
 8004774:	460b      	mov	r3, r1
 8004776:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004778:	7afb      	ldrb	r3, [r7, #11]
 800477a:	f003 020f 	and.w	r2, r3, #15
 800477e:	4613      	mov	r3, r2
 8004780:	00db      	lsls	r3, r3, #3
 8004782:	4413      	add	r3, r2
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800478a:	68fa      	ldr	r2, [r7, #12]
 800478c:	4413      	add	r3, r2
 800478e:	3304      	adds	r3, #4
 8004790:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	683a      	ldr	r2, [r7, #0]
 800479c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	2200      	movs	r2, #0
 80047a2:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	2200      	movs	r2, #0
 80047a8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80047aa:	7afb      	ldrb	r3, [r7, #11]
 80047ac:	f003 030f 	and.w	r3, r3, #15
 80047b0:	b2da      	uxtb	r2, r3
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d102      	bne.n	80047c4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80047c4:	7afb      	ldrb	r3, [r7, #11]
 80047c6:	f003 030f 	and.w	r3, r3, #15
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d109      	bne.n	80047e2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6818      	ldr	r0, [r3, #0]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	691b      	ldr	r3, [r3, #16]
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	6979      	ldr	r1, [r7, #20]
 80047dc:	f002 fe38 	bl	8007450 <USB_EP0StartXfer>
 80047e0:	e008      	b.n	80047f4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6818      	ldr	r0, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	461a      	mov	r2, r3
 80047ee:	6979      	ldr	r1, [r7, #20]
 80047f0:	f002 fbe6 	bl	8006fc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}

080047fe <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80047fe:	b480      	push	{r7}
 8004800:	b083      	sub	sp, #12
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	460b      	mov	r3, r1
 8004808:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	f003 020f 	and.w	r2, r3, #15
 8004810:	6879      	ldr	r1, [r7, #4]
 8004812:	4613      	mov	r3, r2
 8004814:	00db      	lsls	r3, r3, #3
 8004816:	4413      	add	r3, r2
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	440b      	add	r3, r1
 800481c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8004820:	681b      	ldr	r3, [r3, #0]
}
 8004822:	4618      	mov	r0, r3
 8004824:	370c      	adds	r7, #12
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800482e:	b580      	push	{r7, lr}
 8004830:	b086      	sub	sp, #24
 8004832:	af00      	add	r7, sp, #0
 8004834:	60f8      	str	r0, [r7, #12]
 8004836:	607a      	str	r2, [r7, #4]
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	460b      	mov	r3, r1
 800483c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800483e:	7afb      	ldrb	r3, [r7, #11]
 8004840:	f003 020f 	and.w	r2, r3, #15
 8004844:	4613      	mov	r3, r2
 8004846:	00db      	lsls	r3, r3, #3
 8004848:	4413      	add	r3, r2
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	3338      	adds	r3, #56	; 0x38
 800484e:	68fa      	ldr	r2, [r7, #12]
 8004850:	4413      	add	r3, r2
 8004852:	3304      	adds	r3, #4
 8004854:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	2200      	movs	r2, #0
 8004866:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	2201      	movs	r2, #1
 800486c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800486e:	7afb      	ldrb	r3, [r7, #11]
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	b2da      	uxtb	r2, r3
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d102      	bne.n	8004888 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004882:	687a      	ldr	r2, [r7, #4]
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004888:	7afb      	ldrb	r3, [r7, #11]
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	2b00      	cmp	r3, #0
 8004890:	d109      	bne.n	80048a6 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6818      	ldr	r0, [r3, #0]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	b2db      	uxtb	r3, r3
 800489c:	461a      	mov	r2, r3
 800489e:	6979      	ldr	r1, [r7, #20]
 80048a0:	f002 fdd6 	bl	8007450 <USB_EP0StartXfer>
 80048a4:	e008      	b.n	80048b8 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6818      	ldr	r0, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	461a      	mov	r2, r3
 80048b2:	6979      	ldr	r1, [r7, #20]
 80048b4:	f002 fb84 	bl	8006fc0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}

080048c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048c2:	b580      	push	{r7, lr}
 80048c4:	b084      	sub	sp, #16
 80048c6:	af00      	add	r7, sp, #0
 80048c8:	6078      	str	r0, [r7, #4]
 80048ca:	460b      	mov	r3, r1
 80048cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80048ce:	78fb      	ldrb	r3, [r7, #3]
 80048d0:	f003 020f 	and.w	r2, r3, #15
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d901      	bls.n	80048e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e050      	b.n	8004982 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80048e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	da0f      	bge.n	8004908 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048e8:	78fb      	ldrb	r3, [r7, #3]
 80048ea:	f003 020f 	and.w	r2, r3, #15
 80048ee:	4613      	mov	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	3338      	adds	r3, #56	; 0x38
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	4413      	add	r3, r2
 80048fc:	3304      	adds	r3, #4
 80048fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2201      	movs	r2, #1
 8004904:	705a      	strb	r2, [r3, #1]
 8004906:	e00d      	b.n	8004924 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004908:	78fa      	ldrb	r2, [r7, #3]
 800490a:	4613      	mov	r3, r2
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	4413      	add	r3, r2
 800491a:	3304      	adds	r3, #4
 800491c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2200      	movs	r2, #0
 8004922:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2201      	movs	r2, #1
 8004928:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800492a:	78fb      	ldrb	r3, [r7, #3]
 800492c:	f003 030f 	and.w	r3, r3, #15
 8004930:	b2da      	uxtb	r2, r3
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800493c:	2b01      	cmp	r3, #1
 800493e:	d101      	bne.n	8004944 <HAL_PCD_EP_SetStall+0x82>
 8004940:	2302      	movs	r3, #2
 8004942:	e01e      	b.n	8004982 <HAL_PCD_EP_SetStall+0xc0>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68f9      	ldr	r1, [r7, #12]
 8004952:	4618      	mov	r0, r3
 8004954:	f003 f814 	bl	8007980 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004958:	78fb      	ldrb	r3, [r7, #3]
 800495a:	f003 030f 	and.w	r3, r3, #15
 800495e:	2b00      	cmp	r3, #0
 8004960:	d10a      	bne.n	8004978 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6818      	ldr	r0, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	b2d9      	uxtb	r1, r3
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004972:	461a      	mov	r2, r3
 8004974:	f003 fa04 	bl	8007d80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004980:	2300      	movs	r3, #0
}
 8004982:	4618      	mov	r0, r3
 8004984:	3710      	adds	r7, #16
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}

0800498a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800498a:	b580      	push	{r7, lr}
 800498c:	b084      	sub	sp, #16
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	460b      	mov	r3, r1
 8004994:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	f003 020f 	and.w	r2, r3, #15
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	685b      	ldr	r3, [r3, #4]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d901      	bls.n	80049a8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e042      	b.n	8004a2e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80049a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	da0f      	bge.n	80049d0 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80049b0:	78fb      	ldrb	r3, [r7, #3]
 80049b2:	f003 020f 	and.w	r2, r3, #15
 80049b6:	4613      	mov	r3, r2
 80049b8:	00db      	lsls	r3, r3, #3
 80049ba:	4413      	add	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	3338      	adds	r3, #56	; 0x38
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	4413      	add	r3, r2
 80049c4:	3304      	adds	r3, #4
 80049c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2201      	movs	r2, #1
 80049cc:	705a      	strb	r2, [r3, #1]
 80049ce:	e00f      	b.n	80049f0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049d0:	78fb      	ldrb	r3, [r7, #3]
 80049d2:	f003 020f 	and.w	r2, r3, #15
 80049d6:	4613      	mov	r3, r2
 80049d8:	00db      	lsls	r3, r3, #3
 80049da:	4413      	add	r3, r2
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80049e2:	687a      	ldr	r2, [r7, #4]
 80049e4:	4413      	add	r3, r2
 80049e6:	3304      	adds	r3, #4
 80049e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2200      	movs	r2, #0
 80049ee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049f6:	78fb      	ldrb	r3, [r7, #3]
 80049f8:	f003 030f 	and.w	r3, r3, #15
 80049fc:	b2da      	uxtb	r2, r3
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a08:	2b01      	cmp	r3, #1
 8004a0a:	d101      	bne.n	8004a10 <HAL_PCD_EP_ClrStall+0x86>
 8004a0c:	2302      	movs	r3, #2
 8004a0e:	e00e      	b.n	8004a2e <HAL_PCD_EP_ClrStall+0xa4>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2201      	movs	r2, #1
 8004a14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68f9      	ldr	r1, [r7, #12]
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f003 f81c 	bl	8007a5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b084      	sub	sp, #16
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	460b      	mov	r3, r1
 8004a40:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004a42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	da0c      	bge.n	8004a64 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a4a:	78fb      	ldrb	r3, [r7, #3]
 8004a4c:	f003 020f 	and.w	r2, r3, #15
 8004a50:	4613      	mov	r3, r2
 8004a52:	00db      	lsls	r3, r3, #3
 8004a54:	4413      	add	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	3338      	adds	r3, #56	; 0x38
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	3304      	adds	r3, #4
 8004a60:	60fb      	str	r3, [r7, #12]
 8004a62:	e00c      	b.n	8004a7e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a64:	78fb      	ldrb	r3, [r7, #3]
 8004a66:	f003 020f 	and.w	r2, r3, #15
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004a76:	687a      	ldr	r2, [r7, #4]
 8004a78:	4413      	add	r3, r2
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68f9      	ldr	r1, [r7, #12]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f002 fe3b 	bl	8007700 <USB_EPStopXfer>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004a8e:	7afb      	ldrb	r3, [r7, #11]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3710      	adds	r7, #16
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}

08004a98 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08a      	sub	sp, #40	; 0x28
 8004a9c:	af02      	add	r7, sp, #8
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004aac:	683a      	ldr	r2, [r7, #0]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	3338      	adds	r3, #56	; 0x38
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	4413      	add	r3, r2
 8004abc:	3304      	adds	r3, #4
 8004abe:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6a1a      	ldr	r2, [r3, #32]
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	699b      	ldr	r3, [r3, #24]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d901      	bls.n	8004ad0 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e06c      	b.n	8004baa <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	699a      	ldr	r2, [r3, #24]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	6a1b      	ldr	r3, [r3, #32]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	69fa      	ldr	r2, [r7, #28]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	d902      	bls.n	8004aec <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	3303      	adds	r3, #3
 8004af0:	089b      	lsrs	r3, r3, #2
 8004af2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004af4:	e02b      	b.n	8004b4e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	699a      	ldr	r2, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	68db      	ldr	r3, [r3, #12]
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	d902      	bls.n	8004b12 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	68db      	ldr	r3, [r3, #12]
 8004b10:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	3303      	adds	r3, #3
 8004b16:	089b      	lsrs	r3, r3, #2
 8004b18:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6919      	ldr	r1, [r3, #16]
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	b2da      	uxtb	r2, r3
 8004b22:	69fb      	ldr	r3, [r7, #28]
 8004b24:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	9300      	str	r3, [sp, #0]
 8004b2e:	4603      	mov	r3, r0
 8004b30:	6978      	ldr	r0, [r7, #20]
 8004b32:	f002 fe8f 	bl	8007854 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	441a      	add	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	6a1a      	ldr	r2, [r3, #32]
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	441a      	add	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	015a      	lsls	r2, r3, #5
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	4413      	add	r3, r2
 8004b56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b5a:	699b      	ldr	r3, [r3, #24]
 8004b5c:	b29b      	uxth	r3, r3
 8004b5e:	69ba      	ldr	r2, [r7, #24]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d809      	bhi.n	8004b78 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	6a1a      	ldr	r2, [r3, #32]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d203      	bcs.n	8004b78 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	699b      	ldr	r3, [r3, #24]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d1be      	bne.n	8004af6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	699a      	ldr	r2, [r3, #24]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a1b      	ldr	r3, [r3, #32]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d811      	bhi.n	8004ba8 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b90:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	43db      	mvns	r3, r3
 8004b9e:	6939      	ldr	r1, [r7, #16]
 8004ba0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ba4:	4013      	ands	r3, r2
 8004ba6:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3720      	adds	r7, #32
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
	...

08004bb4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b088      	sub	sp, #32
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004bc8:	69fb      	ldr	r3, [r7, #28]
 8004bca:	333c      	adds	r3, #60	; 0x3c
 8004bcc:	3304      	adds	r3, #4
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	015a      	lsls	r2, r3, #5
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	4413      	add	r3, r2
 8004bda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d17b      	bne.n	8004ce2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d015      	beq.n	8004c20 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	4a61      	ldr	r2, [pc, #388]	; (8004d7c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	f240 80b9 	bls.w	8004d70 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	f000 80b3 	beq.w	8004d70 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	015a      	lsls	r2, r3, #5
 8004c0e:	69bb      	ldr	r3, [r7, #24]
 8004c10:	4413      	add	r3, r2
 8004c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c16:	461a      	mov	r2, r3
 8004c18:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c1c:	6093      	str	r3, [r2, #8]
 8004c1e:	e0a7      	b.n	8004d70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	f003 0320 	and.w	r3, r3, #32
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d009      	beq.n	8004c3e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	015a      	lsls	r2, r3, #5
 8004c2e:	69bb      	ldr	r3, [r7, #24]
 8004c30:	4413      	add	r3, r2
 8004c32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c36:	461a      	mov	r2, r3
 8004c38:	2320      	movs	r3, #32
 8004c3a:	6093      	str	r3, [r2, #8]
 8004c3c:	e098      	b.n	8004d70 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f040 8093 	bne.w	8004d70 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	4a4b      	ldr	r2, [pc, #300]	; (8004d7c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d90f      	bls.n	8004c72 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d00a      	beq.n	8004c72 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	015a      	lsls	r2, r3, #5
 8004c60:	69bb      	ldr	r3, [r7, #24]
 8004c62:	4413      	add	r3, r2
 8004c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c68:	461a      	mov	r2, r3
 8004c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c6e:	6093      	str	r3, [r2, #8]
 8004c70:	e07e      	b.n	8004d70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	4613      	mov	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	4413      	add	r3, r2
 8004c84:	3304      	adds	r3, #4
 8004c86:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	69da      	ldr	r2, [r3, #28]
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	0159      	lsls	r1, r3, #5
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	440b      	add	r3, r1
 8004c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c98:	691b      	ldr	r3, [r3, #16]
 8004c9a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c9e:	1ad2      	subs	r2, r2, r3
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d114      	bne.n	8004cd4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d109      	bne.n	8004cc6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6818      	ldr	r0, [r3, #0]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	f003 f85e 	bl	8007d80 <USB_EP0_OutStart>
 8004cc4:	e006      	b.n	8004cd4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	691a      	ldr	r2, [r3, #16]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	441a      	add	r2, r3
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	4619      	mov	r1, r3
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f005 fb16 	bl	800a30c <HAL_PCD_DataOutStageCallback>
 8004ce0:	e046      	b.n	8004d70 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004ce2:	697b      	ldr	r3, [r7, #20]
 8004ce4:	4a26      	ldr	r2, [pc, #152]	; (8004d80 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d124      	bne.n	8004d34 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d00a      	beq.n	8004d0a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d00:	461a      	mov	r2, r3
 8004d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d06:	6093      	str	r3, [r2, #8]
 8004d08:	e032      	b.n	8004d70 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	f003 0320 	and.w	r3, r3, #32
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d008      	beq.n	8004d26 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	015a      	lsls	r2, r3, #5
 8004d18:	69bb      	ldr	r3, [r7, #24]
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d20:	461a      	mov	r2, r3
 8004d22:	2320      	movs	r3, #32
 8004d24:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	4619      	mov	r1, r3
 8004d2c:	6878      	ldr	r0, [r7, #4]
 8004d2e:	f005 faed 	bl	800a30c <HAL_PCD_DataOutStageCallback>
 8004d32:	e01d      	b.n	8004d70 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d114      	bne.n	8004d64 <PCD_EP_OutXfrComplete_int+0x1b0>
 8004d3a:	6879      	ldr	r1, [r7, #4]
 8004d3c:	683a      	ldr	r2, [r7, #0]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	00db      	lsls	r3, r3, #3
 8004d42:	4413      	add	r3, r2
 8004d44:	009b      	lsls	r3, r3, #2
 8004d46:	440b      	add	r3, r1
 8004d48:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d108      	bne.n	8004d64 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6818      	ldr	r0, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004d5c:	461a      	mov	r2, r3
 8004d5e:	2100      	movs	r1, #0
 8004d60:	f003 f80e 	bl	8007d80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	4619      	mov	r1, r3
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f005 face 	bl	800a30c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3720      	adds	r7, #32
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop
 8004d7c:	4f54300a 	.word	0x4f54300a
 8004d80:	4f54310a 	.word	0x4f54310a

08004d84 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b086      	sub	sp, #24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	333c      	adds	r3, #60	; 0x3c
 8004d9c:	3304      	adds	r3, #4
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	015a      	lsls	r2, r3, #5
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	4413      	add	r3, r2
 8004daa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	4a15      	ldr	r2, [pc, #84]	; (8004e0c <PCD_EP_OutSetupPacket_int+0x88>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d90e      	bls.n	8004dd8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d009      	beq.n	8004dd8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	015a      	lsls	r2, r3, #5
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	4413      	add	r3, r2
 8004dcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dd0:	461a      	mov	r2, r3
 8004dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004dd6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f005 fa85 	bl	800a2e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	4a0a      	ldr	r2, [pc, #40]	; (8004e0c <PCD_EP_OutSetupPacket_int+0x88>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d90c      	bls.n	8004e00 <PCD_EP_OutSetupPacket_int+0x7c>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d108      	bne.n	8004e00 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6818      	ldr	r0, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004df8:	461a      	mov	r2, r3
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	f002 ffc0 	bl	8007d80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004e00:	2300      	movs	r3, #0
}
 8004e02:	4618      	mov	r0, r3
 8004e04:	3718      	adds	r7, #24
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	4f54300a 	.word	0x4f54300a

08004e10 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	70fb      	strb	r3, [r7, #3]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004e28:	78fb      	ldrb	r3, [r7, #3]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d107      	bne.n	8004e3e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004e2e:	883b      	ldrh	r3, [r7, #0]
 8004e30:	0419      	lsls	r1, r3, #16
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	430a      	orrs	r2, r1
 8004e3a:	629a      	str	r2, [r3, #40]	; 0x28
 8004e3c:	e028      	b.n	8004e90 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e44:	0c1b      	lsrs	r3, r3, #16
 8004e46:	68ba      	ldr	r2, [r7, #8]
 8004e48:	4413      	add	r3, r2
 8004e4a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	73fb      	strb	r3, [r7, #15]
 8004e50:	e00d      	b.n	8004e6e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	7bfb      	ldrb	r3, [r7, #15]
 8004e58:	3340      	adds	r3, #64	; 0x40
 8004e5a:	009b      	lsls	r3, r3, #2
 8004e5c:	4413      	add	r3, r2
 8004e5e:	685b      	ldr	r3, [r3, #4]
 8004e60:	0c1b      	lsrs	r3, r3, #16
 8004e62:	68ba      	ldr	r2, [r7, #8]
 8004e64:	4413      	add	r3, r2
 8004e66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
 8004e6a:	3301      	adds	r3, #1
 8004e6c:	73fb      	strb	r3, [r7, #15]
 8004e6e:	7bfa      	ldrb	r2, [r7, #15]
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d3ec      	bcc.n	8004e52 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004e78:	883b      	ldrh	r3, [r7, #0]
 8004e7a:	0418      	lsls	r0, r3, #16
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6819      	ldr	r1, [r3, #0]
 8004e80:	78fb      	ldrb	r3, [r7, #3]
 8004e82:	3b01      	subs	r3, #1
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	4302      	orrs	r2, r0
 8004e88:	3340      	adds	r3, #64	; 0x40
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004e90:	2300      	movs	r3, #0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3714      	adds	r7, #20
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
 8004ea6:	460b      	mov	r3, r1
 8004ea8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	887a      	ldrh	r2, [r7, #2]
 8004eb0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b083      	sub	sp, #12
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e267      	b.n	80053ba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d075      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ef6:	4b88      	ldr	r3, [pc, #544]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8004ef8:	689b      	ldr	r3, [r3, #8]
 8004efa:	f003 030c 	and.w	r3, r3, #12
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d00c      	beq.n	8004f1c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f02:	4b85      	ldr	r3, [pc, #532]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004f0a:	2b08      	cmp	r3, #8
 8004f0c:	d112      	bne.n	8004f34 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f0e:	4b82      	ldr	r3, [pc, #520]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f1a:	d10b      	bne.n	8004f34 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f1c:	4b7e      	ldr	r3, [pc, #504]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d05b      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x108>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	685b      	ldr	r3, [r3, #4]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d157      	bne.n	8004fe0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e242      	b.n	80053ba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f3c:	d106      	bne.n	8004f4c <HAL_RCC_OscConfig+0x74>
 8004f3e:	4b76      	ldr	r3, [pc, #472]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a75      	ldr	r2, [pc, #468]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8004f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	e01d      	b.n	8004f88 <HAL_RCC_OscConfig+0xb0>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f54:	d10c      	bne.n	8004f70 <HAL_RCC_OscConfig+0x98>
 8004f56:	4b70      	ldr	r3, [pc, #448]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a6f      	ldr	r2, [pc, #444]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8004f5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	4b6d      	ldr	r3, [pc, #436]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a6c      	ldr	r2, [pc, #432]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8004f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f6c:	6013      	str	r3, [r2, #0]
 8004f6e:	e00b      	b.n	8004f88 <HAL_RCC_OscConfig+0xb0>
 8004f70:	4b69      	ldr	r3, [pc, #420]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a68      	ldr	r2, [pc, #416]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8004f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f7a:	6013      	str	r3, [r2, #0]
 8004f7c:	4b66      	ldr	r3, [pc, #408]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a65      	ldr	r2, [pc, #404]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8004f82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f86:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d013      	beq.n	8004fb8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f90:	f7fd f886 	bl	80020a0 <HAL_GetTick>
 8004f94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f96:	e008      	b.n	8004faa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f98:	f7fd f882 	bl	80020a0 <HAL_GetTick>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	1ad3      	subs	r3, r2, r3
 8004fa2:	2b64      	cmp	r3, #100	; 0x64
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e207      	b.n	80053ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004faa:	4b5b      	ldr	r3, [pc, #364]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d0f0      	beq.n	8004f98 <HAL_RCC_OscConfig+0xc0>
 8004fb6:	e014      	b.n	8004fe2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fb8:	f7fd f872 	bl	80020a0 <HAL_GetTick>
 8004fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fbe:	e008      	b.n	8004fd2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fc0:	f7fd f86e 	bl	80020a0 <HAL_GetTick>
 8004fc4:	4602      	mov	r2, r0
 8004fc6:	693b      	ldr	r3, [r7, #16]
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	2b64      	cmp	r3, #100	; 0x64
 8004fcc:	d901      	bls.n	8004fd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	e1f3      	b.n	80053ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fd2:	4b51      	ldr	r3, [pc, #324]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d1f0      	bne.n	8004fc0 <HAL_RCC_OscConfig+0xe8>
 8004fde:	e000      	b.n	8004fe2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d063      	beq.n	80050b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fee:	4b4a      	ldr	r3, [pc, #296]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	f003 030c 	and.w	r3, r3, #12
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00b      	beq.n	8005012 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ffa:	4b47      	ldr	r3, [pc, #284]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005002:	2b08      	cmp	r3, #8
 8005004:	d11c      	bne.n	8005040 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005006:	4b44      	ldr	r3, [pc, #272]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8005008:	685b      	ldr	r3, [r3, #4]
 800500a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500e:	2b00      	cmp	r3, #0
 8005010:	d116      	bne.n	8005040 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005012:	4b41      	ldr	r3, [pc, #260]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0302 	and.w	r3, r3, #2
 800501a:	2b00      	cmp	r3, #0
 800501c:	d005      	beq.n	800502a <HAL_RCC_OscConfig+0x152>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	68db      	ldr	r3, [r3, #12]
 8005022:	2b01      	cmp	r3, #1
 8005024:	d001      	beq.n	800502a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005026:	2301      	movs	r3, #1
 8005028:	e1c7      	b.n	80053ba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800502a:	4b3b      	ldr	r3, [pc, #236]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	00db      	lsls	r3, r3, #3
 8005038:	4937      	ldr	r1, [pc, #220]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 800503a:	4313      	orrs	r3, r2
 800503c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800503e:	e03a      	b.n	80050b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d020      	beq.n	800508a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005048:	4b34      	ldr	r3, [pc, #208]	; (800511c <HAL_RCC_OscConfig+0x244>)
 800504a:	2201      	movs	r2, #1
 800504c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800504e:	f7fd f827 	bl	80020a0 <HAL_GetTick>
 8005052:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005054:	e008      	b.n	8005068 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005056:	f7fd f823 	bl	80020a0 <HAL_GetTick>
 800505a:	4602      	mov	r2, r0
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	2b02      	cmp	r3, #2
 8005062:	d901      	bls.n	8005068 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e1a8      	b.n	80053ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005068:	4b2b      	ldr	r3, [pc, #172]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0f0      	beq.n	8005056 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005074:	4b28      	ldr	r3, [pc, #160]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	4925      	ldr	r1, [pc, #148]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 8005084:	4313      	orrs	r3, r2
 8005086:	600b      	str	r3, [r1, #0]
 8005088:	e015      	b.n	80050b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800508a:	4b24      	ldr	r3, [pc, #144]	; (800511c <HAL_RCC_OscConfig+0x244>)
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005090:	f7fd f806 	bl	80020a0 <HAL_GetTick>
 8005094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005098:	f7fd f802 	bl	80020a0 <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e187      	b.n	80053ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050aa:	4b1b      	ldr	r3, [pc, #108]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 0302 	and.w	r3, r3, #2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0308 	and.w	r3, r3, #8
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d036      	beq.n	8005130 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	695b      	ldr	r3, [r3, #20]
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d016      	beq.n	80050f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050ca:	4b15      	ldr	r3, [pc, #84]	; (8005120 <HAL_RCC_OscConfig+0x248>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d0:	f7fc ffe6 	bl	80020a0 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050d8:	f7fc ffe2 	bl	80020a0 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b02      	cmp	r3, #2
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e167      	b.n	80053ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ea:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <HAL_RCC_OscConfig+0x240>)
 80050ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050ee:	f003 0302 	and.w	r3, r3, #2
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0f0      	beq.n	80050d8 <HAL_RCC_OscConfig+0x200>
 80050f6:	e01b      	b.n	8005130 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050f8:	4b09      	ldr	r3, [pc, #36]	; (8005120 <HAL_RCC_OscConfig+0x248>)
 80050fa:	2200      	movs	r2, #0
 80050fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050fe:	f7fc ffcf 	bl	80020a0 <HAL_GetTick>
 8005102:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005104:	e00e      	b.n	8005124 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005106:	f7fc ffcb 	bl	80020a0 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b02      	cmp	r3, #2
 8005112:	d907      	bls.n	8005124 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e150      	b.n	80053ba <HAL_RCC_OscConfig+0x4e2>
 8005118:	40023800 	.word	0x40023800
 800511c:	42470000 	.word	0x42470000
 8005120:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005124:	4b88      	ldr	r3, [pc, #544]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 8005126:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005128:	f003 0302 	and.w	r3, r3, #2
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1ea      	bne.n	8005106 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 0304 	and.w	r3, r3, #4
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 8097 	beq.w	800526c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800513e:	2300      	movs	r3, #0
 8005140:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005142:	4b81      	ldr	r3, [pc, #516]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 8005144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10f      	bne.n	800516e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800514e:	2300      	movs	r3, #0
 8005150:	60bb      	str	r3, [r7, #8]
 8005152:	4b7d      	ldr	r3, [pc, #500]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 8005154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005156:	4a7c      	ldr	r2, [pc, #496]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 8005158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800515c:	6413      	str	r3, [r2, #64]	; 0x40
 800515e:	4b7a      	ldr	r3, [pc, #488]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 8005160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005162:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005166:	60bb      	str	r3, [r7, #8]
 8005168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800516a:	2301      	movs	r3, #1
 800516c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800516e:	4b77      	ldr	r3, [pc, #476]	; (800534c <HAL_RCC_OscConfig+0x474>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005176:	2b00      	cmp	r3, #0
 8005178:	d118      	bne.n	80051ac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800517a:	4b74      	ldr	r3, [pc, #464]	; (800534c <HAL_RCC_OscConfig+0x474>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a73      	ldr	r2, [pc, #460]	; (800534c <HAL_RCC_OscConfig+0x474>)
 8005180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005186:	f7fc ff8b 	bl	80020a0 <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800518e:	f7fc ff87 	bl	80020a0 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e10c      	b.n	80053ba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051a0:	4b6a      	ldr	r3, [pc, #424]	; (800534c <HAL_RCC_OscConfig+0x474>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d0f0      	beq.n	800518e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d106      	bne.n	80051c2 <HAL_RCC_OscConfig+0x2ea>
 80051b4:	4b64      	ldr	r3, [pc, #400]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b8:	4a63      	ldr	r2, [pc, #396]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 80051ba:	f043 0301 	orr.w	r3, r3, #1
 80051be:	6713      	str	r3, [r2, #112]	; 0x70
 80051c0:	e01c      	b.n	80051fc <HAL_RCC_OscConfig+0x324>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	2b05      	cmp	r3, #5
 80051c8:	d10c      	bne.n	80051e4 <HAL_RCC_OscConfig+0x30c>
 80051ca:	4b5f      	ldr	r3, [pc, #380]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 80051cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ce:	4a5e      	ldr	r2, [pc, #376]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 80051d0:	f043 0304 	orr.w	r3, r3, #4
 80051d4:	6713      	str	r3, [r2, #112]	; 0x70
 80051d6:	4b5c      	ldr	r3, [pc, #368]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 80051d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051da:	4a5b      	ldr	r2, [pc, #364]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 80051dc:	f043 0301 	orr.w	r3, r3, #1
 80051e0:	6713      	str	r3, [r2, #112]	; 0x70
 80051e2:	e00b      	b.n	80051fc <HAL_RCC_OscConfig+0x324>
 80051e4:	4b58      	ldr	r3, [pc, #352]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 80051e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051e8:	4a57      	ldr	r2, [pc, #348]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 80051ea:	f023 0301 	bic.w	r3, r3, #1
 80051ee:	6713      	str	r3, [r2, #112]	; 0x70
 80051f0:	4b55      	ldr	r3, [pc, #340]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 80051f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f4:	4a54      	ldr	r2, [pc, #336]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 80051f6:	f023 0304 	bic.w	r3, r3, #4
 80051fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d015      	beq.n	8005230 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005204:	f7fc ff4c 	bl	80020a0 <HAL_GetTick>
 8005208:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520a:	e00a      	b.n	8005222 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800520c:	f7fc ff48 	bl	80020a0 <HAL_GetTick>
 8005210:	4602      	mov	r2, r0
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	1ad3      	subs	r3, r2, r3
 8005216:	f241 3288 	movw	r2, #5000	; 0x1388
 800521a:	4293      	cmp	r3, r2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e0cb      	b.n	80053ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005222:	4b49      	ldr	r3, [pc, #292]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 8005224:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d0ee      	beq.n	800520c <HAL_RCC_OscConfig+0x334>
 800522e:	e014      	b.n	800525a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005230:	f7fc ff36 	bl	80020a0 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005236:	e00a      	b.n	800524e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005238:	f7fc ff32 	bl	80020a0 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	f241 3288 	movw	r2, #5000	; 0x1388
 8005246:	4293      	cmp	r3, r2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e0b5      	b.n	80053ba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800524e:	4b3e      	ldr	r3, [pc, #248]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 8005250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1ee      	bne.n	8005238 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800525a:	7dfb      	ldrb	r3, [r7, #23]
 800525c:	2b01      	cmp	r3, #1
 800525e:	d105      	bne.n	800526c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005260:	4b39      	ldr	r3, [pc, #228]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	4a38      	ldr	r2, [pc, #224]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 8005266:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800526a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 80a1 	beq.w	80053b8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005276:	4b34      	ldr	r3, [pc, #208]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 030c 	and.w	r3, r3, #12
 800527e:	2b08      	cmp	r3, #8
 8005280:	d05c      	beq.n	800533c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	2b02      	cmp	r3, #2
 8005288:	d141      	bne.n	800530e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800528a:	4b31      	ldr	r3, [pc, #196]	; (8005350 <HAL_RCC_OscConfig+0x478>)
 800528c:	2200      	movs	r2, #0
 800528e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005290:	f7fc ff06 	bl	80020a0 <HAL_GetTick>
 8005294:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005296:	e008      	b.n	80052aa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005298:	f7fc ff02 	bl	80020a0 <HAL_GetTick>
 800529c:	4602      	mov	r2, r0
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	1ad3      	subs	r3, r2, r3
 80052a2:	2b02      	cmp	r3, #2
 80052a4:	d901      	bls.n	80052aa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e087      	b.n	80053ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052aa:	4b27      	ldr	r3, [pc, #156]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1f0      	bne.n	8005298 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	69da      	ldr	r2, [r3, #28]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	431a      	orrs	r2, r3
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	019b      	lsls	r3, r3, #6
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052cc:	085b      	lsrs	r3, r3, #1
 80052ce:	3b01      	subs	r3, #1
 80052d0:	041b      	lsls	r3, r3, #16
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d8:	061b      	lsls	r3, r3, #24
 80052da:	491b      	ldr	r1, [pc, #108]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052e0:	4b1b      	ldr	r3, [pc, #108]	; (8005350 <HAL_RCC_OscConfig+0x478>)
 80052e2:	2201      	movs	r2, #1
 80052e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e6:	f7fc fedb 	bl	80020a0 <HAL_GetTick>
 80052ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052ec:	e008      	b.n	8005300 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ee:	f7fc fed7 	bl	80020a0 <HAL_GetTick>
 80052f2:	4602      	mov	r2, r0
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	1ad3      	subs	r3, r2, r3
 80052f8:	2b02      	cmp	r3, #2
 80052fa:	d901      	bls.n	8005300 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052fc:	2303      	movs	r3, #3
 80052fe:	e05c      	b.n	80053ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005300:	4b11      	ldr	r3, [pc, #68]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d0f0      	beq.n	80052ee <HAL_RCC_OscConfig+0x416>
 800530c:	e054      	b.n	80053b8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800530e:	4b10      	ldr	r3, [pc, #64]	; (8005350 <HAL_RCC_OscConfig+0x478>)
 8005310:	2200      	movs	r2, #0
 8005312:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005314:	f7fc fec4 	bl	80020a0 <HAL_GetTick>
 8005318:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800531a:	e008      	b.n	800532e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800531c:	f7fc fec0 	bl	80020a0 <HAL_GetTick>
 8005320:	4602      	mov	r2, r0
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	1ad3      	subs	r3, r2, r3
 8005326:	2b02      	cmp	r3, #2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e045      	b.n	80053ba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800532e:	4b06      	ldr	r3, [pc, #24]	; (8005348 <HAL_RCC_OscConfig+0x470>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d1f0      	bne.n	800531c <HAL_RCC_OscConfig+0x444>
 800533a:	e03d      	b.n	80053b8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	699b      	ldr	r3, [r3, #24]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d107      	bne.n	8005354 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e038      	b.n	80053ba <HAL_RCC_OscConfig+0x4e2>
 8005348:	40023800 	.word	0x40023800
 800534c:	40007000 	.word	0x40007000
 8005350:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005354:	4b1b      	ldr	r3, [pc, #108]	; (80053c4 <HAL_RCC_OscConfig+0x4ec>)
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	699b      	ldr	r3, [r3, #24]
 800535e:	2b01      	cmp	r3, #1
 8005360:	d028      	beq.n	80053b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800536c:	429a      	cmp	r2, r3
 800536e:	d121      	bne.n	80053b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800537a:	429a      	cmp	r2, r3
 800537c:	d11a      	bne.n	80053b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005384:	4013      	ands	r3, r2
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800538a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800538c:	4293      	cmp	r3, r2
 800538e:	d111      	bne.n	80053b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539a:	085b      	lsrs	r3, r3, #1
 800539c:	3b01      	subs	r3, #1
 800539e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d107      	bne.n	80053b4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d001      	beq.n	80053b8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e000      	b.n	80053ba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80053b8:	2300      	movs	r3, #0
}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3718      	adds	r7, #24
 80053be:	46bd      	mov	sp, r7
 80053c0:	bd80      	pop	{r7, pc}
 80053c2:	bf00      	nop
 80053c4:	40023800 	.word	0x40023800

080053c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
 80053d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e0cc      	b.n	8005576 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053dc:	4b68      	ldr	r3, [pc, #416]	; (8005580 <HAL_RCC_ClockConfig+0x1b8>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0307 	and.w	r3, r3, #7
 80053e4:	683a      	ldr	r2, [r7, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d90c      	bls.n	8005404 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ea:	4b65      	ldr	r3, [pc, #404]	; (8005580 <HAL_RCC_ClockConfig+0x1b8>)
 80053ec:	683a      	ldr	r2, [r7, #0]
 80053ee:	b2d2      	uxtb	r2, r2
 80053f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053f2:	4b63      	ldr	r3, [pc, #396]	; (8005580 <HAL_RCC_ClockConfig+0x1b8>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0307 	and.w	r3, r3, #7
 80053fa:	683a      	ldr	r2, [r7, #0]
 80053fc:	429a      	cmp	r2, r3
 80053fe:	d001      	beq.n	8005404 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e0b8      	b.n	8005576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d020      	beq.n	8005452 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f003 0304 	and.w	r3, r3, #4
 8005418:	2b00      	cmp	r3, #0
 800541a:	d005      	beq.n	8005428 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800541c:	4b59      	ldr	r3, [pc, #356]	; (8005584 <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	4a58      	ldr	r2, [pc, #352]	; (8005584 <HAL_RCC_ClockConfig+0x1bc>)
 8005422:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005426:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0308 	and.w	r3, r3, #8
 8005430:	2b00      	cmp	r3, #0
 8005432:	d005      	beq.n	8005440 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005434:	4b53      	ldr	r3, [pc, #332]	; (8005584 <HAL_RCC_ClockConfig+0x1bc>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	4a52      	ldr	r2, [pc, #328]	; (8005584 <HAL_RCC_ClockConfig+0x1bc>)
 800543a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800543e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005440:	4b50      	ldr	r3, [pc, #320]	; (8005584 <HAL_RCC_ClockConfig+0x1bc>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	494d      	ldr	r1, [pc, #308]	; (8005584 <HAL_RCC_ClockConfig+0x1bc>)
 800544e:	4313      	orrs	r3, r2
 8005450:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b00      	cmp	r3, #0
 800545c:	d044      	beq.n	80054e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	685b      	ldr	r3, [r3, #4]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d107      	bne.n	8005476 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005466:	4b47      	ldr	r3, [pc, #284]	; (8005584 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d119      	bne.n	80054a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e07f      	b.n	8005576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	2b02      	cmp	r3, #2
 800547c:	d003      	beq.n	8005486 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005482:	2b03      	cmp	r3, #3
 8005484:	d107      	bne.n	8005496 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005486:	4b3f      	ldr	r3, [pc, #252]	; (8005584 <HAL_RCC_ClockConfig+0x1bc>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800548e:	2b00      	cmp	r3, #0
 8005490:	d109      	bne.n	80054a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e06f      	b.n	8005576 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005496:	4b3b      	ldr	r3, [pc, #236]	; (8005584 <HAL_RCC_ClockConfig+0x1bc>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f003 0302 	and.w	r3, r3, #2
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d101      	bne.n	80054a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e067      	b.n	8005576 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80054a6:	4b37      	ldr	r3, [pc, #220]	; (8005584 <HAL_RCC_ClockConfig+0x1bc>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f023 0203 	bic.w	r2, r3, #3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	4934      	ldr	r1, [pc, #208]	; (8005584 <HAL_RCC_ClockConfig+0x1bc>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80054b8:	f7fc fdf2 	bl	80020a0 <HAL_GetTick>
 80054bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054be:	e00a      	b.n	80054d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054c0:	f7fc fdee 	bl	80020a0 <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e04f      	b.n	8005576 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054d6:	4b2b      	ldr	r3, [pc, #172]	; (8005584 <HAL_RCC_ClockConfig+0x1bc>)
 80054d8:	689b      	ldr	r3, [r3, #8]
 80054da:	f003 020c 	and.w	r2, r3, #12
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	009b      	lsls	r3, r3, #2
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d1eb      	bne.n	80054c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054e8:	4b25      	ldr	r3, [pc, #148]	; (8005580 <HAL_RCC_ClockConfig+0x1b8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0307 	and.w	r3, r3, #7
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d20c      	bcs.n	8005510 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054f6:	4b22      	ldr	r3, [pc, #136]	; (8005580 <HAL_RCC_ClockConfig+0x1b8>)
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054fe:	4b20      	ldr	r3, [pc, #128]	; (8005580 <HAL_RCC_ClockConfig+0x1b8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0307 	and.w	r3, r3, #7
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d001      	beq.n	8005510 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800550c:	2301      	movs	r3, #1
 800550e:	e032      	b.n	8005576 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0304 	and.w	r3, r3, #4
 8005518:	2b00      	cmp	r3, #0
 800551a:	d008      	beq.n	800552e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800551c:	4b19      	ldr	r3, [pc, #100]	; (8005584 <HAL_RCC_ClockConfig+0x1bc>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	68db      	ldr	r3, [r3, #12]
 8005528:	4916      	ldr	r1, [pc, #88]	; (8005584 <HAL_RCC_ClockConfig+0x1bc>)
 800552a:	4313      	orrs	r3, r2
 800552c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f003 0308 	and.w	r3, r3, #8
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800553a:	4b12      	ldr	r3, [pc, #72]	; (8005584 <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	689b      	ldr	r3, [r3, #8]
 800553e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	691b      	ldr	r3, [r3, #16]
 8005546:	00db      	lsls	r3, r3, #3
 8005548:	490e      	ldr	r1, [pc, #56]	; (8005584 <HAL_RCC_ClockConfig+0x1bc>)
 800554a:	4313      	orrs	r3, r2
 800554c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800554e:	f000 f821 	bl	8005594 <HAL_RCC_GetSysClockFreq>
 8005552:	4602      	mov	r2, r0
 8005554:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <HAL_RCC_ClockConfig+0x1bc>)
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	091b      	lsrs	r3, r3, #4
 800555a:	f003 030f 	and.w	r3, r3, #15
 800555e:	490a      	ldr	r1, [pc, #40]	; (8005588 <HAL_RCC_ClockConfig+0x1c0>)
 8005560:	5ccb      	ldrb	r3, [r1, r3]
 8005562:	fa22 f303 	lsr.w	r3, r2, r3
 8005566:	4a09      	ldr	r2, [pc, #36]	; (800558c <HAL_RCC_ClockConfig+0x1c4>)
 8005568:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800556a:	4b09      	ldr	r3, [pc, #36]	; (8005590 <HAL_RCC_ClockConfig+0x1c8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4618      	mov	r0, r3
 8005570:	f7fc fd52 	bl	8002018 <HAL_InitTick>

  return HAL_OK;
 8005574:	2300      	movs	r3, #0
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	40023c00 	.word	0x40023c00
 8005584:	40023800 	.word	0x40023800
 8005588:	0800d6fc 	.word	0x0800d6fc
 800558c:	20000040 	.word	0x20000040
 8005590:	20000044 	.word	0x20000044

08005594 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005594:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005598:	b090      	sub	sp, #64	; 0x40
 800559a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800559c:	2300      	movs	r3, #0
 800559e:	637b      	str	r3, [r7, #52]	; 0x34
 80055a0:	2300      	movs	r3, #0
 80055a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055a4:	2300      	movs	r3, #0
 80055a6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80055a8:	2300      	movs	r3, #0
 80055aa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80055ac:	4b59      	ldr	r3, [pc, #356]	; (8005714 <HAL_RCC_GetSysClockFreq+0x180>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	f003 030c 	and.w	r3, r3, #12
 80055b4:	2b08      	cmp	r3, #8
 80055b6:	d00d      	beq.n	80055d4 <HAL_RCC_GetSysClockFreq+0x40>
 80055b8:	2b08      	cmp	r3, #8
 80055ba:	f200 80a1 	bhi.w	8005700 <HAL_RCC_GetSysClockFreq+0x16c>
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d002      	beq.n	80055c8 <HAL_RCC_GetSysClockFreq+0x34>
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d003      	beq.n	80055ce <HAL_RCC_GetSysClockFreq+0x3a>
 80055c6:	e09b      	b.n	8005700 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80055c8:	4b53      	ldr	r3, [pc, #332]	; (8005718 <HAL_RCC_GetSysClockFreq+0x184>)
 80055ca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80055cc:	e09b      	b.n	8005706 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80055ce:	4b53      	ldr	r3, [pc, #332]	; (800571c <HAL_RCC_GetSysClockFreq+0x188>)
 80055d0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055d2:	e098      	b.n	8005706 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055d4:	4b4f      	ldr	r3, [pc, #316]	; (8005714 <HAL_RCC_GetSysClockFreq+0x180>)
 80055d6:	685b      	ldr	r3, [r3, #4]
 80055d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055dc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055de:	4b4d      	ldr	r3, [pc, #308]	; (8005714 <HAL_RCC_GetSysClockFreq+0x180>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d028      	beq.n	800563c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ea:	4b4a      	ldr	r3, [pc, #296]	; (8005714 <HAL_RCC_GetSysClockFreq+0x180>)
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	099b      	lsrs	r3, r3, #6
 80055f0:	2200      	movs	r2, #0
 80055f2:	623b      	str	r3, [r7, #32]
 80055f4:	627a      	str	r2, [r7, #36]	; 0x24
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80055fc:	2100      	movs	r1, #0
 80055fe:	4b47      	ldr	r3, [pc, #284]	; (800571c <HAL_RCC_GetSysClockFreq+0x188>)
 8005600:	fb03 f201 	mul.w	r2, r3, r1
 8005604:	2300      	movs	r3, #0
 8005606:	fb00 f303 	mul.w	r3, r0, r3
 800560a:	4413      	add	r3, r2
 800560c:	4a43      	ldr	r2, [pc, #268]	; (800571c <HAL_RCC_GetSysClockFreq+0x188>)
 800560e:	fba0 1202 	umull	r1, r2, r0, r2
 8005612:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005614:	460a      	mov	r2, r1
 8005616:	62ba      	str	r2, [r7, #40]	; 0x28
 8005618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800561a:	4413      	add	r3, r2
 800561c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800561e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005620:	2200      	movs	r2, #0
 8005622:	61bb      	str	r3, [r7, #24]
 8005624:	61fa      	str	r2, [r7, #28]
 8005626:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800562a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800562e:	f7fb fac3 	bl	8000bb8 <__aeabi_uldivmod>
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	4613      	mov	r3, r2
 8005638:	63fb      	str	r3, [r7, #60]	; 0x3c
 800563a:	e053      	b.n	80056e4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800563c:	4b35      	ldr	r3, [pc, #212]	; (8005714 <HAL_RCC_GetSysClockFreq+0x180>)
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	099b      	lsrs	r3, r3, #6
 8005642:	2200      	movs	r2, #0
 8005644:	613b      	str	r3, [r7, #16]
 8005646:	617a      	str	r2, [r7, #20]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800564e:	f04f 0b00 	mov.w	fp, #0
 8005652:	4652      	mov	r2, sl
 8005654:	465b      	mov	r3, fp
 8005656:	f04f 0000 	mov.w	r0, #0
 800565a:	f04f 0100 	mov.w	r1, #0
 800565e:	0159      	lsls	r1, r3, #5
 8005660:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005664:	0150      	lsls	r0, r2, #5
 8005666:	4602      	mov	r2, r0
 8005668:	460b      	mov	r3, r1
 800566a:	ebb2 080a 	subs.w	r8, r2, sl
 800566e:	eb63 090b 	sbc.w	r9, r3, fp
 8005672:	f04f 0200 	mov.w	r2, #0
 8005676:	f04f 0300 	mov.w	r3, #0
 800567a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800567e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005682:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005686:	ebb2 0408 	subs.w	r4, r2, r8
 800568a:	eb63 0509 	sbc.w	r5, r3, r9
 800568e:	f04f 0200 	mov.w	r2, #0
 8005692:	f04f 0300 	mov.w	r3, #0
 8005696:	00eb      	lsls	r3, r5, #3
 8005698:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800569c:	00e2      	lsls	r2, r4, #3
 800569e:	4614      	mov	r4, r2
 80056a0:	461d      	mov	r5, r3
 80056a2:	eb14 030a 	adds.w	r3, r4, sl
 80056a6:	603b      	str	r3, [r7, #0]
 80056a8:	eb45 030b 	adc.w	r3, r5, fp
 80056ac:	607b      	str	r3, [r7, #4]
 80056ae:	f04f 0200 	mov.w	r2, #0
 80056b2:	f04f 0300 	mov.w	r3, #0
 80056b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80056ba:	4629      	mov	r1, r5
 80056bc:	028b      	lsls	r3, r1, #10
 80056be:	4621      	mov	r1, r4
 80056c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80056c4:	4621      	mov	r1, r4
 80056c6:	028a      	lsls	r2, r1, #10
 80056c8:	4610      	mov	r0, r2
 80056ca:	4619      	mov	r1, r3
 80056cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ce:	2200      	movs	r2, #0
 80056d0:	60bb      	str	r3, [r7, #8]
 80056d2:	60fa      	str	r2, [r7, #12]
 80056d4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056d8:	f7fb fa6e 	bl	8000bb8 <__aeabi_uldivmod>
 80056dc:	4602      	mov	r2, r0
 80056de:	460b      	mov	r3, r1
 80056e0:	4613      	mov	r3, r2
 80056e2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056e4:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <HAL_RCC_GetSysClockFreq+0x180>)
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	0c1b      	lsrs	r3, r3, #16
 80056ea:	f003 0303 	and.w	r3, r3, #3
 80056ee:	3301      	adds	r3, #1
 80056f0:	005b      	lsls	r3, r3, #1
 80056f2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80056f4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056fc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80056fe:	e002      	b.n	8005706 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005700:	4b05      	ldr	r3, [pc, #20]	; (8005718 <HAL_RCC_GetSysClockFreq+0x184>)
 8005702:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005704:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005708:	4618      	mov	r0, r3
 800570a:	3740      	adds	r7, #64	; 0x40
 800570c:	46bd      	mov	sp, r7
 800570e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005712:	bf00      	nop
 8005714:	40023800 	.word	0x40023800
 8005718:	00f42400 	.word	0x00f42400
 800571c:	017d7840 	.word	0x017d7840

08005720 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005720:	b480      	push	{r7}
 8005722:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005724:	4b03      	ldr	r3, [pc, #12]	; (8005734 <HAL_RCC_GetHCLKFreq+0x14>)
 8005726:	681b      	ldr	r3, [r3, #0]
}
 8005728:	4618      	mov	r0, r3
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	20000040 	.word	0x20000040

08005738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800573c:	f7ff fff0 	bl	8005720 <HAL_RCC_GetHCLKFreq>
 8005740:	4602      	mov	r2, r0
 8005742:	4b05      	ldr	r3, [pc, #20]	; (8005758 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	0a9b      	lsrs	r3, r3, #10
 8005748:	f003 0307 	and.w	r3, r3, #7
 800574c:	4903      	ldr	r1, [pc, #12]	; (800575c <HAL_RCC_GetPCLK1Freq+0x24>)
 800574e:	5ccb      	ldrb	r3, [r1, r3]
 8005750:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005754:	4618      	mov	r0, r3
 8005756:	bd80      	pop	{r7, pc}
 8005758:	40023800 	.word	0x40023800
 800575c:	0800d70c 	.word	0x0800d70c

08005760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e041      	b.n	80057f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005778:	b2db      	uxtb	r3, r3
 800577a:	2b00      	cmp	r3, #0
 800577c:	d106      	bne.n	800578c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fc fb82 	bl	8001e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681a      	ldr	r2, [r3, #0]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3304      	adds	r3, #4
 800579c:	4619      	mov	r1, r3
 800579e:	4610      	mov	r0, r2
 80057a0:	f000 fc54 	bl	800604c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2201      	movs	r2, #1
 80057f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3708      	adds	r7, #8
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
	...

08005800 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005800:	b480      	push	{r7}
 8005802:	b085      	sub	sp, #20
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800580e:	b2db      	uxtb	r3, r3
 8005810:	2b01      	cmp	r3, #1
 8005812:	d001      	beq.n	8005818 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e044      	b.n	80058a2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	68da      	ldr	r2, [r3, #12]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a1e      	ldr	r2, [pc, #120]	; (80058b0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d018      	beq.n	800586c <HAL_TIM_Base_Start_IT+0x6c>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005842:	d013      	beq.n	800586c <HAL_TIM_Base_Start_IT+0x6c>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a1a      	ldr	r2, [pc, #104]	; (80058b4 <HAL_TIM_Base_Start_IT+0xb4>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d00e      	beq.n	800586c <HAL_TIM_Base_Start_IT+0x6c>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a19      	ldr	r2, [pc, #100]	; (80058b8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d009      	beq.n	800586c <HAL_TIM_Base_Start_IT+0x6c>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a17      	ldr	r2, [pc, #92]	; (80058bc <HAL_TIM_Base_Start_IT+0xbc>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d004      	beq.n	800586c <HAL_TIM_Base_Start_IT+0x6c>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a16      	ldr	r2, [pc, #88]	; (80058c0 <HAL_TIM_Base_Start_IT+0xc0>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d111      	bne.n	8005890 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f003 0307 	and.w	r3, r3, #7
 8005876:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2b06      	cmp	r3, #6
 800587c:	d010      	beq.n	80058a0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f042 0201 	orr.w	r2, r2, #1
 800588c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800588e:	e007      	b.n	80058a0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f042 0201 	orr.w	r2, r2, #1
 800589e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3714      	adds	r7, #20
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	40010000 	.word	0x40010000
 80058b4:	40000400 	.word	0x40000400
 80058b8:	40000800 	.word	0x40000800
 80058bc:	40000c00 	.word	0x40000c00
 80058c0:	40014000 	.word	0x40014000

080058c4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d101      	bne.n	80058d6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e041      	b.n	800595a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f839 	bl	8005962 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681a      	ldr	r2, [r3, #0]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3304      	adds	r3, #4
 8005900:	4619      	mov	r1, r3
 8005902:	4610      	mov	r0, r2
 8005904:	f000 fba2 	bl	800604c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005958:	2300      	movs	r3, #0
}
 800595a:	4618      	mov	r0, r3
 800595c:	3708      	adds	r7, #8
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
	...

08005978 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d109      	bne.n	800599c <HAL_TIM_PWM_Start+0x24>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b01      	cmp	r3, #1
 8005992:	bf14      	ite	ne
 8005994:	2301      	movne	r3, #1
 8005996:	2300      	moveq	r3, #0
 8005998:	b2db      	uxtb	r3, r3
 800599a:	e022      	b.n	80059e2 <HAL_TIM_PWM_Start+0x6a>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b04      	cmp	r3, #4
 80059a0:	d109      	bne.n	80059b6 <HAL_TIM_PWM_Start+0x3e>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	bf14      	ite	ne
 80059ae:	2301      	movne	r3, #1
 80059b0:	2300      	moveq	r3, #0
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	e015      	b.n	80059e2 <HAL_TIM_PWM_Start+0x6a>
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b08      	cmp	r3, #8
 80059ba:	d109      	bne.n	80059d0 <HAL_TIM_PWM_Start+0x58>
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	bf14      	ite	ne
 80059c8:	2301      	movne	r3, #1
 80059ca:	2300      	moveq	r3, #0
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	e008      	b.n	80059e2 <HAL_TIM_PWM_Start+0x6a>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	bf14      	ite	ne
 80059dc:	2301      	movne	r3, #1
 80059de:	2300      	moveq	r3, #0
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d001      	beq.n	80059ea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e068      	b.n	8005abc <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d104      	bne.n	80059fa <HAL_TIM_PWM_Start+0x82>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059f8:	e013      	b.n	8005a22 <HAL_TIM_PWM_Start+0xaa>
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	2b04      	cmp	r3, #4
 80059fe:	d104      	bne.n	8005a0a <HAL_TIM_PWM_Start+0x92>
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2202      	movs	r2, #2
 8005a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a08:	e00b      	b.n	8005a22 <HAL_TIM_PWM_Start+0xaa>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	2b08      	cmp	r3, #8
 8005a0e:	d104      	bne.n	8005a1a <HAL_TIM_PWM_Start+0xa2>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2202      	movs	r2, #2
 8005a14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a18:	e003      	b.n	8005a22 <HAL_TIM_PWM_Start+0xaa>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	2201      	movs	r2, #1
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f000 fdb4 	bl	8006598 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a23      	ldr	r2, [pc, #140]	; (8005ac4 <HAL_TIM_PWM_Start+0x14c>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d107      	bne.n	8005a4a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <HAL_TIM_PWM_Start+0x14c>)
 8005a50:	4293      	cmp	r3, r2
 8005a52:	d018      	beq.n	8005a86 <HAL_TIM_PWM_Start+0x10e>
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a5c:	d013      	beq.n	8005a86 <HAL_TIM_PWM_Start+0x10e>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	4a19      	ldr	r2, [pc, #100]	; (8005ac8 <HAL_TIM_PWM_Start+0x150>)
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d00e      	beq.n	8005a86 <HAL_TIM_PWM_Start+0x10e>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	4a17      	ldr	r2, [pc, #92]	; (8005acc <HAL_TIM_PWM_Start+0x154>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d009      	beq.n	8005a86 <HAL_TIM_PWM_Start+0x10e>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a16      	ldr	r2, [pc, #88]	; (8005ad0 <HAL_TIM_PWM_Start+0x158>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d004      	beq.n	8005a86 <HAL_TIM_PWM_Start+0x10e>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	4a14      	ldr	r2, [pc, #80]	; (8005ad4 <HAL_TIM_PWM_Start+0x15c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d111      	bne.n	8005aaa <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	f003 0307 	and.w	r3, r3, #7
 8005a90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2b06      	cmp	r3, #6
 8005a96:	d010      	beq.n	8005aba <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f042 0201 	orr.w	r2, r2, #1
 8005aa6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aa8:	e007      	b.n	8005aba <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f042 0201 	orr.w	r2, r2, #1
 8005ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005aba:	2300      	movs	r3, #0
}
 8005abc:	4618      	mov	r0, r3
 8005abe:	3710      	adds	r7, #16
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	bd80      	pop	{r7, pc}
 8005ac4:	40010000 	.word	0x40010000
 8005ac8:	40000400 	.word	0x40000400
 8005acc:	40000800 	.word	0x40000800
 8005ad0:	40000c00 	.word	0x40000c00
 8005ad4:	40014000 	.word	0x40014000

08005ad8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	691b      	ldr	r3, [r3, #16]
 8005ae6:	f003 0302 	and.w	r3, r3, #2
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d122      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f003 0302 	and.w	r3, r3, #2
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d11b      	bne.n	8005b34 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f06f 0202 	mvn.w	r2, #2
 8005b04:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2201      	movs	r2, #1
 8005b0a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699b      	ldr	r3, [r3, #24]
 8005b12:	f003 0303 	and.w	r3, r3, #3
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d003      	beq.n	8005b22 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005b1a:	6878      	ldr	r0, [r7, #4]
 8005b1c:	f000 fa77 	bl	800600e <HAL_TIM_IC_CaptureCallback>
 8005b20:	e005      	b.n	8005b2e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f000 fa69 	bl	8005ffa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 fa7a 	bl	8006022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	691b      	ldr	r3, [r3, #16]
 8005b3a:	f003 0304 	and.w	r3, r3, #4
 8005b3e:	2b04      	cmp	r3, #4
 8005b40:	d122      	bne.n	8005b88 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	2b04      	cmp	r3, #4
 8005b4e:	d11b      	bne.n	8005b88 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f06f 0204 	mvn.w	r2, #4
 8005b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2202      	movs	r2, #2
 8005b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d003      	beq.n	8005b76 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fa4d 	bl	800600e <HAL_TIM_IC_CaptureCallback>
 8005b74:	e005      	b.n	8005b82 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 fa3f 	bl	8005ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 fa50 	bl	8006022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	f003 0308 	and.w	r3, r3, #8
 8005b92:	2b08      	cmp	r3, #8
 8005b94:	d122      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	f003 0308 	and.w	r3, r3, #8
 8005ba0:	2b08      	cmp	r3, #8
 8005ba2:	d11b      	bne.n	8005bdc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f06f 0208 	mvn.w	r2, #8
 8005bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2204      	movs	r2, #4
 8005bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	69db      	ldr	r3, [r3, #28]
 8005bba:	f003 0303 	and.w	r3, r3, #3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d003      	beq.n	8005bca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 fa23 	bl	800600e <HAL_TIM_IC_CaptureCallback>
 8005bc8:	e005      	b.n	8005bd6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fa15 	bl	8005ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fa26 	bl	8006022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f003 0310 	and.w	r3, r3, #16
 8005be6:	2b10      	cmp	r3, #16
 8005be8:	d122      	bne.n	8005c30 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f003 0310 	and.w	r3, r3, #16
 8005bf4:	2b10      	cmp	r3, #16
 8005bf6:	d11b      	bne.n	8005c30 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f06f 0210 	mvn.w	r2, #16
 8005c00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2208      	movs	r2, #8
 8005c06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	69db      	ldr	r3, [r3, #28]
 8005c0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d003      	beq.n	8005c1e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f9f9 	bl	800600e <HAL_TIM_IC_CaptureCallback>
 8005c1c:	e005      	b.n	8005c2a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f9eb 	bl	8005ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f9fc 	bl	8006022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	f003 0301 	and.w	r3, r3, #1
 8005c3a:	2b01      	cmp	r3, #1
 8005c3c:	d10e      	bne.n	8005c5c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	68db      	ldr	r3, [r3, #12]
 8005c44:	f003 0301 	and.w	r3, r3, #1
 8005c48:	2b01      	cmp	r3, #1
 8005c4a:	d107      	bne.n	8005c5c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f06f 0201 	mvn.w	r2, #1
 8005c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f7fb fcee 	bl	8001638 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	691b      	ldr	r3, [r3, #16]
 8005c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c66:	2b80      	cmp	r3, #128	; 0x80
 8005c68:	d10e      	bne.n	8005c88 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c74:	2b80      	cmp	r3, #128	; 0x80
 8005c76:	d107      	bne.n	8005c88 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 fcb7 	bl	80065f6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c92:	2b40      	cmp	r3, #64	; 0x40
 8005c94:	d10e      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca0:	2b40      	cmp	r3, #64	; 0x40
 8005ca2:	d107      	bne.n	8005cb4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005cae:	6878      	ldr	r0, [r7, #4]
 8005cb0:	f000 f9c1 	bl	8006036 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	f003 0320 	and.w	r3, r3, #32
 8005cbe:	2b20      	cmp	r3, #32
 8005cc0:	d10e      	bne.n	8005ce0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	f003 0320 	and.w	r3, r3, #32
 8005ccc:	2b20      	cmp	r3, #32
 8005cce:	d107      	bne.n	8005ce0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f06f 0220 	mvn.w	r2, #32
 8005cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fc81 	bl	80065e2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ce0:	bf00      	nop
 8005ce2:	3708      	adds	r7, #8
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}

08005ce8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d101      	bne.n	8005d06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d02:	2302      	movs	r3, #2
 8005d04:	e0ae      	b.n	8005e64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b0c      	cmp	r3, #12
 8005d12:	f200 809f 	bhi.w	8005e54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005d16:	a201      	add	r2, pc, #4	; (adr r2, 8005d1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d1c:	08005d51 	.word	0x08005d51
 8005d20:	08005e55 	.word	0x08005e55
 8005d24:	08005e55 	.word	0x08005e55
 8005d28:	08005e55 	.word	0x08005e55
 8005d2c:	08005d91 	.word	0x08005d91
 8005d30:	08005e55 	.word	0x08005e55
 8005d34:	08005e55 	.word	0x08005e55
 8005d38:	08005e55 	.word	0x08005e55
 8005d3c:	08005dd3 	.word	0x08005dd3
 8005d40:	08005e55 	.word	0x08005e55
 8005d44:	08005e55 	.word	0x08005e55
 8005d48:	08005e55 	.word	0x08005e55
 8005d4c:	08005e13 	.word	0x08005e13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	68b9      	ldr	r1, [r7, #8]
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 f9f8 	bl	800614c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	699a      	ldr	r2, [r3, #24]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f042 0208 	orr.w	r2, r2, #8
 8005d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0204 	bic.w	r2, r2, #4
 8005d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	6999      	ldr	r1, [r3, #24]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	691a      	ldr	r2, [r3, #16]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	619a      	str	r2, [r3, #24]
      break;
 8005d8e:	e064      	b.n	8005e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	4618      	mov	r0, r3
 8005d98:	f000 fa3e 	bl	8006218 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	699a      	ldr	r2, [r3, #24]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	699a      	ldr	r2, [r3, #24]
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	6999      	ldr	r1, [r3, #24]
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	691b      	ldr	r3, [r3, #16]
 8005dc6:	021a      	lsls	r2, r3, #8
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	430a      	orrs	r2, r1
 8005dce:	619a      	str	r2, [r3, #24]
      break;
 8005dd0:	e043      	b.n	8005e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68b9      	ldr	r1, [r7, #8]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f000 fa89 	bl	80062f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	69da      	ldr	r2, [r3, #28]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f042 0208 	orr.w	r2, r2, #8
 8005dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69da      	ldr	r2, [r3, #28]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f022 0204 	bic.w	r2, r2, #4
 8005dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69d9      	ldr	r1, [r3, #28]
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	691a      	ldr	r2, [r3, #16]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	61da      	str	r2, [r3, #28]
      break;
 8005e10:	e023      	b.n	8005e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	68b9      	ldr	r1, [r7, #8]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f000 fad3 	bl	80063c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	69da      	ldr	r2, [r3, #28]
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	69da      	ldr	r2, [r3, #28]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	69d9      	ldr	r1, [r3, #28]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	691b      	ldr	r3, [r3, #16]
 8005e48:	021a      	lsls	r2, r3, #8
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	430a      	orrs	r2, r1
 8005e50:	61da      	str	r2, [r3, #28]
      break;
 8005e52:	e002      	b.n	8005e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	75fb      	strb	r3, [r7, #23]
      break;
 8005e58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b084      	sub	sp, #16
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e76:	2300      	movs	r3, #0
 8005e78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_TIM_ConfigClockSource+0x1c>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e0b4      	b.n	8005ff2 <HAL_TIM_ConfigClockSource+0x186>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2202      	movs	r2, #2
 8005e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689b      	ldr	r3, [r3, #8]
 8005e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	68ba      	ldr	r2, [r7, #8]
 8005eb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec0:	d03e      	beq.n	8005f40 <HAL_TIM_ConfigClockSource+0xd4>
 8005ec2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec6:	f200 8087 	bhi.w	8005fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ece:	f000 8086 	beq.w	8005fde <HAL_TIM_ConfigClockSource+0x172>
 8005ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ed6:	d87f      	bhi.n	8005fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed8:	2b70      	cmp	r3, #112	; 0x70
 8005eda:	d01a      	beq.n	8005f12 <HAL_TIM_ConfigClockSource+0xa6>
 8005edc:	2b70      	cmp	r3, #112	; 0x70
 8005ede:	d87b      	bhi.n	8005fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee0:	2b60      	cmp	r3, #96	; 0x60
 8005ee2:	d050      	beq.n	8005f86 <HAL_TIM_ConfigClockSource+0x11a>
 8005ee4:	2b60      	cmp	r3, #96	; 0x60
 8005ee6:	d877      	bhi.n	8005fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ee8:	2b50      	cmp	r3, #80	; 0x50
 8005eea:	d03c      	beq.n	8005f66 <HAL_TIM_ConfigClockSource+0xfa>
 8005eec:	2b50      	cmp	r3, #80	; 0x50
 8005eee:	d873      	bhi.n	8005fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef0:	2b40      	cmp	r3, #64	; 0x40
 8005ef2:	d058      	beq.n	8005fa6 <HAL_TIM_ConfigClockSource+0x13a>
 8005ef4:	2b40      	cmp	r3, #64	; 0x40
 8005ef6:	d86f      	bhi.n	8005fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ef8:	2b30      	cmp	r3, #48	; 0x30
 8005efa:	d064      	beq.n	8005fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005efc:	2b30      	cmp	r3, #48	; 0x30
 8005efe:	d86b      	bhi.n	8005fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005f00:	2b20      	cmp	r3, #32
 8005f02:	d060      	beq.n	8005fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005f04:	2b20      	cmp	r3, #32
 8005f06:	d867      	bhi.n	8005fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d05c      	beq.n	8005fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005f0c:	2b10      	cmp	r3, #16
 8005f0e:	d05a      	beq.n	8005fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8005f10:	e062      	b.n	8005fd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6818      	ldr	r0, [r3, #0]
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	6899      	ldr	r1, [r3, #8]
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f000 fb19 	bl	8006558 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68ba      	ldr	r2, [r7, #8]
 8005f3c:	609a      	str	r2, [r3, #8]
      break;
 8005f3e:	e04f      	b.n	8005fe0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6818      	ldr	r0, [r3, #0]
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	6899      	ldr	r1, [r3, #8]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	685a      	ldr	r2, [r3, #4]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f000 fb02 	bl	8006558 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	689a      	ldr	r2, [r3, #8]
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f62:	609a      	str	r2, [r3, #8]
      break;
 8005f64:	e03c      	b.n	8005fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6818      	ldr	r0, [r3, #0]
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	6859      	ldr	r1, [r3, #4]
 8005f6e:	683b      	ldr	r3, [r7, #0]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	461a      	mov	r2, r3
 8005f74:	f000 fa76 	bl	8006464 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	2150      	movs	r1, #80	; 0x50
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f000 facf 	bl	8006522 <TIM_ITRx_SetConfig>
      break;
 8005f84:	e02c      	b.n	8005fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6818      	ldr	r0, [r3, #0]
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	6859      	ldr	r1, [r3, #4]
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	68db      	ldr	r3, [r3, #12]
 8005f92:	461a      	mov	r2, r3
 8005f94:	f000 fa95 	bl	80064c2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	2160      	movs	r1, #96	; 0x60
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f000 fabf 	bl	8006522 <TIM_ITRx_SetConfig>
      break;
 8005fa4:	e01c      	b.n	8005fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6818      	ldr	r0, [r3, #0]
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	6859      	ldr	r1, [r3, #4]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	68db      	ldr	r3, [r3, #12]
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	f000 fa56 	bl	8006464 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2140      	movs	r1, #64	; 0x40
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 faaf 	bl	8006522 <TIM_ITRx_SetConfig>
      break;
 8005fc4:	e00c      	b.n	8005fe0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	4619      	mov	r1, r3
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	f000 faa6 	bl	8006522 <TIM_ITRx_SetConfig>
      break;
 8005fd6:	e003      	b.n	8005fe0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	73fb      	strb	r3, [r7, #15]
      break;
 8005fdc:	e000      	b.n	8005fe0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2200      	movs	r2, #0
 8005fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ffa:	b480      	push	{r7}
 8005ffc:	b083      	sub	sp, #12
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006002:	bf00      	nop
 8006004:	370c      	adds	r7, #12
 8006006:	46bd      	mov	sp, r7
 8006008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600c:	4770      	bx	lr

0800600e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800600e:	b480      	push	{r7}
 8006010:	b083      	sub	sp, #12
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006016:	bf00      	nop
 8006018:	370c      	adds	r7, #12
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr

08006022 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006022:	b480      	push	{r7}
 8006024:	b083      	sub	sp, #12
 8006026:	af00      	add	r7, sp, #0
 8006028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800602a:	bf00      	nop
 800602c:	370c      	adds	r7, #12
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006036:	b480      	push	{r7}
 8006038:	b083      	sub	sp, #12
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800603e:	bf00      	nop
 8006040:	370c      	adds	r7, #12
 8006042:	46bd      	mov	sp, r7
 8006044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006048:	4770      	bx	lr
	...

0800604c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800604c:	b480      	push	{r7}
 800604e:	b085      	sub	sp, #20
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a34      	ldr	r2, [pc, #208]	; (8006130 <TIM_Base_SetConfig+0xe4>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d00f      	beq.n	8006084 <TIM_Base_SetConfig+0x38>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800606a:	d00b      	beq.n	8006084 <TIM_Base_SetConfig+0x38>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	4a31      	ldr	r2, [pc, #196]	; (8006134 <TIM_Base_SetConfig+0xe8>)
 8006070:	4293      	cmp	r3, r2
 8006072:	d007      	beq.n	8006084 <TIM_Base_SetConfig+0x38>
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	4a30      	ldr	r2, [pc, #192]	; (8006138 <TIM_Base_SetConfig+0xec>)
 8006078:	4293      	cmp	r3, r2
 800607a:	d003      	beq.n	8006084 <TIM_Base_SetConfig+0x38>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a2f      	ldr	r2, [pc, #188]	; (800613c <TIM_Base_SetConfig+0xf0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d108      	bne.n	8006096 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	68fa      	ldr	r2, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	4a25      	ldr	r2, [pc, #148]	; (8006130 <TIM_Base_SetConfig+0xe4>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d01b      	beq.n	80060d6 <TIM_Base_SetConfig+0x8a>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060a4:	d017      	beq.n	80060d6 <TIM_Base_SetConfig+0x8a>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a22      	ldr	r2, [pc, #136]	; (8006134 <TIM_Base_SetConfig+0xe8>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d013      	beq.n	80060d6 <TIM_Base_SetConfig+0x8a>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a21      	ldr	r2, [pc, #132]	; (8006138 <TIM_Base_SetConfig+0xec>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00f      	beq.n	80060d6 <TIM_Base_SetConfig+0x8a>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a20      	ldr	r2, [pc, #128]	; (800613c <TIM_Base_SetConfig+0xf0>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d00b      	beq.n	80060d6 <TIM_Base_SetConfig+0x8a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a1f      	ldr	r2, [pc, #124]	; (8006140 <TIM_Base_SetConfig+0xf4>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d007      	beq.n	80060d6 <TIM_Base_SetConfig+0x8a>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a1e      	ldr	r2, [pc, #120]	; (8006144 <TIM_Base_SetConfig+0xf8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d003      	beq.n	80060d6 <TIM_Base_SetConfig+0x8a>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a1d      	ldr	r2, [pc, #116]	; (8006148 <TIM_Base_SetConfig+0xfc>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d108      	bne.n	80060e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	68fa      	ldr	r2, [r7, #12]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	695b      	ldr	r3, [r3, #20]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	68fa      	ldr	r2, [r7, #12]
 80060fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	4a08      	ldr	r2, [pc, #32]	; (8006130 <TIM_Base_SetConfig+0xe4>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d103      	bne.n	800611c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	691a      	ldr	r2, [r3, #16]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	615a      	str	r2, [r3, #20]
}
 8006122:	bf00      	nop
 8006124:	3714      	adds	r7, #20
 8006126:	46bd      	mov	sp, r7
 8006128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	40010000 	.word	0x40010000
 8006134:	40000400 	.word	0x40000400
 8006138:	40000800 	.word	0x40000800
 800613c:	40000c00 	.word	0x40000c00
 8006140:	40014000 	.word	0x40014000
 8006144:	40014400 	.word	0x40014400
 8006148:	40014800 	.word	0x40014800

0800614c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800614c:	b480      	push	{r7}
 800614e:	b087      	sub	sp, #28
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a1b      	ldr	r3, [r3, #32]
 800615a:	f023 0201 	bic.w	r2, r3, #1
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6a1b      	ldr	r3, [r3, #32]
 8006166:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	699b      	ldr	r3, [r3, #24]
 8006172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800617a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 0303 	bic.w	r3, r3, #3
 8006182:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	68fa      	ldr	r2, [r7, #12]
 800618a:	4313      	orrs	r3, r2
 800618c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	f023 0302 	bic.w	r3, r3, #2
 8006194:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	697a      	ldr	r2, [r7, #20]
 800619c:	4313      	orrs	r3, r2
 800619e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	4a1c      	ldr	r2, [pc, #112]	; (8006214 <TIM_OC1_SetConfig+0xc8>)
 80061a4:	4293      	cmp	r3, r2
 80061a6:	d10c      	bne.n	80061c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	f023 0308 	bic.w	r3, r3, #8
 80061ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	697a      	ldr	r2, [r7, #20]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f023 0304 	bic.w	r3, r3, #4
 80061c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	4a13      	ldr	r2, [pc, #76]	; (8006214 <TIM_OC1_SetConfig+0xc8>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d111      	bne.n	80061ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	4313      	orrs	r3, r2
 80061e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	699b      	ldr	r3, [r3, #24]
 80061e8:	693a      	ldr	r2, [r7, #16]
 80061ea:	4313      	orrs	r3, r2
 80061ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	693a      	ldr	r2, [r7, #16]
 80061f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	685a      	ldr	r2, [r3, #4]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	621a      	str	r2, [r3, #32]
}
 8006208:	bf00      	nop
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr
 8006214:	40010000 	.word	0x40010000

08006218 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a1b      	ldr	r3, [r3, #32]
 8006226:	f023 0210 	bic.w	r2, r3, #16
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006246:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800624e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	021b      	lsls	r3, r3, #8
 8006256:	68fa      	ldr	r2, [r7, #12]
 8006258:	4313      	orrs	r3, r2
 800625a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f023 0320 	bic.w	r3, r3, #32
 8006262:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	011b      	lsls	r3, r3, #4
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4a1e      	ldr	r2, [pc, #120]	; (80062ec <TIM_OC2_SetConfig+0xd4>)
 8006274:	4293      	cmp	r3, r2
 8006276:	d10d      	bne.n	8006294 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006278:	697b      	ldr	r3, [r7, #20]
 800627a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800627e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	68db      	ldr	r3, [r3, #12]
 8006284:	011b      	lsls	r3, r3, #4
 8006286:	697a      	ldr	r2, [r7, #20]
 8006288:	4313      	orrs	r3, r2
 800628a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006292:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a15      	ldr	r2, [pc, #84]	; (80062ec <TIM_OC2_SetConfig+0xd4>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d113      	bne.n	80062c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800629c:	693b      	ldr	r3, [r7, #16]
 800629e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80062a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80062ac:	683b      	ldr	r3, [r7, #0]
 80062ae:	695b      	ldr	r3, [r3, #20]
 80062b0:	009b      	lsls	r3, r3, #2
 80062b2:	693a      	ldr	r2, [r7, #16]
 80062b4:	4313      	orrs	r3, r2
 80062b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	699b      	ldr	r3, [r3, #24]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	693a      	ldr	r2, [r7, #16]
 80062c0:	4313      	orrs	r3, r2
 80062c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	693a      	ldr	r2, [r7, #16]
 80062c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	68fa      	ldr	r2, [r7, #12]
 80062ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	697a      	ldr	r2, [r7, #20]
 80062dc:	621a      	str	r2, [r3, #32]
}
 80062de:	bf00      	nop
 80062e0:	371c      	adds	r7, #28
 80062e2:	46bd      	mov	sp, r7
 80062e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e8:	4770      	bx	lr
 80062ea:	bf00      	nop
 80062ec:	40010000 	.word	0x40010000

080062f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b087      	sub	sp, #28
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6a1b      	ldr	r3, [r3, #32]
 80062fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a1b      	ldr	r3, [r3, #32]
 800630a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	69db      	ldr	r3, [r3, #28]
 8006316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800631e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	f023 0303 	bic.w	r3, r3, #3
 8006326:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	4313      	orrs	r3, r2
 8006330:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006338:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	689b      	ldr	r3, [r3, #8]
 800633e:	021b      	lsls	r3, r3, #8
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	4a1d      	ldr	r2, [pc, #116]	; (80063c0 <TIM_OC3_SetConfig+0xd0>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d10d      	bne.n	800636a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800634e:	697b      	ldr	r3, [r7, #20]
 8006350:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006354:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	021b      	lsls	r3, r3, #8
 800635c:	697a      	ldr	r2, [r7, #20]
 800635e:	4313      	orrs	r3, r2
 8006360:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006362:	697b      	ldr	r3, [r7, #20]
 8006364:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006368:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	4a14      	ldr	r2, [pc, #80]	; (80063c0 <TIM_OC3_SetConfig+0xd0>)
 800636e:	4293      	cmp	r3, r2
 8006370:	d113      	bne.n	800639a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006378:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800637a:	693b      	ldr	r3, [r7, #16]
 800637c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006380:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	695b      	ldr	r3, [r3, #20]
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	693a      	ldr	r2, [r7, #16]
 800638a:	4313      	orrs	r3, r2
 800638c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	699b      	ldr	r3, [r3, #24]
 8006392:	011b      	lsls	r3, r3, #4
 8006394:	693a      	ldr	r2, [r7, #16]
 8006396:	4313      	orrs	r3, r2
 8006398:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	693a      	ldr	r2, [r7, #16]
 800639e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	68fa      	ldr	r2, [r7, #12]
 80063a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	685a      	ldr	r2, [r3, #4]
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	697a      	ldr	r2, [r7, #20]
 80063b2:	621a      	str	r2, [r3, #32]
}
 80063b4:	bf00      	nop
 80063b6:	371c      	adds	r7, #28
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	40010000 	.word	0x40010000

080063c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b087      	sub	sp, #28
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6a1b      	ldr	r3, [r3, #32]
 80063d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6a1b      	ldr	r3, [r3, #32]
 80063de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	685b      	ldr	r3, [r3, #4]
 80063e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	69db      	ldr	r3, [r3, #28]
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	021b      	lsls	r3, r3, #8
 8006402:	68fa      	ldr	r2, [r7, #12]
 8006404:	4313      	orrs	r3, r2
 8006406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800640e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	031b      	lsls	r3, r3, #12
 8006416:	693a      	ldr	r2, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	4a10      	ldr	r2, [pc, #64]	; (8006460 <TIM_OC4_SetConfig+0x9c>)
 8006420:	4293      	cmp	r3, r2
 8006422:	d109      	bne.n	8006438 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800642a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	019b      	lsls	r3, r3, #6
 8006432:	697a      	ldr	r2, [r7, #20]
 8006434:	4313      	orrs	r3, r2
 8006436:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68fa      	ldr	r2, [r7, #12]
 8006442:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	621a      	str	r2, [r3, #32]
}
 8006452:	bf00      	nop
 8006454:	371c      	adds	r7, #28
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	40010000 	.word	0x40010000

08006464 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006464:	b480      	push	{r7}
 8006466:	b087      	sub	sp, #28
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a1b      	ldr	r3, [r3, #32]
 800647a:	f023 0201 	bic.w	r2, r3, #1
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	699b      	ldr	r3, [r3, #24]
 8006486:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800648e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	011b      	lsls	r3, r3, #4
 8006494:	693a      	ldr	r2, [r7, #16]
 8006496:	4313      	orrs	r3, r2
 8006498:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	f023 030a 	bic.w	r3, r3, #10
 80064a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064a2:	697a      	ldr	r2, [r7, #20]
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	4313      	orrs	r3, r2
 80064a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	621a      	str	r2, [r3, #32]
}
 80064b6:	bf00      	nop
 80064b8:	371c      	adds	r7, #28
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b087      	sub	sp, #28
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	60f8      	str	r0, [r7, #12]
 80064ca:	60b9      	str	r1, [r7, #8]
 80064cc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	6a1b      	ldr	r3, [r3, #32]
 80064d2:	f023 0210 	bic.w	r2, r3, #16
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064ec:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	031b      	lsls	r3, r3, #12
 80064f2:	697a      	ldr	r2, [r7, #20]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064fe:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	011b      	lsls	r3, r3, #4
 8006504:	693a      	ldr	r2, [r7, #16]
 8006506:	4313      	orrs	r3, r2
 8006508:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	697a      	ldr	r2, [r7, #20]
 800650e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	693a      	ldr	r2, [r7, #16]
 8006514:	621a      	str	r2, [r3, #32]
}
 8006516:	bf00      	nop
 8006518:	371c      	adds	r7, #28
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr

08006522 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006522:	b480      	push	{r7}
 8006524:	b085      	sub	sp, #20
 8006526:	af00      	add	r7, sp, #0
 8006528:	6078      	str	r0, [r7, #4]
 800652a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006538:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800653a:	683a      	ldr	r2, [r7, #0]
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	4313      	orrs	r3, r2
 8006540:	f043 0307 	orr.w	r3, r3, #7
 8006544:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68fa      	ldr	r2, [r7, #12]
 800654a:	609a      	str	r2, [r3, #8]
}
 800654c:	bf00      	nop
 800654e:	3714      	adds	r7, #20
 8006550:	46bd      	mov	sp, r7
 8006552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006556:	4770      	bx	lr

08006558 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006558:	b480      	push	{r7}
 800655a:	b087      	sub	sp, #28
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
 8006564:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006572:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	021a      	lsls	r2, r3, #8
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	431a      	orrs	r2, r3
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	4313      	orrs	r3, r2
 8006580:	697a      	ldr	r2, [r7, #20]
 8006582:	4313      	orrs	r3, r2
 8006584:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	609a      	str	r2, [r3, #8]
}
 800658c:	bf00      	nop
 800658e:	371c      	adds	r7, #28
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006598:	b480      	push	{r7}
 800659a:	b087      	sub	sp, #28
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	f003 031f 	and.w	r3, r3, #31
 80065aa:	2201      	movs	r2, #1
 80065ac:	fa02 f303 	lsl.w	r3, r2, r3
 80065b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a1a      	ldr	r2, [r3, #32]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	43db      	mvns	r3, r3
 80065ba:	401a      	ands	r2, r3
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	6a1a      	ldr	r2, [r3, #32]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f003 031f 	and.w	r3, r3, #31
 80065ca:	6879      	ldr	r1, [r7, #4]
 80065cc:	fa01 f303 	lsl.w	r3, r1, r3
 80065d0:	431a      	orrs	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	621a      	str	r2, [r3, #32]
}
 80065d6:	bf00      	nop
 80065d8:	371c      	adds	r7, #28
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065f6:	b480      	push	{r7}
 80065f8:	b083      	sub	sp, #12
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065fe:	bf00      	nop
 8006600:	370c      	adds	r7, #12
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr

0800660a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800660a:	b084      	sub	sp, #16
 800660c:	b580      	push	{r7, lr}
 800660e:	b084      	sub	sp, #16
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
 8006614:	f107 001c 	add.w	r0, r7, #28
 8006618:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800661c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800661e:	2b01      	cmp	r3, #1
 8006620:	d122      	bne.n	8006668 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006626:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	68db      	ldr	r3, [r3, #12]
 8006632:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006636:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800663a:	687a      	ldr	r2, [r7, #4]
 800663c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	68db      	ldr	r3, [r3, #12]
 8006642:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800664a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800664c:	2b01      	cmp	r3, #1
 800664e:	d105      	bne.n	800665c <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	68db      	ldr	r3, [r3, #12]
 8006654:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800665c:	6878      	ldr	r0, [r7, #4]
 800665e:	f001 fbed 	bl	8007e3c <USB_CoreReset>
 8006662:	4603      	mov	r3, r0
 8006664:	73fb      	strb	r3, [r7, #15]
 8006666:	e01a      	b.n	800669e <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006674:	6878      	ldr	r0, [r7, #4]
 8006676:	f001 fbe1 	bl	8007e3c <USB_CoreReset>
 800667a:	4603      	mov	r3, r0
 800667c:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800667e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006680:	2b00      	cmp	r3, #0
 8006682:	d106      	bne.n	8006692 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006688:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	639a      	str	r2, [r3, #56]	; 0x38
 8006690:	e005      	b.n	800669e <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006696:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800669e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d10b      	bne.n	80066bc <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f043 0206 	orr.w	r2, r3, #6
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f043 0220 	orr.w	r2, r3, #32
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80066bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80066c8:	b004      	add	sp, #16
 80066ca:	4770      	bx	lr

080066cc <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b087      	sub	sp, #28
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	60f8      	str	r0, [r7, #12]
 80066d4:	60b9      	str	r1, [r7, #8]
 80066d6:	4613      	mov	r3, r2
 80066d8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80066da:	79fb      	ldrb	r3, [r7, #7]
 80066dc:	2b02      	cmp	r3, #2
 80066de:	d165      	bne.n	80067ac <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	4a41      	ldr	r2, [pc, #260]	; (80067e8 <USB_SetTurnaroundTime+0x11c>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d906      	bls.n	80066f6 <USB_SetTurnaroundTime+0x2a>
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	4a40      	ldr	r2, [pc, #256]	; (80067ec <USB_SetTurnaroundTime+0x120>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d202      	bcs.n	80066f6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80066f0:	230f      	movs	r3, #15
 80066f2:	617b      	str	r3, [r7, #20]
 80066f4:	e062      	b.n	80067bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80066f6:	68bb      	ldr	r3, [r7, #8]
 80066f8:	4a3c      	ldr	r2, [pc, #240]	; (80067ec <USB_SetTurnaroundTime+0x120>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d306      	bcc.n	800670c <USB_SetTurnaroundTime+0x40>
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4a3b      	ldr	r2, [pc, #236]	; (80067f0 <USB_SetTurnaroundTime+0x124>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d202      	bcs.n	800670c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006706:	230e      	movs	r3, #14
 8006708:	617b      	str	r3, [r7, #20]
 800670a:	e057      	b.n	80067bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	4a38      	ldr	r2, [pc, #224]	; (80067f0 <USB_SetTurnaroundTime+0x124>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d306      	bcc.n	8006722 <USB_SetTurnaroundTime+0x56>
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4a37      	ldr	r2, [pc, #220]	; (80067f4 <USB_SetTurnaroundTime+0x128>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d202      	bcs.n	8006722 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800671c:	230d      	movs	r3, #13
 800671e:	617b      	str	r3, [r7, #20]
 8006720:	e04c      	b.n	80067bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	4a33      	ldr	r2, [pc, #204]	; (80067f4 <USB_SetTurnaroundTime+0x128>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d306      	bcc.n	8006738 <USB_SetTurnaroundTime+0x6c>
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	4a32      	ldr	r2, [pc, #200]	; (80067f8 <USB_SetTurnaroundTime+0x12c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d802      	bhi.n	8006738 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006732:	230c      	movs	r3, #12
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	e041      	b.n	80067bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	4a2f      	ldr	r2, [pc, #188]	; (80067f8 <USB_SetTurnaroundTime+0x12c>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d906      	bls.n	800674e <USB_SetTurnaroundTime+0x82>
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	4a2e      	ldr	r2, [pc, #184]	; (80067fc <USB_SetTurnaroundTime+0x130>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d802      	bhi.n	800674e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006748:	230b      	movs	r3, #11
 800674a:	617b      	str	r3, [r7, #20]
 800674c:	e036      	b.n	80067bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	4a2a      	ldr	r2, [pc, #168]	; (80067fc <USB_SetTurnaroundTime+0x130>)
 8006752:	4293      	cmp	r3, r2
 8006754:	d906      	bls.n	8006764 <USB_SetTurnaroundTime+0x98>
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	4a29      	ldr	r2, [pc, #164]	; (8006800 <USB_SetTurnaroundTime+0x134>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d802      	bhi.n	8006764 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800675e:	230a      	movs	r3, #10
 8006760:	617b      	str	r3, [r7, #20]
 8006762:	e02b      	b.n	80067bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	4a26      	ldr	r2, [pc, #152]	; (8006800 <USB_SetTurnaroundTime+0x134>)
 8006768:	4293      	cmp	r3, r2
 800676a:	d906      	bls.n	800677a <USB_SetTurnaroundTime+0xae>
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	4a25      	ldr	r2, [pc, #148]	; (8006804 <USB_SetTurnaroundTime+0x138>)
 8006770:	4293      	cmp	r3, r2
 8006772:	d202      	bcs.n	800677a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006774:	2309      	movs	r3, #9
 8006776:	617b      	str	r3, [r7, #20]
 8006778:	e020      	b.n	80067bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	4a21      	ldr	r2, [pc, #132]	; (8006804 <USB_SetTurnaroundTime+0x138>)
 800677e:	4293      	cmp	r3, r2
 8006780:	d306      	bcc.n	8006790 <USB_SetTurnaroundTime+0xc4>
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	4a20      	ldr	r2, [pc, #128]	; (8006808 <USB_SetTurnaroundTime+0x13c>)
 8006786:	4293      	cmp	r3, r2
 8006788:	d802      	bhi.n	8006790 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800678a:	2308      	movs	r3, #8
 800678c:	617b      	str	r3, [r7, #20]
 800678e:	e015      	b.n	80067bc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	4a1d      	ldr	r2, [pc, #116]	; (8006808 <USB_SetTurnaroundTime+0x13c>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d906      	bls.n	80067a6 <USB_SetTurnaroundTime+0xda>
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	4a1c      	ldr	r2, [pc, #112]	; (800680c <USB_SetTurnaroundTime+0x140>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d202      	bcs.n	80067a6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80067a0:	2307      	movs	r3, #7
 80067a2:	617b      	str	r3, [r7, #20]
 80067a4:	e00a      	b.n	80067bc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80067a6:	2306      	movs	r3, #6
 80067a8:	617b      	str	r3, [r7, #20]
 80067aa:	e007      	b.n	80067bc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80067ac:	79fb      	ldrb	r3, [r7, #7]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d102      	bne.n	80067b8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80067b2:	2309      	movs	r3, #9
 80067b4:	617b      	str	r3, [r7, #20]
 80067b6:	e001      	b.n	80067bc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80067b8:	2309      	movs	r3, #9
 80067ba:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	68da      	ldr	r2, [r3, #12]
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	029b      	lsls	r3, r3, #10
 80067d0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80067d4:	431a      	orrs	r2, r3
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	371c      	adds	r7, #28
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	00d8acbf 	.word	0x00d8acbf
 80067ec:	00e4e1c0 	.word	0x00e4e1c0
 80067f0:	00f42400 	.word	0x00f42400
 80067f4:	01067380 	.word	0x01067380
 80067f8:	011a499f 	.word	0x011a499f
 80067fc:	01312cff 	.word	0x01312cff
 8006800:	014ca43f 	.word	0x014ca43f
 8006804:	016e3600 	.word	0x016e3600
 8006808:	01a6ab1f 	.word	0x01a6ab1f
 800680c:	01e84800 	.word	0x01e84800

08006810 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f043 0201 	orr.w	r2, r3, #1
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f023 0201 	bic.w	r2, r3, #1
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	4618      	mov	r0, r3
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr

08006854 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006854:	b580      	push	{r7, lr}
 8006856:	b084      	sub	sp, #16
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	460b      	mov	r3, r1
 800685e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	68db      	ldr	r3, [r3, #12]
 8006868:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006870:	78fb      	ldrb	r3, [r7, #3]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d115      	bne.n	80068a2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006882:	2001      	movs	r0, #1
 8006884:	f7fb fc18 	bl	80020b8 <HAL_Delay>
      ms++;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	3301      	adds	r3, #1
 800688c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800688e:	6878      	ldr	r0, [r7, #4]
 8006890:	f001 fa45 	bl	8007d1e <USB_GetMode>
 8006894:	4603      	mov	r3, r0
 8006896:	2b01      	cmp	r3, #1
 8006898:	d01e      	beq.n	80068d8 <USB_SetCurrentMode+0x84>
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2b31      	cmp	r3, #49	; 0x31
 800689e:	d9f0      	bls.n	8006882 <USB_SetCurrentMode+0x2e>
 80068a0:	e01a      	b.n	80068d8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80068a2:	78fb      	ldrb	r3, [r7, #3]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d115      	bne.n	80068d4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	68db      	ldr	r3, [r3, #12]
 80068ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80068b4:	2001      	movs	r0, #1
 80068b6:	f7fb fbff 	bl	80020b8 <HAL_Delay>
      ms++;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	3301      	adds	r3, #1
 80068be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f001 fa2c 	bl	8007d1e <USB_GetMode>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d005      	beq.n	80068d8 <USB_SetCurrentMode+0x84>
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2b31      	cmp	r3, #49	; 0x31
 80068d0:	d9f0      	bls.n	80068b4 <USB_SetCurrentMode+0x60>
 80068d2:	e001      	b.n	80068d8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e005      	b.n	80068e4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2b32      	cmp	r3, #50	; 0x32
 80068dc:	d101      	bne.n	80068e2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	e000      	b.n	80068e4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068e2:	2300      	movs	r3, #0
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	3710      	adds	r7, #16
 80068e8:	46bd      	mov	sp, r7
 80068ea:	bd80      	pop	{r7, pc}

080068ec <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068ec:	b084      	sub	sp, #16
 80068ee:	b580      	push	{r7, lr}
 80068f0:	b086      	sub	sp, #24
 80068f2:	af00      	add	r7, sp, #0
 80068f4:	6078      	str	r0, [r7, #4]
 80068f6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80068fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80068fe:	2300      	movs	r3, #0
 8006900:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006906:	2300      	movs	r3, #0
 8006908:	613b      	str	r3, [r7, #16]
 800690a:	e009      	b.n	8006920 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	3340      	adds	r3, #64	; 0x40
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	2200      	movs	r2, #0
 8006918:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	3301      	adds	r3, #1
 800691e:	613b      	str	r3, [r7, #16]
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	2b0e      	cmp	r3, #14
 8006924:	d9f2      	bls.n	800690c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006926:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006928:	2b00      	cmp	r3, #0
 800692a:	d11c      	bne.n	8006966 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	68fa      	ldr	r2, [r7, #12]
 8006936:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800693a:	f043 0302 	orr.w	r3, r3, #2
 800693e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006944:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006950:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	639a      	str	r2, [r3, #56]	; 0x38
 8006964:	e00b      	b.n	800697e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006976:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006984:	461a      	mov	r2, r3
 8006986:	2300      	movs	r3, #0
 8006988:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006990:	4619      	mov	r1, r3
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006998:	461a      	mov	r2, r3
 800699a:	680b      	ldr	r3, [r1, #0]
 800699c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800699e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d10c      	bne.n	80069be <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80069a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d104      	bne.n	80069b4 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80069aa:	2100      	movs	r1, #0
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 f965 	bl	8006c7c <USB_SetDevSpeed>
 80069b2:	e008      	b.n	80069c6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80069b4:	2101      	movs	r1, #1
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 f960 	bl	8006c7c <USB_SetDevSpeed>
 80069bc:	e003      	b.n	80069c6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80069be:	2103      	movs	r1, #3
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f95b 	bl	8006c7c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069c6:	2110      	movs	r1, #16
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 f8f3 	bl	8006bb4 <USB_FlushTxFifo>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d001      	beq.n	80069d8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 f91f 	bl	8006c1c <USB_FlushRxFifo>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d001      	beq.n	80069e8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80069e4:	2301      	movs	r3, #1
 80069e6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069ee:	461a      	mov	r2, r3
 80069f0:	2300      	movs	r3, #0
 80069f2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80069fa:	461a      	mov	r2, r3
 80069fc:	2300      	movs	r3, #0
 80069fe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a06:	461a      	mov	r2, r3
 8006a08:	2300      	movs	r3, #0
 8006a0a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	613b      	str	r3, [r7, #16]
 8006a10:	e043      	b.n	8006a9a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	015a      	lsls	r2, r3, #5
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	4413      	add	r3, r2
 8006a1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a28:	d118      	bne.n	8006a5c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	015a      	lsls	r2, r3, #5
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006a42:	6013      	str	r3, [r2, #0]
 8006a44:	e013      	b.n	8006a6e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a52:	461a      	mov	r2, r3
 8006a54:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006a58:	6013      	str	r3, [r2, #0]
 8006a5a:	e008      	b.n	8006a6e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	015a      	lsls	r2, r3, #5
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a68:	461a      	mov	r2, r3
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	015a      	lsls	r2, r3, #5
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	4413      	add	r3, r2
 8006a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a7a:	461a      	mov	r2, r3
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	015a      	lsls	r2, r3, #5
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	4413      	add	r3, r2
 8006a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006a92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	3301      	adds	r3, #1
 8006a98:	613b      	str	r3, [r7, #16]
 8006a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9c:	693a      	ldr	r2, [r7, #16]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	d3b7      	bcc.n	8006a12 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	e043      	b.n	8006b30 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	015a      	lsls	r2, r3, #5
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	4413      	add	r3, r2
 8006ab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006aba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006abe:	d118      	bne.n	8006af2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10a      	bne.n	8006adc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	015a      	lsls	r2, r3, #5
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	4413      	add	r3, r2
 8006ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ad2:	461a      	mov	r2, r3
 8006ad4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ad8:	6013      	str	r3, [r2, #0]
 8006ada:	e013      	b.n	8006b04 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	015a      	lsls	r2, r3, #5
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	4413      	add	r3, r2
 8006ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ae8:	461a      	mov	r2, r3
 8006aea:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006aee:	6013      	str	r3, [r2, #0]
 8006af0:	e008      	b.n	8006b04 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	015a      	lsls	r2, r3, #5
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	4413      	add	r3, r2
 8006afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006afe:	461a      	mov	r2, r3
 8006b00:	2300      	movs	r3, #0
 8006b02:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	015a      	lsls	r2, r3, #5
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	4413      	add	r3, r2
 8006b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b10:	461a      	mov	r2, r3
 8006b12:	2300      	movs	r3, #0
 8006b14:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	015a      	lsls	r2, r3, #5
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4413      	add	r3, r2
 8006b1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b22:	461a      	mov	r2, r3
 8006b24:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006b28:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	613b      	str	r3, [r7, #16]
 8006b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b32:	693a      	ldr	r2, [r7, #16]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d3b7      	bcc.n	8006aa8 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b3e:	691b      	ldr	r3, [r3, #16]
 8006b40:	68fa      	ldr	r2, [r7, #12]
 8006b42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b46:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b4a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	2200      	movs	r2, #0
 8006b50:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006b58:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d105      	bne.n	8006b6c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	699b      	ldr	r3, [r3, #24]
 8006b64:	f043 0210 	orr.w	r2, r3, #16
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699a      	ldr	r2, [r3, #24]
 8006b70:	4b0f      	ldr	r3, [pc, #60]	; (8006bb0 <USB_DevInit+0x2c4>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	687a      	ldr	r2, [r7, #4]
 8006b76:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d005      	beq.n	8006b8a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	f043 0208 	orr.w	r2, r3, #8
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006b8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d107      	bne.n	8006ba0 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	699b      	ldr	r3, [r3, #24]
 8006b94:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b98:	f043 0304 	orr.w	r3, r3, #4
 8006b9c:	687a      	ldr	r2, [r7, #4]
 8006b9e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bac:	b004      	add	sp, #16
 8006bae:	4770      	bx	lr
 8006bb0:	803c3800 	.word	0x803c3800

08006bb4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
 8006bbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3301      	adds	r3, #1
 8006bc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4a13      	ldr	r2, [pc, #76]	; (8006c18 <USB_FlushTxFifo+0x64>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d901      	bls.n	8006bd4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006bd0:	2303      	movs	r3, #3
 8006bd2:	e01b      	b.n	8006c0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	691b      	ldr	r3, [r3, #16]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	daf2      	bge.n	8006bc2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	019b      	lsls	r3, r3, #6
 8006be4:	f043 0220 	orr.w	r2, r3, #32
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	4a08      	ldr	r2, [pc, #32]	; (8006c18 <USB_FlushTxFifo+0x64>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d901      	bls.n	8006bfe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006bfa:	2303      	movs	r3, #3
 8006bfc:	e006      	b.n	8006c0c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	f003 0320 	and.w	r3, r3, #32
 8006c06:	2b20      	cmp	r3, #32
 8006c08:	d0f0      	beq.n	8006bec <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c0a:	2300      	movs	r3, #0
}
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	3714      	adds	r7, #20
 8006c10:	46bd      	mov	sp, r7
 8006c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c16:	4770      	bx	lr
 8006c18:	00030d40 	.word	0x00030d40

08006c1c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	3301      	adds	r3, #1
 8006c2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	4a11      	ldr	r2, [pc, #68]	; (8006c78 <USB_FlushRxFifo+0x5c>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d901      	bls.n	8006c3a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c36:	2303      	movs	r3, #3
 8006c38:	e018      	b.n	8006c6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	691b      	ldr	r3, [r3, #16]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	daf2      	bge.n	8006c28 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006c42:	2300      	movs	r3, #0
 8006c44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2210      	movs	r2, #16
 8006c4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4a08      	ldr	r2, [pc, #32]	; (8006c78 <USB_FlushRxFifo+0x5c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d901      	bls.n	8006c5e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e006      	b.n	8006c6c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f003 0310 	and.w	r3, r3, #16
 8006c66:	2b10      	cmp	r3, #16
 8006c68:	d0f0      	beq.n	8006c4c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	00030d40 	.word	0x00030d40

08006c7c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	460b      	mov	r3, r1
 8006c86:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	78fb      	ldrb	r3, [r7, #3]
 8006c96:	68f9      	ldr	r1, [r7, #12]
 8006c98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3714      	adds	r7, #20
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cac:	4770      	bx	lr

08006cae <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006cae:	b480      	push	{r7}
 8006cb0:	b087      	sub	sp, #28
 8006cb2:	af00      	add	r7, sp, #0
 8006cb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc0:	689b      	ldr	r3, [r3, #8]
 8006cc2:	f003 0306 	and.w	r3, r3, #6
 8006cc6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d102      	bne.n	8006cd4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	75fb      	strb	r3, [r7, #23]
 8006cd2:	e00a      	b.n	8006cea <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d002      	beq.n	8006ce0 <USB_GetDevSpeed+0x32>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2b06      	cmp	r3, #6
 8006cde:	d102      	bne.n	8006ce6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8006ce0:	2302      	movs	r3, #2
 8006ce2:	75fb      	strb	r3, [r7, #23]
 8006ce4:	e001      	b.n	8006cea <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8006ce6:	230f      	movs	r3, #15
 8006ce8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8006cea:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	371c      	adds	r7, #28
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf6:	4770      	bx	lr

08006cf8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b085      	sub	sp, #20
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006d06:	683b      	ldr	r3, [r7, #0]
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	785b      	ldrb	r3, [r3, #1]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d13a      	bne.n	8006d8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d1a:	69da      	ldr	r2, [r3, #28]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	f003 030f 	and.w	r3, r3, #15
 8006d24:	2101      	movs	r1, #1
 8006d26:	fa01 f303 	lsl.w	r3, r1, r3
 8006d2a:	b29b      	uxth	r3, r3
 8006d2c:	68f9      	ldr	r1, [r7, #12]
 8006d2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d32:	4313      	orrs	r3, r2
 8006d34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d155      	bne.n	8006df8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	015a      	lsls	r2, r3, #5
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4413      	add	r3, r2
 8006d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	791b      	ldrb	r3, [r3, #4]
 8006d66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	059b      	lsls	r3, r3, #22
 8006d6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8006d70:	4313      	orrs	r3, r2
 8006d72:	68ba      	ldr	r2, [r7, #8]
 8006d74:	0151      	lsls	r1, r2, #5
 8006d76:	68fa      	ldr	r2, [r7, #12]
 8006d78:	440a      	add	r2, r1
 8006d7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d86:	6013      	str	r3, [r2, #0]
 8006d88:	e036      	b.n	8006df8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d90:	69da      	ldr	r2, [r3, #28]
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	f003 030f 	and.w	r3, r3, #15
 8006d9a:	2101      	movs	r1, #1
 8006d9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006da0:	041b      	lsls	r3, r3, #16
 8006da2:	68f9      	ldr	r1, [r7, #12]
 8006da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006da8:	4313      	orrs	r3, r2
 8006daa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	015a      	lsls	r2, r3, #5
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	4413      	add	r3, r2
 8006db4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d11a      	bne.n	8006df8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	791b      	ldrb	r3, [r3, #4]
 8006ddc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8006dde:	430b      	orrs	r3, r1
 8006de0:	4313      	orrs	r3, r2
 8006de2:	68ba      	ldr	r2, [r7, #8]
 8006de4:	0151      	lsls	r1, r2, #5
 8006de6:	68fa      	ldr	r2, [r7, #12]
 8006de8:	440a      	add	r2, r1
 8006dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006dee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006df2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006df6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr
	...

08006e08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006e16:	683b      	ldr	r3, [r7, #0]
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	785b      	ldrb	r3, [r3, #1]
 8006e20:	2b01      	cmp	r3, #1
 8006e22:	d161      	bne.n	8006ee8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e3a:	d11f      	bne.n	8006e7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	015a      	lsls	r2, r3, #5
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4413      	add	r3, r2
 8006e44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	0151      	lsls	r1, r2, #5
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	440a      	add	r2, r1
 8006e52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006e5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	015a      	lsls	r2, r3, #5
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4413      	add	r3, r2
 8006e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	0151      	lsls	r1, r2, #5
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	440a      	add	r2, r1
 8006e72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006e76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	f003 030f 	and.w	r3, r3, #15
 8006e8c:	2101      	movs	r1, #1
 8006e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e92:	b29b      	uxth	r3, r3
 8006e94:	43db      	mvns	r3, r3
 8006e96:	68f9      	ldr	r1, [r7, #12]
 8006e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e9c:	4013      	ands	r3, r2
 8006e9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ea6:	69da      	ldr	r2, [r3, #28]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	f003 030f 	and.w	r3, r3, #15
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	43db      	mvns	r3, r3
 8006eba:	68f9      	ldr	r1, [r7, #12]
 8006ebc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	015a      	lsls	r2, r3, #5
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4413      	add	r3, r2
 8006ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ed0:	681a      	ldr	r2, [r3, #0]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	0159      	lsls	r1, r3, #5
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	440b      	add	r3, r1
 8006eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4b35      	ldr	r3, [pc, #212]	; (8006fb8 <USB_DeactivateEndpoint+0x1b0>)
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	600b      	str	r3, [r1, #0]
 8006ee6:	e060      	b.n	8006faa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	015a      	lsls	r2, r3, #5
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	4413      	add	r3, r2
 8006ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006efa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006efe:	d11f      	bne.n	8006f40 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006f00:	68bb      	ldr	r3, [r7, #8]
 8006f02:	015a      	lsls	r2, r3, #5
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4413      	add	r3, r2
 8006f08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	0151      	lsls	r1, r2, #5
 8006f12:	68fa      	ldr	r2, [r7, #12]
 8006f14:	440a      	add	r2, r1
 8006f16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f1a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f1e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	015a      	lsls	r2, r3, #5
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	4413      	add	r3, r2
 8006f28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68ba      	ldr	r2, [r7, #8]
 8006f30:	0151      	lsls	r1, r2, #5
 8006f32:	68fa      	ldr	r2, [r7, #12]
 8006f34:	440a      	add	r2, r1
 8006f36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f3a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f3e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	f003 030f 	and.w	r3, r3, #15
 8006f50:	2101      	movs	r1, #1
 8006f52:	fa01 f303 	lsl.w	r3, r1, r3
 8006f56:	041b      	lsls	r3, r3, #16
 8006f58:	43db      	mvns	r3, r3
 8006f5a:	68f9      	ldr	r1, [r7, #12]
 8006f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f60:	4013      	ands	r3, r2
 8006f62:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f6a:	69da      	ldr	r2, [r3, #28]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	781b      	ldrb	r3, [r3, #0]
 8006f70:	f003 030f 	and.w	r3, r3, #15
 8006f74:	2101      	movs	r1, #1
 8006f76:	fa01 f303 	lsl.w	r3, r1, r3
 8006f7a:	041b      	lsls	r3, r3, #16
 8006f7c:	43db      	mvns	r3, r3
 8006f7e:	68f9      	ldr	r1, [r7, #12]
 8006f80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006f84:	4013      	ands	r3, r2
 8006f86:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	015a      	lsls	r2, r3, #5
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	4413      	add	r3, r2
 8006f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	0159      	lsls	r1, r3, #5
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	440b      	add	r3, r1
 8006f9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa2:	4619      	mov	r1, r3
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <USB_DeactivateEndpoint+0x1b4>)
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	ec337800 	.word	0xec337800
 8006fbc:	eff37800 	.word	0xeff37800

08006fc0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b08a      	sub	sp, #40	; 0x28
 8006fc4:	af02      	add	r7, sp, #8
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	4613      	mov	r3, r2
 8006fcc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	781b      	ldrb	r3, [r3, #0]
 8006fd6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	785b      	ldrb	r3, [r3, #1]
 8006fdc:	2b01      	cmp	r3, #1
 8006fde:	f040 815c 	bne.w	800729a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d132      	bne.n	8007050 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006fea:	69bb      	ldr	r3, [r7, #24]
 8006fec:	015a      	lsls	r2, r3, #5
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	4413      	add	r3, r2
 8006ff2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	69ba      	ldr	r2, [r7, #24]
 8006ffa:	0151      	lsls	r1, r2, #5
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	440a      	add	r2, r1
 8007000:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007004:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007008:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800700c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800700e:	69bb      	ldr	r3, [r7, #24]
 8007010:	015a      	lsls	r2, r3, #5
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	4413      	add	r3, r2
 8007016:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800701a:	691b      	ldr	r3, [r3, #16]
 800701c:	69ba      	ldr	r2, [r7, #24]
 800701e:	0151      	lsls	r1, r2, #5
 8007020:	69fa      	ldr	r2, [r7, #28]
 8007022:	440a      	add	r2, r1
 8007024:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007028:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800702c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	015a      	lsls	r2, r3, #5
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	4413      	add	r3, r2
 8007036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	69ba      	ldr	r2, [r7, #24]
 800703e:	0151      	lsls	r1, r2, #5
 8007040:	69fa      	ldr	r2, [r7, #28]
 8007042:	440a      	add	r2, r1
 8007044:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007048:	0cdb      	lsrs	r3, r3, #19
 800704a:	04db      	lsls	r3, r3, #19
 800704c:	6113      	str	r3, [r2, #16]
 800704e:	e074      	b.n	800713a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007050:	69bb      	ldr	r3, [r7, #24]
 8007052:	015a      	lsls	r2, r3, #5
 8007054:	69fb      	ldr	r3, [r7, #28]
 8007056:	4413      	add	r3, r2
 8007058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	69ba      	ldr	r2, [r7, #24]
 8007060:	0151      	lsls	r1, r2, #5
 8007062:	69fa      	ldr	r2, [r7, #28]
 8007064:	440a      	add	r2, r1
 8007066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800706a:	0cdb      	lsrs	r3, r3, #19
 800706c:	04db      	lsls	r3, r3, #19
 800706e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	015a      	lsls	r2, r3, #5
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	4413      	add	r3, r2
 8007078:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800707c:	691b      	ldr	r3, [r3, #16]
 800707e:	69ba      	ldr	r2, [r7, #24]
 8007080:	0151      	lsls	r1, r2, #5
 8007082:	69fa      	ldr	r2, [r7, #28]
 8007084:	440a      	add	r2, r1
 8007086:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800708a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800708e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007092:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	69fb      	ldr	r3, [r7, #28]
 800709a:	4413      	add	r3, r2
 800709c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070a0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	6999      	ldr	r1, [r3, #24]
 80070a6:	68bb      	ldr	r3, [r7, #8]
 80070a8:	68db      	ldr	r3, [r3, #12]
 80070aa:	440b      	add	r3, r1
 80070ac:	1e59      	subs	r1, r3, #1
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	68db      	ldr	r3, [r3, #12]
 80070b2:	fbb1 f3f3 	udiv	r3, r1, r3
 80070b6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80070b8:	4b9d      	ldr	r3, [pc, #628]	; (8007330 <USB_EPStartXfer+0x370>)
 80070ba:	400b      	ands	r3, r1
 80070bc:	69b9      	ldr	r1, [r7, #24]
 80070be:	0148      	lsls	r0, r1, #5
 80070c0:	69f9      	ldr	r1, [r7, #28]
 80070c2:	4401      	add	r1, r0
 80070c4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070c8:	4313      	orrs	r3, r2
 80070ca:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80070cc:	69bb      	ldr	r3, [r7, #24]
 80070ce:	015a      	lsls	r2, r3, #5
 80070d0:	69fb      	ldr	r3, [r7, #28]
 80070d2:	4413      	add	r3, r2
 80070d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80070d8:	691a      	ldr	r2, [r3, #16]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	699b      	ldr	r3, [r3, #24]
 80070de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80070e2:	69b9      	ldr	r1, [r7, #24]
 80070e4:	0148      	lsls	r0, r1, #5
 80070e6:	69f9      	ldr	r1, [r7, #28]
 80070e8:	4401      	add	r1, r0
 80070ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80070ee:	4313      	orrs	r3, r2
 80070f0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80070f2:	68bb      	ldr	r3, [r7, #8]
 80070f4:	791b      	ldrb	r3, [r3, #4]
 80070f6:	2b01      	cmp	r3, #1
 80070f8:	d11f      	bne.n	800713a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80070fa:	69bb      	ldr	r3, [r7, #24]
 80070fc:	015a      	lsls	r2, r3, #5
 80070fe:	69fb      	ldr	r3, [r7, #28]
 8007100:	4413      	add	r3, r2
 8007102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	69ba      	ldr	r2, [r7, #24]
 800710a:	0151      	lsls	r1, r2, #5
 800710c:	69fa      	ldr	r2, [r7, #28]
 800710e:	440a      	add	r2, r1
 8007110:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007114:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8007118:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800711a:	69bb      	ldr	r3, [r7, #24]
 800711c:	015a      	lsls	r2, r3, #5
 800711e:	69fb      	ldr	r3, [r7, #28]
 8007120:	4413      	add	r3, r2
 8007122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007126:	691b      	ldr	r3, [r3, #16]
 8007128:	69ba      	ldr	r2, [r7, #24]
 800712a:	0151      	lsls	r1, r2, #5
 800712c:	69fa      	ldr	r2, [r7, #28]
 800712e:	440a      	add	r2, r1
 8007130:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007134:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007138:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800713a:	79fb      	ldrb	r3, [r7, #7]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d14b      	bne.n	80071d8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	695b      	ldr	r3, [r3, #20]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d009      	beq.n	800715c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007148:	69bb      	ldr	r3, [r7, #24]
 800714a:	015a      	lsls	r2, r3, #5
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	4413      	add	r3, r2
 8007150:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007154:	461a      	mov	r2, r3
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	695b      	ldr	r3, [r3, #20]
 800715a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	791b      	ldrb	r3, [r3, #4]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d128      	bne.n	80071b6 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007164:	69fb      	ldr	r3, [r7, #28]
 8007166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007170:	2b00      	cmp	r3, #0
 8007172:	d110      	bne.n	8007196 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007174:	69bb      	ldr	r3, [r7, #24]
 8007176:	015a      	lsls	r2, r3, #5
 8007178:	69fb      	ldr	r3, [r7, #28]
 800717a:	4413      	add	r3, r2
 800717c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	69ba      	ldr	r2, [r7, #24]
 8007184:	0151      	lsls	r1, r2, #5
 8007186:	69fa      	ldr	r2, [r7, #28]
 8007188:	440a      	add	r2, r1
 800718a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800718e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007192:	6013      	str	r3, [r2, #0]
 8007194:	e00f      	b.n	80071b6 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007196:	69bb      	ldr	r3, [r7, #24]
 8007198:	015a      	lsls	r2, r3, #5
 800719a:	69fb      	ldr	r3, [r7, #28]
 800719c:	4413      	add	r3, r2
 800719e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	0151      	lsls	r1, r2, #5
 80071a8:	69fa      	ldr	r2, [r7, #28]
 80071aa:	440a      	add	r2, r1
 80071ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071b4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071b6:	69bb      	ldr	r3, [r7, #24]
 80071b8:	015a      	lsls	r2, r3, #5
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	4413      	add	r3, r2
 80071be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	0151      	lsls	r1, r2, #5
 80071c8:	69fa      	ldr	r2, [r7, #28]
 80071ca:	440a      	add	r2, r1
 80071cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071d0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	e133      	b.n	8007440 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80071d8:	69bb      	ldr	r3, [r7, #24]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	69fb      	ldr	r3, [r7, #28]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	0151      	lsls	r1, r2, #5
 80071ea:	69fa      	ldr	r2, [r7, #28]
 80071ec:	440a      	add	r2, r1
 80071ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80071f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80071f6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	791b      	ldrb	r3, [r3, #4]
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	d015      	beq.n	800722c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 811b 	beq.w	8007440 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800720a:	69fb      	ldr	r3, [r7, #28]
 800720c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007210:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007212:	68bb      	ldr	r3, [r7, #8]
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	f003 030f 	and.w	r3, r3, #15
 800721a:	2101      	movs	r1, #1
 800721c:	fa01 f303 	lsl.w	r3, r1, r3
 8007220:	69f9      	ldr	r1, [r7, #28]
 8007222:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007226:	4313      	orrs	r3, r2
 8007228:	634b      	str	r3, [r1, #52]	; 0x34
 800722a:	e109      	b.n	8007440 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800722c:	69fb      	ldr	r3, [r7, #28]
 800722e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007232:	689b      	ldr	r3, [r3, #8]
 8007234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007238:	2b00      	cmp	r3, #0
 800723a:	d110      	bne.n	800725e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800723c:	69bb      	ldr	r3, [r7, #24]
 800723e:	015a      	lsls	r2, r3, #5
 8007240:	69fb      	ldr	r3, [r7, #28]
 8007242:	4413      	add	r3, r2
 8007244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	69ba      	ldr	r2, [r7, #24]
 800724c:	0151      	lsls	r1, r2, #5
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	440a      	add	r2, r1
 8007252:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007256:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800725a:	6013      	str	r3, [r2, #0]
 800725c:	e00f      	b.n	800727e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800725e:	69bb      	ldr	r3, [r7, #24]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	69fb      	ldr	r3, [r7, #28]
 8007264:	4413      	add	r3, r2
 8007266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	69ba      	ldr	r2, [r7, #24]
 800726e:	0151      	lsls	r1, r2, #5
 8007270:	69fa      	ldr	r2, [r7, #28]
 8007272:	440a      	add	r2, r1
 8007274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800727c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	6919      	ldr	r1, [r3, #16]
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	781a      	ldrb	r2, [r3, #0]
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	699b      	ldr	r3, [r3, #24]
 800728a:	b298      	uxth	r0, r3
 800728c:	79fb      	ldrb	r3, [r7, #7]
 800728e:	9300      	str	r3, [sp, #0]
 8007290:	4603      	mov	r3, r0
 8007292:	68f8      	ldr	r0, [r7, #12]
 8007294:	f000 fade 	bl	8007854 <USB_WritePacket>
 8007298:	e0d2      	b.n	8007440 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	015a      	lsls	r2, r3, #5
 800729e:	69fb      	ldr	r3, [r7, #28]
 80072a0:	4413      	add	r3, r2
 80072a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072a6:	691b      	ldr	r3, [r3, #16]
 80072a8:	69ba      	ldr	r2, [r7, #24]
 80072aa:	0151      	lsls	r1, r2, #5
 80072ac:	69fa      	ldr	r2, [r7, #28]
 80072ae:	440a      	add	r2, r1
 80072b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072b4:	0cdb      	lsrs	r3, r3, #19
 80072b6:	04db      	lsls	r3, r3, #19
 80072b8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	015a      	lsls	r2, r3, #5
 80072be:	69fb      	ldr	r3, [r7, #28]
 80072c0:	4413      	add	r3, r2
 80072c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	69ba      	ldr	r2, [r7, #24]
 80072ca:	0151      	lsls	r1, r2, #5
 80072cc:	69fa      	ldr	r2, [r7, #28]
 80072ce:	440a      	add	r2, r1
 80072d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80072d4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80072d8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80072dc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d126      	bne.n	8007334 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80072e6:	69bb      	ldr	r3, [r7, #24]
 80072e8:	015a      	lsls	r2, r3, #5
 80072ea:	69fb      	ldr	r3, [r7, #28]
 80072ec:	4413      	add	r3, r2
 80072ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072f2:	691a      	ldr	r2, [r3, #16]
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80072fc:	69b9      	ldr	r1, [r7, #24]
 80072fe:	0148      	lsls	r0, r1, #5
 8007300:	69f9      	ldr	r1, [r7, #28]
 8007302:	4401      	add	r1, r0
 8007304:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007308:	4313      	orrs	r3, r2
 800730a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800730c:	69bb      	ldr	r3, [r7, #24]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	69fb      	ldr	r3, [r7, #28]
 8007312:	4413      	add	r3, r2
 8007314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	0151      	lsls	r1, r2, #5
 800731e:	69fa      	ldr	r2, [r7, #28]
 8007320:	440a      	add	r2, r1
 8007322:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007326:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800732a:	6113      	str	r3, [r2, #16]
 800732c:	e03a      	b.n	80073a4 <USB_EPStartXfer+0x3e4>
 800732e:	bf00      	nop
 8007330:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007334:	68bb      	ldr	r3, [r7, #8]
 8007336:	699a      	ldr	r2, [r3, #24]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	4413      	add	r3, r2
 800733e:	1e5a      	subs	r2, r3, #1
 8007340:	68bb      	ldr	r3, [r7, #8]
 8007342:	68db      	ldr	r3, [r3, #12]
 8007344:	fbb2 f3f3 	udiv	r3, r2, r3
 8007348:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	8afa      	ldrh	r2, [r7, #22]
 8007350:	fb03 f202 	mul.w	r2, r3, r2
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007358:	69bb      	ldr	r3, [r7, #24]
 800735a:	015a      	lsls	r2, r3, #5
 800735c:	69fb      	ldr	r3, [r7, #28]
 800735e:	4413      	add	r3, r2
 8007360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007364:	691a      	ldr	r2, [r3, #16]
 8007366:	8afb      	ldrh	r3, [r7, #22]
 8007368:	04d9      	lsls	r1, r3, #19
 800736a:	4b38      	ldr	r3, [pc, #224]	; (800744c <USB_EPStartXfer+0x48c>)
 800736c:	400b      	ands	r3, r1
 800736e:	69b9      	ldr	r1, [r7, #24]
 8007370:	0148      	lsls	r0, r1, #5
 8007372:	69f9      	ldr	r1, [r7, #28]
 8007374:	4401      	add	r1, r0
 8007376:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800737a:	4313      	orrs	r3, r2
 800737c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	015a      	lsls	r2, r3, #5
 8007382:	69fb      	ldr	r3, [r7, #28]
 8007384:	4413      	add	r3, r2
 8007386:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800738a:	691a      	ldr	r2, [r3, #16]
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	69db      	ldr	r3, [r3, #28]
 8007390:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007394:	69b9      	ldr	r1, [r7, #24]
 8007396:	0148      	lsls	r0, r1, #5
 8007398:	69f9      	ldr	r1, [r7, #28]
 800739a:	4401      	add	r1, r0
 800739c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80073a0:	4313      	orrs	r3, r2
 80073a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80073a4:	79fb      	ldrb	r3, [r7, #7]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d10d      	bne.n	80073c6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	691b      	ldr	r3, [r3, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d009      	beq.n	80073c6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	6919      	ldr	r1, [r3, #16]
 80073b6:	69bb      	ldr	r3, [r7, #24]
 80073b8:	015a      	lsls	r2, r3, #5
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	4413      	add	r3, r2
 80073be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073c2:	460a      	mov	r2, r1
 80073c4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80073c6:	68bb      	ldr	r3, [r7, #8]
 80073c8:	791b      	ldrb	r3, [r3, #4]
 80073ca:	2b01      	cmp	r3, #1
 80073cc:	d128      	bne.n	8007420 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80073ce:	69fb      	ldr	r3, [r7, #28]
 80073d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d110      	bne.n	8007400 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	015a      	lsls	r2, r3, #5
 80073e2:	69fb      	ldr	r3, [r7, #28]
 80073e4:	4413      	add	r3, r2
 80073e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	69ba      	ldr	r2, [r7, #24]
 80073ee:	0151      	lsls	r1, r2, #5
 80073f0:	69fa      	ldr	r2, [r7, #28]
 80073f2:	440a      	add	r2, r1
 80073f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80073f8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073fc:	6013      	str	r3, [r2, #0]
 80073fe:	e00f      	b.n	8007420 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007400:	69bb      	ldr	r3, [r7, #24]
 8007402:	015a      	lsls	r2, r3, #5
 8007404:	69fb      	ldr	r3, [r7, #28]
 8007406:	4413      	add	r3, r2
 8007408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	0151      	lsls	r1, r2, #5
 8007412:	69fa      	ldr	r2, [r7, #28]
 8007414:	440a      	add	r2, r1
 8007416:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800741a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800741e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	015a      	lsls	r2, r3, #5
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	4413      	add	r3, r2
 8007428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	69ba      	ldr	r2, [r7, #24]
 8007430:	0151      	lsls	r1, r2, #5
 8007432:	69fa      	ldr	r2, [r7, #28]
 8007434:	440a      	add	r2, r1
 8007436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800743a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800743e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3720      	adds	r7, #32
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	1ff80000 	.word	0x1ff80000

08007450 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007450:	b480      	push	{r7}
 8007452:	b087      	sub	sp, #28
 8007454:	af00      	add	r7, sp, #0
 8007456:	60f8      	str	r0, [r7, #12]
 8007458:	60b9      	str	r1, [r7, #8]
 800745a:	4613      	mov	r3, r2
 800745c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	785b      	ldrb	r3, [r3, #1]
 800746c:	2b01      	cmp	r3, #1
 800746e:	f040 80ce 	bne.w	800760e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d132      	bne.n	80074e0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	015a      	lsls	r2, r3, #5
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	4413      	add	r3, r2
 8007482:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	693a      	ldr	r2, [r7, #16]
 800748a:	0151      	lsls	r1, r2, #5
 800748c:	697a      	ldr	r2, [r7, #20]
 800748e:	440a      	add	r2, r1
 8007490:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007494:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007498:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800749c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800749e:	693b      	ldr	r3, [r7, #16]
 80074a0:	015a      	lsls	r2, r3, #5
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	4413      	add	r3, r2
 80074a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074aa:	691b      	ldr	r3, [r3, #16]
 80074ac:	693a      	ldr	r2, [r7, #16]
 80074ae:	0151      	lsls	r1, r2, #5
 80074b0:	697a      	ldr	r2, [r7, #20]
 80074b2:	440a      	add	r2, r1
 80074b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80074bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	015a      	lsls	r2, r3, #5
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	4413      	add	r3, r2
 80074c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	0151      	lsls	r1, r2, #5
 80074d0:	697a      	ldr	r2, [r7, #20]
 80074d2:	440a      	add	r2, r1
 80074d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074d8:	0cdb      	lsrs	r3, r3, #19
 80074da:	04db      	lsls	r3, r3, #19
 80074dc:	6113      	str	r3, [r2, #16]
 80074de:	e04e      	b.n	800757e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ec:	691b      	ldr	r3, [r3, #16]
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	0151      	lsls	r1, r2, #5
 80074f2:	697a      	ldr	r2, [r7, #20]
 80074f4:	440a      	add	r2, r1
 80074f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80074fa:	0cdb      	lsrs	r3, r3, #19
 80074fc:	04db      	lsls	r3, r3, #19
 80074fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	697b      	ldr	r3, [r7, #20]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800750c:	691b      	ldr	r3, [r3, #16]
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	0151      	lsls	r1, r2, #5
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	440a      	add	r2, r1
 8007516:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800751a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800751e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007522:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	699a      	ldr	r2, [r3, #24]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	68db      	ldr	r3, [r3, #12]
 800752c:	429a      	cmp	r2, r3
 800752e:	d903      	bls.n	8007538 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	68da      	ldr	r2, [r3, #12]
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	015a      	lsls	r2, r3, #5
 800753c:	697b      	ldr	r3, [r7, #20]
 800753e:	4413      	add	r3, r2
 8007540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007544:	691b      	ldr	r3, [r3, #16]
 8007546:	693a      	ldr	r2, [r7, #16]
 8007548:	0151      	lsls	r1, r2, #5
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	440a      	add	r2, r1
 800754e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007552:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007556:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	015a      	lsls	r2, r3, #5
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	4413      	add	r3, r2
 8007560:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007564:	691a      	ldr	r2, [r3, #16]
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	699b      	ldr	r3, [r3, #24]
 800756a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800756e:	6939      	ldr	r1, [r7, #16]
 8007570:	0148      	lsls	r0, r1, #5
 8007572:	6979      	ldr	r1, [r7, #20]
 8007574:	4401      	add	r1, r0
 8007576:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800757a:	4313      	orrs	r3, r2
 800757c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800757e:	79fb      	ldrb	r3, [r7, #7]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d11e      	bne.n	80075c2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d009      	beq.n	80075a0 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	015a      	lsls	r2, r3, #5
 8007590:	697b      	ldr	r3, [r7, #20]
 8007592:	4413      	add	r3, r2
 8007594:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007598:	461a      	mov	r2, r3
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	015a      	lsls	r2, r3, #5
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	4413      	add	r3, r2
 80075a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	0151      	lsls	r1, r2, #5
 80075b2:	697a      	ldr	r2, [r7, #20]
 80075b4:	440a      	add	r2, r1
 80075b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075be:	6013      	str	r3, [r2, #0]
 80075c0:	e097      	b.n	80076f2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	693a      	ldr	r2, [r7, #16]
 80075d2:	0151      	lsls	r1, r2, #5
 80075d4:	697a      	ldr	r2, [r7, #20]
 80075d6:	440a      	add	r2, r1
 80075d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80075e0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	699b      	ldr	r3, [r3, #24]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	f000 8083 	beq.w	80076f2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80075ec:	697b      	ldr	r3, [r7, #20]
 80075ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80075f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	f003 030f 	and.w	r3, r3, #15
 80075fc:	2101      	movs	r1, #1
 80075fe:	fa01 f303 	lsl.w	r3, r1, r3
 8007602:	6979      	ldr	r1, [r7, #20]
 8007604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007608:	4313      	orrs	r3, r2
 800760a:	634b      	str	r3, [r1, #52]	; 0x34
 800760c:	e071      	b.n	80076f2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	015a      	lsls	r2, r3, #5
 8007612:	697b      	ldr	r3, [r7, #20]
 8007614:	4413      	add	r3, r2
 8007616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800761a:	691b      	ldr	r3, [r3, #16]
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	0151      	lsls	r1, r2, #5
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	440a      	add	r2, r1
 8007624:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007628:	0cdb      	lsrs	r3, r3, #19
 800762a:	04db      	lsls	r3, r3, #19
 800762c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	015a      	lsls	r2, r3, #5
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	4413      	add	r3, r2
 8007636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800763a:	691b      	ldr	r3, [r3, #16]
 800763c:	693a      	ldr	r2, [r7, #16]
 800763e:	0151      	lsls	r1, r2, #5
 8007640:	697a      	ldr	r2, [r7, #20]
 8007642:	440a      	add	r2, r1
 8007644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007648:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800764c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007650:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	699b      	ldr	r3, [r3, #24]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	68da      	ldr	r2, [r3, #12]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	68da      	ldr	r2, [r3, #12]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	015a      	lsls	r2, r3, #5
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	4413      	add	r3, r2
 8007672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007676:	691b      	ldr	r3, [r3, #16]
 8007678:	693a      	ldr	r2, [r7, #16]
 800767a:	0151      	lsls	r1, r2, #5
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	440a      	add	r2, r1
 8007680:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007684:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007688:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	697b      	ldr	r3, [r7, #20]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007696:	691a      	ldr	r2, [r3, #16]
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	69db      	ldr	r3, [r3, #28]
 800769c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80076a0:	6939      	ldr	r1, [r7, #16]
 80076a2:	0148      	lsls	r0, r1, #5
 80076a4:	6979      	ldr	r1, [r7, #20]
 80076a6:	4401      	add	r1, r0
 80076a8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80076ac:	4313      	orrs	r3, r2
 80076ae:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80076b0:	79fb      	ldrb	r3, [r7, #7]
 80076b2:	2b01      	cmp	r3, #1
 80076b4:	d10d      	bne.n	80076d2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	691b      	ldr	r3, [r3, #16]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d009      	beq.n	80076d2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	6919      	ldr	r1, [r3, #16]
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	697b      	ldr	r3, [r7, #20]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ce:	460a      	mov	r2, r1
 80076d0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80076d2:	693b      	ldr	r3, [r7, #16]
 80076d4:	015a      	lsls	r2, r3, #5
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	4413      	add	r3, r2
 80076da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	693a      	ldr	r2, [r7, #16]
 80076e2:	0151      	lsls	r1, r2, #5
 80076e4:	697a      	ldr	r2, [r7, #20]
 80076e6:	440a      	add	r2, r1
 80076e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80076f0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80076f2:	2300      	movs	r3, #0
}
 80076f4:	4618      	mov	r0, r3
 80076f6:	371c      	adds	r7, #28
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007700:	b480      	push	{r7}
 8007702:	b087      	sub	sp, #28
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
 8007708:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800770a:	2300      	movs	r3, #0
 800770c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800770e:	2300      	movs	r3, #0
 8007710:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	785b      	ldrb	r3, [r3, #1]
 800771a:	2b01      	cmp	r3, #1
 800771c:	d14a      	bne.n	80077b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800771e:	683b      	ldr	r3, [r7, #0]
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	015a      	lsls	r2, r3, #5
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	4413      	add	r3, r2
 8007728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007736:	f040 8086 	bne.w	8007846 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800773a:	683b      	ldr	r3, [r7, #0]
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	015a      	lsls	r2, r3, #5
 8007740:	693b      	ldr	r3, [r7, #16]
 8007742:	4413      	add	r3, r2
 8007744:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	683a      	ldr	r2, [r7, #0]
 800774c:	7812      	ldrb	r2, [r2, #0]
 800774e:	0151      	lsls	r1, r2, #5
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	440a      	add	r2, r1
 8007754:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007758:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800775c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	781b      	ldrb	r3, [r3, #0]
 8007762:	015a      	lsls	r2, r3, #5
 8007764:	693b      	ldr	r3, [r7, #16]
 8007766:	4413      	add	r3, r2
 8007768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	683a      	ldr	r2, [r7, #0]
 8007770:	7812      	ldrb	r2, [r2, #0]
 8007772:	0151      	lsls	r1, r2, #5
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	440a      	add	r2, r1
 8007778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800777c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007780:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	3301      	adds	r3, #1
 8007786:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f242 7210 	movw	r2, #10000	; 0x2710
 800778e:	4293      	cmp	r3, r2
 8007790:	d902      	bls.n	8007798 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007792:	2301      	movs	r3, #1
 8007794:	75fb      	strb	r3, [r7, #23]
          break;
 8007796:	e056      	b.n	8007846 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	693b      	ldr	r3, [r7, #16]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077b0:	d0e7      	beq.n	8007782 <USB_EPStopXfer+0x82>
 80077b2:	e048      	b.n	8007846 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	015a      	lsls	r2, r3, #5
 80077ba:	693b      	ldr	r3, [r7, #16]
 80077bc:	4413      	add	r3, r2
 80077be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077cc:	d13b      	bne.n	8007846 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	015a      	lsls	r2, r3, #5
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	4413      	add	r3, r2
 80077d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	683a      	ldr	r2, [r7, #0]
 80077e0:	7812      	ldrb	r2, [r2, #0]
 80077e2:	0151      	lsls	r1, r2, #5
 80077e4:	693a      	ldr	r2, [r7, #16]
 80077e6:	440a      	add	r2, r1
 80077e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80077ec:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80077f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80077f2:	683b      	ldr	r3, [r7, #0]
 80077f4:	781b      	ldrb	r3, [r3, #0]
 80077f6:	015a      	lsls	r2, r3, #5
 80077f8:	693b      	ldr	r3, [r7, #16]
 80077fa:	4413      	add	r3, r2
 80077fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	683a      	ldr	r2, [r7, #0]
 8007804:	7812      	ldrb	r2, [r2, #0]
 8007806:	0151      	lsls	r1, r2, #5
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	440a      	add	r2, r1
 800780c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007810:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007814:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3301      	adds	r3, #1
 800781a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f242 7210 	movw	r2, #10000	; 0x2710
 8007822:	4293      	cmp	r3, r2
 8007824:	d902      	bls.n	800782c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	75fb      	strb	r3, [r7, #23]
          break;
 800782a:	e00c      	b.n	8007846 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	015a      	lsls	r2, r3, #5
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	4413      	add	r3, r2
 8007836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007844:	d0e7      	beq.n	8007816 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007846:	7dfb      	ldrb	r3, [r7, #23]
}
 8007848:	4618      	mov	r0, r3
 800784a:	371c      	adds	r7, #28
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr

08007854 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007854:	b480      	push	{r7}
 8007856:	b089      	sub	sp, #36	; 0x24
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	4611      	mov	r1, r2
 8007860:	461a      	mov	r2, r3
 8007862:	460b      	mov	r3, r1
 8007864:	71fb      	strb	r3, [r7, #7]
 8007866:	4613      	mov	r3, r2
 8007868:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007872:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007876:	2b00      	cmp	r3, #0
 8007878:	d123      	bne.n	80078c2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800787a:	88bb      	ldrh	r3, [r7, #4]
 800787c:	3303      	adds	r3, #3
 800787e:	089b      	lsrs	r3, r3, #2
 8007880:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007882:	2300      	movs	r3, #0
 8007884:	61bb      	str	r3, [r7, #24]
 8007886:	e018      	b.n	80078ba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8007888:	79fb      	ldrb	r3, [r7, #7]
 800788a:	031a      	lsls	r2, r3, #12
 800788c:	697b      	ldr	r3, [r7, #20]
 800788e:	4413      	add	r3, r2
 8007890:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007894:	461a      	mov	r2, r3
 8007896:	69fb      	ldr	r3, [r7, #28]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800789c:	69fb      	ldr	r3, [r7, #28]
 800789e:	3301      	adds	r3, #1
 80078a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078a2:	69fb      	ldr	r3, [r7, #28]
 80078a4:	3301      	adds	r3, #1
 80078a6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	3301      	adds	r3, #1
 80078ac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80078ae:	69fb      	ldr	r3, [r7, #28]
 80078b0:	3301      	adds	r3, #1
 80078b2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80078b4:	69bb      	ldr	r3, [r7, #24]
 80078b6:	3301      	adds	r3, #1
 80078b8:	61bb      	str	r3, [r7, #24]
 80078ba:	69ba      	ldr	r2, [r7, #24]
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d3e2      	bcc.n	8007888 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	3724      	adds	r7, #36	; 0x24
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b08b      	sub	sp, #44	; 0x2c
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	60f8      	str	r0, [r7, #12]
 80078d8:	60b9      	str	r1, [r7, #8]
 80078da:	4613      	mov	r3, r2
 80078dc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80078e6:	88fb      	ldrh	r3, [r7, #6]
 80078e8:	089b      	lsrs	r3, r3, #2
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80078ee:	88fb      	ldrh	r3, [r7, #6]
 80078f0:	f003 0303 	and.w	r3, r3, #3
 80078f4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80078f6:	2300      	movs	r3, #0
 80078f8:	623b      	str	r3, [r7, #32]
 80078fa:	e014      	b.n	8007926 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80078fc:	69bb      	ldr	r3, [r7, #24]
 80078fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007906:	601a      	str	r2, [r3, #0]
    pDest++;
 8007908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790a:	3301      	adds	r3, #1
 800790c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800790e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007910:	3301      	adds	r3, #1
 8007912:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8007914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007916:	3301      	adds	r3, #1
 8007918:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	3301      	adds	r3, #1
 800791e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	3301      	adds	r3, #1
 8007924:	623b      	str	r3, [r7, #32]
 8007926:	6a3a      	ldr	r2, [r7, #32]
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	429a      	cmp	r2, r3
 800792c:	d3e6      	bcc.n	80078fc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800792e:	8bfb      	ldrh	r3, [r7, #30]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d01e      	beq.n	8007972 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007934:	2300      	movs	r3, #0
 8007936:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800793e:	461a      	mov	r2, r3
 8007940:	f107 0310 	add.w	r3, r7, #16
 8007944:	6812      	ldr	r2, [r2, #0]
 8007946:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8007948:	693a      	ldr	r2, [r7, #16]
 800794a:	6a3b      	ldr	r3, [r7, #32]
 800794c:	b2db      	uxtb	r3, r3
 800794e:	00db      	lsls	r3, r3, #3
 8007950:	fa22 f303 	lsr.w	r3, r2, r3
 8007954:	b2da      	uxtb	r2, r3
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	701a      	strb	r2, [r3, #0]
      i++;
 800795a:	6a3b      	ldr	r3, [r7, #32]
 800795c:	3301      	adds	r3, #1
 800795e:	623b      	str	r3, [r7, #32]
      pDest++;
 8007960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007962:	3301      	adds	r3, #1
 8007964:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8007966:	8bfb      	ldrh	r3, [r7, #30]
 8007968:	3b01      	subs	r3, #1
 800796a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800796c:	8bfb      	ldrh	r3, [r7, #30]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d1ea      	bne.n	8007948 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007974:	4618      	mov	r0, r3
 8007976:	372c      	adds	r7, #44	; 0x2c
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
 8007988:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800798e:	683b      	ldr	r3, [r7, #0]
 8007990:	781b      	ldrb	r3, [r3, #0]
 8007992:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007994:	683b      	ldr	r3, [r7, #0]
 8007996:	785b      	ldrb	r3, [r3, #1]
 8007998:	2b01      	cmp	r3, #1
 800799a:	d12c      	bne.n	80079f6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	015a      	lsls	r2, r3, #5
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	4413      	add	r3, r2
 80079a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	db12      	blt.n	80079d4 <USB_EPSetStall+0x54>
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00f      	beq.n	80079d4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	015a      	lsls	r2, r3, #5
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	4413      	add	r3, r2
 80079bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	0151      	lsls	r1, r2, #5
 80079c6:	68fa      	ldr	r2, [r7, #12]
 80079c8:	440a      	add	r2, r1
 80079ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80079d2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	015a      	lsls	r2, r3, #5
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4413      	add	r3, r2
 80079dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	0151      	lsls	r1, r2, #5
 80079e6:	68fa      	ldr	r2, [r7, #12]
 80079e8:	440a      	add	r2, r1
 80079ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80079f2:	6013      	str	r3, [r2, #0]
 80079f4:	e02b      	b.n	8007a4e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	015a      	lsls	r2, r3, #5
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	4413      	add	r3, r2
 80079fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	db12      	blt.n	8007a2e <USB_EPSetStall+0xae>
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00f      	beq.n	8007a2e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	015a      	lsls	r2, r3, #5
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	4413      	add	r3, r2
 8007a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68ba      	ldr	r2, [r7, #8]
 8007a1e:	0151      	lsls	r1, r2, #5
 8007a20:	68fa      	ldr	r2, [r7, #12]
 8007a22:	440a      	add	r2, r1
 8007a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a28:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8007a2c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	015a      	lsls	r2, r3, #5
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	4413      	add	r3, r2
 8007a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	0151      	lsls	r1, r2, #5
 8007a40:	68fa      	ldr	r2, [r7, #12]
 8007a42:	440a      	add	r2, r1
 8007a44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3714      	adds	r7, #20
 8007a54:	46bd      	mov	sp, r7
 8007a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5a:	4770      	bx	lr

08007a5c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
 8007a64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007a70:	683b      	ldr	r3, [r7, #0]
 8007a72:	785b      	ldrb	r3, [r3, #1]
 8007a74:	2b01      	cmp	r3, #1
 8007a76:	d128      	bne.n	8007aca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	68ba      	ldr	r2, [r7, #8]
 8007a88:	0151      	lsls	r1, r2, #5
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	440a      	add	r2, r1
 8007a8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007a96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	791b      	ldrb	r3, [r3, #4]
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d003      	beq.n	8007aa8 <USB_EPClearStall+0x4c>
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	791b      	ldrb	r3, [r3, #4]
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d138      	bne.n	8007b1a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	015a      	lsls	r2, r3, #5
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	4413      	add	r3, r2
 8007ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	68ba      	ldr	r2, [r7, #8]
 8007ab8:	0151      	lsls	r1, r2, #5
 8007aba:	68fa      	ldr	r2, [r7, #12]
 8007abc:	440a      	add	r2, r1
 8007abe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ac2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ac6:	6013      	str	r3, [r2, #0]
 8007ac8:	e027      	b.n	8007b1a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8007aca:	68bb      	ldr	r3, [r7, #8]
 8007acc:	015a      	lsls	r2, r3, #5
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68ba      	ldr	r2, [r7, #8]
 8007ada:	0151      	lsls	r1, r2, #5
 8007adc:	68fa      	ldr	r2, [r7, #12]
 8007ade:	440a      	add	r2, r1
 8007ae0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ae4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007ae8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	791b      	ldrb	r3, [r3, #4]
 8007aee:	2b03      	cmp	r3, #3
 8007af0:	d003      	beq.n	8007afa <USB_EPClearStall+0x9e>
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	791b      	ldrb	r3, [r3, #4]
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d10f      	bne.n	8007b1a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	015a      	lsls	r2, r3, #5
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4413      	add	r3, r2
 8007b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	0151      	lsls	r1, r2, #5
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	440a      	add	r2, r1
 8007b10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007b18:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8007b1a:	2300      	movs	r3, #0
}
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3714      	adds	r7, #20
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8007b28:	b480      	push	{r7}
 8007b2a:	b085      	sub	sp, #20
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	460b      	mov	r3, r1
 8007b32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68fa      	ldr	r2, [r7, #12]
 8007b42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007b46:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8007b4a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	78fb      	ldrb	r3, [r7, #3]
 8007b56:	011b      	lsls	r3, r3, #4
 8007b58:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8007b5c:	68f9      	ldr	r1, [r7, #12]
 8007b5e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007b62:	4313      	orrs	r3, r2
 8007b64:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	3714      	adds	r7, #20
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68fa      	ldr	r2, [r7, #12]
 8007b8a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007b8e:	f023 0303 	bic.w	r3, r3, #3
 8007b92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007ba2:	f023 0302 	bic.w	r3, r3, #2
 8007ba6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3714      	adds	r7, #20
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb4:	4770      	bx	lr

08007bb6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007bb6:	b480      	push	{r7}
 8007bb8:	b085      	sub	sp, #20
 8007bba:	af00      	add	r7, sp, #0
 8007bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68fa      	ldr	r2, [r7, #12]
 8007bcc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007bd0:	f023 0303 	bic.w	r3, r3, #3
 8007bd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	68fa      	ldr	r2, [r7, #12]
 8007be0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007be4:	f043 0302 	orr.w	r3, r3, #2
 8007be8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007bea:	2300      	movs	r3, #0
}
 8007bec:	4618      	mov	r0, r3
 8007bee:	3714      	adds	r7, #20
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	695b      	ldr	r3, [r3, #20]
 8007c04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	699b      	ldr	r3, [r3, #24]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007c10:	68fb      	ldr	r3, [r7, #12]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b085      	sub	sp, #20
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c30:	699b      	ldr	r3, [r3, #24]
 8007c32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c3a:	69db      	ldr	r3, [r3, #28]
 8007c3c:	68ba      	ldr	r2, [r7, #8]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	0c1b      	lsrs	r3, r3, #16
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3714      	adds	r7, #20
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr

08007c52 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c52:	b480      	push	{r7}
 8007c54:	b085      	sub	sp, #20
 8007c56:	af00      	add	r7, sp, #0
 8007c58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007c6e:	69db      	ldr	r3, [r3, #28]
 8007c70:	68ba      	ldr	r2, [r7, #8]
 8007c72:	4013      	ands	r3, r2
 8007c74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	b29b      	uxth	r3, r3
}
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	460b      	mov	r3, r1
 8007c90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8007c96:	78fb      	ldrb	r3, [r7, #3]
 8007c98:	015a      	lsls	r2, r3, #5
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	4413      	add	r3, r2
 8007c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ca2:	689b      	ldr	r3, [r3, #8]
 8007ca4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cac:	695b      	ldr	r3, [r3, #20]
 8007cae:	68ba      	ldr	r2, [r7, #8]
 8007cb0:	4013      	ands	r3, r2
 8007cb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007cb4:	68bb      	ldr	r3, [r7, #8]
}
 8007cb6:	4618      	mov	r0, r3
 8007cb8:	3714      	adds	r7, #20
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr

08007cc2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8007cc2:	b480      	push	{r7}
 8007cc4:	b087      	sub	sp, #28
 8007cc6:	af00      	add	r7, sp, #0
 8007cc8:	6078      	str	r0, [r7, #4]
 8007cca:	460b      	mov	r3, r1
 8007ccc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007cd8:	691b      	ldr	r3, [r3, #16]
 8007cda:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8007ce6:	78fb      	ldrb	r3, [r7, #3]
 8007ce8:	f003 030f 	and.w	r3, r3, #15
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	fa22 f303 	lsr.w	r3, r2, r3
 8007cf2:	01db      	lsls	r3, r3, #7
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	693a      	ldr	r2, [r7, #16]
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8007cfc:	78fb      	ldrb	r3, [r7, #3]
 8007cfe:	015a      	lsls	r2, r3, #5
 8007d00:	697b      	ldr	r3, [r7, #20]
 8007d02:	4413      	add	r3, r2
 8007d04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d08:	689b      	ldr	r3, [r3, #8]
 8007d0a:	693a      	ldr	r2, [r7, #16]
 8007d0c:	4013      	ands	r3, r2
 8007d0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007d10:	68bb      	ldr	r3, [r7, #8]
}
 8007d12:	4618      	mov	r0, r3
 8007d14:	371c      	adds	r7, #28
 8007d16:	46bd      	mov	sp, r7
 8007d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d1c:	4770      	bx	lr

08007d1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007d1e:	b480      	push	{r7}
 8007d20:	b083      	sub	sp, #12
 8007d22:	af00      	add	r7, sp, #0
 8007d24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	f003 0301 	and.w	r3, r3, #1
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b085      	sub	sp, #20
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68fa      	ldr	r2, [r7, #12]
 8007d50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d54:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007d58:	f023 0307 	bic.w	r3, r3, #7
 8007d5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d64:	685b      	ldr	r3, [r3, #4]
 8007d66:	68fa      	ldr	r2, [r7, #12]
 8007d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d72:	2300      	movs	r3, #0
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	3714      	adds	r7, #20
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b087      	sub	sp, #28
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	460b      	mov	r3, r1
 8007d8a:	607a      	str	r2, [r7, #4]
 8007d8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	333c      	adds	r3, #60	; 0x3c
 8007d96:	3304      	adds	r3, #4
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	4a26      	ldr	r2, [pc, #152]	; (8007e38 <USB_EP0_OutStart+0xb8>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d90a      	bls.n	8007dba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007db0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007db4:	d101      	bne.n	8007dba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8007db6:	2300      	movs	r3, #0
 8007db8:	e037      	b.n	8007e2a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8007dba:	697b      	ldr	r3, [r7, #20]
 8007dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dc0:	461a      	mov	r2, r3
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dcc:	691b      	ldr	r3, [r3, #16]
 8007dce:	697a      	ldr	r2, [r7, #20]
 8007dd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dd4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007dd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	697a      	ldr	r2, [r7, #20]
 8007de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007de8:	f043 0318 	orr.w	r3, r3, #24
 8007dec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007df4:	691b      	ldr	r3, [r3, #16]
 8007df6:	697a      	ldr	r2, [r7, #20]
 8007df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dfc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8007e00:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8007e02:	7afb      	ldrb	r3, [r7, #11]
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d10f      	bne.n	8007e28 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8007e08:	697b      	ldr	r3, [r7, #20]
 8007e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e0e:	461a      	mov	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e22:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8007e26:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e28:	2300      	movs	r3, #0
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	371c      	adds	r7, #28
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	4f54300a 	.word	0x4f54300a

08007e3c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007e44:	2300      	movs	r3, #0
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	3301      	adds	r3, #1
 8007e4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	4a13      	ldr	r2, [pc, #76]	; (8007ea0 <USB_CoreReset+0x64>)
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d901      	bls.n	8007e5a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e01b      	b.n	8007e92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	691b      	ldr	r3, [r3, #16]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	daf2      	bge.n	8007e48 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007e62:	2300      	movs	r3, #0
 8007e64:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	f043 0201 	orr.w	r2, r3, #1
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3301      	adds	r3, #1
 8007e76:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	4a09      	ldr	r2, [pc, #36]	; (8007ea0 <USB_CoreReset+0x64>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d901      	bls.n	8007e84 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007e80:	2303      	movs	r3, #3
 8007e82:	e006      	b.n	8007e92 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	f003 0301 	and.w	r3, r3, #1
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d0f0      	beq.n	8007e72 <USB_CoreReset+0x36>

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3714      	adds	r7, #20
 8007e96:	46bd      	mov	sp, r7
 8007e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop
 8007ea0:	00030d40 	.word	0x00030d40

08007ea4 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	460b      	mov	r3, r1
 8007eae:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007eb0:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007eb4:	f002 fc94 	bl	800a7e0 <USBD_static_malloc>
 8007eb8:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d109      	bne.n	8007ed4 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	32b0      	adds	r2, #176	; 0xb0
 8007eca:	2100      	movs	r1, #0
 8007ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007ed0:	2302      	movs	r3, #2
 8007ed2:	e0d4      	b.n	800807e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007ed4:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8007ed8:	2100      	movs	r1, #0
 8007eda:	68f8      	ldr	r0, [r7, #12]
 8007edc:	f002 fcee 	bl	800a8bc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	32b0      	adds	r2, #176	; 0xb0
 8007eea:	68f9      	ldr	r1, [r7, #12]
 8007eec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	32b0      	adds	r2, #176	; 0xb0
 8007efa:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	7c1b      	ldrb	r3, [r3, #16]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d138      	bne.n	8007f7e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f0c:	4b5e      	ldr	r3, [pc, #376]	; (8008088 <USBD_CDC_Init+0x1e4>)
 8007f0e:	7819      	ldrb	r1, [r3, #0]
 8007f10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f14:	2202      	movs	r2, #2
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f002 fb3f 	bl	800a59a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f1c:	4b5a      	ldr	r3, [pc, #360]	; (8008088 <USBD_CDC_Init+0x1e4>)
 8007f1e:	781b      	ldrb	r3, [r3, #0]
 8007f20:	f003 020f 	and.w	r2, r3, #15
 8007f24:	6879      	ldr	r1, [r7, #4]
 8007f26:	4613      	mov	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	440b      	add	r3, r1
 8007f30:	3324      	adds	r3, #36	; 0x24
 8007f32:	2201      	movs	r2, #1
 8007f34:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007f36:	4b55      	ldr	r3, [pc, #340]	; (800808c <USBD_CDC_Init+0x1e8>)
 8007f38:	7819      	ldrb	r1, [r3, #0]
 8007f3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f3e:	2202      	movs	r2, #2
 8007f40:	6878      	ldr	r0, [r7, #4]
 8007f42:	f002 fb2a 	bl	800a59a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007f46:	4b51      	ldr	r3, [pc, #324]	; (800808c <USBD_CDC_Init+0x1e8>)
 8007f48:	781b      	ldrb	r3, [r3, #0]
 8007f4a:	f003 020f 	and.w	r2, r3, #15
 8007f4e:	6879      	ldr	r1, [r7, #4]
 8007f50:	4613      	mov	r3, r2
 8007f52:	009b      	lsls	r3, r3, #2
 8007f54:	4413      	add	r3, r2
 8007f56:	009b      	lsls	r3, r3, #2
 8007f58:	440b      	add	r3, r1
 8007f5a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007f5e:	2201      	movs	r2, #1
 8007f60:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007f62:	4b4b      	ldr	r3, [pc, #300]	; (8008090 <USBD_CDC_Init+0x1ec>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	f003 020f 	and.w	r2, r3, #15
 8007f6a:	6879      	ldr	r1, [r7, #4]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	440b      	add	r3, r1
 8007f76:	3326      	adds	r3, #38	; 0x26
 8007f78:	2210      	movs	r2, #16
 8007f7a:	801a      	strh	r2, [r3, #0]
 8007f7c:	e035      	b.n	8007fea <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007f7e:	4b42      	ldr	r3, [pc, #264]	; (8008088 <USBD_CDC_Init+0x1e4>)
 8007f80:	7819      	ldrb	r1, [r3, #0]
 8007f82:	2340      	movs	r3, #64	; 0x40
 8007f84:	2202      	movs	r2, #2
 8007f86:	6878      	ldr	r0, [r7, #4]
 8007f88:	f002 fb07 	bl	800a59a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007f8c:	4b3e      	ldr	r3, [pc, #248]	; (8008088 <USBD_CDC_Init+0x1e4>)
 8007f8e:	781b      	ldrb	r3, [r3, #0]
 8007f90:	f003 020f 	and.w	r2, r3, #15
 8007f94:	6879      	ldr	r1, [r7, #4]
 8007f96:	4613      	mov	r3, r2
 8007f98:	009b      	lsls	r3, r3, #2
 8007f9a:	4413      	add	r3, r2
 8007f9c:	009b      	lsls	r3, r3, #2
 8007f9e:	440b      	add	r3, r1
 8007fa0:	3324      	adds	r3, #36	; 0x24
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8007fa6:	4b39      	ldr	r3, [pc, #228]	; (800808c <USBD_CDC_Init+0x1e8>)
 8007fa8:	7819      	ldrb	r1, [r3, #0]
 8007faa:	2340      	movs	r3, #64	; 0x40
 8007fac:	2202      	movs	r2, #2
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f002 faf3 	bl	800a59a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007fb4:	4b35      	ldr	r3, [pc, #212]	; (800808c <USBD_CDC_Init+0x1e8>)
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	f003 020f 	and.w	r2, r3, #15
 8007fbc:	6879      	ldr	r1, [r7, #4]
 8007fbe:	4613      	mov	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	4413      	add	r3, r2
 8007fc4:	009b      	lsls	r3, r3, #2
 8007fc6:	440b      	add	r3, r1
 8007fc8:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007fcc:	2201      	movs	r2, #1
 8007fce:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007fd0:	4b2f      	ldr	r3, [pc, #188]	; (8008090 <USBD_CDC_Init+0x1ec>)
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	f003 020f 	and.w	r2, r3, #15
 8007fd8:	6879      	ldr	r1, [r7, #4]
 8007fda:	4613      	mov	r3, r2
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	009b      	lsls	r3, r3, #2
 8007fe2:	440b      	add	r3, r1
 8007fe4:	3326      	adds	r3, #38	; 0x26
 8007fe6:	2210      	movs	r2, #16
 8007fe8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8007fea:	4b29      	ldr	r3, [pc, #164]	; (8008090 <USBD_CDC_Init+0x1ec>)
 8007fec:	7819      	ldrb	r1, [r3, #0]
 8007fee:	2308      	movs	r3, #8
 8007ff0:	2203      	movs	r2, #3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f002 fad1 	bl	800a59a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8007ff8:	4b25      	ldr	r3, [pc, #148]	; (8008090 <USBD_CDC_Init+0x1ec>)
 8007ffa:	781b      	ldrb	r3, [r3, #0]
 8007ffc:	f003 020f 	and.w	r2, r3, #15
 8008000:	6879      	ldr	r1, [r7, #4]
 8008002:	4613      	mov	r3, r2
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	4413      	add	r3, r2
 8008008:	009b      	lsls	r3, r3, #2
 800800a:	440b      	add	r3, r1
 800800c:	3324      	adds	r3, #36	; 0x24
 800800e:	2201      	movs	r2, #1
 8008010:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	2200      	movs	r2, #0
 8008016:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	33b0      	adds	r3, #176	; 0xb0
 8008024:	009b      	lsls	r3, r3, #2
 8008026:	4413      	add	r3, r2
 8008028:	685b      	ldr	r3, [r3, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8008044:	2b00      	cmp	r3, #0
 8008046:	d101      	bne.n	800804c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008048:	2302      	movs	r3, #2
 800804a:	e018      	b.n	800807e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	7c1b      	ldrb	r3, [r3, #16]
 8008050:	2b00      	cmp	r3, #0
 8008052:	d10a      	bne.n	800806a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008054:	4b0d      	ldr	r3, [pc, #52]	; (800808c <USBD_CDC_Init+0x1e8>)
 8008056:	7819      	ldrb	r1, [r3, #0]
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800805e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008062:	6878      	ldr	r0, [r7, #4]
 8008064:	f002 fb88 	bl	800a778 <USBD_LL_PrepareReceive>
 8008068:	e008      	b.n	800807c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800806a:	4b08      	ldr	r3, [pc, #32]	; (800808c <USBD_CDC_Init+0x1e8>)
 800806c:	7819      	ldrb	r1, [r3, #0]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008074:	2340      	movs	r3, #64	; 0x40
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f002 fb7e 	bl	800a778 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	200000d3 	.word	0x200000d3
 800808c:	200000d4 	.word	0x200000d4
 8008090:	200000d5 	.word	0x200000d5

08008094 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	460b      	mov	r3, r1
 800809e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80080a0:	4b3a      	ldr	r3, [pc, #232]	; (800818c <USBD_CDC_DeInit+0xf8>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	4619      	mov	r1, r3
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f002 fa9d 	bl	800a5e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80080ac:	4b37      	ldr	r3, [pc, #220]	; (800818c <USBD_CDC_DeInit+0xf8>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	f003 020f 	and.w	r2, r3, #15
 80080b4:	6879      	ldr	r1, [r7, #4]
 80080b6:	4613      	mov	r3, r2
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	4413      	add	r3, r2
 80080bc:	009b      	lsls	r3, r3, #2
 80080be:	440b      	add	r3, r1
 80080c0:	3324      	adds	r3, #36	; 0x24
 80080c2:	2200      	movs	r2, #0
 80080c4:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80080c6:	4b32      	ldr	r3, [pc, #200]	; (8008190 <USBD_CDC_DeInit+0xfc>)
 80080c8:	781b      	ldrb	r3, [r3, #0]
 80080ca:	4619      	mov	r1, r3
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f002 fa8a 	bl	800a5e6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80080d2:	4b2f      	ldr	r3, [pc, #188]	; (8008190 <USBD_CDC_DeInit+0xfc>)
 80080d4:	781b      	ldrb	r3, [r3, #0]
 80080d6:	f003 020f 	and.w	r2, r3, #15
 80080da:	6879      	ldr	r1, [r7, #4]
 80080dc:	4613      	mov	r3, r2
 80080de:	009b      	lsls	r3, r3, #2
 80080e0:	4413      	add	r3, r2
 80080e2:	009b      	lsls	r3, r3, #2
 80080e4:	440b      	add	r3, r1
 80080e6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80080ea:	2200      	movs	r2, #0
 80080ec:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80080ee:	4b29      	ldr	r3, [pc, #164]	; (8008194 <USBD_CDC_DeInit+0x100>)
 80080f0:	781b      	ldrb	r3, [r3, #0]
 80080f2:	4619      	mov	r1, r3
 80080f4:	6878      	ldr	r0, [r7, #4]
 80080f6:	f002 fa76 	bl	800a5e6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80080fa:	4b26      	ldr	r3, [pc, #152]	; (8008194 <USBD_CDC_DeInit+0x100>)
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	f003 020f 	and.w	r2, r3, #15
 8008102:	6879      	ldr	r1, [r7, #4]
 8008104:	4613      	mov	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	009b      	lsls	r3, r3, #2
 800810c:	440b      	add	r3, r1
 800810e:	3324      	adds	r3, #36	; 0x24
 8008110:	2200      	movs	r2, #0
 8008112:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008114:	4b1f      	ldr	r3, [pc, #124]	; (8008194 <USBD_CDC_DeInit+0x100>)
 8008116:	781b      	ldrb	r3, [r3, #0]
 8008118:	f003 020f 	and.w	r2, r3, #15
 800811c:	6879      	ldr	r1, [r7, #4]
 800811e:	4613      	mov	r3, r2
 8008120:	009b      	lsls	r3, r3, #2
 8008122:	4413      	add	r3, r2
 8008124:	009b      	lsls	r3, r3, #2
 8008126:	440b      	add	r3, r1
 8008128:	3326      	adds	r3, #38	; 0x26
 800812a:	2200      	movs	r2, #0
 800812c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	32b0      	adds	r2, #176	; 0xb0
 8008138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d01f      	beq.n	8008180 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008146:	687a      	ldr	r2, [r7, #4]
 8008148:	33b0      	adds	r3, #176	; 0xb0
 800814a:	009b      	lsls	r3, r3, #2
 800814c:	4413      	add	r3, r2
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	685b      	ldr	r3, [r3, #4]
 8008152:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	32b0      	adds	r2, #176	; 0xb0
 800815e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008162:	4618      	mov	r0, r3
 8008164:	f002 fb4a 	bl	800a7fc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	32b0      	adds	r2, #176	; 0xb0
 8008172:	2100      	movs	r1, #0
 8008174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2200      	movs	r2, #0
 800817c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3708      	adds	r7, #8
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	200000d3 	.word	0x200000d3
 8008190:	200000d4 	.word	0x200000d4
 8008194:	200000d5 	.word	0x200000d5

08008198 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b086      	sub	sp, #24
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
 80081a0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	32b0      	adds	r2, #176	; 0xb0
 80081ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80081b0:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80081b2:	2300      	movs	r3, #0
 80081b4:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d101      	bne.n	80081c8 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80081c4:	2303      	movs	r3, #3
 80081c6:	e0bf      	b.n	8008348 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d050      	beq.n	8008276 <USBD_CDC_Setup+0xde>
 80081d4:	2b20      	cmp	r3, #32
 80081d6:	f040 80af 	bne.w	8008338 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	88db      	ldrh	r3, [r3, #6]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d03a      	beq.n	8008258 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80081e2:	683b      	ldr	r3, [r7, #0]
 80081e4:	781b      	ldrb	r3, [r3, #0]
 80081e6:	b25b      	sxtb	r3, r3
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	da1b      	bge.n	8008224 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80081f2:	687a      	ldr	r2, [r7, #4]
 80081f4:	33b0      	adds	r3, #176	; 0xb0
 80081f6:	009b      	lsls	r3, r3, #2
 80081f8:	4413      	add	r3, r2
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	683a      	ldr	r2, [r7, #0]
 8008200:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008202:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008204:	683a      	ldr	r2, [r7, #0]
 8008206:	88d2      	ldrh	r2, [r2, #6]
 8008208:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	88db      	ldrh	r3, [r3, #6]
 800820e:	2b07      	cmp	r3, #7
 8008210:	bf28      	it	cs
 8008212:	2307      	movcs	r3, #7
 8008214:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	89fa      	ldrh	r2, [r7, #14]
 800821a:	4619      	mov	r1, r3
 800821c:	6878      	ldr	r0, [r7, #4]
 800821e:	f001 fd89 	bl	8009d34 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008222:	e090      	b.n	8008346 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	785a      	ldrb	r2, [r3, #1]
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	88db      	ldrh	r3, [r3, #6]
 8008232:	2b3f      	cmp	r3, #63	; 0x3f
 8008234:	d803      	bhi.n	800823e <USBD_CDC_Setup+0xa6>
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	88db      	ldrh	r3, [r3, #6]
 800823a:	b2da      	uxtb	r2, r3
 800823c:	e000      	b.n	8008240 <USBD_CDC_Setup+0xa8>
 800823e:	2240      	movs	r2, #64	; 0x40
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008246:	6939      	ldr	r1, [r7, #16]
 8008248:	693b      	ldr	r3, [r7, #16]
 800824a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800824e:	461a      	mov	r2, r3
 8008250:	6878      	ldr	r0, [r7, #4]
 8008252:	f001 fd9b 	bl	8009d8c <USBD_CtlPrepareRx>
      break;
 8008256:	e076      	b.n	8008346 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800825e:	687a      	ldr	r2, [r7, #4]
 8008260:	33b0      	adds	r3, #176	; 0xb0
 8008262:	009b      	lsls	r3, r3, #2
 8008264:	4413      	add	r3, r2
 8008266:	685b      	ldr	r3, [r3, #4]
 8008268:	689b      	ldr	r3, [r3, #8]
 800826a:	683a      	ldr	r2, [r7, #0]
 800826c:	7850      	ldrb	r0, [r2, #1]
 800826e:	2200      	movs	r2, #0
 8008270:	6839      	ldr	r1, [r7, #0]
 8008272:	4798      	blx	r3
      break;
 8008274:	e067      	b.n	8008346 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	785b      	ldrb	r3, [r3, #1]
 800827a:	2b0b      	cmp	r3, #11
 800827c:	d851      	bhi.n	8008322 <USBD_CDC_Setup+0x18a>
 800827e:	a201      	add	r2, pc, #4	; (adr r2, 8008284 <USBD_CDC_Setup+0xec>)
 8008280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008284:	080082b5 	.word	0x080082b5
 8008288:	08008331 	.word	0x08008331
 800828c:	08008323 	.word	0x08008323
 8008290:	08008323 	.word	0x08008323
 8008294:	08008323 	.word	0x08008323
 8008298:	08008323 	.word	0x08008323
 800829c:	08008323 	.word	0x08008323
 80082a0:	08008323 	.word	0x08008323
 80082a4:	08008323 	.word	0x08008323
 80082a8:	08008323 	.word	0x08008323
 80082ac:	080082df 	.word	0x080082df
 80082b0:	08008309 	.word	0x08008309
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	2b03      	cmp	r3, #3
 80082be:	d107      	bne.n	80082d0 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80082c0:	f107 030a 	add.w	r3, r7, #10
 80082c4:	2202      	movs	r2, #2
 80082c6:	4619      	mov	r1, r3
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f001 fd33 	bl	8009d34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082ce:	e032      	b.n	8008336 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80082d0:	6839      	ldr	r1, [r7, #0]
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f001 fcbd 	bl	8009c52 <USBD_CtlError>
            ret = USBD_FAIL;
 80082d8:	2303      	movs	r3, #3
 80082da:	75fb      	strb	r3, [r7, #23]
          break;
 80082dc:	e02b      	b.n	8008336 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082e4:	b2db      	uxtb	r3, r3
 80082e6:	2b03      	cmp	r3, #3
 80082e8:	d107      	bne.n	80082fa <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80082ea:	f107 030d 	add.w	r3, r7, #13
 80082ee:	2201      	movs	r2, #1
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 fd1e 	bl	8009d34 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082f8:	e01d      	b.n	8008336 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80082fa:	6839      	ldr	r1, [r7, #0]
 80082fc:	6878      	ldr	r0, [r7, #4]
 80082fe:	f001 fca8 	bl	8009c52 <USBD_CtlError>
            ret = USBD_FAIL;
 8008302:	2303      	movs	r3, #3
 8008304:	75fb      	strb	r3, [r7, #23]
          break;
 8008306:	e016      	b.n	8008336 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800830e:	b2db      	uxtb	r3, r3
 8008310:	2b03      	cmp	r3, #3
 8008312:	d00f      	beq.n	8008334 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008314:	6839      	ldr	r1, [r7, #0]
 8008316:	6878      	ldr	r0, [r7, #4]
 8008318:	f001 fc9b 	bl	8009c52 <USBD_CtlError>
            ret = USBD_FAIL;
 800831c:	2303      	movs	r3, #3
 800831e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008320:	e008      	b.n	8008334 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008322:	6839      	ldr	r1, [r7, #0]
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f001 fc94 	bl	8009c52 <USBD_CtlError>
          ret = USBD_FAIL;
 800832a:	2303      	movs	r3, #3
 800832c:	75fb      	strb	r3, [r7, #23]
          break;
 800832e:	e002      	b.n	8008336 <USBD_CDC_Setup+0x19e>
          break;
 8008330:	bf00      	nop
 8008332:	e008      	b.n	8008346 <USBD_CDC_Setup+0x1ae>
          break;
 8008334:	bf00      	nop
      }
      break;
 8008336:	e006      	b.n	8008346 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f001 fc89 	bl	8009c52 <USBD_CtlError>
      ret = USBD_FAIL;
 8008340:	2303      	movs	r3, #3
 8008342:	75fb      	strb	r3, [r7, #23]
      break;
 8008344:	bf00      	nop
  }

  return (uint8_t)ret;
 8008346:	7dfb      	ldrb	r3, [r7, #23]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3718      	adds	r7, #24
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b084      	sub	sp, #16
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
 8008358:	460b      	mov	r3, r1
 800835a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008362:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	32b0      	adds	r2, #176	; 0xb0
 800836e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d101      	bne.n	800837a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008376:	2303      	movs	r3, #3
 8008378:	e065      	b.n	8008446 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	32b0      	adds	r2, #176	; 0xb0
 8008384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008388:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800838a:	78fb      	ldrb	r3, [r7, #3]
 800838c:	f003 020f 	and.w	r2, r3, #15
 8008390:	6879      	ldr	r1, [r7, #4]
 8008392:	4613      	mov	r3, r2
 8008394:	009b      	lsls	r3, r3, #2
 8008396:	4413      	add	r3, r2
 8008398:	009b      	lsls	r3, r3, #2
 800839a:	440b      	add	r3, r1
 800839c:	3318      	adds	r3, #24
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d02f      	beq.n	8008404 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80083a4:	78fb      	ldrb	r3, [r7, #3]
 80083a6:	f003 020f 	and.w	r2, r3, #15
 80083aa:	6879      	ldr	r1, [r7, #4]
 80083ac:	4613      	mov	r3, r2
 80083ae:	009b      	lsls	r3, r3, #2
 80083b0:	4413      	add	r3, r2
 80083b2:	009b      	lsls	r3, r3, #2
 80083b4:	440b      	add	r3, r1
 80083b6:	3318      	adds	r3, #24
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	78fb      	ldrb	r3, [r7, #3]
 80083bc:	f003 010f 	and.w	r1, r3, #15
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	460b      	mov	r3, r1
 80083c4:	00db      	lsls	r3, r3, #3
 80083c6:	440b      	add	r3, r1
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4403      	add	r3, r0
 80083cc:	3348      	adds	r3, #72	; 0x48
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	fbb2 f1f3 	udiv	r1, r2, r3
 80083d4:	fb01 f303 	mul.w	r3, r1, r3
 80083d8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d112      	bne.n	8008404 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80083de:	78fb      	ldrb	r3, [r7, #3]
 80083e0:	f003 020f 	and.w	r2, r3, #15
 80083e4:	6879      	ldr	r1, [r7, #4]
 80083e6:	4613      	mov	r3, r2
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	4413      	add	r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	440b      	add	r3, r1
 80083f0:	3318      	adds	r3, #24
 80083f2:	2200      	movs	r2, #0
 80083f4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80083f6:	78f9      	ldrb	r1, [r7, #3]
 80083f8:	2300      	movs	r3, #0
 80083fa:	2200      	movs	r2, #0
 80083fc:	6878      	ldr	r0, [r7, #4]
 80083fe:	f002 f99a 	bl	800a736 <USBD_LL_Transmit>
 8008402:	e01f      	b.n	8008444 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	2200      	movs	r2, #0
 8008408:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008412:	687a      	ldr	r2, [r7, #4]
 8008414:	33b0      	adds	r3, #176	; 0xb0
 8008416:	009b      	lsls	r3, r3, #2
 8008418:	4413      	add	r3, r2
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	691b      	ldr	r3, [r3, #16]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d010      	beq.n	8008444 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008428:	687a      	ldr	r2, [r7, #4]
 800842a:	33b0      	adds	r3, #176	; 0xb0
 800842c:	009b      	lsls	r3, r3, #2
 800842e:	4413      	add	r3, r2
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	691b      	ldr	r3, [r3, #16]
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800843a:	68ba      	ldr	r2, [r7, #8]
 800843c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008440:	78fa      	ldrb	r2, [r7, #3]
 8008442:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008444:	2300      	movs	r3, #0
}
 8008446:	4618      	mov	r0, r3
 8008448:	3710      	adds	r7, #16
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}

0800844e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800844e:	b580      	push	{r7, lr}
 8008450:	b084      	sub	sp, #16
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	460b      	mov	r3, r1
 8008458:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	32b0      	adds	r2, #176	; 0xb0
 8008464:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008468:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	32b0      	adds	r2, #176	; 0xb0
 8008474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d101      	bne.n	8008480 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800847c:	2303      	movs	r3, #3
 800847e:	e01a      	b.n	80084b6 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008480:	78fb      	ldrb	r3, [r7, #3]
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f002 f998 	bl	800a7ba <USBD_LL_GetRxDataSize>
 800848a:	4602      	mov	r2, r0
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	33b0      	adds	r3, #176	; 0xb0
 800849c:	009b      	lsls	r3, r3, #2
 800849e:	4413      	add	r3, r2
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	68db      	ldr	r3, [r3, #12]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80084b0:	4611      	mov	r1, r2
 80084b2:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3710      	adds	r7, #16
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b084      	sub	sp, #16
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	32b0      	adds	r2, #176	; 0xb0
 80084d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084d4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d101      	bne.n	80084e0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80084dc:	2303      	movs	r3, #3
 80084de:	e025      	b.n	800852c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80084e6:	687a      	ldr	r2, [r7, #4]
 80084e8:	33b0      	adds	r3, #176	; 0xb0
 80084ea:	009b      	lsls	r3, r3, #2
 80084ec:	4413      	add	r3, r2
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d01a      	beq.n	800852a <USBD_CDC_EP0_RxReady+0x6c>
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80084fa:	2bff      	cmp	r3, #255	; 0xff
 80084fc:	d015      	beq.n	800852a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8008504:	687a      	ldr	r2, [r7, #4]
 8008506:	33b0      	adds	r3, #176	; 0xb0
 8008508:	009b      	lsls	r3, r3, #2
 800850a:	4413      	add	r3, r2
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	689b      	ldr	r3, [r3, #8]
 8008510:	68fa      	ldr	r2, [r7, #12]
 8008512:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8008516:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800851e:	b292      	uxth	r2, r2
 8008520:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	22ff      	movs	r2, #255	; 0xff
 8008526:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800852a:	2300      	movs	r3, #0
}
 800852c:	4618      	mov	r0, r3
 800852e:	3710      	adds	r7, #16
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}

08008534 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b086      	sub	sp, #24
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800853c:	2182      	movs	r1, #130	; 0x82
 800853e:	4818      	ldr	r0, [pc, #96]	; (80085a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008540:	f000 fd4f 	bl	8008fe2 <USBD_GetEpDesc>
 8008544:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008546:	2101      	movs	r1, #1
 8008548:	4815      	ldr	r0, [pc, #84]	; (80085a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800854a:	f000 fd4a 	bl	8008fe2 <USBD_GetEpDesc>
 800854e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008550:	2181      	movs	r1, #129	; 0x81
 8008552:	4813      	ldr	r0, [pc, #76]	; (80085a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008554:	f000 fd45 	bl	8008fe2 <USBD_GetEpDesc>
 8008558:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d002      	beq.n	8008566 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008560:	697b      	ldr	r3, [r7, #20]
 8008562:	2210      	movs	r2, #16
 8008564:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008566:	693b      	ldr	r3, [r7, #16]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d006      	beq.n	800857a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800856c:	693b      	ldr	r3, [r7, #16]
 800856e:	2200      	movs	r2, #0
 8008570:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008574:	711a      	strb	r2, [r3, #4]
 8008576:	2200      	movs	r2, #0
 8008578:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2b00      	cmp	r3, #0
 800857e:	d006      	beq.n	800858e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008588:	711a      	strb	r2, [r3, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2243      	movs	r2, #67	; 0x43
 8008592:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008594:	4b02      	ldr	r3, [pc, #8]	; (80085a0 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008596:	4618      	mov	r0, r3
 8008598:	3718      	adds	r7, #24
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	20000090 	.word	0x20000090

080085a4 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b086      	sub	sp, #24
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80085ac:	2182      	movs	r1, #130	; 0x82
 80085ae:	4818      	ldr	r0, [pc, #96]	; (8008610 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80085b0:	f000 fd17 	bl	8008fe2 <USBD_GetEpDesc>
 80085b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80085b6:	2101      	movs	r1, #1
 80085b8:	4815      	ldr	r0, [pc, #84]	; (8008610 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80085ba:	f000 fd12 	bl	8008fe2 <USBD_GetEpDesc>
 80085be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80085c0:	2181      	movs	r1, #129	; 0x81
 80085c2:	4813      	ldr	r0, [pc, #76]	; (8008610 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80085c4:	f000 fd0d 	bl	8008fe2 <USBD_GetEpDesc>
 80085c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80085ca:	697b      	ldr	r3, [r7, #20]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d002      	beq.n	80085d6 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80085d0:	697b      	ldr	r3, [r7, #20]
 80085d2:	2210      	movs	r2, #16
 80085d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d006      	beq.n	80085ea <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80085dc:	693b      	ldr	r3, [r7, #16]
 80085de:	2200      	movs	r2, #0
 80085e0:	711a      	strb	r2, [r3, #4]
 80085e2:	2200      	movs	r2, #0
 80085e4:	f042 0202 	orr.w	r2, r2, #2
 80085e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d006      	beq.n	80085fe <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	711a      	strb	r2, [r3, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f042 0202 	orr.w	r2, r2, #2
 80085fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2243      	movs	r2, #67	; 0x43
 8008602:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008604:	4b02      	ldr	r3, [pc, #8]	; (8008610 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008606:	4618      	mov	r0, r3
 8008608:	3718      	adds	r7, #24
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}
 800860e:	bf00      	nop
 8008610:	20000090 	.word	0x20000090

08008614 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800861c:	2182      	movs	r1, #130	; 0x82
 800861e:	4818      	ldr	r0, [pc, #96]	; (8008680 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008620:	f000 fcdf 	bl	8008fe2 <USBD_GetEpDesc>
 8008624:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008626:	2101      	movs	r1, #1
 8008628:	4815      	ldr	r0, [pc, #84]	; (8008680 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800862a:	f000 fcda 	bl	8008fe2 <USBD_GetEpDesc>
 800862e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008630:	2181      	movs	r1, #129	; 0x81
 8008632:	4813      	ldr	r0, [pc, #76]	; (8008680 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008634:	f000 fcd5 	bl	8008fe2 <USBD_GetEpDesc>
 8008638:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d002      	beq.n	8008646 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	2210      	movs	r2, #16
 8008644:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d006      	beq.n	800865a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800864c:	693b      	ldr	r3, [r7, #16]
 800864e:	2200      	movs	r2, #0
 8008650:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008654:	711a      	strb	r2, [r3, #4]
 8008656:	2200      	movs	r2, #0
 8008658:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d006      	beq.n	800866e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	2200      	movs	r2, #0
 8008664:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008668:	711a      	strb	r2, [r3, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2243      	movs	r2, #67	; 0x43
 8008672:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008674:	4b02      	ldr	r3, [pc, #8]	; (8008680 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008676:	4618      	mov	r0, r3
 8008678:	3718      	adds	r7, #24
 800867a:	46bd      	mov	sp, r7
 800867c:	bd80      	pop	{r7, pc}
 800867e:	bf00      	nop
 8008680:	20000090 	.word	0x20000090

08008684 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008684:	b480      	push	{r7}
 8008686:	b083      	sub	sp, #12
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	220a      	movs	r2, #10
 8008690:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008692:	4b03      	ldr	r3, [pc, #12]	; (80086a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008694:	4618      	mov	r0, r3
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr
 80086a0:	2000004c 	.word	0x2000004c

080086a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80086a4:	b480      	push	{r7}
 80086a6:	b083      	sub	sp, #12
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
 80086ac:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80086ae:	683b      	ldr	r3, [r7, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d101      	bne.n	80086b8 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80086b4:	2303      	movs	r3, #3
 80086b6:	e009      	b.n	80086cc <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	33b0      	adds	r3, #176	; 0xb0
 80086c2:	009b      	lsls	r3, r3, #2
 80086c4:	4413      	add	r3, r2
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	370c      	adds	r7, #12
 80086d0:	46bd      	mov	sp, r7
 80086d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d6:	4770      	bx	lr

080086d8 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80086d8:	b480      	push	{r7}
 80086da:	b087      	sub	sp, #28
 80086dc:	af00      	add	r7, sp, #0
 80086de:	60f8      	str	r0, [r7, #12]
 80086e0:	60b9      	str	r1, [r7, #8]
 80086e2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	32b0      	adds	r2, #176	; 0xb0
 80086ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086f2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d101      	bne.n	80086fe <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80086fa:	2303      	movs	r3, #3
 80086fc:	e008      	b.n	8008710 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	68ba      	ldr	r2, [r7, #8]
 8008702:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	687a      	ldr	r2, [r7, #4]
 800870a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	371c      	adds	r7, #28
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr

0800871c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
 8008724:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	32b0      	adds	r2, #176	; 0xb0
 8008730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008734:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008736:	68fb      	ldr	r3, [r7, #12]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d101      	bne.n	8008740 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800873c:	2303      	movs	r3, #3
 800873e:	e004      	b.n	800874a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	683a      	ldr	r2, [r7, #0]
 8008744:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3714      	adds	r7, #20
 800874e:	46bd      	mov	sp, r7
 8008750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008754:	4770      	bx	lr
	...

08008758 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b084      	sub	sp, #16
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	32b0      	adds	r2, #176	; 0xb0
 800876a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800876e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008770:	2301      	movs	r3, #1
 8008772:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	32b0      	adds	r2, #176	; 0xb0
 800877e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d101      	bne.n	800878a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008786:	2303      	movs	r3, #3
 8008788:	e025      	b.n	80087d6 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800878a:	68bb      	ldr	r3, [r7, #8]
 800878c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008790:	2b00      	cmp	r3, #0
 8008792:	d11f      	bne.n	80087d4 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	2201      	movs	r2, #1
 8008798:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800879c:	4b10      	ldr	r3, [pc, #64]	; (80087e0 <USBD_CDC_TransmitPacket+0x88>)
 800879e:	781b      	ldrb	r3, [r3, #0]
 80087a0:	f003 020f 	and.w	r2, r3, #15
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	4613      	mov	r3, r2
 80087ae:	009b      	lsls	r3, r3, #2
 80087b0:	4413      	add	r3, r2
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4403      	add	r3, r0
 80087b6:	3318      	adds	r3, #24
 80087b8:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 80087ba:	4b09      	ldr	r3, [pc, #36]	; (80087e0 <USBD_CDC_TransmitPacket+0x88>)
 80087bc:	7819      	ldrb	r1, [r3, #0]
 80087be:	68bb      	ldr	r3, [r7, #8]
 80087c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80087c4:	68bb      	ldr	r3, [r7, #8]
 80087c6:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80087ca:	6878      	ldr	r0, [r7, #4]
 80087cc:	f001 ffb3 	bl	800a736 <USBD_LL_Transmit>

    ret = USBD_OK;
 80087d0:	2300      	movs	r3, #0
 80087d2:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80087d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80087d6:	4618      	mov	r0, r3
 80087d8:	3710      	adds	r7, #16
 80087da:	46bd      	mov	sp, r7
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	bf00      	nop
 80087e0:	200000d3 	.word	0x200000d3

080087e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80087e4:	b580      	push	{r7, lr}
 80087e6:	b084      	sub	sp, #16
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	32b0      	adds	r2, #176	; 0xb0
 80087f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087fa:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	32b0      	adds	r2, #176	; 0xb0
 8008806:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800880e:	2303      	movs	r3, #3
 8008810:	e018      	b.n	8008844 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	7c1b      	ldrb	r3, [r3, #16]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d10a      	bne.n	8008830 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800881a:	4b0c      	ldr	r3, [pc, #48]	; (800884c <USBD_CDC_ReceivePacket+0x68>)
 800881c:	7819      	ldrb	r1, [r3, #0]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008824:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008828:	6878      	ldr	r0, [r7, #4]
 800882a:	f001 ffa5 	bl	800a778 <USBD_LL_PrepareReceive>
 800882e:	e008      	b.n	8008842 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008830:	4b06      	ldr	r3, [pc, #24]	; (800884c <USBD_CDC_ReceivePacket+0x68>)
 8008832:	7819      	ldrb	r1, [r3, #0]
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800883a:	2340      	movs	r3, #64	; 0x40
 800883c:	6878      	ldr	r0, [r7, #4]
 800883e:	f001 ff9b 	bl	800a778 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008842:	2300      	movs	r3, #0
}
 8008844:	4618      	mov	r0, r3
 8008846:	3710      	adds	r7, #16
 8008848:	46bd      	mov	sp, r7
 800884a:	bd80      	pop	{r7, pc}
 800884c:	200000d4 	.word	0x200000d4

08008850 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008850:	b580      	push	{r7, lr}
 8008852:	b086      	sub	sp, #24
 8008854:	af00      	add	r7, sp, #0
 8008856:	60f8      	str	r0, [r7, #12]
 8008858:	60b9      	str	r1, [r7, #8]
 800885a:	4613      	mov	r3, r2
 800885c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	2b00      	cmp	r3, #0
 8008862:	d101      	bne.n	8008868 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008864:	2303      	movs	r3, #3
 8008866:	e01f      	b.n	80088a8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2200      	movs	r2, #0
 800886c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	2200      	movs	r2, #0
 800887c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d003      	beq.n	800888e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	68ba      	ldr	r2, [r7, #8]
 800888a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	79fa      	ldrb	r2, [r7, #7]
 800889a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800889c:	68f8      	ldr	r0, [r7, #12]
 800889e:	f001 fe15 	bl	800a4cc <USBD_LL_Init>
 80088a2:	4603      	mov	r3, r0
 80088a4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80088a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3718      	adds	r7, #24
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80088ba:	2300      	movs	r3, #0
 80088bc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d101      	bne.n	80088c8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e025      	b.n	8008914 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	32ae      	adds	r2, #174	; 0xae
 80088da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d00f      	beq.n	8008904 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	32ae      	adds	r2, #174	; 0xae
 80088ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80088f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088f4:	f107 020e 	add.w	r2, r7, #14
 80088f8:	4610      	mov	r0, r2
 80088fa:	4798      	blx	r3
 80088fc:	4602      	mov	r2, r0
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800890a:	1c5a      	adds	r2, r3, #1
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	3710      	adds	r7, #16
 8008918:	46bd      	mov	sp, r7
 800891a:	bd80      	pop	{r7, pc}

0800891c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008924:	6878      	ldr	r0, [r7, #4]
 8008926:	f001 fe1d 	bl	800a564 <USBD_LL_Start>
 800892a:	4603      	mov	r3, r0
}
 800892c:	4618      	mov	r0, r3
 800892e:	3708      	adds	r7, #8
 8008930:	46bd      	mov	sp, r7
 8008932:	bd80      	pop	{r7, pc}

08008934 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008934:	b480      	push	{r7}
 8008936:	b083      	sub	sp, #12
 8008938:	af00      	add	r7, sp, #0
 800893a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800893c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800893e:	4618      	mov	r0, r3
 8008940:	370c      	adds	r7, #12
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr

0800894a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800894a:	b580      	push	{r7, lr}
 800894c:	b084      	sub	sp, #16
 800894e:	af00      	add	r7, sp, #0
 8008950:	6078      	str	r0, [r7, #4]
 8008952:	460b      	mov	r3, r1
 8008954:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008956:	2300      	movs	r3, #0
 8008958:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008960:	2b00      	cmp	r3, #0
 8008962:	d009      	beq.n	8008978 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	78fa      	ldrb	r2, [r7, #3]
 800896e:	4611      	mov	r1, r2
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	4798      	blx	r3
 8008974:	4603      	mov	r3, r0
 8008976:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008978:	7bfb      	ldrb	r3, [r7, #15]
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b084      	sub	sp, #16
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	460b      	mov	r3, r1
 800898c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800898e:	2300      	movs	r3, #0
 8008990:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	78fa      	ldrb	r2, [r7, #3]
 800899c:	4611      	mov	r1, r2
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	4798      	blx	r3
 80089a2:	4603      	mov	r3, r0
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d001      	beq.n	80089ac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80089a8:	2303      	movs	r3, #3
 80089aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80089ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3710      	adds	r7, #16
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}

080089b6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80089b6:	b580      	push	{r7, lr}
 80089b8:	b084      	sub	sp, #16
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	6078      	str	r0, [r7, #4]
 80089be:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80089c6:	6839      	ldr	r1, [r7, #0]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f001 f908 	bl	8009bde <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2201      	movs	r2, #1
 80089d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80089dc:	461a      	mov	r2, r3
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80089ea:	f003 031f 	and.w	r3, r3, #31
 80089ee:	2b02      	cmp	r3, #2
 80089f0:	d01a      	beq.n	8008a28 <USBD_LL_SetupStage+0x72>
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d822      	bhi.n	8008a3c <USBD_LL_SetupStage+0x86>
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d002      	beq.n	8008a00 <USBD_LL_SetupStage+0x4a>
 80089fa:	2b01      	cmp	r3, #1
 80089fc:	d00a      	beq.n	8008a14 <USBD_LL_SetupStage+0x5e>
 80089fe:	e01d      	b.n	8008a3c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a06:	4619      	mov	r1, r3
 8008a08:	6878      	ldr	r0, [r7, #4]
 8008a0a:	f000 fb5f 	bl	80090cc <USBD_StdDevReq>
 8008a0e:	4603      	mov	r3, r0
 8008a10:	73fb      	strb	r3, [r7, #15]
      break;
 8008a12:	e020      	b.n	8008a56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f000 fbc7 	bl	80091b0 <USBD_StdItfReq>
 8008a22:	4603      	mov	r3, r0
 8008a24:	73fb      	strb	r3, [r7, #15]
      break;
 8008a26:	e016      	b.n	8008a56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008a2e:	4619      	mov	r1, r3
 8008a30:	6878      	ldr	r0, [r7, #4]
 8008a32:	f000 fc29 	bl	8009288 <USBD_StdEPReq>
 8008a36:	4603      	mov	r3, r0
 8008a38:	73fb      	strb	r3, [r7, #15]
      break;
 8008a3a:	e00c      	b.n	8008a56 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008a42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008a46:	b2db      	uxtb	r3, r3
 8008a48:	4619      	mov	r1, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f001 fdea 	bl	800a624 <USBD_LL_StallEP>
 8008a50:	4603      	mov	r3, r0
 8008a52:	73fb      	strb	r3, [r7, #15]
      break;
 8008a54:	bf00      	nop
  }

  return ret;
 8008a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b086      	sub	sp, #24
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	460b      	mov	r3, r1
 8008a6a:	607a      	str	r2, [r7, #4]
 8008a6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008a72:	7afb      	ldrb	r3, [r7, #11]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d16e      	bne.n	8008b56 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008a7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008a86:	2b03      	cmp	r3, #3
 8008a88:	f040 8098 	bne.w	8008bbc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	689a      	ldr	r2, [r3, #8]
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	68db      	ldr	r3, [r3, #12]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d913      	bls.n	8008ac0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008a98:	693b      	ldr	r3, [r7, #16]
 8008a9a:	689a      	ldr	r2, [r3, #8]
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	68db      	ldr	r3, [r3, #12]
 8008aa0:	1ad2      	subs	r2, r2, r3
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	68da      	ldr	r2, [r3, #12]
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	689b      	ldr	r3, [r3, #8]
 8008aae:	4293      	cmp	r3, r2
 8008ab0:	bf28      	it	cs
 8008ab2:	4613      	movcs	r3, r2
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	68f8      	ldr	r0, [r7, #12]
 8008aba:	f001 f984 	bl	8009dc6 <USBD_CtlContinueRx>
 8008abe:	e07d      	b.n	8008bbc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008ac6:	f003 031f 	and.w	r3, r3, #31
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d014      	beq.n	8008af8 <USBD_LL_DataOutStage+0x98>
 8008ace:	2b02      	cmp	r3, #2
 8008ad0:	d81d      	bhi.n	8008b0e <USBD_LL_DataOutStage+0xae>
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d002      	beq.n	8008adc <USBD_LL_DataOutStage+0x7c>
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d003      	beq.n	8008ae2 <USBD_LL_DataOutStage+0x82>
 8008ada:	e018      	b.n	8008b0e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008adc:	2300      	movs	r3, #0
 8008ade:	75bb      	strb	r3, [r7, #22]
            break;
 8008ae0:	e018      	b.n	8008b14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008ae8:	b2db      	uxtb	r3, r3
 8008aea:	4619      	mov	r1, r3
 8008aec:	68f8      	ldr	r0, [r7, #12]
 8008aee:	f000 fa5e 	bl	8008fae <USBD_CoreFindIF>
 8008af2:	4603      	mov	r3, r0
 8008af4:	75bb      	strb	r3, [r7, #22]
            break;
 8008af6:	e00d      	b.n	8008b14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008afe:	b2db      	uxtb	r3, r3
 8008b00:	4619      	mov	r1, r3
 8008b02:	68f8      	ldr	r0, [r7, #12]
 8008b04:	f000 fa60 	bl	8008fc8 <USBD_CoreFindEP>
 8008b08:	4603      	mov	r3, r0
 8008b0a:	75bb      	strb	r3, [r7, #22]
            break;
 8008b0c:	e002      	b.n	8008b14 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	75bb      	strb	r3, [r7, #22]
            break;
 8008b12:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008b14:	7dbb      	ldrb	r3, [r7, #22]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d119      	bne.n	8008b4e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b20:	b2db      	uxtb	r3, r3
 8008b22:	2b03      	cmp	r3, #3
 8008b24:	d113      	bne.n	8008b4e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008b26:	7dba      	ldrb	r2, [r7, #22]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	32ae      	adds	r2, #174	; 0xae
 8008b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d00b      	beq.n	8008b4e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008b36:	7dba      	ldrb	r2, [r7, #22]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008b3e:	7dba      	ldrb	r2, [r7, #22]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	32ae      	adds	r2, #174	; 0xae
 8008b44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b48:	691b      	ldr	r3, [r3, #16]
 8008b4a:	68f8      	ldr	r0, [r7, #12]
 8008b4c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008b4e:	68f8      	ldr	r0, [r7, #12]
 8008b50:	f001 f94a 	bl	8009de8 <USBD_CtlSendStatus>
 8008b54:	e032      	b.n	8008bbc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008b56:	7afb      	ldrb	r3, [r7, #11]
 8008b58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	4619      	mov	r1, r3
 8008b60:	68f8      	ldr	r0, [r7, #12]
 8008b62:	f000 fa31 	bl	8008fc8 <USBD_CoreFindEP>
 8008b66:	4603      	mov	r3, r0
 8008b68:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008b6a:	7dbb      	ldrb	r3, [r7, #22]
 8008b6c:	2bff      	cmp	r3, #255	; 0xff
 8008b6e:	d025      	beq.n	8008bbc <USBD_LL_DataOutStage+0x15c>
 8008b70:	7dbb      	ldrb	r3, [r7, #22]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d122      	bne.n	8008bbc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b7c:	b2db      	uxtb	r3, r3
 8008b7e:	2b03      	cmp	r3, #3
 8008b80:	d117      	bne.n	8008bb2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008b82:	7dba      	ldrb	r2, [r7, #22]
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	32ae      	adds	r2, #174	; 0xae
 8008b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b8c:	699b      	ldr	r3, [r3, #24]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d00f      	beq.n	8008bb2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008b92:	7dba      	ldrb	r2, [r7, #22]
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008b9a:	7dba      	ldrb	r2, [r7, #22]
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	32ae      	adds	r2, #174	; 0xae
 8008ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ba4:	699b      	ldr	r3, [r3, #24]
 8008ba6:	7afa      	ldrb	r2, [r7, #11]
 8008ba8:	4611      	mov	r1, r2
 8008baa:	68f8      	ldr	r0, [r7, #12]
 8008bac:	4798      	blx	r3
 8008bae:	4603      	mov	r3, r0
 8008bb0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008bb2:	7dfb      	ldrb	r3, [r7, #23]
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d001      	beq.n	8008bbc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008bb8:	7dfb      	ldrb	r3, [r7, #23]
 8008bba:	e000      	b.n	8008bbe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008bbc:	2300      	movs	r3, #0
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3718      	adds	r7, #24
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}

08008bc6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b086      	sub	sp, #24
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	60f8      	str	r0, [r7, #12]
 8008bce:	460b      	mov	r3, r1
 8008bd0:	607a      	str	r2, [r7, #4]
 8008bd2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008bd4:	7afb      	ldrb	r3, [r7, #11]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d16f      	bne.n	8008cba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008bda:	68fb      	ldr	r3, [r7, #12]
 8008bdc:	3314      	adds	r3, #20
 8008bde:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008be6:	2b02      	cmp	r3, #2
 8008be8:	d15a      	bne.n	8008ca0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	689a      	ldr	r2, [r3, #8]
 8008bee:	693b      	ldr	r3, [r7, #16]
 8008bf0:	68db      	ldr	r3, [r3, #12]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d914      	bls.n	8008c20 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	689a      	ldr	r2, [r3, #8]
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	68db      	ldr	r3, [r3, #12]
 8008bfe:	1ad2      	subs	r2, r2, r3
 8008c00:	693b      	ldr	r3, [r7, #16]
 8008c02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008c04:	693b      	ldr	r3, [r7, #16]
 8008c06:	689b      	ldr	r3, [r3, #8]
 8008c08:	461a      	mov	r2, r3
 8008c0a:	6879      	ldr	r1, [r7, #4]
 8008c0c:	68f8      	ldr	r0, [r7, #12]
 8008c0e:	f001 f8ac 	bl	8009d6a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c12:	2300      	movs	r3, #0
 8008c14:	2200      	movs	r2, #0
 8008c16:	2100      	movs	r1, #0
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f001 fdad 	bl	800a778 <USBD_LL_PrepareReceive>
 8008c1e:	e03f      	b.n	8008ca0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	68da      	ldr	r2, [r3, #12]
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	429a      	cmp	r2, r3
 8008c2a:	d11c      	bne.n	8008c66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	685a      	ldr	r2, [r3, #4]
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008c34:	429a      	cmp	r2, r3
 8008c36:	d316      	bcc.n	8008c66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	685a      	ldr	r2, [r3, #4]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008c42:	429a      	cmp	r2, r3
 8008c44:	d20f      	bcs.n	8008c66 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008c46:	2200      	movs	r2, #0
 8008c48:	2100      	movs	r1, #0
 8008c4a:	68f8      	ldr	r0, [r7, #12]
 8008c4c:	f001 f88d 	bl	8009d6a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008c58:	2300      	movs	r3, #0
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2100      	movs	r1, #0
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f001 fd8a 	bl	800a778 <USBD_LL_PrepareReceive>
 8008c64:	e01c      	b.n	8008ca0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c6c:	b2db      	uxtb	r3, r3
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	d10f      	bne.n	8008c92 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c78:	68db      	ldr	r3, [r3, #12]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d009      	beq.n	8008c92 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	2200      	movs	r2, #0
 8008c82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c8c:	68db      	ldr	r3, [r3, #12]
 8008c8e:	68f8      	ldr	r0, [r7, #12]
 8008c90:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008c92:	2180      	movs	r1, #128	; 0x80
 8008c94:	68f8      	ldr	r0, [r7, #12]
 8008c96:	f001 fcc5 	bl	800a624 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008c9a:	68f8      	ldr	r0, [r7, #12]
 8008c9c:	f001 f8b7 	bl	8009e0e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d03a      	beq.n	8008d20 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f7ff fe42 	bl	8008934 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008cb8:	e032      	b.n	8008d20 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008cba:	7afb      	ldrb	r3, [r7, #11]
 8008cbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	4619      	mov	r1, r3
 8008cc4:	68f8      	ldr	r0, [r7, #12]
 8008cc6:	f000 f97f 	bl	8008fc8 <USBD_CoreFindEP>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008cce:	7dfb      	ldrb	r3, [r7, #23]
 8008cd0:	2bff      	cmp	r3, #255	; 0xff
 8008cd2:	d025      	beq.n	8008d20 <USBD_LL_DataInStage+0x15a>
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d122      	bne.n	8008d20 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ce0:	b2db      	uxtb	r3, r3
 8008ce2:	2b03      	cmp	r3, #3
 8008ce4:	d11c      	bne.n	8008d20 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008ce6:	7dfa      	ldrb	r2, [r7, #23]
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	32ae      	adds	r2, #174	; 0xae
 8008cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008cf0:	695b      	ldr	r3, [r3, #20]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d014      	beq.n	8008d20 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008cf6:	7dfa      	ldrb	r2, [r7, #23]
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008cfe:	7dfa      	ldrb	r2, [r7, #23]
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	32ae      	adds	r2, #174	; 0xae
 8008d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d08:	695b      	ldr	r3, [r3, #20]
 8008d0a:	7afa      	ldrb	r2, [r7, #11]
 8008d0c:	4611      	mov	r1, r2
 8008d0e:	68f8      	ldr	r0, [r7, #12]
 8008d10:	4798      	blx	r3
 8008d12:	4603      	mov	r3, r0
 8008d14:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008d16:	7dbb      	ldrb	r3, [r7, #22]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d001      	beq.n	8008d20 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008d1c:	7dbb      	ldrb	r3, [r7, #22]
 8008d1e:	e000      	b.n	8008d22 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008d20:	2300      	movs	r3, #0
}
 8008d22:	4618      	mov	r0, r3
 8008d24:	3718      	adds	r7, #24
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008d2a:	b580      	push	{r7, lr}
 8008d2c:	b084      	sub	sp, #16
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d32:	2300      	movs	r3, #0
 8008d34:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	2200      	movs	r2, #0
 8008d4a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	2200      	movs	r2, #0
 8008d50:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d014      	beq.n	8008d90 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d6c:	685b      	ldr	r3, [r3, #4]
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d00e      	beq.n	8008d90 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	6852      	ldr	r2, [r2, #4]
 8008d7e:	b2d2      	uxtb	r2, r2
 8008d80:	4611      	mov	r1, r2
 8008d82:	6878      	ldr	r0, [r7, #4]
 8008d84:	4798      	blx	r3
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d001      	beq.n	8008d90 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008d8c:	2303      	movs	r3, #3
 8008d8e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008d90:	2340      	movs	r3, #64	; 0x40
 8008d92:	2200      	movs	r2, #0
 8008d94:	2100      	movs	r1, #0
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f001 fbff 	bl	800a59a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	2201      	movs	r2, #1
 8008da0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2240      	movs	r2, #64	; 0x40
 8008da8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008dac:	2340      	movs	r3, #64	; 0x40
 8008dae:	2200      	movs	r2, #0
 8008db0:	2180      	movs	r1, #128	; 0x80
 8008db2:	6878      	ldr	r0, [r7, #4]
 8008db4:	f001 fbf1 	bl	800a59a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2201      	movs	r2, #1
 8008dbc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	2240      	movs	r2, #64	; 0x40
 8008dc2:	621a      	str	r2, [r3, #32]

  return ret;
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3710      	adds	r7, #16
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	bd80      	pop	{r7, pc}

08008dce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008dce:	b480      	push	{r7}
 8008dd0:	b083      	sub	sp, #12
 8008dd2:	af00      	add	r7, sp, #0
 8008dd4:	6078      	str	r0, [r7, #4]
 8008dd6:	460b      	mov	r3, r1
 8008dd8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	78fa      	ldrb	r2, [r7, #3]
 8008dde:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008de0:	2300      	movs	r3, #0
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr

08008dee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008dee:	b480      	push	{r7}
 8008df0:	b083      	sub	sp, #12
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dfc:	b2da      	uxtb	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2204      	movs	r2, #4
 8008e08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	370c      	adds	r7, #12
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr

08008e1a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008e1a:	b480      	push	{r7}
 8008e1c:	b083      	sub	sp, #12
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e28:	b2db      	uxtb	r3, r3
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	d106      	bne.n	8008e3c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008e34:	b2da      	uxtb	r2, r3
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008e3c:	2300      	movs	r3, #0
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	370c      	adds	r7, #12
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr

08008e4a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008e4a:	b580      	push	{r7, lr}
 8008e4c:	b082      	sub	sp, #8
 8008e4e:	af00      	add	r7, sp, #0
 8008e50:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e58:	b2db      	uxtb	r3, r3
 8008e5a:	2b03      	cmp	r3, #3
 8008e5c:	d110      	bne.n	8008e80 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d00b      	beq.n	8008e80 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e6e:	69db      	ldr	r3, [r3, #28]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d005      	beq.n	8008e80 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008e7a:	69db      	ldr	r3, [r3, #28]
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3708      	adds	r7, #8
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}

08008e8a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8008e8a:	b580      	push	{r7, lr}
 8008e8c:	b082      	sub	sp, #8
 8008e8e:	af00      	add	r7, sp, #0
 8008e90:	6078      	str	r0, [r7, #4]
 8008e92:	460b      	mov	r3, r1
 8008e94:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	32ae      	adds	r2, #174	; 0xae
 8008ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d101      	bne.n	8008eac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8008ea8:	2303      	movs	r3, #3
 8008eaa:	e01c      	b.n	8008ee6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	2b03      	cmp	r3, #3
 8008eb6:	d115      	bne.n	8008ee4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	32ae      	adds	r2, #174	; 0xae
 8008ec2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ec6:	6a1b      	ldr	r3, [r3, #32]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00b      	beq.n	8008ee4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	32ae      	adds	r2, #174	; 0xae
 8008ed6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eda:	6a1b      	ldr	r3, [r3, #32]
 8008edc:	78fa      	ldrb	r2, [r7, #3]
 8008ede:	4611      	mov	r1, r2
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	3708      	adds	r7, #8
 8008eea:	46bd      	mov	sp, r7
 8008eec:	bd80      	pop	{r7, pc}

08008eee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8008eee:	b580      	push	{r7, lr}
 8008ef0:	b082      	sub	sp, #8
 8008ef2:	af00      	add	r7, sp, #0
 8008ef4:	6078      	str	r0, [r7, #4]
 8008ef6:	460b      	mov	r3, r1
 8008ef8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	32ae      	adds	r2, #174	; 0xae
 8008f04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e01c      	b.n	8008f4a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b03      	cmp	r3, #3
 8008f1a:	d115      	bne.n	8008f48 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	32ae      	adds	r2, #174	; 0xae
 8008f26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d00b      	beq.n	8008f48 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	32ae      	adds	r2, #174	; 0xae
 8008f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f40:	78fa      	ldrb	r2, [r7, #3]
 8008f42:	4611      	mov	r1, r2
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	3708      	adds	r7, #8
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}

08008f52 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008f52:	b480      	push	{r7}
 8008f54:	b083      	sub	sp, #12
 8008f56:	af00      	add	r7, sp, #0
 8008f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	370c      	adds	r7, #12
 8008f60:	46bd      	mov	sp, r7
 8008f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f66:	4770      	bx	lr

08008f68 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af00      	add	r7, sp, #0
 8008f6e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2201      	movs	r2, #1
 8008f78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d00e      	beq.n	8008fa4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	6852      	ldr	r2, [r2, #4]
 8008f92:	b2d2      	uxtb	r2, r2
 8008f94:	4611      	mov	r1, r2
 8008f96:	6878      	ldr	r0, [r7, #4]
 8008f98:	4798      	blx	r3
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d001      	beq.n	8008fa4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fa6:	4618      	mov	r0, r3
 8008fa8:	3710      	adds	r7, #16
 8008faa:	46bd      	mov	sp, r7
 8008fac:	bd80      	pop	{r7, pc}

08008fae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008fae:	b480      	push	{r7}
 8008fb0:	b083      	sub	sp, #12
 8008fb2:	af00      	add	r7, sp, #0
 8008fb4:	6078      	str	r0, [r7, #4]
 8008fb6:	460b      	mov	r3, r1
 8008fb8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008fba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	b083      	sub	sp, #12
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
 8008fd0:	460b      	mov	r3, r1
 8008fd2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008fd4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	370c      	adds	r7, #12
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe0:	4770      	bx	lr

08008fe2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b086      	sub	sp, #24
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	460b      	mov	r3, r1
 8008fec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8008ff6:	2300      	movs	r3, #0
 8008ff8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	885b      	ldrh	r3, [r3, #2]
 8008ffe:	b29a      	uxth	r2, r3
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	b29b      	uxth	r3, r3
 8009006:	429a      	cmp	r2, r3
 8009008:	d920      	bls.n	800904c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	b29b      	uxth	r3, r3
 8009010:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8009012:	e013      	b.n	800903c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8009014:	f107 030a 	add.w	r3, r7, #10
 8009018:	4619      	mov	r1, r3
 800901a:	6978      	ldr	r0, [r7, #20]
 800901c:	f000 f81b 	bl	8009056 <USBD_GetNextDesc>
 8009020:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	785b      	ldrb	r3, [r3, #1]
 8009026:	2b05      	cmp	r3, #5
 8009028:	d108      	bne.n	800903c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	789b      	ldrb	r3, [r3, #2]
 8009032:	78fa      	ldrb	r2, [r7, #3]
 8009034:	429a      	cmp	r2, r3
 8009036:	d008      	beq.n	800904a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009038:	2300      	movs	r3, #0
 800903a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	885b      	ldrh	r3, [r3, #2]
 8009040:	b29a      	uxth	r2, r3
 8009042:	897b      	ldrh	r3, [r7, #10]
 8009044:	429a      	cmp	r2, r3
 8009046:	d8e5      	bhi.n	8009014 <USBD_GetEpDesc+0x32>
 8009048:	e000      	b.n	800904c <USBD_GetEpDesc+0x6a>
          break;
 800904a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800904c:	693b      	ldr	r3, [r7, #16]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3718      	adds	r7, #24
 8009052:	46bd      	mov	sp, r7
 8009054:	bd80      	pop	{r7, pc}

08009056 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009056:	b480      	push	{r7}
 8009058:	b085      	sub	sp, #20
 800905a:	af00      	add	r7, sp, #0
 800905c:	6078      	str	r0, [r7, #4]
 800905e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8009064:	683b      	ldr	r3, [r7, #0]
 8009066:	881a      	ldrh	r2, [r3, #0]
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	781b      	ldrb	r3, [r3, #0]
 800906c:	b29b      	uxth	r3, r3
 800906e:	4413      	add	r3, r2
 8009070:	b29a      	uxth	r2, r3
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	781b      	ldrb	r3, [r3, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4413      	add	r3, r2
 8009080:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009082:	68fb      	ldr	r3, [r7, #12]
}
 8009084:	4618      	mov	r0, r3
 8009086:	3714      	adds	r7, #20
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8009090:	b480      	push	{r7}
 8009092:	b087      	sub	sp, #28
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800909c:	697b      	ldr	r3, [r7, #20]
 800909e:	781b      	ldrb	r3, [r3, #0]
 80090a0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80090a2:	697b      	ldr	r3, [r7, #20]
 80090a4:	3301      	adds	r3, #1
 80090a6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80090a8:	697b      	ldr	r3, [r7, #20]
 80090aa:	781b      	ldrb	r3, [r3, #0]
 80090ac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80090ae:	8a3b      	ldrh	r3, [r7, #16]
 80090b0:	021b      	lsls	r3, r3, #8
 80090b2:	b21a      	sxth	r2, r3
 80090b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80090b8:	4313      	orrs	r3, r2
 80090ba:	b21b      	sxth	r3, r3
 80090bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80090be:	89fb      	ldrh	r3, [r7, #14]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	371c      	adds	r7, #28
 80090c4:	46bd      	mov	sp, r7
 80090c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ca:	4770      	bx	lr

080090cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
 80090d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80090d6:	2300      	movs	r3, #0
 80090d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80090e2:	2b40      	cmp	r3, #64	; 0x40
 80090e4:	d005      	beq.n	80090f2 <USBD_StdDevReq+0x26>
 80090e6:	2b40      	cmp	r3, #64	; 0x40
 80090e8:	d857      	bhi.n	800919a <USBD_StdDevReq+0xce>
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d00f      	beq.n	800910e <USBD_StdDevReq+0x42>
 80090ee:	2b20      	cmp	r3, #32
 80090f0:	d153      	bne.n	800919a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	32ae      	adds	r2, #174	; 0xae
 80090fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009100:	689b      	ldr	r3, [r3, #8]
 8009102:	6839      	ldr	r1, [r7, #0]
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	4798      	blx	r3
 8009108:	4603      	mov	r3, r0
 800910a:	73fb      	strb	r3, [r7, #15]
      break;
 800910c:	e04a      	b.n	80091a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	785b      	ldrb	r3, [r3, #1]
 8009112:	2b09      	cmp	r3, #9
 8009114:	d83b      	bhi.n	800918e <USBD_StdDevReq+0xc2>
 8009116:	a201      	add	r2, pc, #4	; (adr r2, 800911c <USBD_StdDevReq+0x50>)
 8009118:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911c:	08009171 	.word	0x08009171
 8009120:	08009185 	.word	0x08009185
 8009124:	0800918f 	.word	0x0800918f
 8009128:	0800917b 	.word	0x0800917b
 800912c:	0800918f 	.word	0x0800918f
 8009130:	0800914f 	.word	0x0800914f
 8009134:	08009145 	.word	0x08009145
 8009138:	0800918f 	.word	0x0800918f
 800913c:	08009167 	.word	0x08009167
 8009140:	08009159 	.word	0x08009159
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8009144:	6839      	ldr	r1, [r7, #0]
 8009146:	6878      	ldr	r0, [r7, #4]
 8009148:	f000 fa3c 	bl	80095c4 <USBD_GetDescriptor>
          break;
 800914c:	e024      	b.n	8009198 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800914e:	6839      	ldr	r1, [r7, #0]
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fba1 	bl	8009898 <USBD_SetAddress>
          break;
 8009156:	e01f      	b.n	8009198 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8009158:	6839      	ldr	r1, [r7, #0]
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 fbe0 	bl	8009920 <USBD_SetConfig>
 8009160:	4603      	mov	r3, r0
 8009162:	73fb      	strb	r3, [r7, #15]
          break;
 8009164:	e018      	b.n	8009198 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8009166:	6839      	ldr	r1, [r7, #0]
 8009168:	6878      	ldr	r0, [r7, #4]
 800916a:	f000 fc83 	bl	8009a74 <USBD_GetConfig>
          break;
 800916e:	e013      	b.n	8009198 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 fcb4 	bl	8009ae0 <USBD_GetStatus>
          break;
 8009178:	e00e      	b.n	8009198 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800917a:	6839      	ldr	r1, [r7, #0]
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f000 fce3 	bl	8009b48 <USBD_SetFeature>
          break;
 8009182:	e009      	b.n	8009198 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8009184:	6839      	ldr	r1, [r7, #0]
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f000 fd07 	bl	8009b9a <USBD_ClrFeature>
          break;
 800918c:	e004      	b.n	8009198 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800918e:	6839      	ldr	r1, [r7, #0]
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f000 fd5e 	bl	8009c52 <USBD_CtlError>
          break;
 8009196:	bf00      	nop
      }
      break;
 8009198:	e004      	b.n	80091a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800919a:	6839      	ldr	r1, [r7, #0]
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f000 fd58 	bl	8009c52 <USBD_CtlError>
      break;
 80091a2:	bf00      	nop
  }

  return ret;
 80091a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}
 80091ae:	bf00      	nop

080091b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	781b      	ldrb	r3, [r3, #0]
 80091c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80091c6:	2b40      	cmp	r3, #64	; 0x40
 80091c8:	d005      	beq.n	80091d6 <USBD_StdItfReq+0x26>
 80091ca:	2b40      	cmp	r3, #64	; 0x40
 80091cc:	d852      	bhi.n	8009274 <USBD_StdItfReq+0xc4>
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d001      	beq.n	80091d6 <USBD_StdItfReq+0x26>
 80091d2:	2b20      	cmp	r3, #32
 80091d4:	d14e      	bne.n	8009274 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80091dc:	b2db      	uxtb	r3, r3
 80091de:	3b01      	subs	r3, #1
 80091e0:	2b02      	cmp	r3, #2
 80091e2:	d840      	bhi.n	8009266 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80091e4:	683b      	ldr	r3, [r7, #0]
 80091e6:	889b      	ldrh	r3, [r3, #4]
 80091e8:	b2db      	uxtb	r3, r3
 80091ea:	2b01      	cmp	r3, #1
 80091ec:	d836      	bhi.n	800925c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80091ee:	683b      	ldr	r3, [r7, #0]
 80091f0:	889b      	ldrh	r3, [r3, #4]
 80091f2:	b2db      	uxtb	r3, r3
 80091f4:	4619      	mov	r1, r3
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7ff fed9 	bl	8008fae <USBD_CoreFindIF>
 80091fc:	4603      	mov	r3, r0
 80091fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009200:	7bbb      	ldrb	r3, [r7, #14]
 8009202:	2bff      	cmp	r3, #255	; 0xff
 8009204:	d01d      	beq.n	8009242 <USBD_StdItfReq+0x92>
 8009206:	7bbb      	ldrb	r3, [r7, #14]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d11a      	bne.n	8009242 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800920c:	7bba      	ldrb	r2, [r7, #14]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	32ae      	adds	r2, #174	; 0xae
 8009212:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00f      	beq.n	800923c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800921c:	7bba      	ldrb	r2, [r7, #14]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009224:	7bba      	ldrb	r2, [r7, #14]
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	32ae      	adds	r2, #174	; 0xae
 800922a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800922e:	689b      	ldr	r3, [r3, #8]
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	4798      	blx	r3
 8009236:	4603      	mov	r3, r0
 8009238:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800923a:	e004      	b.n	8009246 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800923c:	2303      	movs	r3, #3
 800923e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009240:	e001      	b.n	8009246 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009242:	2303      	movs	r3, #3
 8009244:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	88db      	ldrh	r3, [r3, #6]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d110      	bne.n	8009270 <USBD_StdItfReq+0xc0>
 800924e:	7bfb      	ldrb	r3, [r7, #15]
 8009250:	2b00      	cmp	r3, #0
 8009252:	d10d      	bne.n	8009270 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009254:	6878      	ldr	r0, [r7, #4]
 8009256:	f000 fdc7 	bl	8009de8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800925a:	e009      	b.n	8009270 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800925c:	6839      	ldr	r1, [r7, #0]
 800925e:	6878      	ldr	r0, [r7, #4]
 8009260:	f000 fcf7 	bl	8009c52 <USBD_CtlError>
          break;
 8009264:	e004      	b.n	8009270 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009266:	6839      	ldr	r1, [r7, #0]
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fcf2 	bl	8009c52 <USBD_CtlError>
          break;
 800926e:	e000      	b.n	8009272 <USBD_StdItfReq+0xc2>
          break;
 8009270:	bf00      	nop
      }
      break;
 8009272:	e004      	b.n	800927e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009274:	6839      	ldr	r1, [r7, #0]
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 fceb 	bl	8009c52 <USBD_CtlError>
      break;
 800927c:	bf00      	nop
  }

  return ret;
 800927e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3710      	adds	r7, #16
 8009284:	46bd      	mov	sp, r7
 8009286:	bd80      	pop	{r7, pc}

08009288 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009288:	b580      	push	{r7, lr}
 800928a:	b084      	sub	sp, #16
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
 8009290:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009292:	2300      	movs	r3, #0
 8009294:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	889b      	ldrh	r3, [r3, #4]
 800929a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	781b      	ldrb	r3, [r3, #0]
 80092a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80092a4:	2b40      	cmp	r3, #64	; 0x40
 80092a6:	d007      	beq.n	80092b8 <USBD_StdEPReq+0x30>
 80092a8:	2b40      	cmp	r3, #64	; 0x40
 80092aa:	f200 817f 	bhi.w	80095ac <USBD_StdEPReq+0x324>
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d02a      	beq.n	8009308 <USBD_StdEPReq+0x80>
 80092b2:	2b20      	cmp	r3, #32
 80092b4:	f040 817a 	bne.w	80095ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80092b8:	7bbb      	ldrb	r3, [r7, #14]
 80092ba:	4619      	mov	r1, r3
 80092bc:	6878      	ldr	r0, [r7, #4]
 80092be:	f7ff fe83 	bl	8008fc8 <USBD_CoreFindEP>
 80092c2:	4603      	mov	r3, r0
 80092c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80092c6:	7b7b      	ldrb	r3, [r7, #13]
 80092c8:	2bff      	cmp	r3, #255	; 0xff
 80092ca:	f000 8174 	beq.w	80095b6 <USBD_StdEPReq+0x32e>
 80092ce:	7b7b      	ldrb	r3, [r7, #13]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	f040 8170 	bne.w	80095b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80092d6:	7b7a      	ldrb	r2, [r7, #13]
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80092de:	7b7a      	ldrb	r2, [r7, #13]
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	32ae      	adds	r2, #174	; 0xae
 80092e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	f000 8163 	beq.w	80095b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80092f0:	7b7a      	ldrb	r2, [r7, #13]
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	32ae      	adds	r2, #174	; 0xae
 80092f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	6839      	ldr	r1, [r7, #0]
 80092fe:	6878      	ldr	r0, [r7, #4]
 8009300:	4798      	blx	r3
 8009302:	4603      	mov	r3, r0
 8009304:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009306:	e156      	b.n	80095b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009308:	683b      	ldr	r3, [r7, #0]
 800930a:	785b      	ldrb	r3, [r3, #1]
 800930c:	2b03      	cmp	r3, #3
 800930e:	d008      	beq.n	8009322 <USBD_StdEPReq+0x9a>
 8009310:	2b03      	cmp	r3, #3
 8009312:	f300 8145 	bgt.w	80095a0 <USBD_StdEPReq+0x318>
 8009316:	2b00      	cmp	r3, #0
 8009318:	f000 809b 	beq.w	8009452 <USBD_StdEPReq+0x1ca>
 800931c:	2b01      	cmp	r3, #1
 800931e:	d03c      	beq.n	800939a <USBD_StdEPReq+0x112>
 8009320:	e13e      	b.n	80095a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009328:	b2db      	uxtb	r3, r3
 800932a:	2b02      	cmp	r3, #2
 800932c:	d002      	beq.n	8009334 <USBD_StdEPReq+0xac>
 800932e:	2b03      	cmp	r3, #3
 8009330:	d016      	beq.n	8009360 <USBD_StdEPReq+0xd8>
 8009332:	e02c      	b.n	800938e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009334:	7bbb      	ldrb	r3, [r7, #14]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d00d      	beq.n	8009356 <USBD_StdEPReq+0xce>
 800933a:	7bbb      	ldrb	r3, [r7, #14]
 800933c:	2b80      	cmp	r3, #128	; 0x80
 800933e:	d00a      	beq.n	8009356 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009340:	7bbb      	ldrb	r3, [r7, #14]
 8009342:	4619      	mov	r1, r3
 8009344:	6878      	ldr	r0, [r7, #4]
 8009346:	f001 f96d 	bl	800a624 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800934a:	2180      	movs	r1, #128	; 0x80
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f001 f969 	bl	800a624 <USBD_LL_StallEP>
 8009352:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009354:	e020      	b.n	8009398 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009356:	6839      	ldr	r1, [r7, #0]
 8009358:	6878      	ldr	r0, [r7, #4]
 800935a:	f000 fc7a 	bl	8009c52 <USBD_CtlError>
              break;
 800935e:	e01b      	b.n	8009398 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	885b      	ldrh	r3, [r3, #2]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d10e      	bne.n	8009386 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009368:	7bbb      	ldrb	r3, [r7, #14]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d00b      	beq.n	8009386 <USBD_StdEPReq+0xfe>
 800936e:	7bbb      	ldrb	r3, [r7, #14]
 8009370:	2b80      	cmp	r3, #128	; 0x80
 8009372:	d008      	beq.n	8009386 <USBD_StdEPReq+0xfe>
 8009374:	683b      	ldr	r3, [r7, #0]
 8009376:	88db      	ldrh	r3, [r3, #6]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d104      	bne.n	8009386 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800937c:	7bbb      	ldrb	r3, [r7, #14]
 800937e:	4619      	mov	r1, r3
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f001 f94f 	bl	800a624 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009386:	6878      	ldr	r0, [r7, #4]
 8009388:	f000 fd2e 	bl	8009de8 <USBD_CtlSendStatus>

              break;
 800938c:	e004      	b.n	8009398 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800938e:	6839      	ldr	r1, [r7, #0]
 8009390:	6878      	ldr	r0, [r7, #4]
 8009392:	f000 fc5e 	bl	8009c52 <USBD_CtlError>
              break;
 8009396:	bf00      	nop
          }
          break;
 8009398:	e107      	b.n	80095aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093a0:	b2db      	uxtb	r3, r3
 80093a2:	2b02      	cmp	r3, #2
 80093a4:	d002      	beq.n	80093ac <USBD_StdEPReq+0x124>
 80093a6:	2b03      	cmp	r3, #3
 80093a8:	d016      	beq.n	80093d8 <USBD_StdEPReq+0x150>
 80093aa:	e04b      	b.n	8009444 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80093ac:	7bbb      	ldrb	r3, [r7, #14]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d00d      	beq.n	80093ce <USBD_StdEPReq+0x146>
 80093b2:	7bbb      	ldrb	r3, [r7, #14]
 80093b4:	2b80      	cmp	r3, #128	; 0x80
 80093b6:	d00a      	beq.n	80093ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80093b8:	7bbb      	ldrb	r3, [r7, #14]
 80093ba:	4619      	mov	r1, r3
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f001 f931 	bl	800a624 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80093c2:	2180      	movs	r1, #128	; 0x80
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f001 f92d 	bl	800a624 <USBD_LL_StallEP>
 80093ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80093cc:	e040      	b.n	8009450 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80093ce:	6839      	ldr	r1, [r7, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f000 fc3e 	bl	8009c52 <USBD_CtlError>
              break;
 80093d6:	e03b      	b.n	8009450 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	885b      	ldrh	r3, [r3, #2]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d136      	bne.n	800944e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80093e0:	7bbb      	ldrb	r3, [r7, #14]
 80093e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d004      	beq.n	80093f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80093ea:	7bbb      	ldrb	r3, [r7, #14]
 80093ec:	4619      	mov	r1, r3
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f001 f937 	bl	800a662 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f000 fcf7 	bl	8009de8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80093fa:	7bbb      	ldrb	r3, [r7, #14]
 80093fc:	4619      	mov	r1, r3
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f7ff fde2 	bl	8008fc8 <USBD_CoreFindEP>
 8009404:	4603      	mov	r3, r0
 8009406:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009408:	7b7b      	ldrb	r3, [r7, #13]
 800940a:	2bff      	cmp	r3, #255	; 0xff
 800940c:	d01f      	beq.n	800944e <USBD_StdEPReq+0x1c6>
 800940e:	7b7b      	ldrb	r3, [r7, #13]
 8009410:	2b00      	cmp	r3, #0
 8009412:	d11c      	bne.n	800944e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009414:	7b7a      	ldrb	r2, [r7, #13]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800941c:	7b7a      	ldrb	r2, [r7, #13]
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	32ae      	adds	r2, #174	; 0xae
 8009422:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009426:	689b      	ldr	r3, [r3, #8]
 8009428:	2b00      	cmp	r3, #0
 800942a:	d010      	beq.n	800944e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800942c:	7b7a      	ldrb	r2, [r7, #13]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	32ae      	adds	r2, #174	; 0xae
 8009432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009436:	689b      	ldr	r3, [r3, #8]
 8009438:	6839      	ldr	r1, [r7, #0]
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	4798      	blx	r3
 800943e:	4603      	mov	r3, r0
 8009440:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009442:	e004      	b.n	800944e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009444:	6839      	ldr	r1, [r7, #0]
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f000 fc03 	bl	8009c52 <USBD_CtlError>
              break;
 800944c:	e000      	b.n	8009450 <USBD_StdEPReq+0x1c8>
              break;
 800944e:	bf00      	nop
          }
          break;
 8009450:	e0ab      	b.n	80095aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009458:	b2db      	uxtb	r3, r3
 800945a:	2b02      	cmp	r3, #2
 800945c:	d002      	beq.n	8009464 <USBD_StdEPReq+0x1dc>
 800945e:	2b03      	cmp	r3, #3
 8009460:	d032      	beq.n	80094c8 <USBD_StdEPReq+0x240>
 8009462:	e097      	b.n	8009594 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009464:	7bbb      	ldrb	r3, [r7, #14]
 8009466:	2b00      	cmp	r3, #0
 8009468:	d007      	beq.n	800947a <USBD_StdEPReq+0x1f2>
 800946a:	7bbb      	ldrb	r3, [r7, #14]
 800946c:	2b80      	cmp	r3, #128	; 0x80
 800946e:	d004      	beq.n	800947a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009470:	6839      	ldr	r1, [r7, #0]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	f000 fbed 	bl	8009c52 <USBD_CtlError>
                break;
 8009478:	e091      	b.n	800959e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800947a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800947e:	2b00      	cmp	r3, #0
 8009480:	da0b      	bge.n	800949a <USBD_StdEPReq+0x212>
 8009482:	7bbb      	ldrb	r3, [r7, #14]
 8009484:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009488:	4613      	mov	r3, r2
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	4413      	add	r3, r2
 800948e:	009b      	lsls	r3, r3, #2
 8009490:	3310      	adds	r3, #16
 8009492:	687a      	ldr	r2, [r7, #4]
 8009494:	4413      	add	r3, r2
 8009496:	3304      	adds	r3, #4
 8009498:	e00b      	b.n	80094b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800949a:	7bbb      	ldrb	r3, [r7, #14]
 800949c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80094a0:	4613      	mov	r3, r2
 80094a2:	009b      	lsls	r3, r3, #2
 80094a4:	4413      	add	r3, r2
 80094a6:	009b      	lsls	r3, r3, #2
 80094a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	4413      	add	r3, r2
 80094b0:	3304      	adds	r3, #4
 80094b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2200      	movs	r2, #0
 80094b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	2202      	movs	r2, #2
 80094be:	4619      	mov	r1, r3
 80094c0:	6878      	ldr	r0, [r7, #4]
 80094c2:	f000 fc37 	bl	8009d34 <USBD_CtlSendData>
              break;
 80094c6:	e06a      	b.n	800959e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80094c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	da11      	bge.n	80094f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80094d0:	7bbb      	ldrb	r3, [r7, #14]
 80094d2:	f003 020f 	and.w	r2, r3, #15
 80094d6:	6879      	ldr	r1, [r7, #4]
 80094d8:	4613      	mov	r3, r2
 80094da:	009b      	lsls	r3, r3, #2
 80094dc:	4413      	add	r3, r2
 80094de:	009b      	lsls	r3, r3, #2
 80094e0:	440b      	add	r3, r1
 80094e2:	3324      	adds	r3, #36	; 0x24
 80094e4:	881b      	ldrh	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d117      	bne.n	800951a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80094ea:	6839      	ldr	r1, [r7, #0]
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fbb0 	bl	8009c52 <USBD_CtlError>
                  break;
 80094f2:	e054      	b.n	800959e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80094f4:	7bbb      	ldrb	r3, [r7, #14]
 80094f6:	f003 020f 	and.w	r2, r3, #15
 80094fa:	6879      	ldr	r1, [r7, #4]
 80094fc:	4613      	mov	r3, r2
 80094fe:	009b      	lsls	r3, r3, #2
 8009500:	4413      	add	r3, r2
 8009502:	009b      	lsls	r3, r3, #2
 8009504:	440b      	add	r3, r1
 8009506:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800950a:	881b      	ldrh	r3, [r3, #0]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d104      	bne.n	800951a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009510:	6839      	ldr	r1, [r7, #0]
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 fb9d 	bl	8009c52 <USBD_CtlError>
                  break;
 8009518:	e041      	b.n	800959e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800951a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800951e:	2b00      	cmp	r3, #0
 8009520:	da0b      	bge.n	800953a <USBD_StdEPReq+0x2b2>
 8009522:	7bbb      	ldrb	r3, [r7, #14]
 8009524:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009528:	4613      	mov	r3, r2
 800952a:	009b      	lsls	r3, r3, #2
 800952c:	4413      	add	r3, r2
 800952e:	009b      	lsls	r3, r3, #2
 8009530:	3310      	adds	r3, #16
 8009532:	687a      	ldr	r2, [r7, #4]
 8009534:	4413      	add	r3, r2
 8009536:	3304      	adds	r3, #4
 8009538:	e00b      	b.n	8009552 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800953a:	7bbb      	ldrb	r3, [r7, #14]
 800953c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009540:	4613      	mov	r3, r2
 8009542:	009b      	lsls	r3, r3, #2
 8009544:	4413      	add	r3, r2
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	4413      	add	r3, r2
 8009550:	3304      	adds	r3, #4
 8009552:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009554:	7bbb      	ldrb	r3, [r7, #14]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d002      	beq.n	8009560 <USBD_StdEPReq+0x2d8>
 800955a:	7bbb      	ldrb	r3, [r7, #14]
 800955c:	2b80      	cmp	r3, #128	; 0x80
 800955e:	d103      	bne.n	8009568 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009560:	68bb      	ldr	r3, [r7, #8]
 8009562:	2200      	movs	r2, #0
 8009564:	601a      	str	r2, [r3, #0]
 8009566:	e00e      	b.n	8009586 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009568:	7bbb      	ldrb	r3, [r7, #14]
 800956a:	4619      	mov	r1, r3
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f001 f897 	bl	800a6a0 <USBD_LL_IsStallEP>
 8009572:	4603      	mov	r3, r0
 8009574:	2b00      	cmp	r3, #0
 8009576:	d003      	beq.n	8009580 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009578:	68bb      	ldr	r3, [r7, #8]
 800957a:	2201      	movs	r2, #1
 800957c:	601a      	str	r2, [r3, #0]
 800957e:	e002      	b.n	8009586 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009580:	68bb      	ldr	r3, [r7, #8]
 8009582:	2200      	movs	r2, #0
 8009584:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2202      	movs	r2, #2
 800958a:	4619      	mov	r1, r3
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f000 fbd1 	bl	8009d34 <USBD_CtlSendData>
              break;
 8009592:	e004      	b.n	800959e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009594:	6839      	ldr	r1, [r7, #0]
 8009596:	6878      	ldr	r0, [r7, #4]
 8009598:	f000 fb5b 	bl	8009c52 <USBD_CtlError>
              break;
 800959c:	bf00      	nop
          }
          break;
 800959e:	e004      	b.n	80095aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80095a0:	6839      	ldr	r1, [r7, #0]
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f000 fb55 	bl	8009c52 <USBD_CtlError>
          break;
 80095a8:	bf00      	nop
      }
      break;
 80095aa:	e005      	b.n	80095b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80095ac:	6839      	ldr	r1, [r7, #0]
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 fb4f 	bl	8009c52 <USBD_CtlError>
      break;
 80095b4:	e000      	b.n	80095b8 <USBD_StdEPReq+0x330>
      break;
 80095b6:	bf00      	nop
  }

  return ret;
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
	...

080095c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095c4:	b580      	push	{r7, lr}
 80095c6:	b084      	sub	sp, #16
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
 80095cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80095ce:	2300      	movs	r3, #0
 80095d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80095d2:	2300      	movs	r3, #0
 80095d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80095d6:	2300      	movs	r3, #0
 80095d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	885b      	ldrh	r3, [r3, #2]
 80095de:	0a1b      	lsrs	r3, r3, #8
 80095e0:	b29b      	uxth	r3, r3
 80095e2:	3b01      	subs	r3, #1
 80095e4:	2b06      	cmp	r3, #6
 80095e6:	f200 8128 	bhi.w	800983a <USBD_GetDescriptor+0x276>
 80095ea:	a201      	add	r2, pc, #4	; (adr r2, 80095f0 <USBD_GetDescriptor+0x2c>)
 80095ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095f0:	0800960d 	.word	0x0800960d
 80095f4:	08009625 	.word	0x08009625
 80095f8:	08009665 	.word	0x08009665
 80095fc:	0800983b 	.word	0x0800983b
 8009600:	0800983b 	.word	0x0800983b
 8009604:	080097db 	.word	0x080097db
 8009608:	08009807 	.word	0x08009807
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	687a      	ldr	r2, [r7, #4]
 8009616:	7c12      	ldrb	r2, [r2, #16]
 8009618:	f107 0108 	add.w	r1, r7, #8
 800961c:	4610      	mov	r0, r2
 800961e:	4798      	blx	r3
 8009620:	60f8      	str	r0, [r7, #12]
      break;
 8009622:	e112      	b.n	800984a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	7c1b      	ldrb	r3, [r3, #16]
 8009628:	2b00      	cmp	r3, #0
 800962a:	d10d      	bne.n	8009648 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009634:	f107 0208 	add.w	r2, r7, #8
 8009638:	4610      	mov	r0, r2
 800963a:	4798      	blx	r3
 800963c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3301      	adds	r3, #1
 8009642:	2202      	movs	r2, #2
 8009644:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009646:	e100      	b.n	800984a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800964e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009650:	f107 0208 	add.w	r2, r7, #8
 8009654:	4610      	mov	r0, r2
 8009656:	4798      	blx	r3
 8009658:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	3301      	adds	r3, #1
 800965e:	2202      	movs	r2, #2
 8009660:	701a      	strb	r2, [r3, #0]
      break;
 8009662:	e0f2      	b.n	800984a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	885b      	ldrh	r3, [r3, #2]
 8009668:	b2db      	uxtb	r3, r3
 800966a:	2b05      	cmp	r3, #5
 800966c:	f200 80ac 	bhi.w	80097c8 <USBD_GetDescriptor+0x204>
 8009670:	a201      	add	r2, pc, #4	; (adr r2, 8009678 <USBD_GetDescriptor+0xb4>)
 8009672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009676:	bf00      	nop
 8009678:	08009691 	.word	0x08009691
 800967c:	080096c5 	.word	0x080096c5
 8009680:	080096f9 	.word	0x080096f9
 8009684:	0800972d 	.word	0x0800972d
 8009688:	08009761 	.word	0x08009761
 800968c:	08009795 	.word	0x08009795
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d00b      	beq.n	80096b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096a2:	685b      	ldr	r3, [r3, #4]
 80096a4:	687a      	ldr	r2, [r7, #4]
 80096a6:	7c12      	ldrb	r2, [r2, #16]
 80096a8:	f107 0108 	add.w	r1, r7, #8
 80096ac:	4610      	mov	r0, r2
 80096ae:	4798      	blx	r3
 80096b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096b2:	e091      	b.n	80097d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096b4:	6839      	ldr	r1, [r7, #0]
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 facb 	bl	8009c52 <USBD_CtlError>
            err++;
 80096bc:	7afb      	ldrb	r3, [r7, #11]
 80096be:	3301      	adds	r3, #1
 80096c0:	72fb      	strb	r3, [r7, #11]
          break;
 80096c2:	e089      	b.n	80097d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096ca:	689b      	ldr	r3, [r3, #8]
 80096cc:	2b00      	cmp	r3, #0
 80096ce:	d00b      	beq.n	80096e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096d6:	689b      	ldr	r3, [r3, #8]
 80096d8:	687a      	ldr	r2, [r7, #4]
 80096da:	7c12      	ldrb	r2, [r2, #16]
 80096dc:	f107 0108 	add.w	r1, r7, #8
 80096e0:	4610      	mov	r0, r2
 80096e2:	4798      	blx	r3
 80096e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80096e6:	e077      	b.n	80097d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80096e8:	6839      	ldr	r1, [r7, #0]
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f000 fab1 	bl	8009c52 <USBD_CtlError>
            err++;
 80096f0:	7afb      	ldrb	r3, [r7, #11]
 80096f2:	3301      	adds	r3, #1
 80096f4:	72fb      	strb	r3, [r7, #11]
          break;
 80096f6:	e06f      	b.n	80097d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80096fe:	68db      	ldr	r3, [r3, #12]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00b      	beq.n	800971c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800970a:	68db      	ldr	r3, [r3, #12]
 800970c:	687a      	ldr	r2, [r7, #4]
 800970e:	7c12      	ldrb	r2, [r2, #16]
 8009710:	f107 0108 	add.w	r1, r7, #8
 8009714:	4610      	mov	r0, r2
 8009716:	4798      	blx	r3
 8009718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800971a:	e05d      	b.n	80097d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800971c:	6839      	ldr	r1, [r7, #0]
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 fa97 	bl	8009c52 <USBD_CtlError>
            err++;
 8009724:	7afb      	ldrb	r3, [r7, #11]
 8009726:	3301      	adds	r3, #1
 8009728:	72fb      	strb	r3, [r7, #11]
          break;
 800972a:	e055      	b.n	80097d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009732:	691b      	ldr	r3, [r3, #16]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00b      	beq.n	8009750 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	687a      	ldr	r2, [r7, #4]
 8009742:	7c12      	ldrb	r2, [r2, #16]
 8009744:	f107 0108 	add.w	r1, r7, #8
 8009748:	4610      	mov	r0, r2
 800974a:	4798      	blx	r3
 800974c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800974e:	e043      	b.n	80097d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009750:	6839      	ldr	r1, [r7, #0]
 8009752:	6878      	ldr	r0, [r7, #4]
 8009754:	f000 fa7d 	bl	8009c52 <USBD_CtlError>
            err++;
 8009758:	7afb      	ldrb	r3, [r7, #11]
 800975a:	3301      	adds	r3, #1
 800975c:	72fb      	strb	r3, [r7, #11]
          break;
 800975e:	e03b      	b.n	80097d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009766:	695b      	ldr	r3, [r3, #20]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d00b      	beq.n	8009784 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009772:	695b      	ldr	r3, [r3, #20]
 8009774:	687a      	ldr	r2, [r7, #4]
 8009776:	7c12      	ldrb	r2, [r2, #16]
 8009778:	f107 0108 	add.w	r1, r7, #8
 800977c:	4610      	mov	r0, r2
 800977e:	4798      	blx	r3
 8009780:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009782:	e029      	b.n	80097d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009784:	6839      	ldr	r1, [r7, #0]
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 fa63 	bl	8009c52 <USBD_CtlError>
            err++;
 800978c:	7afb      	ldrb	r3, [r7, #11]
 800978e:	3301      	adds	r3, #1
 8009790:	72fb      	strb	r3, [r7, #11]
          break;
 8009792:	e021      	b.n	80097d8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800979a:	699b      	ldr	r3, [r3, #24]
 800979c:	2b00      	cmp	r3, #0
 800979e:	d00b      	beq.n	80097b8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80097a6:	699b      	ldr	r3, [r3, #24]
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	7c12      	ldrb	r2, [r2, #16]
 80097ac:	f107 0108 	add.w	r1, r7, #8
 80097b0:	4610      	mov	r0, r2
 80097b2:	4798      	blx	r3
 80097b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80097b6:	e00f      	b.n	80097d8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80097b8:	6839      	ldr	r1, [r7, #0]
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fa49 	bl	8009c52 <USBD_CtlError>
            err++;
 80097c0:	7afb      	ldrb	r3, [r7, #11]
 80097c2:	3301      	adds	r3, #1
 80097c4:	72fb      	strb	r3, [r7, #11]
          break;
 80097c6:	e007      	b.n	80097d8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80097c8:	6839      	ldr	r1, [r7, #0]
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f000 fa41 	bl	8009c52 <USBD_CtlError>
          err++;
 80097d0:	7afb      	ldrb	r3, [r7, #11]
 80097d2:	3301      	adds	r3, #1
 80097d4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80097d6:	bf00      	nop
      }
      break;
 80097d8:	e037      	b.n	800984a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	7c1b      	ldrb	r3, [r3, #16]
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d109      	bne.n	80097f6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80097e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097ea:	f107 0208 	add.w	r2, r7, #8
 80097ee:	4610      	mov	r0, r2
 80097f0:	4798      	blx	r3
 80097f2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80097f4:	e029      	b.n	800984a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80097f6:	6839      	ldr	r1, [r7, #0]
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fa2a 	bl	8009c52 <USBD_CtlError>
        err++;
 80097fe:	7afb      	ldrb	r3, [r7, #11]
 8009800:	3301      	adds	r3, #1
 8009802:	72fb      	strb	r3, [r7, #11]
      break;
 8009804:	e021      	b.n	800984a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	7c1b      	ldrb	r3, [r3, #16]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d10d      	bne.n	800982a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009816:	f107 0208 	add.w	r2, r7, #8
 800981a:	4610      	mov	r0, r2
 800981c:	4798      	blx	r3
 800981e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	3301      	adds	r3, #1
 8009824:	2207      	movs	r2, #7
 8009826:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009828:	e00f      	b.n	800984a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800982a:	6839      	ldr	r1, [r7, #0]
 800982c:	6878      	ldr	r0, [r7, #4]
 800982e:	f000 fa10 	bl	8009c52 <USBD_CtlError>
        err++;
 8009832:	7afb      	ldrb	r3, [r7, #11]
 8009834:	3301      	adds	r3, #1
 8009836:	72fb      	strb	r3, [r7, #11]
      break;
 8009838:	e007      	b.n	800984a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800983a:	6839      	ldr	r1, [r7, #0]
 800983c:	6878      	ldr	r0, [r7, #4]
 800983e:	f000 fa08 	bl	8009c52 <USBD_CtlError>
      err++;
 8009842:	7afb      	ldrb	r3, [r7, #11]
 8009844:	3301      	adds	r3, #1
 8009846:	72fb      	strb	r3, [r7, #11]
      break;
 8009848:	bf00      	nop
  }

  if (err != 0U)
 800984a:	7afb      	ldrb	r3, [r7, #11]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d11e      	bne.n	800988e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009850:	683b      	ldr	r3, [r7, #0]
 8009852:	88db      	ldrh	r3, [r3, #6]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d016      	beq.n	8009886 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009858:	893b      	ldrh	r3, [r7, #8]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00e      	beq.n	800987c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800985e:	683b      	ldr	r3, [r7, #0]
 8009860:	88da      	ldrh	r2, [r3, #6]
 8009862:	893b      	ldrh	r3, [r7, #8]
 8009864:	4293      	cmp	r3, r2
 8009866:	bf28      	it	cs
 8009868:	4613      	movcs	r3, r2
 800986a:	b29b      	uxth	r3, r3
 800986c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800986e:	893b      	ldrh	r3, [r7, #8]
 8009870:	461a      	mov	r2, r3
 8009872:	68f9      	ldr	r1, [r7, #12]
 8009874:	6878      	ldr	r0, [r7, #4]
 8009876:	f000 fa5d 	bl	8009d34 <USBD_CtlSendData>
 800987a:	e009      	b.n	8009890 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800987c:	6839      	ldr	r1, [r7, #0]
 800987e:	6878      	ldr	r0, [r7, #4]
 8009880:	f000 f9e7 	bl	8009c52 <USBD_CtlError>
 8009884:	e004      	b.n	8009890 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009886:	6878      	ldr	r0, [r7, #4]
 8009888:	f000 faae 	bl	8009de8 <USBD_CtlSendStatus>
 800988c:	e000      	b.n	8009890 <USBD_GetDescriptor+0x2cc>
    return;
 800988e:	bf00      	nop
  }
}
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop

08009898 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b084      	sub	sp, #16
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	889b      	ldrh	r3, [r3, #4]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d131      	bne.n	800990e <USBD_SetAddress+0x76>
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	88db      	ldrh	r3, [r3, #6]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d12d      	bne.n	800990e <USBD_SetAddress+0x76>
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	885b      	ldrh	r3, [r3, #2]
 80098b6:	2b7f      	cmp	r3, #127	; 0x7f
 80098b8:	d829      	bhi.n	800990e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80098ba:	683b      	ldr	r3, [r7, #0]
 80098bc:	885b      	ldrh	r3, [r3, #2]
 80098be:	b2db      	uxtb	r3, r3
 80098c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098c4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	2b03      	cmp	r3, #3
 80098d0:	d104      	bne.n	80098dc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80098d2:	6839      	ldr	r1, [r7, #0]
 80098d4:	6878      	ldr	r0, [r7, #4]
 80098d6:	f000 f9bc 	bl	8009c52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80098da:	e01d      	b.n	8009918 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	7bfa      	ldrb	r2, [r7, #15]
 80098e0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80098e4:	7bfb      	ldrb	r3, [r7, #15]
 80098e6:	4619      	mov	r1, r3
 80098e8:	6878      	ldr	r0, [r7, #4]
 80098ea:	f000 ff05 	bl	800a6f8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80098ee:	6878      	ldr	r0, [r7, #4]
 80098f0:	f000 fa7a 	bl	8009de8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80098f4:	7bfb      	ldrb	r3, [r7, #15]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d004      	beq.n	8009904 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	2202      	movs	r2, #2
 80098fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009902:	e009      	b.n	8009918 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2201      	movs	r2, #1
 8009908:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800990c:	e004      	b.n	8009918 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800990e:	6839      	ldr	r1, [r7, #0]
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f000 f99e 	bl	8009c52 <USBD_CtlError>
  }
}
 8009916:	bf00      	nop
 8009918:	bf00      	nop
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}

08009920 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b084      	sub	sp, #16
 8009924:	af00      	add	r7, sp, #0
 8009926:	6078      	str	r0, [r7, #4]
 8009928:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800992a:	2300      	movs	r3, #0
 800992c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	885b      	ldrh	r3, [r3, #2]
 8009932:	b2da      	uxtb	r2, r3
 8009934:	4b4e      	ldr	r3, [pc, #312]	; (8009a70 <USBD_SetConfig+0x150>)
 8009936:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009938:	4b4d      	ldr	r3, [pc, #308]	; (8009a70 <USBD_SetConfig+0x150>)
 800993a:	781b      	ldrb	r3, [r3, #0]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d905      	bls.n	800994c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009940:	6839      	ldr	r1, [r7, #0]
 8009942:	6878      	ldr	r0, [r7, #4]
 8009944:	f000 f985 	bl	8009c52 <USBD_CtlError>
    return USBD_FAIL;
 8009948:	2303      	movs	r3, #3
 800994a:	e08c      	b.n	8009a66 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b02      	cmp	r3, #2
 8009956:	d002      	beq.n	800995e <USBD_SetConfig+0x3e>
 8009958:	2b03      	cmp	r3, #3
 800995a:	d029      	beq.n	80099b0 <USBD_SetConfig+0x90>
 800995c:	e075      	b.n	8009a4a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800995e:	4b44      	ldr	r3, [pc, #272]	; (8009a70 <USBD_SetConfig+0x150>)
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d020      	beq.n	80099a8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009966:	4b42      	ldr	r3, [pc, #264]	; (8009a70 <USBD_SetConfig+0x150>)
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	461a      	mov	r2, r3
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009970:	4b3f      	ldr	r3, [pc, #252]	; (8009a70 <USBD_SetConfig+0x150>)
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	4619      	mov	r1, r3
 8009976:	6878      	ldr	r0, [r7, #4]
 8009978:	f7fe ffe7 	bl	800894a <USBD_SetClassConfig>
 800997c:	4603      	mov	r3, r0
 800997e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009980:	7bfb      	ldrb	r3, [r7, #15]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d008      	beq.n	8009998 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009986:	6839      	ldr	r1, [r7, #0]
 8009988:	6878      	ldr	r0, [r7, #4]
 800998a:	f000 f962 	bl	8009c52 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	2202      	movs	r2, #2
 8009992:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009996:	e065      	b.n	8009a64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009998:	6878      	ldr	r0, [r7, #4]
 800999a:	f000 fa25 	bl	8009de8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	2203      	movs	r2, #3
 80099a2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80099a6:	e05d      	b.n	8009a64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80099a8:	6878      	ldr	r0, [r7, #4]
 80099aa:	f000 fa1d 	bl	8009de8 <USBD_CtlSendStatus>
      break;
 80099ae:	e059      	b.n	8009a64 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80099b0:	4b2f      	ldr	r3, [pc, #188]	; (8009a70 <USBD_SetConfig+0x150>)
 80099b2:	781b      	ldrb	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d112      	bne.n	80099de <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2202      	movs	r2, #2
 80099bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80099c0:	4b2b      	ldr	r3, [pc, #172]	; (8009a70 <USBD_SetConfig+0x150>)
 80099c2:	781b      	ldrb	r3, [r3, #0]
 80099c4:	461a      	mov	r2, r3
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80099ca:	4b29      	ldr	r3, [pc, #164]	; (8009a70 <USBD_SetConfig+0x150>)
 80099cc:	781b      	ldrb	r3, [r3, #0]
 80099ce:	4619      	mov	r1, r3
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f7fe ffd6 	bl	8008982 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f000 fa06 	bl	8009de8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80099dc:	e042      	b.n	8009a64 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80099de:	4b24      	ldr	r3, [pc, #144]	; (8009a70 <USBD_SetConfig+0x150>)
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	461a      	mov	r2, r3
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d02a      	beq.n	8009a42 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	685b      	ldr	r3, [r3, #4]
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	4619      	mov	r1, r3
 80099f4:	6878      	ldr	r0, [r7, #4]
 80099f6:	f7fe ffc4 	bl	8008982 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80099fa:	4b1d      	ldr	r3, [pc, #116]	; (8009a70 <USBD_SetConfig+0x150>)
 80099fc:	781b      	ldrb	r3, [r3, #0]
 80099fe:	461a      	mov	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009a04:	4b1a      	ldr	r3, [pc, #104]	; (8009a70 <USBD_SetConfig+0x150>)
 8009a06:	781b      	ldrb	r3, [r3, #0]
 8009a08:	4619      	mov	r1, r3
 8009a0a:	6878      	ldr	r0, [r7, #4]
 8009a0c:	f7fe ff9d 	bl	800894a <USBD_SetClassConfig>
 8009a10:	4603      	mov	r3, r0
 8009a12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009a14:	7bfb      	ldrb	r3, [r7, #15]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d00f      	beq.n	8009a3a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009a1a:	6839      	ldr	r1, [r7, #0]
 8009a1c:	6878      	ldr	r0, [r7, #4]
 8009a1e:	f000 f918 	bl	8009c52 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	685b      	ldr	r3, [r3, #4]
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	4619      	mov	r1, r3
 8009a2a:	6878      	ldr	r0, [r7, #4]
 8009a2c:	f7fe ffa9 	bl	8008982 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	2202      	movs	r2, #2
 8009a34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009a38:	e014      	b.n	8009a64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009a3a:	6878      	ldr	r0, [r7, #4]
 8009a3c:	f000 f9d4 	bl	8009de8 <USBD_CtlSendStatus>
      break;
 8009a40:	e010      	b.n	8009a64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f000 f9d0 	bl	8009de8 <USBD_CtlSendStatus>
      break;
 8009a48:	e00c      	b.n	8009a64 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009a4a:	6839      	ldr	r1, [r7, #0]
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	f000 f900 	bl	8009c52 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009a52:	4b07      	ldr	r3, [pc, #28]	; (8009a70 <USBD_SetConfig+0x150>)
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	4619      	mov	r1, r3
 8009a58:	6878      	ldr	r0, [r7, #4]
 8009a5a:	f7fe ff92 	bl	8008982 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009a5e:	2303      	movs	r3, #3
 8009a60:	73fb      	strb	r3, [r7, #15]
      break;
 8009a62:	bf00      	nop
  }

  return ret;
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a66:	4618      	mov	r0, r3
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
 8009a6e:	bf00      	nop
 8009a70:	200006ec 	.word	0x200006ec

08009a74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b082      	sub	sp, #8
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009a7e:	683b      	ldr	r3, [r7, #0]
 8009a80:	88db      	ldrh	r3, [r3, #6]
 8009a82:	2b01      	cmp	r3, #1
 8009a84:	d004      	beq.n	8009a90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009a86:	6839      	ldr	r1, [r7, #0]
 8009a88:	6878      	ldr	r0, [r7, #4]
 8009a8a:	f000 f8e2 	bl	8009c52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009a8e:	e023      	b.n	8009ad8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009a96:	b2db      	uxtb	r3, r3
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	dc02      	bgt.n	8009aa2 <USBD_GetConfig+0x2e>
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	dc03      	bgt.n	8009aa8 <USBD_GetConfig+0x34>
 8009aa0:	e015      	b.n	8009ace <USBD_GetConfig+0x5a>
 8009aa2:	2b03      	cmp	r3, #3
 8009aa4:	d00b      	beq.n	8009abe <USBD_GetConfig+0x4a>
 8009aa6:	e012      	b.n	8009ace <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	6878      	ldr	r0, [r7, #4]
 8009ab8:	f000 f93c 	bl	8009d34 <USBD_CtlSendData>
        break;
 8009abc:	e00c      	b.n	8009ad8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	3304      	adds	r3, #4
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f934 	bl	8009d34 <USBD_CtlSendData>
        break;
 8009acc:	e004      	b.n	8009ad8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 f8be 	bl	8009c52 <USBD_CtlError>
        break;
 8009ad6:	bf00      	nop
}
 8009ad8:	bf00      	nop
 8009ada:	3708      	adds	r7, #8
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}

08009ae0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b082      	sub	sp, #8
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	3b01      	subs	r3, #1
 8009af4:	2b02      	cmp	r3, #2
 8009af6:	d81e      	bhi.n	8009b36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009af8:	683b      	ldr	r3, [r7, #0]
 8009afa:	88db      	ldrh	r3, [r3, #6]
 8009afc:	2b02      	cmp	r3, #2
 8009afe:	d004      	beq.n	8009b0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009b00:	6839      	ldr	r1, [r7, #0]
 8009b02:	6878      	ldr	r0, [r7, #4]
 8009b04:	f000 f8a5 	bl	8009c52 <USBD_CtlError>
        break;
 8009b08:	e01a      	b.n	8009b40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d005      	beq.n	8009b26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	f043 0202 	orr.w	r2, r3, #2
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	330c      	adds	r3, #12
 8009b2a:	2202      	movs	r2, #2
 8009b2c:	4619      	mov	r1, r3
 8009b2e:	6878      	ldr	r0, [r7, #4]
 8009b30:	f000 f900 	bl	8009d34 <USBD_CtlSendData>
      break;
 8009b34:	e004      	b.n	8009b40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009b36:	6839      	ldr	r1, [r7, #0]
 8009b38:	6878      	ldr	r0, [r7, #4]
 8009b3a:	f000 f88a 	bl	8009c52 <USBD_CtlError>
      break;
 8009b3e:	bf00      	nop
  }
}
 8009b40:	bf00      	nop
 8009b42:	3708      	adds	r7, #8
 8009b44:	46bd      	mov	sp, r7
 8009b46:	bd80      	pop	{r7, pc}

08009b48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b082      	sub	sp, #8
 8009b4c:	af00      	add	r7, sp, #0
 8009b4e:	6078      	str	r0, [r7, #4]
 8009b50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	885b      	ldrh	r3, [r3, #2]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d107      	bne.n	8009b6a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2201      	movs	r2, #1
 8009b5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f000 f940 	bl	8009de8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009b68:	e013      	b.n	8009b92 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	885b      	ldrh	r3, [r3, #2]
 8009b6e:	2b02      	cmp	r3, #2
 8009b70:	d10b      	bne.n	8009b8a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009b72:	683b      	ldr	r3, [r7, #0]
 8009b74:	889b      	ldrh	r3, [r3, #4]
 8009b76:	0a1b      	lsrs	r3, r3, #8
 8009b78:	b29b      	uxth	r3, r3
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	f000 f930 	bl	8009de8 <USBD_CtlSendStatus>
}
 8009b88:	e003      	b.n	8009b92 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009b8a:	6839      	ldr	r1, [r7, #0]
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f000 f860 	bl	8009c52 <USBD_CtlError>
}
 8009b92:	bf00      	nop
 8009b94:	3708      	adds	r7, #8
 8009b96:	46bd      	mov	sp, r7
 8009b98:	bd80      	pop	{r7, pc}

08009b9a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b9a:	b580      	push	{r7, lr}
 8009b9c:	b082      	sub	sp, #8
 8009b9e:	af00      	add	r7, sp, #0
 8009ba0:	6078      	str	r0, [r7, #4]
 8009ba2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009baa:	b2db      	uxtb	r3, r3
 8009bac:	3b01      	subs	r3, #1
 8009bae:	2b02      	cmp	r3, #2
 8009bb0:	d80b      	bhi.n	8009bca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	885b      	ldrh	r3, [r3, #2]
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d10c      	bne.n	8009bd4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 f910 	bl	8009de8 <USBD_CtlSendStatus>
      }
      break;
 8009bc8:	e004      	b.n	8009bd4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009bca:	6839      	ldr	r1, [r7, #0]
 8009bcc:	6878      	ldr	r0, [r7, #4]
 8009bce:	f000 f840 	bl	8009c52 <USBD_CtlError>
      break;
 8009bd2:	e000      	b.n	8009bd6 <USBD_ClrFeature+0x3c>
      break;
 8009bd4:	bf00      	nop
  }
}
 8009bd6:	bf00      	nop
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b084      	sub	sp, #16
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	6078      	str	r0, [r7, #4]
 8009be6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	781a      	ldrb	r2, [r3, #0]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	3301      	adds	r3, #1
 8009bf8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	781a      	ldrb	r2, [r3, #0]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	3301      	adds	r3, #1
 8009c06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009c08:	68f8      	ldr	r0, [r7, #12]
 8009c0a:	f7ff fa41 	bl	8009090 <SWAPBYTE>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	461a      	mov	r2, r3
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	3301      	adds	r3, #1
 8009c1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	3301      	adds	r3, #1
 8009c20:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009c22:	68f8      	ldr	r0, [r7, #12]
 8009c24:	f7ff fa34 	bl	8009090 <SWAPBYTE>
 8009c28:	4603      	mov	r3, r0
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	3301      	adds	r3, #1
 8009c34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	3301      	adds	r3, #1
 8009c3a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009c3c:	68f8      	ldr	r0, [r7, #12]
 8009c3e:	f7ff fa27 	bl	8009090 <SWAPBYTE>
 8009c42:	4603      	mov	r3, r0
 8009c44:	461a      	mov	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	80da      	strh	r2, [r3, #6]
}
 8009c4a:	bf00      	nop
 8009c4c:	3710      	adds	r7, #16
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	bd80      	pop	{r7, pc}

08009c52 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009c52:	b580      	push	{r7, lr}
 8009c54:	b082      	sub	sp, #8
 8009c56:	af00      	add	r7, sp, #0
 8009c58:	6078      	str	r0, [r7, #4]
 8009c5a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c5c:	2180      	movs	r1, #128	; 0x80
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 fce0 	bl	800a624 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009c64:	2100      	movs	r1, #0
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f000 fcdc 	bl	800a624 <USBD_LL_StallEP>
}
 8009c6c:	bf00      	nop
 8009c6e:	3708      	adds	r7, #8
 8009c70:	46bd      	mov	sp, r7
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b086      	sub	sp, #24
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	60f8      	str	r0, [r7, #12]
 8009c7c:	60b9      	str	r1, [r7, #8]
 8009c7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009c80:	2300      	movs	r3, #0
 8009c82:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d036      	beq.n	8009cf8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009c8e:	6938      	ldr	r0, [r7, #16]
 8009c90:	f000 f836 	bl	8009d00 <USBD_GetLen>
 8009c94:	4603      	mov	r3, r0
 8009c96:	3301      	adds	r3, #1
 8009c98:	b29b      	uxth	r3, r3
 8009c9a:	005b      	lsls	r3, r3, #1
 8009c9c:	b29a      	uxth	r2, r3
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009ca2:	7dfb      	ldrb	r3, [r7, #23]
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	4413      	add	r3, r2
 8009ca8:	687a      	ldr	r2, [r7, #4]
 8009caa:	7812      	ldrb	r2, [r2, #0]
 8009cac:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cae:	7dfb      	ldrb	r3, [r7, #23]
 8009cb0:	3301      	adds	r3, #1
 8009cb2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009cb4:	7dfb      	ldrb	r3, [r7, #23]
 8009cb6:	68ba      	ldr	r2, [r7, #8]
 8009cb8:	4413      	add	r3, r2
 8009cba:	2203      	movs	r2, #3
 8009cbc:	701a      	strb	r2, [r3, #0]
  idx++;
 8009cbe:	7dfb      	ldrb	r3, [r7, #23]
 8009cc0:	3301      	adds	r3, #1
 8009cc2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009cc4:	e013      	b.n	8009cee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009cc6:	7dfb      	ldrb	r3, [r7, #23]
 8009cc8:	68ba      	ldr	r2, [r7, #8]
 8009cca:	4413      	add	r3, r2
 8009ccc:	693a      	ldr	r2, [r7, #16]
 8009cce:	7812      	ldrb	r2, [r2, #0]
 8009cd0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	3301      	adds	r3, #1
 8009cd6:	613b      	str	r3, [r7, #16]
    idx++;
 8009cd8:	7dfb      	ldrb	r3, [r7, #23]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009cde:	7dfb      	ldrb	r3, [r7, #23]
 8009ce0:	68ba      	ldr	r2, [r7, #8]
 8009ce2:	4413      	add	r3, r2
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	701a      	strb	r2, [r3, #0]
    idx++;
 8009ce8:	7dfb      	ldrb	r3, [r7, #23]
 8009cea:	3301      	adds	r3, #1
 8009cec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009cee:	693b      	ldr	r3, [r7, #16]
 8009cf0:	781b      	ldrb	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1e7      	bne.n	8009cc6 <USBD_GetString+0x52>
 8009cf6:	e000      	b.n	8009cfa <USBD_GetString+0x86>
    return;
 8009cf8:	bf00      	nop
  }
}
 8009cfa:	3718      	adds	r7, #24
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}

08009d00 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b085      	sub	sp, #20
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009d10:	e005      	b.n	8009d1e <USBD_GetLen+0x1e>
  {
    len++;
 8009d12:	7bfb      	ldrb	r3, [r7, #15]
 8009d14:	3301      	adds	r3, #1
 8009d16:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	781b      	ldrb	r3, [r3, #0]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d1f5      	bne.n	8009d12 <USBD_GetLen+0x12>
  }

  return len;
 8009d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3714      	adds	r7, #20
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d32:	4770      	bx	lr

08009d34 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009d34:	b580      	push	{r7, lr}
 8009d36:	b084      	sub	sp, #16
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	60f8      	str	r0, [r7, #12]
 8009d3c:	60b9      	str	r1, [r7, #8]
 8009d3e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2202      	movs	r2, #2
 8009d44:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	68ba      	ldr	r2, [r7, #8]
 8009d58:	2100      	movs	r1, #0
 8009d5a:	68f8      	ldr	r0, [r7, #12]
 8009d5c:	f000 fceb 	bl	800a736 <USBD_LL_Transmit>

  return USBD_OK;
 8009d60:	2300      	movs	r3, #0
}
 8009d62:	4618      	mov	r0, r3
 8009d64:	3710      	adds	r7, #16
 8009d66:	46bd      	mov	sp, r7
 8009d68:	bd80      	pop	{r7, pc}

08009d6a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009d6a:	b580      	push	{r7, lr}
 8009d6c:	b084      	sub	sp, #16
 8009d6e:	af00      	add	r7, sp, #0
 8009d70:	60f8      	str	r0, [r7, #12]
 8009d72:	60b9      	str	r1, [r7, #8]
 8009d74:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	68ba      	ldr	r2, [r7, #8]
 8009d7a:	2100      	movs	r1, #0
 8009d7c:	68f8      	ldr	r0, [r7, #12]
 8009d7e:	f000 fcda 	bl	800a736 <USBD_LL_Transmit>

  return USBD_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2203      	movs	r2, #3
 8009d9c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	687a      	ldr	r2, [r7, #4]
 8009da4:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	687a      	ldr	r2, [r7, #4]
 8009dac:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	68ba      	ldr	r2, [r7, #8]
 8009db4:	2100      	movs	r1, #0
 8009db6:	68f8      	ldr	r0, [r7, #12]
 8009db8:	f000 fcde 	bl	800a778 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dbc:	2300      	movs	r3, #0
}
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	3710      	adds	r7, #16
 8009dc2:	46bd      	mov	sp, r7
 8009dc4:	bd80      	pop	{r7, pc}

08009dc6 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009dc6:	b580      	push	{r7, lr}
 8009dc8:	b084      	sub	sp, #16
 8009dca:	af00      	add	r7, sp, #0
 8009dcc:	60f8      	str	r0, [r7, #12]
 8009dce:	60b9      	str	r1, [r7, #8]
 8009dd0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	68ba      	ldr	r2, [r7, #8]
 8009dd6:	2100      	movs	r1, #0
 8009dd8:	68f8      	ldr	r0, [r7, #12]
 8009dda:	f000 fccd 	bl	800a778 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009dde:	2300      	movs	r3, #0
}
 8009de0:	4618      	mov	r0, r3
 8009de2:	3710      	adds	r7, #16
 8009de4:	46bd      	mov	sp, r7
 8009de6:	bd80      	pop	{r7, pc}

08009de8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b082      	sub	sp, #8
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2204      	movs	r2, #4
 8009df4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009df8:	2300      	movs	r3, #0
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	2100      	movs	r1, #0
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 fc99 	bl	800a736 <USBD_LL_Transmit>

  return USBD_OK;
 8009e04:	2300      	movs	r3, #0
}
 8009e06:	4618      	mov	r0, r3
 8009e08:	3708      	adds	r7, #8
 8009e0a:	46bd      	mov	sp, r7
 8009e0c:	bd80      	pop	{r7, pc}

08009e0e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b082      	sub	sp, #8
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2205      	movs	r2, #5
 8009e1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009e1e:	2300      	movs	r3, #0
 8009e20:	2200      	movs	r2, #0
 8009e22:	2100      	movs	r1, #0
 8009e24:	6878      	ldr	r0, [r7, #4]
 8009e26:	f000 fca7 	bl	800a778 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009e2a:	2300      	movs	r3, #0
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	3708      	adds	r7, #8
 8009e30:	46bd      	mov	sp, r7
 8009e32:	bd80      	pop	{r7, pc}

08009e34 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8009e38:	2200      	movs	r2, #0
 8009e3a:	4912      	ldr	r1, [pc, #72]	; (8009e84 <MX_USB_DEVICE_Init+0x50>)
 8009e3c:	4812      	ldr	r0, [pc, #72]	; (8009e88 <MX_USB_DEVICE_Init+0x54>)
 8009e3e:	f7fe fd07 	bl	8008850 <USBD_Init>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d001      	beq.n	8009e4c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8009e48:	f7f7 fd70 	bl	800192c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009e4c:	490f      	ldr	r1, [pc, #60]	; (8009e8c <MX_USB_DEVICE_Init+0x58>)
 8009e4e:	480e      	ldr	r0, [pc, #56]	; (8009e88 <MX_USB_DEVICE_Init+0x54>)
 8009e50:	f7fe fd2e 	bl	80088b0 <USBD_RegisterClass>
 8009e54:	4603      	mov	r3, r0
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d001      	beq.n	8009e5e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8009e5a:	f7f7 fd67 	bl	800192c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009e5e:	490c      	ldr	r1, [pc, #48]	; (8009e90 <MX_USB_DEVICE_Init+0x5c>)
 8009e60:	4809      	ldr	r0, [pc, #36]	; (8009e88 <MX_USB_DEVICE_Init+0x54>)
 8009e62:	f7fe fc1f 	bl	80086a4 <USBD_CDC_RegisterInterface>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d001      	beq.n	8009e70 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009e6c:	f7f7 fd5e 	bl	800192c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009e70:	4805      	ldr	r0, [pc, #20]	; (8009e88 <MX_USB_DEVICE_Init+0x54>)
 8009e72:	f7fe fd53 	bl	800891c <USBD_Start>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d001      	beq.n	8009e80 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009e7c:	f7f7 fd56 	bl	800192c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009e80:	bf00      	nop
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	200000ec 	.word	0x200000ec
 8009e88:	200006f0 	.word	0x200006f0
 8009e8c:	20000058 	.word	0x20000058
 8009e90:	200000d8 	.word	0x200000d8

08009e94 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009e98:	2200      	movs	r2, #0
 8009e9a:	4905      	ldr	r1, [pc, #20]	; (8009eb0 <CDC_Init_FS+0x1c>)
 8009e9c:	4805      	ldr	r0, [pc, #20]	; (8009eb4 <CDC_Init_FS+0x20>)
 8009e9e:	f7fe fc1b 	bl	80086d8 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009ea2:	4905      	ldr	r1, [pc, #20]	; (8009eb8 <CDC_Init_FS+0x24>)
 8009ea4:	4803      	ldr	r0, [pc, #12]	; (8009eb4 <CDC_Init_FS+0x20>)
 8009ea6:	f7fe fc39 	bl	800871c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8009eaa:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	bd80      	pop	{r7, pc}
 8009eb0:	200011cc 	.word	0x200011cc
 8009eb4:	200006f0 	.word	0x200006f0
 8009eb8:	200009cc 	.word	0x200009cc

08009ebc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009ec0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr

08009ecc <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	6039      	str	r1, [r7, #0]
 8009ed6:	71fb      	strb	r3, [r7, #7]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009edc:	79fb      	ldrb	r3, [r7, #7]
 8009ede:	2b23      	cmp	r3, #35	; 0x23
 8009ee0:	d84a      	bhi.n	8009f78 <CDC_Control_FS+0xac>
 8009ee2:	a201      	add	r2, pc, #4	; (adr r2, 8009ee8 <CDC_Control_FS+0x1c>)
 8009ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee8:	08009f79 	.word	0x08009f79
 8009eec:	08009f79 	.word	0x08009f79
 8009ef0:	08009f79 	.word	0x08009f79
 8009ef4:	08009f79 	.word	0x08009f79
 8009ef8:	08009f79 	.word	0x08009f79
 8009efc:	08009f79 	.word	0x08009f79
 8009f00:	08009f79 	.word	0x08009f79
 8009f04:	08009f79 	.word	0x08009f79
 8009f08:	08009f79 	.word	0x08009f79
 8009f0c:	08009f79 	.word	0x08009f79
 8009f10:	08009f79 	.word	0x08009f79
 8009f14:	08009f79 	.word	0x08009f79
 8009f18:	08009f79 	.word	0x08009f79
 8009f1c:	08009f79 	.word	0x08009f79
 8009f20:	08009f79 	.word	0x08009f79
 8009f24:	08009f79 	.word	0x08009f79
 8009f28:	08009f79 	.word	0x08009f79
 8009f2c:	08009f79 	.word	0x08009f79
 8009f30:	08009f79 	.word	0x08009f79
 8009f34:	08009f79 	.word	0x08009f79
 8009f38:	08009f79 	.word	0x08009f79
 8009f3c:	08009f79 	.word	0x08009f79
 8009f40:	08009f79 	.word	0x08009f79
 8009f44:	08009f79 	.word	0x08009f79
 8009f48:	08009f79 	.word	0x08009f79
 8009f4c:	08009f79 	.word	0x08009f79
 8009f50:	08009f79 	.word	0x08009f79
 8009f54:	08009f79 	.word	0x08009f79
 8009f58:	08009f79 	.word	0x08009f79
 8009f5c:	08009f79 	.word	0x08009f79
 8009f60:	08009f79 	.word	0x08009f79
 8009f64:	08009f79 	.word	0x08009f79
 8009f68:	08009f79 	.word	0x08009f79
 8009f6c:	08009f79 	.word	0x08009f79
 8009f70:	08009f79 	.word	0x08009f79
 8009f74:	08009f79 	.word	0x08009f79
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009f78:	bf00      	nop
  }

  return (USBD_OK);
 8009f7a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	370c      	adds	r7, #12
 8009f80:	46bd      	mov	sp, r7
 8009f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f86:	4770      	bx	lr

08009f88 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
 8009f90:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009f92:	6879      	ldr	r1, [r7, #4]
 8009f94:	4805      	ldr	r0, [pc, #20]	; (8009fac <CDC_Receive_FS+0x24>)
 8009f96:	f7fe fbc1 	bl	800871c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009f9a:	4804      	ldr	r0, [pc, #16]	; (8009fac <CDC_Receive_FS+0x24>)
 8009f9c:	f7fe fc22 	bl	80087e4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009fa0:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3708      	adds	r7, #8
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop
 8009fac:	200006f0 	.word	0x200006f0

08009fb0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
 8009fb8:	460b      	mov	r3, r1
 8009fba:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009fc0:	4b0d      	ldr	r3, [pc, #52]	; (8009ff8 <CDC_Transmit_FS+0x48>)
 8009fc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009fc6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d001      	beq.n	8009fd6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009fd2:	2301      	movs	r3, #1
 8009fd4:	e00b      	b.n	8009fee <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009fd6:	887b      	ldrh	r3, [r7, #2]
 8009fd8:	461a      	mov	r2, r3
 8009fda:	6879      	ldr	r1, [r7, #4]
 8009fdc:	4806      	ldr	r0, [pc, #24]	; (8009ff8 <CDC_Transmit_FS+0x48>)
 8009fde:	f7fe fb7b 	bl	80086d8 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009fe2:	4805      	ldr	r0, [pc, #20]	; (8009ff8 <CDC_Transmit_FS+0x48>)
 8009fe4:	f7fe fbb8 	bl	8008758 <USBD_CDC_TransmitPacket>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}
 8009ff6:	bf00      	nop
 8009ff8:	200006f0 	.word	0x200006f0

08009ffc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b087      	sub	sp, #28
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	4613      	mov	r3, r2
 800a008:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a00a:	2300      	movs	r3, #0
 800a00c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a00e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a012:	4618      	mov	r0, r3
 800a014:	371c      	adds	r7, #28
 800a016:	46bd      	mov	sp, r7
 800a018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a01c:	4770      	bx	lr
	...

0800a020 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a020:	b480      	push	{r7}
 800a022:	b083      	sub	sp, #12
 800a024:	af00      	add	r7, sp, #0
 800a026:	4603      	mov	r3, r0
 800a028:	6039      	str	r1, [r7, #0]
 800a02a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a02c:	683b      	ldr	r3, [r7, #0]
 800a02e:	2212      	movs	r2, #18
 800a030:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a032:	4b03      	ldr	r3, [pc, #12]	; (800a040 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a034:	4618      	mov	r0, r3
 800a036:	370c      	adds	r7, #12
 800a038:	46bd      	mov	sp, r7
 800a03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03e:	4770      	bx	lr
 800a040:	20000108 	.word	0x20000108

0800a044 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	4603      	mov	r3, r0
 800a04c:	6039      	str	r1, [r7, #0]
 800a04e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	2204      	movs	r2, #4
 800a054:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a056:	4b03      	ldr	r3, [pc, #12]	; (800a064 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a058:	4618      	mov	r0, r3
 800a05a:	370c      	adds	r7, #12
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr
 800a064:	2000011c 	.word	0x2000011c

0800a068 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b082      	sub	sp, #8
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	4603      	mov	r3, r0
 800a070:	6039      	str	r1, [r7, #0]
 800a072:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a074:	79fb      	ldrb	r3, [r7, #7]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d105      	bne.n	800a086 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a07a:	683a      	ldr	r2, [r7, #0]
 800a07c:	4907      	ldr	r1, [pc, #28]	; (800a09c <USBD_FS_ProductStrDescriptor+0x34>)
 800a07e:	4808      	ldr	r0, [pc, #32]	; (800a0a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a080:	f7ff fdf8 	bl	8009c74 <USBD_GetString>
 800a084:	e004      	b.n	800a090 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a086:	683a      	ldr	r2, [r7, #0]
 800a088:	4904      	ldr	r1, [pc, #16]	; (800a09c <USBD_FS_ProductStrDescriptor+0x34>)
 800a08a:	4805      	ldr	r0, [pc, #20]	; (800a0a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800a08c:	f7ff fdf2 	bl	8009c74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a090:	4b02      	ldr	r3, [pc, #8]	; (800a09c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a092:	4618      	mov	r0, r3
 800a094:	3708      	adds	r7, #8
 800a096:	46bd      	mov	sp, r7
 800a098:	bd80      	pop	{r7, pc}
 800a09a:	bf00      	nop
 800a09c:	200019cc 	.word	0x200019cc
 800a0a0:	0800d6b4 	.word	0x0800d6b4

0800a0a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b082      	sub	sp, #8
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	6039      	str	r1, [r7, #0]
 800a0ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a0b0:	683a      	ldr	r2, [r7, #0]
 800a0b2:	4904      	ldr	r1, [pc, #16]	; (800a0c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a0b4:	4804      	ldr	r0, [pc, #16]	; (800a0c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a0b6:	f7ff fddd 	bl	8009c74 <USBD_GetString>
  return USBD_StrDesc;
 800a0ba:	4b02      	ldr	r3, [pc, #8]	; (800a0c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a0bc:	4618      	mov	r0, r3
 800a0be:	3708      	adds	r7, #8
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	bd80      	pop	{r7, pc}
 800a0c4:	200019cc 	.word	0x200019cc
 800a0c8:	0800d6cc 	.word	0x0800d6cc

0800a0cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b082      	sub	sp, #8
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	6039      	str	r1, [r7, #0]
 800a0d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a0d8:	683b      	ldr	r3, [r7, #0]
 800a0da:	221a      	movs	r2, #26
 800a0dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a0de:	f000 f843 	bl	800a168 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a0e2:	4b02      	ldr	r3, [pc, #8]	; (800a0ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3708      	adds	r7, #8
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	bd80      	pop	{r7, pc}
 800a0ec:	20000120 	.word	0x20000120

0800a0f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	4603      	mov	r3, r0
 800a0f8:	6039      	str	r1, [r7, #0]
 800a0fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a0fc:	79fb      	ldrb	r3, [r7, #7]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d105      	bne.n	800a10e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	4907      	ldr	r1, [pc, #28]	; (800a124 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a106:	4808      	ldr	r0, [pc, #32]	; (800a128 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a108:	f7ff fdb4 	bl	8009c74 <USBD_GetString>
 800a10c:	e004      	b.n	800a118 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	4904      	ldr	r1, [pc, #16]	; (800a124 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a112:	4805      	ldr	r0, [pc, #20]	; (800a128 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a114:	f7ff fdae 	bl	8009c74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a118:	4b02      	ldr	r3, [pc, #8]	; (800a124 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a11a:	4618      	mov	r0, r3
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	200019cc 	.word	0x200019cc
 800a128:	0800d6e0 	.word	0x0800d6e0

0800a12c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	4603      	mov	r3, r0
 800a134:	6039      	str	r1, [r7, #0]
 800a136:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a138:	79fb      	ldrb	r3, [r7, #7]
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d105      	bne.n	800a14a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a13e:	683a      	ldr	r2, [r7, #0]
 800a140:	4907      	ldr	r1, [pc, #28]	; (800a160 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a142:	4808      	ldr	r0, [pc, #32]	; (800a164 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a144:	f7ff fd96 	bl	8009c74 <USBD_GetString>
 800a148:	e004      	b.n	800a154 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	4904      	ldr	r1, [pc, #16]	; (800a160 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a14e:	4805      	ldr	r0, [pc, #20]	; (800a164 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a150:	f7ff fd90 	bl	8009c74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800a154:	4b02      	ldr	r3, [pc, #8]	; (800a160 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a156:	4618      	mov	r0, r3
 800a158:	3708      	adds	r7, #8
 800a15a:	46bd      	mov	sp, r7
 800a15c:	bd80      	pop	{r7, pc}
 800a15e:	bf00      	nop
 800a160:	200019cc 	.word	0x200019cc
 800a164:	0800d6ec 	.word	0x0800d6ec

0800a168 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a16e:	4b0f      	ldr	r3, [pc, #60]	; (800a1ac <Get_SerialNum+0x44>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a174:	4b0e      	ldr	r3, [pc, #56]	; (800a1b0 <Get_SerialNum+0x48>)
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a17a:	4b0e      	ldr	r3, [pc, #56]	; (800a1b4 <Get_SerialNum+0x4c>)
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a180:	68fa      	ldr	r2, [r7, #12]
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	4413      	add	r3, r2
 800a186:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d009      	beq.n	800a1a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a18e:	2208      	movs	r2, #8
 800a190:	4909      	ldr	r1, [pc, #36]	; (800a1b8 <Get_SerialNum+0x50>)
 800a192:	68f8      	ldr	r0, [r7, #12]
 800a194:	f000 f814 	bl	800a1c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a198:	2204      	movs	r2, #4
 800a19a:	4908      	ldr	r1, [pc, #32]	; (800a1bc <Get_SerialNum+0x54>)
 800a19c:	68b8      	ldr	r0, [r7, #8]
 800a19e:	f000 f80f 	bl	800a1c0 <IntToUnicode>
  }
}
 800a1a2:	bf00      	nop
 800a1a4:	3710      	adds	r7, #16
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	bd80      	pop	{r7, pc}
 800a1aa:	bf00      	nop
 800a1ac:	1fff7a10 	.word	0x1fff7a10
 800a1b0:	1fff7a14 	.word	0x1fff7a14
 800a1b4:	1fff7a18 	.word	0x1fff7a18
 800a1b8:	20000122 	.word	0x20000122
 800a1bc:	20000132 	.word	0x20000132

0800a1c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b087      	sub	sp, #28
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	60f8      	str	r0, [r7, #12]
 800a1c8:	60b9      	str	r1, [r7, #8]
 800a1ca:	4613      	mov	r3, r2
 800a1cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	75fb      	strb	r3, [r7, #23]
 800a1d6:	e027      	b.n	800a228 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	0f1b      	lsrs	r3, r3, #28
 800a1dc:	2b09      	cmp	r3, #9
 800a1de:	d80b      	bhi.n	800a1f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	0f1b      	lsrs	r3, r3, #28
 800a1e4:	b2da      	uxtb	r2, r3
 800a1e6:	7dfb      	ldrb	r3, [r7, #23]
 800a1e8:	005b      	lsls	r3, r3, #1
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	68bb      	ldr	r3, [r7, #8]
 800a1ee:	440b      	add	r3, r1
 800a1f0:	3230      	adds	r2, #48	; 0x30
 800a1f2:	b2d2      	uxtb	r2, r2
 800a1f4:	701a      	strb	r2, [r3, #0]
 800a1f6:	e00a      	b.n	800a20e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	0f1b      	lsrs	r3, r3, #28
 800a1fc:	b2da      	uxtb	r2, r3
 800a1fe:	7dfb      	ldrb	r3, [r7, #23]
 800a200:	005b      	lsls	r3, r3, #1
 800a202:	4619      	mov	r1, r3
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	440b      	add	r3, r1
 800a208:	3237      	adds	r2, #55	; 0x37
 800a20a:	b2d2      	uxtb	r2, r2
 800a20c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	011b      	lsls	r3, r3, #4
 800a212:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a214:	7dfb      	ldrb	r3, [r7, #23]
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	3301      	adds	r3, #1
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	4413      	add	r3, r2
 800a21e:	2200      	movs	r2, #0
 800a220:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a222:	7dfb      	ldrb	r3, [r7, #23]
 800a224:	3301      	adds	r3, #1
 800a226:	75fb      	strb	r3, [r7, #23]
 800a228:	7dfa      	ldrb	r2, [r7, #23]
 800a22a:	79fb      	ldrb	r3, [r7, #7]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d3d3      	bcc.n	800a1d8 <IntToUnicode+0x18>
  }
}
 800a230:	bf00      	nop
 800a232:	bf00      	nop
 800a234:	371c      	adds	r7, #28
 800a236:	46bd      	mov	sp, r7
 800a238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a23c:	4770      	bx	lr
	...

0800a240 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b08a      	sub	sp, #40	; 0x28
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a248:	f107 0314 	add.w	r3, r7, #20
 800a24c:	2200      	movs	r2, #0
 800a24e:	601a      	str	r2, [r3, #0]
 800a250:	605a      	str	r2, [r3, #4]
 800a252:	609a      	str	r2, [r3, #8]
 800a254:	60da      	str	r2, [r3, #12]
 800a256:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a260:	d13a      	bne.n	800a2d8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a262:	2300      	movs	r3, #0
 800a264:	613b      	str	r3, [r7, #16]
 800a266:	4b1e      	ldr	r3, [pc, #120]	; (800a2e0 <HAL_PCD_MspInit+0xa0>)
 800a268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a26a:	4a1d      	ldr	r2, [pc, #116]	; (800a2e0 <HAL_PCD_MspInit+0xa0>)
 800a26c:	f043 0301 	orr.w	r3, r3, #1
 800a270:	6313      	str	r3, [r2, #48]	; 0x30
 800a272:	4b1b      	ldr	r3, [pc, #108]	; (800a2e0 <HAL_PCD_MspInit+0xa0>)
 800a274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a276:	f003 0301 	and.w	r3, r3, #1
 800a27a:	613b      	str	r3, [r7, #16]
 800a27c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a27e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a282:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a284:	2302      	movs	r3, #2
 800a286:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a288:	2300      	movs	r3, #0
 800a28a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a28c:	2303      	movs	r3, #3
 800a28e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a290:	230a      	movs	r3, #10
 800a292:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a294:	f107 0314 	add.w	r3, r7, #20
 800a298:	4619      	mov	r1, r3
 800a29a:	4812      	ldr	r0, [pc, #72]	; (800a2e4 <HAL_PCD_MspInit+0xa4>)
 800a29c:	f7f9 f8be 	bl	800341c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a2a0:	4b0f      	ldr	r3, [pc, #60]	; (800a2e0 <HAL_PCD_MspInit+0xa0>)
 800a2a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2a4:	4a0e      	ldr	r2, [pc, #56]	; (800a2e0 <HAL_PCD_MspInit+0xa0>)
 800a2a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2aa:	6353      	str	r3, [r2, #52]	; 0x34
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	60fb      	str	r3, [r7, #12]
 800a2b0:	4b0b      	ldr	r3, [pc, #44]	; (800a2e0 <HAL_PCD_MspInit+0xa0>)
 800a2b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2b4:	4a0a      	ldr	r2, [pc, #40]	; (800a2e0 <HAL_PCD_MspInit+0xa0>)
 800a2b6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a2ba:	6453      	str	r3, [r2, #68]	; 0x44
 800a2bc:	4b08      	ldr	r3, [pc, #32]	; (800a2e0 <HAL_PCD_MspInit+0xa0>)
 800a2be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a2c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a2c4:	60fb      	str	r3, [r7, #12]
 800a2c6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2100      	movs	r1, #0
 800a2cc:	2043      	movs	r0, #67	; 0x43
 800a2ce:	f7f8 fcfe 	bl	8002cce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a2d2:	2043      	movs	r0, #67	; 0x43
 800a2d4:	f7f8 fd17 	bl	8002d06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a2d8:	bf00      	nop
 800a2da:	3728      	adds	r7, #40	; 0x28
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	bd80      	pop	{r7, pc}
 800a2e0:	40023800 	.word	0x40023800
 800a2e4:	40020000 	.word	0x40020000

0800a2e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b082      	sub	sp, #8
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a2fc:	4619      	mov	r1, r3
 800a2fe:	4610      	mov	r0, r2
 800a300:	f7fe fb59 	bl	80089b6 <USBD_LL_SetupStage>
}
 800a304:	bf00      	nop
 800a306:	3708      	adds	r7, #8
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b082      	sub	sp, #8
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
 800a314:	460b      	mov	r3, r1
 800a316:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a318:	687b      	ldr	r3, [r7, #4]
 800a31a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a31e:	78fa      	ldrb	r2, [r7, #3]
 800a320:	6879      	ldr	r1, [r7, #4]
 800a322:	4613      	mov	r3, r2
 800a324:	00db      	lsls	r3, r3, #3
 800a326:	4413      	add	r3, r2
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	440b      	add	r3, r1
 800a32c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a330:	681a      	ldr	r2, [r3, #0]
 800a332:	78fb      	ldrb	r3, [r7, #3]
 800a334:	4619      	mov	r1, r3
 800a336:	f7fe fb93 	bl	8008a60 <USBD_LL_DataOutStage>
}
 800a33a:	bf00      	nop
 800a33c:	3708      	adds	r7, #8
 800a33e:	46bd      	mov	sp, r7
 800a340:	bd80      	pop	{r7, pc}

0800a342 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a342:	b580      	push	{r7, lr}
 800a344:	b082      	sub	sp, #8
 800a346:	af00      	add	r7, sp, #0
 800a348:	6078      	str	r0, [r7, #4]
 800a34a:	460b      	mov	r3, r1
 800a34c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a354:	78fa      	ldrb	r2, [r7, #3]
 800a356:	6879      	ldr	r1, [r7, #4]
 800a358:	4613      	mov	r3, r2
 800a35a:	00db      	lsls	r3, r3, #3
 800a35c:	4413      	add	r3, r2
 800a35e:	009b      	lsls	r3, r3, #2
 800a360:	440b      	add	r3, r1
 800a362:	334c      	adds	r3, #76	; 0x4c
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	78fb      	ldrb	r3, [r7, #3]
 800a368:	4619      	mov	r1, r3
 800a36a:	f7fe fc2c 	bl	8008bc6 <USBD_LL_DataInStage>
}
 800a36e:	bf00      	nop
 800a370:	3708      	adds	r7, #8
 800a372:	46bd      	mov	sp, r7
 800a374:	bd80      	pop	{r7, pc}

0800a376 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a376:	b580      	push	{r7, lr}
 800a378:	b082      	sub	sp, #8
 800a37a:	af00      	add	r7, sp, #0
 800a37c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a384:	4618      	mov	r0, r3
 800a386:	f7fe fd60 	bl	8008e4a <USBD_LL_SOF>
}
 800a38a:	bf00      	nop
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}

0800a392 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a392:	b580      	push	{r7, lr}
 800a394:	b084      	sub	sp, #16
 800a396:	af00      	add	r7, sp, #0
 800a398:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a39a:	2301      	movs	r3, #1
 800a39c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d102      	bne.n	800a3ac <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	73fb      	strb	r3, [r7, #15]
 800a3aa:	e008      	b.n	800a3be <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	68db      	ldr	r3, [r3, #12]
 800a3b0:	2b02      	cmp	r3, #2
 800a3b2:	d102      	bne.n	800a3ba <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	73fb      	strb	r3, [r7, #15]
 800a3b8:	e001      	b.n	800a3be <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800a3ba:	f7f7 fab7 	bl	800192c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3c4:	7bfa      	ldrb	r2, [r7, #15]
 800a3c6:	4611      	mov	r1, r2
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7fe fd00 	bl	8008dce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f7fe fca8 	bl	8008d2a <USBD_LL_Reset>
}
 800a3da:	bf00      	nop
 800a3dc:	3710      	adds	r7, #16
 800a3de:	46bd      	mov	sp, r7
 800a3e0:	bd80      	pop	{r7, pc}
	...

0800a3e4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7fe fcfb 	bl	8008dee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	6812      	ldr	r2, [r2, #0]
 800a406:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a40a:	f043 0301 	orr.w	r3, r3, #1
 800a40e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6a1b      	ldr	r3, [r3, #32]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d005      	beq.n	800a424 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a418:	4b04      	ldr	r3, [pc, #16]	; (800a42c <HAL_PCD_SuspendCallback+0x48>)
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	4a03      	ldr	r2, [pc, #12]	; (800a42c <HAL_PCD_SuspendCallback+0x48>)
 800a41e:	f043 0306 	orr.w	r3, r3, #6
 800a422:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a424:	bf00      	nop
 800a426:	3708      	adds	r7, #8
 800a428:	46bd      	mov	sp, r7
 800a42a:	bd80      	pop	{r7, pc}
 800a42c:	e000ed00 	.word	0xe000ed00

0800a430 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a43e:	4618      	mov	r0, r3
 800a440:	f7fe fceb 	bl	8008e1a <USBD_LL_Resume>
}
 800a444:	bf00      	nop
 800a446:	3708      	adds	r7, #8
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	460b      	mov	r3, r1
 800a456:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a45e:	78fa      	ldrb	r2, [r7, #3]
 800a460:	4611      	mov	r1, r2
 800a462:	4618      	mov	r0, r3
 800a464:	f7fe fd43 	bl	8008eee <USBD_LL_IsoOUTIncomplete>
}
 800a468:	bf00      	nop
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b082      	sub	sp, #8
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	460b      	mov	r3, r1
 800a47a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a482:	78fa      	ldrb	r2, [r7, #3]
 800a484:	4611      	mov	r1, r2
 800a486:	4618      	mov	r0, r3
 800a488:	f7fe fcff 	bl	8008e8a <USBD_LL_IsoINIncomplete>
}
 800a48c:	bf00      	nop
 800a48e:	3708      	adds	r7, #8
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}

0800a494 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a494:	b580      	push	{r7, lr}
 800a496:	b082      	sub	sp, #8
 800a498:	af00      	add	r7, sp, #0
 800a49a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	f7fe fd55 	bl	8008f52 <USBD_LL_DevConnected>
}
 800a4a8:	bf00      	nop
 800a4aa:	3708      	adds	r7, #8
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	bd80      	pop	{r7, pc}

0800a4b0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4b0:	b580      	push	{r7, lr}
 800a4b2:	b082      	sub	sp, #8
 800a4b4:	af00      	add	r7, sp, #0
 800a4b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a4be:	4618      	mov	r0, r3
 800a4c0:	f7fe fd52 	bl	8008f68 <USBD_LL_DevDisconnected>
}
 800a4c4:	bf00      	nop
 800a4c6:	3708      	adds	r7, #8
 800a4c8:	46bd      	mov	sp, r7
 800a4ca:	bd80      	pop	{r7, pc}

0800a4cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a4cc:	b580      	push	{r7, lr}
 800a4ce:	b082      	sub	sp, #8
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	781b      	ldrb	r3, [r3, #0]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d13c      	bne.n	800a556 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a4dc:	4a20      	ldr	r2, [pc, #128]	; (800a560 <USBD_LL_Init+0x94>)
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	4a1e      	ldr	r2, [pc, #120]	; (800a560 <USBD_LL_Init+0x94>)
 800a4e8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a4ec:	4b1c      	ldr	r3, [pc, #112]	; (800a560 <USBD_LL_Init+0x94>)
 800a4ee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a4f2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a4f4:	4b1a      	ldr	r3, [pc, #104]	; (800a560 <USBD_LL_Init+0x94>)
 800a4f6:	2204      	movs	r2, #4
 800a4f8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a4fa:	4b19      	ldr	r3, [pc, #100]	; (800a560 <USBD_LL_Init+0x94>)
 800a4fc:	2202      	movs	r2, #2
 800a4fe:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a500:	4b17      	ldr	r3, [pc, #92]	; (800a560 <USBD_LL_Init+0x94>)
 800a502:	2200      	movs	r2, #0
 800a504:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a506:	4b16      	ldr	r3, [pc, #88]	; (800a560 <USBD_LL_Init+0x94>)
 800a508:	2202      	movs	r2, #2
 800a50a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a50c:	4b14      	ldr	r3, [pc, #80]	; (800a560 <USBD_LL_Init+0x94>)
 800a50e:	2200      	movs	r2, #0
 800a510:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a512:	4b13      	ldr	r3, [pc, #76]	; (800a560 <USBD_LL_Init+0x94>)
 800a514:	2200      	movs	r2, #0
 800a516:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a518:	4b11      	ldr	r3, [pc, #68]	; (800a560 <USBD_LL_Init+0x94>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800a51e:	4b10      	ldr	r3, [pc, #64]	; (800a560 <USBD_LL_Init+0x94>)
 800a520:	2200      	movs	r2, #0
 800a522:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a524:	4b0e      	ldr	r3, [pc, #56]	; (800a560 <USBD_LL_Init+0x94>)
 800a526:	2200      	movs	r2, #0
 800a528:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a52a:	480d      	ldr	r0, [pc, #52]	; (800a560 <USBD_LL_Init+0x94>)
 800a52c:	f7f9 fa56 	bl	80039dc <HAL_PCD_Init>
 800a530:	4603      	mov	r3, r0
 800a532:	2b00      	cmp	r3, #0
 800a534:	d001      	beq.n	800a53a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a536:	f7f7 f9f9 	bl	800192c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a53a:	2180      	movs	r1, #128	; 0x80
 800a53c:	4808      	ldr	r0, [pc, #32]	; (800a560 <USBD_LL_Init+0x94>)
 800a53e:	f7fa fcae 	bl	8004e9e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a542:	2240      	movs	r2, #64	; 0x40
 800a544:	2100      	movs	r1, #0
 800a546:	4806      	ldr	r0, [pc, #24]	; (800a560 <USBD_LL_Init+0x94>)
 800a548:	f7fa fc62 	bl	8004e10 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a54c:	2280      	movs	r2, #128	; 0x80
 800a54e:	2101      	movs	r1, #1
 800a550:	4803      	ldr	r0, [pc, #12]	; (800a560 <USBD_LL_Init+0x94>)
 800a552:	f7fa fc5d 	bl	8004e10 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a556:	2300      	movs	r3, #0
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3708      	adds	r7, #8
 800a55c:	46bd      	mov	sp, r7
 800a55e:	bd80      	pop	{r7, pc}
 800a560:	20001bcc 	.word	0x20001bcc

0800a564 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a564:	b580      	push	{r7, lr}
 800a566:	b084      	sub	sp, #16
 800a568:	af00      	add	r7, sp, #0
 800a56a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a56c:	2300      	movs	r3, #0
 800a56e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a570:	2300      	movs	r3, #0
 800a572:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a57a:	4618      	mov	r0, r3
 800a57c:	f7f9 fb4b 	bl	8003c16 <HAL_PCD_Start>
 800a580:	4603      	mov	r3, r0
 800a582:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a584:	7bfb      	ldrb	r3, [r7, #15]
 800a586:	4618      	mov	r0, r3
 800a588:	f000 f942 	bl	800a810 <USBD_Get_USB_Status>
 800a58c:	4603      	mov	r3, r0
 800a58e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a590:	7bbb      	ldrb	r3, [r7, #14]
}
 800a592:	4618      	mov	r0, r3
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}

0800a59a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a59a:	b580      	push	{r7, lr}
 800a59c:	b084      	sub	sp, #16
 800a59e:	af00      	add	r7, sp, #0
 800a5a0:	6078      	str	r0, [r7, #4]
 800a5a2:	4608      	mov	r0, r1
 800a5a4:	4611      	mov	r1, r2
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	70fb      	strb	r3, [r7, #3]
 800a5ac:	460b      	mov	r3, r1
 800a5ae:	70bb      	strb	r3, [r7, #2]
 800a5b0:	4613      	mov	r3, r2
 800a5b2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a5c2:	78bb      	ldrb	r3, [r7, #2]
 800a5c4:	883a      	ldrh	r2, [r7, #0]
 800a5c6:	78f9      	ldrb	r1, [r7, #3]
 800a5c8:	f7fa f81c 	bl	8004604 <HAL_PCD_EP_Open>
 800a5cc:	4603      	mov	r3, r0
 800a5ce:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5d0:	7bfb      	ldrb	r3, [r7, #15]
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f000 f91c 	bl	800a810 <USBD_Get_USB_Status>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a5dc:	7bbb      	ldrb	r3, [r7, #14]
}
 800a5de:	4618      	mov	r0, r3
 800a5e0:	3710      	adds	r7, #16
 800a5e2:	46bd      	mov	sp, r7
 800a5e4:	bd80      	pop	{r7, pc}

0800a5e6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a5e6:	b580      	push	{r7, lr}
 800a5e8:	b084      	sub	sp, #16
 800a5ea:	af00      	add	r7, sp, #0
 800a5ec:	6078      	str	r0, [r7, #4]
 800a5ee:	460b      	mov	r3, r1
 800a5f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a600:	78fa      	ldrb	r2, [r7, #3]
 800a602:	4611      	mov	r1, r2
 800a604:	4618      	mov	r0, r3
 800a606:	f7fa f865 	bl	80046d4 <HAL_PCD_EP_Close>
 800a60a:	4603      	mov	r3, r0
 800a60c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a60e:	7bfb      	ldrb	r3, [r7, #15]
 800a610:	4618      	mov	r0, r3
 800a612:	f000 f8fd 	bl	800a810 <USBD_Get_USB_Status>
 800a616:	4603      	mov	r3, r0
 800a618:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a61a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3710      	adds	r7, #16
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a624:	b580      	push	{r7, lr}
 800a626:	b084      	sub	sp, #16
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	460b      	mov	r3, r1
 800a62e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a634:	2300      	movs	r3, #0
 800a636:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a63e:	78fa      	ldrb	r2, [r7, #3]
 800a640:	4611      	mov	r1, r2
 800a642:	4618      	mov	r0, r3
 800a644:	f7fa f93d 	bl	80048c2 <HAL_PCD_EP_SetStall>
 800a648:	4603      	mov	r3, r0
 800a64a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a64c:	7bfb      	ldrb	r3, [r7, #15]
 800a64e:	4618      	mov	r0, r3
 800a650:	f000 f8de 	bl	800a810 <USBD_Get_USB_Status>
 800a654:	4603      	mov	r3, r0
 800a656:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a658:	7bbb      	ldrb	r3, [r7, #14]
}
 800a65a:	4618      	mov	r0, r3
 800a65c:	3710      	adds	r7, #16
 800a65e:	46bd      	mov	sp, r7
 800a660:	bd80      	pop	{r7, pc}

0800a662 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a662:	b580      	push	{r7, lr}
 800a664:	b084      	sub	sp, #16
 800a666:	af00      	add	r7, sp, #0
 800a668:	6078      	str	r0, [r7, #4]
 800a66a:	460b      	mov	r3, r1
 800a66c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a66e:	2300      	movs	r3, #0
 800a670:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a672:	2300      	movs	r3, #0
 800a674:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a67c:	78fa      	ldrb	r2, [r7, #3]
 800a67e:	4611      	mov	r1, r2
 800a680:	4618      	mov	r0, r3
 800a682:	f7fa f982 	bl	800498a <HAL_PCD_EP_ClrStall>
 800a686:	4603      	mov	r3, r0
 800a688:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a68a:	7bfb      	ldrb	r3, [r7, #15]
 800a68c:	4618      	mov	r0, r3
 800a68e:	f000 f8bf 	bl	800a810 <USBD_Get_USB_Status>
 800a692:	4603      	mov	r3, r0
 800a694:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a696:	7bbb      	ldrb	r3, [r7, #14]
}
 800a698:	4618      	mov	r0, r3
 800a69a:	3710      	adds	r7, #16
 800a69c:	46bd      	mov	sp, r7
 800a69e:	bd80      	pop	{r7, pc}

0800a6a0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	460b      	mov	r3, r1
 800a6aa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a6b2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a6b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	da0b      	bge.n	800a6d4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a6bc:	78fb      	ldrb	r3, [r7, #3]
 800a6be:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6c2:	68f9      	ldr	r1, [r7, #12]
 800a6c4:	4613      	mov	r3, r2
 800a6c6:	00db      	lsls	r3, r3, #3
 800a6c8:	4413      	add	r3, r2
 800a6ca:	009b      	lsls	r3, r3, #2
 800a6cc:	440b      	add	r3, r1
 800a6ce:	333e      	adds	r3, #62	; 0x3e
 800a6d0:	781b      	ldrb	r3, [r3, #0]
 800a6d2:	e00b      	b.n	800a6ec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a6d4:	78fb      	ldrb	r3, [r7, #3]
 800a6d6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a6da:	68f9      	ldr	r1, [r7, #12]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	00db      	lsls	r3, r3, #3
 800a6e0:	4413      	add	r3, r2
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	440b      	add	r3, r1
 800a6e6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a6ea:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a6ec:	4618      	mov	r0, r3
 800a6ee:	3714      	adds	r7, #20
 800a6f0:	46bd      	mov	sp, r7
 800a6f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f6:	4770      	bx	lr

0800a6f8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
 800a700:	460b      	mov	r3, r1
 800a702:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a704:	2300      	movs	r3, #0
 800a706:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a708:	2300      	movs	r3, #0
 800a70a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a712:	78fa      	ldrb	r2, [r7, #3]
 800a714:	4611      	mov	r1, r2
 800a716:	4618      	mov	r0, r3
 800a718:	f7f9 ff4f 	bl	80045ba <HAL_PCD_SetAddress>
 800a71c:	4603      	mov	r3, r0
 800a71e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a720:	7bfb      	ldrb	r3, [r7, #15]
 800a722:	4618      	mov	r0, r3
 800a724:	f000 f874 	bl	800a810 <USBD_Get_USB_Status>
 800a728:	4603      	mov	r3, r0
 800a72a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a72c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3710      	adds	r7, #16
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}

0800a736 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a736:	b580      	push	{r7, lr}
 800a738:	b086      	sub	sp, #24
 800a73a:	af00      	add	r7, sp, #0
 800a73c:	60f8      	str	r0, [r7, #12]
 800a73e:	607a      	str	r2, [r7, #4]
 800a740:	603b      	str	r3, [r7, #0]
 800a742:	460b      	mov	r3, r1
 800a744:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a746:	2300      	movs	r3, #0
 800a748:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a74a:	2300      	movs	r3, #0
 800a74c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a754:	7af9      	ldrb	r1, [r7, #11]
 800a756:	683b      	ldr	r3, [r7, #0]
 800a758:	687a      	ldr	r2, [r7, #4]
 800a75a:	f7fa f868 	bl	800482e <HAL_PCD_EP_Transmit>
 800a75e:	4603      	mov	r3, r0
 800a760:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a762:	7dfb      	ldrb	r3, [r7, #23]
 800a764:	4618      	mov	r0, r3
 800a766:	f000 f853 	bl	800a810 <USBD_Get_USB_Status>
 800a76a:	4603      	mov	r3, r0
 800a76c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a76e:	7dbb      	ldrb	r3, [r7, #22]
}
 800a770:	4618      	mov	r0, r3
 800a772:	3718      	adds	r7, #24
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a778:	b580      	push	{r7, lr}
 800a77a:	b086      	sub	sp, #24
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	60f8      	str	r0, [r7, #12]
 800a780:	607a      	str	r2, [r7, #4]
 800a782:	603b      	str	r3, [r7, #0]
 800a784:	460b      	mov	r3, r1
 800a786:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a788:	2300      	movs	r3, #0
 800a78a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a78c:	2300      	movs	r3, #0
 800a78e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a796:	7af9      	ldrb	r1, [r7, #11]
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	f7f9 ffe4 	bl	8004768 <HAL_PCD_EP_Receive>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7a4:	7dfb      	ldrb	r3, [r7, #23]
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	f000 f832 	bl	800a810 <USBD_Get_USB_Status>
 800a7ac:	4603      	mov	r3, r0
 800a7ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7b0:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7b2:	4618      	mov	r0, r3
 800a7b4:	3718      	adds	r7, #24
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}

0800a7ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a7ba:	b580      	push	{r7, lr}
 800a7bc:	b082      	sub	sp, #8
 800a7be:	af00      	add	r7, sp, #0
 800a7c0:	6078      	str	r0, [r7, #4]
 800a7c2:	460b      	mov	r3, r1
 800a7c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a7cc:	78fa      	ldrb	r2, [r7, #3]
 800a7ce:	4611      	mov	r1, r2
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f7fa f814 	bl	80047fe <HAL_PCD_EP_GetRxCount>
 800a7d6:	4603      	mov	r3, r0
}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	3708      	adds	r7, #8
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd80      	pop	{r7, pc}

0800a7e0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a7e8:	4b03      	ldr	r3, [pc, #12]	; (800a7f8 <USBD_static_malloc+0x18>)
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	370c      	adds	r7, #12
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f4:	4770      	bx	lr
 800a7f6:	bf00      	nop
 800a7f8:	200020d8 	.word	0x200020d8

0800a7fc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]

}
 800a804:	bf00      	nop
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a810:	b480      	push	{r7}
 800a812:	b085      	sub	sp, #20
 800a814:	af00      	add	r7, sp, #0
 800a816:	4603      	mov	r3, r0
 800a818:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a81e:	79fb      	ldrb	r3, [r7, #7]
 800a820:	2b03      	cmp	r3, #3
 800a822:	d817      	bhi.n	800a854 <USBD_Get_USB_Status+0x44>
 800a824:	a201      	add	r2, pc, #4	; (adr r2, 800a82c <USBD_Get_USB_Status+0x1c>)
 800a826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a82a:	bf00      	nop
 800a82c:	0800a83d 	.word	0x0800a83d
 800a830:	0800a843 	.word	0x0800a843
 800a834:	0800a849 	.word	0x0800a849
 800a838:	0800a84f 	.word	0x0800a84f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a83c:	2300      	movs	r3, #0
 800a83e:	73fb      	strb	r3, [r7, #15]
    break;
 800a840:	e00b      	b.n	800a85a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a842:	2303      	movs	r3, #3
 800a844:	73fb      	strb	r3, [r7, #15]
    break;
 800a846:	e008      	b.n	800a85a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a848:	2301      	movs	r3, #1
 800a84a:	73fb      	strb	r3, [r7, #15]
    break;
 800a84c:	e005      	b.n	800a85a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a84e:	2303      	movs	r3, #3
 800a850:	73fb      	strb	r3, [r7, #15]
    break;
 800a852:	e002      	b.n	800a85a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a854:	2303      	movs	r3, #3
 800a856:	73fb      	strb	r3, [r7, #15]
    break;
 800a858:	bf00      	nop
  }
  return usb_status;
 800a85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <__errno>:
 800a868:	4b01      	ldr	r3, [pc, #4]	; (800a870 <__errno+0x8>)
 800a86a:	6818      	ldr	r0, [r3, #0]
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	2000013c 	.word	0x2000013c

0800a874 <__libc_init_array>:
 800a874:	b570      	push	{r4, r5, r6, lr}
 800a876:	4d0d      	ldr	r5, [pc, #52]	; (800a8ac <__libc_init_array+0x38>)
 800a878:	4c0d      	ldr	r4, [pc, #52]	; (800a8b0 <__libc_init_array+0x3c>)
 800a87a:	1b64      	subs	r4, r4, r5
 800a87c:	10a4      	asrs	r4, r4, #2
 800a87e:	2600      	movs	r6, #0
 800a880:	42a6      	cmp	r6, r4
 800a882:	d109      	bne.n	800a898 <__libc_init_array+0x24>
 800a884:	4d0b      	ldr	r5, [pc, #44]	; (800a8b4 <__libc_init_array+0x40>)
 800a886:	4c0c      	ldr	r4, [pc, #48]	; (800a8b8 <__libc_init_array+0x44>)
 800a888:	f002 ff02 	bl	800d690 <_init>
 800a88c:	1b64      	subs	r4, r4, r5
 800a88e:	10a4      	asrs	r4, r4, #2
 800a890:	2600      	movs	r6, #0
 800a892:	42a6      	cmp	r6, r4
 800a894:	d105      	bne.n	800a8a2 <__libc_init_array+0x2e>
 800a896:	bd70      	pop	{r4, r5, r6, pc}
 800a898:	f855 3b04 	ldr.w	r3, [r5], #4
 800a89c:	4798      	blx	r3
 800a89e:	3601      	adds	r6, #1
 800a8a0:	e7ee      	b.n	800a880 <__libc_init_array+0xc>
 800a8a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800a8a6:	4798      	blx	r3
 800a8a8:	3601      	adds	r6, #1
 800a8aa:	e7f2      	b.n	800a892 <__libc_init_array+0x1e>
 800a8ac:	0800dafc 	.word	0x0800dafc
 800a8b0:	0800dafc 	.word	0x0800dafc
 800a8b4:	0800dafc 	.word	0x0800dafc
 800a8b8:	0800db00 	.word	0x0800db00

0800a8bc <memset>:
 800a8bc:	4402      	add	r2, r0
 800a8be:	4603      	mov	r3, r0
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d100      	bne.n	800a8c6 <memset+0xa>
 800a8c4:	4770      	bx	lr
 800a8c6:	f803 1b01 	strb.w	r1, [r3], #1
 800a8ca:	e7f9      	b.n	800a8c0 <memset+0x4>

0800a8cc <__cvt>:
 800a8cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a8d0:	ec55 4b10 	vmov	r4, r5, d0
 800a8d4:	2d00      	cmp	r5, #0
 800a8d6:	460e      	mov	r6, r1
 800a8d8:	4619      	mov	r1, r3
 800a8da:	462b      	mov	r3, r5
 800a8dc:	bfbb      	ittet	lt
 800a8de:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a8e2:	461d      	movlt	r5, r3
 800a8e4:	2300      	movge	r3, #0
 800a8e6:	232d      	movlt	r3, #45	; 0x2d
 800a8e8:	700b      	strb	r3, [r1, #0]
 800a8ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a8ec:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a8f0:	4691      	mov	r9, r2
 800a8f2:	f023 0820 	bic.w	r8, r3, #32
 800a8f6:	bfbc      	itt	lt
 800a8f8:	4622      	movlt	r2, r4
 800a8fa:	4614      	movlt	r4, r2
 800a8fc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a900:	d005      	beq.n	800a90e <__cvt+0x42>
 800a902:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a906:	d100      	bne.n	800a90a <__cvt+0x3e>
 800a908:	3601      	adds	r6, #1
 800a90a:	2102      	movs	r1, #2
 800a90c:	e000      	b.n	800a910 <__cvt+0x44>
 800a90e:	2103      	movs	r1, #3
 800a910:	ab03      	add	r3, sp, #12
 800a912:	9301      	str	r3, [sp, #4]
 800a914:	ab02      	add	r3, sp, #8
 800a916:	9300      	str	r3, [sp, #0]
 800a918:	ec45 4b10 	vmov	d0, r4, r5
 800a91c:	4653      	mov	r3, sl
 800a91e:	4632      	mov	r2, r6
 800a920:	f000 fcea 	bl	800b2f8 <_dtoa_r>
 800a924:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a928:	4607      	mov	r7, r0
 800a92a:	d102      	bne.n	800a932 <__cvt+0x66>
 800a92c:	f019 0f01 	tst.w	r9, #1
 800a930:	d022      	beq.n	800a978 <__cvt+0xac>
 800a932:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a936:	eb07 0906 	add.w	r9, r7, r6
 800a93a:	d110      	bne.n	800a95e <__cvt+0x92>
 800a93c:	783b      	ldrb	r3, [r7, #0]
 800a93e:	2b30      	cmp	r3, #48	; 0x30
 800a940:	d10a      	bne.n	800a958 <__cvt+0x8c>
 800a942:	2200      	movs	r2, #0
 800a944:	2300      	movs	r3, #0
 800a946:	4620      	mov	r0, r4
 800a948:	4629      	mov	r1, r5
 800a94a:	f7f6 f8c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800a94e:	b918      	cbnz	r0, 800a958 <__cvt+0x8c>
 800a950:	f1c6 0601 	rsb	r6, r6, #1
 800a954:	f8ca 6000 	str.w	r6, [sl]
 800a958:	f8da 3000 	ldr.w	r3, [sl]
 800a95c:	4499      	add	r9, r3
 800a95e:	2200      	movs	r2, #0
 800a960:	2300      	movs	r3, #0
 800a962:	4620      	mov	r0, r4
 800a964:	4629      	mov	r1, r5
 800a966:	f7f6 f8b7 	bl	8000ad8 <__aeabi_dcmpeq>
 800a96a:	b108      	cbz	r0, 800a970 <__cvt+0xa4>
 800a96c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a970:	2230      	movs	r2, #48	; 0x30
 800a972:	9b03      	ldr	r3, [sp, #12]
 800a974:	454b      	cmp	r3, r9
 800a976:	d307      	bcc.n	800a988 <__cvt+0xbc>
 800a978:	9b03      	ldr	r3, [sp, #12]
 800a97a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a97c:	1bdb      	subs	r3, r3, r7
 800a97e:	4638      	mov	r0, r7
 800a980:	6013      	str	r3, [r2, #0]
 800a982:	b004      	add	sp, #16
 800a984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a988:	1c59      	adds	r1, r3, #1
 800a98a:	9103      	str	r1, [sp, #12]
 800a98c:	701a      	strb	r2, [r3, #0]
 800a98e:	e7f0      	b.n	800a972 <__cvt+0xa6>

0800a990 <__exponent>:
 800a990:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a992:	4603      	mov	r3, r0
 800a994:	2900      	cmp	r1, #0
 800a996:	bfb8      	it	lt
 800a998:	4249      	neglt	r1, r1
 800a99a:	f803 2b02 	strb.w	r2, [r3], #2
 800a99e:	bfb4      	ite	lt
 800a9a0:	222d      	movlt	r2, #45	; 0x2d
 800a9a2:	222b      	movge	r2, #43	; 0x2b
 800a9a4:	2909      	cmp	r1, #9
 800a9a6:	7042      	strb	r2, [r0, #1]
 800a9a8:	dd2a      	ble.n	800aa00 <__exponent+0x70>
 800a9aa:	f10d 0407 	add.w	r4, sp, #7
 800a9ae:	46a4      	mov	ip, r4
 800a9b0:	270a      	movs	r7, #10
 800a9b2:	46a6      	mov	lr, r4
 800a9b4:	460a      	mov	r2, r1
 800a9b6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a9ba:	fb07 1516 	mls	r5, r7, r6, r1
 800a9be:	3530      	adds	r5, #48	; 0x30
 800a9c0:	2a63      	cmp	r2, #99	; 0x63
 800a9c2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a9c6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a9ca:	4631      	mov	r1, r6
 800a9cc:	dcf1      	bgt.n	800a9b2 <__exponent+0x22>
 800a9ce:	3130      	adds	r1, #48	; 0x30
 800a9d0:	f1ae 0502 	sub.w	r5, lr, #2
 800a9d4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a9d8:	1c44      	adds	r4, r0, #1
 800a9da:	4629      	mov	r1, r5
 800a9dc:	4561      	cmp	r1, ip
 800a9de:	d30a      	bcc.n	800a9f6 <__exponent+0x66>
 800a9e0:	f10d 0209 	add.w	r2, sp, #9
 800a9e4:	eba2 020e 	sub.w	r2, r2, lr
 800a9e8:	4565      	cmp	r5, ip
 800a9ea:	bf88      	it	hi
 800a9ec:	2200      	movhi	r2, #0
 800a9ee:	4413      	add	r3, r2
 800a9f0:	1a18      	subs	r0, r3, r0
 800a9f2:	b003      	add	sp, #12
 800a9f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9fa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a9fe:	e7ed      	b.n	800a9dc <__exponent+0x4c>
 800aa00:	2330      	movs	r3, #48	; 0x30
 800aa02:	3130      	adds	r1, #48	; 0x30
 800aa04:	7083      	strb	r3, [r0, #2]
 800aa06:	70c1      	strb	r1, [r0, #3]
 800aa08:	1d03      	adds	r3, r0, #4
 800aa0a:	e7f1      	b.n	800a9f0 <__exponent+0x60>

0800aa0c <_printf_float>:
 800aa0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa10:	ed2d 8b02 	vpush	{d8}
 800aa14:	b08d      	sub	sp, #52	; 0x34
 800aa16:	460c      	mov	r4, r1
 800aa18:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800aa1c:	4616      	mov	r6, r2
 800aa1e:	461f      	mov	r7, r3
 800aa20:	4605      	mov	r5, r0
 800aa22:	f001 fa57 	bl	800bed4 <_localeconv_r>
 800aa26:	f8d0 a000 	ldr.w	sl, [r0]
 800aa2a:	4650      	mov	r0, sl
 800aa2c:	f7f5 fbd8 	bl	80001e0 <strlen>
 800aa30:	2300      	movs	r3, #0
 800aa32:	930a      	str	r3, [sp, #40]	; 0x28
 800aa34:	6823      	ldr	r3, [r4, #0]
 800aa36:	9305      	str	r3, [sp, #20]
 800aa38:	f8d8 3000 	ldr.w	r3, [r8]
 800aa3c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800aa40:	3307      	adds	r3, #7
 800aa42:	f023 0307 	bic.w	r3, r3, #7
 800aa46:	f103 0208 	add.w	r2, r3, #8
 800aa4a:	f8c8 2000 	str.w	r2, [r8]
 800aa4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa52:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800aa56:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800aa5a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aa5e:	9307      	str	r3, [sp, #28]
 800aa60:	f8cd 8018 	str.w	r8, [sp, #24]
 800aa64:	ee08 0a10 	vmov	s16, r0
 800aa68:	4b9f      	ldr	r3, [pc, #636]	; (800ace8 <_printf_float+0x2dc>)
 800aa6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa6e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa72:	f7f6 f863 	bl	8000b3c <__aeabi_dcmpun>
 800aa76:	bb88      	cbnz	r0, 800aadc <_printf_float+0xd0>
 800aa78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aa7c:	4b9a      	ldr	r3, [pc, #616]	; (800ace8 <_printf_float+0x2dc>)
 800aa7e:	f04f 32ff 	mov.w	r2, #4294967295
 800aa82:	f7f6 f83d 	bl	8000b00 <__aeabi_dcmple>
 800aa86:	bb48      	cbnz	r0, 800aadc <_printf_float+0xd0>
 800aa88:	2200      	movs	r2, #0
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	4640      	mov	r0, r8
 800aa8e:	4649      	mov	r1, r9
 800aa90:	f7f6 f82c 	bl	8000aec <__aeabi_dcmplt>
 800aa94:	b110      	cbz	r0, 800aa9c <_printf_float+0x90>
 800aa96:	232d      	movs	r3, #45	; 0x2d
 800aa98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa9c:	4b93      	ldr	r3, [pc, #588]	; (800acec <_printf_float+0x2e0>)
 800aa9e:	4894      	ldr	r0, [pc, #592]	; (800acf0 <_printf_float+0x2e4>)
 800aaa0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aaa4:	bf94      	ite	ls
 800aaa6:	4698      	movls	r8, r3
 800aaa8:	4680      	movhi	r8, r0
 800aaaa:	2303      	movs	r3, #3
 800aaac:	6123      	str	r3, [r4, #16]
 800aaae:	9b05      	ldr	r3, [sp, #20]
 800aab0:	f023 0204 	bic.w	r2, r3, #4
 800aab4:	6022      	str	r2, [r4, #0]
 800aab6:	f04f 0900 	mov.w	r9, #0
 800aaba:	9700      	str	r7, [sp, #0]
 800aabc:	4633      	mov	r3, r6
 800aabe:	aa0b      	add	r2, sp, #44	; 0x2c
 800aac0:	4621      	mov	r1, r4
 800aac2:	4628      	mov	r0, r5
 800aac4:	f000 f9d8 	bl	800ae78 <_printf_common>
 800aac8:	3001      	adds	r0, #1
 800aaca:	f040 8090 	bne.w	800abee <_printf_float+0x1e2>
 800aace:	f04f 30ff 	mov.w	r0, #4294967295
 800aad2:	b00d      	add	sp, #52	; 0x34
 800aad4:	ecbd 8b02 	vpop	{d8}
 800aad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aadc:	4642      	mov	r2, r8
 800aade:	464b      	mov	r3, r9
 800aae0:	4640      	mov	r0, r8
 800aae2:	4649      	mov	r1, r9
 800aae4:	f7f6 f82a 	bl	8000b3c <__aeabi_dcmpun>
 800aae8:	b140      	cbz	r0, 800aafc <_printf_float+0xf0>
 800aaea:	464b      	mov	r3, r9
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	bfbc      	itt	lt
 800aaf0:	232d      	movlt	r3, #45	; 0x2d
 800aaf2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aaf6:	487f      	ldr	r0, [pc, #508]	; (800acf4 <_printf_float+0x2e8>)
 800aaf8:	4b7f      	ldr	r3, [pc, #508]	; (800acf8 <_printf_float+0x2ec>)
 800aafa:	e7d1      	b.n	800aaa0 <_printf_float+0x94>
 800aafc:	6863      	ldr	r3, [r4, #4]
 800aafe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ab02:	9206      	str	r2, [sp, #24]
 800ab04:	1c5a      	adds	r2, r3, #1
 800ab06:	d13f      	bne.n	800ab88 <_printf_float+0x17c>
 800ab08:	2306      	movs	r3, #6
 800ab0a:	6063      	str	r3, [r4, #4]
 800ab0c:	9b05      	ldr	r3, [sp, #20]
 800ab0e:	6861      	ldr	r1, [r4, #4]
 800ab10:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800ab14:	2300      	movs	r3, #0
 800ab16:	9303      	str	r3, [sp, #12]
 800ab18:	ab0a      	add	r3, sp, #40	; 0x28
 800ab1a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800ab1e:	ab09      	add	r3, sp, #36	; 0x24
 800ab20:	ec49 8b10 	vmov	d0, r8, r9
 800ab24:	9300      	str	r3, [sp, #0]
 800ab26:	6022      	str	r2, [r4, #0]
 800ab28:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800ab2c:	4628      	mov	r0, r5
 800ab2e:	f7ff fecd 	bl	800a8cc <__cvt>
 800ab32:	9b06      	ldr	r3, [sp, #24]
 800ab34:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ab36:	2b47      	cmp	r3, #71	; 0x47
 800ab38:	4680      	mov	r8, r0
 800ab3a:	d108      	bne.n	800ab4e <_printf_float+0x142>
 800ab3c:	1cc8      	adds	r0, r1, #3
 800ab3e:	db02      	blt.n	800ab46 <_printf_float+0x13a>
 800ab40:	6863      	ldr	r3, [r4, #4]
 800ab42:	4299      	cmp	r1, r3
 800ab44:	dd41      	ble.n	800abca <_printf_float+0x1be>
 800ab46:	f1ab 0b02 	sub.w	fp, fp, #2
 800ab4a:	fa5f fb8b 	uxtb.w	fp, fp
 800ab4e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ab52:	d820      	bhi.n	800ab96 <_printf_float+0x18a>
 800ab54:	3901      	subs	r1, #1
 800ab56:	465a      	mov	r2, fp
 800ab58:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ab5c:	9109      	str	r1, [sp, #36]	; 0x24
 800ab5e:	f7ff ff17 	bl	800a990 <__exponent>
 800ab62:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ab64:	1813      	adds	r3, r2, r0
 800ab66:	2a01      	cmp	r2, #1
 800ab68:	4681      	mov	r9, r0
 800ab6a:	6123      	str	r3, [r4, #16]
 800ab6c:	dc02      	bgt.n	800ab74 <_printf_float+0x168>
 800ab6e:	6822      	ldr	r2, [r4, #0]
 800ab70:	07d2      	lsls	r2, r2, #31
 800ab72:	d501      	bpl.n	800ab78 <_printf_float+0x16c>
 800ab74:	3301      	adds	r3, #1
 800ab76:	6123      	str	r3, [r4, #16]
 800ab78:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d09c      	beq.n	800aaba <_printf_float+0xae>
 800ab80:	232d      	movs	r3, #45	; 0x2d
 800ab82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab86:	e798      	b.n	800aaba <_printf_float+0xae>
 800ab88:	9a06      	ldr	r2, [sp, #24]
 800ab8a:	2a47      	cmp	r2, #71	; 0x47
 800ab8c:	d1be      	bne.n	800ab0c <_printf_float+0x100>
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d1bc      	bne.n	800ab0c <_printf_float+0x100>
 800ab92:	2301      	movs	r3, #1
 800ab94:	e7b9      	b.n	800ab0a <_printf_float+0xfe>
 800ab96:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ab9a:	d118      	bne.n	800abce <_printf_float+0x1c2>
 800ab9c:	2900      	cmp	r1, #0
 800ab9e:	6863      	ldr	r3, [r4, #4]
 800aba0:	dd0b      	ble.n	800abba <_printf_float+0x1ae>
 800aba2:	6121      	str	r1, [r4, #16]
 800aba4:	b913      	cbnz	r3, 800abac <_printf_float+0x1a0>
 800aba6:	6822      	ldr	r2, [r4, #0]
 800aba8:	07d0      	lsls	r0, r2, #31
 800abaa:	d502      	bpl.n	800abb2 <_printf_float+0x1a6>
 800abac:	3301      	adds	r3, #1
 800abae:	440b      	add	r3, r1
 800abb0:	6123      	str	r3, [r4, #16]
 800abb2:	65a1      	str	r1, [r4, #88]	; 0x58
 800abb4:	f04f 0900 	mov.w	r9, #0
 800abb8:	e7de      	b.n	800ab78 <_printf_float+0x16c>
 800abba:	b913      	cbnz	r3, 800abc2 <_printf_float+0x1b6>
 800abbc:	6822      	ldr	r2, [r4, #0]
 800abbe:	07d2      	lsls	r2, r2, #31
 800abc0:	d501      	bpl.n	800abc6 <_printf_float+0x1ba>
 800abc2:	3302      	adds	r3, #2
 800abc4:	e7f4      	b.n	800abb0 <_printf_float+0x1a4>
 800abc6:	2301      	movs	r3, #1
 800abc8:	e7f2      	b.n	800abb0 <_printf_float+0x1a4>
 800abca:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800abce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abd0:	4299      	cmp	r1, r3
 800abd2:	db05      	blt.n	800abe0 <_printf_float+0x1d4>
 800abd4:	6823      	ldr	r3, [r4, #0]
 800abd6:	6121      	str	r1, [r4, #16]
 800abd8:	07d8      	lsls	r0, r3, #31
 800abda:	d5ea      	bpl.n	800abb2 <_printf_float+0x1a6>
 800abdc:	1c4b      	adds	r3, r1, #1
 800abde:	e7e7      	b.n	800abb0 <_printf_float+0x1a4>
 800abe0:	2900      	cmp	r1, #0
 800abe2:	bfd4      	ite	le
 800abe4:	f1c1 0202 	rsble	r2, r1, #2
 800abe8:	2201      	movgt	r2, #1
 800abea:	4413      	add	r3, r2
 800abec:	e7e0      	b.n	800abb0 <_printf_float+0x1a4>
 800abee:	6823      	ldr	r3, [r4, #0]
 800abf0:	055a      	lsls	r2, r3, #21
 800abf2:	d407      	bmi.n	800ac04 <_printf_float+0x1f8>
 800abf4:	6923      	ldr	r3, [r4, #16]
 800abf6:	4642      	mov	r2, r8
 800abf8:	4631      	mov	r1, r6
 800abfa:	4628      	mov	r0, r5
 800abfc:	47b8      	blx	r7
 800abfe:	3001      	adds	r0, #1
 800ac00:	d12c      	bne.n	800ac5c <_printf_float+0x250>
 800ac02:	e764      	b.n	800aace <_printf_float+0xc2>
 800ac04:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ac08:	f240 80e0 	bls.w	800adcc <_printf_float+0x3c0>
 800ac0c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ac10:	2200      	movs	r2, #0
 800ac12:	2300      	movs	r3, #0
 800ac14:	f7f5 ff60 	bl	8000ad8 <__aeabi_dcmpeq>
 800ac18:	2800      	cmp	r0, #0
 800ac1a:	d034      	beq.n	800ac86 <_printf_float+0x27a>
 800ac1c:	4a37      	ldr	r2, [pc, #220]	; (800acfc <_printf_float+0x2f0>)
 800ac1e:	2301      	movs	r3, #1
 800ac20:	4631      	mov	r1, r6
 800ac22:	4628      	mov	r0, r5
 800ac24:	47b8      	blx	r7
 800ac26:	3001      	adds	r0, #1
 800ac28:	f43f af51 	beq.w	800aace <_printf_float+0xc2>
 800ac2c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ac30:	429a      	cmp	r2, r3
 800ac32:	db02      	blt.n	800ac3a <_printf_float+0x22e>
 800ac34:	6823      	ldr	r3, [r4, #0]
 800ac36:	07d8      	lsls	r0, r3, #31
 800ac38:	d510      	bpl.n	800ac5c <_printf_float+0x250>
 800ac3a:	ee18 3a10 	vmov	r3, s16
 800ac3e:	4652      	mov	r2, sl
 800ac40:	4631      	mov	r1, r6
 800ac42:	4628      	mov	r0, r5
 800ac44:	47b8      	blx	r7
 800ac46:	3001      	adds	r0, #1
 800ac48:	f43f af41 	beq.w	800aace <_printf_float+0xc2>
 800ac4c:	f04f 0800 	mov.w	r8, #0
 800ac50:	f104 091a 	add.w	r9, r4, #26
 800ac54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac56:	3b01      	subs	r3, #1
 800ac58:	4543      	cmp	r3, r8
 800ac5a:	dc09      	bgt.n	800ac70 <_printf_float+0x264>
 800ac5c:	6823      	ldr	r3, [r4, #0]
 800ac5e:	079b      	lsls	r3, r3, #30
 800ac60:	f100 8105 	bmi.w	800ae6e <_printf_float+0x462>
 800ac64:	68e0      	ldr	r0, [r4, #12]
 800ac66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac68:	4298      	cmp	r0, r3
 800ac6a:	bfb8      	it	lt
 800ac6c:	4618      	movlt	r0, r3
 800ac6e:	e730      	b.n	800aad2 <_printf_float+0xc6>
 800ac70:	2301      	movs	r3, #1
 800ac72:	464a      	mov	r2, r9
 800ac74:	4631      	mov	r1, r6
 800ac76:	4628      	mov	r0, r5
 800ac78:	47b8      	blx	r7
 800ac7a:	3001      	adds	r0, #1
 800ac7c:	f43f af27 	beq.w	800aace <_printf_float+0xc2>
 800ac80:	f108 0801 	add.w	r8, r8, #1
 800ac84:	e7e6      	b.n	800ac54 <_printf_float+0x248>
 800ac86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac88:	2b00      	cmp	r3, #0
 800ac8a:	dc39      	bgt.n	800ad00 <_printf_float+0x2f4>
 800ac8c:	4a1b      	ldr	r2, [pc, #108]	; (800acfc <_printf_float+0x2f0>)
 800ac8e:	2301      	movs	r3, #1
 800ac90:	4631      	mov	r1, r6
 800ac92:	4628      	mov	r0, r5
 800ac94:	47b8      	blx	r7
 800ac96:	3001      	adds	r0, #1
 800ac98:	f43f af19 	beq.w	800aace <_printf_float+0xc2>
 800ac9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800aca0:	4313      	orrs	r3, r2
 800aca2:	d102      	bne.n	800acaa <_printf_float+0x29e>
 800aca4:	6823      	ldr	r3, [r4, #0]
 800aca6:	07d9      	lsls	r1, r3, #31
 800aca8:	d5d8      	bpl.n	800ac5c <_printf_float+0x250>
 800acaa:	ee18 3a10 	vmov	r3, s16
 800acae:	4652      	mov	r2, sl
 800acb0:	4631      	mov	r1, r6
 800acb2:	4628      	mov	r0, r5
 800acb4:	47b8      	blx	r7
 800acb6:	3001      	adds	r0, #1
 800acb8:	f43f af09 	beq.w	800aace <_printf_float+0xc2>
 800acbc:	f04f 0900 	mov.w	r9, #0
 800acc0:	f104 0a1a 	add.w	sl, r4, #26
 800acc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc6:	425b      	negs	r3, r3
 800acc8:	454b      	cmp	r3, r9
 800acca:	dc01      	bgt.n	800acd0 <_printf_float+0x2c4>
 800accc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acce:	e792      	b.n	800abf6 <_printf_float+0x1ea>
 800acd0:	2301      	movs	r3, #1
 800acd2:	4652      	mov	r2, sl
 800acd4:	4631      	mov	r1, r6
 800acd6:	4628      	mov	r0, r5
 800acd8:	47b8      	blx	r7
 800acda:	3001      	adds	r0, #1
 800acdc:	f43f aef7 	beq.w	800aace <_printf_float+0xc2>
 800ace0:	f109 0901 	add.w	r9, r9, #1
 800ace4:	e7ee      	b.n	800acc4 <_printf_float+0x2b8>
 800ace6:	bf00      	nop
 800ace8:	7fefffff 	.word	0x7fefffff
 800acec:	0800d720 	.word	0x0800d720
 800acf0:	0800d724 	.word	0x0800d724
 800acf4:	0800d72c 	.word	0x0800d72c
 800acf8:	0800d728 	.word	0x0800d728
 800acfc:	0800d730 	.word	0x0800d730
 800ad00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ad02:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad04:	429a      	cmp	r2, r3
 800ad06:	bfa8      	it	ge
 800ad08:	461a      	movge	r2, r3
 800ad0a:	2a00      	cmp	r2, #0
 800ad0c:	4691      	mov	r9, r2
 800ad0e:	dc37      	bgt.n	800ad80 <_printf_float+0x374>
 800ad10:	f04f 0b00 	mov.w	fp, #0
 800ad14:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad18:	f104 021a 	add.w	r2, r4, #26
 800ad1c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ad1e:	9305      	str	r3, [sp, #20]
 800ad20:	eba3 0309 	sub.w	r3, r3, r9
 800ad24:	455b      	cmp	r3, fp
 800ad26:	dc33      	bgt.n	800ad90 <_printf_float+0x384>
 800ad28:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad2c:	429a      	cmp	r2, r3
 800ad2e:	db3b      	blt.n	800ada8 <_printf_float+0x39c>
 800ad30:	6823      	ldr	r3, [r4, #0]
 800ad32:	07da      	lsls	r2, r3, #31
 800ad34:	d438      	bmi.n	800ada8 <_printf_float+0x39c>
 800ad36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad38:	9a05      	ldr	r2, [sp, #20]
 800ad3a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ad3c:	1a9a      	subs	r2, r3, r2
 800ad3e:	eba3 0901 	sub.w	r9, r3, r1
 800ad42:	4591      	cmp	r9, r2
 800ad44:	bfa8      	it	ge
 800ad46:	4691      	movge	r9, r2
 800ad48:	f1b9 0f00 	cmp.w	r9, #0
 800ad4c:	dc35      	bgt.n	800adba <_printf_float+0x3ae>
 800ad4e:	f04f 0800 	mov.w	r8, #0
 800ad52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ad56:	f104 0a1a 	add.w	sl, r4, #26
 800ad5a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ad5e:	1a9b      	subs	r3, r3, r2
 800ad60:	eba3 0309 	sub.w	r3, r3, r9
 800ad64:	4543      	cmp	r3, r8
 800ad66:	f77f af79 	ble.w	800ac5c <_printf_float+0x250>
 800ad6a:	2301      	movs	r3, #1
 800ad6c:	4652      	mov	r2, sl
 800ad6e:	4631      	mov	r1, r6
 800ad70:	4628      	mov	r0, r5
 800ad72:	47b8      	blx	r7
 800ad74:	3001      	adds	r0, #1
 800ad76:	f43f aeaa 	beq.w	800aace <_printf_float+0xc2>
 800ad7a:	f108 0801 	add.w	r8, r8, #1
 800ad7e:	e7ec      	b.n	800ad5a <_printf_float+0x34e>
 800ad80:	4613      	mov	r3, r2
 800ad82:	4631      	mov	r1, r6
 800ad84:	4642      	mov	r2, r8
 800ad86:	4628      	mov	r0, r5
 800ad88:	47b8      	blx	r7
 800ad8a:	3001      	adds	r0, #1
 800ad8c:	d1c0      	bne.n	800ad10 <_printf_float+0x304>
 800ad8e:	e69e      	b.n	800aace <_printf_float+0xc2>
 800ad90:	2301      	movs	r3, #1
 800ad92:	4631      	mov	r1, r6
 800ad94:	4628      	mov	r0, r5
 800ad96:	9205      	str	r2, [sp, #20]
 800ad98:	47b8      	blx	r7
 800ad9a:	3001      	adds	r0, #1
 800ad9c:	f43f ae97 	beq.w	800aace <_printf_float+0xc2>
 800ada0:	9a05      	ldr	r2, [sp, #20]
 800ada2:	f10b 0b01 	add.w	fp, fp, #1
 800ada6:	e7b9      	b.n	800ad1c <_printf_float+0x310>
 800ada8:	ee18 3a10 	vmov	r3, s16
 800adac:	4652      	mov	r2, sl
 800adae:	4631      	mov	r1, r6
 800adb0:	4628      	mov	r0, r5
 800adb2:	47b8      	blx	r7
 800adb4:	3001      	adds	r0, #1
 800adb6:	d1be      	bne.n	800ad36 <_printf_float+0x32a>
 800adb8:	e689      	b.n	800aace <_printf_float+0xc2>
 800adba:	9a05      	ldr	r2, [sp, #20]
 800adbc:	464b      	mov	r3, r9
 800adbe:	4442      	add	r2, r8
 800adc0:	4631      	mov	r1, r6
 800adc2:	4628      	mov	r0, r5
 800adc4:	47b8      	blx	r7
 800adc6:	3001      	adds	r0, #1
 800adc8:	d1c1      	bne.n	800ad4e <_printf_float+0x342>
 800adca:	e680      	b.n	800aace <_printf_float+0xc2>
 800adcc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800adce:	2a01      	cmp	r2, #1
 800add0:	dc01      	bgt.n	800add6 <_printf_float+0x3ca>
 800add2:	07db      	lsls	r3, r3, #31
 800add4:	d538      	bpl.n	800ae48 <_printf_float+0x43c>
 800add6:	2301      	movs	r3, #1
 800add8:	4642      	mov	r2, r8
 800adda:	4631      	mov	r1, r6
 800addc:	4628      	mov	r0, r5
 800adde:	47b8      	blx	r7
 800ade0:	3001      	adds	r0, #1
 800ade2:	f43f ae74 	beq.w	800aace <_printf_float+0xc2>
 800ade6:	ee18 3a10 	vmov	r3, s16
 800adea:	4652      	mov	r2, sl
 800adec:	4631      	mov	r1, r6
 800adee:	4628      	mov	r0, r5
 800adf0:	47b8      	blx	r7
 800adf2:	3001      	adds	r0, #1
 800adf4:	f43f ae6b 	beq.w	800aace <_printf_float+0xc2>
 800adf8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800adfc:	2200      	movs	r2, #0
 800adfe:	2300      	movs	r3, #0
 800ae00:	f7f5 fe6a 	bl	8000ad8 <__aeabi_dcmpeq>
 800ae04:	b9d8      	cbnz	r0, 800ae3e <_printf_float+0x432>
 800ae06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae08:	f108 0201 	add.w	r2, r8, #1
 800ae0c:	3b01      	subs	r3, #1
 800ae0e:	4631      	mov	r1, r6
 800ae10:	4628      	mov	r0, r5
 800ae12:	47b8      	blx	r7
 800ae14:	3001      	adds	r0, #1
 800ae16:	d10e      	bne.n	800ae36 <_printf_float+0x42a>
 800ae18:	e659      	b.n	800aace <_printf_float+0xc2>
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	4652      	mov	r2, sl
 800ae1e:	4631      	mov	r1, r6
 800ae20:	4628      	mov	r0, r5
 800ae22:	47b8      	blx	r7
 800ae24:	3001      	adds	r0, #1
 800ae26:	f43f ae52 	beq.w	800aace <_printf_float+0xc2>
 800ae2a:	f108 0801 	add.w	r8, r8, #1
 800ae2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae30:	3b01      	subs	r3, #1
 800ae32:	4543      	cmp	r3, r8
 800ae34:	dcf1      	bgt.n	800ae1a <_printf_float+0x40e>
 800ae36:	464b      	mov	r3, r9
 800ae38:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ae3c:	e6dc      	b.n	800abf8 <_printf_float+0x1ec>
 800ae3e:	f04f 0800 	mov.w	r8, #0
 800ae42:	f104 0a1a 	add.w	sl, r4, #26
 800ae46:	e7f2      	b.n	800ae2e <_printf_float+0x422>
 800ae48:	2301      	movs	r3, #1
 800ae4a:	4642      	mov	r2, r8
 800ae4c:	e7df      	b.n	800ae0e <_printf_float+0x402>
 800ae4e:	2301      	movs	r3, #1
 800ae50:	464a      	mov	r2, r9
 800ae52:	4631      	mov	r1, r6
 800ae54:	4628      	mov	r0, r5
 800ae56:	47b8      	blx	r7
 800ae58:	3001      	adds	r0, #1
 800ae5a:	f43f ae38 	beq.w	800aace <_printf_float+0xc2>
 800ae5e:	f108 0801 	add.w	r8, r8, #1
 800ae62:	68e3      	ldr	r3, [r4, #12]
 800ae64:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ae66:	1a5b      	subs	r3, r3, r1
 800ae68:	4543      	cmp	r3, r8
 800ae6a:	dcf0      	bgt.n	800ae4e <_printf_float+0x442>
 800ae6c:	e6fa      	b.n	800ac64 <_printf_float+0x258>
 800ae6e:	f04f 0800 	mov.w	r8, #0
 800ae72:	f104 0919 	add.w	r9, r4, #25
 800ae76:	e7f4      	b.n	800ae62 <_printf_float+0x456>

0800ae78 <_printf_common>:
 800ae78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae7c:	4616      	mov	r6, r2
 800ae7e:	4699      	mov	r9, r3
 800ae80:	688a      	ldr	r2, [r1, #8]
 800ae82:	690b      	ldr	r3, [r1, #16]
 800ae84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	bfb8      	it	lt
 800ae8c:	4613      	movlt	r3, r2
 800ae8e:	6033      	str	r3, [r6, #0]
 800ae90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ae94:	4607      	mov	r7, r0
 800ae96:	460c      	mov	r4, r1
 800ae98:	b10a      	cbz	r2, 800ae9e <_printf_common+0x26>
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	6033      	str	r3, [r6, #0]
 800ae9e:	6823      	ldr	r3, [r4, #0]
 800aea0:	0699      	lsls	r1, r3, #26
 800aea2:	bf42      	ittt	mi
 800aea4:	6833      	ldrmi	r3, [r6, #0]
 800aea6:	3302      	addmi	r3, #2
 800aea8:	6033      	strmi	r3, [r6, #0]
 800aeaa:	6825      	ldr	r5, [r4, #0]
 800aeac:	f015 0506 	ands.w	r5, r5, #6
 800aeb0:	d106      	bne.n	800aec0 <_printf_common+0x48>
 800aeb2:	f104 0a19 	add.w	sl, r4, #25
 800aeb6:	68e3      	ldr	r3, [r4, #12]
 800aeb8:	6832      	ldr	r2, [r6, #0]
 800aeba:	1a9b      	subs	r3, r3, r2
 800aebc:	42ab      	cmp	r3, r5
 800aebe:	dc26      	bgt.n	800af0e <_printf_common+0x96>
 800aec0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aec4:	1e13      	subs	r3, r2, #0
 800aec6:	6822      	ldr	r2, [r4, #0]
 800aec8:	bf18      	it	ne
 800aeca:	2301      	movne	r3, #1
 800aecc:	0692      	lsls	r2, r2, #26
 800aece:	d42b      	bmi.n	800af28 <_printf_common+0xb0>
 800aed0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800aed4:	4649      	mov	r1, r9
 800aed6:	4638      	mov	r0, r7
 800aed8:	47c0      	blx	r8
 800aeda:	3001      	adds	r0, #1
 800aedc:	d01e      	beq.n	800af1c <_printf_common+0xa4>
 800aede:	6823      	ldr	r3, [r4, #0]
 800aee0:	68e5      	ldr	r5, [r4, #12]
 800aee2:	6832      	ldr	r2, [r6, #0]
 800aee4:	f003 0306 	and.w	r3, r3, #6
 800aee8:	2b04      	cmp	r3, #4
 800aeea:	bf08      	it	eq
 800aeec:	1aad      	subeq	r5, r5, r2
 800aeee:	68a3      	ldr	r3, [r4, #8]
 800aef0:	6922      	ldr	r2, [r4, #16]
 800aef2:	bf0c      	ite	eq
 800aef4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800aef8:	2500      	movne	r5, #0
 800aefa:	4293      	cmp	r3, r2
 800aefc:	bfc4      	itt	gt
 800aefe:	1a9b      	subgt	r3, r3, r2
 800af00:	18ed      	addgt	r5, r5, r3
 800af02:	2600      	movs	r6, #0
 800af04:	341a      	adds	r4, #26
 800af06:	42b5      	cmp	r5, r6
 800af08:	d11a      	bne.n	800af40 <_printf_common+0xc8>
 800af0a:	2000      	movs	r0, #0
 800af0c:	e008      	b.n	800af20 <_printf_common+0xa8>
 800af0e:	2301      	movs	r3, #1
 800af10:	4652      	mov	r2, sl
 800af12:	4649      	mov	r1, r9
 800af14:	4638      	mov	r0, r7
 800af16:	47c0      	blx	r8
 800af18:	3001      	adds	r0, #1
 800af1a:	d103      	bne.n	800af24 <_printf_common+0xac>
 800af1c:	f04f 30ff 	mov.w	r0, #4294967295
 800af20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af24:	3501      	adds	r5, #1
 800af26:	e7c6      	b.n	800aeb6 <_printf_common+0x3e>
 800af28:	18e1      	adds	r1, r4, r3
 800af2a:	1c5a      	adds	r2, r3, #1
 800af2c:	2030      	movs	r0, #48	; 0x30
 800af2e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800af32:	4422      	add	r2, r4
 800af34:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800af38:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800af3c:	3302      	adds	r3, #2
 800af3e:	e7c7      	b.n	800aed0 <_printf_common+0x58>
 800af40:	2301      	movs	r3, #1
 800af42:	4622      	mov	r2, r4
 800af44:	4649      	mov	r1, r9
 800af46:	4638      	mov	r0, r7
 800af48:	47c0      	blx	r8
 800af4a:	3001      	adds	r0, #1
 800af4c:	d0e6      	beq.n	800af1c <_printf_common+0xa4>
 800af4e:	3601      	adds	r6, #1
 800af50:	e7d9      	b.n	800af06 <_printf_common+0x8e>
	...

0800af54 <_printf_i>:
 800af54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800af58:	7e0f      	ldrb	r7, [r1, #24]
 800af5a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800af5c:	2f78      	cmp	r7, #120	; 0x78
 800af5e:	4691      	mov	r9, r2
 800af60:	4680      	mov	r8, r0
 800af62:	460c      	mov	r4, r1
 800af64:	469a      	mov	sl, r3
 800af66:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800af6a:	d807      	bhi.n	800af7c <_printf_i+0x28>
 800af6c:	2f62      	cmp	r7, #98	; 0x62
 800af6e:	d80a      	bhi.n	800af86 <_printf_i+0x32>
 800af70:	2f00      	cmp	r7, #0
 800af72:	f000 80d8 	beq.w	800b126 <_printf_i+0x1d2>
 800af76:	2f58      	cmp	r7, #88	; 0x58
 800af78:	f000 80a3 	beq.w	800b0c2 <_printf_i+0x16e>
 800af7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af80:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800af84:	e03a      	b.n	800affc <_printf_i+0xa8>
 800af86:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800af8a:	2b15      	cmp	r3, #21
 800af8c:	d8f6      	bhi.n	800af7c <_printf_i+0x28>
 800af8e:	a101      	add	r1, pc, #4	; (adr r1, 800af94 <_printf_i+0x40>)
 800af90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800af94:	0800afed 	.word	0x0800afed
 800af98:	0800b001 	.word	0x0800b001
 800af9c:	0800af7d 	.word	0x0800af7d
 800afa0:	0800af7d 	.word	0x0800af7d
 800afa4:	0800af7d 	.word	0x0800af7d
 800afa8:	0800af7d 	.word	0x0800af7d
 800afac:	0800b001 	.word	0x0800b001
 800afb0:	0800af7d 	.word	0x0800af7d
 800afb4:	0800af7d 	.word	0x0800af7d
 800afb8:	0800af7d 	.word	0x0800af7d
 800afbc:	0800af7d 	.word	0x0800af7d
 800afc0:	0800b10d 	.word	0x0800b10d
 800afc4:	0800b031 	.word	0x0800b031
 800afc8:	0800b0ef 	.word	0x0800b0ef
 800afcc:	0800af7d 	.word	0x0800af7d
 800afd0:	0800af7d 	.word	0x0800af7d
 800afd4:	0800b12f 	.word	0x0800b12f
 800afd8:	0800af7d 	.word	0x0800af7d
 800afdc:	0800b031 	.word	0x0800b031
 800afe0:	0800af7d 	.word	0x0800af7d
 800afe4:	0800af7d 	.word	0x0800af7d
 800afe8:	0800b0f7 	.word	0x0800b0f7
 800afec:	682b      	ldr	r3, [r5, #0]
 800afee:	1d1a      	adds	r2, r3, #4
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	602a      	str	r2, [r5, #0]
 800aff4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aff8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800affc:	2301      	movs	r3, #1
 800affe:	e0a3      	b.n	800b148 <_printf_i+0x1f4>
 800b000:	6820      	ldr	r0, [r4, #0]
 800b002:	6829      	ldr	r1, [r5, #0]
 800b004:	0606      	lsls	r6, r0, #24
 800b006:	f101 0304 	add.w	r3, r1, #4
 800b00a:	d50a      	bpl.n	800b022 <_printf_i+0xce>
 800b00c:	680e      	ldr	r6, [r1, #0]
 800b00e:	602b      	str	r3, [r5, #0]
 800b010:	2e00      	cmp	r6, #0
 800b012:	da03      	bge.n	800b01c <_printf_i+0xc8>
 800b014:	232d      	movs	r3, #45	; 0x2d
 800b016:	4276      	negs	r6, r6
 800b018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b01c:	485e      	ldr	r0, [pc, #376]	; (800b198 <_printf_i+0x244>)
 800b01e:	230a      	movs	r3, #10
 800b020:	e019      	b.n	800b056 <_printf_i+0x102>
 800b022:	680e      	ldr	r6, [r1, #0]
 800b024:	602b      	str	r3, [r5, #0]
 800b026:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b02a:	bf18      	it	ne
 800b02c:	b236      	sxthne	r6, r6
 800b02e:	e7ef      	b.n	800b010 <_printf_i+0xbc>
 800b030:	682b      	ldr	r3, [r5, #0]
 800b032:	6820      	ldr	r0, [r4, #0]
 800b034:	1d19      	adds	r1, r3, #4
 800b036:	6029      	str	r1, [r5, #0]
 800b038:	0601      	lsls	r1, r0, #24
 800b03a:	d501      	bpl.n	800b040 <_printf_i+0xec>
 800b03c:	681e      	ldr	r6, [r3, #0]
 800b03e:	e002      	b.n	800b046 <_printf_i+0xf2>
 800b040:	0646      	lsls	r6, r0, #25
 800b042:	d5fb      	bpl.n	800b03c <_printf_i+0xe8>
 800b044:	881e      	ldrh	r6, [r3, #0]
 800b046:	4854      	ldr	r0, [pc, #336]	; (800b198 <_printf_i+0x244>)
 800b048:	2f6f      	cmp	r7, #111	; 0x6f
 800b04a:	bf0c      	ite	eq
 800b04c:	2308      	moveq	r3, #8
 800b04e:	230a      	movne	r3, #10
 800b050:	2100      	movs	r1, #0
 800b052:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b056:	6865      	ldr	r5, [r4, #4]
 800b058:	60a5      	str	r5, [r4, #8]
 800b05a:	2d00      	cmp	r5, #0
 800b05c:	bfa2      	ittt	ge
 800b05e:	6821      	ldrge	r1, [r4, #0]
 800b060:	f021 0104 	bicge.w	r1, r1, #4
 800b064:	6021      	strge	r1, [r4, #0]
 800b066:	b90e      	cbnz	r6, 800b06c <_printf_i+0x118>
 800b068:	2d00      	cmp	r5, #0
 800b06a:	d04d      	beq.n	800b108 <_printf_i+0x1b4>
 800b06c:	4615      	mov	r5, r2
 800b06e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b072:	fb03 6711 	mls	r7, r3, r1, r6
 800b076:	5dc7      	ldrb	r7, [r0, r7]
 800b078:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b07c:	4637      	mov	r7, r6
 800b07e:	42bb      	cmp	r3, r7
 800b080:	460e      	mov	r6, r1
 800b082:	d9f4      	bls.n	800b06e <_printf_i+0x11a>
 800b084:	2b08      	cmp	r3, #8
 800b086:	d10b      	bne.n	800b0a0 <_printf_i+0x14c>
 800b088:	6823      	ldr	r3, [r4, #0]
 800b08a:	07de      	lsls	r6, r3, #31
 800b08c:	d508      	bpl.n	800b0a0 <_printf_i+0x14c>
 800b08e:	6923      	ldr	r3, [r4, #16]
 800b090:	6861      	ldr	r1, [r4, #4]
 800b092:	4299      	cmp	r1, r3
 800b094:	bfde      	ittt	le
 800b096:	2330      	movle	r3, #48	; 0x30
 800b098:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b09c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b0a0:	1b52      	subs	r2, r2, r5
 800b0a2:	6122      	str	r2, [r4, #16]
 800b0a4:	f8cd a000 	str.w	sl, [sp]
 800b0a8:	464b      	mov	r3, r9
 800b0aa:	aa03      	add	r2, sp, #12
 800b0ac:	4621      	mov	r1, r4
 800b0ae:	4640      	mov	r0, r8
 800b0b0:	f7ff fee2 	bl	800ae78 <_printf_common>
 800b0b4:	3001      	adds	r0, #1
 800b0b6:	d14c      	bne.n	800b152 <_printf_i+0x1fe>
 800b0b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b0bc:	b004      	add	sp, #16
 800b0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0c2:	4835      	ldr	r0, [pc, #212]	; (800b198 <_printf_i+0x244>)
 800b0c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b0c8:	6829      	ldr	r1, [r5, #0]
 800b0ca:	6823      	ldr	r3, [r4, #0]
 800b0cc:	f851 6b04 	ldr.w	r6, [r1], #4
 800b0d0:	6029      	str	r1, [r5, #0]
 800b0d2:	061d      	lsls	r5, r3, #24
 800b0d4:	d514      	bpl.n	800b100 <_printf_i+0x1ac>
 800b0d6:	07df      	lsls	r7, r3, #31
 800b0d8:	bf44      	itt	mi
 800b0da:	f043 0320 	orrmi.w	r3, r3, #32
 800b0de:	6023      	strmi	r3, [r4, #0]
 800b0e0:	b91e      	cbnz	r6, 800b0ea <_printf_i+0x196>
 800b0e2:	6823      	ldr	r3, [r4, #0]
 800b0e4:	f023 0320 	bic.w	r3, r3, #32
 800b0e8:	6023      	str	r3, [r4, #0]
 800b0ea:	2310      	movs	r3, #16
 800b0ec:	e7b0      	b.n	800b050 <_printf_i+0xfc>
 800b0ee:	6823      	ldr	r3, [r4, #0]
 800b0f0:	f043 0320 	orr.w	r3, r3, #32
 800b0f4:	6023      	str	r3, [r4, #0]
 800b0f6:	2378      	movs	r3, #120	; 0x78
 800b0f8:	4828      	ldr	r0, [pc, #160]	; (800b19c <_printf_i+0x248>)
 800b0fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b0fe:	e7e3      	b.n	800b0c8 <_printf_i+0x174>
 800b100:	0659      	lsls	r1, r3, #25
 800b102:	bf48      	it	mi
 800b104:	b2b6      	uxthmi	r6, r6
 800b106:	e7e6      	b.n	800b0d6 <_printf_i+0x182>
 800b108:	4615      	mov	r5, r2
 800b10a:	e7bb      	b.n	800b084 <_printf_i+0x130>
 800b10c:	682b      	ldr	r3, [r5, #0]
 800b10e:	6826      	ldr	r6, [r4, #0]
 800b110:	6961      	ldr	r1, [r4, #20]
 800b112:	1d18      	adds	r0, r3, #4
 800b114:	6028      	str	r0, [r5, #0]
 800b116:	0635      	lsls	r5, r6, #24
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	d501      	bpl.n	800b120 <_printf_i+0x1cc>
 800b11c:	6019      	str	r1, [r3, #0]
 800b11e:	e002      	b.n	800b126 <_printf_i+0x1d2>
 800b120:	0670      	lsls	r0, r6, #25
 800b122:	d5fb      	bpl.n	800b11c <_printf_i+0x1c8>
 800b124:	8019      	strh	r1, [r3, #0]
 800b126:	2300      	movs	r3, #0
 800b128:	6123      	str	r3, [r4, #16]
 800b12a:	4615      	mov	r5, r2
 800b12c:	e7ba      	b.n	800b0a4 <_printf_i+0x150>
 800b12e:	682b      	ldr	r3, [r5, #0]
 800b130:	1d1a      	adds	r2, r3, #4
 800b132:	602a      	str	r2, [r5, #0]
 800b134:	681d      	ldr	r5, [r3, #0]
 800b136:	6862      	ldr	r2, [r4, #4]
 800b138:	2100      	movs	r1, #0
 800b13a:	4628      	mov	r0, r5
 800b13c:	f7f5 f858 	bl	80001f0 <memchr>
 800b140:	b108      	cbz	r0, 800b146 <_printf_i+0x1f2>
 800b142:	1b40      	subs	r0, r0, r5
 800b144:	6060      	str	r0, [r4, #4]
 800b146:	6863      	ldr	r3, [r4, #4]
 800b148:	6123      	str	r3, [r4, #16]
 800b14a:	2300      	movs	r3, #0
 800b14c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b150:	e7a8      	b.n	800b0a4 <_printf_i+0x150>
 800b152:	6923      	ldr	r3, [r4, #16]
 800b154:	462a      	mov	r2, r5
 800b156:	4649      	mov	r1, r9
 800b158:	4640      	mov	r0, r8
 800b15a:	47d0      	blx	sl
 800b15c:	3001      	adds	r0, #1
 800b15e:	d0ab      	beq.n	800b0b8 <_printf_i+0x164>
 800b160:	6823      	ldr	r3, [r4, #0]
 800b162:	079b      	lsls	r3, r3, #30
 800b164:	d413      	bmi.n	800b18e <_printf_i+0x23a>
 800b166:	68e0      	ldr	r0, [r4, #12]
 800b168:	9b03      	ldr	r3, [sp, #12]
 800b16a:	4298      	cmp	r0, r3
 800b16c:	bfb8      	it	lt
 800b16e:	4618      	movlt	r0, r3
 800b170:	e7a4      	b.n	800b0bc <_printf_i+0x168>
 800b172:	2301      	movs	r3, #1
 800b174:	4632      	mov	r2, r6
 800b176:	4649      	mov	r1, r9
 800b178:	4640      	mov	r0, r8
 800b17a:	47d0      	blx	sl
 800b17c:	3001      	adds	r0, #1
 800b17e:	d09b      	beq.n	800b0b8 <_printf_i+0x164>
 800b180:	3501      	adds	r5, #1
 800b182:	68e3      	ldr	r3, [r4, #12]
 800b184:	9903      	ldr	r1, [sp, #12]
 800b186:	1a5b      	subs	r3, r3, r1
 800b188:	42ab      	cmp	r3, r5
 800b18a:	dcf2      	bgt.n	800b172 <_printf_i+0x21e>
 800b18c:	e7eb      	b.n	800b166 <_printf_i+0x212>
 800b18e:	2500      	movs	r5, #0
 800b190:	f104 0619 	add.w	r6, r4, #25
 800b194:	e7f5      	b.n	800b182 <_printf_i+0x22e>
 800b196:	bf00      	nop
 800b198:	0800d732 	.word	0x0800d732
 800b19c:	0800d743 	.word	0x0800d743

0800b1a0 <siprintf>:
 800b1a0:	b40e      	push	{r1, r2, r3}
 800b1a2:	b500      	push	{lr}
 800b1a4:	b09c      	sub	sp, #112	; 0x70
 800b1a6:	ab1d      	add	r3, sp, #116	; 0x74
 800b1a8:	9002      	str	r0, [sp, #8]
 800b1aa:	9006      	str	r0, [sp, #24]
 800b1ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b1b0:	4809      	ldr	r0, [pc, #36]	; (800b1d8 <siprintf+0x38>)
 800b1b2:	9107      	str	r1, [sp, #28]
 800b1b4:	9104      	str	r1, [sp, #16]
 800b1b6:	4909      	ldr	r1, [pc, #36]	; (800b1dc <siprintf+0x3c>)
 800b1b8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b1bc:	9105      	str	r1, [sp, #20]
 800b1be:	6800      	ldr	r0, [r0, #0]
 800b1c0:	9301      	str	r3, [sp, #4]
 800b1c2:	a902      	add	r1, sp, #8
 800b1c4:	f001 fb76 	bl	800c8b4 <_svfiprintf_r>
 800b1c8:	9b02      	ldr	r3, [sp, #8]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	701a      	strb	r2, [r3, #0]
 800b1ce:	b01c      	add	sp, #112	; 0x70
 800b1d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1d4:	b003      	add	sp, #12
 800b1d6:	4770      	bx	lr
 800b1d8:	2000013c 	.word	0x2000013c
 800b1dc:	ffff0208 	.word	0xffff0208

0800b1e0 <quorem>:
 800b1e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1e4:	6903      	ldr	r3, [r0, #16]
 800b1e6:	690c      	ldr	r4, [r1, #16]
 800b1e8:	42a3      	cmp	r3, r4
 800b1ea:	4607      	mov	r7, r0
 800b1ec:	f2c0 8081 	blt.w	800b2f2 <quorem+0x112>
 800b1f0:	3c01      	subs	r4, #1
 800b1f2:	f101 0814 	add.w	r8, r1, #20
 800b1f6:	f100 0514 	add.w	r5, r0, #20
 800b1fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1fe:	9301      	str	r3, [sp, #4]
 800b200:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b204:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b208:	3301      	adds	r3, #1
 800b20a:	429a      	cmp	r2, r3
 800b20c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b210:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b214:	fbb2 f6f3 	udiv	r6, r2, r3
 800b218:	d331      	bcc.n	800b27e <quorem+0x9e>
 800b21a:	f04f 0e00 	mov.w	lr, #0
 800b21e:	4640      	mov	r0, r8
 800b220:	46ac      	mov	ip, r5
 800b222:	46f2      	mov	sl, lr
 800b224:	f850 2b04 	ldr.w	r2, [r0], #4
 800b228:	b293      	uxth	r3, r2
 800b22a:	fb06 e303 	mla	r3, r6, r3, lr
 800b22e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b232:	b29b      	uxth	r3, r3
 800b234:	ebaa 0303 	sub.w	r3, sl, r3
 800b238:	f8dc a000 	ldr.w	sl, [ip]
 800b23c:	0c12      	lsrs	r2, r2, #16
 800b23e:	fa13 f38a 	uxtah	r3, r3, sl
 800b242:	fb06 e202 	mla	r2, r6, r2, lr
 800b246:	9300      	str	r3, [sp, #0]
 800b248:	9b00      	ldr	r3, [sp, #0]
 800b24a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b24e:	b292      	uxth	r2, r2
 800b250:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b254:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b258:	f8bd 3000 	ldrh.w	r3, [sp]
 800b25c:	4581      	cmp	r9, r0
 800b25e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b262:	f84c 3b04 	str.w	r3, [ip], #4
 800b266:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b26a:	d2db      	bcs.n	800b224 <quorem+0x44>
 800b26c:	f855 300b 	ldr.w	r3, [r5, fp]
 800b270:	b92b      	cbnz	r3, 800b27e <quorem+0x9e>
 800b272:	9b01      	ldr	r3, [sp, #4]
 800b274:	3b04      	subs	r3, #4
 800b276:	429d      	cmp	r5, r3
 800b278:	461a      	mov	r2, r3
 800b27a:	d32e      	bcc.n	800b2da <quorem+0xfa>
 800b27c:	613c      	str	r4, [r7, #16]
 800b27e:	4638      	mov	r0, r7
 800b280:	f001 f8c4 	bl	800c40c <__mcmp>
 800b284:	2800      	cmp	r0, #0
 800b286:	db24      	blt.n	800b2d2 <quorem+0xf2>
 800b288:	3601      	adds	r6, #1
 800b28a:	4628      	mov	r0, r5
 800b28c:	f04f 0c00 	mov.w	ip, #0
 800b290:	f858 2b04 	ldr.w	r2, [r8], #4
 800b294:	f8d0 e000 	ldr.w	lr, [r0]
 800b298:	b293      	uxth	r3, r2
 800b29a:	ebac 0303 	sub.w	r3, ip, r3
 800b29e:	0c12      	lsrs	r2, r2, #16
 800b2a0:	fa13 f38e 	uxtah	r3, r3, lr
 800b2a4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b2a8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2ac:	b29b      	uxth	r3, r3
 800b2ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2b2:	45c1      	cmp	r9, r8
 800b2b4:	f840 3b04 	str.w	r3, [r0], #4
 800b2b8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b2bc:	d2e8      	bcs.n	800b290 <quorem+0xb0>
 800b2be:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2c2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2c6:	b922      	cbnz	r2, 800b2d2 <quorem+0xf2>
 800b2c8:	3b04      	subs	r3, #4
 800b2ca:	429d      	cmp	r5, r3
 800b2cc:	461a      	mov	r2, r3
 800b2ce:	d30a      	bcc.n	800b2e6 <quorem+0x106>
 800b2d0:	613c      	str	r4, [r7, #16]
 800b2d2:	4630      	mov	r0, r6
 800b2d4:	b003      	add	sp, #12
 800b2d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2da:	6812      	ldr	r2, [r2, #0]
 800b2dc:	3b04      	subs	r3, #4
 800b2de:	2a00      	cmp	r2, #0
 800b2e0:	d1cc      	bne.n	800b27c <quorem+0x9c>
 800b2e2:	3c01      	subs	r4, #1
 800b2e4:	e7c7      	b.n	800b276 <quorem+0x96>
 800b2e6:	6812      	ldr	r2, [r2, #0]
 800b2e8:	3b04      	subs	r3, #4
 800b2ea:	2a00      	cmp	r2, #0
 800b2ec:	d1f0      	bne.n	800b2d0 <quorem+0xf0>
 800b2ee:	3c01      	subs	r4, #1
 800b2f0:	e7eb      	b.n	800b2ca <quorem+0xea>
 800b2f2:	2000      	movs	r0, #0
 800b2f4:	e7ee      	b.n	800b2d4 <quorem+0xf4>
	...

0800b2f8 <_dtoa_r>:
 800b2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2fc:	ed2d 8b04 	vpush	{d8-d9}
 800b300:	ec57 6b10 	vmov	r6, r7, d0
 800b304:	b093      	sub	sp, #76	; 0x4c
 800b306:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b308:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b30c:	9106      	str	r1, [sp, #24]
 800b30e:	ee10 aa10 	vmov	sl, s0
 800b312:	4604      	mov	r4, r0
 800b314:	9209      	str	r2, [sp, #36]	; 0x24
 800b316:	930c      	str	r3, [sp, #48]	; 0x30
 800b318:	46bb      	mov	fp, r7
 800b31a:	b975      	cbnz	r5, 800b33a <_dtoa_r+0x42>
 800b31c:	2010      	movs	r0, #16
 800b31e:	f000 fddd 	bl	800bedc <malloc>
 800b322:	4602      	mov	r2, r0
 800b324:	6260      	str	r0, [r4, #36]	; 0x24
 800b326:	b920      	cbnz	r0, 800b332 <_dtoa_r+0x3a>
 800b328:	4ba7      	ldr	r3, [pc, #668]	; (800b5c8 <_dtoa_r+0x2d0>)
 800b32a:	21ea      	movs	r1, #234	; 0xea
 800b32c:	48a7      	ldr	r0, [pc, #668]	; (800b5cc <_dtoa_r+0x2d4>)
 800b32e:	f001 fbd1 	bl	800cad4 <__assert_func>
 800b332:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b336:	6005      	str	r5, [r0, #0]
 800b338:	60c5      	str	r5, [r0, #12]
 800b33a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b33c:	6819      	ldr	r1, [r3, #0]
 800b33e:	b151      	cbz	r1, 800b356 <_dtoa_r+0x5e>
 800b340:	685a      	ldr	r2, [r3, #4]
 800b342:	604a      	str	r2, [r1, #4]
 800b344:	2301      	movs	r3, #1
 800b346:	4093      	lsls	r3, r2
 800b348:	608b      	str	r3, [r1, #8]
 800b34a:	4620      	mov	r0, r4
 800b34c:	f000 fe1c 	bl	800bf88 <_Bfree>
 800b350:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b352:	2200      	movs	r2, #0
 800b354:	601a      	str	r2, [r3, #0]
 800b356:	1e3b      	subs	r3, r7, #0
 800b358:	bfaa      	itet	ge
 800b35a:	2300      	movge	r3, #0
 800b35c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b360:	f8c8 3000 	strge.w	r3, [r8]
 800b364:	4b9a      	ldr	r3, [pc, #616]	; (800b5d0 <_dtoa_r+0x2d8>)
 800b366:	bfbc      	itt	lt
 800b368:	2201      	movlt	r2, #1
 800b36a:	f8c8 2000 	strlt.w	r2, [r8]
 800b36e:	ea33 030b 	bics.w	r3, r3, fp
 800b372:	d11b      	bne.n	800b3ac <_dtoa_r+0xb4>
 800b374:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b376:	f242 730f 	movw	r3, #9999	; 0x270f
 800b37a:	6013      	str	r3, [r2, #0]
 800b37c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b380:	4333      	orrs	r3, r6
 800b382:	f000 8592 	beq.w	800beaa <_dtoa_r+0xbb2>
 800b386:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b388:	b963      	cbnz	r3, 800b3a4 <_dtoa_r+0xac>
 800b38a:	4b92      	ldr	r3, [pc, #584]	; (800b5d4 <_dtoa_r+0x2dc>)
 800b38c:	e022      	b.n	800b3d4 <_dtoa_r+0xdc>
 800b38e:	4b92      	ldr	r3, [pc, #584]	; (800b5d8 <_dtoa_r+0x2e0>)
 800b390:	9301      	str	r3, [sp, #4]
 800b392:	3308      	adds	r3, #8
 800b394:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	9801      	ldr	r0, [sp, #4]
 800b39a:	b013      	add	sp, #76	; 0x4c
 800b39c:	ecbd 8b04 	vpop	{d8-d9}
 800b3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a4:	4b8b      	ldr	r3, [pc, #556]	; (800b5d4 <_dtoa_r+0x2dc>)
 800b3a6:	9301      	str	r3, [sp, #4]
 800b3a8:	3303      	adds	r3, #3
 800b3aa:	e7f3      	b.n	800b394 <_dtoa_r+0x9c>
 800b3ac:	2200      	movs	r2, #0
 800b3ae:	2300      	movs	r3, #0
 800b3b0:	4650      	mov	r0, sl
 800b3b2:	4659      	mov	r1, fp
 800b3b4:	f7f5 fb90 	bl	8000ad8 <__aeabi_dcmpeq>
 800b3b8:	ec4b ab19 	vmov	d9, sl, fp
 800b3bc:	4680      	mov	r8, r0
 800b3be:	b158      	cbz	r0, 800b3d8 <_dtoa_r+0xe0>
 800b3c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	6013      	str	r3, [r2, #0]
 800b3c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f000 856b 	beq.w	800bea4 <_dtoa_r+0xbac>
 800b3ce:	4883      	ldr	r0, [pc, #524]	; (800b5dc <_dtoa_r+0x2e4>)
 800b3d0:	6018      	str	r0, [r3, #0]
 800b3d2:	1e43      	subs	r3, r0, #1
 800b3d4:	9301      	str	r3, [sp, #4]
 800b3d6:	e7df      	b.n	800b398 <_dtoa_r+0xa0>
 800b3d8:	ec4b ab10 	vmov	d0, sl, fp
 800b3dc:	aa10      	add	r2, sp, #64	; 0x40
 800b3de:	a911      	add	r1, sp, #68	; 0x44
 800b3e0:	4620      	mov	r0, r4
 800b3e2:	f001 f8b9 	bl	800c558 <__d2b>
 800b3e6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b3ea:	ee08 0a10 	vmov	s16, r0
 800b3ee:	2d00      	cmp	r5, #0
 800b3f0:	f000 8084 	beq.w	800b4fc <_dtoa_r+0x204>
 800b3f4:	ee19 3a90 	vmov	r3, s19
 800b3f8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3fc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b400:	4656      	mov	r6, sl
 800b402:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b406:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b40a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b40e:	4b74      	ldr	r3, [pc, #464]	; (800b5e0 <_dtoa_r+0x2e8>)
 800b410:	2200      	movs	r2, #0
 800b412:	4630      	mov	r0, r6
 800b414:	4639      	mov	r1, r7
 800b416:	f7f4 ff3f 	bl	8000298 <__aeabi_dsub>
 800b41a:	a365      	add	r3, pc, #404	; (adr r3, 800b5b0 <_dtoa_r+0x2b8>)
 800b41c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b420:	f7f5 f8f2 	bl	8000608 <__aeabi_dmul>
 800b424:	a364      	add	r3, pc, #400	; (adr r3, 800b5b8 <_dtoa_r+0x2c0>)
 800b426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42a:	f7f4 ff37 	bl	800029c <__adddf3>
 800b42e:	4606      	mov	r6, r0
 800b430:	4628      	mov	r0, r5
 800b432:	460f      	mov	r7, r1
 800b434:	f7f5 f87e 	bl	8000534 <__aeabi_i2d>
 800b438:	a361      	add	r3, pc, #388	; (adr r3, 800b5c0 <_dtoa_r+0x2c8>)
 800b43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b43e:	f7f5 f8e3 	bl	8000608 <__aeabi_dmul>
 800b442:	4602      	mov	r2, r0
 800b444:	460b      	mov	r3, r1
 800b446:	4630      	mov	r0, r6
 800b448:	4639      	mov	r1, r7
 800b44a:	f7f4 ff27 	bl	800029c <__adddf3>
 800b44e:	4606      	mov	r6, r0
 800b450:	460f      	mov	r7, r1
 800b452:	f7f5 fb89 	bl	8000b68 <__aeabi_d2iz>
 800b456:	2200      	movs	r2, #0
 800b458:	9000      	str	r0, [sp, #0]
 800b45a:	2300      	movs	r3, #0
 800b45c:	4630      	mov	r0, r6
 800b45e:	4639      	mov	r1, r7
 800b460:	f7f5 fb44 	bl	8000aec <__aeabi_dcmplt>
 800b464:	b150      	cbz	r0, 800b47c <_dtoa_r+0x184>
 800b466:	9800      	ldr	r0, [sp, #0]
 800b468:	f7f5 f864 	bl	8000534 <__aeabi_i2d>
 800b46c:	4632      	mov	r2, r6
 800b46e:	463b      	mov	r3, r7
 800b470:	f7f5 fb32 	bl	8000ad8 <__aeabi_dcmpeq>
 800b474:	b910      	cbnz	r0, 800b47c <_dtoa_r+0x184>
 800b476:	9b00      	ldr	r3, [sp, #0]
 800b478:	3b01      	subs	r3, #1
 800b47a:	9300      	str	r3, [sp, #0]
 800b47c:	9b00      	ldr	r3, [sp, #0]
 800b47e:	2b16      	cmp	r3, #22
 800b480:	d85a      	bhi.n	800b538 <_dtoa_r+0x240>
 800b482:	9a00      	ldr	r2, [sp, #0]
 800b484:	4b57      	ldr	r3, [pc, #348]	; (800b5e4 <_dtoa_r+0x2ec>)
 800b486:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b48a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b48e:	ec51 0b19 	vmov	r0, r1, d9
 800b492:	f7f5 fb2b 	bl	8000aec <__aeabi_dcmplt>
 800b496:	2800      	cmp	r0, #0
 800b498:	d050      	beq.n	800b53c <_dtoa_r+0x244>
 800b49a:	9b00      	ldr	r3, [sp, #0]
 800b49c:	3b01      	subs	r3, #1
 800b49e:	9300      	str	r3, [sp, #0]
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b4a6:	1b5d      	subs	r5, r3, r5
 800b4a8:	1e6b      	subs	r3, r5, #1
 800b4aa:	9305      	str	r3, [sp, #20]
 800b4ac:	bf45      	ittet	mi
 800b4ae:	f1c5 0301 	rsbmi	r3, r5, #1
 800b4b2:	9304      	strmi	r3, [sp, #16]
 800b4b4:	2300      	movpl	r3, #0
 800b4b6:	2300      	movmi	r3, #0
 800b4b8:	bf4c      	ite	mi
 800b4ba:	9305      	strmi	r3, [sp, #20]
 800b4bc:	9304      	strpl	r3, [sp, #16]
 800b4be:	9b00      	ldr	r3, [sp, #0]
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	db3d      	blt.n	800b540 <_dtoa_r+0x248>
 800b4c4:	9b05      	ldr	r3, [sp, #20]
 800b4c6:	9a00      	ldr	r2, [sp, #0]
 800b4c8:	920a      	str	r2, [sp, #40]	; 0x28
 800b4ca:	4413      	add	r3, r2
 800b4cc:	9305      	str	r3, [sp, #20]
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	9307      	str	r3, [sp, #28]
 800b4d2:	9b06      	ldr	r3, [sp, #24]
 800b4d4:	2b09      	cmp	r3, #9
 800b4d6:	f200 8089 	bhi.w	800b5ec <_dtoa_r+0x2f4>
 800b4da:	2b05      	cmp	r3, #5
 800b4dc:	bfc4      	itt	gt
 800b4de:	3b04      	subgt	r3, #4
 800b4e0:	9306      	strgt	r3, [sp, #24]
 800b4e2:	9b06      	ldr	r3, [sp, #24]
 800b4e4:	f1a3 0302 	sub.w	r3, r3, #2
 800b4e8:	bfcc      	ite	gt
 800b4ea:	2500      	movgt	r5, #0
 800b4ec:	2501      	movle	r5, #1
 800b4ee:	2b03      	cmp	r3, #3
 800b4f0:	f200 8087 	bhi.w	800b602 <_dtoa_r+0x30a>
 800b4f4:	e8df f003 	tbb	[pc, r3]
 800b4f8:	59383a2d 	.word	0x59383a2d
 800b4fc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b500:	441d      	add	r5, r3
 800b502:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b506:	2b20      	cmp	r3, #32
 800b508:	bfc1      	itttt	gt
 800b50a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b50e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b512:	fa0b f303 	lslgt.w	r3, fp, r3
 800b516:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b51a:	bfda      	itte	le
 800b51c:	f1c3 0320 	rsble	r3, r3, #32
 800b520:	fa06 f003 	lslle.w	r0, r6, r3
 800b524:	4318      	orrgt	r0, r3
 800b526:	f7f4 fff5 	bl	8000514 <__aeabi_ui2d>
 800b52a:	2301      	movs	r3, #1
 800b52c:	4606      	mov	r6, r0
 800b52e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b532:	3d01      	subs	r5, #1
 800b534:	930e      	str	r3, [sp, #56]	; 0x38
 800b536:	e76a      	b.n	800b40e <_dtoa_r+0x116>
 800b538:	2301      	movs	r3, #1
 800b53a:	e7b2      	b.n	800b4a2 <_dtoa_r+0x1aa>
 800b53c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b53e:	e7b1      	b.n	800b4a4 <_dtoa_r+0x1ac>
 800b540:	9b04      	ldr	r3, [sp, #16]
 800b542:	9a00      	ldr	r2, [sp, #0]
 800b544:	1a9b      	subs	r3, r3, r2
 800b546:	9304      	str	r3, [sp, #16]
 800b548:	4253      	negs	r3, r2
 800b54a:	9307      	str	r3, [sp, #28]
 800b54c:	2300      	movs	r3, #0
 800b54e:	930a      	str	r3, [sp, #40]	; 0x28
 800b550:	e7bf      	b.n	800b4d2 <_dtoa_r+0x1da>
 800b552:	2300      	movs	r3, #0
 800b554:	9308      	str	r3, [sp, #32]
 800b556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b558:	2b00      	cmp	r3, #0
 800b55a:	dc55      	bgt.n	800b608 <_dtoa_r+0x310>
 800b55c:	2301      	movs	r3, #1
 800b55e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b562:	461a      	mov	r2, r3
 800b564:	9209      	str	r2, [sp, #36]	; 0x24
 800b566:	e00c      	b.n	800b582 <_dtoa_r+0x28a>
 800b568:	2301      	movs	r3, #1
 800b56a:	e7f3      	b.n	800b554 <_dtoa_r+0x25c>
 800b56c:	2300      	movs	r3, #0
 800b56e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b570:	9308      	str	r3, [sp, #32]
 800b572:	9b00      	ldr	r3, [sp, #0]
 800b574:	4413      	add	r3, r2
 800b576:	9302      	str	r3, [sp, #8]
 800b578:	3301      	adds	r3, #1
 800b57a:	2b01      	cmp	r3, #1
 800b57c:	9303      	str	r3, [sp, #12]
 800b57e:	bfb8      	it	lt
 800b580:	2301      	movlt	r3, #1
 800b582:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b584:	2200      	movs	r2, #0
 800b586:	6042      	str	r2, [r0, #4]
 800b588:	2204      	movs	r2, #4
 800b58a:	f102 0614 	add.w	r6, r2, #20
 800b58e:	429e      	cmp	r6, r3
 800b590:	6841      	ldr	r1, [r0, #4]
 800b592:	d93d      	bls.n	800b610 <_dtoa_r+0x318>
 800b594:	4620      	mov	r0, r4
 800b596:	f000 fcb7 	bl	800bf08 <_Balloc>
 800b59a:	9001      	str	r0, [sp, #4]
 800b59c:	2800      	cmp	r0, #0
 800b59e:	d13b      	bne.n	800b618 <_dtoa_r+0x320>
 800b5a0:	4b11      	ldr	r3, [pc, #68]	; (800b5e8 <_dtoa_r+0x2f0>)
 800b5a2:	4602      	mov	r2, r0
 800b5a4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b5a8:	e6c0      	b.n	800b32c <_dtoa_r+0x34>
 800b5aa:	2301      	movs	r3, #1
 800b5ac:	e7df      	b.n	800b56e <_dtoa_r+0x276>
 800b5ae:	bf00      	nop
 800b5b0:	636f4361 	.word	0x636f4361
 800b5b4:	3fd287a7 	.word	0x3fd287a7
 800b5b8:	8b60c8b3 	.word	0x8b60c8b3
 800b5bc:	3fc68a28 	.word	0x3fc68a28
 800b5c0:	509f79fb 	.word	0x509f79fb
 800b5c4:	3fd34413 	.word	0x3fd34413
 800b5c8:	0800d761 	.word	0x0800d761
 800b5cc:	0800d778 	.word	0x0800d778
 800b5d0:	7ff00000 	.word	0x7ff00000
 800b5d4:	0800d75d 	.word	0x0800d75d
 800b5d8:	0800d754 	.word	0x0800d754
 800b5dc:	0800d731 	.word	0x0800d731
 800b5e0:	3ff80000 	.word	0x3ff80000
 800b5e4:	0800d868 	.word	0x0800d868
 800b5e8:	0800d7d3 	.word	0x0800d7d3
 800b5ec:	2501      	movs	r5, #1
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	9306      	str	r3, [sp, #24]
 800b5f2:	9508      	str	r5, [sp, #32]
 800b5f4:	f04f 33ff 	mov.w	r3, #4294967295
 800b5f8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	2312      	movs	r3, #18
 800b600:	e7b0      	b.n	800b564 <_dtoa_r+0x26c>
 800b602:	2301      	movs	r3, #1
 800b604:	9308      	str	r3, [sp, #32]
 800b606:	e7f5      	b.n	800b5f4 <_dtoa_r+0x2fc>
 800b608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b60a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b60e:	e7b8      	b.n	800b582 <_dtoa_r+0x28a>
 800b610:	3101      	adds	r1, #1
 800b612:	6041      	str	r1, [r0, #4]
 800b614:	0052      	lsls	r2, r2, #1
 800b616:	e7b8      	b.n	800b58a <_dtoa_r+0x292>
 800b618:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b61a:	9a01      	ldr	r2, [sp, #4]
 800b61c:	601a      	str	r2, [r3, #0]
 800b61e:	9b03      	ldr	r3, [sp, #12]
 800b620:	2b0e      	cmp	r3, #14
 800b622:	f200 809d 	bhi.w	800b760 <_dtoa_r+0x468>
 800b626:	2d00      	cmp	r5, #0
 800b628:	f000 809a 	beq.w	800b760 <_dtoa_r+0x468>
 800b62c:	9b00      	ldr	r3, [sp, #0]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	dd32      	ble.n	800b698 <_dtoa_r+0x3a0>
 800b632:	4ab7      	ldr	r2, [pc, #732]	; (800b910 <_dtoa_r+0x618>)
 800b634:	f003 030f 	and.w	r3, r3, #15
 800b638:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b63c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b640:	9b00      	ldr	r3, [sp, #0]
 800b642:	05d8      	lsls	r0, r3, #23
 800b644:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b648:	d516      	bpl.n	800b678 <_dtoa_r+0x380>
 800b64a:	4bb2      	ldr	r3, [pc, #712]	; (800b914 <_dtoa_r+0x61c>)
 800b64c:	ec51 0b19 	vmov	r0, r1, d9
 800b650:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b654:	f7f5 f902 	bl	800085c <__aeabi_ddiv>
 800b658:	f007 070f 	and.w	r7, r7, #15
 800b65c:	4682      	mov	sl, r0
 800b65e:	468b      	mov	fp, r1
 800b660:	2503      	movs	r5, #3
 800b662:	4eac      	ldr	r6, [pc, #688]	; (800b914 <_dtoa_r+0x61c>)
 800b664:	b957      	cbnz	r7, 800b67c <_dtoa_r+0x384>
 800b666:	4642      	mov	r2, r8
 800b668:	464b      	mov	r3, r9
 800b66a:	4650      	mov	r0, sl
 800b66c:	4659      	mov	r1, fp
 800b66e:	f7f5 f8f5 	bl	800085c <__aeabi_ddiv>
 800b672:	4682      	mov	sl, r0
 800b674:	468b      	mov	fp, r1
 800b676:	e028      	b.n	800b6ca <_dtoa_r+0x3d2>
 800b678:	2502      	movs	r5, #2
 800b67a:	e7f2      	b.n	800b662 <_dtoa_r+0x36a>
 800b67c:	07f9      	lsls	r1, r7, #31
 800b67e:	d508      	bpl.n	800b692 <_dtoa_r+0x39a>
 800b680:	4640      	mov	r0, r8
 800b682:	4649      	mov	r1, r9
 800b684:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b688:	f7f4 ffbe 	bl	8000608 <__aeabi_dmul>
 800b68c:	3501      	adds	r5, #1
 800b68e:	4680      	mov	r8, r0
 800b690:	4689      	mov	r9, r1
 800b692:	107f      	asrs	r7, r7, #1
 800b694:	3608      	adds	r6, #8
 800b696:	e7e5      	b.n	800b664 <_dtoa_r+0x36c>
 800b698:	f000 809b 	beq.w	800b7d2 <_dtoa_r+0x4da>
 800b69c:	9b00      	ldr	r3, [sp, #0]
 800b69e:	4f9d      	ldr	r7, [pc, #628]	; (800b914 <_dtoa_r+0x61c>)
 800b6a0:	425e      	negs	r6, r3
 800b6a2:	4b9b      	ldr	r3, [pc, #620]	; (800b910 <_dtoa_r+0x618>)
 800b6a4:	f006 020f 	and.w	r2, r6, #15
 800b6a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b0:	ec51 0b19 	vmov	r0, r1, d9
 800b6b4:	f7f4 ffa8 	bl	8000608 <__aeabi_dmul>
 800b6b8:	1136      	asrs	r6, r6, #4
 800b6ba:	4682      	mov	sl, r0
 800b6bc:	468b      	mov	fp, r1
 800b6be:	2300      	movs	r3, #0
 800b6c0:	2502      	movs	r5, #2
 800b6c2:	2e00      	cmp	r6, #0
 800b6c4:	d17a      	bne.n	800b7bc <_dtoa_r+0x4c4>
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d1d3      	bne.n	800b672 <_dtoa_r+0x37a>
 800b6ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	f000 8082 	beq.w	800b7d6 <_dtoa_r+0x4de>
 800b6d2:	4b91      	ldr	r3, [pc, #580]	; (800b918 <_dtoa_r+0x620>)
 800b6d4:	2200      	movs	r2, #0
 800b6d6:	4650      	mov	r0, sl
 800b6d8:	4659      	mov	r1, fp
 800b6da:	f7f5 fa07 	bl	8000aec <__aeabi_dcmplt>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d079      	beq.n	800b7d6 <_dtoa_r+0x4de>
 800b6e2:	9b03      	ldr	r3, [sp, #12]
 800b6e4:	2b00      	cmp	r3, #0
 800b6e6:	d076      	beq.n	800b7d6 <_dtoa_r+0x4de>
 800b6e8:	9b02      	ldr	r3, [sp, #8]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	dd36      	ble.n	800b75c <_dtoa_r+0x464>
 800b6ee:	9b00      	ldr	r3, [sp, #0]
 800b6f0:	4650      	mov	r0, sl
 800b6f2:	4659      	mov	r1, fp
 800b6f4:	1e5f      	subs	r7, r3, #1
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	4b88      	ldr	r3, [pc, #544]	; (800b91c <_dtoa_r+0x624>)
 800b6fa:	f7f4 ff85 	bl	8000608 <__aeabi_dmul>
 800b6fe:	9e02      	ldr	r6, [sp, #8]
 800b700:	4682      	mov	sl, r0
 800b702:	468b      	mov	fp, r1
 800b704:	3501      	adds	r5, #1
 800b706:	4628      	mov	r0, r5
 800b708:	f7f4 ff14 	bl	8000534 <__aeabi_i2d>
 800b70c:	4652      	mov	r2, sl
 800b70e:	465b      	mov	r3, fp
 800b710:	f7f4 ff7a 	bl	8000608 <__aeabi_dmul>
 800b714:	4b82      	ldr	r3, [pc, #520]	; (800b920 <_dtoa_r+0x628>)
 800b716:	2200      	movs	r2, #0
 800b718:	f7f4 fdc0 	bl	800029c <__adddf3>
 800b71c:	46d0      	mov	r8, sl
 800b71e:	46d9      	mov	r9, fp
 800b720:	4682      	mov	sl, r0
 800b722:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b726:	2e00      	cmp	r6, #0
 800b728:	d158      	bne.n	800b7dc <_dtoa_r+0x4e4>
 800b72a:	4b7e      	ldr	r3, [pc, #504]	; (800b924 <_dtoa_r+0x62c>)
 800b72c:	2200      	movs	r2, #0
 800b72e:	4640      	mov	r0, r8
 800b730:	4649      	mov	r1, r9
 800b732:	f7f4 fdb1 	bl	8000298 <__aeabi_dsub>
 800b736:	4652      	mov	r2, sl
 800b738:	465b      	mov	r3, fp
 800b73a:	4680      	mov	r8, r0
 800b73c:	4689      	mov	r9, r1
 800b73e:	f7f5 f9f3 	bl	8000b28 <__aeabi_dcmpgt>
 800b742:	2800      	cmp	r0, #0
 800b744:	f040 8295 	bne.w	800bc72 <_dtoa_r+0x97a>
 800b748:	4652      	mov	r2, sl
 800b74a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b74e:	4640      	mov	r0, r8
 800b750:	4649      	mov	r1, r9
 800b752:	f7f5 f9cb 	bl	8000aec <__aeabi_dcmplt>
 800b756:	2800      	cmp	r0, #0
 800b758:	f040 8289 	bne.w	800bc6e <_dtoa_r+0x976>
 800b75c:	ec5b ab19 	vmov	sl, fp, d9
 800b760:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b762:	2b00      	cmp	r3, #0
 800b764:	f2c0 8148 	blt.w	800b9f8 <_dtoa_r+0x700>
 800b768:	9a00      	ldr	r2, [sp, #0]
 800b76a:	2a0e      	cmp	r2, #14
 800b76c:	f300 8144 	bgt.w	800b9f8 <_dtoa_r+0x700>
 800b770:	4b67      	ldr	r3, [pc, #412]	; (800b910 <_dtoa_r+0x618>)
 800b772:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b776:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b77a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	f280 80d5 	bge.w	800b92c <_dtoa_r+0x634>
 800b782:	9b03      	ldr	r3, [sp, #12]
 800b784:	2b00      	cmp	r3, #0
 800b786:	f300 80d1 	bgt.w	800b92c <_dtoa_r+0x634>
 800b78a:	f040 826f 	bne.w	800bc6c <_dtoa_r+0x974>
 800b78e:	4b65      	ldr	r3, [pc, #404]	; (800b924 <_dtoa_r+0x62c>)
 800b790:	2200      	movs	r2, #0
 800b792:	4640      	mov	r0, r8
 800b794:	4649      	mov	r1, r9
 800b796:	f7f4 ff37 	bl	8000608 <__aeabi_dmul>
 800b79a:	4652      	mov	r2, sl
 800b79c:	465b      	mov	r3, fp
 800b79e:	f7f5 f9b9 	bl	8000b14 <__aeabi_dcmpge>
 800b7a2:	9e03      	ldr	r6, [sp, #12]
 800b7a4:	4637      	mov	r7, r6
 800b7a6:	2800      	cmp	r0, #0
 800b7a8:	f040 8245 	bne.w	800bc36 <_dtoa_r+0x93e>
 800b7ac:	9d01      	ldr	r5, [sp, #4]
 800b7ae:	2331      	movs	r3, #49	; 0x31
 800b7b0:	f805 3b01 	strb.w	r3, [r5], #1
 800b7b4:	9b00      	ldr	r3, [sp, #0]
 800b7b6:	3301      	adds	r3, #1
 800b7b8:	9300      	str	r3, [sp, #0]
 800b7ba:	e240      	b.n	800bc3e <_dtoa_r+0x946>
 800b7bc:	07f2      	lsls	r2, r6, #31
 800b7be:	d505      	bpl.n	800b7cc <_dtoa_r+0x4d4>
 800b7c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b7c4:	f7f4 ff20 	bl	8000608 <__aeabi_dmul>
 800b7c8:	3501      	adds	r5, #1
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	1076      	asrs	r6, r6, #1
 800b7ce:	3708      	adds	r7, #8
 800b7d0:	e777      	b.n	800b6c2 <_dtoa_r+0x3ca>
 800b7d2:	2502      	movs	r5, #2
 800b7d4:	e779      	b.n	800b6ca <_dtoa_r+0x3d2>
 800b7d6:	9f00      	ldr	r7, [sp, #0]
 800b7d8:	9e03      	ldr	r6, [sp, #12]
 800b7da:	e794      	b.n	800b706 <_dtoa_r+0x40e>
 800b7dc:	9901      	ldr	r1, [sp, #4]
 800b7de:	4b4c      	ldr	r3, [pc, #304]	; (800b910 <_dtoa_r+0x618>)
 800b7e0:	4431      	add	r1, r6
 800b7e2:	910d      	str	r1, [sp, #52]	; 0x34
 800b7e4:	9908      	ldr	r1, [sp, #32]
 800b7e6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b7ea:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b7ee:	2900      	cmp	r1, #0
 800b7f0:	d043      	beq.n	800b87a <_dtoa_r+0x582>
 800b7f2:	494d      	ldr	r1, [pc, #308]	; (800b928 <_dtoa_r+0x630>)
 800b7f4:	2000      	movs	r0, #0
 800b7f6:	f7f5 f831 	bl	800085c <__aeabi_ddiv>
 800b7fa:	4652      	mov	r2, sl
 800b7fc:	465b      	mov	r3, fp
 800b7fe:	f7f4 fd4b 	bl	8000298 <__aeabi_dsub>
 800b802:	9d01      	ldr	r5, [sp, #4]
 800b804:	4682      	mov	sl, r0
 800b806:	468b      	mov	fp, r1
 800b808:	4649      	mov	r1, r9
 800b80a:	4640      	mov	r0, r8
 800b80c:	f7f5 f9ac 	bl	8000b68 <__aeabi_d2iz>
 800b810:	4606      	mov	r6, r0
 800b812:	f7f4 fe8f 	bl	8000534 <__aeabi_i2d>
 800b816:	4602      	mov	r2, r0
 800b818:	460b      	mov	r3, r1
 800b81a:	4640      	mov	r0, r8
 800b81c:	4649      	mov	r1, r9
 800b81e:	f7f4 fd3b 	bl	8000298 <__aeabi_dsub>
 800b822:	3630      	adds	r6, #48	; 0x30
 800b824:	f805 6b01 	strb.w	r6, [r5], #1
 800b828:	4652      	mov	r2, sl
 800b82a:	465b      	mov	r3, fp
 800b82c:	4680      	mov	r8, r0
 800b82e:	4689      	mov	r9, r1
 800b830:	f7f5 f95c 	bl	8000aec <__aeabi_dcmplt>
 800b834:	2800      	cmp	r0, #0
 800b836:	d163      	bne.n	800b900 <_dtoa_r+0x608>
 800b838:	4642      	mov	r2, r8
 800b83a:	464b      	mov	r3, r9
 800b83c:	4936      	ldr	r1, [pc, #216]	; (800b918 <_dtoa_r+0x620>)
 800b83e:	2000      	movs	r0, #0
 800b840:	f7f4 fd2a 	bl	8000298 <__aeabi_dsub>
 800b844:	4652      	mov	r2, sl
 800b846:	465b      	mov	r3, fp
 800b848:	f7f5 f950 	bl	8000aec <__aeabi_dcmplt>
 800b84c:	2800      	cmp	r0, #0
 800b84e:	f040 80b5 	bne.w	800b9bc <_dtoa_r+0x6c4>
 800b852:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b854:	429d      	cmp	r5, r3
 800b856:	d081      	beq.n	800b75c <_dtoa_r+0x464>
 800b858:	4b30      	ldr	r3, [pc, #192]	; (800b91c <_dtoa_r+0x624>)
 800b85a:	2200      	movs	r2, #0
 800b85c:	4650      	mov	r0, sl
 800b85e:	4659      	mov	r1, fp
 800b860:	f7f4 fed2 	bl	8000608 <__aeabi_dmul>
 800b864:	4b2d      	ldr	r3, [pc, #180]	; (800b91c <_dtoa_r+0x624>)
 800b866:	4682      	mov	sl, r0
 800b868:	468b      	mov	fp, r1
 800b86a:	4640      	mov	r0, r8
 800b86c:	4649      	mov	r1, r9
 800b86e:	2200      	movs	r2, #0
 800b870:	f7f4 feca 	bl	8000608 <__aeabi_dmul>
 800b874:	4680      	mov	r8, r0
 800b876:	4689      	mov	r9, r1
 800b878:	e7c6      	b.n	800b808 <_dtoa_r+0x510>
 800b87a:	4650      	mov	r0, sl
 800b87c:	4659      	mov	r1, fp
 800b87e:	f7f4 fec3 	bl	8000608 <__aeabi_dmul>
 800b882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b884:	9d01      	ldr	r5, [sp, #4]
 800b886:	930f      	str	r3, [sp, #60]	; 0x3c
 800b888:	4682      	mov	sl, r0
 800b88a:	468b      	mov	fp, r1
 800b88c:	4649      	mov	r1, r9
 800b88e:	4640      	mov	r0, r8
 800b890:	f7f5 f96a 	bl	8000b68 <__aeabi_d2iz>
 800b894:	4606      	mov	r6, r0
 800b896:	f7f4 fe4d 	bl	8000534 <__aeabi_i2d>
 800b89a:	3630      	adds	r6, #48	; 0x30
 800b89c:	4602      	mov	r2, r0
 800b89e:	460b      	mov	r3, r1
 800b8a0:	4640      	mov	r0, r8
 800b8a2:	4649      	mov	r1, r9
 800b8a4:	f7f4 fcf8 	bl	8000298 <__aeabi_dsub>
 800b8a8:	f805 6b01 	strb.w	r6, [r5], #1
 800b8ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8ae:	429d      	cmp	r5, r3
 800b8b0:	4680      	mov	r8, r0
 800b8b2:	4689      	mov	r9, r1
 800b8b4:	f04f 0200 	mov.w	r2, #0
 800b8b8:	d124      	bne.n	800b904 <_dtoa_r+0x60c>
 800b8ba:	4b1b      	ldr	r3, [pc, #108]	; (800b928 <_dtoa_r+0x630>)
 800b8bc:	4650      	mov	r0, sl
 800b8be:	4659      	mov	r1, fp
 800b8c0:	f7f4 fcec 	bl	800029c <__adddf3>
 800b8c4:	4602      	mov	r2, r0
 800b8c6:	460b      	mov	r3, r1
 800b8c8:	4640      	mov	r0, r8
 800b8ca:	4649      	mov	r1, r9
 800b8cc:	f7f5 f92c 	bl	8000b28 <__aeabi_dcmpgt>
 800b8d0:	2800      	cmp	r0, #0
 800b8d2:	d173      	bne.n	800b9bc <_dtoa_r+0x6c4>
 800b8d4:	4652      	mov	r2, sl
 800b8d6:	465b      	mov	r3, fp
 800b8d8:	4913      	ldr	r1, [pc, #76]	; (800b928 <_dtoa_r+0x630>)
 800b8da:	2000      	movs	r0, #0
 800b8dc:	f7f4 fcdc 	bl	8000298 <__aeabi_dsub>
 800b8e0:	4602      	mov	r2, r0
 800b8e2:	460b      	mov	r3, r1
 800b8e4:	4640      	mov	r0, r8
 800b8e6:	4649      	mov	r1, r9
 800b8e8:	f7f5 f900 	bl	8000aec <__aeabi_dcmplt>
 800b8ec:	2800      	cmp	r0, #0
 800b8ee:	f43f af35 	beq.w	800b75c <_dtoa_r+0x464>
 800b8f2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b8f4:	1e6b      	subs	r3, r5, #1
 800b8f6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b8f8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b8fc:	2b30      	cmp	r3, #48	; 0x30
 800b8fe:	d0f8      	beq.n	800b8f2 <_dtoa_r+0x5fa>
 800b900:	9700      	str	r7, [sp, #0]
 800b902:	e049      	b.n	800b998 <_dtoa_r+0x6a0>
 800b904:	4b05      	ldr	r3, [pc, #20]	; (800b91c <_dtoa_r+0x624>)
 800b906:	f7f4 fe7f 	bl	8000608 <__aeabi_dmul>
 800b90a:	4680      	mov	r8, r0
 800b90c:	4689      	mov	r9, r1
 800b90e:	e7bd      	b.n	800b88c <_dtoa_r+0x594>
 800b910:	0800d868 	.word	0x0800d868
 800b914:	0800d840 	.word	0x0800d840
 800b918:	3ff00000 	.word	0x3ff00000
 800b91c:	40240000 	.word	0x40240000
 800b920:	401c0000 	.word	0x401c0000
 800b924:	40140000 	.word	0x40140000
 800b928:	3fe00000 	.word	0x3fe00000
 800b92c:	9d01      	ldr	r5, [sp, #4]
 800b92e:	4656      	mov	r6, sl
 800b930:	465f      	mov	r7, fp
 800b932:	4642      	mov	r2, r8
 800b934:	464b      	mov	r3, r9
 800b936:	4630      	mov	r0, r6
 800b938:	4639      	mov	r1, r7
 800b93a:	f7f4 ff8f 	bl	800085c <__aeabi_ddiv>
 800b93e:	f7f5 f913 	bl	8000b68 <__aeabi_d2iz>
 800b942:	4682      	mov	sl, r0
 800b944:	f7f4 fdf6 	bl	8000534 <__aeabi_i2d>
 800b948:	4642      	mov	r2, r8
 800b94a:	464b      	mov	r3, r9
 800b94c:	f7f4 fe5c 	bl	8000608 <__aeabi_dmul>
 800b950:	4602      	mov	r2, r0
 800b952:	460b      	mov	r3, r1
 800b954:	4630      	mov	r0, r6
 800b956:	4639      	mov	r1, r7
 800b958:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b95c:	f7f4 fc9c 	bl	8000298 <__aeabi_dsub>
 800b960:	f805 6b01 	strb.w	r6, [r5], #1
 800b964:	9e01      	ldr	r6, [sp, #4]
 800b966:	9f03      	ldr	r7, [sp, #12]
 800b968:	1bae      	subs	r6, r5, r6
 800b96a:	42b7      	cmp	r7, r6
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	d135      	bne.n	800b9de <_dtoa_r+0x6e6>
 800b972:	f7f4 fc93 	bl	800029c <__adddf3>
 800b976:	4642      	mov	r2, r8
 800b978:	464b      	mov	r3, r9
 800b97a:	4606      	mov	r6, r0
 800b97c:	460f      	mov	r7, r1
 800b97e:	f7f5 f8d3 	bl	8000b28 <__aeabi_dcmpgt>
 800b982:	b9d0      	cbnz	r0, 800b9ba <_dtoa_r+0x6c2>
 800b984:	4642      	mov	r2, r8
 800b986:	464b      	mov	r3, r9
 800b988:	4630      	mov	r0, r6
 800b98a:	4639      	mov	r1, r7
 800b98c:	f7f5 f8a4 	bl	8000ad8 <__aeabi_dcmpeq>
 800b990:	b110      	cbz	r0, 800b998 <_dtoa_r+0x6a0>
 800b992:	f01a 0f01 	tst.w	sl, #1
 800b996:	d110      	bne.n	800b9ba <_dtoa_r+0x6c2>
 800b998:	4620      	mov	r0, r4
 800b99a:	ee18 1a10 	vmov	r1, s16
 800b99e:	f000 faf3 	bl	800bf88 <_Bfree>
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	9800      	ldr	r0, [sp, #0]
 800b9a6:	702b      	strb	r3, [r5, #0]
 800b9a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9aa:	3001      	adds	r0, #1
 800b9ac:	6018      	str	r0, [r3, #0]
 800b9ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	f43f acf1 	beq.w	800b398 <_dtoa_r+0xa0>
 800b9b6:	601d      	str	r5, [r3, #0]
 800b9b8:	e4ee      	b.n	800b398 <_dtoa_r+0xa0>
 800b9ba:	9f00      	ldr	r7, [sp, #0]
 800b9bc:	462b      	mov	r3, r5
 800b9be:	461d      	mov	r5, r3
 800b9c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9c4:	2a39      	cmp	r2, #57	; 0x39
 800b9c6:	d106      	bne.n	800b9d6 <_dtoa_r+0x6de>
 800b9c8:	9a01      	ldr	r2, [sp, #4]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d1f7      	bne.n	800b9be <_dtoa_r+0x6c6>
 800b9ce:	9901      	ldr	r1, [sp, #4]
 800b9d0:	2230      	movs	r2, #48	; 0x30
 800b9d2:	3701      	adds	r7, #1
 800b9d4:	700a      	strb	r2, [r1, #0]
 800b9d6:	781a      	ldrb	r2, [r3, #0]
 800b9d8:	3201      	adds	r2, #1
 800b9da:	701a      	strb	r2, [r3, #0]
 800b9dc:	e790      	b.n	800b900 <_dtoa_r+0x608>
 800b9de:	4ba6      	ldr	r3, [pc, #664]	; (800bc78 <_dtoa_r+0x980>)
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	f7f4 fe11 	bl	8000608 <__aeabi_dmul>
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	4606      	mov	r6, r0
 800b9ec:	460f      	mov	r7, r1
 800b9ee:	f7f5 f873 	bl	8000ad8 <__aeabi_dcmpeq>
 800b9f2:	2800      	cmp	r0, #0
 800b9f4:	d09d      	beq.n	800b932 <_dtoa_r+0x63a>
 800b9f6:	e7cf      	b.n	800b998 <_dtoa_r+0x6a0>
 800b9f8:	9a08      	ldr	r2, [sp, #32]
 800b9fa:	2a00      	cmp	r2, #0
 800b9fc:	f000 80d7 	beq.w	800bbae <_dtoa_r+0x8b6>
 800ba00:	9a06      	ldr	r2, [sp, #24]
 800ba02:	2a01      	cmp	r2, #1
 800ba04:	f300 80ba 	bgt.w	800bb7c <_dtoa_r+0x884>
 800ba08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ba0a:	2a00      	cmp	r2, #0
 800ba0c:	f000 80b2 	beq.w	800bb74 <_dtoa_r+0x87c>
 800ba10:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ba14:	9e07      	ldr	r6, [sp, #28]
 800ba16:	9d04      	ldr	r5, [sp, #16]
 800ba18:	9a04      	ldr	r2, [sp, #16]
 800ba1a:	441a      	add	r2, r3
 800ba1c:	9204      	str	r2, [sp, #16]
 800ba1e:	9a05      	ldr	r2, [sp, #20]
 800ba20:	2101      	movs	r1, #1
 800ba22:	441a      	add	r2, r3
 800ba24:	4620      	mov	r0, r4
 800ba26:	9205      	str	r2, [sp, #20]
 800ba28:	f000 fb66 	bl	800c0f8 <__i2b>
 800ba2c:	4607      	mov	r7, r0
 800ba2e:	2d00      	cmp	r5, #0
 800ba30:	dd0c      	ble.n	800ba4c <_dtoa_r+0x754>
 800ba32:	9b05      	ldr	r3, [sp, #20]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	dd09      	ble.n	800ba4c <_dtoa_r+0x754>
 800ba38:	42ab      	cmp	r3, r5
 800ba3a:	9a04      	ldr	r2, [sp, #16]
 800ba3c:	bfa8      	it	ge
 800ba3e:	462b      	movge	r3, r5
 800ba40:	1ad2      	subs	r2, r2, r3
 800ba42:	9204      	str	r2, [sp, #16]
 800ba44:	9a05      	ldr	r2, [sp, #20]
 800ba46:	1aed      	subs	r5, r5, r3
 800ba48:	1ad3      	subs	r3, r2, r3
 800ba4a:	9305      	str	r3, [sp, #20]
 800ba4c:	9b07      	ldr	r3, [sp, #28]
 800ba4e:	b31b      	cbz	r3, 800ba98 <_dtoa_r+0x7a0>
 800ba50:	9b08      	ldr	r3, [sp, #32]
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f000 80af 	beq.w	800bbb6 <_dtoa_r+0x8be>
 800ba58:	2e00      	cmp	r6, #0
 800ba5a:	dd13      	ble.n	800ba84 <_dtoa_r+0x78c>
 800ba5c:	4639      	mov	r1, r7
 800ba5e:	4632      	mov	r2, r6
 800ba60:	4620      	mov	r0, r4
 800ba62:	f000 fc09 	bl	800c278 <__pow5mult>
 800ba66:	ee18 2a10 	vmov	r2, s16
 800ba6a:	4601      	mov	r1, r0
 800ba6c:	4607      	mov	r7, r0
 800ba6e:	4620      	mov	r0, r4
 800ba70:	f000 fb58 	bl	800c124 <__multiply>
 800ba74:	ee18 1a10 	vmov	r1, s16
 800ba78:	4680      	mov	r8, r0
 800ba7a:	4620      	mov	r0, r4
 800ba7c:	f000 fa84 	bl	800bf88 <_Bfree>
 800ba80:	ee08 8a10 	vmov	s16, r8
 800ba84:	9b07      	ldr	r3, [sp, #28]
 800ba86:	1b9a      	subs	r2, r3, r6
 800ba88:	d006      	beq.n	800ba98 <_dtoa_r+0x7a0>
 800ba8a:	ee18 1a10 	vmov	r1, s16
 800ba8e:	4620      	mov	r0, r4
 800ba90:	f000 fbf2 	bl	800c278 <__pow5mult>
 800ba94:	ee08 0a10 	vmov	s16, r0
 800ba98:	2101      	movs	r1, #1
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	f000 fb2c 	bl	800c0f8 <__i2b>
 800baa0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	4606      	mov	r6, r0
 800baa6:	f340 8088 	ble.w	800bbba <_dtoa_r+0x8c2>
 800baaa:	461a      	mov	r2, r3
 800baac:	4601      	mov	r1, r0
 800baae:	4620      	mov	r0, r4
 800bab0:	f000 fbe2 	bl	800c278 <__pow5mult>
 800bab4:	9b06      	ldr	r3, [sp, #24]
 800bab6:	2b01      	cmp	r3, #1
 800bab8:	4606      	mov	r6, r0
 800baba:	f340 8081 	ble.w	800bbc0 <_dtoa_r+0x8c8>
 800babe:	f04f 0800 	mov.w	r8, #0
 800bac2:	6933      	ldr	r3, [r6, #16]
 800bac4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bac8:	6918      	ldr	r0, [r3, #16]
 800baca:	f000 fac5 	bl	800c058 <__hi0bits>
 800bace:	f1c0 0020 	rsb	r0, r0, #32
 800bad2:	9b05      	ldr	r3, [sp, #20]
 800bad4:	4418      	add	r0, r3
 800bad6:	f010 001f 	ands.w	r0, r0, #31
 800bada:	f000 8092 	beq.w	800bc02 <_dtoa_r+0x90a>
 800bade:	f1c0 0320 	rsb	r3, r0, #32
 800bae2:	2b04      	cmp	r3, #4
 800bae4:	f340 808a 	ble.w	800bbfc <_dtoa_r+0x904>
 800bae8:	f1c0 001c 	rsb	r0, r0, #28
 800baec:	9b04      	ldr	r3, [sp, #16]
 800baee:	4403      	add	r3, r0
 800baf0:	9304      	str	r3, [sp, #16]
 800baf2:	9b05      	ldr	r3, [sp, #20]
 800baf4:	4403      	add	r3, r0
 800baf6:	4405      	add	r5, r0
 800baf8:	9305      	str	r3, [sp, #20]
 800bafa:	9b04      	ldr	r3, [sp, #16]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	dd07      	ble.n	800bb10 <_dtoa_r+0x818>
 800bb00:	ee18 1a10 	vmov	r1, s16
 800bb04:	461a      	mov	r2, r3
 800bb06:	4620      	mov	r0, r4
 800bb08:	f000 fc10 	bl	800c32c <__lshift>
 800bb0c:	ee08 0a10 	vmov	s16, r0
 800bb10:	9b05      	ldr	r3, [sp, #20]
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	dd05      	ble.n	800bb22 <_dtoa_r+0x82a>
 800bb16:	4631      	mov	r1, r6
 800bb18:	461a      	mov	r2, r3
 800bb1a:	4620      	mov	r0, r4
 800bb1c:	f000 fc06 	bl	800c32c <__lshift>
 800bb20:	4606      	mov	r6, r0
 800bb22:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d06e      	beq.n	800bc06 <_dtoa_r+0x90e>
 800bb28:	ee18 0a10 	vmov	r0, s16
 800bb2c:	4631      	mov	r1, r6
 800bb2e:	f000 fc6d 	bl	800c40c <__mcmp>
 800bb32:	2800      	cmp	r0, #0
 800bb34:	da67      	bge.n	800bc06 <_dtoa_r+0x90e>
 800bb36:	9b00      	ldr	r3, [sp, #0]
 800bb38:	3b01      	subs	r3, #1
 800bb3a:	ee18 1a10 	vmov	r1, s16
 800bb3e:	9300      	str	r3, [sp, #0]
 800bb40:	220a      	movs	r2, #10
 800bb42:	2300      	movs	r3, #0
 800bb44:	4620      	mov	r0, r4
 800bb46:	f000 fa41 	bl	800bfcc <__multadd>
 800bb4a:	9b08      	ldr	r3, [sp, #32]
 800bb4c:	ee08 0a10 	vmov	s16, r0
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	f000 81b1 	beq.w	800beb8 <_dtoa_r+0xbc0>
 800bb56:	2300      	movs	r3, #0
 800bb58:	4639      	mov	r1, r7
 800bb5a:	220a      	movs	r2, #10
 800bb5c:	4620      	mov	r0, r4
 800bb5e:	f000 fa35 	bl	800bfcc <__multadd>
 800bb62:	9b02      	ldr	r3, [sp, #8]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	4607      	mov	r7, r0
 800bb68:	f300 808e 	bgt.w	800bc88 <_dtoa_r+0x990>
 800bb6c:	9b06      	ldr	r3, [sp, #24]
 800bb6e:	2b02      	cmp	r3, #2
 800bb70:	dc51      	bgt.n	800bc16 <_dtoa_r+0x91e>
 800bb72:	e089      	b.n	800bc88 <_dtoa_r+0x990>
 800bb74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bb76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bb7a:	e74b      	b.n	800ba14 <_dtoa_r+0x71c>
 800bb7c:	9b03      	ldr	r3, [sp, #12]
 800bb7e:	1e5e      	subs	r6, r3, #1
 800bb80:	9b07      	ldr	r3, [sp, #28]
 800bb82:	42b3      	cmp	r3, r6
 800bb84:	bfbf      	itttt	lt
 800bb86:	9b07      	ldrlt	r3, [sp, #28]
 800bb88:	9607      	strlt	r6, [sp, #28]
 800bb8a:	1af2      	sublt	r2, r6, r3
 800bb8c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bb8e:	bfb6      	itet	lt
 800bb90:	189b      	addlt	r3, r3, r2
 800bb92:	1b9e      	subge	r6, r3, r6
 800bb94:	930a      	strlt	r3, [sp, #40]	; 0x28
 800bb96:	9b03      	ldr	r3, [sp, #12]
 800bb98:	bfb8      	it	lt
 800bb9a:	2600      	movlt	r6, #0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	bfb7      	itett	lt
 800bba0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800bba4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800bba8:	1a9d      	sublt	r5, r3, r2
 800bbaa:	2300      	movlt	r3, #0
 800bbac:	e734      	b.n	800ba18 <_dtoa_r+0x720>
 800bbae:	9e07      	ldr	r6, [sp, #28]
 800bbb0:	9d04      	ldr	r5, [sp, #16]
 800bbb2:	9f08      	ldr	r7, [sp, #32]
 800bbb4:	e73b      	b.n	800ba2e <_dtoa_r+0x736>
 800bbb6:	9a07      	ldr	r2, [sp, #28]
 800bbb8:	e767      	b.n	800ba8a <_dtoa_r+0x792>
 800bbba:	9b06      	ldr	r3, [sp, #24]
 800bbbc:	2b01      	cmp	r3, #1
 800bbbe:	dc18      	bgt.n	800bbf2 <_dtoa_r+0x8fa>
 800bbc0:	f1ba 0f00 	cmp.w	sl, #0
 800bbc4:	d115      	bne.n	800bbf2 <_dtoa_r+0x8fa>
 800bbc6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bbca:	b993      	cbnz	r3, 800bbf2 <_dtoa_r+0x8fa>
 800bbcc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800bbd0:	0d1b      	lsrs	r3, r3, #20
 800bbd2:	051b      	lsls	r3, r3, #20
 800bbd4:	b183      	cbz	r3, 800bbf8 <_dtoa_r+0x900>
 800bbd6:	9b04      	ldr	r3, [sp, #16]
 800bbd8:	3301      	adds	r3, #1
 800bbda:	9304      	str	r3, [sp, #16]
 800bbdc:	9b05      	ldr	r3, [sp, #20]
 800bbde:	3301      	adds	r3, #1
 800bbe0:	9305      	str	r3, [sp, #20]
 800bbe2:	f04f 0801 	mov.w	r8, #1
 800bbe6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	f47f af6a 	bne.w	800bac2 <_dtoa_r+0x7ca>
 800bbee:	2001      	movs	r0, #1
 800bbf0:	e76f      	b.n	800bad2 <_dtoa_r+0x7da>
 800bbf2:	f04f 0800 	mov.w	r8, #0
 800bbf6:	e7f6      	b.n	800bbe6 <_dtoa_r+0x8ee>
 800bbf8:	4698      	mov	r8, r3
 800bbfa:	e7f4      	b.n	800bbe6 <_dtoa_r+0x8ee>
 800bbfc:	f43f af7d 	beq.w	800bafa <_dtoa_r+0x802>
 800bc00:	4618      	mov	r0, r3
 800bc02:	301c      	adds	r0, #28
 800bc04:	e772      	b.n	800baec <_dtoa_r+0x7f4>
 800bc06:	9b03      	ldr	r3, [sp, #12]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	dc37      	bgt.n	800bc7c <_dtoa_r+0x984>
 800bc0c:	9b06      	ldr	r3, [sp, #24]
 800bc0e:	2b02      	cmp	r3, #2
 800bc10:	dd34      	ble.n	800bc7c <_dtoa_r+0x984>
 800bc12:	9b03      	ldr	r3, [sp, #12]
 800bc14:	9302      	str	r3, [sp, #8]
 800bc16:	9b02      	ldr	r3, [sp, #8]
 800bc18:	b96b      	cbnz	r3, 800bc36 <_dtoa_r+0x93e>
 800bc1a:	4631      	mov	r1, r6
 800bc1c:	2205      	movs	r2, #5
 800bc1e:	4620      	mov	r0, r4
 800bc20:	f000 f9d4 	bl	800bfcc <__multadd>
 800bc24:	4601      	mov	r1, r0
 800bc26:	4606      	mov	r6, r0
 800bc28:	ee18 0a10 	vmov	r0, s16
 800bc2c:	f000 fbee 	bl	800c40c <__mcmp>
 800bc30:	2800      	cmp	r0, #0
 800bc32:	f73f adbb 	bgt.w	800b7ac <_dtoa_r+0x4b4>
 800bc36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc38:	9d01      	ldr	r5, [sp, #4]
 800bc3a:	43db      	mvns	r3, r3
 800bc3c:	9300      	str	r3, [sp, #0]
 800bc3e:	f04f 0800 	mov.w	r8, #0
 800bc42:	4631      	mov	r1, r6
 800bc44:	4620      	mov	r0, r4
 800bc46:	f000 f99f 	bl	800bf88 <_Bfree>
 800bc4a:	2f00      	cmp	r7, #0
 800bc4c:	f43f aea4 	beq.w	800b998 <_dtoa_r+0x6a0>
 800bc50:	f1b8 0f00 	cmp.w	r8, #0
 800bc54:	d005      	beq.n	800bc62 <_dtoa_r+0x96a>
 800bc56:	45b8      	cmp	r8, r7
 800bc58:	d003      	beq.n	800bc62 <_dtoa_r+0x96a>
 800bc5a:	4641      	mov	r1, r8
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	f000 f993 	bl	800bf88 <_Bfree>
 800bc62:	4639      	mov	r1, r7
 800bc64:	4620      	mov	r0, r4
 800bc66:	f000 f98f 	bl	800bf88 <_Bfree>
 800bc6a:	e695      	b.n	800b998 <_dtoa_r+0x6a0>
 800bc6c:	2600      	movs	r6, #0
 800bc6e:	4637      	mov	r7, r6
 800bc70:	e7e1      	b.n	800bc36 <_dtoa_r+0x93e>
 800bc72:	9700      	str	r7, [sp, #0]
 800bc74:	4637      	mov	r7, r6
 800bc76:	e599      	b.n	800b7ac <_dtoa_r+0x4b4>
 800bc78:	40240000 	.word	0x40240000
 800bc7c:	9b08      	ldr	r3, [sp, #32]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	f000 80ca 	beq.w	800be18 <_dtoa_r+0xb20>
 800bc84:	9b03      	ldr	r3, [sp, #12]
 800bc86:	9302      	str	r3, [sp, #8]
 800bc88:	2d00      	cmp	r5, #0
 800bc8a:	dd05      	ble.n	800bc98 <_dtoa_r+0x9a0>
 800bc8c:	4639      	mov	r1, r7
 800bc8e:	462a      	mov	r2, r5
 800bc90:	4620      	mov	r0, r4
 800bc92:	f000 fb4b 	bl	800c32c <__lshift>
 800bc96:	4607      	mov	r7, r0
 800bc98:	f1b8 0f00 	cmp.w	r8, #0
 800bc9c:	d05b      	beq.n	800bd56 <_dtoa_r+0xa5e>
 800bc9e:	6879      	ldr	r1, [r7, #4]
 800bca0:	4620      	mov	r0, r4
 800bca2:	f000 f931 	bl	800bf08 <_Balloc>
 800bca6:	4605      	mov	r5, r0
 800bca8:	b928      	cbnz	r0, 800bcb6 <_dtoa_r+0x9be>
 800bcaa:	4b87      	ldr	r3, [pc, #540]	; (800bec8 <_dtoa_r+0xbd0>)
 800bcac:	4602      	mov	r2, r0
 800bcae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bcb2:	f7ff bb3b 	b.w	800b32c <_dtoa_r+0x34>
 800bcb6:	693a      	ldr	r2, [r7, #16]
 800bcb8:	3202      	adds	r2, #2
 800bcba:	0092      	lsls	r2, r2, #2
 800bcbc:	f107 010c 	add.w	r1, r7, #12
 800bcc0:	300c      	adds	r0, #12
 800bcc2:	f000 f913 	bl	800beec <memcpy>
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	4629      	mov	r1, r5
 800bcca:	4620      	mov	r0, r4
 800bccc:	f000 fb2e 	bl	800c32c <__lshift>
 800bcd0:	9b01      	ldr	r3, [sp, #4]
 800bcd2:	f103 0901 	add.w	r9, r3, #1
 800bcd6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800bcda:	4413      	add	r3, r2
 800bcdc:	9305      	str	r3, [sp, #20]
 800bcde:	f00a 0301 	and.w	r3, sl, #1
 800bce2:	46b8      	mov	r8, r7
 800bce4:	9304      	str	r3, [sp, #16]
 800bce6:	4607      	mov	r7, r0
 800bce8:	4631      	mov	r1, r6
 800bcea:	ee18 0a10 	vmov	r0, s16
 800bcee:	f7ff fa77 	bl	800b1e0 <quorem>
 800bcf2:	4641      	mov	r1, r8
 800bcf4:	9002      	str	r0, [sp, #8]
 800bcf6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bcfa:	ee18 0a10 	vmov	r0, s16
 800bcfe:	f000 fb85 	bl	800c40c <__mcmp>
 800bd02:	463a      	mov	r2, r7
 800bd04:	9003      	str	r0, [sp, #12]
 800bd06:	4631      	mov	r1, r6
 800bd08:	4620      	mov	r0, r4
 800bd0a:	f000 fb9b 	bl	800c444 <__mdiff>
 800bd0e:	68c2      	ldr	r2, [r0, #12]
 800bd10:	f109 3bff 	add.w	fp, r9, #4294967295
 800bd14:	4605      	mov	r5, r0
 800bd16:	bb02      	cbnz	r2, 800bd5a <_dtoa_r+0xa62>
 800bd18:	4601      	mov	r1, r0
 800bd1a:	ee18 0a10 	vmov	r0, s16
 800bd1e:	f000 fb75 	bl	800c40c <__mcmp>
 800bd22:	4602      	mov	r2, r0
 800bd24:	4629      	mov	r1, r5
 800bd26:	4620      	mov	r0, r4
 800bd28:	9207      	str	r2, [sp, #28]
 800bd2a:	f000 f92d 	bl	800bf88 <_Bfree>
 800bd2e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800bd32:	ea43 0102 	orr.w	r1, r3, r2
 800bd36:	9b04      	ldr	r3, [sp, #16]
 800bd38:	430b      	orrs	r3, r1
 800bd3a:	464d      	mov	r5, r9
 800bd3c:	d10f      	bne.n	800bd5e <_dtoa_r+0xa66>
 800bd3e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd42:	d02a      	beq.n	800bd9a <_dtoa_r+0xaa2>
 800bd44:	9b03      	ldr	r3, [sp, #12]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	dd02      	ble.n	800bd50 <_dtoa_r+0xa58>
 800bd4a:	9b02      	ldr	r3, [sp, #8]
 800bd4c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800bd50:	f88b a000 	strb.w	sl, [fp]
 800bd54:	e775      	b.n	800bc42 <_dtoa_r+0x94a>
 800bd56:	4638      	mov	r0, r7
 800bd58:	e7ba      	b.n	800bcd0 <_dtoa_r+0x9d8>
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	e7e2      	b.n	800bd24 <_dtoa_r+0xa2c>
 800bd5e:	9b03      	ldr	r3, [sp, #12]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	db04      	blt.n	800bd6e <_dtoa_r+0xa76>
 800bd64:	9906      	ldr	r1, [sp, #24]
 800bd66:	430b      	orrs	r3, r1
 800bd68:	9904      	ldr	r1, [sp, #16]
 800bd6a:	430b      	orrs	r3, r1
 800bd6c:	d122      	bne.n	800bdb4 <_dtoa_r+0xabc>
 800bd6e:	2a00      	cmp	r2, #0
 800bd70:	ddee      	ble.n	800bd50 <_dtoa_r+0xa58>
 800bd72:	ee18 1a10 	vmov	r1, s16
 800bd76:	2201      	movs	r2, #1
 800bd78:	4620      	mov	r0, r4
 800bd7a:	f000 fad7 	bl	800c32c <__lshift>
 800bd7e:	4631      	mov	r1, r6
 800bd80:	ee08 0a10 	vmov	s16, r0
 800bd84:	f000 fb42 	bl	800c40c <__mcmp>
 800bd88:	2800      	cmp	r0, #0
 800bd8a:	dc03      	bgt.n	800bd94 <_dtoa_r+0xa9c>
 800bd8c:	d1e0      	bne.n	800bd50 <_dtoa_r+0xa58>
 800bd8e:	f01a 0f01 	tst.w	sl, #1
 800bd92:	d0dd      	beq.n	800bd50 <_dtoa_r+0xa58>
 800bd94:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bd98:	d1d7      	bne.n	800bd4a <_dtoa_r+0xa52>
 800bd9a:	2339      	movs	r3, #57	; 0x39
 800bd9c:	f88b 3000 	strb.w	r3, [fp]
 800bda0:	462b      	mov	r3, r5
 800bda2:	461d      	mov	r5, r3
 800bda4:	3b01      	subs	r3, #1
 800bda6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800bdaa:	2a39      	cmp	r2, #57	; 0x39
 800bdac:	d071      	beq.n	800be92 <_dtoa_r+0xb9a>
 800bdae:	3201      	adds	r2, #1
 800bdb0:	701a      	strb	r2, [r3, #0]
 800bdb2:	e746      	b.n	800bc42 <_dtoa_r+0x94a>
 800bdb4:	2a00      	cmp	r2, #0
 800bdb6:	dd07      	ble.n	800bdc8 <_dtoa_r+0xad0>
 800bdb8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800bdbc:	d0ed      	beq.n	800bd9a <_dtoa_r+0xaa2>
 800bdbe:	f10a 0301 	add.w	r3, sl, #1
 800bdc2:	f88b 3000 	strb.w	r3, [fp]
 800bdc6:	e73c      	b.n	800bc42 <_dtoa_r+0x94a>
 800bdc8:	9b05      	ldr	r3, [sp, #20]
 800bdca:	f809 ac01 	strb.w	sl, [r9, #-1]
 800bdce:	4599      	cmp	r9, r3
 800bdd0:	d047      	beq.n	800be62 <_dtoa_r+0xb6a>
 800bdd2:	ee18 1a10 	vmov	r1, s16
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	220a      	movs	r2, #10
 800bdda:	4620      	mov	r0, r4
 800bddc:	f000 f8f6 	bl	800bfcc <__multadd>
 800bde0:	45b8      	cmp	r8, r7
 800bde2:	ee08 0a10 	vmov	s16, r0
 800bde6:	f04f 0300 	mov.w	r3, #0
 800bdea:	f04f 020a 	mov.w	r2, #10
 800bdee:	4641      	mov	r1, r8
 800bdf0:	4620      	mov	r0, r4
 800bdf2:	d106      	bne.n	800be02 <_dtoa_r+0xb0a>
 800bdf4:	f000 f8ea 	bl	800bfcc <__multadd>
 800bdf8:	4680      	mov	r8, r0
 800bdfa:	4607      	mov	r7, r0
 800bdfc:	f109 0901 	add.w	r9, r9, #1
 800be00:	e772      	b.n	800bce8 <_dtoa_r+0x9f0>
 800be02:	f000 f8e3 	bl	800bfcc <__multadd>
 800be06:	4639      	mov	r1, r7
 800be08:	4680      	mov	r8, r0
 800be0a:	2300      	movs	r3, #0
 800be0c:	220a      	movs	r2, #10
 800be0e:	4620      	mov	r0, r4
 800be10:	f000 f8dc 	bl	800bfcc <__multadd>
 800be14:	4607      	mov	r7, r0
 800be16:	e7f1      	b.n	800bdfc <_dtoa_r+0xb04>
 800be18:	9b03      	ldr	r3, [sp, #12]
 800be1a:	9302      	str	r3, [sp, #8]
 800be1c:	9d01      	ldr	r5, [sp, #4]
 800be1e:	ee18 0a10 	vmov	r0, s16
 800be22:	4631      	mov	r1, r6
 800be24:	f7ff f9dc 	bl	800b1e0 <quorem>
 800be28:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800be2c:	9b01      	ldr	r3, [sp, #4]
 800be2e:	f805 ab01 	strb.w	sl, [r5], #1
 800be32:	1aea      	subs	r2, r5, r3
 800be34:	9b02      	ldr	r3, [sp, #8]
 800be36:	4293      	cmp	r3, r2
 800be38:	dd09      	ble.n	800be4e <_dtoa_r+0xb56>
 800be3a:	ee18 1a10 	vmov	r1, s16
 800be3e:	2300      	movs	r3, #0
 800be40:	220a      	movs	r2, #10
 800be42:	4620      	mov	r0, r4
 800be44:	f000 f8c2 	bl	800bfcc <__multadd>
 800be48:	ee08 0a10 	vmov	s16, r0
 800be4c:	e7e7      	b.n	800be1e <_dtoa_r+0xb26>
 800be4e:	9b02      	ldr	r3, [sp, #8]
 800be50:	2b00      	cmp	r3, #0
 800be52:	bfc8      	it	gt
 800be54:	461d      	movgt	r5, r3
 800be56:	9b01      	ldr	r3, [sp, #4]
 800be58:	bfd8      	it	le
 800be5a:	2501      	movle	r5, #1
 800be5c:	441d      	add	r5, r3
 800be5e:	f04f 0800 	mov.w	r8, #0
 800be62:	ee18 1a10 	vmov	r1, s16
 800be66:	2201      	movs	r2, #1
 800be68:	4620      	mov	r0, r4
 800be6a:	f000 fa5f 	bl	800c32c <__lshift>
 800be6e:	4631      	mov	r1, r6
 800be70:	ee08 0a10 	vmov	s16, r0
 800be74:	f000 faca 	bl	800c40c <__mcmp>
 800be78:	2800      	cmp	r0, #0
 800be7a:	dc91      	bgt.n	800bda0 <_dtoa_r+0xaa8>
 800be7c:	d102      	bne.n	800be84 <_dtoa_r+0xb8c>
 800be7e:	f01a 0f01 	tst.w	sl, #1
 800be82:	d18d      	bne.n	800bda0 <_dtoa_r+0xaa8>
 800be84:	462b      	mov	r3, r5
 800be86:	461d      	mov	r5, r3
 800be88:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be8c:	2a30      	cmp	r2, #48	; 0x30
 800be8e:	d0fa      	beq.n	800be86 <_dtoa_r+0xb8e>
 800be90:	e6d7      	b.n	800bc42 <_dtoa_r+0x94a>
 800be92:	9a01      	ldr	r2, [sp, #4]
 800be94:	429a      	cmp	r2, r3
 800be96:	d184      	bne.n	800bda2 <_dtoa_r+0xaaa>
 800be98:	9b00      	ldr	r3, [sp, #0]
 800be9a:	3301      	adds	r3, #1
 800be9c:	9300      	str	r3, [sp, #0]
 800be9e:	2331      	movs	r3, #49	; 0x31
 800bea0:	7013      	strb	r3, [r2, #0]
 800bea2:	e6ce      	b.n	800bc42 <_dtoa_r+0x94a>
 800bea4:	4b09      	ldr	r3, [pc, #36]	; (800becc <_dtoa_r+0xbd4>)
 800bea6:	f7ff ba95 	b.w	800b3d4 <_dtoa_r+0xdc>
 800beaa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800beac:	2b00      	cmp	r3, #0
 800beae:	f47f aa6e 	bne.w	800b38e <_dtoa_r+0x96>
 800beb2:	4b07      	ldr	r3, [pc, #28]	; (800bed0 <_dtoa_r+0xbd8>)
 800beb4:	f7ff ba8e 	b.w	800b3d4 <_dtoa_r+0xdc>
 800beb8:	9b02      	ldr	r3, [sp, #8]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	dcae      	bgt.n	800be1c <_dtoa_r+0xb24>
 800bebe:	9b06      	ldr	r3, [sp, #24]
 800bec0:	2b02      	cmp	r3, #2
 800bec2:	f73f aea8 	bgt.w	800bc16 <_dtoa_r+0x91e>
 800bec6:	e7a9      	b.n	800be1c <_dtoa_r+0xb24>
 800bec8:	0800d7d3 	.word	0x0800d7d3
 800becc:	0800d730 	.word	0x0800d730
 800bed0:	0800d754 	.word	0x0800d754

0800bed4 <_localeconv_r>:
 800bed4:	4800      	ldr	r0, [pc, #0]	; (800bed8 <_localeconv_r+0x4>)
 800bed6:	4770      	bx	lr
 800bed8:	20000290 	.word	0x20000290

0800bedc <malloc>:
 800bedc:	4b02      	ldr	r3, [pc, #8]	; (800bee8 <malloc+0xc>)
 800bede:	4601      	mov	r1, r0
 800bee0:	6818      	ldr	r0, [r3, #0]
 800bee2:	f000 bc17 	b.w	800c714 <_malloc_r>
 800bee6:	bf00      	nop
 800bee8:	2000013c 	.word	0x2000013c

0800beec <memcpy>:
 800beec:	440a      	add	r2, r1
 800beee:	4291      	cmp	r1, r2
 800bef0:	f100 33ff 	add.w	r3, r0, #4294967295
 800bef4:	d100      	bne.n	800bef8 <memcpy+0xc>
 800bef6:	4770      	bx	lr
 800bef8:	b510      	push	{r4, lr}
 800befa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800befe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf02:	4291      	cmp	r1, r2
 800bf04:	d1f9      	bne.n	800befa <memcpy+0xe>
 800bf06:	bd10      	pop	{r4, pc}

0800bf08 <_Balloc>:
 800bf08:	b570      	push	{r4, r5, r6, lr}
 800bf0a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf0c:	4604      	mov	r4, r0
 800bf0e:	460d      	mov	r5, r1
 800bf10:	b976      	cbnz	r6, 800bf30 <_Balloc+0x28>
 800bf12:	2010      	movs	r0, #16
 800bf14:	f7ff ffe2 	bl	800bedc <malloc>
 800bf18:	4602      	mov	r2, r0
 800bf1a:	6260      	str	r0, [r4, #36]	; 0x24
 800bf1c:	b920      	cbnz	r0, 800bf28 <_Balloc+0x20>
 800bf1e:	4b18      	ldr	r3, [pc, #96]	; (800bf80 <_Balloc+0x78>)
 800bf20:	4818      	ldr	r0, [pc, #96]	; (800bf84 <_Balloc+0x7c>)
 800bf22:	2166      	movs	r1, #102	; 0x66
 800bf24:	f000 fdd6 	bl	800cad4 <__assert_func>
 800bf28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bf2c:	6006      	str	r6, [r0, #0]
 800bf2e:	60c6      	str	r6, [r0, #12]
 800bf30:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bf32:	68f3      	ldr	r3, [r6, #12]
 800bf34:	b183      	cbz	r3, 800bf58 <_Balloc+0x50>
 800bf36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf38:	68db      	ldr	r3, [r3, #12]
 800bf3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bf3e:	b9b8      	cbnz	r0, 800bf70 <_Balloc+0x68>
 800bf40:	2101      	movs	r1, #1
 800bf42:	fa01 f605 	lsl.w	r6, r1, r5
 800bf46:	1d72      	adds	r2, r6, #5
 800bf48:	0092      	lsls	r2, r2, #2
 800bf4a:	4620      	mov	r0, r4
 800bf4c:	f000 fb60 	bl	800c610 <_calloc_r>
 800bf50:	b160      	cbz	r0, 800bf6c <_Balloc+0x64>
 800bf52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bf56:	e00e      	b.n	800bf76 <_Balloc+0x6e>
 800bf58:	2221      	movs	r2, #33	; 0x21
 800bf5a:	2104      	movs	r1, #4
 800bf5c:	4620      	mov	r0, r4
 800bf5e:	f000 fb57 	bl	800c610 <_calloc_r>
 800bf62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf64:	60f0      	str	r0, [r6, #12]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d1e4      	bne.n	800bf36 <_Balloc+0x2e>
 800bf6c:	2000      	movs	r0, #0
 800bf6e:	bd70      	pop	{r4, r5, r6, pc}
 800bf70:	6802      	ldr	r2, [r0, #0]
 800bf72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bf76:	2300      	movs	r3, #0
 800bf78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bf7c:	e7f7      	b.n	800bf6e <_Balloc+0x66>
 800bf7e:	bf00      	nop
 800bf80:	0800d761 	.word	0x0800d761
 800bf84:	0800d7e4 	.word	0x0800d7e4

0800bf88 <_Bfree>:
 800bf88:	b570      	push	{r4, r5, r6, lr}
 800bf8a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bf8c:	4605      	mov	r5, r0
 800bf8e:	460c      	mov	r4, r1
 800bf90:	b976      	cbnz	r6, 800bfb0 <_Bfree+0x28>
 800bf92:	2010      	movs	r0, #16
 800bf94:	f7ff ffa2 	bl	800bedc <malloc>
 800bf98:	4602      	mov	r2, r0
 800bf9a:	6268      	str	r0, [r5, #36]	; 0x24
 800bf9c:	b920      	cbnz	r0, 800bfa8 <_Bfree+0x20>
 800bf9e:	4b09      	ldr	r3, [pc, #36]	; (800bfc4 <_Bfree+0x3c>)
 800bfa0:	4809      	ldr	r0, [pc, #36]	; (800bfc8 <_Bfree+0x40>)
 800bfa2:	218a      	movs	r1, #138	; 0x8a
 800bfa4:	f000 fd96 	bl	800cad4 <__assert_func>
 800bfa8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bfac:	6006      	str	r6, [r0, #0]
 800bfae:	60c6      	str	r6, [r0, #12]
 800bfb0:	b13c      	cbz	r4, 800bfc2 <_Bfree+0x3a>
 800bfb2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bfb4:	6862      	ldr	r2, [r4, #4]
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bfbc:	6021      	str	r1, [r4, #0]
 800bfbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bfc2:	bd70      	pop	{r4, r5, r6, pc}
 800bfc4:	0800d761 	.word	0x0800d761
 800bfc8:	0800d7e4 	.word	0x0800d7e4

0800bfcc <__multadd>:
 800bfcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfd0:	690d      	ldr	r5, [r1, #16]
 800bfd2:	4607      	mov	r7, r0
 800bfd4:	460c      	mov	r4, r1
 800bfd6:	461e      	mov	r6, r3
 800bfd8:	f101 0c14 	add.w	ip, r1, #20
 800bfdc:	2000      	movs	r0, #0
 800bfde:	f8dc 3000 	ldr.w	r3, [ip]
 800bfe2:	b299      	uxth	r1, r3
 800bfe4:	fb02 6101 	mla	r1, r2, r1, r6
 800bfe8:	0c1e      	lsrs	r6, r3, #16
 800bfea:	0c0b      	lsrs	r3, r1, #16
 800bfec:	fb02 3306 	mla	r3, r2, r6, r3
 800bff0:	b289      	uxth	r1, r1
 800bff2:	3001      	adds	r0, #1
 800bff4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bff8:	4285      	cmp	r5, r0
 800bffa:	f84c 1b04 	str.w	r1, [ip], #4
 800bffe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c002:	dcec      	bgt.n	800bfde <__multadd+0x12>
 800c004:	b30e      	cbz	r6, 800c04a <__multadd+0x7e>
 800c006:	68a3      	ldr	r3, [r4, #8]
 800c008:	42ab      	cmp	r3, r5
 800c00a:	dc19      	bgt.n	800c040 <__multadd+0x74>
 800c00c:	6861      	ldr	r1, [r4, #4]
 800c00e:	4638      	mov	r0, r7
 800c010:	3101      	adds	r1, #1
 800c012:	f7ff ff79 	bl	800bf08 <_Balloc>
 800c016:	4680      	mov	r8, r0
 800c018:	b928      	cbnz	r0, 800c026 <__multadd+0x5a>
 800c01a:	4602      	mov	r2, r0
 800c01c:	4b0c      	ldr	r3, [pc, #48]	; (800c050 <__multadd+0x84>)
 800c01e:	480d      	ldr	r0, [pc, #52]	; (800c054 <__multadd+0x88>)
 800c020:	21b5      	movs	r1, #181	; 0xb5
 800c022:	f000 fd57 	bl	800cad4 <__assert_func>
 800c026:	6922      	ldr	r2, [r4, #16]
 800c028:	3202      	adds	r2, #2
 800c02a:	f104 010c 	add.w	r1, r4, #12
 800c02e:	0092      	lsls	r2, r2, #2
 800c030:	300c      	adds	r0, #12
 800c032:	f7ff ff5b 	bl	800beec <memcpy>
 800c036:	4621      	mov	r1, r4
 800c038:	4638      	mov	r0, r7
 800c03a:	f7ff ffa5 	bl	800bf88 <_Bfree>
 800c03e:	4644      	mov	r4, r8
 800c040:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c044:	3501      	adds	r5, #1
 800c046:	615e      	str	r6, [r3, #20]
 800c048:	6125      	str	r5, [r4, #16]
 800c04a:	4620      	mov	r0, r4
 800c04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c050:	0800d7d3 	.word	0x0800d7d3
 800c054:	0800d7e4 	.word	0x0800d7e4

0800c058 <__hi0bits>:
 800c058:	0c03      	lsrs	r3, r0, #16
 800c05a:	041b      	lsls	r3, r3, #16
 800c05c:	b9d3      	cbnz	r3, 800c094 <__hi0bits+0x3c>
 800c05e:	0400      	lsls	r0, r0, #16
 800c060:	2310      	movs	r3, #16
 800c062:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c066:	bf04      	itt	eq
 800c068:	0200      	lsleq	r0, r0, #8
 800c06a:	3308      	addeq	r3, #8
 800c06c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c070:	bf04      	itt	eq
 800c072:	0100      	lsleq	r0, r0, #4
 800c074:	3304      	addeq	r3, #4
 800c076:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c07a:	bf04      	itt	eq
 800c07c:	0080      	lsleq	r0, r0, #2
 800c07e:	3302      	addeq	r3, #2
 800c080:	2800      	cmp	r0, #0
 800c082:	db05      	blt.n	800c090 <__hi0bits+0x38>
 800c084:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c088:	f103 0301 	add.w	r3, r3, #1
 800c08c:	bf08      	it	eq
 800c08e:	2320      	moveq	r3, #32
 800c090:	4618      	mov	r0, r3
 800c092:	4770      	bx	lr
 800c094:	2300      	movs	r3, #0
 800c096:	e7e4      	b.n	800c062 <__hi0bits+0xa>

0800c098 <__lo0bits>:
 800c098:	6803      	ldr	r3, [r0, #0]
 800c09a:	f013 0207 	ands.w	r2, r3, #7
 800c09e:	4601      	mov	r1, r0
 800c0a0:	d00b      	beq.n	800c0ba <__lo0bits+0x22>
 800c0a2:	07da      	lsls	r2, r3, #31
 800c0a4:	d423      	bmi.n	800c0ee <__lo0bits+0x56>
 800c0a6:	0798      	lsls	r0, r3, #30
 800c0a8:	bf49      	itett	mi
 800c0aa:	085b      	lsrmi	r3, r3, #1
 800c0ac:	089b      	lsrpl	r3, r3, #2
 800c0ae:	2001      	movmi	r0, #1
 800c0b0:	600b      	strmi	r3, [r1, #0]
 800c0b2:	bf5c      	itt	pl
 800c0b4:	600b      	strpl	r3, [r1, #0]
 800c0b6:	2002      	movpl	r0, #2
 800c0b8:	4770      	bx	lr
 800c0ba:	b298      	uxth	r0, r3
 800c0bc:	b9a8      	cbnz	r0, 800c0ea <__lo0bits+0x52>
 800c0be:	0c1b      	lsrs	r3, r3, #16
 800c0c0:	2010      	movs	r0, #16
 800c0c2:	b2da      	uxtb	r2, r3
 800c0c4:	b90a      	cbnz	r2, 800c0ca <__lo0bits+0x32>
 800c0c6:	3008      	adds	r0, #8
 800c0c8:	0a1b      	lsrs	r3, r3, #8
 800c0ca:	071a      	lsls	r2, r3, #28
 800c0cc:	bf04      	itt	eq
 800c0ce:	091b      	lsreq	r3, r3, #4
 800c0d0:	3004      	addeq	r0, #4
 800c0d2:	079a      	lsls	r2, r3, #30
 800c0d4:	bf04      	itt	eq
 800c0d6:	089b      	lsreq	r3, r3, #2
 800c0d8:	3002      	addeq	r0, #2
 800c0da:	07da      	lsls	r2, r3, #31
 800c0dc:	d403      	bmi.n	800c0e6 <__lo0bits+0x4e>
 800c0de:	085b      	lsrs	r3, r3, #1
 800c0e0:	f100 0001 	add.w	r0, r0, #1
 800c0e4:	d005      	beq.n	800c0f2 <__lo0bits+0x5a>
 800c0e6:	600b      	str	r3, [r1, #0]
 800c0e8:	4770      	bx	lr
 800c0ea:	4610      	mov	r0, r2
 800c0ec:	e7e9      	b.n	800c0c2 <__lo0bits+0x2a>
 800c0ee:	2000      	movs	r0, #0
 800c0f0:	4770      	bx	lr
 800c0f2:	2020      	movs	r0, #32
 800c0f4:	4770      	bx	lr
	...

0800c0f8 <__i2b>:
 800c0f8:	b510      	push	{r4, lr}
 800c0fa:	460c      	mov	r4, r1
 800c0fc:	2101      	movs	r1, #1
 800c0fe:	f7ff ff03 	bl	800bf08 <_Balloc>
 800c102:	4602      	mov	r2, r0
 800c104:	b928      	cbnz	r0, 800c112 <__i2b+0x1a>
 800c106:	4b05      	ldr	r3, [pc, #20]	; (800c11c <__i2b+0x24>)
 800c108:	4805      	ldr	r0, [pc, #20]	; (800c120 <__i2b+0x28>)
 800c10a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c10e:	f000 fce1 	bl	800cad4 <__assert_func>
 800c112:	2301      	movs	r3, #1
 800c114:	6144      	str	r4, [r0, #20]
 800c116:	6103      	str	r3, [r0, #16]
 800c118:	bd10      	pop	{r4, pc}
 800c11a:	bf00      	nop
 800c11c:	0800d7d3 	.word	0x0800d7d3
 800c120:	0800d7e4 	.word	0x0800d7e4

0800c124 <__multiply>:
 800c124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c128:	4691      	mov	r9, r2
 800c12a:	690a      	ldr	r2, [r1, #16]
 800c12c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c130:	429a      	cmp	r2, r3
 800c132:	bfb8      	it	lt
 800c134:	460b      	movlt	r3, r1
 800c136:	460c      	mov	r4, r1
 800c138:	bfbc      	itt	lt
 800c13a:	464c      	movlt	r4, r9
 800c13c:	4699      	movlt	r9, r3
 800c13e:	6927      	ldr	r7, [r4, #16]
 800c140:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c144:	68a3      	ldr	r3, [r4, #8]
 800c146:	6861      	ldr	r1, [r4, #4]
 800c148:	eb07 060a 	add.w	r6, r7, sl
 800c14c:	42b3      	cmp	r3, r6
 800c14e:	b085      	sub	sp, #20
 800c150:	bfb8      	it	lt
 800c152:	3101      	addlt	r1, #1
 800c154:	f7ff fed8 	bl	800bf08 <_Balloc>
 800c158:	b930      	cbnz	r0, 800c168 <__multiply+0x44>
 800c15a:	4602      	mov	r2, r0
 800c15c:	4b44      	ldr	r3, [pc, #272]	; (800c270 <__multiply+0x14c>)
 800c15e:	4845      	ldr	r0, [pc, #276]	; (800c274 <__multiply+0x150>)
 800c160:	f240 115d 	movw	r1, #349	; 0x15d
 800c164:	f000 fcb6 	bl	800cad4 <__assert_func>
 800c168:	f100 0514 	add.w	r5, r0, #20
 800c16c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c170:	462b      	mov	r3, r5
 800c172:	2200      	movs	r2, #0
 800c174:	4543      	cmp	r3, r8
 800c176:	d321      	bcc.n	800c1bc <__multiply+0x98>
 800c178:	f104 0314 	add.w	r3, r4, #20
 800c17c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c180:	f109 0314 	add.w	r3, r9, #20
 800c184:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c188:	9202      	str	r2, [sp, #8]
 800c18a:	1b3a      	subs	r2, r7, r4
 800c18c:	3a15      	subs	r2, #21
 800c18e:	f022 0203 	bic.w	r2, r2, #3
 800c192:	3204      	adds	r2, #4
 800c194:	f104 0115 	add.w	r1, r4, #21
 800c198:	428f      	cmp	r7, r1
 800c19a:	bf38      	it	cc
 800c19c:	2204      	movcc	r2, #4
 800c19e:	9201      	str	r2, [sp, #4]
 800c1a0:	9a02      	ldr	r2, [sp, #8]
 800c1a2:	9303      	str	r3, [sp, #12]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d80c      	bhi.n	800c1c2 <__multiply+0x9e>
 800c1a8:	2e00      	cmp	r6, #0
 800c1aa:	dd03      	ble.n	800c1b4 <__multiply+0x90>
 800c1ac:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d05a      	beq.n	800c26a <__multiply+0x146>
 800c1b4:	6106      	str	r6, [r0, #16]
 800c1b6:	b005      	add	sp, #20
 800c1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1bc:	f843 2b04 	str.w	r2, [r3], #4
 800c1c0:	e7d8      	b.n	800c174 <__multiply+0x50>
 800c1c2:	f8b3 a000 	ldrh.w	sl, [r3]
 800c1c6:	f1ba 0f00 	cmp.w	sl, #0
 800c1ca:	d024      	beq.n	800c216 <__multiply+0xf2>
 800c1cc:	f104 0e14 	add.w	lr, r4, #20
 800c1d0:	46a9      	mov	r9, r5
 800c1d2:	f04f 0c00 	mov.w	ip, #0
 800c1d6:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c1da:	f8d9 1000 	ldr.w	r1, [r9]
 800c1de:	fa1f fb82 	uxth.w	fp, r2
 800c1e2:	b289      	uxth	r1, r1
 800c1e4:	fb0a 110b 	mla	r1, sl, fp, r1
 800c1e8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c1ec:	f8d9 2000 	ldr.w	r2, [r9]
 800c1f0:	4461      	add	r1, ip
 800c1f2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c1f6:	fb0a c20b 	mla	r2, sl, fp, ip
 800c1fa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c1fe:	b289      	uxth	r1, r1
 800c200:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c204:	4577      	cmp	r7, lr
 800c206:	f849 1b04 	str.w	r1, [r9], #4
 800c20a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c20e:	d8e2      	bhi.n	800c1d6 <__multiply+0xb2>
 800c210:	9a01      	ldr	r2, [sp, #4]
 800c212:	f845 c002 	str.w	ip, [r5, r2]
 800c216:	9a03      	ldr	r2, [sp, #12]
 800c218:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c21c:	3304      	adds	r3, #4
 800c21e:	f1b9 0f00 	cmp.w	r9, #0
 800c222:	d020      	beq.n	800c266 <__multiply+0x142>
 800c224:	6829      	ldr	r1, [r5, #0]
 800c226:	f104 0c14 	add.w	ip, r4, #20
 800c22a:	46ae      	mov	lr, r5
 800c22c:	f04f 0a00 	mov.w	sl, #0
 800c230:	f8bc b000 	ldrh.w	fp, [ip]
 800c234:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c238:	fb09 220b 	mla	r2, r9, fp, r2
 800c23c:	4492      	add	sl, r2
 800c23e:	b289      	uxth	r1, r1
 800c240:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c244:	f84e 1b04 	str.w	r1, [lr], #4
 800c248:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c24c:	f8be 1000 	ldrh.w	r1, [lr]
 800c250:	0c12      	lsrs	r2, r2, #16
 800c252:	fb09 1102 	mla	r1, r9, r2, r1
 800c256:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c25a:	4567      	cmp	r7, ip
 800c25c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c260:	d8e6      	bhi.n	800c230 <__multiply+0x10c>
 800c262:	9a01      	ldr	r2, [sp, #4]
 800c264:	50a9      	str	r1, [r5, r2]
 800c266:	3504      	adds	r5, #4
 800c268:	e79a      	b.n	800c1a0 <__multiply+0x7c>
 800c26a:	3e01      	subs	r6, #1
 800c26c:	e79c      	b.n	800c1a8 <__multiply+0x84>
 800c26e:	bf00      	nop
 800c270:	0800d7d3 	.word	0x0800d7d3
 800c274:	0800d7e4 	.word	0x0800d7e4

0800c278 <__pow5mult>:
 800c278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c27c:	4615      	mov	r5, r2
 800c27e:	f012 0203 	ands.w	r2, r2, #3
 800c282:	4606      	mov	r6, r0
 800c284:	460f      	mov	r7, r1
 800c286:	d007      	beq.n	800c298 <__pow5mult+0x20>
 800c288:	4c25      	ldr	r4, [pc, #148]	; (800c320 <__pow5mult+0xa8>)
 800c28a:	3a01      	subs	r2, #1
 800c28c:	2300      	movs	r3, #0
 800c28e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c292:	f7ff fe9b 	bl	800bfcc <__multadd>
 800c296:	4607      	mov	r7, r0
 800c298:	10ad      	asrs	r5, r5, #2
 800c29a:	d03d      	beq.n	800c318 <__pow5mult+0xa0>
 800c29c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c29e:	b97c      	cbnz	r4, 800c2c0 <__pow5mult+0x48>
 800c2a0:	2010      	movs	r0, #16
 800c2a2:	f7ff fe1b 	bl	800bedc <malloc>
 800c2a6:	4602      	mov	r2, r0
 800c2a8:	6270      	str	r0, [r6, #36]	; 0x24
 800c2aa:	b928      	cbnz	r0, 800c2b8 <__pow5mult+0x40>
 800c2ac:	4b1d      	ldr	r3, [pc, #116]	; (800c324 <__pow5mult+0xac>)
 800c2ae:	481e      	ldr	r0, [pc, #120]	; (800c328 <__pow5mult+0xb0>)
 800c2b0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c2b4:	f000 fc0e 	bl	800cad4 <__assert_func>
 800c2b8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c2bc:	6004      	str	r4, [r0, #0]
 800c2be:	60c4      	str	r4, [r0, #12]
 800c2c0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c2c4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c2c8:	b94c      	cbnz	r4, 800c2de <__pow5mult+0x66>
 800c2ca:	f240 2171 	movw	r1, #625	; 0x271
 800c2ce:	4630      	mov	r0, r6
 800c2d0:	f7ff ff12 	bl	800c0f8 <__i2b>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	f8c8 0008 	str.w	r0, [r8, #8]
 800c2da:	4604      	mov	r4, r0
 800c2dc:	6003      	str	r3, [r0, #0]
 800c2de:	f04f 0900 	mov.w	r9, #0
 800c2e2:	07eb      	lsls	r3, r5, #31
 800c2e4:	d50a      	bpl.n	800c2fc <__pow5mult+0x84>
 800c2e6:	4639      	mov	r1, r7
 800c2e8:	4622      	mov	r2, r4
 800c2ea:	4630      	mov	r0, r6
 800c2ec:	f7ff ff1a 	bl	800c124 <__multiply>
 800c2f0:	4639      	mov	r1, r7
 800c2f2:	4680      	mov	r8, r0
 800c2f4:	4630      	mov	r0, r6
 800c2f6:	f7ff fe47 	bl	800bf88 <_Bfree>
 800c2fa:	4647      	mov	r7, r8
 800c2fc:	106d      	asrs	r5, r5, #1
 800c2fe:	d00b      	beq.n	800c318 <__pow5mult+0xa0>
 800c300:	6820      	ldr	r0, [r4, #0]
 800c302:	b938      	cbnz	r0, 800c314 <__pow5mult+0x9c>
 800c304:	4622      	mov	r2, r4
 800c306:	4621      	mov	r1, r4
 800c308:	4630      	mov	r0, r6
 800c30a:	f7ff ff0b 	bl	800c124 <__multiply>
 800c30e:	6020      	str	r0, [r4, #0]
 800c310:	f8c0 9000 	str.w	r9, [r0]
 800c314:	4604      	mov	r4, r0
 800c316:	e7e4      	b.n	800c2e2 <__pow5mult+0x6a>
 800c318:	4638      	mov	r0, r7
 800c31a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c31e:	bf00      	nop
 800c320:	0800d930 	.word	0x0800d930
 800c324:	0800d761 	.word	0x0800d761
 800c328:	0800d7e4 	.word	0x0800d7e4

0800c32c <__lshift>:
 800c32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c330:	460c      	mov	r4, r1
 800c332:	6849      	ldr	r1, [r1, #4]
 800c334:	6923      	ldr	r3, [r4, #16]
 800c336:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c33a:	68a3      	ldr	r3, [r4, #8]
 800c33c:	4607      	mov	r7, r0
 800c33e:	4691      	mov	r9, r2
 800c340:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c344:	f108 0601 	add.w	r6, r8, #1
 800c348:	42b3      	cmp	r3, r6
 800c34a:	db0b      	blt.n	800c364 <__lshift+0x38>
 800c34c:	4638      	mov	r0, r7
 800c34e:	f7ff fddb 	bl	800bf08 <_Balloc>
 800c352:	4605      	mov	r5, r0
 800c354:	b948      	cbnz	r0, 800c36a <__lshift+0x3e>
 800c356:	4602      	mov	r2, r0
 800c358:	4b2a      	ldr	r3, [pc, #168]	; (800c404 <__lshift+0xd8>)
 800c35a:	482b      	ldr	r0, [pc, #172]	; (800c408 <__lshift+0xdc>)
 800c35c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c360:	f000 fbb8 	bl	800cad4 <__assert_func>
 800c364:	3101      	adds	r1, #1
 800c366:	005b      	lsls	r3, r3, #1
 800c368:	e7ee      	b.n	800c348 <__lshift+0x1c>
 800c36a:	2300      	movs	r3, #0
 800c36c:	f100 0114 	add.w	r1, r0, #20
 800c370:	f100 0210 	add.w	r2, r0, #16
 800c374:	4618      	mov	r0, r3
 800c376:	4553      	cmp	r3, sl
 800c378:	db37      	blt.n	800c3ea <__lshift+0xbe>
 800c37a:	6920      	ldr	r0, [r4, #16]
 800c37c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c380:	f104 0314 	add.w	r3, r4, #20
 800c384:	f019 091f 	ands.w	r9, r9, #31
 800c388:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c38c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c390:	d02f      	beq.n	800c3f2 <__lshift+0xc6>
 800c392:	f1c9 0e20 	rsb	lr, r9, #32
 800c396:	468a      	mov	sl, r1
 800c398:	f04f 0c00 	mov.w	ip, #0
 800c39c:	681a      	ldr	r2, [r3, #0]
 800c39e:	fa02 f209 	lsl.w	r2, r2, r9
 800c3a2:	ea42 020c 	orr.w	r2, r2, ip
 800c3a6:	f84a 2b04 	str.w	r2, [sl], #4
 800c3aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3ae:	4298      	cmp	r0, r3
 800c3b0:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c3b4:	d8f2      	bhi.n	800c39c <__lshift+0x70>
 800c3b6:	1b03      	subs	r3, r0, r4
 800c3b8:	3b15      	subs	r3, #21
 800c3ba:	f023 0303 	bic.w	r3, r3, #3
 800c3be:	3304      	adds	r3, #4
 800c3c0:	f104 0215 	add.w	r2, r4, #21
 800c3c4:	4290      	cmp	r0, r2
 800c3c6:	bf38      	it	cc
 800c3c8:	2304      	movcc	r3, #4
 800c3ca:	f841 c003 	str.w	ip, [r1, r3]
 800c3ce:	f1bc 0f00 	cmp.w	ip, #0
 800c3d2:	d001      	beq.n	800c3d8 <__lshift+0xac>
 800c3d4:	f108 0602 	add.w	r6, r8, #2
 800c3d8:	3e01      	subs	r6, #1
 800c3da:	4638      	mov	r0, r7
 800c3dc:	612e      	str	r6, [r5, #16]
 800c3de:	4621      	mov	r1, r4
 800c3e0:	f7ff fdd2 	bl	800bf88 <_Bfree>
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3ea:	f842 0f04 	str.w	r0, [r2, #4]!
 800c3ee:	3301      	adds	r3, #1
 800c3f0:	e7c1      	b.n	800c376 <__lshift+0x4a>
 800c3f2:	3904      	subs	r1, #4
 800c3f4:	f853 2b04 	ldr.w	r2, [r3], #4
 800c3f8:	f841 2f04 	str.w	r2, [r1, #4]!
 800c3fc:	4298      	cmp	r0, r3
 800c3fe:	d8f9      	bhi.n	800c3f4 <__lshift+0xc8>
 800c400:	e7ea      	b.n	800c3d8 <__lshift+0xac>
 800c402:	bf00      	nop
 800c404:	0800d7d3 	.word	0x0800d7d3
 800c408:	0800d7e4 	.word	0x0800d7e4

0800c40c <__mcmp>:
 800c40c:	b530      	push	{r4, r5, lr}
 800c40e:	6902      	ldr	r2, [r0, #16]
 800c410:	690c      	ldr	r4, [r1, #16]
 800c412:	1b12      	subs	r2, r2, r4
 800c414:	d10e      	bne.n	800c434 <__mcmp+0x28>
 800c416:	f100 0314 	add.w	r3, r0, #20
 800c41a:	3114      	adds	r1, #20
 800c41c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c420:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c424:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c428:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c42c:	42a5      	cmp	r5, r4
 800c42e:	d003      	beq.n	800c438 <__mcmp+0x2c>
 800c430:	d305      	bcc.n	800c43e <__mcmp+0x32>
 800c432:	2201      	movs	r2, #1
 800c434:	4610      	mov	r0, r2
 800c436:	bd30      	pop	{r4, r5, pc}
 800c438:	4283      	cmp	r3, r0
 800c43a:	d3f3      	bcc.n	800c424 <__mcmp+0x18>
 800c43c:	e7fa      	b.n	800c434 <__mcmp+0x28>
 800c43e:	f04f 32ff 	mov.w	r2, #4294967295
 800c442:	e7f7      	b.n	800c434 <__mcmp+0x28>

0800c444 <__mdiff>:
 800c444:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c448:	460c      	mov	r4, r1
 800c44a:	4606      	mov	r6, r0
 800c44c:	4611      	mov	r1, r2
 800c44e:	4620      	mov	r0, r4
 800c450:	4690      	mov	r8, r2
 800c452:	f7ff ffdb 	bl	800c40c <__mcmp>
 800c456:	1e05      	subs	r5, r0, #0
 800c458:	d110      	bne.n	800c47c <__mdiff+0x38>
 800c45a:	4629      	mov	r1, r5
 800c45c:	4630      	mov	r0, r6
 800c45e:	f7ff fd53 	bl	800bf08 <_Balloc>
 800c462:	b930      	cbnz	r0, 800c472 <__mdiff+0x2e>
 800c464:	4b3a      	ldr	r3, [pc, #232]	; (800c550 <__mdiff+0x10c>)
 800c466:	4602      	mov	r2, r0
 800c468:	f240 2132 	movw	r1, #562	; 0x232
 800c46c:	4839      	ldr	r0, [pc, #228]	; (800c554 <__mdiff+0x110>)
 800c46e:	f000 fb31 	bl	800cad4 <__assert_func>
 800c472:	2301      	movs	r3, #1
 800c474:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c478:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c47c:	bfa4      	itt	ge
 800c47e:	4643      	movge	r3, r8
 800c480:	46a0      	movge	r8, r4
 800c482:	4630      	mov	r0, r6
 800c484:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c488:	bfa6      	itte	ge
 800c48a:	461c      	movge	r4, r3
 800c48c:	2500      	movge	r5, #0
 800c48e:	2501      	movlt	r5, #1
 800c490:	f7ff fd3a 	bl	800bf08 <_Balloc>
 800c494:	b920      	cbnz	r0, 800c4a0 <__mdiff+0x5c>
 800c496:	4b2e      	ldr	r3, [pc, #184]	; (800c550 <__mdiff+0x10c>)
 800c498:	4602      	mov	r2, r0
 800c49a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c49e:	e7e5      	b.n	800c46c <__mdiff+0x28>
 800c4a0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c4a4:	6926      	ldr	r6, [r4, #16]
 800c4a6:	60c5      	str	r5, [r0, #12]
 800c4a8:	f104 0914 	add.w	r9, r4, #20
 800c4ac:	f108 0514 	add.w	r5, r8, #20
 800c4b0:	f100 0e14 	add.w	lr, r0, #20
 800c4b4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c4b8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c4bc:	f108 0210 	add.w	r2, r8, #16
 800c4c0:	46f2      	mov	sl, lr
 800c4c2:	2100      	movs	r1, #0
 800c4c4:	f859 3b04 	ldr.w	r3, [r9], #4
 800c4c8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c4cc:	fa1f f883 	uxth.w	r8, r3
 800c4d0:	fa11 f18b 	uxtah	r1, r1, fp
 800c4d4:	0c1b      	lsrs	r3, r3, #16
 800c4d6:	eba1 0808 	sub.w	r8, r1, r8
 800c4da:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c4de:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c4e2:	fa1f f888 	uxth.w	r8, r8
 800c4e6:	1419      	asrs	r1, r3, #16
 800c4e8:	454e      	cmp	r6, r9
 800c4ea:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c4ee:	f84a 3b04 	str.w	r3, [sl], #4
 800c4f2:	d8e7      	bhi.n	800c4c4 <__mdiff+0x80>
 800c4f4:	1b33      	subs	r3, r6, r4
 800c4f6:	3b15      	subs	r3, #21
 800c4f8:	f023 0303 	bic.w	r3, r3, #3
 800c4fc:	3304      	adds	r3, #4
 800c4fe:	3415      	adds	r4, #21
 800c500:	42a6      	cmp	r6, r4
 800c502:	bf38      	it	cc
 800c504:	2304      	movcc	r3, #4
 800c506:	441d      	add	r5, r3
 800c508:	4473      	add	r3, lr
 800c50a:	469e      	mov	lr, r3
 800c50c:	462e      	mov	r6, r5
 800c50e:	4566      	cmp	r6, ip
 800c510:	d30e      	bcc.n	800c530 <__mdiff+0xec>
 800c512:	f10c 0203 	add.w	r2, ip, #3
 800c516:	1b52      	subs	r2, r2, r5
 800c518:	f022 0203 	bic.w	r2, r2, #3
 800c51c:	3d03      	subs	r5, #3
 800c51e:	45ac      	cmp	ip, r5
 800c520:	bf38      	it	cc
 800c522:	2200      	movcc	r2, #0
 800c524:	441a      	add	r2, r3
 800c526:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c52a:	b17b      	cbz	r3, 800c54c <__mdiff+0x108>
 800c52c:	6107      	str	r7, [r0, #16]
 800c52e:	e7a3      	b.n	800c478 <__mdiff+0x34>
 800c530:	f856 8b04 	ldr.w	r8, [r6], #4
 800c534:	fa11 f288 	uxtah	r2, r1, r8
 800c538:	1414      	asrs	r4, r2, #16
 800c53a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c53e:	b292      	uxth	r2, r2
 800c540:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c544:	f84e 2b04 	str.w	r2, [lr], #4
 800c548:	1421      	asrs	r1, r4, #16
 800c54a:	e7e0      	b.n	800c50e <__mdiff+0xca>
 800c54c:	3f01      	subs	r7, #1
 800c54e:	e7ea      	b.n	800c526 <__mdiff+0xe2>
 800c550:	0800d7d3 	.word	0x0800d7d3
 800c554:	0800d7e4 	.word	0x0800d7e4

0800c558 <__d2b>:
 800c558:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c55c:	4689      	mov	r9, r1
 800c55e:	2101      	movs	r1, #1
 800c560:	ec57 6b10 	vmov	r6, r7, d0
 800c564:	4690      	mov	r8, r2
 800c566:	f7ff fccf 	bl	800bf08 <_Balloc>
 800c56a:	4604      	mov	r4, r0
 800c56c:	b930      	cbnz	r0, 800c57c <__d2b+0x24>
 800c56e:	4602      	mov	r2, r0
 800c570:	4b25      	ldr	r3, [pc, #148]	; (800c608 <__d2b+0xb0>)
 800c572:	4826      	ldr	r0, [pc, #152]	; (800c60c <__d2b+0xb4>)
 800c574:	f240 310a 	movw	r1, #778	; 0x30a
 800c578:	f000 faac 	bl	800cad4 <__assert_func>
 800c57c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c580:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c584:	bb35      	cbnz	r5, 800c5d4 <__d2b+0x7c>
 800c586:	2e00      	cmp	r6, #0
 800c588:	9301      	str	r3, [sp, #4]
 800c58a:	d028      	beq.n	800c5de <__d2b+0x86>
 800c58c:	4668      	mov	r0, sp
 800c58e:	9600      	str	r6, [sp, #0]
 800c590:	f7ff fd82 	bl	800c098 <__lo0bits>
 800c594:	9900      	ldr	r1, [sp, #0]
 800c596:	b300      	cbz	r0, 800c5da <__d2b+0x82>
 800c598:	9a01      	ldr	r2, [sp, #4]
 800c59a:	f1c0 0320 	rsb	r3, r0, #32
 800c59e:	fa02 f303 	lsl.w	r3, r2, r3
 800c5a2:	430b      	orrs	r3, r1
 800c5a4:	40c2      	lsrs	r2, r0
 800c5a6:	6163      	str	r3, [r4, #20]
 800c5a8:	9201      	str	r2, [sp, #4]
 800c5aa:	9b01      	ldr	r3, [sp, #4]
 800c5ac:	61a3      	str	r3, [r4, #24]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	bf14      	ite	ne
 800c5b2:	2202      	movne	r2, #2
 800c5b4:	2201      	moveq	r2, #1
 800c5b6:	6122      	str	r2, [r4, #16]
 800c5b8:	b1d5      	cbz	r5, 800c5f0 <__d2b+0x98>
 800c5ba:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c5be:	4405      	add	r5, r0
 800c5c0:	f8c9 5000 	str.w	r5, [r9]
 800c5c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c5c8:	f8c8 0000 	str.w	r0, [r8]
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	b003      	add	sp, #12
 800c5d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c5d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c5d8:	e7d5      	b.n	800c586 <__d2b+0x2e>
 800c5da:	6161      	str	r1, [r4, #20]
 800c5dc:	e7e5      	b.n	800c5aa <__d2b+0x52>
 800c5de:	a801      	add	r0, sp, #4
 800c5e0:	f7ff fd5a 	bl	800c098 <__lo0bits>
 800c5e4:	9b01      	ldr	r3, [sp, #4]
 800c5e6:	6163      	str	r3, [r4, #20]
 800c5e8:	2201      	movs	r2, #1
 800c5ea:	6122      	str	r2, [r4, #16]
 800c5ec:	3020      	adds	r0, #32
 800c5ee:	e7e3      	b.n	800c5b8 <__d2b+0x60>
 800c5f0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c5f4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c5f8:	f8c9 0000 	str.w	r0, [r9]
 800c5fc:	6918      	ldr	r0, [r3, #16]
 800c5fe:	f7ff fd2b 	bl	800c058 <__hi0bits>
 800c602:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c606:	e7df      	b.n	800c5c8 <__d2b+0x70>
 800c608:	0800d7d3 	.word	0x0800d7d3
 800c60c:	0800d7e4 	.word	0x0800d7e4

0800c610 <_calloc_r>:
 800c610:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c612:	fba1 2402 	umull	r2, r4, r1, r2
 800c616:	b94c      	cbnz	r4, 800c62c <_calloc_r+0x1c>
 800c618:	4611      	mov	r1, r2
 800c61a:	9201      	str	r2, [sp, #4]
 800c61c:	f000 f87a 	bl	800c714 <_malloc_r>
 800c620:	9a01      	ldr	r2, [sp, #4]
 800c622:	4605      	mov	r5, r0
 800c624:	b930      	cbnz	r0, 800c634 <_calloc_r+0x24>
 800c626:	4628      	mov	r0, r5
 800c628:	b003      	add	sp, #12
 800c62a:	bd30      	pop	{r4, r5, pc}
 800c62c:	220c      	movs	r2, #12
 800c62e:	6002      	str	r2, [r0, #0]
 800c630:	2500      	movs	r5, #0
 800c632:	e7f8      	b.n	800c626 <_calloc_r+0x16>
 800c634:	4621      	mov	r1, r4
 800c636:	f7fe f941 	bl	800a8bc <memset>
 800c63a:	e7f4      	b.n	800c626 <_calloc_r+0x16>

0800c63c <_free_r>:
 800c63c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c63e:	2900      	cmp	r1, #0
 800c640:	d044      	beq.n	800c6cc <_free_r+0x90>
 800c642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c646:	9001      	str	r0, [sp, #4]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f1a1 0404 	sub.w	r4, r1, #4
 800c64e:	bfb8      	it	lt
 800c650:	18e4      	addlt	r4, r4, r3
 800c652:	f000 fa9b 	bl	800cb8c <__malloc_lock>
 800c656:	4a1e      	ldr	r2, [pc, #120]	; (800c6d0 <_free_r+0x94>)
 800c658:	9801      	ldr	r0, [sp, #4]
 800c65a:	6813      	ldr	r3, [r2, #0]
 800c65c:	b933      	cbnz	r3, 800c66c <_free_r+0x30>
 800c65e:	6063      	str	r3, [r4, #4]
 800c660:	6014      	str	r4, [r2, #0]
 800c662:	b003      	add	sp, #12
 800c664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c668:	f000 ba96 	b.w	800cb98 <__malloc_unlock>
 800c66c:	42a3      	cmp	r3, r4
 800c66e:	d908      	bls.n	800c682 <_free_r+0x46>
 800c670:	6825      	ldr	r5, [r4, #0]
 800c672:	1961      	adds	r1, r4, r5
 800c674:	428b      	cmp	r3, r1
 800c676:	bf01      	itttt	eq
 800c678:	6819      	ldreq	r1, [r3, #0]
 800c67a:	685b      	ldreq	r3, [r3, #4]
 800c67c:	1949      	addeq	r1, r1, r5
 800c67e:	6021      	streq	r1, [r4, #0]
 800c680:	e7ed      	b.n	800c65e <_free_r+0x22>
 800c682:	461a      	mov	r2, r3
 800c684:	685b      	ldr	r3, [r3, #4]
 800c686:	b10b      	cbz	r3, 800c68c <_free_r+0x50>
 800c688:	42a3      	cmp	r3, r4
 800c68a:	d9fa      	bls.n	800c682 <_free_r+0x46>
 800c68c:	6811      	ldr	r1, [r2, #0]
 800c68e:	1855      	adds	r5, r2, r1
 800c690:	42a5      	cmp	r5, r4
 800c692:	d10b      	bne.n	800c6ac <_free_r+0x70>
 800c694:	6824      	ldr	r4, [r4, #0]
 800c696:	4421      	add	r1, r4
 800c698:	1854      	adds	r4, r2, r1
 800c69a:	42a3      	cmp	r3, r4
 800c69c:	6011      	str	r1, [r2, #0]
 800c69e:	d1e0      	bne.n	800c662 <_free_r+0x26>
 800c6a0:	681c      	ldr	r4, [r3, #0]
 800c6a2:	685b      	ldr	r3, [r3, #4]
 800c6a4:	6053      	str	r3, [r2, #4]
 800c6a6:	4421      	add	r1, r4
 800c6a8:	6011      	str	r1, [r2, #0]
 800c6aa:	e7da      	b.n	800c662 <_free_r+0x26>
 800c6ac:	d902      	bls.n	800c6b4 <_free_r+0x78>
 800c6ae:	230c      	movs	r3, #12
 800c6b0:	6003      	str	r3, [r0, #0]
 800c6b2:	e7d6      	b.n	800c662 <_free_r+0x26>
 800c6b4:	6825      	ldr	r5, [r4, #0]
 800c6b6:	1961      	adds	r1, r4, r5
 800c6b8:	428b      	cmp	r3, r1
 800c6ba:	bf04      	itt	eq
 800c6bc:	6819      	ldreq	r1, [r3, #0]
 800c6be:	685b      	ldreq	r3, [r3, #4]
 800c6c0:	6063      	str	r3, [r4, #4]
 800c6c2:	bf04      	itt	eq
 800c6c4:	1949      	addeq	r1, r1, r5
 800c6c6:	6021      	streq	r1, [r4, #0]
 800c6c8:	6054      	str	r4, [r2, #4]
 800c6ca:	e7ca      	b.n	800c662 <_free_r+0x26>
 800c6cc:	b003      	add	sp, #12
 800c6ce:	bd30      	pop	{r4, r5, pc}
 800c6d0:	200022f8 	.word	0x200022f8

0800c6d4 <sbrk_aligned>:
 800c6d4:	b570      	push	{r4, r5, r6, lr}
 800c6d6:	4e0e      	ldr	r6, [pc, #56]	; (800c710 <sbrk_aligned+0x3c>)
 800c6d8:	460c      	mov	r4, r1
 800c6da:	6831      	ldr	r1, [r6, #0]
 800c6dc:	4605      	mov	r5, r0
 800c6de:	b911      	cbnz	r1, 800c6e6 <sbrk_aligned+0x12>
 800c6e0:	f000 f9e8 	bl	800cab4 <_sbrk_r>
 800c6e4:	6030      	str	r0, [r6, #0]
 800c6e6:	4621      	mov	r1, r4
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	f000 f9e3 	bl	800cab4 <_sbrk_r>
 800c6ee:	1c43      	adds	r3, r0, #1
 800c6f0:	d00a      	beq.n	800c708 <sbrk_aligned+0x34>
 800c6f2:	1cc4      	adds	r4, r0, #3
 800c6f4:	f024 0403 	bic.w	r4, r4, #3
 800c6f8:	42a0      	cmp	r0, r4
 800c6fa:	d007      	beq.n	800c70c <sbrk_aligned+0x38>
 800c6fc:	1a21      	subs	r1, r4, r0
 800c6fe:	4628      	mov	r0, r5
 800c700:	f000 f9d8 	bl	800cab4 <_sbrk_r>
 800c704:	3001      	adds	r0, #1
 800c706:	d101      	bne.n	800c70c <sbrk_aligned+0x38>
 800c708:	f04f 34ff 	mov.w	r4, #4294967295
 800c70c:	4620      	mov	r0, r4
 800c70e:	bd70      	pop	{r4, r5, r6, pc}
 800c710:	200022fc 	.word	0x200022fc

0800c714 <_malloc_r>:
 800c714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c718:	1ccd      	adds	r5, r1, #3
 800c71a:	f025 0503 	bic.w	r5, r5, #3
 800c71e:	3508      	adds	r5, #8
 800c720:	2d0c      	cmp	r5, #12
 800c722:	bf38      	it	cc
 800c724:	250c      	movcc	r5, #12
 800c726:	2d00      	cmp	r5, #0
 800c728:	4607      	mov	r7, r0
 800c72a:	db01      	blt.n	800c730 <_malloc_r+0x1c>
 800c72c:	42a9      	cmp	r1, r5
 800c72e:	d905      	bls.n	800c73c <_malloc_r+0x28>
 800c730:	230c      	movs	r3, #12
 800c732:	603b      	str	r3, [r7, #0]
 800c734:	2600      	movs	r6, #0
 800c736:	4630      	mov	r0, r6
 800c738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c73c:	4e2e      	ldr	r6, [pc, #184]	; (800c7f8 <_malloc_r+0xe4>)
 800c73e:	f000 fa25 	bl	800cb8c <__malloc_lock>
 800c742:	6833      	ldr	r3, [r6, #0]
 800c744:	461c      	mov	r4, r3
 800c746:	bb34      	cbnz	r4, 800c796 <_malloc_r+0x82>
 800c748:	4629      	mov	r1, r5
 800c74a:	4638      	mov	r0, r7
 800c74c:	f7ff ffc2 	bl	800c6d4 <sbrk_aligned>
 800c750:	1c43      	adds	r3, r0, #1
 800c752:	4604      	mov	r4, r0
 800c754:	d14d      	bne.n	800c7f2 <_malloc_r+0xde>
 800c756:	6834      	ldr	r4, [r6, #0]
 800c758:	4626      	mov	r6, r4
 800c75a:	2e00      	cmp	r6, #0
 800c75c:	d140      	bne.n	800c7e0 <_malloc_r+0xcc>
 800c75e:	6823      	ldr	r3, [r4, #0]
 800c760:	4631      	mov	r1, r6
 800c762:	4638      	mov	r0, r7
 800c764:	eb04 0803 	add.w	r8, r4, r3
 800c768:	f000 f9a4 	bl	800cab4 <_sbrk_r>
 800c76c:	4580      	cmp	r8, r0
 800c76e:	d13a      	bne.n	800c7e6 <_malloc_r+0xd2>
 800c770:	6821      	ldr	r1, [r4, #0]
 800c772:	3503      	adds	r5, #3
 800c774:	1a6d      	subs	r5, r5, r1
 800c776:	f025 0503 	bic.w	r5, r5, #3
 800c77a:	3508      	adds	r5, #8
 800c77c:	2d0c      	cmp	r5, #12
 800c77e:	bf38      	it	cc
 800c780:	250c      	movcc	r5, #12
 800c782:	4629      	mov	r1, r5
 800c784:	4638      	mov	r0, r7
 800c786:	f7ff ffa5 	bl	800c6d4 <sbrk_aligned>
 800c78a:	3001      	adds	r0, #1
 800c78c:	d02b      	beq.n	800c7e6 <_malloc_r+0xd2>
 800c78e:	6823      	ldr	r3, [r4, #0]
 800c790:	442b      	add	r3, r5
 800c792:	6023      	str	r3, [r4, #0]
 800c794:	e00e      	b.n	800c7b4 <_malloc_r+0xa0>
 800c796:	6822      	ldr	r2, [r4, #0]
 800c798:	1b52      	subs	r2, r2, r5
 800c79a:	d41e      	bmi.n	800c7da <_malloc_r+0xc6>
 800c79c:	2a0b      	cmp	r2, #11
 800c79e:	d916      	bls.n	800c7ce <_malloc_r+0xba>
 800c7a0:	1961      	adds	r1, r4, r5
 800c7a2:	42a3      	cmp	r3, r4
 800c7a4:	6025      	str	r5, [r4, #0]
 800c7a6:	bf18      	it	ne
 800c7a8:	6059      	strne	r1, [r3, #4]
 800c7aa:	6863      	ldr	r3, [r4, #4]
 800c7ac:	bf08      	it	eq
 800c7ae:	6031      	streq	r1, [r6, #0]
 800c7b0:	5162      	str	r2, [r4, r5]
 800c7b2:	604b      	str	r3, [r1, #4]
 800c7b4:	4638      	mov	r0, r7
 800c7b6:	f104 060b 	add.w	r6, r4, #11
 800c7ba:	f000 f9ed 	bl	800cb98 <__malloc_unlock>
 800c7be:	f026 0607 	bic.w	r6, r6, #7
 800c7c2:	1d23      	adds	r3, r4, #4
 800c7c4:	1af2      	subs	r2, r6, r3
 800c7c6:	d0b6      	beq.n	800c736 <_malloc_r+0x22>
 800c7c8:	1b9b      	subs	r3, r3, r6
 800c7ca:	50a3      	str	r3, [r4, r2]
 800c7cc:	e7b3      	b.n	800c736 <_malloc_r+0x22>
 800c7ce:	6862      	ldr	r2, [r4, #4]
 800c7d0:	42a3      	cmp	r3, r4
 800c7d2:	bf0c      	ite	eq
 800c7d4:	6032      	streq	r2, [r6, #0]
 800c7d6:	605a      	strne	r2, [r3, #4]
 800c7d8:	e7ec      	b.n	800c7b4 <_malloc_r+0xa0>
 800c7da:	4623      	mov	r3, r4
 800c7dc:	6864      	ldr	r4, [r4, #4]
 800c7de:	e7b2      	b.n	800c746 <_malloc_r+0x32>
 800c7e0:	4634      	mov	r4, r6
 800c7e2:	6876      	ldr	r6, [r6, #4]
 800c7e4:	e7b9      	b.n	800c75a <_malloc_r+0x46>
 800c7e6:	230c      	movs	r3, #12
 800c7e8:	603b      	str	r3, [r7, #0]
 800c7ea:	4638      	mov	r0, r7
 800c7ec:	f000 f9d4 	bl	800cb98 <__malloc_unlock>
 800c7f0:	e7a1      	b.n	800c736 <_malloc_r+0x22>
 800c7f2:	6025      	str	r5, [r4, #0]
 800c7f4:	e7de      	b.n	800c7b4 <_malloc_r+0xa0>
 800c7f6:	bf00      	nop
 800c7f8:	200022f8 	.word	0x200022f8

0800c7fc <__ssputs_r>:
 800c7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c800:	688e      	ldr	r6, [r1, #8]
 800c802:	429e      	cmp	r6, r3
 800c804:	4682      	mov	sl, r0
 800c806:	460c      	mov	r4, r1
 800c808:	4690      	mov	r8, r2
 800c80a:	461f      	mov	r7, r3
 800c80c:	d838      	bhi.n	800c880 <__ssputs_r+0x84>
 800c80e:	898a      	ldrh	r2, [r1, #12]
 800c810:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c814:	d032      	beq.n	800c87c <__ssputs_r+0x80>
 800c816:	6825      	ldr	r5, [r4, #0]
 800c818:	6909      	ldr	r1, [r1, #16]
 800c81a:	eba5 0901 	sub.w	r9, r5, r1
 800c81e:	6965      	ldr	r5, [r4, #20]
 800c820:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c824:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c828:	3301      	adds	r3, #1
 800c82a:	444b      	add	r3, r9
 800c82c:	106d      	asrs	r5, r5, #1
 800c82e:	429d      	cmp	r5, r3
 800c830:	bf38      	it	cc
 800c832:	461d      	movcc	r5, r3
 800c834:	0553      	lsls	r3, r2, #21
 800c836:	d531      	bpl.n	800c89c <__ssputs_r+0xa0>
 800c838:	4629      	mov	r1, r5
 800c83a:	f7ff ff6b 	bl	800c714 <_malloc_r>
 800c83e:	4606      	mov	r6, r0
 800c840:	b950      	cbnz	r0, 800c858 <__ssputs_r+0x5c>
 800c842:	230c      	movs	r3, #12
 800c844:	f8ca 3000 	str.w	r3, [sl]
 800c848:	89a3      	ldrh	r3, [r4, #12]
 800c84a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c84e:	81a3      	strh	r3, [r4, #12]
 800c850:	f04f 30ff 	mov.w	r0, #4294967295
 800c854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c858:	6921      	ldr	r1, [r4, #16]
 800c85a:	464a      	mov	r2, r9
 800c85c:	f7ff fb46 	bl	800beec <memcpy>
 800c860:	89a3      	ldrh	r3, [r4, #12]
 800c862:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c86a:	81a3      	strh	r3, [r4, #12]
 800c86c:	6126      	str	r6, [r4, #16]
 800c86e:	6165      	str	r5, [r4, #20]
 800c870:	444e      	add	r6, r9
 800c872:	eba5 0509 	sub.w	r5, r5, r9
 800c876:	6026      	str	r6, [r4, #0]
 800c878:	60a5      	str	r5, [r4, #8]
 800c87a:	463e      	mov	r6, r7
 800c87c:	42be      	cmp	r6, r7
 800c87e:	d900      	bls.n	800c882 <__ssputs_r+0x86>
 800c880:	463e      	mov	r6, r7
 800c882:	6820      	ldr	r0, [r4, #0]
 800c884:	4632      	mov	r2, r6
 800c886:	4641      	mov	r1, r8
 800c888:	f000 f966 	bl	800cb58 <memmove>
 800c88c:	68a3      	ldr	r3, [r4, #8]
 800c88e:	1b9b      	subs	r3, r3, r6
 800c890:	60a3      	str	r3, [r4, #8]
 800c892:	6823      	ldr	r3, [r4, #0]
 800c894:	4433      	add	r3, r6
 800c896:	6023      	str	r3, [r4, #0]
 800c898:	2000      	movs	r0, #0
 800c89a:	e7db      	b.n	800c854 <__ssputs_r+0x58>
 800c89c:	462a      	mov	r2, r5
 800c89e:	f000 f981 	bl	800cba4 <_realloc_r>
 800c8a2:	4606      	mov	r6, r0
 800c8a4:	2800      	cmp	r0, #0
 800c8a6:	d1e1      	bne.n	800c86c <__ssputs_r+0x70>
 800c8a8:	6921      	ldr	r1, [r4, #16]
 800c8aa:	4650      	mov	r0, sl
 800c8ac:	f7ff fec6 	bl	800c63c <_free_r>
 800c8b0:	e7c7      	b.n	800c842 <__ssputs_r+0x46>
	...

0800c8b4 <_svfiprintf_r>:
 800c8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8b8:	4698      	mov	r8, r3
 800c8ba:	898b      	ldrh	r3, [r1, #12]
 800c8bc:	061b      	lsls	r3, r3, #24
 800c8be:	b09d      	sub	sp, #116	; 0x74
 800c8c0:	4607      	mov	r7, r0
 800c8c2:	460d      	mov	r5, r1
 800c8c4:	4614      	mov	r4, r2
 800c8c6:	d50e      	bpl.n	800c8e6 <_svfiprintf_r+0x32>
 800c8c8:	690b      	ldr	r3, [r1, #16]
 800c8ca:	b963      	cbnz	r3, 800c8e6 <_svfiprintf_r+0x32>
 800c8cc:	2140      	movs	r1, #64	; 0x40
 800c8ce:	f7ff ff21 	bl	800c714 <_malloc_r>
 800c8d2:	6028      	str	r0, [r5, #0]
 800c8d4:	6128      	str	r0, [r5, #16]
 800c8d6:	b920      	cbnz	r0, 800c8e2 <_svfiprintf_r+0x2e>
 800c8d8:	230c      	movs	r3, #12
 800c8da:	603b      	str	r3, [r7, #0]
 800c8dc:	f04f 30ff 	mov.w	r0, #4294967295
 800c8e0:	e0d1      	b.n	800ca86 <_svfiprintf_r+0x1d2>
 800c8e2:	2340      	movs	r3, #64	; 0x40
 800c8e4:	616b      	str	r3, [r5, #20]
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ea:	2320      	movs	r3, #32
 800c8ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8f4:	2330      	movs	r3, #48	; 0x30
 800c8f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800caa0 <_svfiprintf_r+0x1ec>
 800c8fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8fe:	f04f 0901 	mov.w	r9, #1
 800c902:	4623      	mov	r3, r4
 800c904:	469a      	mov	sl, r3
 800c906:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c90a:	b10a      	cbz	r2, 800c910 <_svfiprintf_r+0x5c>
 800c90c:	2a25      	cmp	r2, #37	; 0x25
 800c90e:	d1f9      	bne.n	800c904 <_svfiprintf_r+0x50>
 800c910:	ebba 0b04 	subs.w	fp, sl, r4
 800c914:	d00b      	beq.n	800c92e <_svfiprintf_r+0x7a>
 800c916:	465b      	mov	r3, fp
 800c918:	4622      	mov	r2, r4
 800c91a:	4629      	mov	r1, r5
 800c91c:	4638      	mov	r0, r7
 800c91e:	f7ff ff6d 	bl	800c7fc <__ssputs_r>
 800c922:	3001      	adds	r0, #1
 800c924:	f000 80aa 	beq.w	800ca7c <_svfiprintf_r+0x1c8>
 800c928:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c92a:	445a      	add	r2, fp
 800c92c:	9209      	str	r2, [sp, #36]	; 0x24
 800c92e:	f89a 3000 	ldrb.w	r3, [sl]
 800c932:	2b00      	cmp	r3, #0
 800c934:	f000 80a2 	beq.w	800ca7c <_svfiprintf_r+0x1c8>
 800c938:	2300      	movs	r3, #0
 800c93a:	f04f 32ff 	mov.w	r2, #4294967295
 800c93e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c942:	f10a 0a01 	add.w	sl, sl, #1
 800c946:	9304      	str	r3, [sp, #16]
 800c948:	9307      	str	r3, [sp, #28]
 800c94a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c94e:	931a      	str	r3, [sp, #104]	; 0x68
 800c950:	4654      	mov	r4, sl
 800c952:	2205      	movs	r2, #5
 800c954:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c958:	4851      	ldr	r0, [pc, #324]	; (800caa0 <_svfiprintf_r+0x1ec>)
 800c95a:	f7f3 fc49 	bl	80001f0 <memchr>
 800c95e:	9a04      	ldr	r2, [sp, #16]
 800c960:	b9d8      	cbnz	r0, 800c99a <_svfiprintf_r+0xe6>
 800c962:	06d0      	lsls	r0, r2, #27
 800c964:	bf44      	itt	mi
 800c966:	2320      	movmi	r3, #32
 800c968:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c96c:	0711      	lsls	r1, r2, #28
 800c96e:	bf44      	itt	mi
 800c970:	232b      	movmi	r3, #43	; 0x2b
 800c972:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c976:	f89a 3000 	ldrb.w	r3, [sl]
 800c97a:	2b2a      	cmp	r3, #42	; 0x2a
 800c97c:	d015      	beq.n	800c9aa <_svfiprintf_r+0xf6>
 800c97e:	9a07      	ldr	r2, [sp, #28]
 800c980:	4654      	mov	r4, sl
 800c982:	2000      	movs	r0, #0
 800c984:	f04f 0c0a 	mov.w	ip, #10
 800c988:	4621      	mov	r1, r4
 800c98a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c98e:	3b30      	subs	r3, #48	; 0x30
 800c990:	2b09      	cmp	r3, #9
 800c992:	d94e      	bls.n	800ca32 <_svfiprintf_r+0x17e>
 800c994:	b1b0      	cbz	r0, 800c9c4 <_svfiprintf_r+0x110>
 800c996:	9207      	str	r2, [sp, #28]
 800c998:	e014      	b.n	800c9c4 <_svfiprintf_r+0x110>
 800c99a:	eba0 0308 	sub.w	r3, r0, r8
 800c99e:	fa09 f303 	lsl.w	r3, r9, r3
 800c9a2:	4313      	orrs	r3, r2
 800c9a4:	9304      	str	r3, [sp, #16]
 800c9a6:	46a2      	mov	sl, r4
 800c9a8:	e7d2      	b.n	800c950 <_svfiprintf_r+0x9c>
 800c9aa:	9b03      	ldr	r3, [sp, #12]
 800c9ac:	1d19      	adds	r1, r3, #4
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	9103      	str	r1, [sp, #12]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	bfbb      	ittet	lt
 800c9b6:	425b      	neglt	r3, r3
 800c9b8:	f042 0202 	orrlt.w	r2, r2, #2
 800c9bc:	9307      	strge	r3, [sp, #28]
 800c9be:	9307      	strlt	r3, [sp, #28]
 800c9c0:	bfb8      	it	lt
 800c9c2:	9204      	strlt	r2, [sp, #16]
 800c9c4:	7823      	ldrb	r3, [r4, #0]
 800c9c6:	2b2e      	cmp	r3, #46	; 0x2e
 800c9c8:	d10c      	bne.n	800c9e4 <_svfiprintf_r+0x130>
 800c9ca:	7863      	ldrb	r3, [r4, #1]
 800c9cc:	2b2a      	cmp	r3, #42	; 0x2a
 800c9ce:	d135      	bne.n	800ca3c <_svfiprintf_r+0x188>
 800c9d0:	9b03      	ldr	r3, [sp, #12]
 800c9d2:	1d1a      	adds	r2, r3, #4
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	9203      	str	r2, [sp, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	bfb8      	it	lt
 800c9dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9e0:	3402      	adds	r4, #2
 800c9e2:	9305      	str	r3, [sp, #20]
 800c9e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cab0 <_svfiprintf_r+0x1fc>
 800c9e8:	7821      	ldrb	r1, [r4, #0]
 800c9ea:	2203      	movs	r2, #3
 800c9ec:	4650      	mov	r0, sl
 800c9ee:	f7f3 fbff 	bl	80001f0 <memchr>
 800c9f2:	b140      	cbz	r0, 800ca06 <_svfiprintf_r+0x152>
 800c9f4:	2340      	movs	r3, #64	; 0x40
 800c9f6:	eba0 000a 	sub.w	r0, r0, sl
 800c9fa:	fa03 f000 	lsl.w	r0, r3, r0
 800c9fe:	9b04      	ldr	r3, [sp, #16]
 800ca00:	4303      	orrs	r3, r0
 800ca02:	3401      	adds	r4, #1
 800ca04:	9304      	str	r3, [sp, #16]
 800ca06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca0a:	4826      	ldr	r0, [pc, #152]	; (800caa4 <_svfiprintf_r+0x1f0>)
 800ca0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca10:	2206      	movs	r2, #6
 800ca12:	f7f3 fbed 	bl	80001f0 <memchr>
 800ca16:	2800      	cmp	r0, #0
 800ca18:	d038      	beq.n	800ca8c <_svfiprintf_r+0x1d8>
 800ca1a:	4b23      	ldr	r3, [pc, #140]	; (800caa8 <_svfiprintf_r+0x1f4>)
 800ca1c:	bb1b      	cbnz	r3, 800ca66 <_svfiprintf_r+0x1b2>
 800ca1e:	9b03      	ldr	r3, [sp, #12]
 800ca20:	3307      	adds	r3, #7
 800ca22:	f023 0307 	bic.w	r3, r3, #7
 800ca26:	3308      	adds	r3, #8
 800ca28:	9303      	str	r3, [sp, #12]
 800ca2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca2c:	4433      	add	r3, r6
 800ca2e:	9309      	str	r3, [sp, #36]	; 0x24
 800ca30:	e767      	b.n	800c902 <_svfiprintf_r+0x4e>
 800ca32:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca36:	460c      	mov	r4, r1
 800ca38:	2001      	movs	r0, #1
 800ca3a:	e7a5      	b.n	800c988 <_svfiprintf_r+0xd4>
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	3401      	adds	r4, #1
 800ca40:	9305      	str	r3, [sp, #20]
 800ca42:	4619      	mov	r1, r3
 800ca44:	f04f 0c0a 	mov.w	ip, #10
 800ca48:	4620      	mov	r0, r4
 800ca4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca4e:	3a30      	subs	r2, #48	; 0x30
 800ca50:	2a09      	cmp	r2, #9
 800ca52:	d903      	bls.n	800ca5c <_svfiprintf_r+0x1a8>
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d0c5      	beq.n	800c9e4 <_svfiprintf_r+0x130>
 800ca58:	9105      	str	r1, [sp, #20]
 800ca5a:	e7c3      	b.n	800c9e4 <_svfiprintf_r+0x130>
 800ca5c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca60:	4604      	mov	r4, r0
 800ca62:	2301      	movs	r3, #1
 800ca64:	e7f0      	b.n	800ca48 <_svfiprintf_r+0x194>
 800ca66:	ab03      	add	r3, sp, #12
 800ca68:	9300      	str	r3, [sp, #0]
 800ca6a:	462a      	mov	r2, r5
 800ca6c:	4b0f      	ldr	r3, [pc, #60]	; (800caac <_svfiprintf_r+0x1f8>)
 800ca6e:	a904      	add	r1, sp, #16
 800ca70:	4638      	mov	r0, r7
 800ca72:	f7fd ffcb 	bl	800aa0c <_printf_float>
 800ca76:	1c42      	adds	r2, r0, #1
 800ca78:	4606      	mov	r6, r0
 800ca7a:	d1d6      	bne.n	800ca2a <_svfiprintf_r+0x176>
 800ca7c:	89ab      	ldrh	r3, [r5, #12]
 800ca7e:	065b      	lsls	r3, r3, #25
 800ca80:	f53f af2c 	bmi.w	800c8dc <_svfiprintf_r+0x28>
 800ca84:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca86:	b01d      	add	sp, #116	; 0x74
 800ca88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca8c:	ab03      	add	r3, sp, #12
 800ca8e:	9300      	str	r3, [sp, #0]
 800ca90:	462a      	mov	r2, r5
 800ca92:	4b06      	ldr	r3, [pc, #24]	; (800caac <_svfiprintf_r+0x1f8>)
 800ca94:	a904      	add	r1, sp, #16
 800ca96:	4638      	mov	r0, r7
 800ca98:	f7fe fa5c 	bl	800af54 <_printf_i>
 800ca9c:	e7eb      	b.n	800ca76 <_svfiprintf_r+0x1c2>
 800ca9e:	bf00      	nop
 800caa0:	0800d93c 	.word	0x0800d93c
 800caa4:	0800d946 	.word	0x0800d946
 800caa8:	0800aa0d 	.word	0x0800aa0d
 800caac:	0800c7fd 	.word	0x0800c7fd
 800cab0:	0800d942 	.word	0x0800d942

0800cab4 <_sbrk_r>:
 800cab4:	b538      	push	{r3, r4, r5, lr}
 800cab6:	4d06      	ldr	r5, [pc, #24]	; (800cad0 <_sbrk_r+0x1c>)
 800cab8:	2300      	movs	r3, #0
 800caba:	4604      	mov	r4, r0
 800cabc:	4608      	mov	r0, r1
 800cabe:	602b      	str	r3, [r5, #0]
 800cac0:	f7f5 f916 	bl	8001cf0 <_sbrk>
 800cac4:	1c43      	adds	r3, r0, #1
 800cac6:	d102      	bne.n	800cace <_sbrk_r+0x1a>
 800cac8:	682b      	ldr	r3, [r5, #0]
 800caca:	b103      	cbz	r3, 800cace <_sbrk_r+0x1a>
 800cacc:	6023      	str	r3, [r4, #0]
 800cace:	bd38      	pop	{r3, r4, r5, pc}
 800cad0:	20002300 	.word	0x20002300

0800cad4 <__assert_func>:
 800cad4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800cad6:	4614      	mov	r4, r2
 800cad8:	461a      	mov	r2, r3
 800cada:	4b09      	ldr	r3, [pc, #36]	; (800cb00 <__assert_func+0x2c>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	4605      	mov	r5, r0
 800cae0:	68d8      	ldr	r0, [r3, #12]
 800cae2:	b14c      	cbz	r4, 800caf8 <__assert_func+0x24>
 800cae4:	4b07      	ldr	r3, [pc, #28]	; (800cb04 <__assert_func+0x30>)
 800cae6:	9100      	str	r1, [sp, #0]
 800cae8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800caec:	4906      	ldr	r1, [pc, #24]	; (800cb08 <__assert_func+0x34>)
 800caee:	462b      	mov	r3, r5
 800caf0:	f000 f80e 	bl	800cb10 <fiprintf>
 800caf4:	f000 faac 	bl	800d050 <abort>
 800caf8:	4b04      	ldr	r3, [pc, #16]	; (800cb0c <__assert_func+0x38>)
 800cafa:	461c      	mov	r4, r3
 800cafc:	e7f3      	b.n	800cae6 <__assert_func+0x12>
 800cafe:	bf00      	nop
 800cb00:	2000013c 	.word	0x2000013c
 800cb04:	0800d94d 	.word	0x0800d94d
 800cb08:	0800d95a 	.word	0x0800d95a
 800cb0c:	0800d988 	.word	0x0800d988

0800cb10 <fiprintf>:
 800cb10:	b40e      	push	{r1, r2, r3}
 800cb12:	b503      	push	{r0, r1, lr}
 800cb14:	4601      	mov	r1, r0
 800cb16:	ab03      	add	r3, sp, #12
 800cb18:	4805      	ldr	r0, [pc, #20]	; (800cb30 <fiprintf+0x20>)
 800cb1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cb1e:	6800      	ldr	r0, [r0, #0]
 800cb20:	9301      	str	r3, [sp, #4]
 800cb22:	f000 f897 	bl	800cc54 <_vfiprintf_r>
 800cb26:	b002      	add	sp, #8
 800cb28:	f85d eb04 	ldr.w	lr, [sp], #4
 800cb2c:	b003      	add	sp, #12
 800cb2e:	4770      	bx	lr
 800cb30:	2000013c 	.word	0x2000013c

0800cb34 <__ascii_mbtowc>:
 800cb34:	b082      	sub	sp, #8
 800cb36:	b901      	cbnz	r1, 800cb3a <__ascii_mbtowc+0x6>
 800cb38:	a901      	add	r1, sp, #4
 800cb3a:	b142      	cbz	r2, 800cb4e <__ascii_mbtowc+0x1a>
 800cb3c:	b14b      	cbz	r3, 800cb52 <__ascii_mbtowc+0x1e>
 800cb3e:	7813      	ldrb	r3, [r2, #0]
 800cb40:	600b      	str	r3, [r1, #0]
 800cb42:	7812      	ldrb	r2, [r2, #0]
 800cb44:	1e10      	subs	r0, r2, #0
 800cb46:	bf18      	it	ne
 800cb48:	2001      	movne	r0, #1
 800cb4a:	b002      	add	sp, #8
 800cb4c:	4770      	bx	lr
 800cb4e:	4610      	mov	r0, r2
 800cb50:	e7fb      	b.n	800cb4a <__ascii_mbtowc+0x16>
 800cb52:	f06f 0001 	mvn.w	r0, #1
 800cb56:	e7f8      	b.n	800cb4a <__ascii_mbtowc+0x16>

0800cb58 <memmove>:
 800cb58:	4288      	cmp	r0, r1
 800cb5a:	b510      	push	{r4, lr}
 800cb5c:	eb01 0402 	add.w	r4, r1, r2
 800cb60:	d902      	bls.n	800cb68 <memmove+0x10>
 800cb62:	4284      	cmp	r4, r0
 800cb64:	4623      	mov	r3, r4
 800cb66:	d807      	bhi.n	800cb78 <memmove+0x20>
 800cb68:	1e43      	subs	r3, r0, #1
 800cb6a:	42a1      	cmp	r1, r4
 800cb6c:	d008      	beq.n	800cb80 <memmove+0x28>
 800cb6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb72:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cb76:	e7f8      	b.n	800cb6a <memmove+0x12>
 800cb78:	4402      	add	r2, r0
 800cb7a:	4601      	mov	r1, r0
 800cb7c:	428a      	cmp	r2, r1
 800cb7e:	d100      	bne.n	800cb82 <memmove+0x2a>
 800cb80:	bd10      	pop	{r4, pc}
 800cb82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cb86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cb8a:	e7f7      	b.n	800cb7c <memmove+0x24>

0800cb8c <__malloc_lock>:
 800cb8c:	4801      	ldr	r0, [pc, #4]	; (800cb94 <__malloc_lock+0x8>)
 800cb8e:	f000 bc1f 	b.w	800d3d0 <__retarget_lock_acquire_recursive>
 800cb92:	bf00      	nop
 800cb94:	20002304 	.word	0x20002304

0800cb98 <__malloc_unlock>:
 800cb98:	4801      	ldr	r0, [pc, #4]	; (800cba0 <__malloc_unlock+0x8>)
 800cb9a:	f000 bc1a 	b.w	800d3d2 <__retarget_lock_release_recursive>
 800cb9e:	bf00      	nop
 800cba0:	20002304 	.word	0x20002304

0800cba4 <_realloc_r>:
 800cba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cba8:	4680      	mov	r8, r0
 800cbaa:	4614      	mov	r4, r2
 800cbac:	460e      	mov	r6, r1
 800cbae:	b921      	cbnz	r1, 800cbba <_realloc_r+0x16>
 800cbb0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbb4:	4611      	mov	r1, r2
 800cbb6:	f7ff bdad 	b.w	800c714 <_malloc_r>
 800cbba:	b92a      	cbnz	r2, 800cbc8 <_realloc_r+0x24>
 800cbbc:	f7ff fd3e 	bl	800c63c <_free_r>
 800cbc0:	4625      	mov	r5, r4
 800cbc2:	4628      	mov	r0, r5
 800cbc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbc8:	f000 fc6a 	bl	800d4a0 <_malloc_usable_size_r>
 800cbcc:	4284      	cmp	r4, r0
 800cbce:	4607      	mov	r7, r0
 800cbd0:	d802      	bhi.n	800cbd8 <_realloc_r+0x34>
 800cbd2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cbd6:	d812      	bhi.n	800cbfe <_realloc_r+0x5a>
 800cbd8:	4621      	mov	r1, r4
 800cbda:	4640      	mov	r0, r8
 800cbdc:	f7ff fd9a 	bl	800c714 <_malloc_r>
 800cbe0:	4605      	mov	r5, r0
 800cbe2:	2800      	cmp	r0, #0
 800cbe4:	d0ed      	beq.n	800cbc2 <_realloc_r+0x1e>
 800cbe6:	42bc      	cmp	r4, r7
 800cbe8:	4622      	mov	r2, r4
 800cbea:	4631      	mov	r1, r6
 800cbec:	bf28      	it	cs
 800cbee:	463a      	movcs	r2, r7
 800cbf0:	f7ff f97c 	bl	800beec <memcpy>
 800cbf4:	4631      	mov	r1, r6
 800cbf6:	4640      	mov	r0, r8
 800cbf8:	f7ff fd20 	bl	800c63c <_free_r>
 800cbfc:	e7e1      	b.n	800cbc2 <_realloc_r+0x1e>
 800cbfe:	4635      	mov	r5, r6
 800cc00:	e7df      	b.n	800cbc2 <_realloc_r+0x1e>

0800cc02 <__sfputc_r>:
 800cc02:	6893      	ldr	r3, [r2, #8]
 800cc04:	3b01      	subs	r3, #1
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	b410      	push	{r4}
 800cc0a:	6093      	str	r3, [r2, #8]
 800cc0c:	da08      	bge.n	800cc20 <__sfputc_r+0x1e>
 800cc0e:	6994      	ldr	r4, [r2, #24]
 800cc10:	42a3      	cmp	r3, r4
 800cc12:	db01      	blt.n	800cc18 <__sfputc_r+0x16>
 800cc14:	290a      	cmp	r1, #10
 800cc16:	d103      	bne.n	800cc20 <__sfputc_r+0x1e>
 800cc18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc1c:	f000 b94a 	b.w	800ceb4 <__swbuf_r>
 800cc20:	6813      	ldr	r3, [r2, #0]
 800cc22:	1c58      	adds	r0, r3, #1
 800cc24:	6010      	str	r0, [r2, #0]
 800cc26:	7019      	strb	r1, [r3, #0]
 800cc28:	4608      	mov	r0, r1
 800cc2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cc2e:	4770      	bx	lr

0800cc30 <__sfputs_r>:
 800cc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc32:	4606      	mov	r6, r0
 800cc34:	460f      	mov	r7, r1
 800cc36:	4614      	mov	r4, r2
 800cc38:	18d5      	adds	r5, r2, r3
 800cc3a:	42ac      	cmp	r4, r5
 800cc3c:	d101      	bne.n	800cc42 <__sfputs_r+0x12>
 800cc3e:	2000      	movs	r0, #0
 800cc40:	e007      	b.n	800cc52 <__sfputs_r+0x22>
 800cc42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc46:	463a      	mov	r2, r7
 800cc48:	4630      	mov	r0, r6
 800cc4a:	f7ff ffda 	bl	800cc02 <__sfputc_r>
 800cc4e:	1c43      	adds	r3, r0, #1
 800cc50:	d1f3      	bne.n	800cc3a <__sfputs_r+0xa>
 800cc52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cc54 <_vfiprintf_r>:
 800cc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc58:	460d      	mov	r5, r1
 800cc5a:	b09d      	sub	sp, #116	; 0x74
 800cc5c:	4614      	mov	r4, r2
 800cc5e:	4698      	mov	r8, r3
 800cc60:	4606      	mov	r6, r0
 800cc62:	b118      	cbz	r0, 800cc6c <_vfiprintf_r+0x18>
 800cc64:	6983      	ldr	r3, [r0, #24]
 800cc66:	b90b      	cbnz	r3, 800cc6c <_vfiprintf_r+0x18>
 800cc68:	f000 fb14 	bl	800d294 <__sinit>
 800cc6c:	4b89      	ldr	r3, [pc, #548]	; (800ce94 <_vfiprintf_r+0x240>)
 800cc6e:	429d      	cmp	r5, r3
 800cc70:	d11b      	bne.n	800ccaa <_vfiprintf_r+0x56>
 800cc72:	6875      	ldr	r5, [r6, #4]
 800cc74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc76:	07d9      	lsls	r1, r3, #31
 800cc78:	d405      	bmi.n	800cc86 <_vfiprintf_r+0x32>
 800cc7a:	89ab      	ldrh	r3, [r5, #12]
 800cc7c:	059a      	lsls	r2, r3, #22
 800cc7e:	d402      	bmi.n	800cc86 <_vfiprintf_r+0x32>
 800cc80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cc82:	f000 fba5 	bl	800d3d0 <__retarget_lock_acquire_recursive>
 800cc86:	89ab      	ldrh	r3, [r5, #12]
 800cc88:	071b      	lsls	r3, r3, #28
 800cc8a:	d501      	bpl.n	800cc90 <_vfiprintf_r+0x3c>
 800cc8c:	692b      	ldr	r3, [r5, #16]
 800cc8e:	b9eb      	cbnz	r3, 800cccc <_vfiprintf_r+0x78>
 800cc90:	4629      	mov	r1, r5
 800cc92:	4630      	mov	r0, r6
 800cc94:	f000 f96e 	bl	800cf74 <__swsetup_r>
 800cc98:	b1c0      	cbz	r0, 800cccc <_vfiprintf_r+0x78>
 800cc9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cc9c:	07dc      	lsls	r4, r3, #31
 800cc9e:	d50e      	bpl.n	800ccbe <_vfiprintf_r+0x6a>
 800cca0:	f04f 30ff 	mov.w	r0, #4294967295
 800cca4:	b01d      	add	sp, #116	; 0x74
 800cca6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ccaa:	4b7b      	ldr	r3, [pc, #492]	; (800ce98 <_vfiprintf_r+0x244>)
 800ccac:	429d      	cmp	r5, r3
 800ccae:	d101      	bne.n	800ccb4 <_vfiprintf_r+0x60>
 800ccb0:	68b5      	ldr	r5, [r6, #8]
 800ccb2:	e7df      	b.n	800cc74 <_vfiprintf_r+0x20>
 800ccb4:	4b79      	ldr	r3, [pc, #484]	; (800ce9c <_vfiprintf_r+0x248>)
 800ccb6:	429d      	cmp	r5, r3
 800ccb8:	bf08      	it	eq
 800ccba:	68f5      	ldreq	r5, [r6, #12]
 800ccbc:	e7da      	b.n	800cc74 <_vfiprintf_r+0x20>
 800ccbe:	89ab      	ldrh	r3, [r5, #12]
 800ccc0:	0598      	lsls	r0, r3, #22
 800ccc2:	d4ed      	bmi.n	800cca0 <_vfiprintf_r+0x4c>
 800ccc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ccc6:	f000 fb84 	bl	800d3d2 <__retarget_lock_release_recursive>
 800ccca:	e7e9      	b.n	800cca0 <_vfiprintf_r+0x4c>
 800cccc:	2300      	movs	r3, #0
 800ccce:	9309      	str	r3, [sp, #36]	; 0x24
 800ccd0:	2320      	movs	r3, #32
 800ccd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccd6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccda:	2330      	movs	r3, #48	; 0x30
 800ccdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cea0 <_vfiprintf_r+0x24c>
 800cce0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cce4:	f04f 0901 	mov.w	r9, #1
 800cce8:	4623      	mov	r3, r4
 800ccea:	469a      	mov	sl, r3
 800ccec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccf0:	b10a      	cbz	r2, 800ccf6 <_vfiprintf_r+0xa2>
 800ccf2:	2a25      	cmp	r2, #37	; 0x25
 800ccf4:	d1f9      	bne.n	800ccea <_vfiprintf_r+0x96>
 800ccf6:	ebba 0b04 	subs.w	fp, sl, r4
 800ccfa:	d00b      	beq.n	800cd14 <_vfiprintf_r+0xc0>
 800ccfc:	465b      	mov	r3, fp
 800ccfe:	4622      	mov	r2, r4
 800cd00:	4629      	mov	r1, r5
 800cd02:	4630      	mov	r0, r6
 800cd04:	f7ff ff94 	bl	800cc30 <__sfputs_r>
 800cd08:	3001      	adds	r0, #1
 800cd0a:	f000 80aa 	beq.w	800ce62 <_vfiprintf_r+0x20e>
 800cd0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cd10:	445a      	add	r2, fp
 800cd12:	9209      	str	r2, [sp, #36]	; 0x24
 800cd14:	f89a 3000 	ldrb.w	r3, [sl]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	f000 80a2 	beq.w	800ce62 <_vfiprintf_r+0x20e>
 800cd1e:	2300      	movs	r3, #0
 800cd20:	f04f 32ff 	mov.w	r2, #4294967295
 800cd24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd28:	f10a 0a01 	add.w	sl, sl, #1
 800cd2c:	9304      	str	r3, [sp, #16]
 800cd2e:	9307      	str	r3, [sp, #28]
 800cd30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd34:	931a      	str	r3, [sp, #104]	; 0x68
 800cd36:	4654      	mov	r4, sl
 800cd38:	2205      	movs	r2, #5
 800cd3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd3e:	4858      	ldr	r0, [pc, #352]	; (800cea0 <_vfiprintf_r+0x24c>)
 800cd40:	f7f3 fa56 	bl	80001f0 <memchr>
 800cd44:	9a04      	ldr	r2, [sp, #16]
 800cd46:	b9d8      	cbnz	r0, 800cd80 <_vfiprintf_r+0x12c>
 800cd48:	06d1      	lsls	r1, r2, #27
 800cd4a:	bf44      	itt	mi
 800cd4c:	2320      	movmi	r3, #32
 800cd4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd52:	0713      	lsls	r3, r2, #28
 800cd54:	bf44      	itt	mi
 800cd56:	232b      	movmi	r3, #43	; 0x2b
 800cd58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd5c:	f89a 3000 	ldrb.w	r3, [sl]
 800cd60:	2b2a      	cmp	r3, #42	; 0x2a
 800cd62:	d015      	beq.n	800cd90 <_vfiprintf_r+0x13c>
 800cd64:	9a07      	ldr	r2, [sp, #28]
 800cd66:	4654      	mov	r4, sl
 800cd68:	2000      	movs	r0, #0
 800cd6a:	f04f 0c0a 	mov.w	ip, #10
 800cd6e:	4621      	mov	r1, r4
 800cd70:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd74:	3b30      	subs	r3, #48	; 0x30
 800cd76:	2b09      	cmp	r3, #9
 800cd78:	d94e      	bls.n	800ce18 <_vfiprintf_r+0x1c4>
 800cd7a:	b1b0      	cbz	r0, 800cdaa <_vfiprintf_r+0x156>
 800cd7c:	9207      	str	r2, [sp, #28]
 800cd7e:	e014      	b.n	800cdaa <_vfiprintf_r+0x156>
 800cd80:	eba0 0308 	sub.w	r3, r0, r8
 800cd84:	fa09 f303 	lsl.w	r3, r9, r3
 800cd88:	4313      	orrs	r3, r2
 800cd8a:	9304      	str	r3, [sp, #16]
 800cd8c:	46a2      	mov	sl, r4
 800cd8e:	e7d2      	b.n	800cd36 <_vfiprintf_r+0xe2>
 800cd90:	9b03      	ldr	r3, [sp, #12]
 800cd92:	1d19      	adds	r1, r3, #4
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	9103      	str	r1, [sp, #12]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	bfbb      	ittet	lt
 800cd9c:	425b      	neglt	r3, r3
 800cd9e:	f042 0202 	orrlt.w	r2, r2, #2
 800cda2:	9307      	strge	r3, [sp, #28]
 800cda4:	9307      	strlt	r3, [sp, #28]
 800cda6:	bfb8      	it	lt
 800cda8:	9204      	strlt	r2, [sp, #16]
 800cdaa:	7823      	ldrb	r3, [r4, #0]
 800cdac:	2b2e      	cmp	r3, #46	; 0x2e
 800cdae:	d10c      	bne.n	800cdca <_vfiprintf_r+0x176>
 800cdb0:	7863      	ldrb	r3, [r4, #1]
 800cdb2:	2b2a      	cmp	r3, #42	; 0x2a
 800cdb4:	d135      	bne.n	800ce22 <_vfiprintf_r+0x1ce>
 800cdb6:	9b03      	ldr	r3, [sp, #12]
 800cdb8:	1d1a      	adds	r2, r3, #4
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	9203      	str	r2, [sp, #12]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	bfb8      	it	lt
 800cdc2:	f04f 33ff 	movlt.w	r3, #4294967295
 800cdc6:	3402      	adds	r4, #2
 800cdc8:	9305      	str	r3, [sp, #20]
 800cdca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ceb0 <_vfiprintf_r+0x25c>
 800cdce:	7821      	ldrb	r1, [r4, #0]
 800cdd0:	2203      	movs	r2, #3
 800cdd2:	4650      	mov	r0, sl
 800cdd4:	f7f3 fa0c 	bl	80001f0 <memchr>
 800cdd8:	b140      	cbz	r0, 800cdec <_vfiprintf_r+0x198>
 800cdda:	2340      	movs	r3, #64	; 0x40
 800cddc:	eba0 000a 	sub.w	r0, r0, sl
 800cde0:	fa03 f000 	lsl.w	r0, r3, r0
 800cde4:	9b04      	ldr	r3, [sp, #16]
 800cde6:	4303      	orrs	r3, r0
 800cde8:	3401      	adds	r4, #1
 800cdea:	9304      	str	r3, [sp, #16]
 800cdec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdf0:	482c      	ldr	r0, [pc, #176]	; (800cea4 <_vfiprintf_r+0x250>)
 800cdf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdf6:	2206      	movs	r2, #6
 800cdf8:	f7f3 f9fa 	bl	80001f0 <memchr>
 800cdfc:	2800      	cmp	r0, #0
 800cdfe:	d03f      	beq.n	800ce80 <_vfiprintf_r+0x22c>
 800ce00:	4b29      	ldr	r3, [pc, #164]	; (800cea8 <_vfiprintf_r+0x254>)
 800ce02:	bb1b      	cbnz	r3, 800ce4c <_vfiprintf_r+0x1f8>
 800ce04:	9b03      	ldr	r3, [sp, #12]
 800ce06:	3307      	adds	r3, #7
 800ce08:	f023 0307 	bic.w	r3, r3, #7
 800ce0c:	3308      	adds	r3, #8
 800ce0e:	9303      	str	r3, [sp, #12]
 800ce10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce12:	443b      	add	r3, r7
 800ce14:	9309      	str	r3, [sp, #36]	; 0x24
 800ce16:	e767      	b.n	800cce8 <_vfiprintf_r+0x94>
 800ce18:	fb0c 3202 	mla	r2, ip, r2, r3
 800ce1c:	460c      	mov	r4, r1
 800ce1e:	2001      	movs	r0, #1
 800ce20:	e7a5      	b.n	800cd6e <_vfiprintf_r+0x11a>
 800ce22:	2300      	movs	r3, #0
 800ce24:	3401      	adds	r4, #1
 800ce26:	9305      	str	r3, [sp, #20]
 800ce28:	4619      	mov	r1, r3
 800ce2a:	f04f 0c0a 	mov.w	ip, #10
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce34:	3a30      	subs	r2, #48	; 0x30
 800ce36:	2a09      	cmp	r2, #9
 800ce38:	d903      	bls.n	800ce42 <_vfiprintf_r+0x1ee>
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d0c5      	beq.n	800cdca <_vfiprintf_r+0x176>
 800ce3e:	9105      	str	r1, [sp, #20]
 800ce40:	e7c3      	b.n	800cdca <_vfiprintf_r+0x176>
 800ce42:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce46:	4604      	mov	r4, r0
 800ce48:	2301      	movs	r3, #1
 800ce4a:	e7f0      	b.n	800ce2e <_vfiprintf_r+0x1da>
 800ce4c:	ab03      	add	r3, sp, #12
 800ce4e:	9300      	str	r3, [sp, #0]
 800ce50:	462a      	mov	r2, r5
 800ce52:	4b16      	ldr	r3, [pc, #88]	; (800ceac <_vfiprintf_r+0x258>)
 800ce54:	a904      	add	r1, sp, #16
 800ce56:	4630      	mov	r0, r6
 800ce58:	f7fd fdd8 	bl	800aa0c <_printf_float>
 800ce5c:	4607      	mov	r7, r0
 800ce5e:	1c78      	adds	r0, r7, #1
 800ce60:	d1d6      	bne.n	800ce10 <_vfiprintf_r+0x1bc>
 800ce62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ce64:	07d9      	lsls	r1, r3, #31
 800ce66:	d405      	bmi.n	800ce74 <_vfiprintf_r+0x220>
 800ce68:	89ab      	ldrh	r3, [r5, #12]
 800ce6a:	059a      	lsls	r2, r3, #22
 800ce6c:	d402      	bmi.n	800ce74 <_vfiprintf_r+0x220>
 800ce6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ce70:	f000 faaf 	bl	800d3d2 <__retarget_lock_release_recursive>
 800ce74:	89ab      	ldrh	r3, [r5, #12]
 800ce76:	065b      	lsls	r3, r3, #25
 800ce78:	f53f af12 	bmi.w	800cca0 <_vfiprintf_r+0x4c>
 800ce7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce7e:	e711      	b.n	800cca4 <_vfiprintf_r+0x50>
 800ce80:	ab03      	add	r3, sp, #12
 800ce82:	9300      	str	r3, [sp, #0]
 800ce84:	462a      	mov	r2, r5
 800ce86:	4b09      	ldr	r3, [pc, #36]	; (800ceac <_vfiprintf_r+0x258>)
 800ce88:	a904      	add	r1, sp, #16
 800ce8a:	4630      	mov	r0, r6
 800ce8c:	f7fe f862 	bl	800af54 <_printf_i>
 800ce90:	e7e4      	b.n	800ce5c <_vfiprintf_r+0x208>
 800ce92:	bf00      	nop
 800ce94:	0800dab4 	.word	0x0800dab4
 800ce98:	0800dad4 	.word	0x0800dad4
 800ce9c:	0800da94 	.word	0x0800da94
 800cea0:	0800d93c 	.word	0x0800d93c
 800cea4:	0800d946 	.word	0x0800d946
 800cea8:	0800aa0d 	.word	0x0800aa0d
 800ceac:	0800cc31 	.word	0x0800cc31
 800ceb0:	0800d942 	.word	0x0800d942

0800ceb4 <__swbuf_r>:
 800ceb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceb6:	460e      	mov	r6, r1
 800ceb8:	4614      	mov	r4, r2
 800ceba:	4605      	mov	r5, r0
 800cebc:	b118      	cbz	r0, 800cec6 <__swbuf_r+0x12>
 800cebe:	6983      	ldr	r3, [r0, #24]
 800cec0:	b90b      	cbnz	r3, 800cec6 <__swbuf_r+0x12>
 800cec2:	f000 f9e7 	bl	800d294 <__sinit>
 800cec6:	4b21      	ldr	r3, [pc, #132]	; (800cf4c <__swbuf_r+0x98>)
 800cec8:	429c      	cmp	r4, r3
 800ceca:	d12b      	bne.n	800cf24 <__swbuf_r+0x70>
 800cecc:	686c      	ldr	r4, [r5, #4]
 800cece:	69a3      	ldr	r3, [r4, #24]
 800ced0:	60a3      	str	r3, [r4, #8]
 800ced2:	89a3      	ldrh	r3, [r4, #12]
 800ced4:	071a      	lsls	r2, r3, #28
 800ced6:	d52f      	bpl.n	800cf38 <__swbuf_r+0x84>
 800ced8:	6923      	ldr	r3, [r4, #16]
 800ceda:	b36b      	cbz	r3, 800cf38 <__swbuf_r+0x84>
 800cedc:	6923      	ldr	r3, [r4, #16]
 800cede:	6820      	ldr	r0, [r4, #0]
 800cee0:	1ac0      	subs	r0, r0, r3
 800cee2:	6963      	ldr	r3, [r4, #20]
 800cee4:	b2f6      	uxtb	r6, r6
 800cee6:	4283      	cmp	r3, r0
 800cee8:	4637      	mov	r7, r6
 800ceea:	dc04      	bgt.n	800cef6 <__swbuf_r+0x42>
 800ceec:	4621      	mov	r1, r4
 800ceee:	4628      	mov	r0, r5
 800cef0:	f000 f93c 	bl	800d16c <_fflush_r>
 800cef4:	bb30      	cbnz	r0, 800cf44 <__swbuf_r+0x90>
 800cef6:	68a3      	ldr	r3, [r4, #8]
 800cef8:	3b01      	subs	r3, #1
 800cefa:	60a3      	str	r3, [r4, #8]
 800cefc:	6823      	ldr	r3, [r4, #0]
 800cefe:	1c5a      	adds	r2, r3, #1
 800cf00:	6022      	str	r2, [r4, #0]
 800cf02:	701e      	strb	r6, [r3, #0]
 800cf04:	6963      	ldr	r3, [r4, #20]
 800cf06:	3001      	adds	r0, #1
 800cf08:	4283      	cmp	r3, r0
 800cf0a:	d004      	beq.n	800cf16 <__swbuf_r+0x62>
 800cf0c:	89a3      	ldrh	r3, [r4, #12]
 800cf0e:	07db      	lsls	r3, r3, #31
 800cf10:	d506      	bpl.n	800cf20 <__swbuf_r+0x6c>
 800cf12:	2e0a      	cmp	r6, #10
 800cf14:	d104      	bne.n	800cf20 <__swbuf_r+0x6c>
 800cf16:	4621      	mov	r1, r4
 800cf18:	4628      	mov	r0, r5
 800cf1a:	f000 f927 	bl	800d16c <_fflush_r>
 800cf1e:	b988      	cbnz	r0, 800cf44 <__swbuf_r+0x90>
 800cf20:	4638      	mov	r0, r7
 800cf22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf24:	4b0a      	ldr	r3, [pc, #40]	; (800cf50 <__swbuf_r+0x9c>)
 800cf26:	429c      	cmp	r4, r3
 800cf28:	d101      	bne.n	800cf2e <__swbuf_r+0x7a>
 800cf2a:	68ac      	ldr	r4, [r5, #8]
 800cf2c:	e7cf      	b.n	800cece <__swbuf_r+0x1a>
 800cf2e:	4b09      	ldr	r3, [pc, #36]	; (800cf54 <__swbuf_r+0xa0>)
 800cf30:	429c      	cmp	r4, r3
 800cf32:	bf08      	it	eq
 800cf34:	68ec      	ldreq	r4, [r5, #12]
 800cf36:	e7ca      	b.n	800cece <__swbuf_r+0x1a>
 800cf38:	4621      	mov	r1, r4
 800cf3a:	4628      	mov	r0, r5
 800cf3c:	f000 f81a 	bl	800cf74 <__swsetup_r>
 800cf40:	2800      	cmp	r0, #0
 800cf42:	d0cb      	beq.n	800cedc <__swbuf_r+0x28>
 800cf44:	f04f 37ff 	mov.w	r7, #4294967295
 800cf48:	e7ea      	b.n	800cf20 <__swbuf_r+0x6c>
 800cf4a:	bf00      	nop
 800cf4c:	0800dab4 	.word	0x0800dab4
 800cf50:	0800dad4 	.word	0x0800dad4
 800cf54:	0800da94 	.word	0x0800da94

0800cf58 <__ascii_wctomb>:
 800cf58:	b149      	cbz	r1, 800cf6e <__ascii_wctomb+0x16>
 800cf5a:	2aff      	cmp	r2, #255	; 0xff
 800cf5c:	bf85      	ittet	hi
 800cf5e:	238a      	movhi	r3, #138	; 0x8a
 800cf60:	6003      	strhi	r3, [r0, #0]
 800cf62:	700a      	strbls	r2, [r1, #0]
 800cf64:	f04f 30ff 	movhi.w	r0, #4294967295
 800cf68:	bf98      	it	ls
 800cf6a:	2001      	movls	r0, #1
 800cf6c:	4770      	bx	lr
 800cf6e:	4608      	mov	r0, r1
 800cf70:	4770      	bx	lr
	...

0800cf74 <__swsetup_r>:
 800cf74:	4b32      	ldr	r3, [pc, #200]	; (800d040 <__swsetup_r+0xcc>)
 800cf76:	b570      	push	{r4, r5, r6, lr}
 800cf78:	681d      	ldr	r5, [r3, #0]
 800cf7a:	4606      	mov	r6, r0
 800cf7c:	460c      	mov	r4, r1
 800cf7e:	b125      	cbz	r5, 800cf8a <__swsetup_r+0x16>
 800cf80:	69ab      	ldr	r3, [r5, #24]
 800cf82:	b913      	cbnz	r3, 800cf8a <__swsetup_r+0x16>
 800cf84:	4628      	mov	r0, r5
 800cf86:	f000 f985 	bl	800d294 <__sinit>
 800cf8a:	4b2e      	ldr	r3, [pc, #184]	; (800d044 <__swsetup_r+0xd0>)
 800cf8c:	429c      	cmp	r4, r3
 800cf8e:	d10f      	bne.n	800cfb0 <__swsetup_r+0x3c>
 800cf90:	686c      	ldr	r4, [r5, #4]
 800cf92:	89a3      	ldrh	r3, [r4, #12]
 800cf94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cf98:	0719      	lsls	r1, r3, #28
 800cf9a:	d42c      	bmi.n	800cff6 <__swsetup_r+0x82>
 800cf9c:	06dd      	lsls	r5, r3, #27
 800cf9e:	d411      	bmi.n	800cfc4 <__swsetup_r+0x50>
 800cfa0:	2309      	movs	r3, #9
 800cfa2:	6033      	str	r3, [r6, #0]
 800cfa4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cfa8:	81a3      	strh	r3, [r4, #12]
 800cfaa:	f04f 30ff 	mov.w	r0, #4294967295
 800cfae:	e03e      	b.n	800d02e <__swsetup_r+0xba>
 800cfb0:	4b25      	ldr	r3, [pc, #148]	; (800d048 <__swsetup_r+0xd4>)
 800cfb2:	429c      	cmp	r4, r3
 800cfb4:	d101      	bne.n	800cfba <__swsetup_r+0x46>
 800cfb6:	68ac      	ldr	r4, [r5, #8]
 800cfb8:	e7eb      	b.n	800cf92 <__swsetup_r+0x1e>
 800cfba:	4b24      	ldr	r3, [pc, #144]	; (800d04c <__swsetup_r+0xd8>)
 800cfbc:	429c      	cmp	r4, r3
 800cfbe:	bf08      	it	eq
 800cfc0:	68ec      	ldreq	r4, [r5, #12]
 800cfc2:	e7e6      	b.n	800cf92 <__swsetup_r+0x1e>
 800cfc4:	0758      	lsls	r0, r3, #29
 800cfc6:	d512      	bpl.n	800cfee <__swsetup_r+0x7a>
 800cfc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cfca:	b141      	cbz	r1, 800cfde <__swsetup_r+0x6a>
 800cfcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cfd0:	4299      	cmp	r1, r3
 800cfd2:	d002      	beq.n	800cfda <__swsetup_r+0x66>
 800cfd4:	4630      	mov	r0, r6
 800cfd6:	f7ff fb31 	bl	800c63c <_free_r>
 800cfda:	2300      	movs	r3, #0
 800cfdc:	6363      	str	r3, [r4, #52]	; 0x34
 800cfde:	89a3      	ldrh	r3, [r4, #12]
 800cfe0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cfe4:	81a3      	strh	r3, [r4, #12]
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	6063      	str	r3, [r4, #4]
 800cfea:	6923      	ldr	r3, [r4, #16]
 800cfec:	6023      	str	r3, [r4, #0]
 800cfee:	89a3      	ldrh	r3, [r4, #12]
 800cff0:	f043 0308 	orr.w	r3, r3, #8
 800cff4:	81a3      	strh	r3, [r4, #12]
 800cff6:	6923      	ldr	r3, [r4, #16]
 800cff8:	b94b      	cbnz	r3, 800d00e <__swsetup_r+0x9a>
 800cffa:	89a3      	ldrh	r3, [r4, #12]
 800cffc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d000:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d004:	d003      	beq.n	800d00e <__swsetup_r+0x9a>
 800d006:	4621      	mov	r1, r4
 800d008:	4630      	mov	r0, r6
 800d00a:	f000 fa09 	bl	800d420 <__smakebuf_r>
 800d00e:	89a0      	ldrh	r0, [r4, #12]
 800d010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d014:	f010 0301 	ands.w	r3, r0, #1
 800d018:	d00a      	beq.n	800d030 <__swsetup_r+0xbc>
 800d01a:	2300      	movs	r3, #0
 800d01c:	60a3      	str	r3, [r4, #8]
 800d01e:	6963      	ldr	r3, [r4, #20]
 800d020:	425b      	negs	r3, r3
 800d022:	61a3      	str	r3, [r4, #24]
 800d024:	6923      	ldr	r3, [r4, #16]
 800d026:	b943      	cbnz	r3, 800d03a <__swsetup_r+0xc6>
 800d028:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d02c:	d1ba      	bne.n	800cfa4 <__swsetup_r+0x30>
 800d02e:	bd70      	pop	{r4, r5, r6, pc}
 800d030:	0781      	lsls	r1, r0, #30
 800d032:	bf58      	it	pl
 800d034:	6963      	ldrpl	r3, [r4, #20]
 800d036:	60a3      	str	r3, [r4, #8]
 800d038:	e7f4      	b.n	800d024 <__swsetup_r+0xb0>
 800d03a:	2000      	movs	r0, #0
 800d03c:	e7f7      	b.n	800d02e <__swsetup_r+0xba>
 800d03e:	bf00      	nop
 800d040:	2000013c 	.word	0x2000013c
 800d044:	0800dab4 	.word	0x0800dab4
 800d048:	0800dad4 	.word	0x0800dad4
 800d04c:	0800da94 	.word	0x0800da94

0800d050 <abort>:
 800d050:	b508      	push	{r3, lr}
 800d052:	2006      	movs	r0, #6
 800d054:	f000 fa54 	bl	800d500 <raise>
 800d058:	2001      	movs	r0, #1
 800d05a:	f7f4 fdd1 	bl	8001c00 <_exit>
	...

0800d060 <__sflush_r>:
 800d060:	898a      	ldrh	r2, [r1, #12]
 800d062:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d066:	4605      	mov	r5, r0
 800d068:	0710      	lsls	r0, r2, #28
 800d06a:	460c      	mov	r4, r1
 800d06c:	d458      	bmi.n	800d120 <__sflush_r+0xc0>
 800d06e:	684b      	ldr	r3, [r1, #4]
 800d070:	2b00      	cmp	r3, #0
 800d072:	dc05      	bgt.n	800d080 <__sflush_r+0x20>
 800d074:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d076:	2b00      	cmp	r3, #0
 800d078:	dc02      	bgt.n	800d080 <__sflush_r+0x20>
 800d07a:	2000      	movs	r0, #0
 800d07c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d080:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d082:	2e00      	cmp	r6, #0
 800d084:	d0f9      	beq.n	800d07a <__sflush_r+0x1a>
 800d086:	2300      	movs	r3, #0
 800d088:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d08c:	682f      	ldr	r7, [r5, #0]
 800d08e:	602b      	str	r3, [r5, #0]
 800d090:	d032      	beq.n	800d0f8 <__sflush_r+0x98>
 800d092:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d094:	89a3      	ldrh	r3, [r4, #12]
 800d096:	075a      	lsls	r2, r3, #29
 800d098:	d505      	bpl.n	800d0a6 <__sflush_r+0x46>
 800d09a:	6863      	ldr	r3, [r4, #4]
 800d09c:	1ac0      	subs	r0, r0, r3
 800d09e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d0a0:	b10b      	cbz	r3, 800d0a6 <__sflush_r+0x46>
 800d0a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d0a4:	1ac0      	subs	r0, r0, r3
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	4602      	mov	r2, r0
 800d0aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d0ac:	6a21      	ldr	r1, [r4, #32]
 800d0ae:	4628      	mov	r0, r5
 800d0b0:	47b0      	blx	r6
 800d0b2:	1c43      	adds	r3, r0, #1
 800d0b4:	89a3      	ldrh	r3, [r4, #12]
 800d0b6:	d106      	bne.n	800d0c6 <__sflush_r+0x66>
 800d0b8:	6829      	ldr	r1, [r5, #0]
 800d0ba:	291d      	cmp	r1, #29
 800d0bc:	d82c      	bhi.n	800d118 <__sflush_r+0xb8>
 800d0be:	4a2a      	ldr	r2, [pc, #168]	; (800d168 <__sflush_r+0x108>)
 800d0c0:	40ca      	lsrs	r2, r1
 800d0c2:	07d6      	lsls	r6, r2, #31
 800d0c4:	d528      	bpl.n	800d118 <__sflush_r+0xb8>
 800d0c6:	2200      	movs	r2, #0
 800d0c8:	6062      	str	r2, [r4, #4]
 800d0ca:	04d9      	lsls	r1, r3, #19
 800d0cc:	6922      	ldr	r2, [r4, #16]
 800d0ce:	6022      	str	r2, [r4, #0]
 800d0d0:	d504      	bpl.n	800d0dc <__sflush_r+0x7c>
 800d0d2:	1c42      	adds	r2, r0, #1
 800d0d4:	d101      	bne.n	800d0da <__sflush_r+0x7a>
 800d0d6:	682b      	ldr	r3, [r5, #0]
 800d0d8:	b903      	cbnz	r3, 800d0dc <__sflush_r+0x7c>
 800d0da:	6560      	str	r0, [r4, #84]	; 0x54
 800d0dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d0de:	602f      	str	r7, [r5, #0]
 800d0e0:	2900      	cmp	r1, #0
 800d0e2:	d0ca      	beq.n	800d07a <__sflush_r+0x1a>
 800d0e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d0e8:	4299      	cmp	r1, r3
 800d0ea:	d002      	beq.n	800d0f2 <__sflush_r+0x92>
 800d0ec:	4628      	mov	r0, r5
 800d0ee:	f7ff faa5 	bl	800c63c <_free_r>
 800d0f2:	2000      	movs	r0, #0
 800d0f4:	6360      	str	r0, [r4, #52]	; 0x34
 800d0f6:	e7c1      	b.n	800d07c <__sflush_r+0x1c>
 800d0f8:	6a21      	ldr	r1, [r4, #32]
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	47b0      	blx	r6
 800d100:	1c41      	adds	r1, r0, #1
 800d102:	d1c7      	bne.n	800d094 <__sflush_r+0x34>
 800d104:	682b      	ldr	r3, [r5, #0]
 800d106:	2b00      	cmp	r3, #0
 800d108:	d0c4      	beq.n	800d094 <__sflush_r+0x34>
 800d10a:	2b1d      	cmp	r3, #29
 800d10c:	d001      	beq.n	800d112 <__sflush_r+0xb2>
 800d10e:	2b16      	cmp	r3, #22
 800d110:	d101      	bne.n	800d116 <__sflush_r+0xb6>
 800d112:	602f      	str	r7, [r5, #0]
 800d114:	e7b1      	b.n	800d07a <__sflush_r+0x1a>
 800d116:	89a3      	ldrh	r3, [r4, #12]
 800d118:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d11c:	81a3      	strh	r3, [r4, #12]
 800d11e:	e7ad      	b.n	800d07c <__sflush_r+0x1c>
 800d120:	690f      	ldr	r7, [r1, #16]
 800d122:	2f00      	cmp	r7, #0
 800d124:	d0a9      	beq.n	800d07a <__sflush_r+0x1a>
 800d126:	0793      	lsls	r3, r2, #30
 800d128:	680e      	ldr	r6, [r1, #0]
 800d12a:	bf08      	it	eq
 800d12c:	694b      	ldreq	r3, [r1, #20]
 800d12e:	600f      	str	r7, [r1, #0]
 800d130:	bf18      	it	ne
 800d132:	2300      	movne	r3, #0
 800d134:	eba6 0807 	sub.w	r8, r6, r7
 800d138:	608b      	str	r3, [r1, #8]
 800d13a:	f1b8 0f00 	cmp.w	r8, #0
 800d13e:	dd9c      	ble.n	800d07a <__sflush_r+0x1a>
 800d140:	6a21      	ldr	r1, [r4, #32]
 800d142:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d144:	4643      	mov	r3, r8
 800d146:	463a      	mov	r2, r7
 800d148:	4628      	mov	r0, r5
 800d14a:	47b0      	blx	r6
 800d14c:	2800      	cmp	r0, #0
 800d14e:	dc06      	bgt.n	800d15e <__sflush_r+0xfe>
 800d150:	89a3      	ldrh	r3, [r4, #12]
 800d152:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d156:	81a3      	strh	r3, [r4, #12]
 800d158:	f04f 30ff 	mov.w	r0, #4294967295
 800d15c:	e78e      	b.n	800d07c <__sflush_r+0x1c>
 800d15e:	4407      	add	r7, r0
 800d160:	eba8 0800 	sub.w	r8, r8, r0
 800d164:	e7e9      	b.n	800d13a <__sflush_r+0xda>
 800d166:	bf00      	nop
 800d168:	20400001 	.word	0x20400001

0800d16c <_fflush_r>:
 800d16c:	b538      	push	{r3, r4, r5, lr}
 800d16e:	690b      	ldr	r3, [r1, #16]
 800d170:	4605      	mov	r5, r0
 800d172:	460c      	mov	r4, r1
 800d174:	b913      	cbnz	r3, 800d17c <_fflush_r+0x10>
 800d176:	2500      	movs	r5, #0
 800d178:	4628      	mov	r0, r5
 800d17a:	bd38      	pop	{r3, r4, r5, pc}
 800d17c:	b118      	cbz	r0, 800d186 <_fflush_r+0x1a>
 800d17e:	6983      	ldr	r3, [r0, #24]
 800d180:	b90b      	cbnz	r3, 800d186 <_fflush_r+0x1a>
 800d182:	f000 f887 	bl	800d294 <__sinit>
 800d186:	4b14      	ldr	r3, [pc, #80]	; (800d1d8 <_fflush_r+0x6c>)
 800d188:	429c      	cmp	r4, r3
 800d18a:	d11b      	bne.n	800d1c4 <_fflush_r+0x58>
 800d18c:	686c      	ldr	r4, [r5, #4]
 800d18e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d0ef      	beq.n	800d176 <_fflush_r+0xa>
 800d196:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d198:	07d0      	lsls	r0, r2, #31
 800d19a:	d404      	bmi.n	800d1a6 <_fflush_r+0x3a>
 800d19c:	0599      	lsls	r1, r3, #22
 800d19e:	d402      	bmi.n	800d1a6 <_fflush_r+0x3a>
 800d1a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1a2:	f000 f915 	bl	800d3d0 <__retarget_lock_acquire_recursive>
 800d1a6:	4628      	mov	r0, r5
 800d1a8:	4621      	mov	r1, r4
 800d1aa:	f7ff ff59 	bl	800d060 <__sflush_r>
 800d1ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d1b0:	07da      	lsls	r2, r3, #31
 800d1b2:	4605      	mov	r5, r0
 800d1b4:	d4e0      	bmi.n	800d178 <_fflush_r+0xc>
 800d1b6:	89a3      	ldrh	r3, [r4, #12]
 800d1b8:	059b      	lsls	r3, r3, #22
 800d1ba:	d4dd      	bmi.n	800d178 <_fflush_r+0xc>
 800d1bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d1be:	f000 f908 	bl	800d3d2 <__retarget_lock_release_recursive>
 800d1c2:	e7d9      	b.n	800d178 <_fflush_r+0xc>
 800d1c4:	4b05      	ldr	r3, [pc, #20]	; (800d1dc <_fflush_r+0x70>)
 800d1c6:	429c      	cmp	r4, r3
 800d1c8:	d101      	bne.n	800d1ce <_fflush_r+0x62>
 800d1ca:	68ac      	ldr	r4, [r5, #8]
 800d1cc:	e7df      	b.n	800d18e <_fflush_r+0x22>
 800d1ce:	4b04      	ldr	r3, [pc, #16]	; (800d1e0 <_fflush_r+0x74>)
 800d1d0:	429c      	cmp	r4, r3
 800d1d2:	bf08      	it	eq
 800d1d4:	68ec      	ldreq	r4, [r5, #12]
 800d1d6:	e7da      	b.n	800d18e <_fflush_r+0x22>
 800d1d8:	0800dab4 	.word	0x0800dab4
 800d1dc:	0800dad4 	.word	0x0800dad4
 800d1e0:	0800da94 	.word	0x0800da94

0800d1e4 <std>:
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	b510      	push	{r4, lr}
 800d1e8:	4604      	mov	r4, r0
 800d1ea:	e9c0 3300 	strd	r3, r3, [r0]
 800d1ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d1f2:	6083      	str	r3, [r0, #8]
 800d1f4:	8181      	strh	r1, [r0, #12]
 800d1f6:	6643      	str	r3, [r0, #100]	; 0x64
 800d1f8:	81c2      	strh	r2, [r0, #14]
 800d1fa:	6183      	str	r3, [r0, #24]
 800d1fc:	4619      	mov	r1, r3
 800d1fe:	2208      	movs	r2, #8
 800d200:	305c      	adds	r0, #92	; 0x5c
 800d202:	f7fd fb5b 	bl	800a8bc <memset>
 800d206:	4b05      	ldr	r3, [pc, #20]	; (800d21c <std+0x38>)
 800d208:	6263      	str	r3, [r4, #36]	; 0x24
 800d20a:	4b05      	ldr	r3, [pc, #20]	; (800d220 <std+0x3c>)
 800d20c:	62a3      	str	r3, [r4, #40]	; 0x28
 800d20e:	4b05      	ldr	r3, [pc, #20]	; (800d224 <std+0x40>)
 800d210:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d212:	4b05      	ldr	r3, [pc, #20]	; (800d228 <std+0x44>)
 800d214:	6224      	str	r4, [r4, #32]
 800d216:	6323      	str	r3, [r4, #48]	; 0x30
 800d218:	bd10      	pop	{r4, pc}
 800d21a:	bf00      	nop
 800d21c:	0800d539 	.word	0x0800d539
 800d220:	0800d55b 	.word	0x0800d55b
 800d224:	0800d593 	.word	0x0800d593
 800d228:	0800d5b7 	.word	0x0800d5b7

0800d22c <_cleanup_r>:
 800d22c:	4901      	ldr	r1, [pc, #4]	; (800d234 <_cleanup_r+0x8>)
 800d22e:	f000 b8af 	b.w	800d390 <_fwalk_reent>
 800d232:	bf00      	nop
 800d234:	0800d16d 	.word	0x0800d16d

0800d238 <__sfmoreglue>:
 800d238:	b570      	push	{r4, r5, r6, lr}
 800d23a:	2268      	movs	r2, #104	; 0x68
 800d23c:	1e4d      	subs	r5, r1, #1
 800d23e:	4355      	muls	r5, r2
 800d240:	460e      	mov	r6, r1
 800d242:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d246:	f7ff fa65 	bl	800c714 <_malloc_r>
 800d24a:	4604      	mov	r4, r0
 800d24c:	b140      	cbz	r0, 800d260 <__sfmoreglue+0x28>
 800d24e:	2100      	movs	r1, #0
 800d250:	e9c0 1600 	strd	r1, r6, [r0]
 800d254:	300c      	adds	r0, #12
 800d256:	60a0      	str	r0, [r4, #8]
 800d258:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d25c:	f7fd fb2e 	bl	800a8bc <memset>
 800d260:	4620      	mov	r0, r4
 800d262:	bd70      	pop	{r4, r5, r6, pc}

0800d264 <__sfp_lock_acquire>:
 800d264:	4801      	ldr	r0, [pc, #4]	; (800d26c <__sfp_lock_acquire+0x8>)
 800d266:	f000 b8b3 	b.w	800d3d0 <__retarget_lock_acquire_recursive>
 800d26a:	bf00      	nop
 800d26c:	20002305 	.word	0x20002305

0800d270 <__sfp_lock_release>:
 800d270:	4801      	ldr	r0, [pc, #4]	; (800d278 <__sfp_lock_release+0x8>)
 800d272:	f000 b8ae 	b.w	800d3d2 <__retarget_lock_release_recursive>
 800d276:	bf00      	nop
 800d278:	20002305 	.word	0x20002305

0800d27c <__sinit_lock_acquire>:
 800d27c:	4801      	ldr	r0, [pc, #4]	; (800d284 <__sinit_lock_acquire+0x8>)
 800d27e:	f000 b8a7 	b.w	800d3d0 <__retarget_lock_acquire_recursive>
 800d282:	bf00      	nop
 800d284:	20002306 	.word	0x20002306

0800d288 <__sinit_lock_release>:
 800d288:	4801      	ldr	r0, [pc, #4]	; (800d290 <__sinit_lock_release+0x8>)
 800d28a:	f000 b8a2 	b.w	800d3d2 <__retarget_lock_release_recursive>
 800d28e:	bf00      	nop
 800d290:	20002306 	.word	0x20002306

0800d294 <__sinit>:
 800d294:	b510      	push	{r4, lr}
 800d296:	4604      	mov	r4, r0
 800d298:	f7ff fff0 	bl	800d27c <__sinit_lock_acquire>
 800d29c:	69a3      	ldr	r3, [r4, #24]
 800d29e:	b11b      	cbz	r3, 800d2a8 <__sinit+0x14>
 800d2a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d2a4:	f7ff bff0 	b.w	800d288 <__sinit_lock_release>
 800d2a8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d2ac:	6523      	str	r3, [r4, #80]	; 0x50
 800d2ae:	4b13      	ldr	r3, [pc, #76]	; (800d2fc <__sinit+0x68>)
 800d2b0:	4a13      	ldr	r2, [pc, #76]	; (800d300 <__sinit+0x6c>)
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	62a2      	str	r2, [r4, #40]	; 0x28
 800d2b6:	42a3      	cmp	r3, r4
 800d2b8:	bf04      	itt	eq
 800d2ba:	2301      	moveq	r3, #1
 800d2bc:	61a3      	streq	r3, [r4, #24]
 800d2be:	4620      	mov	r0, r4
 800d2c0:	f000 f820 	bl	800d304 <__sfp>
 800d2c4:	6060      	str	r0, [r4, #4]
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	f000 f81c 	bl	800d304 <__sfp>
 800d2cc:	60a0      	str	r0, [r4, #8]
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	f000 f818 	bl	800d304 <__sfp>
 800d2d4:	2200      	movs	r2, #0
 800d2d6:	60e0      	str	r0, [r4, #12]
 800d2d8:	2104      	movs	r1, #4
 800d2da:	6860      	ldr	r0, [r4, #4]
 800d2dc:	f7ff ff82 	bl	800d1e4 <std>
 800d2e0:	68a0      	ldr	r0, [r4, #8]
 800d2e2:	2201      	movs	r2, #1
 800d2e4:	2109      	movs	r1, #9
 800d2e6:	f7ff ff7d 	bl	800d1e4 <std>
 800d2ea:	68e0      	ldr	r0, [r4, #12]
 800d2ec:	2202      	movs	r2, #2
 800d2ee:	2112      	movs	r1, #18
 800d2f0:	f7ff ff78 	bl	800d1e4 <std>
 800d2f4:	2301      	movs	r3, #1
 800d2f6:	61a3      	str	r3, [r4, #24]
 800d2f8:	e7d2      	b.n	800d2a0 <__sinit+0xc>
 800d2fa:	bf00      	nop
 800d2fc:	0800d71c 	.word	0x0800d71c
 800d300:	0800d22d 	.word	0x0800d22d

0800d304 <__sfp>:
 800d304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d306:	4607      	mov	r7, r0
 800d308:	f7ff ffac 	bl	800d264 <__sfp_lock_acquire>
 800d30c:	4b1e      	ldr	r3, [pc, #120]	; (800d388 <__sfp+0x84>)
 800d30e:	681e      	ldr	r6, [r3, #0]
 800d310:	69b3      	ldr	r3, [r6, #24]
 800d312:	b913      	cbnz	r3, 800d31a <__sfp+0x16>
 800d314:	4630      	mov	r0, r6
 800d316:	f7ff ffbd 	bl	800d294 <__sinit>
 800d31a:	3648      	adds	r6, #72	; 0x48
 800d31c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d320:	3b01      	subs	r3, #1
 800d322:	d503      	bpl.n	800d32c <__sfp+0x28>
 800d324:	6833      	ldr	r3, [r6, #0]
 800d326:	b30b      	cbz	r3, 800d36c <__sfp+0x68>
 800d328:	6836      	ldr	r6, [r6, #0]
 800d32a:	e7f7      	b.n	800d31c <__sfp+0x18>
 800d32c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d330:	b9d5      	cbnz	r5, 800d368 <__sfp+0x64>
 800d332:	4b16      	ldr	r3, [pc, #88]	; (800d38c <__sfp+0x88>)
 800d334:	60e3      	str	r3, [r4, #12]
 800d336:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d33a:	6665      	str	r5, [r4, #100]	; 0x64
 800d33c:	f000 f847 	bl	800d3ce <__retarget_lock_init_recursive>
 800d340:	f7ff ff96 	bl	800d270 <__sfp_lock_release>
 800d344:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d348:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d34c:	6025      	str	r5, [r4, #0]
 800d34e:	61a5      	str	r5, [r4, #24]
 800d350:	2208      	movs	r2, #8
 800d352:	4629      	mov	r1, r5
 800d354:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d358:	f7fd fab0 	bl	800a8bc <memset>
 800d35c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d360:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d364:	4620      	mov	r0, r4
 800d366:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d368:	3468      	adds	r4, #104	; 0x68
 800d36a:	e7d9      	b.n	800d320 <__sfp+0x1c>
 800d36c:	2104      	movs	r1, #4
 800d36e:	4638      	mov	r0, r7
 800d370:	f7ff ff62 	bl	800d238 <__sfmoreglue>
 800d374:	4604      	mov	r4, r0
 800d376:	6030      	str	r0, [r6, #0]
 800d378:	2800      	cmp	r0, #0
 800d37a:	d1d5      	bne.n	800d328 <__sfp+0x24>
 800d37c:	f7ff ff78 	bl	800d270 <__sfp_lock_release>
 800d380:	230c      	movs	r3, #12
 800d382:	603b      	str	r3, [r7, #0]
 800d384:	e7ee      	b.n	800d364 <__sfp+0x60>
 800d386:	bf00      	nop
 800d388:	0800d71c 	.word	0x0800d71c
 800d38c:	ffff0001 	.word	0xffff0001

0800d390 <_fwalk_reent>:
 800d390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d394:	4606      	mov	r6, r0
 800d396:	4688      	mov	r8, r1
 800d398:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d39c:	2700      	movs	r7, #0
 800d39e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d3a2:	f1b9 0901 	subs.w	r9, r9, #1
 800d3a6:	d505      	bpl.n	800d3b4 <_fwalk_reent+0x24>
 800d3a8:	6824      	ldr	r4, [r4, #0]
 800d3aa:	2c00      	cmp	r4, #0
 800d3ac:	d1f7      	bne.n	800d39e <_fwalk_reent+0xe>
 800d3ae:	4638      	mov	r0, r7
 800d3b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d3b4:	89ab      	ldrh	r3, [r5, #12]
 800d3b6:	2b01      	cmp	r3, #1
 800d3b8:	d907      	bls.n	800d3ca <_fwalk_reent+0x3a>
 800d3ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d3be:	3301      	adds	r3, #1
 800d3c0:	d003      	beq.n	800d3ca <_fwalk_reent+0x3a>
 800d3c2:	4629      	mov	r1, r5
 800d3c4:	4630      	mov	r0, r6
 800d3c6:	47c0      	blx	r8
 800d3c8:	4307      	orrs	r7, r0
 800d3ca:	3568      	adds	r5, #104	; 0x68
 800d3cc:	e7e9      	b.n	800d3a2 <_fwalk_reent+0x12>

0800d3ce <__retarget_lock_init_recursive>:
 800d3ce:	4770      	bx	lr

0800d3d0 <__retarget_lock_acquire_recursive>:
 800d3d0:	4770      	bx	lr

0800d3d2 <__retarget_lock_release_recursive>:
 800d3d2:	4770      	bx	lr

0800d3d4 <__swhatbuf_r>:
 800d3d4:	b570      	push	{r4, r5, r6, lr}
 800d3d6:	460e      	mov	r6, r1
 800d3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d3dc:	2900      	cmp	r1, #0
 800d3de:	b096      	sub	sp, #88	; 0x58
 800d3e0:	4614      	mov	r4, r2
 800d3e2:	461d      	mov	r5, r3
 800d3e4:	da08      	bge.n	800d3f8 <__swhatbuf_r+0x24>
 800d3e6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	602a      	str	r2, [r5, #0]
 800d3ee:	061a      	lsls	r2, r3, #24
 800d3f0:	d410      	bmi.n	800d414 <__swhatbuf_r+0x40>
 800d3f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d3f6:	e00e      	b.n	800d416 <__swhatbuf_r+0x42>
 800d3f8:	466a      	mov	r2, sp
 800d3fa:	f000 f903 	bl	800d604 <_fstat_r>
 800d3fe:	2800      	cmp	r0, #0
 800d400:	dbf1      	blt.n	800d3e6 <__swhatbuf_r+0x12>
 800d402:	9a01      	ldr	r2, [sp, #4]
 800d404:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d408:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d40c:	425a      	negs	r2, r3
 800d40e:	415a      	adcs	r2, r3
 800d410:	602a      	str	r2, [r5, #0]
 800d412:	e7ee      	b.n	800d3f2 <__swhatbuf_r+0x1e>
 800d414:	2340      	movs	r3, #64	; 0x40
 800d416:	2000      	movs	r0, #0
 800d418:	6023      	str	r3, [r4, #0]
 800d41a:	b016      	add	sp, #88	; 0x58
 800d41c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d420 <__smakebuf_r>:
 800d420:	898b      	ldrh	r3, [r1, #12]
 800d422:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d424:	079d      	lsls	r5, r3, #30
 800d426:	4606      	mov	r6, r0
 800d428:	460c      	mov	r4, r1
 800d42a:	d507      	bpl.n	800d43c <__smakebuf_r+0x1c>
 800d42c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d430:	6023      	str	r3, [r4, #0]
 800d432:	6123      	str	r3, [r4, #16]
 800d434:	2301      	movs	r3, #1
 800d436:	6163      	str	r3, [r4, #20]
 800d438:	b002      	add	sp, #8
 800d43a:	bd70      	pop	{r4, r5, r6, pc}
 800d43c:	ab01      	add	r3, sp, #4
 800d43e:	466a      	mov	r2, sp
 800d440:	f7ff ffc8 	bl	800d3d4 <__swhatbuf_r>
 800d444:	9900      	ldr	r1, [sp, #0]
 800d446:	4605      	mov	r5, r0
 800d448:	4630      	mov	r0, r6
 800d44a:	f7ff f963 	bl	800c714 <_malloc_r>
 800d44e:	b948      	cbnz	r0, 800d464 <__smakebuf_r+0x44>
 800d450:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d454:	059a      	lsls	r2, r3, #22
 800d456:	d4ef      	bmi.n	800d438 <__smakebuf_r+0x18>
 800d458:	f023 0303 	bic.w	r3, r3, #3
 800d45c:	f043 0302 	orr.w	r3, r3, #2
 800d460:	81a3      	strh	r3, [r4, #12]
 800d462:	e7e3      	b.n	800d42c <__smakebuf_r+0xc>
 800d464:	4b0d      	ldr	r3, [pc, #52]	; (800d49c <__smakebuf_r+0x7c>)
 800d466:	62b3      	str	r3, [r6, #40]	; 0x28
 800d468:	89a3      	ldrh	r3, [r4, #12]
 800d46a:	6020      	str	r0, [r4, #0]
 800d46c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d470:	81a3      	strh	r3, [r4, #12]
 800d472:	9b00      	ldr	r3, [sp, #0]
 800d474:	6163      	str	r3, [r4, #20]
 800d476:	9b01      	ldr	r3, [sp, #4]
 800d478:	6120      	str	r0, [r4, #16]
 800d47a:	b15b      	cbz	r3, 800d494 <__smakebuf_r+0x74>
 800d47c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d480:	4630      	mov	r0, r6
 800d482:	f000 f8d1 	bl	800d628 <_isatty_r>
 800d486:	b128      	cbz	r0, 800d494 <__smakebuf_r+0x74>
 800d488:	89a3      	ldrh	r3, [r4, #12]
 800d48a:	f023 0303 	bic.w	r3, r3, #3
 800d48e:	f043 0301 	orr.w	r3, r3, #1
 800d492:	81a3      	strh	r3, [r4, #12]
 800d494:	89a0      	ldrh	r0, [r4, #12]
 800d496:	4305      	orrs	r5, r0
 800d498:	81a5      	strh	r5, [r4, #12]
 800d49a:	e7cd      	b.n	800d438 <__smakebuf_r+0x18>
 800d49c:	0800d22d 	.word	0x0800d22d

0800d4a0 <_malloc_usable_size_r>:
 800d4a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4a4:	1f18      	subs	r0, r3, #4
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	bfbc      	itt	lt
 800d4aa:	580b      	ldrlt	r3, [r1, r0]
 800d4ac:	18c0      	addlt	r0, r0, r3
 800d4ae:	4770      	bx	lr

0800d4b0 <_raise_r>:
 800d4b0:	291f      	cmp	r1, #31
 800d4b2:	b538      	push	{r3, r4, r5, lr}
 800d4b4:	4604      	mov	r4, r0
 800d4b6:	460d      	mov	r5, r1
 800d4b8:	d904      	bls.n	800d4c4 <_raise_r+0x14>
 800d4ba:	2316      	movs	r3, #22
 800d4bc:	6003      	str	r3, [r0, #0]
 800d4be:	f04f 30ff 	mov.w	r0, #4294967295
 800d4c2:	bd38      	pop	{r3, r4, r5, pc}
 800d4c4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d4c6:	b112      	cbz	r2, 800d4ce <_raise_r+0x1e>
 800d4c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d4cc:	b94b      	cbnz	r3, 800d4e2 <_raise_r+0x32>
 800d4ce:	4620      	mov	r0, r4
 800d4d0:	f000 f830 	bl	800d534 <_getpid_r>
 800d4d4:	462a      	mov	r2, r5
 800d4d6:	4601      	mov	r1, r0
 800d4d8:	4620      	mov	r0, r4
 800d4da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d4de:	f000 b817 	b.w	800d510 <_kill_r>
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d00a      	beq.n	800d4fc <_raise_r+0x4c>
 800d4e6:	1c59      	adds	r1, r3, #1
 800d4e8:	d103      	bne.n	800d4f2 <_raise_r+0x42>
 800d4ea:	2316      	movs	r3, #22
 800d4ec:	6003      	str	r3, [r0, #0]
 800d4ee:	2001      	movs	r0, #1
 800d4f0:	e7e7      	b.n	800d4c2 <_raise_r+0x12>
 800d4f2:	2400      	movs	r4, #0
 800d4f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d4f8:	4628      	mov	r0, r5
 800d4fa:	4798      	blx	r3
 800d4fc:	2000      	movs	r0, #0
 800d4fe:	e7e0      	b.n	800d4c2 <_raise_r+0x12>

0800d500 <raise>:
 800d500:	4b02      	ldr	r3, [pc, #8]	; (800d50c <raise+0xc>)
 800d502:	4601      	mov	r1, r0
 800d504:	6818      	ldr	r0, [r3, #0]
 800d506:	f7ff bfd3 	b.w	800d4b0 <_raise_r>
 800d50a:	bf00      	nop
 800d50c:	2000013c 	.word	0x2000013c

0800d510 <_kill_r>:
 800d510:	b538      	push	{r3, r4, r5, lr}
 800d512:	4d07      	ldr	r5, [pc, #28]	; (800d530 <_kill_r+0x20>)
 800d514:	2300      	movs	r3, #0
 800d516:	4604      	mov	r4, r0
 800d518:	4608      	mov	r0, r1
 800d51a:	4611      	mov	r1, r2
 800d51c:	602b      	str	r3, [r5, #0]
 800d51e:	f7f4 fb5f 	bl	8001be0 <_kill>
 800d522:	1c43      	adds	r3, r0, #1
 800d524:	d102      	bne.n	800d52c <_kill_r+0x1c>
 800d526:	682b      	ldr	r3, [r5, #0]
 800d528:	b103      	cbz	r3, 800d52c <_kill_r+0x1c>
 800d52a:	6023      	str	r3, [r4, #0]
 800d52c:	bd38      	pop	{r3, r4, r5, pc}
 800d52e:	bf00      	nop
 800d530:	20002300 	.word	0x20002300

0800d534 <_getpid_r>:
 800d534:	f7f4 bb4c 	b.w	8001bd0 <_getpid>

0800d538 <__sread>:
 800d538:	b510      	push	{r4, lr}
 800d53a:	460c      	mov	r4, r1
 800d53c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d540:	f000 f894 	bl	800d66c <_read_r>
 800d544:	2800      	cmp	r0, #0
 800d546:	bfab      	itete	ge
 800d548:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d54a:	89a3      	ldrhlt	r3, [r4, #12]
 800d54c:	181b      	addge	r3, r3, r0
 800d54e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d552:	bfac      	ite	ge
 800d554:	6563      	strge	r3, [r4, #84]	; 0x54
 800d556:	81a3      	strhlt	r3, [r4, #12]
 800d558:	bd10      	pop	{r4, pc}

0800d55a <__swrite>:
 800d55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d55e:	461f      	mov	r7, r3
 800d560:	898b      	ldrh	r3, [r1, #12]
 800d562:	05db      	lsls	r3, r3, #23
 800d564:	4605      	mov	r5, r0
 800d566:	460c      	mov	r4, r1
 800d568:	4616      	mov	r6, r2
 800d56a:	d505      	bpl.n	800d578 <__swrite+0x1e>
 800d56c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d570:	2302      	movs	r3, #2
 800d572:	2200      	movs	r2, #0
 800d574:	f000 f868 	bl	800d648 <_lseek_r>
 800d578:	89a3      	ldrh	r3, [r4, #12]
 800d57a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d57e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d582:	81a3      	strh	r3, [r4, #12]
 800d584:	4632      	mov	r2, r6
 800d586:	463b      	mov	r3, r7
 800d588:	4628      	mov	r0, r5
 800d58a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d58e:	f000 b817 	b.w	800d5c0 <_write_r>

0800d592 <__sseek>:
 800d592:	b510      	push	{r4, lr}
 800d594:	460c      	mov	r4, r1
 800d596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d59a:	f000 f855 	bl	800d648 <_lseek_r>
 800d59e:	1c43      	adds	r3, r0, #1
 800d5a0:	89a3      	ldrh	r3, [r4, #12]
 800d5a2:	bf15      	itete	ne
 800d5a4:	6560      	strne	r0, [r4, #84]	; 0x54
 800d5a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d5aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d5ae:	81a3      	strheq	r3, [r4, #12]
 800d5b0:	bf18      	it	ne
 800d5b2:	81a3      	strhne	r3, [r4, #12]
 800d5b4:	bd10      	pop	{r4, pc}

0800d5b6 <__sclose>:
 800d5b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5ba:	f000 b813 	b.w	800d5e4 <_close_r>
	...

0800d5c0 <_write_r>:
 800d5c0:	b538      	push	{r3, r4, r5, lr}
 800d5c2:	4d07      	ldr	r5, [pc, #28]	; (800d5e0 <_write_r+0x20>)
 800d5c4:	4604      	mov	r4, r0
 800d5c6:	4608      	mov	r0, r1
 800d5c8:	4611      	mov	r1, r2
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	602a      	str	r2, [r5, #0]
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	f7f4 fb3d 	bl	8001c4e <_write>
 800d5d4:	1c43      	adds	r3, r0, #1
 800d5d6:	d102      	bne.n	800d5de <_write_r+0x1e>
 800d5d8:	682b      	ldr	r3, [r5, #0]
 800d5da:	b103      	cbz	r3, 800d5de <_write_r+0x1e>
 800d5dc:	6023      	str	r3, [r4, #0]
 800d5de:	bd38      	pop	{r3, r4, r5, pc}
 800d5e0:	20002300 	.word	0x20002300

0800d5e4 <_close_r>:
 800d5e4:	b538      	push	{r3, r4, r5, lr}
 800d5e6:	4d06      	ldr	r5, [pc, #24]	; (800d600 <_close_r+0x1c>)
 800d5e8:	2300      	movs	r3, #0
 800d5ea:	4604      	mov	r4, r0
 800d5ec:	4608      	mov	r0, r1
 800d5ee:	602b      	str	r3, [r5, #0]
 800d5f0:	f7f4 fb49 	bl	8001c86 <_close>
 800d5f4:	1c43      	adds	r3, r0, #1
 800d5f6:	d102      	bne.n	800d5fe <_close_r+0x1a>
 800d5f8:	682b      	ldr	r3, [r5, #0]
 800d5fa:	b103      	cbz	r3, 800d5fe <_close_r+0x1a>
 800d5fc:	6023      	str	r3, [r4, #0]
 800d5fe:	bd38      	pop	{r3, r4, r5, pc}
 800d600:	20002300 	.word	0x20002300

0800d604 <_fstat_r>:
 800d604:	b538      	push	{r3, r4, r5, lr}
 800d606:	4d07      	ldr	r5, [pc, #28]	; (800d624 <_fstat_r+0x20>)
 800d608:	2300      	movs	r3, #0
 800d60a:	4604      	mov	r4, r0
 800d60c:	4608      	mov	r0, r1
 800d60e:	4611      	mov	r1, r2
 800d610:	602b      	str	r3, [r5, #0]
 800d612:	f7f4 fb44 	bl	8001c9e <_fstat>
 800d616:	1c43      	adds	r3, r0, #1
 800d618:	d102      	bne.n	800d620 <_fstat_r+0x1c>
 800d61a:	682b      	ldr	r3, [r5, #0]
 800d61c:	b103      	cbz	r3, 800d620 <_fstat_r+0x1c>
 800d61e:	6023      	str	r3, [r4, #0]
 800d620:	bd38      	pop	{r3, r4, r5, pc}
 800d622:	bf00      	nop
 800d624:	20002300 	.word	0x20002300

0800d628 <_isatty_r>:
 800d628:	b538      	push	{r3, r4, r5, lr}
 800d62a:	4d06      	ldr	r5, [pc, #24]	; (800d644 <_isatty_r+0x1c>)
 800d62c:	2300      	movs	r3, #0
 800d62e:	4604      	mov	r4, r0
 800d630:	4608      	mov	r0, r1
 800d632:	602b      	str	r3, [r5, #0]
 800d634:	f7f4 fb43 	bl	8001cbe <_isatty>
 800d638:	1c43      	adds	r3, r0, #1
 800d63a:	d102      	bne.n	800d642 <_isatty_r+0x1a>
 800d63c:	682b      	ldr	r3, [r5, #0]
 800d63e:	b103      	cbz	r3, 800d642 <_isatty_r+0x1a>
 800d640:	6023      	str	r3, [r4, #0]
 800d642:	bd38      	pop	{r3, r4, r5, pc}
 800d644:	20002300 	.word	0x20002300

0800d648 <_lseek_r>:
 800d648:	b538      	push	{r3, r4, r5, lr}
 800d64a:	4d07      	ldr	r5, [pc, #28]	; (800d668 <_lseek_r+0x20>)
 800d64c:	4604      	mov	r4, r0
 800d64e:	4608      	mov	r0, r1
 800d650:	4611      	mov	r1, r2
 800d652:	2200      	movs	r2, #0
 800d654:	602a      	str	r2, [r5, #0]
 800d656:	461a      	mov	r2, r3
 800d658:	f7f4 fb3c 	bl	8001cd4 <_lseek>
 800d65c:	1c43      	adds	r3, r0, #1
 800d65e:	d102      	bne.n	800d666 <_lseek_r+0x1e>
 800d660:	682b      	ldr	r3, [r5, #0]
 800d662:	b103      	cbz	r3, 800d666 <_lseek_r+0x1e>
 800d664:	6023      	str	r3, [r4, #0]
 800d666:	bd38      	pop	{r3, r4, r5, pc}
 800d668:	20002300 	.word	0x20002300

0800d66c <_read_r>:
 800d66c:	b538      	push	{r3, r4, r5, lr}
 800d66e:	4d07      	ldr	r5, [pc, #28]	; (800d68c <_read_r+0x20>)
 800d670:	4604      	mov	r4, r0
 800d672:	4608      	mov	r0, r1
 800d674:	4611      	mov	r1, r2
 800d676:	2200      	movs	r2, #0
 800d678:	602a      	str	r2, [r5, #0]
 800d67a:	461a      	mov	r2, r3
 800d67c:	f7f4 faca 	bl	8001c14 <_read>
 800d680:	1c43      	adds	r3, r0, #1
 800d682:	d102      	bne.n	800d68a <_read_r+0x1e>
 800d684:	682b      	ldr	r3, [r5, #0]
 800d686:	b103      	cbz	r3, 800d68a <_read_r+0x1e>
 800d688:	6023      	str	r3, [r4, #0]
 800d68a:	bd38      	pop	{r3, r4, r5, pc}
 800d68c:	20002300 	.word	0x20002300

0800d690 <_init>:
 800d690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d692:	bf00      	nop
 800d694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d696:	bc08      	pop	{r3}
 800d698:	469e      	mov	lr, r3
 800d69a:	4770      	bx	lr

0800d69c <_fini>:
 800d69c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d69e:	bf00      	nop
 800d6a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6a2:	bc08      	pop	{r3}
 800d6a4:	469e      	mov	lr, r3
 800d6a6:	4770      	bx	lr
