
emg_projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a6c8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  0800a868  0800a868  0001a868  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aca4  0800aca4  000202cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800aca4  0800aca4  0001aca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800acac  0800acac  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800acac  0800acac  0001acac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800acb0  0800acb0  0001acb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  0800acb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c44  200002cc  0800af80  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001f10  0800af80  00021f10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e76d  00000000  00000000  000202fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c08  00000000  00000000  0002ea69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  00031678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  00032290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f40  00000000  00000000  00032d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fef8  00000000  00000000  0004bc80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087a1b  00000000  00000000  0005bb78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e3593  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004154  00000000  00000000  000e35e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002cc 	.word	0x200002cc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a850 	.word	0x0800a850

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002d0 	.word	0x200002d0
 80001dc:	0800a850 	.word	0x0800a850

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b974 	b.w	8000f58 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	4604      	mov	r4, r0
 8000c90:	468e      	mov	lr, r1
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d14d      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c96:	428a      	cmp	r2, r1
 8000c98:	4694      	mov	ip, r2
 8000c9a:	d969      	bls.n	8000d70 <__udivmoddi4+0xe8>
 8000c9c:	fab2 f282 	clz	r2, r2
 8000ca0:	b152      	cbz	r2, 8000cb8 <__udivmoddi4+0x30>
 8000ca2:	fa01 f302 	lsl.w	r3, r1, r2
 8000ca6:	f1c2 0120 	rsb	r1, r2, #32
 8000caa:	fa20 f101 	lsr.w	r1, r0, r1
 8000cae:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb2:	ea41 0e03 	orr.w	lr, r1, r3
 8000cb6:	4094      	lsls	r4, r2
 8000cb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cbc:	0c21      	lsrs	r1, r4, #16
 8000cbe:	fbbe f6f8 	udiv	r6, lr, r8
 8000cc2:	fa1f f78c 	uxth.w	r7, ip
 8000cc6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cca:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cce:	fb06 f107 	mul.w	r1, r6, r7
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cde:	f080 811f 	bcs.w	8000f20 <__udivmoddi4+0x298>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 811c 	bls.w	8000f20 <__udivmoddi4+0x298>
 8000ce8:	3e02      	subs	r6, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a5b      	subs	r3, r3, r1
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cf4:	fb08 3310 	mls	r3, r8, r0, r3
 8000cf8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cfc:	fb00 f707 	mul.w	r7, r0, r7
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	d90a      	bls.n	8000d1a <__udivmoddi4+0x92>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d0c:	f080 810a 	bcs.w	8000f24 <__udivmoddi4+0x29c>
 8000d10:	42a7      	cmp	r7, r4
 8000d12:	f240 8107 	bls.w	8000f24 <__udivmoddi4+0x29c>
 8000d16:	4464      	add	r4, ip
 8000d18:	3802      	subs	r0, #2
 8000d1a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d1e:	1be4      	subs	r4, r4, r7
 8000d20:	2600      	movs	r6, #0
 8000d22:	b11d      	cbz	r5, 8000d2c <__udivmoddi4+0xa4>
 8000d24:	40d4      	lsrs	r4, r2
 8000d26:	2300      	movs	r3, #0
 8000d28:	e9c5 4300 	strd	r4, r3, [r5]
 8000d2c:	4631      	mov	r1, r6
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d909      	bls.n	8000d4a <__udivmoddi4+0xc2>
 8000d36:	2d00      	cmp	r5, #0
 8000d38:	f000 80ef 	beq.w	8000f1a <__udivmoddi4+0x292>
 8000d3c:	2600      	movs	r6, #0
 8000d3e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d42:	4630      	mov	r0, r6
 8000d44:	4631      	mov	r1, r6
 8000d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d4a:	fab3 f683 	clz	r6, r3
 8000d4e:	2e00      	cmp	r6, #0
 8000d50:	d14a      	bne.n	8000de8 <__udivmoddi4+0x160>
 8000d52:	428b      	cmp	r3, r1
 8000d54:	d302      	bcc.n	8000d5c <__udivmoddi4+0xd4>
 8000d56:	4282      	cmp	r2, r0
 8000d58:	f200 80f9 	bhi.w	8000f4e <__udivmoddi4+0x2c6>
 8000d5c:	1a84      	subs	r4, r0, r2
 8000d5e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d62:	2001      	movs	r0, #1
 8000d64:	469e      	mov	lr, r3
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	d0e0      	beq.n	8000d2c <__udivmoddi4+0xa4>
 8000d6a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d6e:	e7dd      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000d70:	b902      	cbnz	r2, 8000d74 <__udivmoddi4+0xec>
 8000d72:	deff      	udf	#255	; 0xff
 8000d74:	fab2 f282 	clz	r2, r2
 8000d78:	2a00      	cmp	r2, #0
 8000d7a:	f040 8092 	bne.w	8000ea2 <__udivmoddi4+0x21a>
 8000d7e:	eba1 010c 	sub.w	r1, r1, ip
 8000d82:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d86:	fa1f fe8c 	uxth.w	lr, ip
 8000d8a:	2601      	movs	r6, #1
 8000d8c:	0c20      	lsrs	r0, r4, #16
 8000d8e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d92:	fb07 1113 	mls	r1, r7, r3, r1
 8000d96:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d9a:	fb0e f003 	mul.w	r0, lr, r3
 8000d9e:	4288      	cmp	r0, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0x12c>
 8000da2:	eb1c 0101 	adds.w	r1, ip, r1
 8000da6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000daa:	d202      	bcs.n	8000db2 <__udivmoddi4+0x12a>
 8000dac:	4288      	cmp	r0, r1
 8000dae:	f200 80cb 	bhi.w	8000f48 <__udivmoddi4+0x2c0>
 8000db2:	4643      	mov	r3, r8
 8000db4:	1a09      	subs	r1, r1, r0
 8000db6:	b2a4      	uxth	r4, r4
 8000db8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dbc:	fb07 1110 	mls	r1, r7, r0, r1
 8000dc0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000dc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000dc8:	45a6      	cmp	lr, r4
 8000dca:	d908      	bls.n	8000dde <__udivmoddi4+0x156>
 8000dcc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dd0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dd4:	d202      	bcs.n	8000ddc <__udivmoddi4+0x154>
 8000dd6:	45a6      	cmp	lr, r4
 8000dd8:	f200 80bb 	bhi.w	8000f52 <__udivmoddi4+0x2ca>
 8000ddc:	4608      	mov	r0, r1
 8000dde:	eba4 040e 	sub.w	r4, r4, lr
 8000de2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000de6:	e79c      	b.n	8000d22 <__udivmoddi4+0x9a>
 8000de8:	f1c6 0720 	rsb	r7, r6, #32
 8000dec:	40b3      	lsls	r3, r6
 8000dee:	fa22 fc07 	lsr.w	ip, r2, r7
 8000df2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000df6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dfa:	fa01 f306 	lsl.w	r3, r1, r6
 8000dfe:	431c      	orrs	r4, r3
 8000e00:	40f9      	lsrs	r1, r7
 8000e02:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e06:	fa00 f306 	lsl.w	r3, r0, r6
 8000e0a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e0e:	0c20      	lsrs	r0, r4, #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fb09 1118 	mls	r1, r9, r8, r1
 8000e18:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e1c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e20:	4288      	cmp	r0, r1
 8000e22:	fa02 f206 	lsl.w	r2, r2, r6
 8000e26:	d90b      	bls.n	8000e40 <__udivmoddi4+0x1b8>
 8000e28:	eb1c 0101 	adds.w	r1, ip, r1
 8000e2c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e30:	f080 8088 	bcs.w	8000f44 <__udivmoddi4+0x2bc>
 8000e34:	4288      	cmp	r0, r1
 8000e36:	f240 8085 	bls.w	8000f44 <__udivmoddi4+0x2bc>
 8000e3a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e48:	fb09 1110 	mls	r1, r9, r0, r1
 8000e4c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e54:	458e      	cmp	lr, r1
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x1e2>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e60:	d26c      	bcs.n	8000f3c <__udivmoddi4+0x2b4>
 8000e62:	458e      	cmp	lr, r1
 8000e64:	d96a      	bls.n	8000f3c <__udivmoddi4+0x2b4>
 8000e66:	3802      	subs	r0, #2
 8000e68:	4461      	add	r1, ip
 8000e6a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e6e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e72:	eba1 010e 	sub.w	r1, r1, lr
 8000e76:	42a1      	cmp	r1, r4
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	46a6      	mov	lr, r4
 8000e7c:	d356      	bcc.n	8000f2c <__udivmoddi4+0x2a4>
 8000e7e:	d053      	beq.n	8000f28 <__udivmoddi4+0x2a0>
 8000e80:	b15d      	cbz	r5, 8000e9a <__udivmoddi4+0x212>
 8000e82:	ebb3 0208 	subs.w	r2, r3, r8
 8000e86:	eb61 010e 	sbc.w	r1, r1, lr
 8000e8a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e8e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e92:	40f1      	lsrs	r1, r6
 8000e94:	431f      	orrs	r7, r3
 8000e96:	e9c5 7100 	strd	r7, r1, [r5]
 8000e9a:	2600      	movs	r6, #0
 8000e9c:	4631      	mov	r1, r6
 8000e9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ea2:	f1c2 0320 	rsb	r3, r2, #32
 8000ea6:	40d8      	lsrs	r0, r3
 8000ea8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000eac:	fa21 f303 	lsr.w	r3, r1, r3
 8000eb0:	4091      	lsls	r1, r2
 8000eb2:	4301      	orrs	r1, r0
 8000eb4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eb8:	fa1f fe8c 	uxth.w	lr, ip
 8000ebc:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ec0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ec4:	0c0b      	lsrs	r3, r1, #16
 8000ec6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eca:	fb00 f60e 	mul.w	r6, r0, lr
 8000ece:	429e      	cmp	r6, r3
 8000ed0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ed4:	d908      	bls.n	8000ee8 <__udivmoddi4+0x260>
 8000ed6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eda:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ede:	d22f      	bcs.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee0:	429e      	cmp	r6, r3
 8000ee2:	d92d      	bls.n	8000f40 <__udivmoddi4+0x2b8>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4463      	add	r3, ip
 8000ee8:	1b9b      	subs	r3, r3, r6
 8000eea:	b289      	uxth	r1, r1
 8000eec:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ef0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ef4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef8:	fb06 f30e 	mul.w	r3, r6, lr
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d908      	bls.n	8000f12 <__udivmoddi4+0x28a>
 8000f00:	eb1c 0101 	adds.w	r1, ip, r1
 8000f04:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f08:	d216      	bcs.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0a:	428b      	cmp	r3, r1
 8000f0c:	d914      	bls.n	8000f38 <__udivmoddi4+0x2b0>
 8000f0e:	3e02      	subs	r6, #2
 8000f10:	4461      	add	r1, ip
 8000f12:	1ac9      	subs	r1, r1, r3
 8000f14:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f18:	e738      	b.n	8000d8c <__udivmoddi4+0x104>
 8000f1a:	462e      	mov	r6, r5
 8000f1c:	4628      	mov	r0, r5
 8000f1e:	e705      	b.n	8000d2c <__udivmoddi4+0xa4>
 8000f20:	4606      	mov	r6, r0
 8000f22:	e6e3      	b.n	8000cec <__udivmoddi4+0x64>
 8000f24:	4618      	mov	r0, r3
 8000f26:	e6f8      	b.n	8000d1a <__udivmoddi4+0x92>
 8000f28:	454b      	cmp	r3, r9
 8000f2a:	d2a9      	bcs.n	8000e80 <__udivmoddi4+0x1f8>
 8000f2c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f30:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f34:	3801      	subs	r0, #1
 8000f36:	e7a3      	b.n	8000e80 <__udivmoddi4+0x1f8>
 8000f38:	4646      	mov	r6, r8
 8000f3a:	e7ea      	b.n	8000f12 <__udivmoddi4+0x28a>
 8000f3c:	4620      	mov	r0, r4
 8000f3e:	e794      	b.n	8000e6a <__udivmoddi4+0x1e2>
 8000f40:	4640      	mov	r0, r8
 8000f42:	e7d1      	b.n	8000ee8 <__udivmoddi4+0x260>
 8000f44:	46d0      	mov	r8, sl
 8000f46:	e77b      	b.n	8000e40 <__udivmoddi4+0x1b8>
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4461      	add	r1, ip
 8000f4c:	e732      	b.n	8000db4 <__udivmoddi4+0x12c>
 8000f4e:	4630      	mov	r0, r6
 8000f50:	e709      	b.n	8000d66 <__udivmoddi4+0xde>
 8000f52:	4464      	add	r4, ip
 8000f54:	3802      	subs	r0, #2
 8000f56:	e742      	b.n	8000dde <__udivmoddi4+0x156>

08000f58 <__aeabi_idiv0>:
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop

08000f5c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f62:	2300      	movs	r3, #0
 8000f64:	60fb      	str	r3, [r7, #12]
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6a:	4a16      	ldr	r2, [pc, #88]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	6313      	str	r3, [r2, #48]	; 0x30
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	60fb      	str	r3, [r7, #12]
 8000f7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60bb      	str	r3, [r7, #8]
 8000f82:	4b10      	ldr	r3, [pc, #64]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f86:	4a0f      	ldr	r2, [pc, #60]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f96:	60bb      	str	r3, [r7, #8]
 8000f98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	607b      	str	r3, [r7, #4]
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000fa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa2:	4a08      	ldr	r2, [pc, #32]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6313      	str	r3, [r2, #48]	; 0x30
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_GPIO_Init+0x68>)
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	687b      	ldr	r3, [r7, #4]

}
 8000fb6:	bf00      	nop
 8000fb8:	3714      	adds	r7, #20
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop
 8000fc4:	40023800 	.word	0x40023800

08000fc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b0a2      	sub	sp, #136	; 0x88
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fce:	f000 fa21 	bl	8001414 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fd2:	f000 f84f 	bl	8001074 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fd6:	f7ff ffc1 	bl	8000f5c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000fda:	f006 f80b 	bl	8006ff4 <MX_USB_DEVICE_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char logbuf[128];
	  for(float i = 0; i < 2000; i+=0.05){
 8000fde:	f04f 0300 	mov.w	r3, #0
 8000fe2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000fe6:	e02e      	b.n	8001046 <main+0x7e>
		  value = i;
 8000fe8:	4a1f      	ldr	r2, [pc, #124]	; (8001068 <main+0xa0>)
 8000fea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fee:	6013      	str	r3, [r2, #0]
		  sprintf(logbuf, "%.2f\r\n", value);
 8000ff0:	4b1d      	ldr	r3, [pc, #116]	; (8001068 <main+0xa0>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff faaf 	bl	8000558 <__aeabi_f2d>
 8000ffa:	4602      	mov	r2, r0
 8000ffc:	460b      	mov	r3, r1
 8000ffe:	1d38      	adds	r0, r7, #4
 8001000:	491a      	ldr	r1, [pc, #104]	; (800106c <main+0xa4>)
 8001002:	f007 f9ad 	bl	8008360 <siprintf>
		  HAL_Delay(10);
 8001006:	200a      	movs	r0, #10
 8001008:	f000 fa76 	bl	80014f8 <HAL_Delay>
		  CDC_Transmit_FS((uint8_t*)logbuf, strlen(logbuf));
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff f8e6 	bl	80001e0 <strlen>
 8001014:	4603      	mov	r3, r0
 8001016:	b29a      	uxth	r2, r3
 8001018:	1d3b      	adds	r3, r7, #4
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f006 f8a7 	bl	8007170 <CDC_Transmit_FS>
	  for(float i = 0; i < 2000; i+=0.05){
 8001022:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001026:	f7ff fa97 	bl	8000558 <__aeabi_f2d>
 800102a:	a30d      	add	r3, pc, #52	; (adr r3, 8001060 <main+0x98>)
 800102c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001030:	f7ff f934 	bl	800029c <__adddf3>
 8001034:	4602      	mov	r2, r0
 8001036:	460b      	mov	r3, r1
 8001038:	4610      	mov	r0, r2
 800103a:	4619      	mov	r1, r3
 800103c:	f7ff fdbc 	bl	8000bb8 <__aeabi_d2f>
 8001040:	4603      	mov	r3, r0
 8001042:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001046:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800104a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8001070 <main+0xa8>
 800104e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001056:	d4c7      	bmi.n	8000fe8 <main+0x20>
  {
 8001058:	e7c1      	b.n	8000fde <main+0x16>
 800105a:	bf00      	nop
 800105c:	f3af 8000 	nop.w
 8001060:	9999999a 	.word	0x9999999a
 8001064:	3fa99999 	.word	0x3fa99999
 8001068:	200002e8 	.word	0x200002e8
 800106c:	0800a868 	.word	0x0800a868
 8001070:	44fa0000 	.word	0x44fa0000

08001074 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b094      	sub	sp, #80	; 0x50
 8001078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107a:	f107 0320 	add.w	r3, r7, #32
 800107e:	2230      	movs	r2, #48	; 0x30
 8001080:	2100      	movs	r1, #0
 8001082:	4618      	mov	r0, r3
 8001084:	f006 fcfa 	bl	8007a7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001088:	f107 030c 	add.w	r3, r7, #12
 800108c:	2200      	movs	r2, #0
 800108e:	601a      	str	r2, [r3, #0]
 8001090:	605a      	str	r2, [r3, #4]
 8001092:	609a      	str	r2, [r3, #8]
 8001094:	60da      	str	r2, [r3, #12]
 8001096:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001098:	2300      	movs	r3, #0
 800109a:	60bb      	str	r3, [r7, #8]
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <SystemClock_Config+0xd0>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	4a28      	ldr	r2, [pc, #160]	; (8001144 <SystemClock_Config+0xd0>)
 80010a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a6:	6413      	str	r3, [r2, #64]	; 0x40
 80010a8:	4b26      	ldr	r3, [pc, #152]	; (8001144 <SystemClock_Config+0xd0>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
 80010b8:	4b23      	ldr	r3, [pc, #140]	; (8001148 <SystemClock_Config+0xd4>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010c0:	4a21      	ldr	r2, [pc, #132]	; (8001148 <SystemClock_Config+0xd4>)
 80010c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <SystemClock_Config+0xd4>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010d4:	2301      	movs	r3, #1
 80010d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010de:	2302      	movs	r3, #2
 80010e0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80010e8:	2319      	movs	r3, #25
 80010ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010f2:	2304      	movs	r3, #4
 80010f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80010f6:	2307      	movs	r3, #7
 80010f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 ff32 	bl	8002f68 <HAL_RCC_OscConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800110a:	f000 f81f 	bl	800114c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110e:	230f      	movs	r3, #15
 8001110:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001112:	2302      	movs	r3, #2
 8001114:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800111a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	2102      	movs	r1, #2
 800112a:	4618      	mov	r0, r3
 800112c:	f002 f994 	bl	8003458 <HAL_RCC_ClockConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001136:	f000 f809 	bl	800114c <Error_Handler>
  }
}
 800113a:	bf00      	nop
 800113c:	3750      	adds	r7, #80	; 0x50
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40007000 	.word	0x40007000

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
}
 8001152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001154:	e7fe      	b.n	8001154 <Error_Handler+0x8>
	...

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_MspInit+0x4c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <HAL_MspInit+0x4c>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <HAL_MspInit+0x4c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_MspInit+0x4c>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <HAL_MspInit+0x4c>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001188:	6413      	str	r3, [r2, #64]	; 0x40
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_MspInit+0x4c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40023800 	.word	0x40023800

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011ac:	e7fe      	b.n	80011ac <NMI_Handler+0x4>

080011ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <HardFault_Handler+0x4>

080011b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <MemManage_Handler+0x4>

080011ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <BusFault_Handler+0x4>

080011c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <UsageFault_Handler+0x4>

080011c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f4:	f000 f960 	bl	80014b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}

080011fc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <OTG_FS_IRQHandler+0x10>)
 8001202:	f000 fd83 	bl	8001d0c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200017d4 	.word	0x200017d4

08001210 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
	return 1;
 8001214:	2301      	movs	r3, #1
}
 8001216:	4618      	mov	r0, r3
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <_kill>:

int _kill(int pid, int sig)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800122a:	f006 fbfd 	bl	8007a28 <__errno>
 800122e:	4603      	mov	r3, r0
 8001230:	2216      	movs	r2, #22
 8001232:	601a      	str	r2, [r3, #0]
	return -1;
 8001234:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001238:	4618      	mov	r0, r3
 800123a:	3708      	adds	r7, #8
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <_exit>:

void _exit (int status)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001248:	f04f 31ff 	mov.w	r1, #4294967295
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ffe7 	bl	8001220 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001252:	e7fe      	b.n	8001252 <_exit+0x12>

08001254 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b086      	sub	sp, #24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	e00a      	b.n	800127c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001266:	f3af 8000 	nop.w
 800126a:	4601      	mov	r1, r0
 800126c:	68bb      	ldr	r3, [r7, #8]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	60ba      	str	r2, [r7, #8]
 8001272:	b2ca      	uxtb	r2, r1
 8001274:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	dbf0      	blt.n	8001266 <_read+0x12>
	}

return len;
 8001284:	687b      	ldr	r3, [r7, #4]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800128e:	b580      	push	{r7, lr}
 8001290:	b086      	sub	sp, #24
 8001292:	af00      	add	r7, sp, #0
 8001294:	60f8      	str	r0, [r7, #12]
 8001296:	60b9      	str	r1, [r7, #8]
 8001298:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800129a:	2300      	movs	r3, #0
 800129c:	617b      	str	r3, [r7, #20]
 800129e:	e009      	b.n	80012b4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	60ba      	str	r2, [r7, #8]
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4618      	mov	r0, r3
 80012aa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ae:	697b      	ldr	r3, [r7, #20]
 80012b0:	3301      	adds	r3, #1
 80012b2:	617b      	str	r3, [r7, #20]
 80012b4:	697a      	ldr	r2, [r7, #20]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dbf1      	blt.n	80012a0 <_write+0x12>
	}
	return len;
 80012bc:	687b      	ldr	r3, [r7, #4]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3718      	adds	r7, #24
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <_close>:

int _close(int file)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
	return -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr

080012de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012de:	b480      	push	{r7}
 80012e0:	b083      	sub	sp, #12
 80012e2:	af00      	add	r7, sp, #0
 80012e4:	6078      	str	r0, [r7, #4]
 80012e6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012ee:	605a      	str	r2, [r3, #4]
	return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <_isatty>:

int _isatty(int file)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
	return 1;
 8001306:	2301      	movs	r3, #1
}
 8001308:	4618      	mov	r0, r3
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001314:	b480      	push	{r7}
 8001316:	b085      	sub	sp, #20
 8001318:	af00      	add	r7, sp, #0
 800131a:	60f8      	str	r0, [r7, #12]
 800131c:	60b9      	str	r1, [r7, #8]
 800131e:	607a      	str	r2, [r7, #4]
	return 0;
 8001320:	2300      	movs	r3, #0
}
 8001322:	4618      	mov	r0, r3
 8001324:	3714      	adds	r7, #20
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001338:	4a14      	ldr	r2, [pc, #80]	; (800138c <_sbrk+0x5c>)
 800133a:	4b15      	ldr	r3, [pc, #84]	; (8001390 <_sbrk+0x60>)
 800133c:	1ad3      	subs	r3, r2, r3
 800133e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001344:	4b13      	ldr	r3, [pc, #76]	; (8001394 <_sbrk+0x64>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d102      	bne.n	8001352 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <_sbrk+0x64>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <_sbrk+0x68>)
 8001350:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <_sbrk+0x64>)
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4413      	add	r3, r2
 800135a:	693a      	ldr	r2, [r7, #16]
 800135c:	429a      	cmp	r2, r3
 800135e:	d207      	bcs.n	8001370 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001360:	f006 fb62 	bl	8007a28 <__errno>
 8001364:	4603      	mov	r3, r0
 8001366:	220c      	movs	r2, #12
 8001368:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800136a:	f04f 33ff 	mov.w	r3, #4294967295
 800136e:	e009      	b.n	8001384 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001370:	4b08      	ldr	r3, [pc, #32]	; (8001394 <_sbrk+0x64>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001376:	4b07      	ldr	r3, [pc, #28]	; (8001394 <_sbrk+0x64>)
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	4413      	add	r3, r2
 800137e:	4a05      	ldr	r2, [pc, #20]	; (8001394 <_sbrk+0x64>)
 8001380:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001382:	68fb      	ldr	r3, [r7, #12]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	20018000 	.word	0x20018000
 8001390:	00000400 	.word	0x00000400
 8001394:	200002ec 	.word	0x200002ec
 8001398:	20001f10 	.word	0x20001f10

0800139c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013a0:	4b06      	ldr	r3, [pc, #24]	; (80013bc <SystemInit+0x20>)
 80013a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a6:	4a05      	ldr	r2, [pc, #20]	; (80013bc <SystemInit+0x20>)
 80013a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	e000ed00 	.word	0xe000ed00

080013c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80013c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013c4:	480d      	ldr	r0, [pc, #52]	; (80013fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013c6:	490e      	ldr	r1, [pc, #56]	; (8001400 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013c8:	4a0e      	ldr	r2, [pc, #56]	; (8001404 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013cc:	e002      	b.n	80013d4 <LoopCopyDataInit>

080013ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013d2:	3304      	adds	r3, #4

080013d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013d8:	d3f9      	bcc.n	80013ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013da:	4a0b      	ldr	r2, [pc, #44]	; (8001408 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013dc:	4c0b      	ldr	r4, [pc, #44]	; (800140c <LoopFillZerobss+0x26>)
  movs r3, #0
 80013de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013e0:	e001      	b.n	80013e6 <LoopFillZerobss>

080013e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013e4:	3204      	adds	r2, #4

080013e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013e8:	d3fb      	bcc.n	80013e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013ea:	f7ff ffd7 	bl	800139c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013ee:	f006 fb21 	bl	8007a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013f2:	f7ff fde9 	bl	8000fc8 <main>
  bx  lr    
 80013f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80013f8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80013fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001400:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 8001404:	0800acb4 	.word	0x0800acb4
  ldr r2, =_sbss
 8001408:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 800140c:	20001f10 	.word	0x20001f10

08001410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001410:	e7fe      	b.n	8001410 <ADC_IRQHandler>
	...

08001414 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001418:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <HAL_Init+0x40>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0d      	ldr	r2, [pc, #52]	; (8001454 <HAL_Init+0x40>)
 800141e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001422:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_Init+0x40>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <HAL_Init+0x40>)
 800142a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_Init+0x40>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a07      	ldr	r2, [pc, #28]	; (8001454 <HAL_Init+0x40>)
 8001436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800143a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800143c:	2003      	movs	r0, #3
 800143e:	f000 f94f 	bl	80016e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001442:	200f      	movs	r0, #15
 8001444:	f000 f808 	bl	8001458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001448:	f7ff fe86 	bl	8001158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	40023c00 	.word	0x40023c00

08001458 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001460:	4b12      	ldr	r3, [pc, #72]	; (80014ac <HAL_InitTick+0x54>)
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <HAL_InitTick+0x58>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	4619      	mov	r1, r3
 800146a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800146e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001472:	fbb2 f3f3 	udiv	r3, r2, r3
 8001476:	4618      	mov	r0, r3
 8001478:	f000 f967 	bl	800174a <HAL_SYSTICK_Config>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001482:	2301      	movs	r3, #1
 8001484:	e00e      	b.n	80014a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b0f      	cmp	r3, #15
 800148a:	d80a      	bhi.n	80014a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800148c:	2200      	movs	r2, #0
 800148e:	6879      	ldr	r1, [r7, #4]
 8001490:	f04f 30ff 	mov.w	r0, #4294967295
 8001494:	f000 f92f 	bl	80016f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001498:	4a06      	ldr	r2, [pc, #24]	; (80014b4 <HAL_InitTick+0x5c>)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800149e:	2300      	movs	r3, #0
 80014a0:	e000      	b.n	80014a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80014a2:	2301      	movs	r3, #1
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000008 	.word	0x20000008
 80014b4:	20000004 	.word	0x20000004

080014b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_IncTick+0x20>)
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	461a      	mov	r2, r3
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_IncTick+0x24>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4413      	add	r3, r2
 80014c8:	4a04      	ldr	r2, [pc, #16]	; (80014dc <HAL_IncTick+0x24>)
 80014ca:	6013      	str	r3, [r2, #0]
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000008 	.word	0x20000008
 80014dc:	200002f0 	.word	0x200002f0

080014e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	af00      	add	r7, sp, #0
  return uwTick;
 80014e4:	4b03      	ldr	r3, [pc, #12]	; (80014f4 <HAL_GetTick+0x14>)
 80014e6:	681b      	ldr	r3, [r3, #0]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	200002f0 	.word	0x200002f0

080014f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001500:	f7ff ffee 	bl	80014e0 <HAL_GetTick>
 8001504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001510:	d005      	beq.n	800151e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001512:	4b0a      	ldr	r3, [pc, #40]	; (800153c <HAL_Delay+0x44>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	461a      	mov	r2, r3
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	4413      	add	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800151e:	bf00      	nop
 8001520:	f7ff ffde 	bl	80014e0 <HAL_GetTick>
 8001524:	4602      	mov	r2, r0
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	68fa      	ldr	r2, [r7, #12]
 800152c:	429a      	cmp	r2, r3
 800152e:	d8f7      	bhi.n	8001520 <HAL_Delay+0x28>
  {
  }
}
 8001530:	bf00      	nop
 8001532:	bf00      	nop
 8001534:	3710      	adds	r7, #16
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20000008 	.word	0x20000008

08001540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800155c:	4013      	ands	r3, r2
 800155e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001564:	68bb      	ldr	r3, [r7, #8]
 8001566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001568:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800156c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001572:	4a04      	ldr	r2, [pc, #16]	; (8001584 <__NVIC_SetPriorityGrouping+0x44>)
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	60d3      	str	r3, [r2, #12]
}
 8001578:	bf00      	nop
 800157a:	3714      	adds	r7, #20
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <__NVIC_GetPriorityGrouping+0x18>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	0a1b      	lsrs	r3, r3, #8
 8001592:	f003 0307 	and.w	r3, r3, #7
}
 8001596:	4618      	mov	r0, r3
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	4603      	mov	r3, r0
 80015ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	db0b      	blt.n	80015ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015b6:	79fb      	ldrb	r3, [r7, #7]
 80015b8:	f003 021f 	and.w	r2, r3, #31
 80015bc:	4907      	ldr	r1, [pc, #28]	; (80015dc <__NVIC_EnableIRQ+0x38>)
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	095b      	lsrs	r3, r3, #5
 80015c4:	2001      	movs	r0, #1
 80015c6:	fa00 f202 	lsl.w	r2, r0, r2
 80015ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015ce:	bf00      	nop
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	e000e100 	.word	0xe000e100

080015e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	6039      	str	r1, [r7, #0]
 80015ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	db0a      	blt.n	800160a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	b2da      	uxtb	r2, r3
 80015f8:	490c      	ldr	r1, [pc, #48]	; (800162c <__NVIC_SetPriority+0x4c>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	0112      	lsls	r2, r2, #4
 8001600:	b2d2      	uxtb	r2, r2
 8001602:	440b      	add	r3, r1
 8001604:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001608:	e00a      	b.n	8001620 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2da      	uxtb	r2, r3
 800160e:	4908      	ldr	r1, [pc, #32]	; (8001630 <__NVIC_SetPriority+0x50>)
 8001610:	79fb      	ldrb	r3, [r7, #7]
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	3b04      	subs	r3, #4
 8001618:	0112      	lsls	r2, r2, #4
 800161a:	b2d2      	uxtb	r2, r2
 800161c:	440b      	add	r3, r1
 800161e:	761a      	strb	r2, [r3, #24]
}
 8001620:	bf00      	nop
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	e000e100 	.word	0xe000e100
 8001630:	e000ed00 	.word	0xe000ed00

08001634 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001634:	b480      	push	{r7}
 8001636:	b089      	sub	sp, #36	; 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	60f8      	str	r0, [r7, #12]
 800163c:	60b9      	str	r1, [r7, #8]
 800163e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f003 0307 	and.w	r3, r3, #7
 8001646:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f1c3 0307 	rsb	r3, r3, #7
 800164e:	2b04      	cmp	r3, #4
 8001650:	bf28      	it	cs
 8001652:	2304      	movcs	r3, #4
 8001654:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001656:	69fb      	ldr	r3, [r7, #28]
 8001658:	3304      	adds	r3, #4
 800165a:	2b06      	cmp	r3, #6
 800165c:	d902      	bls.n	8001664 <NVIC_EncodePriority+0x30>
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	3b03      	subs	r3, #3
 8001662:	e000      	b.n	8001666 <NVIC_EncodePriority+0x32>
 8001664:	2300      	movs	r3, #0
 8001666:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001668:	f04f 32ff 	mov.w	r2, #4294967295
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	fa02 f303 	lsl.w	r3, r2, r3
 8001672:	43da      	mvns	r2, r3
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	401a      	ands	r2, r3
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800167c:	f04f 31ff 	mov.w	r1, #4294967295
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	fa01 f303 	lsl.w	r3, r1, r3
 8001686:	43d9      	mvns	r1, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	4313      	orrs	r3, r2
         );
}
 800168e:	4618      	mov	r0, r3
 8001690:	3724      	adds	r7, #36	; 0x24
 8001692:	46bd      	mov	sp, r7
 8001694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001698:	4770      	bx	lr
	...

0800169c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	3b01      	subs	r3, #1
 80016a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016ac:	d301      	bcc.n	80016b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ae:	2301      	movs	r3, #1
 80016b0:	e00f      	b.n	80016d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016b2:	4a0a      	ldr	r2, [pc, #40]	; (80016dc <SysTick_Config+0x40>)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	3b01      	subs	r3, #1
 80016b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016ba:	210f      	movs	r1, #15
 80016bc:	f04f 30ff 	mov.w	r0, #4294967295
 80016c0:	f7ff ff8e 	bl	80015e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016c4:	4b05      	ldr	r3, [pc, #20]	; (80016dc <SysTick_Config+0x40>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ca:	4b04      	ldr	r3, [pc, #16]	; (80016dc <SysTick_Config+0x40>)
 80016cc:	2207      	movs	r2, #7
 80016ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016d0:	2300      	movs	r3, #0
}
 80016d2:	4618      	mov	r0, r3
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	e000e010 	.word	0xe000e010

080016e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f7ff ff29 	bl	8001540 <__NVIC_SetPriorityGrouping>
}
 80016ee:	bf00      	nop
 80016f0:	3708      	adds	r7, #8
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b086      	sub	sp, #24
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	60b9      	str	r1, [r7, #8]
 8001700:	607a      	str	r2, [r7, #4]
 8001702:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001708:	f7ff ff3e 	bl	8001588 <__NVIC_GetPriorityGrouping>
 800170c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	68b9      	ldr	r1, [r7, #8]
 8001712:	6978      	ldr	r0, [r7, #20]
 8001714:	f7ff ff8e 	bl	8001634 <NVIC_EncodePriority>
 8001718:	4602      	mov	r2, r0
 800171a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f7ff ff5d 	bl	80015e0 <__NVIC_SetPriority>
}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}

0800172e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172e:	b580      	push	{r7, lr}
 8001730:	b082      	sub	sp, #8
 8001732:	af00      	add	r7, sp, #0
 8001734:	4603      	mov	r3, r0
 8001736:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001738:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173c:	4618      	mov	r0, r3
 800173e:	f7ff ff31 	bl	80015a4 <__NVIC_EnableIRQ>
}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}

0800174a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800174a:	b580      	push	{r7, lr}
 800174c:	b082      	sub	sp, #8
 800174e:	af00      	add	r7, sp, #0
 8001750:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001752:	6878      	ldr	r0, [r7, #4]
 8001754:	f7ff ffa2 	bl	800169c <SysTick_Config>
 8001758:	4603      	mov	r3, r0
}
 800175a:	4618      	mov	r0, r3
 800175c:	3708      	adds	r7, #8
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
	...

08001764 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001764:	b480      	push	{r7}
 8001766:	b089      	sub	sp, #36	; 0x24
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
 800176c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001772:	2300      	movs	r3, #0
 8001774:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
 800177e:	e159      	b.n	8001a34 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001780:	2201      	movs	r2, #1
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	697a      	ldr	r2, [r7, #20]
 8001790:	4013      	ands	r3, r2
 8001792:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	429a      	cmp	r2, r3
 800179a:	f040 8148 	bne.w	8001a2e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f003 0303 	and.w	r3, r3, #3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d005      	beq.n	80017b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d130      	bne.n	8001818 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	2203      	movs	r2, #3
 80017c2:	fa02 f303 	lsl.w	r3, r2, r3
 80017c6:	43db      	mvns	r3, r3
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	4013      	ands	r3, r2
 80017cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	68da      	ldr	r2, [r3, #12]
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	005b      	lsls	r3, r3, #1
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ec:	2201      	movs	r2, #1
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	091b      	lsrs	r3, r3, #4
 8001802:	f003 0201 	and.w	r2, r3, #1
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69ba      	ldr	r2, [r7, #24]
 8001816:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f003 0303 	and.w	r3, r3, #3
 8001820:	2b03      	cmp	r3, #3
 8001822:	d017      	beq.n	8001854 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68db      	ldr	r3, [r3, #12]
 8001828:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	005b      	lsls	r3, r3, #1
 800182e:	2203      	movs	r2, #3
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43db      	mvns	r3, r3
 8001836:	69ba      	ldr	r2, [r7, #24]
 8001838:	4013      	ands	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	689a      	ldr	r2, [r3, #8]
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f003 0303 	and.w	r3, r3, #3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d123      	bne.n	80018a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	08da      	lsrs	r2, r3, #3
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3208      	adds	r2, #8
 8001868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f003 0307 	and.w	r3, r3, #7
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	220f      	movs	r2, #15
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	4013      	ands	r3, r2
 8001882:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	691a      	ldr	r2, [r3, #16]
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	fa02 f303 	lsl.w	r3, r2, r3
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	4313      	orrs	r3, r2
 8001898:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	08da      	lsrs	r2, r3, #3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	3208      	adds	r2, #8
 80018a2:	69b9      	ldr	r1, [r7, #24]
 80018a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	005b      	lsls	r3, r3, #1
 80018b2:	2203      	movs	r2, #3
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	43db      	mvns	r3, r3
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	4013      	ands	r3, r2
 80018be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0203 	and.w	r2, r3, #3
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	005b      	lsls	r3, r3, #1
 80018cc:	fa02 f303 	lsl.w	r3, r2, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4313      	orrs	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	f000 80a2 	beq.w	8001a2e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
 80018ee:	4b57      	ldr	r3, [pc, #348]	; (8001a4c <HAL_GPIO_Init+0x2e8>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	4a56      	ldr	r2, [pc, #344]	; (8001a4c <HAL_GPIO_Init+0x2e8>)
 80018f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018f8:	6453      	str	r3, [r2, #68]	; 0x44
 80018fa:	4b54      	ldr	r3, [pc, #336]	; (8001a4c <HAL_GPIO_Init+0x2e8>)
 80018fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001906:	4a52      	ldr	r2, [pc, #328]	; (8001a50 <HAL_GPIO_Init+0x2ec>)
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	089b      	lsrs	r3, r3, #2
 800190c:	3302      	adds	r3, #2
 800190e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001912:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	f003 0303 	and.w	r3, r3, #3
 800191a:	009b      	lsls	r3, r3, #2
 800191c:	220f      	movs	r2, #15
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a49      	ldr	r2, [pc, #292]	; (8001a54 <HAL_GPIO_Init+0x2f0>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d019      	beq.n	8001966 <HAL_GPIO_Init+0x202>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	4a48      	ldr	r2, [pc, #288]	; (8001a58 <HAL_GPIO_Init+0x2f4>)
 8001936:	4293      	cmp	r3, r2
 8001938:	d013      	beq.n	8001962 <HAL_GPIO_Init+0x1fe>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a47      	ldr	r2, [pc, #284]	; (8001a5c <HAL_GPIO_Init+0x2f8>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d00d      	beq.n	800195e <HAL_GPIO_Init+0x1fa>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a46      	ldr	r2, [pc, #280]	; (8001a60 <HAL_GPIO_Init+0x2fc>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d007      	beq.n	800195a <HAL_GPIO_Init+0x1f6>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a45      	ldr	r2, [pc, #276]	; (8001a64 <HAL_GPIO_Init+0x300>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d101      	bne.n	8001956 <HAL_GPIO_Init+0x1f2>
 8001952:	2304      	movs	r3, #4
 8001954:	e008      	b.n	8001968 <HAL_GPIO_Init+0x204>
 8001956:	2307      	movs	r3, #7
 8001958:	e006      	b.n	8001968 <HAL_GPIO_Init+0x204>
 800195a:	2303      	movs	r3, #3
 800195c:	e004      	b.n	8001968 <HAL_GPIO_Init+0x204>
 800195e:	2302      	movs	r3, #2
 8001960:	e002      	b.n	8001968 <HAL_GPIO_Init+0x204>
 8001962:	2301      	movs	r3, #1
 8001964:	e000      	b.n	8001968 <HAL_GPIO_Init+0x204>
 8001966:	2300      	movs	r3, #0
 8001968:	69fa      	ldr	r2, [r7, #28]
 800196a:	f002 0203 	and.w	r2, r2, #3
 800196e:	0092      	lsls	r2, r2, #2
 8001970:	4093      	lsls	r3, r2
 8001972:	69ba      	ldr	r2, [r7, #24]
 8001974:	4313      	orrs	r3, r2
 8001976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001978:	4935      	ldr	r1, [pc, #212]	; (8001a50 <HAL_GPIO_Init+0x2ec>)
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	089b      	lsrs	r3, r3, #2
 800197e:	3302      	adds	r3, #2
 8001980:	69ba      	ldr	r2, [r7, #24]
 8001982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001986:	4b38      	ldr	r3, [pc, #224]	; (8001a68 <HAL_GPIO_Init+0x304>)
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d003      	beq.n	80019aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019aa:	4a2f      	ldr	r2, [pc, #188]	; (8001a68 <HAL_GPIO_Init+0x304>)
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019b0:	4b2d      	ldr	r3, [pc, #180]	; (8001a68 <HAL_GPIO_Init+0x304>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	43db      	mvns	r3, r3
 80019ba:	69ba      	ldr	r2, [r7, #24]
 80019bc:	4013      	ands	r3, r2
 80019be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d003      	beq.n	80019d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019cc:	69ba      	ldr	r2, [r7, #24]
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019d4:	4a24      	ldr	r2, [pc, #144]	; (8001a68 <HAL_GPIO_Init+0x304>)
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019da:	4b23      	ldr	r3, [pc, #140]	; (8001a68 <HAL_GPIO_Init+0x304>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	43db      	mvns	r3, r3
 80019e4:	69ba      	ldr	r2, [r7, #24]
 80019e6:	4013      	ands	r3, r2
 80019e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ea:	683b      	ldr	r3, [r7, #0]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019f6:	69ba      	ldr	r2, [r7, #24]
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019fe:	4a1a      	ldr	r2, [pc, #104]	; (8001a68 <HAL_GPIO_Init+0x304>)
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_GPIO_Init+0x304>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a0a:	693b      	ldr	r3, [r7, #16]
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	69ba      	ldr	r2, [r7, #24]
 8001a10:	4013      	ands	r3, r2
 8001a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a20:	69ba      	ldr	r2, [r7, #24]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a28:	4a0f      	ldr	r2, [pc, #60]	; (8001a68 <HAL_GPIO_Init+0x304>)
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	3301      	adds	r3, #1
 8001a32:	61fb      	str	r3, [r7, #28]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	2b0f      	cmp	r3, #15
 8001a38:	f67f aea2 	bls.w	8001780 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a3c:	bf00      	nop
 8001a3e:	bf00      	nop
 8001a40:	3724      	adds	r7, #36	; 0x24
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40013800 	.word	0x40013800
 8001a54:	40020000 	.word	0x40020000
 8001a58:	40020400 	.word	0x40020400
 8001a5c:	40020800 	.word	0x40020800
 8001a60:	40020c00 	.word	0x40020c00
 8001a64:	40021000 	.word	0x40021000
 8001a68:	40013c00 	.word	0x40013c00

08001a6c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a6e:	b08f      	sub	sp, #60	; 0x3c
 8001a70:	af0a      	add	r7, sp, #40	; 0x28
 8001a72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d101      	bne.n	8001a7e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e10f      	b.n	8001c9e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d106      	bne.n	8001a9e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f005 fcb1 	bl	8007400 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001aa6:	68bb      	ldr	r3, [r7, #8]
 8001aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d102      	bne.n	8001ab8 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4618      	mov	r0, r3
 8001abe:	f001 ff98 	bl	80039f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	687e      	ldr	r6, [r7, #4]
 8001aca:	466d      	mov	r5, sp
 8001acc:	f106 0410 	add.w	r4, r6, #16
 8001ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ad8:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001adc:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ae0:	1d33      	adds	r3, r6, #4
 8001ae2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ae4:	6838      	ldr	r0, [r7, #0]
 8001ae6:	f001 fe6f 	bl	80037c8 <USB_CoreInit>
 8001aea:	4603      	mov	r3, r0
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d005      	beq.n	8001afc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2202      	movs	r2, #2
 8001af4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0d0      	b.n	8001c9e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2100      	movs	r1, #0
 8001b02:	4618      	mov	r0, r3
 8001b04:	f001 ff86 	bl	8003a14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b08:	2300      	movs	r3, #0
 8001b0a:	73fb      	strb	r3, [r7, #15]
 8001b0c:	e04a      	b.n	8001ba4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b0e:	7bfa      	ldrb	r2, [r7, #15]
 8001b10:	6879      	ldr	r1, [r7, #4]
 8001b12:	4613      	mov	r3, r2
 8001b14:	00db      	lsls	r3, r3, #3
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	333d      	adds	r3, #61	; 0x3d
 8001b1e:	2201      	movs	r2, #1
 8001b20:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b22:	7bfa      	ldrb	r2, [r7, #15]
 8001b24:	6879      	ldr	r1, [r7, #4]
 8001b26:	4613      	mov	r3, r2
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	009b      	lsls	r3, r3, #2
 8001b2e:	440b      	add	r3, r1
 8001b30:	333c      	adds	r3, #60	; 0x3c
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b36:	7bfa      	ldrb	r2, [r7, #15]
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	b298      	uxth	r0, r3
 8001b3c:	6879      	ldr	r1, [r7, #4]
 8001b3e:	4613      	mov	r3, r2
 8001b40:	00db      	lsls	r3, r3, #3
 8001b42:	4413      	add	r3, r2
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	440b      	add	r3, r1
 8001b48:	3344      	adds	r3, #68	; 0x44
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b4e:	7bfa      	ldrb	r2, [r7, #15]
 8001b50:	6879      	ldr	r1, [r7, #4]
 8001b52:	4613      	mov	r3, r2
 8001b54:	00db      	lsls	r3, r3, #3
 8001b56:	4413      	add	r3, r2
 8001b58:	009b      	lsls	r3, r3, #2
 8001b5a:	440b      	add	r3, r1
 8001b5c:	3340      	adds	r3, #64	; 0x40
 8001b5e:	2200      	movs	r2, #0
 8001b60:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b62:	7bfa      	ldrb	r2, [r7, #15]
 8001b64:	6879      	ldr	r1, [r7, #4]
 8001b66:	4613      	mov	r3, r2
 8001b68:	00db      	lsls	r3, r3, #3
 8001b6a:	4413      	add	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	440b      	add	r3, r1
 8001b70:	3348      	adds	r3, #72	; 0x48
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	6879      	ldr	r1, [r7, #4]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	00db      	lsls	r3, r3, #3
 8001b7e:	4413      	add	r3, r2
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	440b      	add	r3, r1
 8001b84:	334c      	adds	r3, #76	; 0x4c
 8001b86:	2200      	movs	r2, #0
 8001b88:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b8a:	7bfa      	ldrb	r2, [r7, #15]
 8001b8c:	6879      	ldr	r1, [r7, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	440b      	add	r3, r1
 8001b98:	3354      	adds	r3, #84	; 0x54
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	7bfa      	ldrb	r2, [r7, #15]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	429a      	cmp	r2, r3
 8001bac:	d3af      	bcc.n	8001b0e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	73fb      	strb	r3, [r7, #15]
 8001bb2:	e044      	b.n	8001c3e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bb4:	7bfa      	ldrb	r2, [r7, #15]
 8001bb6:	6879      	ldr	r1, [r7, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	00db      	lsls	r3, r3, #3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bca:	7bfa      	ldrb	r2, [r7, #15]
 8001bcc:	6879      	ldr	r1, [r7, #4]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	00db      	lsls	r3, r3, #3
 8001bd2:	4413      	add	r3, r2
 8001bd4:	009b      	lsls	r3, r3, #2
 8001bd6:	440b      	add	r3, r1
 8001bd8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001be0:	7bfa      	ldrb	r2, [r7, #15]
 8001be2:	6879      	ldr	r1, [r7, #4]
 8001be4:	4613      	mov	r3, r2
 8001be6:	00db      	lsls	r3, r3, #3
 8001be8:	4413      	add	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001bf6:	7bfa      	ldrb	r2, [r7, #15]
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	00db      	lsls	r3, r3, #3
 8001bfe:	4413      	add	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	440b      	add	r3, r1
 8001c04:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001c08:	2200      	movs	r2, #0
 8001c0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c0c:	7bfa      	ldrb	r2, [r7, #15]
 8001c0e:	6879      	ldr	r1, [r7, #4]
 8001c10:	4613      	mov	r3, r2
 8001c12:	00db      	lsls	r3, r3, #3
 8001c14:	4413      	add	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	440b      	add	r3, r1
 8001c1a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c22:	7bfa      	ldrb	r2, [r7, #15]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	00db      	lsls	r3, r3, #3
 8001c2a:	4413      	add	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	73fb      	strb	r3, [r7, #15]
 8001c3e:	7bfa      	ldrb	r2, [r7, #15]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d3b5      	bcc.n	8001bb4 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	687e      	ldr	r6, [r7, #4]
 8001c50:	466d      	mov	r5, sp
 8001c52:	f106 0410 	add.w	r4, r6, #16
 8001c56:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c58:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c5e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c62:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c66:	1d33      	adds	r3, r6, #4
 8001c68:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c6a:	6838      	ldr	r0, [r7, #0]
 8001c6c:	f001 ff1e 	bl	8003aac <USB_DevInit>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d005      	beq.n	8001c82 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2202      	movs	r2, #2
 8001c7a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e00d      	b.n	8001c9e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 f86d 	bl	8004d76 <USB_DevDisconnect>

  return HAL_OK;
 8001c9c:	2300      	movs	r3, #0
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3714      	adds	r7, #20
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ca6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b084      	sub	sp, #16
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_PCD_Start+0x1c>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e020      	b.n	8001d04 <HAL_PCD_Start+0x5e>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cce:	2b01      	cmp	r3, #1
 8001cd0:	d109      	bne.n	8001ce6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d005      	beq.n	8001ce6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f001 fe70 	bl	80039d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	f003 f81d 	bl	8004d34 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}

08001d0c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b08d      	sub	sp, #52	; 0x34
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d1a:	6a3b      	ldr	r3, [r7, #32]
 8001d1c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f003 f8db 	bl	8004ede <USB_GetMode>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f040 848a 	bne.w	8002644 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f003 f83f 	bl	8004db8 <USB_ReadInterrupts>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	f000 8480 	beq.w	8002642 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	0a1b      	lsrs	r3, r3, #8
 8001d4c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 f82c 	bl	8004db8 <USB_ReadInterrupts>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d107      	bne.n	8001d7a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	695a      	ldr	r2, [r3, #20]
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f002 0202 	and.w	r2, r2, #2
 8001d78:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f003 f81a 	bl	8004db8 <USB_ReadInterrupts>
 8001d84:	4603      	mov	r3, r0
 8001d86:	f003 0310 	and.w	r3, r3, #16
 8001d8a:	2b10      	cmp	r3, #16
 8001d8c:	d161      	bne.n	8001e52 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	699a      	ldr	r2, [r3, #24]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0210 	bic.w	r2, r2, #16
 8001d9c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
 8001da0:	6a1b      	ldr	r3, [r3, #32]
 8001da2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	f003 020f 	and.w	r2, r3, #15
 8001daa:	4613      	mov	r3, r2
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4413      	add	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	3304      	adds	r3, #4
 8001dbc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	0c5b      	lsrs	r3, r3, #17
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d124      	bne.n	8001e14 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d035      	beq.n	8001e42 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001dda:	69bb      	ldr	r3, [r7, #24]
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001de0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	461a      	mov	r2, r3
 8001de8:	6a38      	ldr	r0, [r7, #32]
 8001dea:	f002 fe51 	bl	8004a90 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	691a      	ldr	r2, [r3, #16]
 8001df2:	69bb      	ldr	r3, [r7, #24]
 8001df4:	091b      	lsrs	r3, r3, #4
 8001df6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dfa:	441a      	add	r2, r3
 8001dfc:	697b      	ldr	r3, [r7, #20]
 8001dfe:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	6a1a      	ldr	r2, [r3, #32]
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	091b      	lsrs	r3, r3, #4
 8001e08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e0c:	441a      	add	r2, r3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	621a      	str	r2, [r3, #32]
 8001e12:	e016      	b.n	8001e42 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	0c5b      	lsrs	r3, r3, #17
 8001e18:	f003 030f 	and.w	r3, r3, #15
 8001e1c:	2b06      	cmp	r3, #6
 8001e1e:	d110      	bne.n	8001e42 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e26:	2208      	movs	r2, #8
 8001e28:	4619      	mov	r1, r3
 8001e2a:	6a38      	ldr	r0, [r7, #32]
 8001e2c:	f002 fe30 	bl	8004a90 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	6a1a      	ldr	r2, [r3, #32]
 8001e34:	69bb      	ldr	r3, [r7, #24]
 8001e36:	091b      	lsrs	r3, r3, #4
 8001e38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e3c:	441a      	add	r2, r3
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0210 	orr.w	r2, r2, #16
 8001e50:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f002 ffae 	bl	8004db8 <USB_ReadInterrupts>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e62:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e66:	f040 80a7 	bne.w	8001fb8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4618      	mov	r0, r3
 8001e74:	f002 ffb3 	bl	8004dde <USB_ReadDevAllOutEpInterrupt>
 8001e78:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001e7a:	e099      	b.n	8001fb0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7e:	f003 0301 	and.w	r3, r3, #1
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	f000 808e 	beq.w	8001fa4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e8e:	b2d2      	uxtb	r2, r2
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 ffd7 	bl	8004e46 <USB_ReadDevOutEPInterrupt>
 8001e98:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d00c      	beq.n	8001ebe <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea6:	015a      	lsls	r2, r3, #5
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	4413      	add	r3, r2
 8001eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001eb6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 fec3 	bl	8002c44 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	f003 0308 	and.w	r3, r3, #8
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d00c      	beq.n	8001ee2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eca:	015a      	lsls	r2, r3, #5
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	4413      	add	r3, r2
 8001ed0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ed4:	461a      	mov	r2, r3
 8001ed6:	2308      	movs	r3, #8
 8001ed8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001eda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 ff99 	bl	8002e14 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	f003 0310 	and.w	r3, r3, #16
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d008      	beq.n	8001efe <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	015a      	lsls	r2, r3, #5
 8001ef0:	69fb      	ldr	r3, [r7, #28]
 8001ef2:	4413      	add	r3, r2
 8001ef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ef8:	461a      	mov	r2, r3
 8001efa:	2310      	movs	r3, #16
 8001efc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	f003 0302 	and.w	r3, r3, #2
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d030      	beq.n	8001f6a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001f08:	6a3b      	ldr	r3, [r7, #32]
 8001f0a:	695b      	ldr	r3, [r3, #20]
 8001f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f10:	2b80      	cmp	r3, #128	; 0x80
 8001f12:	d109      	bne.n	8001f28 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	69fa      	ldr	r2, [r7, #28]
 8001f1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f26:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001f28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f2a:	4613      	mov	r3, r2
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	4413      	add	r3, r2
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	4413      	add	r3, r2
 8001f3a:	3304      	adds	r3, #4
 8001f3c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	78db      	ldrb	r3, [r3, #3]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d108      	bne.n	8001f58 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	4619      	mov	r1, r3
 8001f52:	6878      	ldr	r0, [r7, #4]
 8001f54:	f005 fb5a 	bl	800760c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	015a      	lsls	r2, r3, #5
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	4413      	add	r3, r2
 8001f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f64:	461a      	mov	r2, r3
 8001f66:	2302      	movs	r3, #2
 8001f68:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	f003 0320 	and.w	r3, r3, #32
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d008      	beq.n	8001f86 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f80:	461a      	mov	r2, r3
 8001f82:	2320      	movs	r3, #32
 8001f84:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d009      	beq.n	8001fa4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f92:	015a      	lsls	r2, r3, #5
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	4413      	add	r3, r2
 8001f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fac:	085b      	lsrs	r3, r3, #1
 8001fae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f47f af62 	bne.w	8001e7c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f002 fefb 	bl	8004db8 <USB_ReadInterrupts>
 8001fc2:	4603      	mov	r3, r0
 8001fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001fcc:	f040 80db 	bne.w	8002186 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	f002 ff1c 	bl	8004e12 <USB_ReadDevAllInEpInterrupt>
 8001fda:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001fe0:	e0cd      	b.n	800217e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 80c2 	beq.w	8002172 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ff4:	b2d2      	uxtb	r2, r2
 8001ff6:	4611      	mov	r1, r2
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f002 ff42 	bl	8004e82 <USB_ReadDevInEPInterrupt>
 8001ffe:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	f003 0301 	and.w	r3, r3, #1
 8002006:	2b00      	cmp	r3, #0
 8002008:	d057      	beq.n	80020ba <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	2201      	movs	r2, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800201e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	43db      	mvns	r3, r3
 8002024:	69f9      	ldr	r1, [r7, #28]
 8002026:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800202a:	4013      	ands	r3, r2
 800202c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800203a:	461a      	mov	r2, r3
 800203c:	2301      	movs	r3, #1
 800203e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	2b01      	cmp	r3, #1
 8002046:	d132      	bne.n	80020ae <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002048:	6879      	ldr	r1, [r7, #4]
 800204a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800204c:	4613      	mov	r3, r2
 800204e:	00db      	lsls	r3, r3, #3
 8002050:	4413      	add	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	440b      	add	r3, r1
 8002056:	334c      	adds	r3, #76	; 0x4c
 8002058:	6819      	ldr	r1, [r3, #0]
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800205e:	4613      	mov	r3, r2
 8002060:	00db      	lsls	r3, r3, #3
 8002062:	4413      	add	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4403      	add	r3, r0
 8002068:	3348      	adds	r3, #72	; 0x48
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4419      	add	r1, r3
 800206e:	6878      	ldr	r0, [r7, #4]
 8002070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	4403      	add	r3, r0
 800207c:	334c      	adds	r3, #76	; 0x4c
 800207e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002082:	2b00      	cmp	r3, #0
 8002084:	d113      	bne.n	80020ae <HAL_PCD_IRQHandler+0x3a2>
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800208a:	4613      	mov	r3, r2
 800208c:	00db      	lsls	r3, r3, #3
 800208e:	4413      	add	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	440b      	add	r3, r1
 8002094:	3354      	adds	r3, #84	; 0x54
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d108      	bne.n	80020ae <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6818      	ldr	r0, [r3, #0]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80020a6:	461a      	mov	r2, r3
 80020a8:	2101      	movs	r1, #1
 80020aa:	f002 ff49 	bl	8004f40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	4619      	mov	r1, r3
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f005 fa24 	bl	8007502 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	f003 0308 	and.w	r3, r3, #8
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d008      	beq.n	80020d6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c6:	015a      	lsls	r2, r3, #5
 80020c8:	69fb      	ldr	r3, [r7, #28]
 80020ca:	4413      	add	r3, r2
 80020cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020d0:	461a      	mov	r2, r3
 80020d2:	2308      	movs	r3, #8
 80020d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	f003 0310 	and.w	r3, r3, #16
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d008      	beq.n	80020f2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	015a      	lsls	r2, r3, #5
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	4413      	add	r3, r2
 80020e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020ec:	461a      	mov	r2, r3
 80020ee:	2310      	movs	r3, #16
 80020f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	4413      	add	r3, r2
 8002104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002108:	461a      	mov	r2, r3
 800210a:	2340      	movs	r3, #64	; 0x40
 800210c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	f003 0302 	and.w	r3, r3, #2
 8002114:	2b00      	cmp	r3, #0
 8002116:	d023      	beq.n	8002160 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002118:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800211a:	6a38      	ldr	r0, [r7, #32]
 800211c:	f001 fe2a 	bl	8003d74 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002122:	4613      	mov	r3, r2
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4413      	add	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	3338      	adds	r3, #56	; 0x38
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	4413      	add	r3, r2
 8002130:	3304      	adds	r3, #4
 8002132:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002134:	697b      	ldr	r3, [r7, #20]
 8002136:	78db      	ldrb	r3, [r3, #3]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d108      	bne.n	800214e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2200      	movs	r2, #0
 8002140:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002144:	b2db      	uxtb	r3, r3
 8002146:	4619      	mov	r1, r3
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f005 fa71 	bl	8007630 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800214e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002150:	015a      	lsls	r2, r3, #5
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	4413      	add	r3, r2
 8002156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800215a:	461a      	mov	r2, r3
 800215c:	2302      	movs	r3, #2
 800215e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002160:	693b      	ldr	r3, [r7, #16]
 8002162:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002166:	2b00      	cmp	r3, #0
 8002168:	d003      	beq.n	8002172 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800216a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800216c:	6878      	ldr	r0, [r7, #4]
 800216e:	f000 fcdb 	bl	8002b28 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002174:	3301      	adds	r3, #1
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800217a:	085b      	lsrs	r3, r3, #1
 800217c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800217e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002180:	2b00      	cmp	r3, #0
 8002182:	f47f af2e 	bne.w	8001fe2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f002 fe14 	bl	8004db8 <USB_ReadInterrupts>
 8002190:	4603      	mov	r3, r0
 8002192:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002196:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800219a:	d122      	bne.n	80021e2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	69fa      	ldr	r2, [r7, #28]
 80021a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021aa:	f023 0301 	bic.w	r3, r3, #1
 80021ae:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80021b6:	2b01      	cmp	r3, #1
 80021b8:	d108      	bne.n	80021cc <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021c2:	2100      	movs	r1, #0
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fec3 	bl	8002f50 <HAL_PCDEx_LPM_Callback>
 80021ca:	e002      	b.n	80021d2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f005 fa0f 	bl	80075f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	695a      	ldr	r2, [r3, #20]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80021e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4618      	mov	r0, r3
 80021e8:	f002 fde6 	bl	8004db8 <USB_ReadInterrupts>
 80021ec:	4603      	mov	r3, r0
 80021ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021f6:	d112      	bne.n	800221e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021fe:	689b      	ldr	r3, [r3, #8]
 8002200:	f003 0301 	and.w	r3, r3, #1
 8002204:	2b01      	cmp	r3, #1
 8002206:	d102      	bne.n	800220e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002208:	6878      	ldr	r0, [r7, #4]
 800220a:	f005 f9cb 	bl	80075a4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800221c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f002 fdc8 	bl	8004db8 <USB_ReadInterrupts>
 8002228:	4603      	mov	r3, r0
 800222a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800222e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002232:	f040 80b7 	bne.w	80023a4 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	69fa      	ldr	r2, [r7, #28]
 8002240:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002244:	f023 0301 	bic.w	r3, r3, #1
 8002248:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2110      	movs	r1, #16
 8002250:	4618      	mov	r0, r3
 8002252:	f001 fd8f 	bl	8003d74 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002256:	2300      	movs	r3, #0
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
 800225a:	e046      	b.n	80022ea <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800225c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225e:	015a      	lsls	r2, r3, #5
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	4413      	add	r3, r2
 8002264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002268:	461a      	mov	r2, r3
 800226a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800226e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	4413      	add	r3, r2
 8002278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002280:	0151      	lsls	r1, r2, #5
 8002282:	69fa      	ldr	r2, [r7, #28]
 8002284:	440a      	add	r2, r1
 8002286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800228a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800228e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	4413      	add	r3, r2
 8002298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229c:	461a      	mov	r2, r3
 800229e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80022a2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80022a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022b4:	0151      	lsls	r1, r2, #5
 80022b6:	69fa      	ldr	r2, [r7, #28]
 80022b8:	440a      	add	r2, r1
 80022ba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022c2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80022c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022d4:	0151      	lsls	r1, r2, #5
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	440a      	add	r2, r1
 80022da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022de:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022e2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022e6:	3301      	adds	r3, #1
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d3b3      	bcc.n	800225c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022fa:	69db      	ldr	r3, [r3, #28]
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002302:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002306:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230c:	2b00      	cmp	r3, #0
 800230e:	d016      	beq.n	800233e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002316:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800231a:	69fa      	ldr	r2, [r7, #28]
 800231c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002320:	f043 030b 	orr.w	r3, r3, #11
 8002324:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800232e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002330:	69fa      	ldr	r2, [r7, #28]
 8002332:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002336:	f043 030b 	orr.w	r3, r3, #11
 800233a:	6453      	str	r3, [r2, #68]	; 0x44
 800233c:	e015      	b.n	800236a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	69fa      	ldr	r2, [r7, #28]
 8002348:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800234c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002350:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002354:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800235c:	691b      	ldr	r3, [r3, #16]
 800235e:	69fa      	ldr	r2, [r7, #28]
 8002360:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002364:	f043 030b 	orr.w	r3, r3, #11
 8002368:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	69fa      	ldr	r2, [r7, #28]
 8002374:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002378:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800237c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	691b      	ldr	r3, [r3, #16]
 8002386:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800238e:	461a      	mov	r2, r3
 8002390:	f002 fdd6 	bl	8004f40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	695a      	ldr	r2, [r3, #20]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80023a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f002 fd05 	bl	8004db8 <USB_ReadInterrupts>
 80023ae:	4603      	mov	r3, r0
 80023b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023b8:	d124      	bne.n	8002404 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f002 fd9b 	bl	8004efa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f001 fd50 	bl	8003e6e <USB_GetDevSpeed>
 80023ce:	4603      	mov	r3, r0
 80023d0:	461a      	mov	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681c      	ldr	r4, [r3, #0]
 80023da:	f001 f9e9 	bl	80037b0 <HAL_RCC_GetHCLKFreq>
 80023de:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	461a      	mov	r2, r3
 80023e8:	4620      	mov	r0, r4
 80023ea:	f001 fa4f 	bl	800388c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f005 f8af 	bl	8007552 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	695a      	ldr	r2, [r3, #20]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002402:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f002 fcd5 	bl	8004db8 <USB_ReadInterrupts>
 800240e:	4603      	mov	r3, r0
 8002410:	f003 0308 	and.w	r3, r3, #8
 8002414:	2b08      	cmp	r3, #8
 8002416:	d10a      	bne.n	800242e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f005 f88c 	bl	8007536 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f002 0208 	and.w	r2, r2, #8
 800242c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f002 fcc0 	bl	8004db8 <USB_ReadInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800243e:	2b80      	cmp	r3, #128	; 0x80
 8002440:	d122      	bne.n	8002488 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002442:	6a3b      	ldr	r3, [r7, #32]
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800244a:	6a3b      	ldr	r3, [r7, #32]
 800244c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800244e:	2301      	movs	r3, #1
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
 8002452:	e014      	b.n	800247e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002454:	6879      	ldr	r1, [r7, #4]
 8002456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002458:	4613      	mov	r3, r2
 800245a:	00db      	lsls	r3, r3, #3
 800245c:	4413      	add	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d105      	bne.n	8002478 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800246c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246e:	b2db      	uxtb	r3, r3
 8002470:	4619      	mov	r1, r3
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 fb27 	bl	8002ac6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247a:	3301      	adds	r3, #1
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002484:	429a      	cmp	r2, r3
 8002486:	d3e5      	bcc.n	8002454 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f002 fc93 	bl	8004db8 <USB_ReadInterrupts>
 8002492:	4603      	mov	r3, r0
 8002494:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002498:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800249c:	d13b      	bne.n	8002516 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800249e:	2301      	movs	r3, #1
 80024a0:	627b      	str	r3, [r7, #36]	; 0x24
 80024a2:	e02b      	b.n	80024fc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024b4:	6879      	ldr	r1, [r7, #4]
 80024b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024b8:	4613      	mov	r3, r2
 80024ba:	00db      	lsls	r3, r3, #3
 80024bc:	4413      	add	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	440b      	add	r3, r1
 80024c2:	3340      	adds	r3, #64	; 0x40
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d115      	bne.n	80024f6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80024ca:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	da12      	bge.n	80024f6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d4:	4613      	mov	r3, r2
 80024d6:	00db      	lsls	r3, r3, #3
 80024d8:	4413      	add	r3, r2
 80024da:	009b      	lsls	r3, r3, #2
 80024dc:	440b      	add	r3, r1
 80024de:	333f      	adds	r3, #63	; 0x3f
 80024e0:	2201      	movs	r2, #1
 80024e2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80024e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024ec:	b2db      	uxtb	r3, r3
 80024ee:	4619      	mov	r1, r3
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f000 fae8 	bl	8002ac6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f8:	3301      	adds	r3, #1
 80024fa:	627b      	str	r3, [r7, #36]	; 0x24
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002502:	429a      	cmp	r2, r3
 8002504:	d3ce      	bcc.n	80024a4 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	695a      	ldr	r2, [r3, #20]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002514:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4618      	mov	r0, r3
 800251c:	f002 fc4c 	bl	8004db8 <USB_ReadInterrupts>
 8002520:	4603      	mov	r3, r0
 8002522:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002526:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800252a:	d155      	bne.n	80025d8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800252c:	2301      	movs	r3, #1
 800252e:	627b      	str	r3, [r7, #36]	; 0x24
 8002530:	e045      	b.n	80025be <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	4413      	add	r3, r2
 800253a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002542:	6879      	ldr	r1, [r7, #4]
 8002544:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002546:	4613      	mov	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	4413      	add	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	440b      	add	r3, r1
 8002550:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d12e      	bne.n	80025b8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800255a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800255c:	2b00      	cmp	r3, #0
 800255e:	da2b      	bge.n	80025b8 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800256c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002570:	429a      	cmp	r2, r3
 8002572:	d121      	bne.n	80025b8 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002574:	6879      	ldr	r1, [r7, #4]
 8002576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002578:	4613      	mov	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	4413      	add	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	440b      	add	r3, r1
 8002582:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002586:	2201      	movs	r2, #1
 8002588:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	699b      	ldr	r3, [r3, #24]
 800258e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002592:	6a3b      	ldr	r3, [r7, #32]
 8002594:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d10a      	bne.n	80025b8 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	69fa      	ldr	r2, [r7, #28]
 80025ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025b4:	6053      	str	r3, [r2, #4]
            break;
 80025b6:	e007      	b.n	80025c8 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ba:	3301      	adds	r3, #1
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d3b4      	bcc.n	8002532 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	695a      	ldr	r2, [r3, #20]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80025d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f002 fbeb 	bl	8004db8 <USB_ReadInterrupts>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ec:	d10a      	bne.n	8002604 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f005 f830 	bl	8007654 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002602:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f002 fbd5 	bl	8004db8 <USB_ReadInterrupts>
 800260e:	4603      	mov	r3, r0
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b04      	cmp	r3, #4
 8002616:	d115      	bne.n	8002644 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002620:	69bb      	ldr	r3, [r7, #24]
 8002622:	f003 0304 	and.w	r3, r3, #4
 8002626:	2b00      	cmp	r3, #0
 8002628:	d002      	beq.n	8002630 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f005 f820 	bl	8007670 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	69ba      	ldr	r2, [r7, #24]
 800263c:	430a      	orrs	r2, r1
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	e000      	b.n	8002644 <HAL_PCD_IRQHandler+0x938>
      return;
 8002642:	bf00      	nop
    }
  }
}
 8002644:	3734      	adds	r7, #52	; 0x34
 8002646:	46bd      	mov	sp, r7
 8002648:	bd90      	pop	{r4, r7, pc}

0800264a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800264a:	b580      	push	{r7, lr}
 800264c:	b082      	sub	sp, #8
 800264e:	af00      	add	r7, sp, #0
 8002650:	6078      	str	r0, [r7, #4]
 8002652:	460b      	mov	r3, r1
 8002654:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800265c:	2b01      	cmp	r3, #1
 800265e:	d101      	bne.n	8002664 <HAL_PCD_SetAddress+0x1a>
 8002660:	2302      	movs	r3, #2
 8002662:	e013      	b.n	800268c <HAL_PCD_SetAddress+0x42>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	78fa      	ldrb	r2, [r7, #3]
 8002670:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	78fa      	ldrb	r2, [r7, #3]
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f002 fb33 	bl	8004ce8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800268a:	2300      	movs	r3, #0
}
 800268c:	4618      	mov	r0, r3
 800268e:	3708      	adds	r7, #8
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}

08002694 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b084      	sub	sp, #16
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	4608      	mov	r0, r1
 800269e:	4611      	mov	r1, r2
 80026a0:	461a      	mov	r2, r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	70fb      	strb	r3, [r7, #3]
 80026a6:	460b      	mov	r3, r1
 80026a8:	803b      	strh	r3, [r7, #0]
 80026aa:	4613      	mov	r3, r2
 80026ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	da0f      	bge.n	80026da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ba:	78fb      	ldrb	r3, [r7, #3]
 80026bc:	f003 020f 	and.w	r2, r3, #15
 80026c0:	4613      	mov	r3, r2
 80026c2:	00db      	lsls	r3, r3, #3
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	3338      	adds	r3, #56	; 0x38
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	3304      	adds	r3, #4
 80026d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2201      	movs	r2, #1
 80026d6:	705a      	strb	r2, [r3, #1]
 80026d8:	e00f      	b.n	80026fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026da:	78fb      	ldrb	r3, [r7, #3]
 80026dc:	f003 020f 	and.w	r2, r3, #15
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026ec:	687a      	ldr	r2, [r7, #4]
 80026ee:	4413      	add	r3, r2
 80026f0:	3304      	adds	r3, #4
 80026f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2200      	movs	r2, #0
 80026f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026fa:	78fb      	ldrb	r3, [r7, #3]
 80026fc:	f003 030f 	and.w	r3, r3, #15
 8002700:	b2da      	uxtb	r2, r3
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002706:	883a      	ldrh	r2, [r7, #0]
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	78ba      	ldrb	r2, [r7, #2]
 8002710:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	785b      	ldrb	r3, [r3, #1]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d004      	beq.n	8002724 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	b29a      	uxth	r2, r3
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002724:	78bb      	ldrb	r3, [r7, #2]
 8002726:	2b02      	cmp	r3, #2
 8002728:	d102      	bne.n	8002730 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2200      	movs	r2, #0
 800272e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002736:	2b01      	cmp	r3, #1
 8002738:	d101      	bne.n	800273e <HAL_PCD_EP_Open+0xaa>
 800273a:	2302      	movs	r3, #2
 800273c:	e00e      	b.n	800275c <HAL_PCD_EP_Open+0xc8>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2201      	movs	r2, #1
 8002742:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	68f9      	ldr	r1, [r7, #12]
 800274c:	4618      	mov	r0, r3
 800274e:	f001 fbb3 	bl	8003eb8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800275a:	7afb      	ldrb	r3, [r7, #11]
}
 800275c:	4618      	mov	r0, r3
 800275e:	3710      	adds	r7, #16
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}

08002764 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	460b      	mov	r3, r1
 800276e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002774:	2b00      	cmp	r3, #0
 8002776:	da0f      	bge.n	8002798 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002778:	78fb      	ldrb	r3, [r7, #3]
 800277a:	f003 020f 	and.w	r2, r3, #15
 800277e:	4613      	mov	r3, r2
 8002780:	00db      	lsls	r3, r3, #3
 8002782:	4413      	add	r3, r2
 8002784:	009b      	lsls	r3, r3, #2
 8002786:	3338      	adds	r3, #56	; 0x38
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	4413      	add	r3, r2
 800278c:	3304      	adds	r3, #4
 800278e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2201      	movs	r2, #1
 8002794:	705a      	strb	r2, [r3, #1]
 8002796:	e00f      	b.n	80027b8 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002798:	78fb      	ldrb	r3, [r7, #3]
 800279a:	f003 020f 	and.w	r2, r3, #15
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80027aa:	687a      	ldr	r2, [r7, #4]
 80027ac:	4413      	add	r3, r2
 80027ae:	3304      	adds	r3, #4
 80027b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2200      	movs	r2, #0
 80027b6:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027b8:	78fb      	ldrb	r3, [r7, #3]
 80027ba:	f003 030f 	and.w	r3, r3, #15
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d101      	bne.n	80027d2 <HAL_PCD_EP_Close+0x6e>
 80027ce:	2302      	movs	r3, #2
 80027d0:	e00e      	b.n	80027f0 <HAL_PCD_EP_Close+0x8c>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	68f9      	ldr	r1, [r7, #12]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f001 fbf1 	bl	8003fc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	607a      	str	r2, [r7, #4]
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	460b      	mov	r3, r1
 8002806:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002808:	7afb      	ldrb	r3, [r7, #11]
 800280a:	f003 020f 	and.w	r2, r3, #15
 800280e:	4613      	mov	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	4413      	add	r3, r2
 800281e:	3304      	adds	r3, #4
 8002820:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002822:	697b      	ldr	r3, [r7, #20]
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2200      	movs	r2, #0
 8002832:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	2200      	movs	r2, #0
 8002838:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800283a:	7afb      	ldrb	r3, [r7, #11]
 800283c:	f003 030f 	and.w	r3, r3, #15
 8002840:	b2da      	uxtb	r2, r3
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	691b      	ldr	r3, [r3, #16]
 800284a:	2b01      	cmp	r3, #1
 800284c:	d102      	bne.n	8002854 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002854:	7afb      	ldrb	r3, [r7, #11]
 8002856:	f003 030f 	and.w	r3, r3, #15
 800285a:	2b00      	cmp	r3, #0
 800285c:	d109      	bne.n	8002872 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	6818      	ldr	r0, [r3, #0]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	b2db      	uxtb	r3, r3
 8002868:	461a      	mov	r2, r3
 800286a:	6979      	ldr	r1, [r7, #20]
 800286c:	f001 fed0 	bl	8004610 <USB_EP0StartXfer>
 8002870:	e008      	b.n	8002884 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6818      	ldr	r0, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	b2db      	uxtb	r3, r3
 800287c:	461a      	mov	r2, r3
 800287e:	6979      	ldr	r1, [r7, #20]
 8002880:	f001 fc7e 	bl	8004180 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	f003 020f 	and.w	r2, r3, #15
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	4613      	mov	r3, r2
 80028a4:	00db      	lsls	r3, r3, #3
 80028a6:	4413      	add	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80028b0:	681b      	ldr	r3, [r3, #0]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028be:	b580      	push	{r7, lr}
 80028c0:	b086      	sub	sp, #24
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	60f8      	str	r0, [r7, #12]
 80028c6:	607a      	str	r2, [r7, #4]
 80028c8:	603b      	str	r3, [r7, #0]
 80028ca:	460b      	mov	r3, r1
 80028cc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028ce:	7afb      	ldrb	r3, [r7, #11]
 80028d0:	f003 020f 	and.w	r2, r3, #15
 80028d4:	4613      	mov	r3, r2
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	3338      	adds	r3, #56	; 0x38
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	4413      	add	r3, r2
 80028e2:	3304      	adds	r3, #4
 80028e4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2200      	movs	r2, #0
 80028f6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2201      	movs	r2, #1
 80028fc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028fe:	7afb      	ldrb	r3, [r7, #11]
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	b2da      	uxtb	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	691b      	ldr	r3, [r3, #16]
 800290e:	2b01      	cmp	r3, #1
 8002910:	d102      	bne.n	8002918 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002918:	7afb      	ldrb	r3, [r7, #11]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	2b00      	cmp	r3, #0
 8002920:	d109      	bne.n	8002936 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	6818      	ldr	r0, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	b2db      	uxtb	r3, r3
 800292c:	461a      	mov	r2, r3
 800292e:	6979      	ldr	r1, [r7, #20]
 8002930:	f001 fe6e 	bl	8004610 <USB_EP0StartXfer>
 8002934:	e008      	b.n	8002948 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	b2db      	uxtb	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	6979      	ldr	r1, [r7, #20]
 8002944:	f001 fc1c 	bl	8004180 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3718      	adds	r7, #24
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	460b      	mov	r3, r1
 800295c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	f003 020f 	and.w	r2, r3, #15
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	429a      	cmp	r2, r3
 800296a:	d901      	bls.n	8002970 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e050      	b.n	8002a12 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002974:	2b00      	cmp	r3, #0
 8002976:	da0f      	bge.n	8002998 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002978:	78fb      	ldrb	r3, [r7, #3]
 800297a:	f003 020f 	and.w	r2, r3, #15
 800297e:	4613      	mov	r3, r2
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4413      	add	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	3338      	adds	r3, #56	; 0x38
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	4413      	add	r3, r2
 800298c:	3304      	adds	r3, #4
 800298e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2201      	movs	r2, #1
 8002994:	705a      	strb	r2, [r3, #1]
 8002996:	e00d      	b.n	80029b4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002998:	78fa      	ldrb	r2, [r7, #3]
 800299a:	4613      	mov	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	4413      	add	r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	3304      	adds	r3, #4
 80029ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	2201      	movs	r2, #1
 80029b8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80029ba:	78fb      	ldrb	r3, [r7, #3]
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d101      	bne.n	80029d4 <HAL_PCD_EP_SetStall+0x82>
 80029d0:	2302      	movs	r3, #2
 80029d2:	e01e      	b.n	8002a12 <HAL_PCD_EP_SetStall+0xc0>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2201      	movs	r2, #1
 80029d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68f9      	ldr	r1, [r7, #12]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f002 f8ac 	bl	8004b40 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	f003 030f 	and.w	r3, r3, #15
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d10a      	bne.n	8002a08 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6818      	ldr	r0, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	691b      	ldr	r3, [r3, #16]
 80029fa:	b2d9      	uxtb	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a02:	461a      	mov	r2, r3
 8002a04:	f002 fa9c 	bl	8004f40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3710      	adds	r7, #16
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	b084      	sub	sp, #16
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	460b      	mov	r3, r1
 8002a24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002a26:	78fb      	ldrb	r3, [r7, #3]
 8002a28:	f003 020f 	and.w	r2, r3, #15
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	429a      	cmp	r2, r3
 8002a32:	d901      	bls.n	8002a38 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e042      	b.n	8002abe <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002a38:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	da0f      	bge.n	8002a60 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	f003 020f 	and.w	r2, r3, #15
 8002a46:	4613      	mov	r3, r2
 8002a48:	00db      	lsls	r3, r3, #3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	3338      	adds	r3, #56	; 0x38
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	4413      	add	r3, r2
 8002a54:	3304      	adds	r3, #4
 8002a56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	705a      	strb	r2, [r3, #1]
 8002a5e:	e00f      	b.n	8002a80 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	f003 020f 	and.w	r2, r3, #15
 8002a66:	4613      	mov	r3, r2
 8002a68:	00db      	lsls	r3, r3, #3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	4413      	add	r3, r2
 8002a76:	3304      	adds	r3, #4
 8002a78:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2200      	movs	r2, #0
 8002a84:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a86:	78fb      	ldrb	r3, [r7, #3]
 8002a88:	f003 030f 	and.w	r3, r3, #15
 8002a8c:	b2da      	uxtb	r2, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_PCD_EP_ClrStall+0x86>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e00e      	b.n	8002abe <HAL_PCD_EP_ClrStall+0xa4>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68f9      	ldr	r1, [r7, #12]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f002 f8b4 	bl	8004c1c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002abc:	2300      	movs	r3, #0
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3710      	adds	r7, #16
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	bd80      	pop	{r7, pc}

08002ac6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002ac6:	b580      	push	{r7, lr}
 8002ac8:	b084      	sub	sp, #16
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	6078      	str	r0, [r7, #4]
 8002ace:	460b      	mov	r3, r1
 8002ad0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002ad2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	da0c      	bge.n	8002af4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	f003 020f 	and.w	r2, r3, #15
 8002ae0:	4613      	mov	r3, r2
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	4413      	add	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	3338      	adds	r3, #56	; 0x38
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	4413      	add	r3, r2
 8002aee:	3304      	adds	r3, #4
 8002af0:	60fb      	str	r3, [r7, #12]
 8002af2:	e00c      	b.n	8002b0e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002af4:	78fb      	ldrb	r3, [r7, #3]
 8002af6:	f003 020f 	and.w	r2, r3, #15
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	68f9      	ldr	r1, [r7, #12]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f001 fed3 	bl	80048c0 <USB_EPStopXfer>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3710      	adds	r7, #16
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}

08002b28 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b08a      	sub	sp, #40	; 0x28
 8002b2c:	af02      	add	r7, sp, #8
 8002b2e:	6078      	str	r0, [r7, #4]
 8002b30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	3338      	adds	r3, #56	; 0x38
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a1a      	ldr	r2, [r3, #32]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d901      	bls.n	8002b60 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e06c      	b.n	8002c3a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	699a      	ldr	r2, [r3, #24]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	6a1b      	ldr	r3, [r3, #32]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	69fa      	ldr	r2, [r7, #28]
 8002b72:	429a      	cmp	r2, r3
 8002b74:	d902      	bls.n	8002b7c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	3303      	adds	r3, #3
 8002b80:	089b      	lsrs	r3, r3, #2
 8002b82:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b84:	e02b      	b.n	8002bde <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	699a      	ldr	r2, [r3, #24]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	68db      	ldr	r3, [r3, #12]
 8002b96:	69fa      	ldr	r2, [r7, #28]
 8002b98:	429a      	cmp	r2, r3
 8002b9a:	d902      	bls.n	8002ba2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	68db      	ldr	r3, [r3, #12]
 8002ba0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3303      	adds	r3, #3
 8002ba6:	089b      	lsrs	r3, r3, #2
 8002ba8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	6919      	ldr	r1, [r3, #16]
 8002bae:	683b      	ldr	r3, [r7, #0]
 8002bb0:	b2da      	uxtb	r2, r3
 8002bb2:	69fb      	ldr	r3, [r7, #28]
 8002bb4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	9300      	str	r3, [sp, #0]
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	6978      	ldr	r0, [r7, #20]
 8002bc2:	f001 ff27 	bl	8004a14 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	441a      	add	r2, r3
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a1a      	ldr	r2, [r3, #32]
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	441a      	add	r2, r3
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	015a      	lsls	r2, r3, #5
 8002be2:	693b      	ldr	r3, [r7, #16]
 8002be4:	4413      	add	r3, r2
 8002be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	d809      	bhi.n	8002c08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	6a1a      	ldr	r2, [r3, #32]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d203      	bcs.n	8002c08 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d1be      	bne.n	8002b86 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	699a      	ldr	r2, [r3, #24]
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	429a      	cmp	r2, r3
 8002c12:	d811      	bhi.n	8002c38 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c20:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	6939      	ldr	r1, [r7, #16]
 8002c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002c34:	4013      	ands	r3, r2
 8002c36:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3720      	adds	r7, #32
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
	...

08002c44 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b088      	sub	sp, #32
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	333c      	adds	r3, #60	; 0x3c
 8002c5c:	3304      	adds	r3, #4
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	015a      	lsls	r2, r3, #5
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	4413      	add	r3, r2
 8002c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d17b      	bne.n	8002d72 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d015      	beq.n	8002cb0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	4a61      	ldr	r2, [pc, #388]	; (8002e0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	f240 80b9 	bls.w	8002e00 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 80b3 	beq.w	8002e00 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	015a      	lsls	r2, r3, #5
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	4413      	add	r3, r2
 8002ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ca6:	461a      	mov	r2, r3
 8002ca8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cac:	6093      	str	r3, [r2, #8]
 8002cae:	e0a7      	b.n	8002e00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	f003 0320 	and.w	r3, r3, #32
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d009      	beq.n	8002cce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	2320      	movs	r3, #32
 8002cca:	6093      	str	r3, [r2, #8]
 8002ccc:	e098      	b.n	8002e00 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002cce:	693b      	ldr	r3, [r7, #16]
 8002cd0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f040 8093 	bne.w	8002e00 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	4a4b      	ldr	r2, [pc, #300]	; (8002e0c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d90f      	bls.n	8002d02 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	015a      	lsls	r2, r3, #5
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cfe:	6093      	str	r3, [r2, #8]
 8002d00:	e07e      	b.n	8002e00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d02:	683a      	ldr	r2, [r7, #0]
 8002d04:	4613      	mov	r3, r2
 8002d06:	00db      	lsls	r3, r3, #3
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d10:	687a      	ldr	r2, [r7, #4]
 8002d12:	4413      	add	r3, r2
 8002d14:	3304      	adds	r3, #4
 8002d16:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	69da      	ldr	r2, [r3, #28]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	0159      	lsls	r1, r3, #5
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	440b      	add	r3, r1
 8002d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d2e:	1ad2      	subs	r2, r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d114      	bne.n	8002d64 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d109      	bne.n	8002d56 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2101      	movs	r1, #1
 8002d50:	f002 f8f6 	bl	8004f40 <USB_EP0_OutStart>
 8002d54:	e006      	b.n	8002d64 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	441a      	add	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	4619      	mov	r1, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f004 fbae 	bl	80074cc <HAL_PCD_DataOutStageCallback>
 8002d70:	e046      	b.n	8002e00 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	4a26      	ldr	r2, [pc, #152]	; (8002e10 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d124      	bne.n	8002dc4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	015a      	lsls	r2, r3, #5
 8002d88:	69bb      	ldr	r3, [r7, #24]
 8002d8a:	4413      	add	r3, r2
 8002d8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d90:	461a      	mov	r2, r3
 8002d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d96:	6093      	str	r3, [r2, #8]
 8002d98:	e032      	b.n	8002e00 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	f003 0320 	and.w	r3, r3, #32
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	015a      	lsls	r2, r3, #5
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	4413      	add	r3, r2
 8002dac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002db0:	461a      	mov	r2, r3
 8002db2:	2320      	movs	r3, #32
 8002db4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	4619      	mov	r1, r3
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f004 fb85 	bl	80074cc <HAL_PCD_DataOutStageCallback>
 8002dc2:	e01d      	b.n	8002e00 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d114      	bne.n	8002df4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002dca:	6879      	ldr	r1, [r7, #4]
 8002dcc:	683a      	ldr	r2, [r7, #0]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d108      	bne.n	8002df4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dec:	461a      	mov	r2, r3
 8002dee:	2100      	movs	r1, #0
 8002df0:	f002 f8a6 	bl	8004f40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	b2db      	uxtb	r3, r3
 8002df8:	4619      	mov	r1, r3
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f004 fb66 	bl	80074cc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3720      	adds	r7, #32
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	4f54300a 	.word	0x4f54300a
 8002e10:	4f54310a 	.word	0x4f54310a

08002e14 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
 8002e1c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	333c      	adds	r3, #60	; 0x3c
 8002e2c:	3304      	adds	r3, #4
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	015a      	lsls	r2, r3, #5
 8002e36:	693b      	ldr	r3, [r7, #16]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4a15      	ldr	r2, [pc, #84]	; (8002e9c <PCD_EP_OutSetupPacket_int+0x88>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d90e      	bls.n	8002e68 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d009      	beq.n	8002e68 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	015a      	lsls	r2, r3, #5
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e60:	461a      	mov	r2, r3
 8002e62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e66:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f004 fb1d 	bl	80074a8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4a0a      	ldr	r2, [pc, #40]	; (8002e9c <PCD_EP_OutSetupPacket_int+0x88>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d90c      	bls.n	8002e90 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d108      	bne.n	8002e90 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e88:	461a      	mov	r2, r3
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	f002 f858 	bl	8004f40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	4f54300a 	.word	0x4f54300a

08002ea0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b085      	sub	sp, #20
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	70fb      	strb	r3, [r7, #3]
 8002eac:	4613      	mov	r3, r2
 8002eae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002eb8:	78fb      	ldrb	r3, [r7, #3]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d107      	bne.n	8002ece <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002ebe:	883b      	ldrh	r3, [r7, #0]
 8002ec0:	0419      	lsls	r1, r3, #16
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	68ba      	ldr	r2, [r7, #8]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	629a      	str	r2, [r3, #40]	; 0x28
 8002ecc:	e028      	b.n	8002f20 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	0c1b      	lsrs	r3, r3, #16
 8002ed6:	68ba      	ldr	r2, [r7, #8]
 8002ed8:	4413      	add	r3, r2
 8002eda:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002edc:	2300      	movs	r3, #0
 8002ede:	73fb      	strb	r3, [r7, #15]
 8002ee0:	e00d      	b.n	8002efe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	7bfb      	ldrb	r3, [r7, #15]
 8002ee8:	3340      	adds	r3, #64	; 0x40
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	4413      	add	r3, r2
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	0c1b      	lsrs	r3, r3, #16
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002ef8:	7bfb      	ldrb	r3, [r7, #15]
 8002efa:	3301      	adds	r3, #1
 8002efc:	73fb      	strb	r3, [r7, #15]
 8002efe:	7bfa      	ldrb	r2, [r7, #15]
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d3ec      	bcc.n	8002ee2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f08:	883b      	ldrh	r3, [r7, #0]
 8002f0a:	0418      	lsls	r0, r3, #16
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6819      	ldr	r1, [r3, #0]
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	3b01      	subs	r3, #1
 8002f14:	68ba      	ldr	r2, [r7, #8]
 8002f16:	4302      	orrs	r2, r0
 8002f18:	3340      	adds	r3, #64	; 0x40
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3714      	adds	r7, #20
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
 8002f36:	460b      	mov	r3, r1
 8002f38:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	887a      	ldrh	r2, [r7, #2]
 8002f40:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	370c      	adds	r7, #12
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4e:	4770      	bx	lr

08002f50 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f5c:	bf00      	nop
 8002f5e:	370c      	adds	r7, #12
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b086      	sub	sp, #24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e267      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d075      	beq.n	8003072 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f86:	4b88      	ldr	r3, [pc, #544]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f003 030c 	and.w	r3, r3, #12
 8002f8e:	2b04      	cmp	r3, #4
 8002f90:	d00c      	beq.n	8002fac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f92:	4b85      	ldr	r3, [pc, #532]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f9a:	2b08      	cmp	r3, #8
 8002f9c:	d112      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f9e:	4b82      	ldr	r3, [pc, #520]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fa6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002faa:	d10b      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fac:	4b7e      	ldr	r3, [pc, #504]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d05b      	beq.n	8003070 <HAL_RCC_OscConfig+0x108>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d157      	bne.n	8003070 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e242      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fcc:	d106      	bne.n	8002fdc <HAL_RCC_OscConfig+0x74>
 8002fce:	4b76      	ldr	r3, [pc, #472]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4a75      	ldr	r2, [pc, #468]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fd8:	6013      	str	r3, [r2, #0]
 8002fda:	e01d      	b.n	8003018 <HAL_RCC_OscConfig+0xb0>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fe4:	d10c      	bne.n	8003000 <HAL_RCC_OscConfig+0x98>
 8002fe6:	4b70      	ldr	r3, [pc, #448]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a6f      	ldr	r2, [pc, #444]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002fec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ff0:	6013      	str	r3, [r2, #0]
 8002ff2:	4b6d      	ldr	r3, [pc, #436]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a6c      	ldr	r2, [pc, #432]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e00b      	b.n	8003018 <HAL_RCC_OscConfig+0xb0>
 8003000:	4b69      	ldr	r3, [pc, #420]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a68      	ldr	r2, [pc, #416]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8003006:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	4b66      	ldr	r3, [pc, #408]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a65      	ldr	r2, [pc, #404]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8003012:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003016:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d013      	beq.n	8003048 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003020:	f7fe fa5e 	bl	80014e0 <HAL_GetTick>
 8003024:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003028:	f7fe fa5a 	bl	80014e0 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b64      	cmp	r3, #100	; 0x64
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e207      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800303a:	4b5b      	ldr	r3, [pc, #364]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0xc0>
 8003046:	e014      	b.n	8003072 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003048:	f7fe fa4a 	bl	80014e0 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800304e:	e008      	b.n	8003062 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003050:	f7fe fa46 	bl	80014e0 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	2b64      	cmp	r3, #100	; 0x64
 800305c:	d901      	bls.n	8003062 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800305e:	2303      	movs	r3, #3
 8003060:	e1f3      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003062:	4b51      	ldr	r3, [pc, #324]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d1f0      	bne.n	8003050 <HAL_RCC_OscConfig+0xe8>
 800306e:	e000      	b.n	8003072 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003070:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0302 	and.w	r3, r3, #2
 800307a:	2b00      	cmp	r3, #0
 800307c:	d063      	beq.n	8003146 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800307e:	4b4a      	ldr	r3, [pc, #296]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	f003 030c 	and.w	r3, r3, #12
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00b      	beq.n	80030a2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800308a:	4b47      	ldr	r3, [pc, #284]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003092:	2b08      	cmp	r3, #8
 8003094:	d11c      	bne.n	80030d0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003096:	4b44      	ldr	r3, [pc, #272]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d116      	bne.n	80030d0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030a2:	4b41      	ldr	r3, [pc, #260]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d005      	beq.n	80030ba <HAL_RCC_OscConfig+0x152>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d001      	beq.n	80030ba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e1c7      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030ba:	4b3b      	ldr	r3, [pc, #236]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	691b      	ldr	r3, [r3, #16]
 80030c6:	00db      	lsls	r3, r3, #3
 80030c8:	4937      	ldr	r1, [pc, #220]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ce:	e03a      	b.n	8003146 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d020      	beq.n	800311a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030d8:	4b34      	ldr	r3, [pc, #208]	; (80031ac <HAL_RCC_OscConfig+0x244>)
 80030da:	2201      	movs	r2, #1
 80030dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030de:	f7fe f9ff 	bl	80014e0 <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e6:	f7fe f9fb 	bl	80014e0 <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e1a8      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f8:	4b2b      	ldr	r3, [pc, #172]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0302 	and.w	r3, r3, #2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003104:	4b28      	ldr	r3, [pc, #160]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	691b      	ldr	r3, [r3, #16]
 8003110:	00db      	lsls	r3, r3, #3
 8003112:	4925      	ldr	r1, [pc, #148]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 8003114:	4313      	orrs	r3, r2
 8003116:	600b      	str	r3, [r1, #0]
 8003118:	e015      	b.n	8003146 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800311a:	4b24      	ldr	r3, [pc, #144]	; (80031ac <HAL_RCC_OscConfig+0x244>)
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe f9de 	bl	80014e0 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003128:	f7fe f9da 	bl	80014e0 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e187      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800313a:	4b1b      	ldr	r3, [pc, #108]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d036      	beq.n	80031c0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d016      	beq.n	8003188 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800315a:	4b15      	ldr	r3, [pc, #84]	; (80031b0 <HAL_RCC_OscConfig+0x248>)
 800315c:	2201      	movs	r2, #1
 800315e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003160:	f7fe f9be 	bl	80014e0 <HAL_GetTick>
 8003164:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003166:	e008      	b.n	800317a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003168:	f7fe f9ba 	bl	80014e0 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e167      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800317a:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_RCC_OscConfig+0x240>)
 800317c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0f0      	beq.n	8003168 <HAL_RCC_OscConfig+0x200>
 8003186:	e01b      	b.n	80031c0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003188:	4b09      	ldr	r3, [pc, #36]	; (80031b0 <HAL_RCC_OscConfig+0x248>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800318e:	f7fe f9a7 	bl	80014e0 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003194:	e00e      	b.n	80031b4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003196:	f7fe f9a3 	bl	80014e0 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d907      	bls.n	80031b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e150      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
 80031a8:	40023800 	.word	0x40023800
 80031ac:	42470000 	.word	0x42470000
 80031b0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b4:	4b88      	ldr	r3, [pc, #544]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80031b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d1ea      	bne.n	8003196 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 8097 	beq.w	80032fc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ce:	2300      	movs	r3, #0
 80031d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031d2:	4b81      	ldr	r3, [pc, #516]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10f      	bne.n	80031fe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	60bb      	str	r3, [r7, #8]
 80031e2:	4b7d      	ldr	r3, [pc, #500]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	4a7c      	ldr	r2, [pc, #496]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80031e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ec:	6413      	str	r3, [r2, #64]	; 0x40
 80031ee:	4b7a      	ldr	r3, [pc, #488]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f6:	60bb      	str	r3, [r7, #8]
 80031f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031fa:	2301      	movs	r3, #1
 80031fc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031fe:	4b77      	ldr	r3, [pc, #476]	; (80033dc <HAL_RCC_OscConfig+0x474>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003206:	2b00      	cmp	r3, #0
 8003208:	d118      	bne.n	800323c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800320a:	4b74      	ldr	r3, [pc, #464]	; (80033dc <HAL_RCC_OscConfig+0x474>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a73      	ldr	r2, [pc, #460]	; (80033dc <HAL_RCC_OscConfig+0x474>)
 8003210:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003214:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003216:	f7fe f963 	bl	80014e0 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800321e:	f7fe f95f 	bl	80014e0 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e10c      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	4b6a      	ldr	r3, [pc, #424]	; (80033dc <HAL_RCC_OscConfig+0x474>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003238:	2b00      	cmp	r3, #0
 800323a:	d0f0      	beq.n	800321e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b01      	cmp	r3, #1
 8003242:	d106      	bne.n	8003252 <HAL_RCC_OscConfig+0x2ea>
 8003244:	4b64      	ldr	r3, [pc, #400]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 8003246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003248:	4a63      	ldr	r2, [pc, #396]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6713      	str	r3, [r2, #112]	; 0x70
 8003250:	e01c      	b.n	800328c <HAL_RCC_OscConfig+0x324>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b05      	cmp	r3, #5
 8003258:	d10c      	bne.n	8003274 <HAL_RCC_OscConfig+0x30c>
 800325a:	4b5f      	ldr	r3, [pc, #380]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 800325c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800325e:	4a5e      	ldr	r2, [pc, #376]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 8003260:	f043 0304 	orr.w	r3, r3, #4
 8003264:	6713      	str	r3, [r2, #112]	; 0x70
 8003266:	4b5c      	ldr	r3, [pc, #368]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 8003268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326a:	4a5b      	ldr	r2, [pc, #364]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 800326c:	f043 0301 	orr.w	r3, r3, #1
 8003270:	6713      	str	r3, [r2, #112]	; 0x70
 8003272:	e00b      	b.n	800328c <HAL_RCC_OscConfig+0x324>
 8003274:	4b58      	ldr	r3, [pc, #352]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 8003276:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003278:	4a57      	ldr	r2, [pc, #348]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 800327a:	f023 0301 	bic.w	r3, r3, #1
 800327e:	6713      	str	r3, [r2, #112]	; 0x70
 8003280:	4b55      	ldr	r3, [pc, #340]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	4a54      	ldr	r2, [pc, #336]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 8003286:	f023 0304 	bic.w	r3, r3, #4
 800328a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d015      	beq.n	80032c0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003294:	f7fe f924 	bl	80014e0 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800329a:	e00a      	b.n	80032b2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800329c:	f7fe f920 	bl	80014e0 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d901      	bls.n	80032b2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032ae:	2303      	movs	r3, #3
 80032b0:	e0cb      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b2:	4b49      	ldr	r3, [pc, #292]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0ee      	beq.n	800329c <HAL_RCC_OscConfig+0x334>
 80032be:	e014      	b.n	80032ea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032c0:	f7fe f90e 	bl	80014e0 <HAL_GetTick>
 80032c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c6:	e00a      	b.n	80032de <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c8:	f7fe f90a 	bl	80014e0 <HAL_GetTick>
 80032cc:	4602      	mov	r2, r0
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	1ad3      	subs	r3, r2, r3
 80032d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e0b5      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032de:	4b3e      	ldr	r3, [pc, #248]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80032e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1ee      	bne.n	80032c8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032ea:	7dfb      	ldrb	r3, [r7, #23]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d105      	bne.n	80032fc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032f0:	4b39      	ldr	r3, [pc, #228]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80032f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f4:	4a38      	ldr	r2, [pc, #224]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80032f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032fa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	2b00      	cmp	r3, #0
 8003302:	f000 80a1 	beq.w	8003448 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003306:	4b34      	ldr	r3, [pc, #208]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 030c 	and.w	r3, r3, #12
 800330e:	2b08      	cmp	r3, #8
 8003310:	d05c      	beq.n	80033cc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	2b02      	cmp	r3, #2
 8003318:	d141      	bne.n	800339e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331a:	4b31      	ldr	r3, [pc, #196]	; (80033e0 <HAL_RCC_OscConfig+0x478>)
 800331c:	2200      	movs	r2, #0
 800331e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003320:	f7fe f8de 	bl	80014e0 <HAL_GetTick>
 8003324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003326:	e008      	b.n	800333a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003328:	f7fe f8da 	bl	80014e0 <HAL_GetTick>
 800332c:	4602      	mov	r2, r0
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	1ad3      	subs	r3, r2, r3
 8003332:	2b02      	cmp	r3, #2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e087      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800333a:	4b27      	ldr	r3, [pc, #156]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f0      	bne.n	8003328 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	69da      	ldr	r2, [r3, #28]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a1b      	ldr	r3, [r3, #32]
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003354:	019b      	lsls	r3, r3, #6
 8003356:	431a      	orrs	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335c:	085b      	lsrs	r3, r3, #1
 800335e:	3b01      	subs	r3, #1
 8003360:	041b      	lsls	r3, r3, #16
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003368:	061b      	lsls	r3, r3, #24
 800336a:	491b      	ldr	r1, [pc, #108]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 800336c:	4313      	orrs	r3, r2
 800336e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003370:	4b1b      	ldr	r3, [pc, #108]	; (80033e0 <HAL_RCC_OscConfig+0x478>)
 8003372:	2201      	movs	r2, #1
 8003374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003376:	f7fe f8b3 	bl	80014e0 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337c:	e008      	b.n	8003390 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800337e:	f7fe f8af 	bl	80014e0 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	2b02      	cmp	r3, #2
 800338a:	d901      	bls.n	8003390 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e05c      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003390:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003398:	2b00      	cmp	r3, #0
 800339a:	d0f0      	beq.n	800337e <HAL_RCC_OscConfig+0x416>
 800339c:	e054      	b.n	8003448 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800339e:	4b10      	ldr	r3, [pc, #64]	; (80033e0 <HAL_RCC_OscConfig+0x478>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a4:	f7fe f89c 	bl	80014e0 <HAL_GetTick>
 80033a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033aa:	e008      	b.n	80033be <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033ac:	f7fe f898 	bl	80014e0 <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d901      	bls.n	80033be <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	e045      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033be:	4b06      	ldr	r3, [pc, #24]	; (80033d8 <HAL_RCC_OscConfig+0x470>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d1f0      	bne.n	80033ac <HAL_RCC_OscConfig+0x444>
 80033ca:	e03d      	b.n	8003448 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	699b      	ldr	r3, [r3, #24]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d107      	bne.n	80033e4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e038      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40007000 	.word	0x40007000
 80033e0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033e4:	4b1b      	ldr	r3, [pc, #108]	; (8003454 <HAL_RCC_OscConfig+0x4ec>)
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	2b01      	cmp	r3, #1
 80033f0:	d028      	beq.n	8003444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d121      	bne.n	8003444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340a:	429a      	cmp	r2, r3
 800340c:	d11a      	bne.n	8003444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003414:	4013      	ands	r3, r2
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800341a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800341c:	4293      	cmp	r3, r2
 800341e:	d111      	bne.n	8003444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342a:	085b      	lsrs	r3, r3, #1
 800342c:	3b01      	subs	r3, #1
 800342e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003430:	429a      	cmp	r2, r3
 8003432:	d107      	bne.n	8003444 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e000      	b.n	800344a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3718      	adds	r7, #24
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	40023800 	.word	0x40023800

08003458 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d101      	bne.n	800346c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e0cc      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800346c:	4b68      	ldr	r3, [pc, #416]	; (8003610 <HAL_RCC_ClockConfig+0x1b8>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0307 	and.w	r3, r3, #7
 8003474:	683a      	ldr	r2, [r7, #0]
 8003476:	429a      	cmp	r2, r3
 8003478:	d90c      	bls.n	8003494 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800347a:	4b65      	ldr	r3, [pc, #404]	; (8003610 <HAL_RCC_ClockConfig+0x1b8>)
 800347c:	683a      	ldr	r2, [r7, #0]
 800347e:	b2d2      	uxtb	r2, r2
 8003480:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003482:	4b63      	ldr	r3, [pc, #396]	; (8003610 <HAL_RCC_ClockConfig+0x1b8>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d001      	beq.n	8003494 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	e0b8      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0302 	and.w	r3, r3, #2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d020      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034ac:	4b59      	ldr	r3, [pc, #356]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	4a58      	ldr	r2, [pc, #352]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80034b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0308 	and.w	r3, r3, #8
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d005      	beq.n	80034d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034c4:	4b53      	ldr	r3, [pc, #332]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	4a52      	ldr	r2, [pc, #328]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d0:	4b50      	ldr	r3, [pc, #320]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	494d      	ldr	r1, [pc, #308]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d044      	beq.n	8003578 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	d107      	bne.n	8003506 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034f6:	4b47      	ldr	r3, [pc, #284]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d119      	bne.n	8003536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e07f      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d003      	beq.n	8003516 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003512:	2b03      	cmp	r3, #3
 8003514:	d107      	bne.n	8003526 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003516:	4b3f      	ldr	r3, [pc, #252]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d109      	bne.n	8003536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e06f      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003526:	4b3b      	ldr	r3, [pc, #236]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e067      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003536:	4b37      	ldr	r3, [pc, #220]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f023 0203 	bic.w	r2, r3, #3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	4934      	ldr	r1, [pc, #208]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	4313      	orrs	r3, r2
 8003546:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003548:	f7fd ffca 	bl	80014e0 <HAL_GetTick>
 800354c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800354e:	e00a      	b.n	8003566 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003550:	f7fd ffc6 	bl	80014e0 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	f241 3288 	movw	r2, #5000	; 0x1388
 800355e:	4293      	cmp	r3, r2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e04f      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003566:	4b2b      	ldr	r3, [pc, #172]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	f003 020c 	and.w	r2, r3, #12
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	429a      	cmp	r2, r3
 8003576:	d1eb      	bne.n	8003550 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003578:	4b25      	ldr	r3, [pc, #148]	; (8003610 <HAL_RCC_ClockConfig+0x1b8>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	683a      	ldr	r2, [r7, #0]
 8003582:	429a      	cmp	r2, r3
 8003584:	d20c      	bcs.n	80035a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003586:	4b22      	ldr	r3, [pc, #136]	; (8003610 <HAL_RCC_ClockConfig+0x1b8>)
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800358e:	4b20      	ldr	r3, [pc, #128]	; (8003610 <HAL_RCC_ClockConfig+0x1b8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0307 	and.w	r3, r3, #7
 8003596:	683a      	ldr	r2, [r7, #0]
 8003598:	429a      	cmp	r2, r3
 800359a:	d001      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800359c:	2301      	movs	r3, #1
 800359e:	e032      	b.n	8003606 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0304 	and.w	r3, r3, #4
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d008      	beq.n	80035be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035ac:	4b19      	ldr	r3, [pc, #100]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	4916      	ldr	r1, [pc, #88]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d009      	beq.n	80035de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ca:	4b12      	ldr	r3, [pc, #72]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	00db      	lsls	r3, r3, #3
 80035d8:	490e      	ldr	r1, [pc, #56]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80035da:	4313      	orrs	r3, r2
 80035dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80035de:	f000 f821 	bl	8003624 <HAL_RCC_GetSysClockFreq>
 80035e2:	4602      	mov	r2, r0
 80035e4:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <HAL_RCC_ClockConfig+0x1bc>)
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	091b      	lsrs	r3, r3, #4
 80035ea:	f003 030f 	and.w	r3, r3, #15
 80035ee:	490a      	ldr	r1, [pc, #40]	; (8003618 <HAL_RCC_ClockConfig+0x1c0>)
 80035f0:	5ccb      	ldrb	r3, [r1, r3]
 80035f2:	fa22 f303 	lsr.w	r3, r2, r3
 80035f6:	4a09      	ldr	r2, [pc, #36]	; (800361c <HAL_RCC_ClockConfig+0x1c4>)
 80035f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035fa:	4b09      	ldr	r3, [pc, #36]	; (8003620 <HAL_RCC_ClockConfig+0x1c8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4618      	mov	r0, r3
 8003600:	f7fd ff2a 	bl	8001458 <HAL_InitTick>

  return HAL_OK;
 8003604:	2300      	movs	r3, #0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3710      	adds	r7, #16
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
 800360e:	bf00      	nop
 8003610:	40023c00 	.word	0x40023c00
 8003614:	40023800 	.word	0x40023800
 8003618:	0800a8b8 	.word	0x0800a8b8
 800361c:	20000000 	.word	0x20000000
 8003620:	20000004 	.word	0x20000004

08003624 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003628:	b090      	sub	sp, #64	; 0x40
 800362a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	637b      	str	r3, [r7, #52]	; 0x34
 8003630:	2300      	movs	r3, #0
 8003632:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003634:	2300      	movs	r3, #0
 8003636:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003638:	2300      	movs	r3, #0
 800363a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800363c:	4b59      	ldr	r3, [pc, #356]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	f003 030c 	and.w	r3, r3, #12
 8003644:	2b08      	cmp	r3, #8
 8003646:	d00d      	beq.n	8003664 <HAL_RCC_GetSysClockFreq+0x40>
 8003648:	2b08      	cmp	r3, #8
 800364a:	f200 80a1 	bhi.w	8003790 <HAL_RCC_GetSysClockFreq+0x16c>
 800364e:	2b00      	cmp	r3, #0
 8003650:	d002      	beq.n	8003658 <HAL_RCC_GetSysClockFreq+0x34>
 8003652:	2b04      	cmp	r3, #4
 8003654:	d003      	beq.n	800365e <HAL_RCC_GetSysClockFreq+0x3a>
 8003656:	e09b      	b.n	8003790 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003658:	4b53      	ldr	r3, [pc, #332]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x184>)
 800365a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800365c:	e09b      	b.n	8003796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800365e:	4b53      	ldr	r3, [pc, #332]	; (80037ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003660:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003662:	e098      	b.n	8003796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003664:	4b4f      	ldr	r3, [pc, #316]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800366c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800366e:	4b4d      	ldr	r3, [pc, #308]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d028      	beq.n	80036cc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800367a:	4b4a      	ldr	r3, [pc, #296]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x180>)
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	099b      	lsrs	r3, r3, #6
 8003680:	2200      	movs	r2, #0
 8003682:	623b      	str	r3, [r7, #32]
 8003684:	627a      	str	r2, [r7, #36]	; 0x24
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800368c:	2100      	movs	r1, #0
 800368e:	4b47      	ldr	r3, [pc, #284]	; (80037ac <HAL_RCC_GetSysClockFreq+0x188>)
 8003690:	fb03 f201 	mul.w	r2, r3, r1
 8003694:	2300      	movs	r3, #0
 8003696:	fb00 f303 	mul.w	r3, r0, r3
 800369a:	4413      	add	r3, r2
 800369c:	4a43      	ldr	r2, [pc, #268]	; (80037ac <HAL_RCC_GetSysClockFreq+0x188>)
 800369e:	fba0 1202 	umull	r1, r2, r0, r2
 80036a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80036a4:	460a      	mov	r2, r1
 80036a6:	62ba      	str	r2, [r7, #40]	; 0x28
 80036a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036aa:	4413      	add	r3, r2
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b0:	2200      	movs	r2, #0
 80036b2:	61bb      	str	r3, [r7, #24]
 80036b4:	61fa      	str	r2, [r7, #28]
 80036b6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036ba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80036be:	f7fd facb 	bl	8000c58 <__aeabi_uldivmod>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4613      	mov	r3, r2
 80036c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80036ca:	e053      	b.n	8003774 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036cc:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x180>)
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	099b      	lsrs	r3, r3, #6
 80036d2:	2200      	movs	r2, #0
 80036d4:	613b      	str	r3, [r7, #16]
 80036d6:	617a      	str	r2, [r7, #20]
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80036de:	f04f 0b00 	mov.w	fp, #0
 80036e2:	4652      	mov	r2, sl
 80036e4:	465b      	mov	r3, fp
 80036e6:	f04f 0000 	mov.w	r0, #0
 80036ea:	f04f 0100 	mov.w	r1, #0
 80036ee:	0159      	lsls	r1, r3, #5
 80036f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036f4:	0150      	lsls	r0, r2, #5
 80036f6:	4602      	mov	r2, r0
 80036f8:	460b      	mov	r3, r1
 80036fa:	ebb2 080a 	subs.w	r8, r2, sl
 80036fe:	eb63 090b 	sbc.w	r9, r3, fp
 8003702:	f04f 0200 	mov.w	r2, #0
 8003706:	f04f 0300 	mov.w	r3, #0
 800370a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800370e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003712:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003716:	ebb2 0408 	subs.w	r4, r2, r8
 800371a:	eb63 0509 	sbc.w	r5, r3, r9
 800371e:	f04f 0200 	mov.w	r2, #0
 8003722:	f04f 0300 	mov.w	r3, #0
 8003726:	00eb      	lsls	r3, r5, #3
 8003728:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800372c:	00e2      	lsls	r2, r4, #3
 800372e:	4614      	mov	r4, r2
 8003730:	461d      	mov	r5, r3
 8003732:	eb14 030a 	adds.w	r3, r4, sl
 8003736:	603b      	str	r3, [r7, #0]
 8003738:	eb45 030b 	adc.w	r3, r5, fp
 800373c:	607b      	str	r3, [r7, #4]
 800373e:	f04f 0200 	mov.w	r2, #0
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	e9d7 4500 	ldrd	r4, r5, [r7]
 800374a:	4629      	mov	r1, r5
 800374c:	028b      	lsls	r3, r1, #10
 800374e:	4621      	mov	r1, r4
 8003750:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003754:	4621      	mov	r1, r4
 8003756:	028a      	lsls	r2, r1, #10
 8003758:	4610      	mov	r0, r2
 800375a:	4619      	mov	r1, r3
 800375c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800375e:	2200      	movs	r2, #0
 8003760:	60bb      	str	r3, [r7, #8]
 8003762:	60fa      	str	r2, [r7, #12]
 8003764:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003768:	f7fd fa76 	bl	8000c58 <__aeabi_uldivmod>
 800376c:	4602      	mov	r2, r0
 800376e:	460b      	mov	r3, r1
 8003770:	4613      	mov	r3, r2
 8003772:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003774:	4b0b      	ldr	r3, [pc, #44]	; (80037a4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	0c1b      	lsrs	r3, r3, #16
 800377a:	f003 0303 	and.w	r3, r3, #3
 800377e:	3301      	adds	r3, #1
 8003780:	005b      	lsls	r3, r3, #1
 8003782:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003784:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003788:	fbb2 f3f3 	udiv	r3, r2, r3
 800378c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800378e:	e002      	b.n	8003796 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003790:	4b05      	ldr	r3, [pc, #20]	; (80037a8 <HAL_RCC_GetSysClockFreq+0x184>)
 8003792:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003794:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003796:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003798:	4618      	mov	r0, r3
 800379a:	3740      	adds	r7, #64	; 0x40
 800379c:	46bd      	mov	sp, r7
 800379e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037a2:	bf00      	nop
 80037a4:	40023800 	.word	0x40023800
 80037a8:	00f42400 	.word	0x00f42400
 80037ac:	017d7840 	.word	0x017d7840

080037b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037b0:	b480      	push	{r7}
 80037b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037b4:	4b03      	ldr	r3, [pc, #12]	; (80037c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037b6:	681b      	ldr	r3, [r3, #0]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
 80037c2:	bf00      	nop
 80037c4:	20000000 	.word	0x20000000

080037c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037c8:	b084      	sub	sp, #16
 80037ca:	b580      	push	{r7, lr}
 80037cc:	b084      	sub	sp, #16
 80037ce:	af00      	add	r7, sp, #0
 80037d0:	6078      	str	r0, [r7, #4]
 80037d2:	f107 001c 	add.w	r0, r7, #28
 80037d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d122      	bne.n	8003826 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80037f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037f8:	687a      	ldr	r2, [r7, #4]
 80037fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	68db      	ldr	r3, [r3, #12]
 8003800:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800380a:	2b01      	cmp	r3, #1
 800380c:	d105      	bne.n	800381a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f001 fbee 	bl	8004ffc <USB_CoreReset>
 8003820:	4603      	mov	r3, r0
 8003822:	73fb      	strb	r3, [r7, #15]
 8003824:	e01a      	b.n	800385c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f001 fbe2 	bl	8004ffc <USB_CoreReset>
 8003838:	4603      	mov	r3, r0
 800383a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800383c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003846:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	639a      	str	r2, [r3, #56]	; 0x38
 800384e:	e005      	b.n	800385c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003854:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800385c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800385e:	2b01      	cmp	r3, #1
 8003860:	d10b      	bne.n	800387a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f043 0206 	orr.w	r2, r3, #6
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f043 0220 	orr.w	r2, r3, #32
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800387a:	7bfb      	ldrb	r3, [r7, #15]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003886:	b004      	add	sp, #16
 8003888:	4770      	bx	lr
	...

0800388c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800388c:	b480      	push	{r7}
 800388e:	b087      	sub	sp, #28
 8003890:	af00      	add	r7, sp, #0
 8003892:	60f8      	str	r0, [r7, #12]
 8003894:	60b9      	str	r1, [r7, #8]
 8003896:	4613      	mov	r3, r2
 8003898:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	2b02      	cmp	r3, #2
 800389e:	d165      	bne.n	800396c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	4a41      	ldr	r2, [pc, #260]	; (80039a8 <USB_SetTurnaroundTime+0x11c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d906      	bls.n	80038b6 <USB_SetTurnaroundTime+0x2a>
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	4a40      	ldr	r2, [pc, #256]	; (80039ac <USB_SetTurnaroundTime+0x120>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d202      	bcs.n	80038b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80038b0:	230f      	movs	r3, #15
 80038b2:	617b      	str	r3, [r7, #20]
 80038b4:	e062      	b.n	800397c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	4a3c      	ldr	r2, [pc, #240]	; (80039ac <USB_SetTurnaroundTime+0x120>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d306      	bcc.n	80038cc <USB_SetTurnaroundTime+0x40>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	4a3b      	ldr	r2, [pc, #236]	; (80039b0 <USB_SetTurnaroundTime+0x124>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d202      	bcs.n	80038cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80038c6:	230e      	movs	r3, #14
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	e057      	b.n	800397c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80038cc:	68bb      	ldr	r3, [r7, #8]
 80038ce:	4a38      	ldr	r2, [pc, #224]	; (80039b0 <USB_SetTurnaroundTime+0x124>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d306      	bcc.n	80038e2 <USB_SetTurnaroundTime+0x56>
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	4a37      	ldr	r2, [pc, #220]	; (80039b4 <USB_SetTurnaroundTime+0x128>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d202      	bcs.n	80038e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80038dc:	230d      	movs	r3, #13
 80038de:	617b      	str	r3, [r7, #20]
 80038e0:	e04c      	b.n	800397c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	4a33      	ldr	r2, [pc, #204]	; (80039b4 <USB_SetTurnaroundTime+0x128>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d306      	bcc.n	80038f8 <USB_SetTurnaroundTime+0x6c>
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	4a32      	ldr	r2, [pc, #200]	; (80039b8 <USB_SetTurnaroundTime+0x12c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d802      	bhi.n	80038f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80038f2:	230c      	movs	r3, #12
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	e041      	b.n	800397c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4a2f      	ldr	r2, [pc, #188]	; (80039b8 <USB_SetTurnaroundTime+0x12c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d906      	bls.n	800390e <USB_SetTurnaroundTime+0x82>
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	4a2e      	ldr	r2, [pc, #184]	; (80039bc <USB_SetTurnaroundTime+0x130>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d802      	bhi.n	800390e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003908:	230b      	movs	r3, #11
 800390a:	617b      	str	r3, [r7, #20]
 800390c:	e036      	b.n	800397c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	4a2a      	ldr	r2, [pc, #168]	; (80039bc <USB_SetTurnaroundTime+0x130>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d906      	bls.n	8003924 <USB_SetTurnaroundTime+0x98>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	4a29      	ldr	r2, [pc, #164]	; (80039c0 <USB_SetTurnaroundTime+0x134>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d802      	bhi.n	8003924 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800391e:	230a      	movs	r3, #10
 8003920:	617b      	str	r3, [r7, #20]
 8003922:	e02b      	b.n	800397c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	4a26      	ldr	r2, [pc, #152]	; (80039c0 <USB_SetTurnaroundTime+0x134>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d906      	bls.n	800393a <USB_SetTurnaroundTime+0xae>
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4a25      	ldr	r2, [pc, #148]	; (80039c4 <USB_SetTurnaroundTime+0x138>)
 8003930:	4293      	cmp	r3, r2
 8003932:	d202      	bcs.n	800393a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003934:	2309      	movs	r3, #9
 8003936:	617b      	str	r3, [r7, #20]
 8003938:	e020      	b.n	800397c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	4a21      	ldr	r2, [pc, #132]	; (80039c4 <USB_SetTurnaroundTime+0x138>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d306      	bcc.n	8003950 <USB_SetTurnaroundTime+0xc4>
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	4a20      	ldr	r2, [pc, #128]	; (80039c8 <USB_SetTurnaroundTime+0x13c>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d802      	bhi.n	8003950 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800394a:	2308      	movs	r3, #8
 800394c:	617b      	str	r3, [r7, #20]
 800394e:	e015      	b.n	800397c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003950:	68bb      	ldr	r3, [r7, #8]
 8003952:	4a1d      	ldr	r2, [pc, #116]	; (80039c8 <USB_SetTurnaroundTime+0x13c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d906      	bls.n	8003966 <USB_SetTurnaroundTime+0xda>
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	4a1c      	ldr	r2, [pc, #112]	; (80039cc <USB_SetTurnaroundTime+0x140>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d202      	bcs.n	8003966 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003960:	2307      	movs	r3, #7
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	e00a      	b.n	800397c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003966:	2306      	movs	r3, #6
 8003968:	617b      	str	r3, [r7, #20]
 800396a:	e007      	b.n	800397c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800396c:	79fb      	ldrb	r3, [r7, #7]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d102      	bne.n	8003978 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003972:	2309      	movs	r3, #9
 8003974:	617b      	str	r3, [r7, #20]
 8003976:	e001      	b.n	800397c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003978:	2309      	movs	r3, #9
 800397a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	029b      	lsls	r3, r3, #10
 8003990:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003994:	431a      	orrs	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800399a:	2300      	movs	r3, #0
}
 800399c:	4618      	mov	r0, r3
 800399e:	371c      	adds	r7, #28
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	00d8acbf 	.word	0x00d8acbf
 80039ac:	00e4e1c0 	.word	0x00e4e1c0
 80039b0:	00f42400 	.word	0x00f42400
 80039b4:	01067380 	.word	0x01067380
 80039b8:	011a499f 	.word	0x011a499f
 80039bc:	01312cff 	.word	0x01312cff
 80039c0:	014ca43f 	.word	0x014ca43f
 80039c4:	016e3600 	.word	0x016e3600
 80039c8:	01a6ab1f 	.word	0x01a6ab1f
 80039cc:	01e84800 	.word	0x01e84800

080039d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f043 0201 	orr.w	r2, r3, #1
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	370c      	adds	r7, #12
 80039ea:	46bd      	mov	sp, r7
 80039ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f0:	4770      	bx	lr

080039f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039f2:	b480      	push	{r7}
 80039f4:	b083      	sub	sp, #12
 80039f6:	af00      	add	r7, sp, #0
 80039f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f023 0201 	bic.w	r2, r3, #1
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a06:	2300      	movs	r3, #0
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	370c      	adds	r7, #12
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr

08003a14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b084      	sub	sp, #16
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003a30:	78fb      	ldrb	r3, [r7, #3]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d115      	bne.n	8003a62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a42:	2001      	movs	r0, #1
 8003a44:	f7fd fd58 	bl	80014f8 <HAL_Delay>
      ms++;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f001 fa45 	bl	8004ede <USB_GetMode>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d01e      	beq.n	8003a98 <USB_SetCurrentMode+0x84>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b31      	cmp	r3, #49	; 0x31
 8003a5e:	d9f0      	bls.n	8003a42 <USB_SetCurrentMode+0x2e>
 8003a60:	e01a      	b.n	8003a98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a62:	78fb      	ldrb	r3, [r7, #3]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d115      	bne.n	8003a94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	68db      	ldr	r3, [r3, #12]
 8003a6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a74:	2001      	movs	r0, #1
 8003a76:	f7fd fd3f 	bl	80014f8 <HAL_Delay>
      ms++;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a80:	6878      	ldr	r0, [r7, #4]
 8003a82:	f001 fa2c 	bl	8004ede <USB_GetMode>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d005      	beq.n	8003a98 <USB_SetCurrentMode+0x84>
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2b31      	cmp	r3, #49	; 0x31
 8003a90:	d9f0      	bls.n	8003a74 <USB_SetCurrentMode+0x60>
 8003a92:	e001      	b.n	8003a98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e005      	b.n	8003aa4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2b32      	cmp	r3, #50	; 0x32
 8003a9c:	d101      	bne.n	8003aa2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003aac:	b084      	sub	sp, #16
 8003aae:	b580      	push	{r7, lr}
 8003ab0:	b086      	sub	sp, #24
 8003ab2:	af00      	add	r7, sp, #0
 8003ab4:	6078      	str	r0, [r7, #4]
 8003ab6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003aba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	613b      	str	r3, [r7, #16]
 8003aca:	e009      	b.n	8003ae0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	3340      	adds	r3, #64	; 0x40
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003ada:	693b      	ldr	r3, [r7, #16]
 8003adc:	3301      	adds	r3, #1
 8003ade:	613b      	str	r3, [r7, #16]
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	2b0e      	cmp	r3, #14
 8003ae4:	d9f2      	bls.n	8003acc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003ae6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d11c      	bne.n	8003b26 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003afa:	f043 0302 	orr.w	r3, r3, #2
 8003afe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b04:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b10:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b1c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	639a      	str	r2, [r3, #56]	; 0x38
 8003b24:	e00b      	b.n	8003b3e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b2a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b36:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b44:	461a      	mov	r2, r3
 8003b46:	2300      	movs	r3, #0
 8003b48:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b50:	4619      	mov	r1, r3
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b58:	461a      	mov	r2, r3
 8003b5a:	680b      	ldr	r3, [r1, #0]
 8003b5c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d10c      	bne.n	8003b7e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d104      	bne.n	8003b74 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f000 f965 	bl	8003e3c <USB_SetDevSpeed>
 8003b72:	e008      	b.n	8003b86 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b74:	2101      	movs	r1, #1
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f960 	bl	8003e3c <USB_SetDevSpeed>
 8003b7c:	e003      	b.n	8003b86 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b7e:	2103      	movs	r1, #3
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 f95b 	bl	8003e3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b86:	2110      	movs	r1, #16
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 f8f3 	bl	8003d74 <USB_FlushTxFifo>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d001      	beq.n	8003b98 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f91f 	bl	8003ddc <USB_FlushRxFifo>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bae:	461a      	mov	r2, r3
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bba:	461a      	mov	r2, r3
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bcc:	2300      	movs	r3, #0
 8003bce:	613b      	str	r3, [r7, #16]
 8003bd0:	e043      	b.n	8003c5a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	015a      	lsls	r2, r3, #5
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	4413      	add	r3, r2
 8003bda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003be4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003be8:	d118      	bne.n	8003c1c <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d10a      	bne.n	8003c06 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	015a      	lsls	r2, r3, #5
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4413      	add	r3, r2
 8003bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfc:	461a      	mov	r2, r3
 8003bfe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c02:	6013      	str	r3, [r2, #0]
 8003c04:	e013      	b.n	8003c2e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	015a      	lsls	r2, r3, #5
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c12:	461a      	mov	r2, r3
 8003c14:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	e008      	b.n	8003c2e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	015a      	lsls	r2, r3, #5
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	4413      	add	r3, r2
 8003c48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c52:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	3301      	adds	r3, #1
 8003c58:	613b      	str	r3, [r7, #16]
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	693a      	ldr	r2, [r7, #16]
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d3b7      	bcc.n	8003bd2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c62:	2300      	movs	r3, #0
 8003c64:	613b      	str	r3, [r7, #16]
 8003c66:	e043      	b.n	8003cf0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	015a      	lsls	r2, r3, #5
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	4413      	add	r3, r2
 8003c70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c7e:	d118      	bne.n	8003cb2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d10a      	bne.n	8003c9c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	015a      	lsls	r2, r3, #5
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c92:	461a      	mov	r2, r3
 8003c94:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c98:	6013      	str	r3, [r2, #0]
 8003c9a:	e013      	b.n	8003cc4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	015a      	lsls	r2, r3, #5
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	4413      	add	r3, r2
 8003ca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca8:	461a      	mov	r2, r3
 8003caa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003cae:	6013      	str	r3, [r2, #0]
 8003cb0:	e008      	b.n	8003cc4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	015a      	lsls	r2, r3, #5
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	4413      	add	r3, r2
 8003cba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	015a      	lsls	r2, r3, #5
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	4413      	add	r3, r2
 8003ccc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cd0:	461a      	mov	r2, r3
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ce8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	3301      	adds	r3, #1
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d3b7      	bcc.n	8003c68 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d0a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003d18:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d105      	bne.n	8003d2c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	f043 0210 	orr.w	r2, r3, #16
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	699a      	ldr	r2, [r3, #24]
 8003d30:	4b0f      	ldr	r3, [pc, #60]	; (8003d70 <USB_DevInit+0x2c4>)
 8003d32:	4313      	orrs	r3, r2
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d005      	beq.n	8003d4a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	f043 0208 	orr.w	r2, r3, #8
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d107      	bne.n	8003d60 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d58:	f043 0304 	orr.w	r3, r3, #4
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d60:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3718      	adds	r7, #24
 8003d66:	46bd      	mov	sp, r7
 8003d68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d6c:	b004      	add	sp, #16
 8003d6e:	4770      	bx	lr
 8003d70:	803c3800 	.word	0x803c3800

08003d74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	3301      	adds	r3, #1
 8003d86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	4a13      	ldr	r2, [pc, #76]	; (8003dd8 <USB_FlushTxFifo+0x64>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d901      	bls.n	8003d94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e01b      	b.n	8003dcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	daf2      	bge.n	8003d82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	019b      	lsls	r3, r3, #6
 8003da4:	f043 0220 	orr.w	r2, r3, #32
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	3301      	adds	r3, #1
 8003db0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	4a08      	ldr	r2, [pc, #32]	; (8003dd8 <USB_FlushTxFifo+0x64>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d901      	bls.n	8003dbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e006      	b.n	8003dcc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	f003 0320 	and.w	r3, r3, #32
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d0f0      	beq.n	8003dac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003dca:	2300      	movs	r3, #0
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3714      	adds	r7, #20
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr
 8003dd8:	00030d40 	.word	0x00030d40

08003ddc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b085      	sub	sp, #20
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	3301      	adds	r3, #1
 8003dec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	4a11      	ldr	r2, [pc, #68]	; (8003e38 <USB_FlushRxFifo+0x5c>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e018      	b.n	8003e2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	daf2      	bge.n	8003de8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e02:	2300      	movs	r3, #0
 8003e04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2210      	movs	r2, #16
 8003e0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3301      	adds	r3, #1
 8003e10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	4a08      	ldr	r2, [pc, #32]	; (8003e38 <USB_FlushRxFifo+0x5c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d901      	bls.n	8003e1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e006      	b.n	8003e2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	f003 0310 	and.w	r3, r3, #16
 8003e26:	2b10      	cmp	r3, #16
 8003e28:	d0f0      	beq.n	8003e0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003e2a:	2300      	movs	r3, #0
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3714      	adds	r7, #20
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	00030d40 	.word	0x00030d40

08003e3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b085      	sub	sp, #20
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e52:	681a      	ldr	r2, [r3, #0]
 8003e54:	78fb      	ldrb	r3, [r7, #3]
 8003e56:	68f9      	ldr	r1, [r7, #12]
 8003e58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3714      	adds	r7, #20
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b087      	sub	sp, #28
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e80:	689b      	ldr	r3, [r3, #8]
 8003e82:	f003 0306 	and.w	r3, r3, #6
 8003e86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d102      	bne.n	8003e94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	75fb      	strb	r3, [r7, #23]
 8003e92:	e00a      	b.n	8003eaa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d002      	beq.n	8003ea0 <USB_GetDevSpeed+0x32>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2b06      	cmp	r3, #6
 8003e9e:	d102      	bne.n	8003ea6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003ea0:	2302      	movs	r3, #2
 8003ea2:	75fb      	strb	r3, [r7, #23]
 8003ea4:	e001      	b.n	8003eaa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003ea6:	230f      	movs	r3, #15
 8003ea8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003eaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	371c      	adds	r7, #28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb6:	4770      	bx	lr

08003eb8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	781b      	ldrb	r3, [r3, #0]
 8003eca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	785b      	ldrb	r3, [r3, #1]
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d13a      	bne.n	8003f4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003eda:	69da      	ldr	r2, [r3, #28]
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	f003 030f 	and.w	r3, r3, #15
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eea:	b29b      	uxth	r3, r3
 8003eec:	68f9      	ldr	r1, [r7, #12]
 8003eee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	015a      	lsls	r2, r3, #5
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	4413      	add	r3, r2
 8003efe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d155      	bne.n	8003fb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	015a      	lsls	r2, r3, #5
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	4413      	add	r3, r2
 8003f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	791b      	ldrb	r3, [r3, #4]
 8003f26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	059b      	lsls	r3, r3, #22
 8003f2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f30:	4313      	orrs	r3, r2
 8003f32:	68ba      	ldr	r2, [r7, #8]
 8003f34:	0151      	lsls	r1, r2, #5
 8003f36:	68fa      	ldr	r2, [r7, #12]
 8003f38:	440a      	add	r2, r1
 8003f3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f46:	6013      	str	r3, [r2, #0]
 8003f48:	e036      	b.n	8003fb8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f50:	69da      	ldr	r2, [r3, #28]
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	f003 030f 	and.w	r3, r3, #15
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f60:	041b      	lsls	r3, r3, #16
 8003f62:	68f9      	ldr	r1, [r7, #12]
 8003f64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	015a      	lsls	r2, r3, #5
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4413      	add	r3, r2
 8003f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d11a      	bne.n	8003fb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	015a      	lsls	r2, r3, #5
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	4413      	add	r3, r2
 8003f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	791b      	ldrb	r3, [r3, #4]
 8003f9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f9e:	430b      	orrs	r3, r1
 8003fa0:	4313      	orrs	r3, r2
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	0151      	lsls	r1, r2, #5
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	440a      	add	r2, r1
 8003faa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fb6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3714      	adds	r7, #20
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
	...

08003fc8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b085      	sub	sp, #20
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
 8003fd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	785b      	ldrb	r3, [r3, #1]
 8003fe0:	2b01      	cmp	r3, #1
 8003fe2:	d161      	bne.n	80040a8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ff6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ffa:	d11f      	bne.n	800403c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	015a      	lsls	r2, r3, #5
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4413      	add	r3, r2
 8004004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	0151      	lsls	r1, r2, #5
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	440a      	add	r2, r1
 8004012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004016:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800401a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	015a      	lsls	r2, r3, #5
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	4413      	add	r3, r2
 8004024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	0151      	lsls	r1, r2, #5
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	440a      	add	r2, r1
 8004032:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004036:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800403a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004042:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	2101      	movs	r1, #1
 800404e:	fa01 f303 	lsl.w	r3, r1, r3
 8004052:	b29b      	uxth	r3, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	68f9      	ldr	r1, [r7, #12]
 8004058:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800405c:	4013      	ands	r3, r2
 800405e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004066:	69da      	ldr	r2, [r3, #28]
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	f003 030f 	and.w	r3, r3, #15
 8004070:	2101      	movs	r1, #1
 8004072:	fa01 f303 	lsl.w	r3, r1, r3
 8004076:	b29b      	uxth	r3, r3
 8004078:	43db      	mvns	r3, r3
 800407a:	68f9      	ldr	r1, [r7, #12]
 800407c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004080:	4013      	ands	r3, r2
 8004082:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	0159      	lsls	r1, r3, #5
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	440b      	add	r3, r1
 800409a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800409e:	4619      	mov	r1, r3
 80040a0:	4b35      	ldr	r3, [pc, #212]	; (8004178 <USB_DeactivateEndpoint+0x1b0>)
 80040a2:	4013      	ands	r3, r2
 80040a4:	600b      	str	r3, [r1, #0]
 80040a6:	e060      	b.n	800416a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	015a      	lsls	r2, r3, #5
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4413      	add	r3, r2
 80040b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040be:	d11f      	bne.n	8004100 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80040c0:	68bb      	ldr	r3, [r7, #8]
 80040c2:	015a      	lsls	r2, r3, #5
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	4413      	add	r3, r2
 80040c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68ba      	ldr	r2, [r7, #8]
 80040d0:	0151      	lsls	r1, r2, #5
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	440a      	add	r2, r1
 80040d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80040de:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68ba      	ldr	r2, [r7, #8]
 80040f0:	0151      	lsls	r1, r2, #5
 80040f2:	68fa      	ldr	r2, [r7, #12]
 80040f4:	440a      	add	r2, r1
 80040f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040fa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040fe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004106:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	f003 030f 	and.w	r3, r3, #15
 8004110:	2101      	movs	r1, #1
 8004112:	fa01 f303 	lsl.w	r3, r1, r3
 8004116:	041b      	lsls	r3, r3, #16
 8004118:	43db      	mvns	r3, r3
 800411a:	68f9      	ldr	r1, [r7, #12]
 800411c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004120:	4013      	ands	r3, r2
 8004122:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412a:	69da      	ldr	r2, [r3, #28]
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	f003 030f 	and.w	r3, r3, #15
 8004134:	2101      	movs	r1, #1
 8004136:	fa01 f303 	lsl.w	r3, r1, r3
 800413a:	041b      	lsls	r3, r3, #16
 800413c:	43db      	mvns	r3, r3
 800413e:	68f9      	ldr	r1, [r7, #12]
 8004140:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004144:	4013      	ands	r3, r2
 8004146:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	0159      	lsls	r1, r3, #5
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	440b      	add	r3, r1
 800415e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004162:	4619      	mov	r1, r3
 8004164:	4b05      	ldr	r3, [pc, #20]	; (800417c <USB_DeactivateEndpoint+0x1b4>)
 8004166:	4013      	ands	r3, r2
 8004168:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	ec337800 	.word	0xec337800
 800417c:	eff37800 	.word	0xeff37800

08004180 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b08a      	sub	sp, #40	; 0x28
 8004184:	af02      	add	r7, sp, #8
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	4613      	mov	r3, r2
 800418c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	785b      	ldrb	r3, [r3, #1]
 800419c:	2b01      	cmp	r3, #1
 800419e:	f040 815c 	bne.w	800445a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	699b      	ldr	r3, [r3, #24]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d132      	bne.n	8004210 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	015a      	lsls	r2, r3, #5
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	4413      	add	r3, r2
 80041b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	69ba      	ldr	r2, [r7, #24]
 80041ba:	0151      	lsls	r1, r2, #5
 80041bc:	69fa      	ldr	r2, [r7, #28]
 80041be:	440a      	add	r2, r1
 80041c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041c8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	0151      	lsls	r1, r2, #5
 80041e0:	69fa      	ldr	r2, [r7, #28]
 80041e2:	440a      	add	r2, r1
 80041e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041ec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041ee:	69bb      	ldr	r3, [r7, #24]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	0151      	lsls	r1, r2, #5
 8004200:	69fa      	ldr	r2, [r7, #28]
 8004202:	440a      	add	r2, r1
 8004204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004208:	0cdb      	lsrs	r3, r3, #19
 800420a:	04db      	lsls	r3, r3, #19
 800420c:	6113      	str	r3, [r2, #16]
 800420e:	e074      	b.n	80042fa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421c:	691b      	ldr	r3, [r3, #16]
 800421e:	69ba      	ldr	r2, [r7, #24]
 8004220:	0151      	lsls	r1, r2, #5
 8004222:	69fa      	ldr	r2, [r7, #28]
 8004224:	440a      	add	r2, r1
 8004226:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800422a:	0cdb      	lsrs	r3, r3, #19
 800422c:	04db      	lsls	r3, r3, #19
 800422e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004230:	69bb      	ldr	r3, [r7, #24]
 8004232:	015a      	lsls	r2, r3, #5
 8004234:	69fb      	ldr	r3, [r7, #28]
 8004236:	4413      	add	r3, r2
 8004238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800423c:	691b      	ldr	r3, [r3, #16]
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	0151      	lsls	r1, r2, #5
 8004242:	69fa      	ldr	r2, [r7, #28]
 8004244:	440a      	add	r2, r1
 8004246:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800424a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800424e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004252:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004254:	69bb      	ldr	r3, [r7, #24]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	69fb      	ldr	r3, [r7, #28]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004260:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004262:	68bb      	ldr	r3, [r7, #8]
 8004264:	6999      	ldr	r1, [r3, #24]
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	440b      	add	r3, r1
 800426c:	1e59      	subs	r1, r3, #1
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	fbb1 f3f3 	udiv	r3, r1, r3
 8004276:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004278:	4b9d      	ldr	r3, [pc, #628]	; (80044f0 <USB_EPStartXfer+0x370>)
 800427a:	400b      	ands	r3, r1
 800427c:	69b9      	ldr	r1, [r7, #24]
 800427e:	0148      	lsls	r0, r1, #5
 8004280:	69f9      	ldr	r1, [r7, #28]
 8004282:	4401      	add	r1, r0
 8004284:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004288:	4313      	orrs	r3, r2
 800428a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	015a      	lsls	r2, r3, #5
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	4413      	add	r3, r2
 8004294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004298:	691a      	ldr	r2, [r3, #16]
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	699b      	ldr	r3, [r3, #24]
 800429e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042a2:	69b9      	ldr	r1, [r7, #24]
 80042a4:	0148      	lsls	r0, r1, #5
 80042a6:	69f9      	ldr	r1, [r7, #28]
 80042a8:	4401      	add	r1, r0
 80042aa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80042ae:	4313      	orrs	r3, r2
 80042b0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	791b      	ldrb	r3, [r3, #4]
 80042b6:	2b01      	cmp	r3, #1
 80042b8:	d11f      	bne.n	80042fa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	015a      	lsls	r2, r3, #5
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	4413      	add	r3, r2
 80042c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c6:	691b      	ldr	r3, [r3, #16]
 80042c8:	69ba      	ldr	r2, [r7, #24]
 80042ca:	0151      	lsls	r1, r2, #5
 80042cc:	69fa      	ldr	r2, [r7, #28]
 80042ce:	440a      	add	r2, r1
 80042d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80042d8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	015a      	lsls	r2, r3, #5
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	4413      	add	r3, r2
 80042e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042e6:	691b      	ldr	r3, [r3, #16]
 80042e8:	69ba      	ldr	r2, [r7, #24]
 80042ea:	0151      	lsls	r1, r2, #5
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	440a      	add	r2, r1
 80042f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042f8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80042fa:	79fb      	ldrb	r3, [r7, #7]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d14b      	bne.n	8004398 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d009      	beq.n	800431c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	69fb      	ldr	r3, [r7, #28]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004314:	461a      	mov	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	695b      	ldr	r3, [r3, #20]
 800431a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	791b      	ldrb	r3, [r3, #4]
 8004320:	2b01      	cmp	r3, #1
 8004322:	d128      	bne.n	8004376 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004324:	69fb      	ldr	r3, [r7, #28]
 8004326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004330:	2b00      	cmp	r3, #0
 8004332:	d110      	bne.n	8004356 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	015a      	lsls	r2, r3, #5
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	4413      	add	r3, r2
 800433c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	69ba      	ldr	r2, [r7, #24]
 8004344:	0151      	lsls	r1, r2, #5
 8004346:	69fa      	ldr	r2, [r7, #28]
 8004348:	440a      	add	r2, r1
 800434a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800434e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004352:	6013      	str	r3, [r2, #0]
 8004354:	e00f      	b.n	8004376 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	015a      	lsls	r2, r3, #5
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	4413      	add	r3, r2
 800435e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	69ba      	ldr	r2, [r7, #24]
 8004366:	0151      	lsls	r1, r2, #5
 8004368:	69fa      	ldr	r2, [r7, #28]
 800436a:	440a      	add	r2, r1
 800436c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004374:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004376:	69bb      	ldr	r3, [r7, #24]
 8004378:	015a      	lsls	r2, r3, #5
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	4413      	add	r3, r2
 800437e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	69ba      	ldr	r2, [r7, #24]
 8004386:	0151      	lsls	r1, r2, #5
 8004388:	69fa      	ldr	r2, [r7, #28]
 800438a:	440a      	add	r2, r1
 800438c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004390:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e133      	b.n	8004600 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	015a      	lsls	r2, r3, #5
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	4413      	add	r3, r2
 80043a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	0151      	lsls	r1, r2, #5
 80043aa:	69fa      	ldr	r2, [r7, #28]
 80043ac:	440a      	add	r2, r1
 80043ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80043b6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	791b      	ldrb	r3, [r3, #4]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d015      	beq.n	80043ec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	699b      	ldr	r3, [r3, #24]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 811b 	beq.w	8004600 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80043ca:	69fb      	ldr	r3, [r7, #28]
 80043cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	781b      	ldrb	r3, [r3, #0]
 80043d6:	f003 030f 	and.w	r3, r3, #15
 80043da:	2101      	movs	r1, #1
 80043dc:	fa01 f303 	lsl.w	r3, r1, r3
 80043e0:	69f9      	ldr	r1, [r7, #28]
 80043e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043e6:	4313      	orrs	r3, r2
 80043e8:	634b      	str	r3, [r1, #52]	; 0x34
 80043ea:	e109      	b.n	8004600 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d110      	bne.n	800441e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004416:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	e00f      	b.n	800443e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	4413      	add	r3, r2
 8004426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	69ba      	ldr	r2, [r7, #24]
 800442e:	0151      	lsls	r1, r2, #5
 8004430:	69fa      	ldr	r2, [r7, #28]
 8004432:	440a      	add	r2, r1
 8004434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004438:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800443c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	6919      	ldr	r1, [r3, #16]
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	781a      	ldrb	r2, [r3, #0]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	b298      	uxth	r0, r3
 800444c:	79fb      	ldrb	r3, [r7, #7]
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	4603      	mov	r3, r0
 8004452:	68f8      	ldr	r0, [r7, #12]
 8004454:	f000 fade 	bl	8004a14 <USB_WritePacket>
 8004458:	e0d2      	b.n	8004600 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800445a:	69bb      	ldr	r3, [r7, #24]
 800445c:	015a      	lsls	r2, r3, #5
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	4413      	add	r3, r2
 8004462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004466:	691b      	ldr	r3, [r3, #16]
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	0151      	lsls	r1, r2, #5
 800446c:	69fa      	ldr	r2, [r7, #28]
 800446e:	440a      	add	r2, r1
 8004470:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004474:	0cdb      	lsrs	r3, r3, #19
 8004476:	04db      	lsls	r3, r3, #19
 8004478:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	015a      	lsls	r2, r3, #5
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	4413      	add	r3, r2
 8004482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004486:	691b      	ldr	r3, [r3, #16]
 8004488:	69ba      	ldr	r2, [r7, #24]
 800448a:	0151      	lsls	r1, r2, #5
 800448c:	69fa      	ldr	r2, [r7, #28]
 800448e:	440a      	add	r2, r1
 8004490:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004494:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004498:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800449c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d126      	bne.n	80044f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044b2:	691a      	ldr	r2, [r3, #16]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044bc:	69b9      	ldr	r1, [r7, #24]
 80044be:	0148      	lsls	r0, r1, #5
 80044c0:	69f9      	ldr	r1, [r7, #28]
 80044c2:	4401      	add	r1, r0
 80044c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044c8:	4313      	orrs	r3, r2
 80044ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	0151      	lsls	r1, r2, #5
 80044de:	69fa      	ldr	r2, [r7, #28]
 80044e0:	440a      	add	r2, r1
 80044e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044ea:	6113      	str	r3, [r2, #16]
 80044ec:	e03a      	b.n	8004564 <USB_EPStartXfer+0x3e4>
 80044ee:	bf00      	nop
 80044f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	68db      	ldr	r3, [r3, #12]
 80044fc:	4413      	add	r3, r2
 80044fe:	1e5a      	subs	r2, r3, #1
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	68db      	ldr	r3, [r3, #12]
 8004504:	fbb2 f3f3 	udiv	r3, r2, r3
 8004508:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	68db      	ldr	r3, [r3, #12]
 800450e:	8afa      	ldrh	r2, [r7, #22]
 8004510:	fb03 f202 	mul.w	r2, r3, r2
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	015a      	lsls	r2, r3, #5
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	4413      	add	r3, r2
 8004520:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004524:	691a      	ldr	r2, [r3, #16]
 8004526:	8afb      	ldrh	r3, [r7, #22]
 8004528:	04d9      	lsls	r1, r3, #19
 800452a:	4b38      	ldr	r3, [pc, #224]	; (800460c <USB_EPStartXfer+0x48c>)
 800452c:	400b      	ands	r3, r1
 800452e:	69b9      	ldr	r1, [r7, #24]
 8004530:	0148      	lsls	r0, r1, #5
 8004532:	69f9      	ldr	r1, [r7, #28]
 8004534:	4401      	add	r1, r0
 8004536:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800453a:	4313      	orrs	r3, r2
 800453c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800453e:	69bb      	ldr	r3, [r7, #24]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	69db      	ldr	r3, [r3, #28]
 8004550:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004554:	69b9      	ldr	r1, [r7, #24]
 8004556:	0148      	lsls	r0, r1, #5
 8004558:	69f9      	ldr	r1, [r7, #28]
 800455a:	4401      	add	r1, r0
 800455c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004560:	4313      	orrs	r3, r2
 8004562:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004564:	79fb      	ldrb	r3, [r7, #7]
 8004566:	2b01      	cmp	r3, #1
 8004568:	d10d      	bne.n	8004586 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	691b      	ldr	r3, [r3, #16]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	6919      	ldr	r1, [r3, #16]
 8004576:	69bb      	ldr	r3, [r7, #24]
 8004578:	015a      	lsls	r2, r3, #5
 800457a:	69fb      	ldr	r3, [r7, #28]
 800457c:	4413      	add	r3, r2
 800457e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004582:	460a      	mov	r2, r1
 8004584:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	791b      	ldrb	r3, [r3, #4]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d128      	bne.n	80045e0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800459a:	2b00      	cmp	r3, #0
 800459c:	d110      	bne.n	80045c0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	015a      	lsls	r2, r3, #5
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	4413      	add	r3, r2
 80045a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	69ba      	ldr	r2, [r7, #24]
 80045ae:	0151      	lsls	r1, r2, #5
 80045b0:	69fa      	ldr	r2, [r7, #28]
 80045b2:	440a      	add	r2, r1
 80045b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	e00f      	b.n	80045e0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	015a      	lsls	r2, r3, #5
 80045c4:	69fb      	ldr	r3, [r7, #28]
 80045c6:	4413      	add	r3, r2
 80045c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	0151      	lsls	r1, r2, #5
 80045d2:	69fa      	ldr	r2, [r7, #28]
 80045d4:	440a      	add	r2, r1
 80045d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	015a      	lsls	r2, r3, #5
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	4413      	add	r3, r2
 80045e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	0151      	lsls	r1, r2, #5
 80045f2:	69fa      	ldr	r2, [r7, #28]
 80045f4:	440a      	add	r2, r1
 80045f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	3720      	adds	r7, #32
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	1ff80000 	.word	0x1ff80000

08004610 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004610:	b480      	push	{r7}
 8004612:	b087      	sub	sp, #28
 8004614:	af00      	add	r7, sp, #0
 8004616:	60f8      	str	r0, [r7, #12]
 8004618:	60b9      	str	r1, [r7, #8]
 800461a:	4613      	mov	r3, r2
 800461c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004622:	68bb      	ldr	r3, [r7, #8]
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	785b      	ldrb	r3, [r3, #1]
 800462c:	2b01      	cmp	r3, #1
 800462e:	f040 80ce 	bne.w	80047ce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d132      	bne.n	80046a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	0151      	lsls	r1, r2, #5
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	440a      	add	r2, r1
 8004650:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004654:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004658:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800465c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	0151      	lsls	r1, r2, #5
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	440a      	add	r2, r1
 8004674:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004678:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800467c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	693a      	ldr	r2, [r7, #16]
 800468e:	0151      	lsls	r1, r2, #5
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	440a      	add	r2, r1
 8004694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004698:	0cdb      	lsrs	r3, r3, #19
 800469a:	04db      	lsls	r3, r3, #19
 800469c:	6113      	str	r3, [r2, #16]
 800469e:	e04e      	b.n	800473e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	015a      	lsls	r2, r3, #5
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	4413      	add	r3, r2
 80046a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	0151      	lsls	r1, r2, #5
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	440a      	add	r2, r1
 80046b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ba:	0cdb      	lsrs	r3, r3, #19
 80046bc:	04db      	lsls	r3, r3, #19
 80046be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	015a      	lsls	r2, r3, #5
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	4413      	add	r3, r2
 80046c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	0151      	lsls	r1, r2, #5
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	440a      	add	r2, r1
 80046d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046e2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	699a      	ldr	r2, [r3, #24]
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d903      	bls.n	80046f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	68da      	ldr	r2, [r3, #12]
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	0151      	lsls	r1, r2, #5
 800470a:	697a      	ldr	r2, [r7, #20]
 800470c:	440a      	add	r2, r1
 800470e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004712:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004716:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004724:	691a      	ldr	r2, [r3, #16]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800472e:	6939      	ldr	r1, [r7, #16]
 8004730:	0148      	lsls	r0, r1, #5
 8004732:	6979      	ldr	r1, [r7, #20]
 8004734:	4401      	add	r1, r0
 8004736:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800473a:	4313      	orrs	r3, r2
 800473c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800473e:	79fb      	ldrb	r3, [r7, #7]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d11e      	bne.n	8004782 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d009      	beq.n	8004760 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	015a      	lsls	r2, r3, #5
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	4413      	add	r3, r2
 8004754:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004758:	461a      	mov	r2, r3
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	015a      	lsls	r2, r3, #5
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	4413      	add	r3, r2
 8004768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	693a      	ldr	r2, [r7, #16]
 8004770:	0151      	lsls	r1, r2, #5
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	440a      	add	r2, r1
 8004776:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800477a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800477e:	6013      	str	r3, [r2, #0]
 8004780:	e097      	b.n	80048b2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	015a      	lsls	r2, r3, #5
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	4413      	add	r3, r2
 800478a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	0151      	lsls	r1, r2, #5
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	440a      	add	r2, r1
 8004798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800479c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 8083 	beq.w	80048b2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	f003 030f 	and.w	r3, r3, #15
 80047bc:	2101      	movs	r1, #1
 80047be:	fa01 f303 	lsl.w	r3, r1, r3
 80047c2:	6979      	ldr	r1, [r7, #20]
 80047c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80047c8:	4313      	orrs	r3, r2
 80047ca:	634b      	str	r3, [r1, #52]	; 0x34
 80047cc:	e071      	b.n	80048b2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	015a      	lsls	r2, r3, #5
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	4413      	add	r3, r2
 80047d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	0151      	lsls	r1, r2, #5
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	440a      	add	r2, r1
 80047e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047e8:	0cdb      	lsrs	r3, r3, #19
 80047ea:	04db      	lsls	r3, r3, #19
 80047ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	015a      	lsls	r2, r3, #5
 80047f2:	697b      	ldr	r3, [r7, #20]
 80047f4:	4413      	add	r3, r2
 80047f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	693a      	ldr	r2, [r7, #16]
 80047fe:	0151      	lsls	r1, r2, #5
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	440a      	add	r2, r1
 8004804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004808:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800480c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004810:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d003      	beq.n	8004822 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	68da      	ldr	r2, [r3, #12]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	4413      	add	r3, r2
 8004832:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004836:	691b      	ldr	r3, [r3, #16]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	0151      	lsls	r1, r2, #5
 800483c:	697a      	ldr	r2, [r7, #20]
 800483e:	440a      	add	r2, r1
 8004840:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004844:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004848:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004856:	691a      	ldr	r2, [r3, #16]
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004860:	6939      	ldr	r1, [r7, #16]
 8004862:	0148      	lsls	r0, r1, #5
 8004864:	6979      	ldr	r1, [r7, #20]
 8004866:	4401      	add	r1, r0
 8004868:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800486c:	4313      	orrs	r3, r2
 800486e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004870:	79fb      	ldrb	r3, [r7, #7]
 8004872:	2b01      	cmp	r3, #1
 8004874:	d10d      	bne.n	8004892 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004876:	68bb      	ldr	r3, [r7, #8]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d009      	beq.n	8004892 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	6919      	ldr	r1, [r3, #16]
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	015a      	lsls	r2, r3, #5
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	4413      	add	r3, r2
 800488a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800488e:	460a      	mov	r2, r1
 8004890:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	015a      	lsls	r2, r3, #5
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	4413      	add	r3, r2
 800489a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	693a      	ldr	r2, [r7, #16]
 80048a2:	0151      	lsls	r1, r2, #5
 80048a4:	697a      	ldr	r2, [r7, #20]
 80048a6:	440a      	add	r2, r1
 80048a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	371c      	adds	r7, #28
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
 80048c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80048ca:	2300      	movs	r3, #0
 80048cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80048ce:	2300      	movs	r3, #0
 80048d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	785b      	ldrb	r3, [r3, #1]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d14a      	bne.n	8004974 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048f6:	f040 8086 	bne.w	8004a06 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	015a      	lsls	r2, r3, #5
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	4413      	add	r3, r2
 8004904:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	7812      	ldrb	r2, [r2, #0]
 800490e:	0151      	lsls	r1, r2, #5
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	440a      	add	r2, r1
 8004914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004918:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800491c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	781b      	ldrb	r3, [r3, #0]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	7812      	ldrb	r2, [r2, #0]
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	440a      	add	r2, r1
 8004938:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800493c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004940:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	3301      	adds	r3, #1
 8004946:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f242 7210 	movw	r2, #10000	; 0x2710
 800494e:	4293      	cmp	r3, r2
 8004950:	d902      	bls.n	8004958 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	75fb      	strb	r3, [r7, #23]
          break;
 8004956:	e056      	b.n	8004a06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	015a      	lsls	r2, r3, #5
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	4413      	add	r3, r2
 8004962:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800496c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004970:	d0e7      	beq.n	8004942 <USB_EPStopXfer+0x82>
 8004972:	e048      	b.n	8004a06 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004988:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800498c:	d13b      	bne.n	8004a06 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	015a      	lsls	r2, r3, #5
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	4413      	add	r3, r2
 8004998:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	683a      	ldr	r2, [r7, #0]
 80049a0:	7812      	ldrb	r2, [r2, #0]
 80049a2:	0151      	lsls	r1, r2, #5
 80049a4:	693a      	ldr	r2, [r7, #16]
 80049a6:	440a      	add	r2, r1
 80049a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80049b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	781b      	ldrb	r3, [r3, #0]
 80049b6:	015a      	lsls	r2, r3, #5
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	4413      	add	r3, r2
 80049bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	683a      	ldr	r2, [r7, #0]
 80049c4:	7812      	ldrb	r2, [r2, #0]
 80049c6:	0151      	lsls	r1, r2, #5
 80049c8:	693a      	ldr	r2, [r7, #16]
 80049ca:	440a      	add	r2, r1
 80049cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80049d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	3301      	adds	r3, #1
 80049da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f242 7210 	movw	r2, #10000	; 0x2710
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d902      	bls.n	80049ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	75fb      	strb	r3, [r7, #23]
          break;
 80049ea:	e00c      	b.n	8004a06 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a04:	d0e7      	beq.n	80049d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	371c      	adds	r7, #28
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004a14:	b480      	push	{r7}
 8004a16:	b089      	sub	sp, #36	; 0x24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	4611      	mov	r1, r2
 8004a20:	461a      	mov	r2, r3
 8004a22:	460b      	mov	r3, r1
 8004a24:	71fb      	strb	r3, [r7, #7]
 8004a26:	4613      	mov	r3, r2
 8004a28:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004a32:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d123      	bne.n	8004a82 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004a3a:	88bb      	ldrh	r3, [r7, #4]
 8004a3c:	3303      	adds	r3, #3
 8004a3e:	089b      	lsrs	r3, r3, #2
 8004a40:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004a42:	2300      	movs	r3, #0
 8004a44:	61bb      	str	r3, [r7, #24]
 8004a46:	e018      	b.n	8004a7a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a48:	79fb      	ldrb	r3, [r7, #7]
 8004a4a:	031a      	lsls	r2, r3, #12
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	4413      	add	r3, r2
 8004a50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a54:	461a      	mov	r2, r3
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	3301      	adds	r3, #1
 8004a60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a62:	69fb      	ldr	r3, [r7, #28]
 8004a64:	3301      	adds	r3, #1
 8004a66:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	3301      	adds	r3, #1
 8004a6c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a6e:	69fb      	ldr	r3, [r7, #28]
 8004a70:	3301      	adds	r3, #1
 8004a72:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	3301      	adds	r3, #1
 8004a78:	61bb      	str	r3, [r7, #24]
 8004a7a:	69ba      	ldr	r2, [r7, #24]
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	429a      	cmp	r2, r3
 8004a80:	d3e2      	bcc.n	8004a48 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3724      	adds	r7, #36	; 0x24
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8e:	4770      	bx	lr

08004a90 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a90:	b480      	push	{r7}
 8004a92:	b08b      	sub	sp, #44	; 0x2c
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	4613      	mov	r3, r2
 8004a9c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004aa2:	68bb      	ldr	r3, [r7, #8]
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	089b      	lsrs	r3, r3, #2
 8004aaa:	b29b      	uxth	r3, r3
 8004aac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004aae:	88fb      	ldrh	r3, [r7, #6]
 8004ab0:	f003 0303 	and.w	r3, r3, #3
 8004ab4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	623b      	str	r3, [r7, #32]
 8004aba:	e014      	b.n	8004ae6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac6:	601a      	str	r2, [r3, #0]
    pDest++;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aca:	3301      	adds	r3, #1
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	3301      	adds	r3, #1
 8004ad2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	3301      	adds	r3, #1
 8004ade:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	623b      	str	r3, [r7, #32]
 8004ae6:	6a3a      	ldr	r2, [r7, #32]
 8004ae8:	697b      	ldr	r3, [r7, #20]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d3e6      	bcc.n	8004abc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004aee:	8bfb      	ldrh	r3, [r7, #30]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d01e      	beq.n	8004b32 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004af4:	2300      	movs	r3, #0
 8004af6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004af8:	69bb      	ldr	r3, [r7, #24]
 8004afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004afe:	461a      	mov	r2, r3
 8004b00:	f107 0310 	add.w	r3, r7, #16
 8004b04:	6812      	ldr	r2, [r2, #0]
 8004b06:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	00db      	lsls	r3, r3, #3
 8004b10:	fa22 f303 	lsr.w	r3, r2, r3
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	701a      	strb	r2, [r3, #0]
      i++;
 8004b1a:	6a3b      	ldr	r3, [r7, #32]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	3301      	adds	r3, #1
 8004b24:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004b26:	8bfb      	ldrh	r3, [r7, #30]
 8004b28:	3b01      	subs	r3, #1
 8004b2a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004b2c:	8bfb      	ldrh	r3, [r7, #30]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d1ea      	bne.n	8004b08 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	372c      	adds	r7, #44	; 0x2c
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
 8004b48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	785b      	ldrb	r3, [r3, #1]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d12c      	bne.n	8004bb6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	db12      	blt.n	8004b94 <USB_EPSetStall+0x54>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00f      	beq.n	8004b94 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	015a      	lsls	r2, r3, #5
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4413      	add	r3, r2
 8004b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68ba      	ldr	r2, [r7, #8]
 8004b84:	0151      	lsls	r1, r2, #5
 8004b86:	68fa      	ldr	r2, [r7, #12]
 8004b88:	440a      	add	r2, r1
 8004b8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b8e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b92:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	0151      	lsls	r1, r2, #5
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	440a      	add	r2, r1
 8004baa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	e02b      	b.n	8004c0e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	015a      	lsls	r2, r3, #5
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	db12      	blt.n	8004bee <USB_EPSetStall+0xae>
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00f      	beq.n	8004bee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	015a      	lsls	r2, r3, #5
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68ba      	ldr	r2, [r7, #8]
 8004bde:	0151      	lsls	r1, r2, #5
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	440a      	add	r2, r1
 8004be4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004be8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	015a      	lsls	r2, r3, #5
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	4413      	add	r3, r2
 8004bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68ba      	ldr	r2, [r7, #8]
 8004bfe:	0151      	lsls	r1, r2, #5
 8004c00:	68fa      	ldr	r2, [r7, #12]
 8004c02:	440a      	add	r2, r1
 8004c04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c08:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c0c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr

08004c1c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c1c:	b480      	push	{r7}
 8004c1e:	b085      	sub	sp, #20
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	785b      	ldrb	r3, [r3, #1]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d128      	bne.n	8004c8a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	015a      	lsls	r2, r3, #5
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	4413      	add	r3, r2
 8004c40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	68ba      	ldr	r2, [r7, #8]
 8004c48:	0151      	lsls	r1, r2, #5
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	440a      	add	r2, r1
 8004c4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c56:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	791b      	ldrb	r3, [r3, #4]
 8004c5c:	2b03      	cmp	r3, #3
 8004c5e:	d003      	beq.n	8004c68 <USB_EPClearStall+0x4c>
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	791b      	ldrb	r3, [r3, #4]
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	d138      	bne.n	8004cda <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	0151      	lsls	r1, r2, #5
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	440a      	add	r2, r1
 8004c7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c86:	6013      	str	r3, [r2, #0]
 8004c88:	e027      	b.n	8004cda <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c8a:	68bb      	ldr	r3, [r7, #8]
 8004c8c:	015a      	lsls	r2, r3, #5
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	4413      	add	r3, r2
 8004c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	68ba      	ldr	r2, [r7, #8]
 8004c9a:	0151      	lsls	r1, r2, #5
 8004c9c:	68fa      	ldr	r2, [r7, #12]
 8004c9e:	440a      	add	r2, r1
 8004ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ca4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004ca8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	791b      	ldrb	r3, [r3, #4]
 8004cae:	2b03      	cmp	r3, #3
 8004cb0:	d003      	beq.n	8004cba <USB_EPClearStall+0x9e>
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	791b      	ldrb	r3, [r3, #4]
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d10f      	bne.n	8004cda <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	015a      	lsls	r2, r3, #5
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	0151      	lsls	r1, r2, #5
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	440a      	add	r2, r1
 8004cd0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cd8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d06:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004d0a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	011b      	lsls	r3, r3, #4
 8004d18:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004d1c:	68f9      	ldr	r1, [r7, #12]
 8004d1e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d22:	4313      	orrs	r3, r2
 8004d24:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d4e:	f023 0303 	bic.w	r3, r3, #3
 8004d52:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d62:	f023 0302 	bic.w	r3, r3, #2
 8004d66:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d68:	2300      	movs	r3, #0
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr

08004d76 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d76:	b480      	push	{r7}
 8004d78:	b085      	sub	sp, #20
 8004d7a:	af00      	add	r7, sp, #0
 8004d7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d90:	f023 0303 	bic.w	r3, r3, #3
 8004d94:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004da4:	f043 0302 	orr.w	r3, r3, #2
 8004da8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3714      	adds	r7, #20
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	695b      	ldr	r3, [r3, #20]
 8004dc4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3714      	adds	r7, #20
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dde:	b480      	push	{r7}
 8004de0:	b085      	sub	sp, #20
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	68ba      	ldr	r2, [r7, #8]
 8004dfe:	4013      	ands	r3, r2
 8004e00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	0c1b      	lsrs	r3, r3, #16
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b085      	sub	sp, #20
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2e:	69db      	ldr	r3, [r3, #28]
 8004e30:	68ba      	ldr	r2, [r7, #8]
 8004e32:	4013      	ands	r3, r2
 8004e34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	b29b      	uxth	r3, r3
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr

08004e46 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e46:	b480      	push	{r7}
 8004e48:	b085      	sub	sp, #20
 8004e4a:	af00      	add	r7, sp, #0
 8004e4c:	6078      	str	r0, [r7, #4]
 8004e4e:	460b      	mov	r3, r1
 8004e50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004e56:	78fb      	ldrb	r3, [r7, #3]
 8004e58:	015a      	lsls	r2, r3, #5
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	68ba      	ldr	r2, [r7, #8]
 8004e70:	4013      	ands	r3, r2
 8004e72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e74:	68bb      	ldr	r3, [r7, #8]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3714      	adds	r7, #20
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr

08004e82 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e82:	b480      	push	{r7}
 8004e84:	b087      	sub	sp, #28
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004e92:	697b      	ldr	r3, [r7, #20]
 8004e94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ea4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004ea6:	78fb      	ldrb	r3, [r7, #3]
 8004ea8:	f003 030f 	and.w	r3, r3, #15
 8004eac:	68fa      	ldr	r2, [r7, #12]
 8004eae:	fa22 f303 	lsr.w	r3, r2, r3
 8004eb2:	01db      	lsls	r3, r3, #7
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	693a      	ldr	r2, [r7, #16]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004ebc:	78fb      	ldrb	r3, [r7, #3]
 8004ebe:	015a      	lsls	r2, r3, #5
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	4413      	add	r3, r2
 8004ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b083      	sub	sp, #12
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	695b      	ldr	r3, [r3, #20]
 8004eea:	f003 0301 	and.w	r3, r3, #1
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	370c      	adds	r7, #12
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004f18:	f023 0307 	bic.w	r3, r3, #7
 8004f1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	68fa      	ldr	r2, [r7, #12]
 8004f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3714      	adds	r7, #20
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b087      	sub	sp, #28
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	460b      	mov	r3, r1
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	333c      	adds	r3, #60	; 0x3c
 8004f56:	3304      	adds	r3, #4
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	4a26      	ldr	r2, [pc, #152]	; (8004ff8 <USB_EP0_OutStart+0xb8>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d90a      	bls.n	8004f7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f74:	d101      	bne.n	8004f7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004f76:	2300      	movs	r3, #0
 8004f78:	e037      	b.n	8004fea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f80:	461a      	mov	r2, r3
 8004f82:	2300      	movs	r3, #0
 8004f84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8c:	691b      	ldr	r3, [r3, #16]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa8:	f043 0318 	orr.w	r3, r3, #24
 8004fac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fbc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004fc0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004fc2:	7afb      	ldrb	r3, [r7, #11]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d10f      	bne.n	8004fe8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fce:	461a      	mov	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004fe6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fe8:	2300      	movs	r3, #0
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	371c      	adds	r7, #28
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	4f54300a 	.word	0x4f54300a

08004ffc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	3301      	adds	r3, #1
 800500c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4a13      	ldr	r2, [pc, #76]	; (8005060 <USB_CoreReset+0x64>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d901      	bls.n	800501a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e01b      	b.n	8005052 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	2b00      	cmp	r3, #0
 8005020:	daf2      	bge.n	8005008 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f043 0201 	orr.w	r2, r3, #1
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	3301      	adds	r3, #1
 8005036:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4a09      	ldr	r2, [pc, #36]	; (8005060 <USB_CoreReset+0x64>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d901      	bls.n	8005044 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005040:	2303      	movs	r3, #3
 8005042:	e006      	b.n	8005052 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	691b      	ldr	r3, [r3, #16]
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b01      	cmp	r3, #1
 800504e:	d0f0      	beq.n	8005032 <USB_CoreReset+0x36>

  return HAL_OK;
 8005050:	2300      	movs	r3, #0
}
 8005052:	4618      	mov	r0, r3
 8005054:	3714      	adds	r7, #20
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	00030d40 	.word	0x00030d40

08005064 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005070:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005074:	f002 fc94 	bl	80079a0 <USBD_static_malloc>
 8005078:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d109      	bne.n	8005094 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	32b0      	adds	r2, #176	; 0xb0
 800508a:	2100      	movs	r1, #0
 800508c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005090:	2302      	movs	r3, #2
 8005092:	e0d4      	b.n	800523e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005094:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005098:	2100      	movs	r1, #0
 800509a:	68f8      	ldr	r0, [r7, #12]
 800509c:	f002 fcee 	bl	8007a7c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	32b0      	adds	r2, #176	; 0xb0
 80050aa:	68f9      	ldr	r1, [r7, #12]
 80050ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	32b0      	adds	r2, #176	; 0xb0
 80050ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	7c1b      	ldrb	r3, [r3, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d138      	bne.n	800513e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80050cc:	4b5e      	ldr	r3, [pc, #376]	; (8005248 <USBD_CDC_Init+0x1e4>)
 80050ce:	7819      	ldrb	r1, [r3, #0]
 80050d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050d4:	2202      	movs	r2, #2
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f002 fb3f 	bl	800775a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80050dc:	4b5a      	ldr	r3, [pc, #360]	; (8005248 <USBD_CDC_Init+0x1e4>)
 80050de:	781b      	ldrb	r3, [r3, #0]
 80050e0:	f003 020f 	and.w	r2, r3, #15
 80050e4:	6879      	ldr	r1, [r7, #4]
 80050e6:	4613      	mov	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4413      	add	r3, r2
 80050ec:	009b      	lsls	r3, r3, #2
 80050ee:	440b      	add	r3, r1
 80050f0:	3324      	adds	r3, #36	; 0x24
 80050f2:	2201      	movs	r2, #1
 80050f4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80050f6:	4b55      	ldr	r3, [pc, #340]	; (800524c <USBD_CDC_Init+0x1e8>)
 80050f8:	7819      	ldrb	r1, [r3, #0]
 80050fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050fe:	2202      	movs	r2, #2
 8005100:	6878      	ldr	r0, [r7, #4]
 8005102:	f002 fb2a 	bl	800775a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005106:	4b51      	ldr	r3, [pc, #324]	; (800524c <USBD_CDC_Init+0x1e8>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	f003 020f 	and.w	r2, r3, #15
 800510e:	6879      	ldr	r1, [r7, #4]
 8005110:	4613      	mov	r3, r2
 8005112:	009b      	lsls	r3, r3, #2
 8005114:	4413      	add	r3, r2
 8005116:	009b      	lsls	r3, r3, #2
 8005118:	440b      	add	r3, r1
 800511a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800511e:	2201      	movs	r2, #1
 8005120:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005122:	4b4b      	ldr	r3, [pc, #300]	; (8005250 <USBD_CDC_Init+0x1ec>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	f003 020f 	and.w	r2, r3, #15
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	3326      	adds	r3, #38	; 0x26
 8005138:	2210      	movs	r2, #16
 800513a:	801a      	strh	r2, [r3, #0]
 800513c:	e035      	b.n	80051aa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800513e:	4b42      	ldr	r3, [pc, #264]	; (8005248 <USBD_CDC_Init+0x1e4>)
 8005140:	7819      	ldrb	r1, [r3, #0]
 8005142:	2340      	movs	r3, #64	; 0x40
 8005144:	2202      	movs	r2, #2
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f002 fb07 	bl	800775a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800514c:	4b3e      	ldr	r3, [pc, #248]	; (8005248 <USBD_CDC_Init+0x1e4>)
 800514e:	781b      	ldrb	r3, [r3, #0]
 8005150:	f003 020f 	and.w	r2, r3, #15
 8005154:	6879      	ldr	r1, [r7, #4]
 8005156:	4613      	mov	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4413      	add	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	440b      	add	r3, r1
 8005160:	3324      	adds	r3, #36	; 0x24
 8005162:	2201      	movs	r2, #1
 8005164:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005166:	4b39      	ldr	r3, [pc, #228]	; (800524c <USBD_CDC_Init+0x1e8>)
 8005168:	7819      	ldrb	r1, [r3, #0]
 800516a:	2340      	movs	r3, #64	; 0x40
 800516c:	2202      	movs	r2, #2
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f002 faf3 	bl	800775a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005174:	4b35      	ldr	r3, [pc, #212]	; (800524c <USBD_CDC_Init+0x1e8>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	f003 020f 	and.w	r2, r3, #15
 800517c:	6879      	ldr	r1, [r7, #4]
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	440b      	add	r3, r1
 8005188:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800518c:	2201      	movs	r2, #1
 800518e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005190:	4b2f      	ldr	r3, [pc, #188]	; (8005250 <USBD_CDC_Init+0x1ec>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	f003 020f 	and.w	r2, r3, #15
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	3326      	adds	r3, #38	; 0x26
 80051a6:	2210      	movs	r2, #16
 80051a8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80051aa:	4b29      	ldr	r3, [pc, #164]	; (8005250 <USBD_CDC_Init+0x1ec>)
 80051ac:	7819      	ldrb	r1, [r3, #0]
 80051ae:	2308      	movs	r3, #8
 80051b0:	2203      	movs	r2, #3
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f002 fad1 	bl	800775a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80051b8:	4b25      	ldr	r3, [pc, #148]	; (8005250 <USBD_CDC_Init+0x1ec>)
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	f003 020f 	and.w	r2, r3, #15
 80051c0:	6879      	ldr	r1, [r7, #4]
 80051c2:	4613      	mov	r3, r2
 80051c4:	009b      	lsls	r3, r3, #2
 80051c6:	4413      	add	r3, r2
 80051c8:	009b      	lsls	r3, r3, #2
 80051ca:	440b      	add	r3, r1
 80051cc:	3324      	adds	r3, #36	; 0x24
 80051ce:	2201      	movs	r2, #1
 80051d0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2200      	movs	r2, #0
 80051d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80051e0:	687a      	ldr	r2, [r7, #4]
 80051e2:	33b0      	adds	r3, #176	; 0xb0
 80051e4:	009b      	lsls	r3, r3, #2
 80051e6:	4413      	add	r3, r2
 80051e8:	685b      	ldr	r3, [r3, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	2200      	movs	r2, #0
 80051fa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005208:	2302      	movs	r3, #2
 800520a:	e018      	b.n	800523e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	7c1b      	ldrb	r3, [r3, #16]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005214:	4b0d      	ldr	r3, [pc, #52]	; (800524c <USBD_CDC_Init+0x1e8>)
 8005216:	7819      	ldrb	r1, [r3, #0]
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800521e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f002 fb88 	bl	8007938 <USBD_LL_PrepareReceive>
 8005228:	e008      	b.n	800523c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800522a:	4b08      	ldr	r3, [pc, #32]	; (800524c <USBD_CDC_Init+0x1e8>)
 800522c:	7819      	ldrb	r1, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005234:	2340      	movs	r3, #64	; 0x40
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f002 fb7e 	bl	8007938 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000093 	.word	0x20000093
 800524c:	20000094 	.word	0x20000094
 8005250:	20000095 	.word	0x20000095

08005254 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	460b      	mov	r3, r1
 800525e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005260:	4b3a      	ldr	r3, [pc, #232]	; (800534c <USBD_CDC_DeInit+0xf8>)
 8005262:	781b      	ldrb	r3, [r3, #0]
 8005264:	4619      	mov	r1, r3
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f002 fa9d 	bl	80077a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800526c:	4b37      	ldr	r3, [pc, #220]	; (800534c <USBD_CDC_DeInit+0xf8>)
 800526e:	781b      	ldrb	r3, [r3, #0]
 8005270:	f003 020f 	and.w	r2, r3, #15
 8005274:	6879      	ldr	r1, [r7, #4]
 8005276:	4613      	mov	r3, r2
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	4413      	add	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	440b      	add	r3, r1
 8005280:	3324      	adds	r3, #36	; 0x24
 8005282:	2200      	movs	r2, #0
 8005284:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005286:	4b32      	ldr	r3, [pc, #200]	; (8005350 <USBD_CDC_DeInit+0xfc>)
 8005288:	781b      	ldrb	r3, [r3, #0]
 800528a:	4619      	mov	r1, r3
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f002 fa8a 	bl	80077a6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005292:	4b2f      	ldr	r3, [pc, #188]	; (8005350 <USBD_CDC_DeInit+0xfc>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	f003 020f 	and.w	r2, r3, #15
 800529a:	6879      	ldr	r1, [r7, #4]
 800529c:	4613      	mov	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	4413      	add	r3, r2
 80052a2:	009b      	lsls	r3, r3, #2
 80052a4:	440b      	add	r3, r1
 80052a6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80052aa:	2200      	movs	r2, #0
 80052ac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80052ae:	4b29      	ldr	r3, [pc, #164]	; (8005354 <USBD_CDC_DeInit+0x100>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	4619      	mov	r1, r3
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f002 fa76 	bl	80077a6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80052ba:	4b26      	ldr	r3, [pc, #152]	; (8005354 <USBD_CDC_DeInit+0x100>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	f003 020f 	and.w	r2, r3, #15
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	3324      	adds	r3, #36	; 0x24
 80052d0:	2200      	movs	r2, #0
 80052d2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80052d4:	4b1f      	ldr	r3, [pc, #124]	; (8005354 <USBD_CDC_DeInit+0x100>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	f003 020f 	and.w	r2, r3, #15
 80052dc:	6879      	ldr	r1, [r7, #4]
 80052de:	4613      	mov	r3, r2
 80052e0:	009b      	lsls	r3, r3, #2
 80052e2:	4413      	add	r3, r2
 80052e4:	009b      	lsls	r3, r3, #2
 80052e6:	440b      	add	r3, r1
 80052e8:	3326      	adds	r3, #38	; 0x26
 80052ea:	2200      	movs	r2, #0
 80052ec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	32b0      	adds	r2, #176	; 0xb0
 80052f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d01f      	beq.n	8005340 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	33b0      	adds	r3, #176	; 0xb0
 800530a:	009b      	lsls	r3, r3, #2
 800530c:	4413      	add	r3, r2
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	32b0      	adds	r2, #176	; 0xb0
 800531e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005322:	4618      	mov	r0, r3
 8005324:	f002 fb4a 	bl	80079bc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	32b0      	adds	r2, #176	; 0xb0
 8005332:	2100      	movs	r1, #0
 8005334:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005340:	2300      	movs	r3, #0
}
 8005342:	4618      	mov	r0, r3
 8005344:	3708      	adds	r7, #8
 8005346:	46bd      	mov	sp, r7
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop
 800534c:	20000093 	.word	0x20000093
 8005350:	20000094 	.word	0x20000094
 8005354:	20000095 	.word	0x20000095

08005358 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b086      	sub	sp, #24
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	32b0      	adds	r2, #176	; 0xb0
 800536c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005370:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005376:	2300      	movs	r3, #0
 8005378:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d101      	bne.n	8005388 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005384:	2303      	movs	r3, #3
 8005386:	e0bf      	b.n	8005508 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005390:	2b00      	cmp	r3, #0
 8005392:	d050      	beq.n	8005436 <USBD_CDC_Setup+0xde>
 8005394:	2b20      	cmp	r3, #32
 8005396:	f040 80af 	bne.w	80054f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	88db      	ldrh	r3, [r3, #6]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d03a      	beq.n	8005418 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	781b      	ldrb	r3, [r3, #0]
 80053a6:	b25b      	sxtb	r3, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	da1b      	bge.n	80053e4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	33b0      	adds	r3, #176	; 0xb0
 80053b6:	009b      	lsls	r3, r3, #2
 80053b8:	4413      	add	r3, r2
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	689b      	ldr	r3, [r3, #8]
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80053c2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	88d2      	ldrh	r2, [r2, #6]
 80053c8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	88db      	ldrh	r3, [r3, #6]
 80053ce:	2b07      	cmp	r3, #7
 80053d0:	bf28      	it	cs
 80053d2:	2307      	movcs	r3, #7
 80053d4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	89fa      	ldrh	r2, [r7, #14]
 80053da:	4619      	mov	r1, r3
 80053dc:	6878      	ldr	r0, [r7, #4]
 80053de:	f001 fd89 	bl	8006ef4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80053e2:	e090      	b.n	8005506 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	785a      	ldrb	r2, [r3, #1]
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	88db      	ldrh	r3, [r3, #6]
 80053f2:	2b3f      	cmp	r3, #63	; 0x3f
 80053f4:	d803      	bhi.n	80053fe <USBD_CDC_Setup+0xa6>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	88db      	ldrh	r3, [r3, #6]
 80053fa:	b2da      	uxtb	r2, r3
 80053fc:	e000      	b.n	8005400 <USBD_CDC_Setup+0xa8>
 80053fe:	2240      	movs	r2, #64	; 0x40
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005406:	6939      	ldr	r1, [r7, #16]
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800540e:	461a      	mov	r2, r3
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f001 fd9b 	bl	8006f4c <USBD_CtlPrepareRx>
      break;
 8005416:	e076      	b.n	8005506 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800541e:	687a      	ldr	r2, [r7, #4]
 8005420:	33b0      	adds	r3, #176	; 0xb0
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4413      	add	r3, r2
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	683a      	ldr	r2, [r7, #0]
 800542c:	7850      	ldrb	r0, [r2, #1]
 800542e:	2200      	movs	r2, #0
 8005430:	6839      	ldr	r1, [r7, #0]
 8005432:	4798      	blx	r3
      break;
 8005434:	e067      	b.n	8005506 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	785b      	ldrb	r3, [r3, #1]
 800543a:	2b0b      	cmp	r3, #11
 800543c:	d851      	bhi.n	80054e2 <USBD_CDC_Setup+0x18a>
 800543e:	a201      	add	r2, pc, #4	; (adr r2, 8005444 <USBD_CDC_Setup+0xec>)
 8005440:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005444:	08005475 	.word	0x08005475
 8005448:	080054f1 	.word	0x080054f1
 800544c:	080054e3 	.word	0x080054e3
 8005450:	080054e3 	.word	0x080054e3
 8005454:	080054e3 	.word	0x080054e3
 8005458:	080054e3 	.word	0x080054e3
 800545c:	080054e3 	.word	0x080054e3
 8005460:	080054e3 	.word	0x080054e3
 8005464:	080054e3 	.word	0x080054e3
 8005468:	080054e3 	.word	0x080054e3
 800546c:	0800549f 	.word	0x0800549f
 8005470:	080054c9 	.word	0x080054c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b03      	cmp	r3, #3
 800547e:	d107      	bne.n	8005490 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005480:	f107 030a 	add.w	r3, r7, #10
 8005484:	2202      	movs	r2, #2
 8005486:	4619      	mov	r1, r3
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f001 fd33 	bl	8006ef4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800548e:	e032      	b.n	80054f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005490:	6839      	ldr	r1, [r7, #0]
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f001 fcbd 	bl	8006e12 <USBD_CtlError>
            ret = USBD_FAIL;
 8005498:	2303      	movs	r3, #3
 800549a:	75fb      	strb	r3, [r7, #23]
          break;
 800549c:	e02b      	b.n	80054f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	2b03      	cmp	r3, #3
 80054a8:	d107      	bne.n	80054ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80054aa:	f107 030d 	add.w	r3, r7, #13
 80054ae:	2201      	movs	r2, #1
 80054b0:	4619      	mov	r1, r3
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f001 fd1e 	bl	8006ef4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80054b8:	e01d      	b.n	80054f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80054ba:	6839      	ldr	r1, [r7, #0]
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f001 fca8 	bl	8006e12 <USBD_CtlError>
            ret = USBD_FAIL;
 80054c2:	2303      	movs	r3, #3
 80054c4:	75fb      	strb	r3, [r7, #23]
          break;
 80054c6:	e016      	b.n	80054f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ce:	b2db      	uxtb	r3, r3
 80054d0:	2b03      	cmp	r3, #3
 80054d2:	d00f      	beq.n	80054f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80054d4:	6839      	ldr	r1, [r7, #0]
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f001 fc9b 	bl	8006e12 <USBD_CtlError>
            ret = USBD_FAIL;
 80054dc:	2303      	movs	r3, #3
 80054de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80054e0:	e008      	b.n	80054f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f001 fc94 	bl	8006e12 <USBD_CtlError>
          ret = USBD_FAIL;
 80054ea:	2303      	movs	r3, #3
 80054ec:	75fb      	strb	r3, [r7, #23]
          break;
 80054ee:	e002      	b.n	80054f6 <USBD_CDC_Setup+0x19e>
          break;
 80054f0:	bf00      	nop
 80054f2:	e008      	b.n	8005506 <USBD_CDC_Setup+0x1ae>
          break;
 80054f4:	bf00      	nop
      }
      break;
 80054f6:	e006      	b.n	8005506 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80054f8:	6839      	ldr	r1, [r7, #0]
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f001 fc89 	bl	8006e12 <USBD_CtlError>
      ret = USBD_FAIL;
 8005500:	2303      	movs	r3, #3
 8005502:	75fb      	strb	r3, [r7, #23]
      break;
 8005504:	bf00      	nop
  }

  return (uint8_t)ret;
 8005506:	7dfb      	ldrb	r3, [r7, #23]
}
 8005508:	4618      	mov	r0, r3
 800550a:	3718      	adds	r7, #24
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b084      	sub	sp, #16
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	460b      	mov	r3, r1
 800551a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8005522:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	32b0      	adds	r2, #176	; 0xb0
 800552e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d101      	bne.n	800553a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8005536:	2303      	movs	r3, #3
 8005538:	e065      	b.n	8005606 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	32b0      	adds	r2, #176	; 0xb0
 8005544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005548:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	f003 020f 	and.w	r2, r3, #15
 8005550:	6879      	ldr	r1, [r7, #4]
 8005552:	4613      	mov	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	4413      	add	r3, r2
 8005558:	009b      	lsls	r3, r3, #2
 800555a:	440b      	add	r3, r1
 800555c:	3318      	adds	r3, #24
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d02f      	beq.n	80055c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8005564:	78fb      	ldrb	r3, [r7, #3]
 8005566:	f003 020f 	and.w	r2, r3, #15
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	4613      	mov	r3, r2
 800556e:	009b      	lsls	r3, r3, #2
 8005570:	4413      	add	r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	3318      	adds	r3, #24
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	78fb      	ldrb	r3, [r7, #3]
 800557c:	f003 010f 	and.w	r1, r3, #15
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	460b      	mov	r3, r1
 8005584:	00db      	lsls	r3, r3, #3
 8005586:	440b      	add	r3, r1
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4403      	add	r3, r0
 800558c:	3348      	adds	r3, #72	; 0x48
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	fbb2 f1f3 	udiv	r1, r2, r3
 8005594:	fb01 f303 	mul.w	r3, r1, r3
 8005598:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800559a:	2b00      	cmp	r3, #0
 800559c:	d112      	bne.n	80055c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800559e:	78fb      	ldrb	r3, [r7, #3]
 80055a0:	f003 020f 	and.w	r2, r3, #15
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	4613      	mov	r3, r2
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	3318      	adds	r3, #24
 80055b2:	2200      	movs	r2, #0
 80055b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80055b6:	78f9      	ldrb	r1, [r7, #3]
 80055b8:	2300      	movs	r3, #0
 80055ba:	2200      	movs	r2, #0
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f002 f99a 	bl	80078f6 <USBD_LL_Transmit>
 80055c2:	e01f      	b.n	8005604 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	33b0      	adds	r3, #176	; 0xb0
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d010      	beq.n	8005604 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80055e8:	687a      	ldr	r2, [r7, #4]
 80055ea:	33b0      	adds	r3, #176	; 0xb0
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	68ba      	ldr	r2, [r7, #8]
 80055f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8005600:	78fa      	ldrb	r2, [r7, #3]
 8005602:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b084      	sub	sp, #16
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
 8005616:	460b      	mov	r3, r1
 8005618:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	32b0      	adds	r2, #176	; 0xb0
 8005624:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005628:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	32b0      	adds	r2, #176	; 0xb0
 8005634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d101      	bne.n	8005640 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800563c:	2303      	movs	r3, #3
 800563e:	e01a      	b.n	8005676 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8005640:	78fb      	ldrb	r3, [r7, #3]
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f002 f998 	bl	800797a <USBD_LL_GetRxDataSize>
 800564a:	4602      	mov	r2, r0
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	33b0      	adds	r3, #176	; 0xb0
 800565c:	009b      	lsls	r3, r3, #2
 800565e:	4413      	add	r3, r2
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	68fa      	ldr	r2, [r7, #12]
 8005666:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005670:	4611      	mov	r1, r2
 8005672:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3710      	adds	r7, #16
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b084      	sub	sp, #16
 8005682:	af00      	add	r7, sp, #0
 8005684:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	32b0      	adds	r2, #176	; 0xb0
 8005690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005694:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d101      	bne.n	80056a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800569c:	2303      	movs	r3, #3
 800569e:	e025      	b.n	80056ec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056a6:	687a      	ldr	r2, [r7, #4]
 80056a8:	33b0      	adds	r3, #176	; 0xb0
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	4413      	add	r3, r2
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01a      	beq.n	80056ea <USBD_CDC_EP0_RxReady+0x6c>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80056ba:	2bff      	cmp	r3, #255	; 0xff
 80056bc:	d015      	beq.n	80056ea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	33b0      	adds	r3, #176	; 0xb0
 80056c8:	009b      	lsls	r3, r3, #2
 80056ca:	4413      	add	r3, r2
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80056d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80056de:	b292      	uxth	r2, r2
 80056e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	22ff      	movs	r2, #255	; 0xff
 80056e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80056ea:	2300      	movs	r3, #0
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3710      	adds	r7, #16
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b086      	sub	sp, #24
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80056fc:	2182      	movs	r1, #130	; 0x82
 80056fe:	4818      	ldr	r0, [pc, #96]	; (8005760 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005700:	f000 fd4f 	bl	80061a2 <USBD_GetEpDesc>
 8005704:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005706:	2101      	movs	r1, #1
 8005708:	4815      	ldr	r0, [pc, #84]	; (8005760 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800570a:	f000 fd4a 	bl	80061a2 <USBD_GetEpDesc>
 800570e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005710:	2181      	movs	r1, #129	; 0x81
 8005712:	4813      	ldr	r0, [pc, #76]	; (8005760 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8005714:	f000 fd45 	bl	80061a2 <USBD_GetEpDesc>
 8005718:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d002      	beq.n	8005726 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	2210      	movs	r2, #16
 8005724:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d006      	beq.n	800573a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	2200      	movs	r2, #0
 8005730:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005734:	711a      	strb	r2, [r3, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d006      	beq.n	800574e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2200      	movs	r2, #0
 8005744:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005748:	711a      	strb	r2, [r3, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2243      	movs	r2, #67	; 0x43
 8005752:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005754:	4b02      	ldr	r3, [pc, #8]	; (8005760 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8005756:	4618      	mov	r0, r3
 8005758:	3718      	adds	r7, #24
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}
 800575e:	bf00      	nop
 8005760:	20000050 	.word	0x20000050

08005764 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b086      	sub	sp, #24
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800576c:	2182      	movs	r1, #130	; 0x82
 800576e:	4818      	ldr	r0, [pc, #96]	; (80057d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005770:	f000 fd17 	bl	80061a2 <USBD_GetEpDesc>
 8005774:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8005776:	2101      	movs	r1, #1
 8005778:	4815      	ldr	r0, [pc, #84]	; (80057d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800577a:	f000 fd12 	bl	80061a2 <USBD_GetEpDesc>
 800577e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8005780:	2181      	movs	r1, #129	; 0x81
 8005782:	4813      	ldr	r0, [pc, #76]	; (80057d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8005784:	f000 fd0d 	bl	80061a2 <USBD_GetEpDesc>
 8005788:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d002      	beq.n	8005796 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	2210      	movs	r2, #16
 8005794:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d006      	beq.n	80057aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	2200      	movs	r2, #0
 80057a0:	711a      	strb	r2, [r3, #4]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f042 0202 	orr.w	r2, r2, #2
 80057a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d006      	beq.n	80057be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	711a      	strb	r2, [r3, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f042 0202 	orr.w	r2, r2, #2
 80057bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2243      	movs	r2, #67	; 0x43
 80057c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80057c4:	4b02      	ldr	r3, [pc, #8]	; (80057d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3718      	adds	r7, #24
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	20000050 	.word	0x20000050

080057d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80057dc:	2182      	movs	r1, #130	; 0x82
 80057de:	4818      	ldr	r0, [pc, #96]	; (8005840 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80057e0:	f000 fcdf 	bl	80061a2 <USBD_GetEpDesc>
 80057e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80057e6:	2101      	movs	r1, #1
 80057e8:	4815      	ldr	r0, [pc, #84]	; (8005840 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80057ea:	f000 fcda 	bl	80061a2 <USBD_GetEpDesc>
 80057ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80057f0:	2181      	movs	r1, #129	; 0x81
 80057f2:	4813      	ldr	r0, [pc, #76]	; (8005840 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80057f4:	f000 fcd5 	bl	80061a2 <USBD_GetEpDesc>
 80057f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d002      	beq.n	8005806 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	2210      	movs	r2, #16
 8005804:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d006      	beq.n	800581a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	2200      	movs	r2, #0
 8005810:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005814:	711a      	strb	r2, [r3, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d006      	beq.n	800582e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2200      	movs	r2, #0
 8005824:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005828:	711a      	strb	r2, [r3, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2243      	movs	r2, #67	; 0x43
 8005832:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8005834:	4b02      	ldr	r3, [pc, #8]	; (8005840 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8005836:	4618      	mov	r0, r3
 8005838:	3718      	adds	r7, #24
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	20000050 	.word	0x20000050

08005844 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005844:	b480      	push	{r7}
 8005846:	b083      	sub	sp, #12
 8005848:	af00      	add	r7, sp, #0
 800584a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	220a      	movs	r2, #10
 8005850:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005852:	4b03      	ldr	r3, [pc, #12]	; (8005860 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005854:	4618      	mov	r0, r3
 8005856:	370c      	adds	r7, #12
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr
 8005860:	2000000c 	.word	0x2000000c

08005864 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d101      	bne.n	8005878 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005874:	2303      	movs	r3, #3
 8005876:	e009      	b.n	800588c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	33b0      	adds	r3, #176	; 0xb0
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	4413      	add	r3, r2
 8005886:	683a      	ldr	r2, [r7, #0]
 8005888:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	370c      	adds	r7, #12
 8005890:	46bd      	mov	sp, r7
 8005892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005896:	4770      	bx	lr

08005898 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	32b0      	adds	r2, #176	; 0xb0
 80058ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058b2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d101      	bne.n	80058be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e008      	b.n	80058d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	371c      	adds	r7, #28
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	32b0      	adds	r2, #176	; 0xb0
 80058f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80058fc:	2303      	movs	r3, #3
 80058fe:	e004      	b.n	800590a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005908:	2300      	movs	r3, #0
}
 800590a:	4618      	mov	r0, r3
 800590c:	3714      	adds	r7, #20
 800590e:	46bd      	mov	sp, r7
 8005910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005914:	4770      	bx	lr
	...

08005918 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	32b0      	adds	r2, #176	; 0xb0
 800592a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800592e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005930:	2301      	movs	r3, #1
 8005932:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	32b0      	adds	r2, #176	; 0xb0
 800593e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8005946:	2303      	movs	r3, #3
 8005948:	e025      	b.n	8005996 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005950:	2b00      	cmp	r3, #0
 8005952:	d11f      	bne.n	8005994 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005954:	68bb      	ldr	r3, [r7, #8]
 8005956:	2201      	movs	r2, #1
 8005958:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800595c:	4b10      	ldr	r3, [pc, #64]	; (80059a0 <USBD_CDC_TransmitPacket+0x88>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	f003 020f 	and.w	r2, r3, #15
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	4613      	mov	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4403      	add	r3, r0
 8005976:	3318      	adds	r3, #24
 8005978:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800597a:	4b09      	ldr	r3, [pc, #36]	; (80059a0 <USBD_CDC_TransmitPacket+0x88>)
 800597c:	7819      	ldrb	r1, [r3, #0]
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f001 ffb3 	bl	80078f6 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005990:	2300      	movs	r3, #0
 8005992:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005994:	7bfb      	ldrb	r3, [r7, #15]
}
 8005996:	4618      	mov	r0, r3
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}
 800599e:	bf00      	nop
 80059a0:	20000093 	.word	0x20000093

080059a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b084      	sub	sp, #16
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	32b0      	adds	r2, #176	; 0xb0
 80059b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	32b0      	adds	r2, #176	; 0xb0
 80059c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80059ce:	2303      	movs	r3, #3
 80059d0:	e018      	b.n	8005a04 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	7c1b      	ldrb	r3, [r3, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d10a      	bne.n	80059f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80059da:	4b0c      	ldr	r3, [pc, #48]	; (8005a0c <USBD_CDC_ReceivePacket+0x68>)
 80059dc:	7819      	ldrb	r1, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f001 ffa5 	bl	8007938 <USBD_LL_PrepareReceive>
 80059ee:	e008      	b.n	8005a02 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80059f0:	4b06      	ldr	r3, [pc, #24]	; (8005a0c <USBD_CDC_ReceivePacket+0x68>)
 80059f2:	7819      	ldrb	r1, [r3, #0]
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80059fa:	2340      	movs	r3, #64	; 0x40
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f001 ff9b 	bl	8007938 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005a02:	2300      	movs	r3, #0
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}
 8005a0c:	20000094 	.word	0x20000094

08005a10 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	4613      	mov	r3, r2
 8005a1c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d101      	bne.n	8005a28 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005a24:	2303      	movs	r3, #3
 8005a26:	e01f      	b.n	8005a68 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2200      	movs	r2, #0
 8005a34:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d003      	beq.n	8005a4e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2201      	movs	r2, #1
 8005a52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	79fa      	ldrb	r2, [r7, #7]
 8005a5a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f001 fe15 	bl	800768c <USBD_LL_Init>
 8005a62:	4603      	mov	r3, r0
 8005a64:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005a66:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b084      	sub	sp, #16
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
 8005a78:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d101      	bne.n	8005a88 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e025      	b.n	8005ad4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	683a      	ldr	r2, [r7, #0]
 8005a8c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	32ae      	adds	r2, #174	; 0xae
 8005a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d00f      	beq.n	8005ac4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	32ae      	adds	r2, #174	; 0xae
 8005aae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab4:	f107 020e 	add.w	r2, r7, #14
 8005ab8:	4610      	mov	r0, r2
 8005aba:	4798      	blx	r3
 8005abc:	4602      	mov	r2, r0
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005aca:	1c5a      	adds	r2, r3, #1
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3710      	adds	r7, #16
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ae4:	6878      	ldr	r0, [r7, #4]
 8005ae6:	f001 fe1d 	bl	8007724 <USBD_LL_Start>
 8005aea:	4603      	mov	r3, r0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3708      	adds	r7, #8
 8005af0:	46bd      	mov	sp, r7
 8005af2:	bd80      	pop	{r7, pc}

08005af4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005af4:	b480      	push	{r7}
 8005af6:	b083      	sub	sp, #12
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005afc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005afe:	4618      	mov	r0, r3
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b084      	sub	sp, #16
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	460b      	mov	r3, r1
 8005b14:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d009      	beq.n	8005b38 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	78fa      	ldrb	r2, [r7, #3]
 8005b2e:	4611      	mov	r1, r2
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	4798      	blx	r3
 8005b34:	4603      	mov	r3, r0
 8005b36:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b084      	sub	sp, #16
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005b4e:	2300      	movs	r3, #0
 8005b50:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	78fa      	ldrb	r2, [r7, #3]
 8005b5c:	4611      	mov	r1, r2
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	4798      	blx	r3
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005b86:	6839      	ldr	r1, [r7, #0]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f001 f908 	bl	8006d9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005b9c:	461a      	mov	r2, r3
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005baa:	f003 031f 	and.w	r3, r3, #31
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d01a      	beq.n	8005be8 <USBD_LL_SetupStage+0x72>
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d822      	bhi.n	8005bfc <USBD_LL_SetupStage+0x86>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d002      	beq.n	8005bc0 <USBD_LL_SetupStage+0x4a>
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d00a      	beq.n	8005bd4 <USBD_LL_SetupStage+0x5e>
 8005bbe:	e01d      	b.n	8005bfc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fb5f 	bl	800628c <USBD_StdDevReq>
 8005bce:	4603      	mov	r3, r0
 8005bd0:	73fb      	strb	r3, [r7, #15]
      break;
 8005bd2:	e020      	b.n	8005c16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f000 fbc7 	bl	8006370 <USBD_StdItfReq>
 8005be2:	4603      	mov	r3, r0
 8005be4:	73fb      	strb	r3, [r7, #15]
      break;
 8005be6:	e016      	b.n	8005c16 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fc29 	bl	8006448 <USBD_StdEPReq>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	73fb      	strb	r3, [r7, #15]
      break;
 8005bfa:	e00c      	b.n	8005c16 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c02:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	4619      	mov	r1, r3
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f001 fdea 	bl	80077e4 <USBD_LL_StallEP>
 8005c10:	4603      	mov	r3, r0
 8005c12:	73fb      	strb	r3, [r7, #15]
      break;
 8005c14:	bf00      	nop
  }

  return ret;
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3710      	adds	r7, #16
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b086      	sub	sp, #24
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	460b      	mov	r3, r1
 8005c2a:	607a      	str	r2, [r7, #4]
 8005c2c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005c32:	7afb      	ldrb	r3, [r7, #11]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d16e      	bne.n	8005d16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005c3e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	f040 8098 	bne.w	8005d7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	689a      	ldr	r2, [r3, #8]
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	68db      	ldr	r3, [r3, #12]
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d913      	bls.n	8005c80 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005c58:	693b      	ldr	r3, [r7, #16]
 8005c5a:	689a      	ldr	r2, [r3, #8]
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	68db      	ldr	r3, [r3, #12]
 8005c60:	1ad2      	subs	r2, r2, r3
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	68da      	ldr	r2, [r3, #12]
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	bf28      	it	cs
 8005c72:	4613      	movcs	r3, r2
 8005c74:	461a      	mov	r2, r3
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f001 f984 	bl	8006f86 <USBD_CtlContinueRx>
 8005c7e:	e07d      	b.n	8005d7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c86:	f003 031f 	and.w	r3, r3, #31
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d014      	beq.n	8005cb8 <USBD_LL_DataOutStage+0x98>
 8005c8e:	2b02      	cmp	r3, #2
 8005c90:	d81d      	bhi.n	8005cce <USBD_LL_DataOutStage+0xae>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d002      	beq.n	8005c9c <USBD_LL_DataOutStage+0x7c>
 8005c96:	2b01      	cmp	r3, #1
 8005c98:	d003      	beq.n	8005ca2 <USBD_LL_DataOutStage+0x82>
 8005c9a:	e018      	b.n	8005cce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	75bb      	strb	r3, [r7, #22]
            break;
 8005ca0:	e018      	b.n	8005cd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	4619      	mov	r1, r3
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 fa5e 	bl	800616e <USBD_CoreFindIF>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	75bb      	strb	r3, [r7, #22]
            break;
 8005cb6:	e00d      	b.n	8005cd4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	68f8      	ldr	r0, [r7, #12]
 8005cc4:	f000 fa60 	bl	8006188 <USBD_CoreFindEP>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	75bb      	strb	r3, [r7, #22]
            break;
 8005ccc:	e002      	b.n	8005cd4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	75bb      	strb	r3, [r7, #22]
            break;
 8005cd2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005cd4:	7dbb      	ldrb	r3, [r7, #22]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d119      	bne.n	8005d0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	2b03      	cmp	r3, #3
 8005ce4:	d113      	bne.n	8005d0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005ce6:	7dba      	ldrb	r2, [r7, #22]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	32ae      	adds	r2, #174	; 0xae
 8005cec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d00b      	beq.n	8005d0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005cf6:	7dba      	ldrb	r2, [r7, #22]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005cfe:	7dba      	ldrb	r2, [r7, #22]
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	32ae      	adds	r2, #174	; 0xae
 8005d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d08:	691b      	ldr	r3, [r3, #16]
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d0e:	68f8      	ldr	r0, [r7, #12]
 8005d10:	f001 f94a 	bl	8006fa8 <USBD_CtlSendStatus>
 8005d14:	e032      	b.n	8005d7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005d16:	7afb      	ldrb	r3, [r7, #11]
 8005d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	4619      	mov	r1, r3
 8005d20:	68f8      	ldr	r0, [r7, #12]
 8005d22:	f000 fa31 	bl	8006188 <USBD_CoreFindEP>
 8005d26:	4603      	mov	r3, r0
 8005d28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d2a:	7dbb      	ldrb	r3, [r7, #22]
 8005d2c:	2bff      	cmp	r3, #255	; 0xff
 8005d2e:	d025      	beq.n	8005d7c <USBD_LL_DataOutStage+0x15c>
 8005d30:	7dbb      	ldrb	r3, [r7, #22]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d122      	bne.n	8005d7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	2b03      	cmp	r3, #3
 8005d40:	d117      	bne.n	8005d72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005d42:	7dba      	ldrb	r2, [r7, #22]
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	32ae      	adds	r2, #174	; 0xae
 8005d48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d00f      	beq.n	8005d72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005d52:	7dba      	ldrb	r2, [r7, #22]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005d5a:	7dba      	ldrb	r2, [r7, #22]
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	32ae      	adds	r2, #174	; 0xae
 8005d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d64:	699b      	ldr	r3, [r3, #24]
 8005d66:	7afa      	ldrb	r2, [r7, #11]
 8005d68:	4611      	mov	r1, r2
 8005d6a:	68f8      	ldr	r0, [r7, #12]
 8005d6c:	4798      	blx	r3
 8005d6e:	4603      	mov	r3, r0
 8005d70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005d72:	7dfb      	ldrb	r3, [r7, #23]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d001      	beq.n	8005d7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005d78:	7dfb      	ldrb	r3, [r7, #23]
 8005d7a:	e000      	b.n	8005d7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005d7c:	2300      	movs	r3, #0
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}

08005d86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005d86:	b580      	push	{r7, lr}
 8005d88:	b086      	sub	sp, #24
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	460b      	mov	r3, r1
 8005d90:	607a      	str	r2, [r7, #4]
 8005d92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005d94:	7afb      	ldrb	r3, [r7, #11]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d16f      	bne.n	8005e7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3314      	adds	r3, #20
 8005d9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d15a      	bne.n	8005e60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	68db      	ldr	r3, [r3, #12]
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d914      	bls.n	8005de0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	689a      	ldr	r2, [r3, #8]
 8005dba:	693b      	ldr	r3, [r7, #16]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	1ad2      	subs	r2, r2, r3
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	68f8      	ldr	r0, [r7, #12]
 8005dce:	f001 f8ac 	bl	8006f2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	2100      	movs	r1, #0
 8005dd8:	68f8      	ldr	r0, [r7, #12]
 8005dda:	f001 fdad 	bl	8007938 <USBD_LL_PrepareReceive>
 8005dde:	e03f      	b.n	8005e60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d11c      	bne.n	8005e26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	685a      	ldr	r2, [r3, #4]
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d316      	bcc.n	8005e26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005df8:	693b      	ldr	r3, [r7, #16]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e02:	429a      	cmp	r2, r3
 8005e04:	d20f      	bcs.n	8005e26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e06:	2200      	movs	r2, #0
 8005e08:	2100      	movs	r1, #0
 8005e0a:	68f8      	ldr	r0, [r7, #12]
 8005e0c:	f001 f88d 	bl	8006f2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e18:	2300      	movs	r3, #0
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	68f8      	ldr	r0, [r7, #12]
 8005e20:	f001 fd8a 	bl	8007938 <USBD_LL_PrepareReceive>
 8005e24:	e01c      	b.n	8005e60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e2c:	b2db      	uxtb	r3, r3
 8005e2e:	2b03      	cmp	r3, #3
 8005e30:	d10f      	bne.n	8005e52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e38:	68db      	ldr	r3, [r3, #12]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d009      	beq.n	8005e52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e52:	2180      	movs	r1, #128	; 0x80
 8005e54:	68f8      	ldr	r0, [r7, #12]
 8005e56:	f001 fcc5 	bl	80077e4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	f001 f8b7 	bl	8006fce <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d03a      	beq.n	8005ee0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f7ff fe42 	bl	8005af4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005e78:	e032      	b.n	8005ee0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005e7a:	7afb      	ldrb	r3, [r7, #11]
 8005e7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	4619      	mov	r1, r3
 8005e84:	68f8      	ldr	r0, [r7, #12]
 8005e86:	f000 f97f 	bl	8006188 <USBD_CoreFindEP>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e8e:	7dfb      	ldrb	r3, [r7, #23]
 8005e90:	2bff      	cmp	r3, #255	; 0xff
 8005e92:	d025      	beq.n	8005ee0 <USBD_LL_DataInStage+0x15a>
 8005e94:	7dfb      	ldrb	r3, [r7, #23]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d122      	bne.n	8005ee0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	2b03      	cmp	r3, #3
 8005ea4:	d11c      	bne.n	8005ee0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005ea6:	7dfa      	ldrb	r2, [r7, #23]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	32ae      	adds	r2, #174	; 0xae
 8005eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb0:	695b      	ldr	r3, [r3, #20]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d014      	beq.n	8005ee0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005eb6:	7dfa      	ldrb	r2, [r7, #23]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005ebe:	7dfa      	ldrb	r2, [r7, #23]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	32ae      	adds	r2, #174	; 0xae
 8005ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ec8:	695b      	ldr	r3, [r3, #20]
 8005eca:	7afa      	ldrb	r2, [r7, #11]
 8005ecc:	4611      	mov	r1, r2
 8005ece:	68f8      	ldr	r0, [r7, #12]
 8005ed0:	4798      	blx	r3
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005ed6:	7dbb      	ldrb	r3, [r7, #22]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d001      	beq.n	8005ee0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005edc:	7dbb      	ldrb	r3, [r7, #22]
 8005ede:	e000      	b.n	8005ee2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3718      	adds	r7, #24
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}

08005eea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005eea:	b580      	push	{r7, lr}
 8005eec:	b084      	sub	sp, #16
 8005eee:	af00      	add	r7, sp, #0
 8005ef0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d014      	beq.n	8005f50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00e      	beq.n	8005f50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	687a      	ldr	r2, [r7, #4]
 8005f3c:	6852      	ldr	r2, [r2, #4]
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	4611      	mov	r1, r2
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	4798      	blx	r3
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d001      	beq.n	8005f50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005f4c:	2303      	movs	r3, #3
 8005f4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f50:	2340      	movs	r3, #64	; 0x40
 8005f52:	2200      	movs	r2, #0
 8005f54:	2100      	movs	r1, #0
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f001 fbff 	bl	800775a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2240      	movs	r2, #64	; 0x40
 8005f68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005f6c:	2340      	movs	r3, #64	; 0x40
 8005f6e:	2200      	movs	r2, #0
 8005f70:	2180      	movs	r1, #128	; 0x80
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f001 fbf1 	bl	800775a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2240      	movs	r2, #64	; 0x40
 8005f82:	621a      	str	r2, [r3, #32]

  return ret;
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3710      	adds	r7, #16
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
 8005f96:	460b      	mov	r3, r1
 8005f98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	78fa      	ldrb	r2, [r7, #3]
 8005f9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005fa0:	2300      	movs	r3, #0
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	370c      	adds	r7, #12
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b083      	sub	sp, #12
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2204      	movs	r2, #4
 8005fc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	370c      	adds	r7, #12
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr

08005fda <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b04      	cmp	r3, #4
 8005fec:	d106      	bne.n	8005ffc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005ff4:	b2da      	uxtb	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005ffc:	2300      	movs	r3, #0
}
 8005ffe:	4618      	mov	r0, r3
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr

0800600a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800600a:	b580      	push	{r7, lr}
 800600c:	b082      	sub	sp, #8
 800600e:	af00      	add	r7, sp, #0
 8006010:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006018:	b2db      	uxtb	r3, r3
 800601a:	2b03      	cmp	r3, #3
 800601c:	d110      	bne.n	8006040 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00b      	beq.n	8006040 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800602e:	69db      	ldr	r3, [r3, #28]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d005      	beq.n	8006040 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603a:	69db      	ldr	r3, [r3, #28]
 800603c:	6878      	ldr	r0, [r7, #4]
 800603e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006040:	2300      	movs	r3, #0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}

0800604a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800604a:	b580      	push	{r7, lr}
 800604c:	b082      	sub	sp, #8
 800604e:	af00      	add	r7, sp, #0
 8006050:	6078      	str	r0, [r7, #4]
 8006052:	460b      	mov	r3, r1
 8006054:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	32ae      	adds	r2, #174	; 0xae
 8006060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d101      	bne.n	800606c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006068:	2303      	movs	r3, #3
 800606a:	e01c      	b.n	80060a6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b03      	cmp	r3, #3
 8006076:	d115      	bne.n	80060a4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	32ae      	adds	r2, #174	; 0xae
 8006082:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006086:	6a1b      	ldr	r3, [r3, #32]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d00b      	beq.n	80060a4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	32ae      	adds	r2, #174	; 0xae
 8006096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	78fa      	ldrb	r2, [r7, #3]
 800609e:	4611      	mov	r1, r2
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80060a4:	2300      	movs	r3, #0
}
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b082      	sub	sp, #8
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	6078      	str	r0, [r7, #4]
 80060b6:	460b      	mov	r3, r1
 80060b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	32ae      	adds	r2, #174	; 0xae
 80060c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d101      	bne.n	80060d0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80060cc:	2303      	movs	r3, #3
 80060ce:	e01c      	b.n	800610a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d115      	bne.n	8006108 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	32ae      	adds	r2, #174	; 0xae
 80060e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d00b      	beq.n	8006108 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	32ae      	adds	r2, #174	; 0xae
 80060fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	78fa      	ldrb	r2, [r7, #3]
 8006102:	4611      	mov	r1, r2
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3708      	adds	r7, #8
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006130:	2300      	movs	r3, #0
 8006132:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2201      	movs	r2, #1
 8006138:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00e      	beq.n	8006164 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	6852      	ldr	r2, [r2, #4]
 8006152:	b2d2      	uxtb	r2, r2
 8006154:	4611      	mov	r1, r2
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	4798      	blx	r3
 800615a:	4603      	mov	r3, r0
 800615c:	2b00      	cmp	r3, #0
 800615e:	d001      	beq.n	8006164 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006160:	2303      	movs	r3, #3
 8006162:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006164:	7bfb      	ldrb	r3, [r7, #15]
}
 8006166:	4618      	mov	r0, r3
 8006168:	3710      	adds	r7, #16
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}

0800616e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800616e:	b480      	push	{r7}
 8006170:	b083      	sub	sp, #12
 8006172:	af00      	add	r7, sp, #0
 8006174:	6078      	str	r0, [r7, #4]
 8006176:	460b      	mov	r3, r1
 8006178:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800617a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800617c:	4618      	mov	r0, r3
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006188:	b480      	push	{r7}
 800618a:	b083      	sub	sp, #12
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	460b      	mov	r3, r1
 8006192:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006194:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006196:	4618      	mov	r0, r3
 8006198:	370c      	adds	r7, #12
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr

080061a2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80061a2:	b580      	push	{r7, lr}
 80061a4:	b086      	sub	sp, #24
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
 80061aa:	460b      	mov	r3, r1
 80061ac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80061b6:	2300      	movs	r3, #0
 80061b8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	885b      	ldrh	r3, [r3, #2]
 80061be:	b29a      	uxth	r2, r3
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	781b      	ldrb	r3, [r3, #0]
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	429a      	cmp	r2, r3
 80061c8:	d920      	bls.n	800620c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80061d2:	e013      	b.n	80061fc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80061d4:	f107 030a 	add.w	r3, r7, #10
 80061d8:	4619      	mov	r1, r3
 80061da:	6978      	ldr	r0, [r7, #20]
 80061dc:	f000 f81b 	bl	8006216 <USBD_GetNextDesc>
 80061e0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	785b      	ldrb	r3, [r3, #1]
 80061e6:	2b05      	cmp	r3, #5
 80061e8:	d108      	bne.n	80061fc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	789b      	ldrb	r3, [r3, #2]
 80061f2:	78fa      	ldrb	r2, [r7, #3]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d008      	beq.n	800620a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80061f8:	2300      	movs	r3, #0
 80061fa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	885b      	ldrh	r3, [r3, #2]
 8006200:	b29a      	uxth	r2, r3
 8006202:	897b      	ldrh	r3, [r7, #10]
 8006204:	429a      	cmp	r2, r3
 8006206:	d8e5      	bhi.n	80061d4 <USBD_GetEpDesc+0x32>
 8006208:	e000      	b.n	800620c <USBD_GetEpDesc+0x6a>
          break;
 800620a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800620c:	693b      	ldr	r3, [r7, #16]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3718      	adds	r7, #24
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006216:	b480      	push	{r7}
 8006218:	b085      	sub	sp, #20
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	881a      	ldrh	r2, [r3, #0]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	781b      	ldrb	r3, [r3, #0]
 800622c:	b29b      	uxth	r3, r3
 800622e:	4413      	add	r3, r2
 8006230:	b29a      	uxth	r2, r3
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4413      	add	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006242:	68fb      	ldr	r3, [r7, #12]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006262:	697b      	ldr	r3, [r7, #20]
 8006264:	3301      	adds	r3, #1
 8006266:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800626e:	8a3b      	ldrh	r3, [r7, #16]
 8006270:	021b      	lsls	r3, r3, #8
 8006272:	b21a      	sxth	r2, r3
 8006274:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006278:	4313      	orrs	r3, r2
 800627a:	b21b      	sxth	r3, r3
 800627c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800627e:	89fb      	ldrh	r3, [r7, #14]
}
 8006280:	4618      	mov	r0, r3
 8006282:	371c      	adds	r7, #28
 8006284:	46bd      	mov	sp, r7
 8006286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628a:	4770      	bx	lr

0800628c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006296:	2300      	movs	r3, #0
 8006298:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80062a2:	2b40      	cmp	r3, #64	; 0x40
 80062a4:	d005      	beq.n	80062b2 <USBD_StdDevReq+0x26>
 80062a6:	2b40      	cmp	r3, #64	; 0x40
 80062a8:	d857      	bhi.n	800635a <USBD_StdDevReq+0xce>
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00f      	beq.n	80062ce <USBD_StdDevReq+0x42>
 80062ae:	2b20      	cmp	r3, #32
 80062b0:	d153      	bne.n	800635a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	32ae      	adds	r2, #174	; 0xae
 80062bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062c0:	689b      	ldr	r3, [r3, #8]
 80062c2:	6839      	ldr	r1, [r7, #0]
 80062c4:	6878      	ldr	r0, [r7, #4]
 80062c6:	4798      	blx	r3
 80062c8:	4603      	mov	r3, r0
 80062ca:	73fb      	strb	r3, [r7, #15]
      break;
 80062cc:	e04a      	b.n	8006364 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	785b      	ldrb	r3, [r3, #1]
 80062d2:	2b09      	cmp	r3, #9
 80062d4:	d83b      	bhi.n	800634e <USBD_StdDevReq+0xc2>
 80062d6:	a201      	add	r2, pc, #4	; (adr r2, 80062dc <USBD_StdDevReq+0x50>)
 80062d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062dc:	08006331 	.word	0x08006331
 80062e0:	08006345 	.word	0x08006345
 80062e4:	0800634f 	.word	0x0800634f
 80062e8:	0800633b 	.word	0x0800633b
 80062ec:	0800634f 	.word	0x0800634f
 80062f0:	0800630f 	.word	0x0800630f
 80062f4:	08006305 	.word	0x08006305
 80062f8:	0800634f 	.word	0x0800634f
 80062fc:	08006327 	.word	0x08006327
 8006300:	08006319 	.word	0x08006319
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006304:	6839      	ldr	r1, [r7, #0]
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 fa3c 	bl	8006784 <USBD_GetDescriptor>
          break;
 800630c:	e024      	b.n	8006358 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	6878      	ldr	r0, [r7, #4]
 8006312:	f000 fba1 	bl	8006a58 <USBD_SetAddress>
          break;
 8006316:	e01f      	b.n	8006358 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006318:	6839      	ldr	r1, [r7, #0]
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f000 fbe0 	bl	8006ae0 <USBD_SetConfig>
 8006320:	4603      	mov	r3, r0
 8006322:	73fb      	strb	r3, [r7, #15]
          break;
 8006324:	e018      	b.n	8006358 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006326:	6839      	ldr	r1, [r7, #0]
 8006328:	6878      	ldr	r0, [r7, #4]
 800632a:	f000 fc83 	bl	8006c34 <USBD_GetConfig>
          break;
 800632e:	e013      	b.n	8006358 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006330:	6839      	ldr	r1, [r7, #0]
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	f000 fcb4 	bl	8006ca0 <USBD_GetStatus>
          break;
 8006338:	e00e      	b.n	8006358 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800633a:	6839      	ldr	r1, [r7, #0]
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 fce3 	bl	8006d08 <USBD_SetFeature>
          break;
 8006342:	e009      	b.n	8006358 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006344:	6839      	ldr	r1, [r7, #0]
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 fd07 	bl	8006d5a <USBD_ClrFeature>
          break;
 800634c:	e004      	b.n	8006358 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800634e:	6839      	ldr	r1, [r7, #0]
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fd5e 	bl	8006e12 <USBD_CtlError>
          break;
 8006356:	bf00      	nop
      }
      break;
 8006358:	e004      	b.n	8006364 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800635a:	6839      	ldr	r1, [r7, #0]
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fd58 	bl	8006e12 <USBD_CtlError>
      break;
 8006362:	bf00      	nop
  }

  return ret;
 8006364:	7bfb      	ldrb	r3, [r7, #15]
}
 8006366:	4618      	mov	r0, r3
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop

08006370 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	781b      	ldrb	r3, [r3, #0]
 8006382:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006386:	2b40      	cmp	r3, #64	; 0x40
 8006388:	d005      	beq.n	8006396 <USBD_StdItfReq+0x26>
 800638a:	2b40      	cmp	r3, #64	; 0x40
 800638c:	d852      	bhi.n	8006434 <USBD_StdItfReq+0xc4>
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <USBD_StdItfReq+0x26>
 8006392:	2b20      	cmp	r3, #32
 8006394:	d14e      	bne.n	8006434 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800639c:	b2db      	uxtb	r3, r3
 800639e:	3b01      	subs	r3, #1
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d840      	bhi.n	8006426 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	889b      	ldrh	r3, [r3, #4]
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d836      	bhi.n	800641c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	889b      	ldrh	r3, [r3, #4]
 80063b2:	b2db      	uxtb	r3, r3
 80063b4:	4619      	mov	r1, r3
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7ff fed9 	bl	800616e <USBD_CoreFindIF>
 80063bc:	4603      	mov	r3, r0
 80063be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063c0:	7bbb      	ldrb	r3, [r7, #14]
 80063c2:	2bff      	cmp	r3, #255	; 0xff
 80063c4:	d01d      	beq.n	8006402 <USBD_StdItfReq+0x92>
 80063c6:	7bbb      	ldrb	r3, [r7, #14]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d11a      	bne.n	8006402 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80063cc:	7bba      	ldrb	r2, [r7, #14]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	32ae      	adds	r2, #174	; 0xae
 80063d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d6:	689b      	ldr	r3, [r3, #8]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d00f      	beq.n	80063fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80063dc:	7bba      	ldrb	r2, [r7, #14]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80063e4:	7bba      	ldrb	r2, [r7, #14]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	32ae      	adds	r2, #174	; 0xae
 80063ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	6839      	ldr	r1, [r7, #0]
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	4798      	blx	r3
 80063f6:	4603      	mov	r3, r0
 80063f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80063fa:	e004      	b.n	8006406 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80063fc:	2303      	movs	r3, #3
 80063fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006400:	e001      	b.n	8006406 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006402:	2303      	movs	r3, #3
 8006404:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	88db      	ldrh	r3, [r3, #6]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d110      	bne.n	8006430 <USBD_StdItfReq+0xc0>
 800640e:	7bfb      	ldrb	r3, [r7, #15]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10d      	bne.n	8006430 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006414:	6878      	ldr	r0, [r7, #4]
 8006416:	f000 fdc7 	bl	8006fa8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800641a:	e009      	b.n	8006430 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800641c:	6839      	ldr	r1, [r7, #0]
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f000 fcf7 	bl	8006e12 <USBD_CtlError>
          break;
 8006424:	e004      	b.n	8006430 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006426:	6839      	ldr	r1, [r7, #0]
 8006428:	6878      	ldr	r0, [r7, #4]
 800642a:	f000 fcf2 	bl	8006e12 <USBD_CtlError>
          break;
 800642e:	e000      	b.n	8006432 <USBD_StdItfReq+0xc2>
          break;
 8006430:	bf00      	nop
      }
      break;
 8006432:	e004      	b.n	800643e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006434:	6839      	ldr	r1, [r7, #0]
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fceb 	bl	8006e12 <USBD_CtlError>
      break;
 800643c:	bf00      	nop
  }

  return ret;
 800643e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006440:	4618      	mov	r0, r3
 8006442:	3710      	adds	r7, #16
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b084      	sub	sp, #16
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006452:	2300      	movs	r3, #0
 8006454:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	889b      	ldrh	r3, [r3, #4]
 800645a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006464:	2b40      	cmp	r3, #64	; 0x40
 8006466:	d007      	beq.n	8006478 <USBD_StdEPReq+0x30>
 8006468:	2b40      	cmp	r3, #64	; 0x40
 800646a:	f200 817f 	bhi.w	800676c <USBD_StdEPReq+0x324>
 800646e:	2b00      	cmp	r3, #0
 8006470:	d02a      	beq.n	80064c8 <USBD_StdEPReq+0x80>
 8006472:	2b20      	cmp	r3, #32
 8006474:	f040 817a 	bne.w	800676c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	4619      	mov	r1, r3
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f7ff fe83 	bl	8006188 <USBD_CoreFindEP>
 8006482:	4603      	mov	r3, r0
 8006484:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006486:	7b7b      	ldrb	r3, [r7, #13]
 8006488:	2bff      	cmp	r3, #255	; 0xff
 800648a:	f000 8174 	beq.w	8006776 <USBD_StdEPReq+0x32e>
 800648e:	7b7b      	ldrb	r3, [r7, #13]
 8006490:	2b00      	cmp	r3, #0
 8006492:	f040 8170 	bne.w	8006776 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006496:	7b7a      	ldrb	r2, [r7, #13]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800649e:	7b7a      	ldrb	r2, [r7, #13]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	32ae      	adds	r2, #174	; 0xae
 80064a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	f000 8163 	beq.w	8006776 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80064b0:	7b7a      	ldrb	r2, [r7, #13]
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	32ae      	adds	r2, #174	; 0xae
 80064b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	6839      	ldr	r1, [r7, #0]
 80064be:	6878      	ldr	r0, [r7, #4]
 80064c0:	4798      	blx	r3
 80064c2:	4603      	mov	r3, r0
 80064c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80064c6:	e156      	b.n	8006776 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	785b      	ldrb	r3, [r3, #1]
 80064cc:	2b03      	cmp	r3, #3
 80064ce:	d008      	beq.n	80064e2 <USBD_StdEPReq+0x9a>
 80064d0:	2b03      	cmp	r3, #3
 80064d2:	f300 8145 	bgt.w	8006760 <USBD_StdEPReq+0x318>
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 809b 	beq.w	8006612 <USBD_StdEPReq+0x1ca>
 80064dc:	2b01      	cmp	r3, #1
 80064de:	d03c      	beq.n	800655a <USBD_StdEPReq+0x112>
 80064e0:	e13e      	b.n	8006760 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d002      	beq.n	80064f4 <USBD_StdEPReq+0xac>
 80064ee:	2b03      	cmp	r3, #3
 80064f0:	d016      	beq.n	8006520 <USBD_StdEPReq+0xd8>
 80064f2:	e02c      	b.n	800654e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80064f4:	7bbb      	ldrb	r3, [r7, #14]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00d      	beq.n	8006516 <USBD_StdEPReq+0xce>
 80064fa:	7bbb      	ldrb	r3, [r7, #14]
 80064fc:	2b80      	cmp	r3, #128	; 0x80
 80064fe:	d00a      	beq.n	8006516 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f001 f96d 	bl	80077e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800650a:	2180      	movs	r1, #128	; 0x80
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f001 f969 	bl	80077e4 <USBD_LL_StallEP>
 8006512:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006514:	e020      	b.n	8006558 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006516:	6839      	ldr	r1, [r7, #0]
 8006518:	6878      	ldr	r0, [r7, #4]
 800651a:	f000 fc7a 	bl	8006e12 <USBD_CtlError>
              break;
 800651e:	e01b      	b.n	8006558 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	885b      	ldrh	r3, [r3, #2]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10e      	bne.n	8006546 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006528:	7bbb      	ldrb	r3, [r7, #14]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d00b      	beq.n	8006546 <USBD_StdEPReq+0xfe>
 800652e:	7bbb      	ldrb	r3, [r7, #14]
 8006530:	2b80      	cmp	r3, #128	; 0x80
 8006532:	d008      	beq.n	8006546 <USBD_StdEPReq+0xfe>
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	88db      	ldrh	r3, [r3, #6]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d104      	bne.n	8006546 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800653c:	7bbb      	ldrb	r3, [r7, #14]
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f001 f94f 	bl	80077e4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 fd2e 	bl	8006fa8 <USBD_CtlSendStatus>

              break;
 800654c:	e004      	b.n	8006558 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800654e:	6839      	ldr	r1, [r7, #0]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fc5e 	bl	8006e12 <USBD_CtlError>
              break;
 8006556:	bf00      	nop
          }
          break;
 8006558:	e107      	b.n	800676a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006560:	b2db      	uxtb	r3, r3
 8006562:	2b02      	cmp	r3, #2
 8006564:	d002      	beq.n	800656c <USBD_StdEPReq+0x124>
 8006566:	2b03      	cmp	r3, #3
 8006568:	d016      	beq.n	8006598 <USBD_StdEPReq+0x150>
 800656a:	e04b      	b.n	8006604 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800656c:	7bbb      	ldrb	r3, [r7, #14]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d00d      	beq.n	800658e <USBD_StdEPReq+0x146>
 8006572:	7bbb      	ldrb	r3, [r7, #14]
 8006574:	2b80      	cmp	r3, #128	; 0x80
 8006576:	d00a      	beq.n	800658e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006578:	7bbb      	ldrb	r3, [r7, #14]
 800657a:	4619      	mov	r1, r3
 800657c:	6878      	ldr	r0, [r7, #4]
 800657e:	f001 f931 	bl	80077e4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006582:	2180      	movs	r1, #128	; 0x80
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f001 f92d 	bl	80077e4 <USBD_LL_StallEP>
 800658a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800658c:	e040      	b.n	8006610 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800658e:	6839      	ldr	r1, [r7, #0]
 8006590:	6878      	ldr	r0, [r7, #4]
 8006592:	f000 fc3e 	bl	8006e12 <USBD_CtlError>
              break;
 8006596:	e03b      	b.n	8006610 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	885b      	ldrh	r3, [r3, #2]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d136      	bne.n	800660e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80065a0:	7bbb      	ldrb	r3, [r7, #14]
 80065a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d004      	beq.n	80065b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80065aa:	7bbb      	ldrb	r3, [r7, #14]
 80065ac:	4619      	mov	r1, r3
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f001 f937 	bl	8007822 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 fcf7 	bl	8006fa8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
 80065bc:	4619      	mov	r1, r3
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7ff fde2 	bl	8006188 <USBD_CoreFindEP>
 80065c4:	4603      	mov	r3, r0
 80065c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065c8:	7b7b      	ldrb	r3, [r7, #13]
 80065ca:	2bff      	cmp	r3, #255	; 0xff
 80065cc:	d01f      	beq.n	800660e <USBD_StdEPReq+0x1c6>
 80065ce:	7b7b      	ldrb	r3, [r7, #13]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d11c      	bne.n	800660e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80065d4:	7b7a      	ldrb	r2, [r7, #13]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80065dc:	7b7a      	ldrb	r2, [r7, #13]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	32ae      	adds	r2, #174	; 0xae
 80065e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d010      	beq.n	800660e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80065ec:	7b7a      	ldrb	r2, [r7, #13]
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	32ae      	adds	r2, #174	; 0xae
 80065f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065f6:	689b      	ldr	r3, [r3, #8]
 80065f8:	6839      	ldr	r1, [r7, #0]
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	4798      	blx	r3
 80065fe:	4603      	mov	r3, r0
 8006600:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006602:	e004      	b.n	800660e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fc03 	bl	8006e12 <USBD_CtlError>
              break;
 800660c:	e000      	b.n	8006610 <USBD_StdEPReq+0x1c8>
              break;
 800660e:	bf00      	nop
          }
          break;
 8006610:	e0ab      	b.n	800676a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d002      	beq.n	8006624 <USBD_StdEPReq+0x1dc>
 800661e:	2b03      	cmp	r3, #3
 8006620:	d032      	beq.n	8006688 <USBD_StdEPReq+0x240>
 8006622:	e097      	b.n	8006754 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006624:	7bbb      	ldrb	r3, [r7, #14]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d007      	beq.n	800663a <USBD_StdEPReq+0x1f2>
 800662a:	7bbb      	ldrb	r3, [r7, #14]
 800662c:	2b80      	cmp	r3, #128	; 0x80
 800662e:	d004      	beq.n	800663a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006630:	6839      	ldr	r1, [r7, #0]
 8006632:	6878      	ldr	r0, [r7, #4]
 8006634:	f000 fbed 	bl	8006e12 <USBD_CtlError>
                break;
 8006638:	e091      	b.n	800675e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800663a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800663e:	2b00      	cmp	r3, #0
 8006640:	da0b      	bge.n	800665a <USBD_StdEPReq+0x212>
 8006642:	7bbb      	ldrb	r3, [r7, #14]
 8006644:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006648:	4613      	mov	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	3310      	adds	r3, #16
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	4413      	add	r3, r2
 8006656:	3304      	adds	r3, #4
 8006658:	e00b      	b.n	8006672 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800665a:	7bbb      	ldrb	r3, [r7, #14]
 800665c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006660:	4613      	mov	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	4413      	add	r3, r2
 8006666:	009b      	lsls	r3, r3, #2
 8006668:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800666c:	687a      	ldr	r2, [r7, #4]
 800666e:	4413      	add	r3, r2
 8006670:	3304      	adds	r3, #4
 8006672:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	2200      	movs	r2, #0
 8006678:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	2202      	movs	r2, #2
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f000 fc37 	bl	8006ef4 <USBD_CtlSendData>
              break;
 8006686:	e06a      	b.n	800675e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006688:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800668c:	2b00      	cmp	r3, #0
 800668e:	da11      	bge.n	80066b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006690:	7bbb      	ldrb	r3, [r7, #14]
 8006692:	f003 020f 	and.w	r2, r3, #15
 8006696:	6879      	ldr	r1, [r7, #4]
 8006698:	4613      	mov	r3, r2
 800669a:	009b      	lsls	r3, r3, #2
 800669c:	4413      	add	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	440b      	add	r3, r1
 80066a2:	3324      	adds	r3, #36	; 0x24
 80066a4:	881b      	ldrh	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d117      	bne.n	80066da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80066aa:	6839      	ldr	r1, [r7, #0]
 80066ac:	6878      	ldr	r0, [r7, #4]
 80066ae:	f000 fbb0 	bl	8006e12 <USBD_CtlError>
                  break;
 80066b2:	e054      	b.n	800675e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80066b4:	7bbb      	ldrb	r3, [r7, #14]
 80066b6:	f003 020f 	and.w	r2, r3, #15
 80066ba:	6879      	ldr	r1, [r7, #4]
 80066bc:	4613      	mov	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	440b      	add	r3, r1
 80066c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80066ca:	881b      	ldrh	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d104      	bne.n	80066da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 fb9d 	bl	8006e12 <USBD_CtlError>
                  break;
 80066d8:	e041      	b.n	800675e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	da0b      	bge.n	80066fa <USBD_StdEPReq+0x2b2>
 80066e2:	7bbb      	ldrb	r3, [r7, #14]
 80066e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066e8:	4613      	mov	r3, r2
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	4413      	add	r3, r2
 80066ee:	009b      	lsls	r3, r3, #2
 80066f0:	3310      	adds	r3, #16
 80066f2:	687a      	ldr	r2, [r7, #4]
 80066f4:	4413      	add	r3, r2
 80066f6:	3304      	adds	r3, #4
 80066f8:	e00b      	b.n	8006712 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006700:	4613      	mov	r3, r2
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	4413      	add	r3, r2
 8006710:	3304      	adds	r3, #4
 8006712:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006714:	7bbb      	ldrb	r3, [r7, #14]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d002      	beq.n	8006720 <USBD_StdEPReq+0x2d8>
 800671a:	7bbb      	ldrb	r3, [r7, #14]
 800671c:	2b80      	cmp	r3, #128	; 0x80
 800671e:	d103      	bne.n	8006728 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
 8006726:	e00e      	b.n	8006746 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006728:	7bbb      	ldrb	r3, [r7, #14]
 800672a:	4619      	mov	r1, r3
 800672c:	6878      	ldr	r0, [r7, #4]
 800672e:	f001 f897 	bl	8007860 <USBD_LL_IsStallEP>
 8006732:	4603      	mov	r3, r0
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2201      	movs	r2, #1
 800673c:	601a      	str	r2, [r3, #0]
 800673e:	e002      	b.n	8006746 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	2200      	movs	r2, #0
 8006744:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	2202      	movs	r2, #2
 800674a:	4619      	mov	r1, r3
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f000 fbd1 	bl	8006ef4 <USBD_CtlSendData>
              break;
 8006752:	e004      	b.n	800675e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fb5b 	bl	8006e12 <USBD_CtlError>
              break;
 800675c:	bf00      	nop
          }
          break;
 800675e:	e004      	b.n	800676a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fb55 	bl	8006e12 <USBD_CtlError>
          break;
 8006768:	bf00      	nop
      }
      break;
 800676a:	e005      	b.n	8006778 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800676c:	6839      	ldr	r1, [r7, #0]
 800676e:	6878      	ldr	r0, [r7, #4]
 8006770:	f000 fb4f 	bl	8006e12 <USBD_CtlError>
      break;
 8006774:	e000      	b.n	8006778 <USBD_StdEPReq+0x330>
      break;
 8006776:	bf00      	nop
  }

  return ret;
 8006778:	7bfb      	ldrb	r3, [r7, #15]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3710      	adds	r7, #16
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
	...

08006784 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b084      	sub	sp, #16
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800678e:	2300      	movs	r3, #0
 8006790:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006792:	2300      	movs	r3, #0
 8006794:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006796:	2300      	movs	r3, #0
 8006798:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	885b      	ldrh	r3, [r3, #2]
 800679e:	0a1b      	lsrs	r3, r3, #8
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	3b01      	subs	r3, #1
 80067a4:	2b06      	cmp	r3, #6
 80067a6:	f200 8128 	bhi.w	80069fa <USBD_GetDescriptor+0x276>
 80067aa:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <USBD_GetDescriptor+0x2c>)
 80067ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b0:	080067cd 	.word	0x080067cd
 80067b4:	080067e5 	.word	0x080067e5
 80067b8:	08006825 	.word	0x08006825
 80067bc:	080069fb 	.word	0x080069fb
 80067c0:	080069fb 	.word	0x080069fb
 80067c4:	0800699b 	.word	0x0800699b
 80067c8:	080069c7 	.word	0x080069c7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	7c12      	ldrb	r2, [r2, #16]
 80067d8:	f107 0108 	add.w	r1, r7, #8
 80067dc:	4610      	mov	r0, r2
 80067de:	4798      	blx	r3
 80067e0:	60f8      	str	r0, [r7, #12]
      break;
 80067e2:	e112      	b.n	8006a0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	7c1b      	ldrb	r3, [r3, #16]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10d      	bne.n	8006808 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f4:	f107 0208 	add.w	r2, r7, #8
 80067f8:	4610      	mov	r0, r2
 80067fa:	4798      	blx	r3
 80067fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	3301      	adds	r3, #1
 8006802:	2202      	movs	r2, #2
 8006804:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006806:	e100      	b.n	8006a0a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800680e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006810:	f107 0208 	add.w	r2, r7, #8
 8006814:	4610      	mov	r0, r2
 8006816:	4798      	blx	r3
 8006818:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	3301      	adds	r3, #1
 800681e:	2202      	movs	r2, #2
 8006820:	701a      	strb	r2, [r3, #0]
      break;
 8006822:	e0f2      	b.n	8006a0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	885b      	ldrh	r3, [r3, #2]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b05      	cmp	r3, #5
 800682c:	f200 80ac 	bhi.w	8006988 <USBD_GetDescriptor+0x204>
 8006830:	a201      	add	r2, pc, #4	; (adr r2, 8006838 <USBD_GetDescriptor+0xb4>)
 8006832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006836:	bf00      	nop
 8006838:	08006851 	.word	0x08006851
 800683c:	08006885 	.word	0x08006885
 8006840:	080068b9 	.word	0x080068b9
 8006844:	080068ed 	.word	0x080068ed
 8006848:	08006921 	.word	0x08006921
 800684c:	08006955 	.word	0x08006955
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006856:	685b      	ldr	r3, [r3, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d00b      	beq.n	8006874 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	7c12      	ldrb	r2, [r2, #16]
 8006868:	f107 0108 	add.w	r1, r7, #8
 800686c:	4610      	mov	r0, r2
 800686e:	4798      	blx	r3
 8006870:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006872:	e091      	b.n	8006998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006874:	6839      	ldr	r1, [r7, #0]
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 facb 	bl	8006e12 <USBD_CtlError>
            err++;
 800687c:	7afb      	ldrb	r3, [r7, #11]
 800687e:	3301      	adds	r3, #1
 8006880:	72fb      	strb	r3, [r7, #11]
          break;
 8006882:	e089      	b.n	8006998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d00b      	beq.n	80068a8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	7c12      	ldrb	r2, [r2, #16]
 800689c:	f107 0108 	add.w	r1, r7, #8
 80068a0:	4610      	mov	r0, r2
 80068a2:	4798      	blx	r3
 80068a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068a6:	e077      	b.n	8006998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068a8:	6839      	ldr	r1, [r7, #0]
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 fab1 	bl	8006e12 <USBD_CtlError>
            err++;
 80068b0:	7afb      	ldrb	r3, [r7, #11]
 80068b2:	3301      	adds	r3, #1
 80068b4:	72fb      	strb	r3, [r7, #11]
          break;
 80068b6:	e06f      	b.n	8006998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d00b      	beq.n	80068dc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	7c12      	ldrb	r2, [r2, #16]
 80068d0:	f107 0108 	add.w	r1, r7, #8
 80068d4:	4610      	mov	r0, r2
 80068d6:	4798      	blx	r3
 80068d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80068da:	e05d      	b.n	8006998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80068dc:	6839      	ldr	r1, [r7, #0]
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	f000 fa97 	bl	8006e12 <USBD_CtlError>
            err++;
 80068e4:	7afb      	ldrb	r3, [r7, #11]
 80068e6:	3301      	adds	r3, #1
 80068e8:	72fb      	strb	r3, [r7, #11]
          break;
 80068ea:	e055      	b.n	8006998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00b      	beq.n	8006910 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068fe:	691b      	ldr	r3, [r3, #16]
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	7c12      	ldrb	r2, [r2, #16]
 8006904:	f107 0108 	add.w	r1, r7, #8
 8006908:	4610      	mov	r0, r2
 800690a:	4798      	blx	r3
 800690c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800690e:	e043      	b.n	8006998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f000 fa7d 	bl	8006e12 <USBD_CtlError>
            err++;
 8006918:	7afb      	ldrb	r3, [r7, #11]
 800691a:	3301      	adds	r3, #1
 800691c:	72fb      	strb	r3, [r7, #11]
          break;
 800691e:	e03b      	b.n	8006998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006926:	695b      	ldr	r3, [r3, #20]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00b      	beq.n	8006944 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	687a      	ldr	r2, [r7, #4]
 8006936:	7c12      	ldrb	r2, [r2, #16]
 8006938:	f107 0108 	add.w	r1, r7, #8
 800693c:	4610      	mov	r0, r2
 800693e:	4798      	blx	r3
 8006940:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006942:	e029      	b.n	8006998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006944:	6839      	ldr	r1, [r7, #0]
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fa63 	bl	8006e12 <USBD_CtlError>
            err++;
 800694c:	7afb      	ldrb	r3, [r7, #11]
 800694e:	3301      	adds	r3, #1
 8006950:	72fb      	strb	r3, [r7, #11]
          break;
 8006952:	e021      	b.n	8006998 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800695a:	699b      	ldr	r3, [r3, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00b      	beq.n	8006978 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006966:	699b      	ldr	r3, [r3, #24]
 8006968:	687a      	ldr	r2, [r7, #4]
 800696a:	7c12      	ldrb	r2, [r2, #16]
 800696c:	f107 0108 	add.w	r1, r7, #8
 8006970:	4610      	mov	r0, r2
 8006972:	4798      	blx	r3
 8006974:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006976:	e00f      	b.n	8006998 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 fa49 	bl	8006e12 <USBD_CtlError>
            err++;
 8006980:	7afb      	ldrb	r3, [r7, #11]
 8006982:	3301      	adds	r3, #1
 8006984:	72fb      	strb	r3, [r7, #11]
          break;
 8006986:	e007      	b.n	8006998 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006988:	6839      	ldr	r1, [r7, #0]
 800698a:	6878      	ldr	r0, [r7, #4]
 800698c:	f000 fa41 	bl	8006e12 <USBD_CtlError>
          err++;
 8006990:	7afb      	ldrb	r3, [r7, #11]
 8006992:	3301      	adds	r3, #1
 8006994:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006996:	bf00      	nop
      }
      break;
 8006998:	e037      	b.n	8006a0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	7c1b      	ldrb	r3, [r3, #16]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d109      	bne.n	80069b6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069aa:	f107 0208 	add.w	r2, r7, #8
 80069ae:	4610      	mov	r0, r2
 80069b0:	4798      	blx	r3
 80069b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069b4:	e029      	b.n	8006a0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80069b6:	6839      	ldr	r1, [r7, #0]
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 fa2a 	bl	8006e12 <USBD_CtlError>
        err++;
 80069be:	7afb      	ldrb	r3, [r7, #11]
 80069c0:	3301      	adds	r3, #1
 80069c2:	72fb      	strb	r3, [r7, #11]
      break;
 80069c4:	e021      	b.n	8006a0a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	7c1b      	ldrb	r3, [r3, #16]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d10d      	bne.n	80069ea <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069d6:	f107 0208 	add.w	r2, r7, #8
 80069da:	4610      	mov	r0, r2
 80069dc:	4798      	blx	r3
 80069de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	3301      	adds	r3, #1
 80069e4:	2207      	movs	r2, #7
 80069e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80069e8:	e00f      	b.n	8006a0a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fa10 	bl	8006e12 <USBD_CtlError>
        err++;
 80069f2:	7afb      	ldrb	r3, [r7, #11]
 80069f4:	3301      	adds	r3, #1
 80069f6:	72fb      	strb	r3, [r7, #11]
      break;
 80069f8:	e007      	b.n	8006a0a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80069fa:	6839      	ldr	r1, [r7, #0]
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fa08 	bl	8006e12 <USBD_CtlError>
      err++;
 8006a02:	7afb      	ldrb	r3, [r7, #11]
 8006a04:	3301      	adds	r3, #1
 8006a06:	72fb      	strb	r3, [r7, #11]
      break;
 8006a08:	bf00      	nop
  }

  if (err != 0U)
 8006a0a:	7afb      	ldrb	r3, [r7, #11]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d11e      	bne.n	8006a4e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	88db      	ldrh	r3, [r3, #6]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d016      	beq.n	8006a46 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006a18:	893b      	ldrh	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00e      	beq.n	8006a3c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	88da      	ldrh	r2, [r3, #6]
 8006a22:	893b      	ldrh	r3, [r7, #8]
 8006a24:	4293      	cmp	r3, r2
 8006a26:	bf28      	it	cs
 8006a28:	4613      	movcs	r3, r2
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006a2e:	893b      	ldrh	r3, [r7, #8]
 8006a30:	461a      	mov	r2, r3
 8006a32:	68f9      	ldr	r1, [r7, #12]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 fa5d 	bl	8006ef4 <USBD_CtlSendData>
 8006a3a:	e009      	b.n	8006a50 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006a3c:	6839      	ldr	r1, [r7, #0]
 8006a3e:	6878      	ldr	r0, [r7, #4]
 8006a40:	f000 f9e7 	bl	8006e12 <USBD_CtlError>
 8006a44:	e004      	b.n	8006a50 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 faae 	bl	8006fa8 <USBD_CtlSendStatus>
 8006a4c:	e000      	b.n	8006a50 <USBD_GetDescriptor+0x2cc>
    return;
 8006a4e:	bf00      	nop
  }
}
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop

08006a58 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b084      	sub	sp, #16
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	889b      	ldrh	r3, [r3, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d131      	bne.n	8006ace <USBD_SetAddress+0x76>
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	88db      	ldrh	r3, [r3, #6]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d12d      	bne.n	8006ace <USBD_SetAddress+0x76>
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	885b      	ldrh	r3, [r3, #2]
 8006a76:	2b7f      	cmp	r3, #127	; 0x7f
 8006a78:	d829      	bhi.n	8006ace <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	885b      	ldrh	r3, [r3, #2]
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006a84:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a8c:	b2db      	uxtb	r3, r3
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d104      	bne.n	8006a9c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006a92:	6839      	ldr	r1, [r7, #0]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f000 f9bc 	bl	8006e12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a9a:	e01d      	b.n	8006ad8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	7bfa      	ldrb	r2, [r7, #15]
 8006aa0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	4619      	mov	r1, r3
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 ff05 	bl	80078b8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006aae:	6878      	ldr	r0, [r7, #4]
 8006ab0:	f000 fa7a 	bl	8006fa8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006ab4:	7bfb      	ldrb	r3, [r7, #15]
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d004      	beq.n	8006ac4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2202      	movs	r2, #2
 8006abe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ac2:	e009      	b.n	8006ad8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006acc:	e004      	b.n	8006ad8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006ace:	6839      	ldr	r1, [r7, #0]
 8006ad0:	6878      	ldr	r0, [r7, #4]
 8006ad2:	f000 f99e 	bl	8006e12 <USBD_CtlError>
  }
}
 8006ad6:	bf00      	nop
 8006ad8:	bf00      	nop
 8006ada:	3710      	adds	r7, #16
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
 8006ae8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006aea:	2300      	movs	r3, #0
 8006aec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	885b      	ldrh	r3, [r3, #2]
 8006af2:	b2da      	uxtb	r2, r3
 8006af4:	4b4e      	ldr	r3, [pc, #312]	; (8006c30 <USBD_SetConfig+0x150>)
 8006af6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006af8:	4b4d      	ldr	r3, [pc, #308]	; (8006c30 <USBD_SetConfig+0x150>)
 8006afa:	781b      	ldrb	r3, [r3, #0]
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d905      	bls.n	8006b0c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b00:	6839      	ldr	r1, [r7, #0]
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 f985 	bl	8006e12 <USBD_CtlError>
    return USBD_FAIL;
 8006b08:	2303      	movs	r3, #3
 8006b0a:	e08c      	b.n	8006c26 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	2b02      	cmp	r3, #2
 8006b16:	d002      	beq.n	8006b1e <USBD_SetConfig+0x3e>
 8006b18:	2b03      	cmp	r3, #3
 8006b1a:	d029      	beq.n	8006b70 <USBD_SetConfig+0x90>
 8006b1c:	e075      	b.n	8006c0a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006b1e:	4b44      	ldr	r3, [pc, #272]	; (8006c30 <USBD_SetConfig+0x150>)
 8006b20:	781b      	ldrb	r3, [r3, #0]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d020      	beq.n	8006b68 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006b26:	4b42      	ldr	r3, [pc, #264]	; (8006c30 <USBD_SetConfig+0x150>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006b30:	4b3f      	ldr	r3, [pc, #252]	; (8006c30 <USBD_SetConfig+0x150>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	4619      	mov	r1, r3
 8006b36:	6878      	ldr	r0, [r7, #4]
 8006b38:	f7fe ffe7 	bl	8005b0a <USBD_SetClassConfig>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d008      	beq.n	8006b58 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006b46:	6839      	ldr	r1, [r7, #0]
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 f962 	bl	8006e12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2202      	movs	r2, #2
 8006b52:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b56:	e065      	b.n	8006c24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f000 fa25 	bl	8006fa8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2203      	movs	r2, #3
 8006b62:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006b66:	e05d      	b.n	8006c24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 fa1d 	bl	8006fa8 <USBD_CtlSendStatus>
      break;
 8006b6e:	e059      	b.n	8006c24 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006b70:	4b2f      	ldr	r3, [pc, #188]	; (8006c30 <USBD_SetConfig+0x150>)
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d112      	bne.n	8006b9e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006b80:	4b2b      	ldr	r3, [pc, #172]	; (8006c30 <USBD_SetConfig+0x150>)
 8006b82:	781b      	ldrb	r3, [r3, #0]
 8006b84:	461a      	mov	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006b8a:	4b29      	ldr	r3, [pc, #164]	; (8006c30 <USBD_SetConfig+0x150>)
 8006b8c:	781b      	ldrb	r3, [r3, #0]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7fe ffd6 	bl	8005b42 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fa06 	bl	8006fa8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006b9c:	e042      	b.n	8006c24 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006b9e:	4b24      	ldr	r3, [pc, #144]	; (8006c30 <USBD_SetConfig+0x150>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	429a      	cmp	r2, r3
 8006baa:	d02a      	beq.n	8006c02 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7fe ffc4 	bl	8005b42 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006bba:	4b1d      	ldr	r3, [pc, #116]	; (8006c30 <USBD_SetConfig+0x150>)
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	461a      	mov	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006bc4:	4b1a      	ldr	r3, [pc, #104]	; (8006c30 <USBD_SetConfig+0x150>)
 8006bc6:	781b      	ldrb	r3, [r3, #0]
 8006bc8:	4619      	mov	r1, r3
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7fe ff9d 	bl	8005b0a <USBD_SetClassConfig>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006bd4:	7bfb      	ldrb	r3, [r7, #15]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00f      	beq.n	8006bfa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006bda:	6839      	ldr	r1, [r7, #0]
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 f918 	bl	8006e12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	4619      	mov	r1, r3
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7fe ffa9 	bl	8005b42 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006bf8:	e014      	b.n	8006c24 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f9d4 	bl	8006fa8 <USBD_CtlSendStatus>
      break;
 8006c00:	e010      	b.n	8006c24 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 f9d0 	bl	8006fa8 <USBD_CtlSendStatus>
      break;
 8006c08:	e00c      	b.n	8006c24 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 f900 	bl	8006e12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c12:	4b07      	ldr	r3, [pc, #28]	; (8006c30 <USBD_SetConfig+0x150>)
 8006c14:	781b      	ldrb	r3, [r3, #0]
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7fe ff92 	bl	8005b42 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	73fb      	strb	r3, [r7, #15]
      break;
 8006c22:	bf00      	nop
  }

  return ret;
 8006c24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	200002f4 	.word	0x200002f4

08006c34 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b082      	sub	sp, #8
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	88db      	ldrh	r3, [r3, #6]
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d004      	beq.n	8006c50 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006c46:	6839      	ldr	r1, [r7, #0]
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	f000 f8e2 	bl	8006e12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006c4e:	e023      	b.n	8006c98 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	dc02      	bgt.n	8006c62 <USBD_GetConfig+0x2e>
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	dc03      	bgt.n	8006c68 <USBD_GetConfig+0x34>
 8006c60:	e015      	b.n	8006c8e <USBD_GetConfig+0x5a>
 8006c62:	2b03      	cmp	r3, #3
 8006c64:	d00b      	beq.n	8006c7e <USBD_GetConfig+0x4a>
 8006c66:	e012      	b.n	8006c8e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3308      	adds	r3, #8
 8006c72:	2201      	movs	r2, #1
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f93c 	bl	8006ef4 <USBD_CtlSendData>
        break;
 8006c7c:	e00c      	b.n	8006c98 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	3304      	adds	r3, #4
 8006c82:	2201      	movs	r2, #1
 8006c84:	4619      	mov	r1, r3
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f934 	bl	8006ef4 <USBD_CtlSendData>
        break;
 8006c8c:	e004      	b.n	8006c98 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006c8e:	6839      	ldr	r1, [r7, #0]
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f000 f8be 	bl	8006e12 <USBD_CtlError>
        break;
 8006c96:	bf00      	nop
}
 8006c98:	bf00      	nop
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	d81e      	bhi.n	8006cf6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	88db      	ldrh	r3, [r3, #6]
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d004      	beq.n	8006cca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006cc0:	6839      	ldr	r1, [r7, #0]
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 f8a5 	bl	8006e12 <USBD_CtlError>
        break;
 8006cc8:	e01a      	b.n	8006d00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d005      	beq.n	8006ce6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	68db      	ldr	r3, [r3, #12]
 8006cde:	f043 0202 	orr.w	r2, r3, #2
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	330c      	adds	r3, #12
 8006cea:	2202      	movs	r2, #2
 8006cec:	4619      	mov	r1, r3
 8006cee:	6878      	ldr	r0, [r7, #4]
 8006cf0:	f000 f900 	bl	8006ef4 <USBD_CtlSendData>
      break;
 8006cf4:	e004      	b.n	8006d00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006cf6:	6839      	ldr	r1, [r7, #0]
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f88a 	bl	8006e12 <USBD_CtlError>
      break;
 8006cfe:	bf00      	nop
  }
}
 8006d00:	bf00      	nop
 8006d02:	3708      	adds	r7, #8
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}

08006d08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d08:	b580      	push	{r7, lr}
 8006d0a:	b082      	sub	sp, #8
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	885b      	ldrh	r3, [r3, #2]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d107      	bne.n	8006d2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2201      	movs	r2, #1
 8006d1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f940 	bl	8006fa8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006d28:	e013      	b.n	8006d52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	885b      	ldrh	r3, [r3, #2]
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d10b      	bne.n	8006d4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	889b      	ldrh	r3, [r3, #4]
 8006d36:	0a1b      	lsrs	r3, r3, #8
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f930 	bl	8006fa8 <USBD_CtlSendStatus>
}
 8006d48:	e003      	b.n	8006d52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f860 	bl	8006e12 <USBD_CtlError>
}
 8006d52:	bf00      	nop
 8006d54:	3708      	adds	r7, #8
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}

08006d5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d5a:	b580      	push	{r7, lr}
 8006d5c:	b082      	sub	sp, #8
 8006d5e:	af00      	add	r7, sp, #0
 8006d60:	6078      	str	r0, [r7, #4]
 8006d62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d6a:	b2db      	uxtb	r3, r3
 8006d6c:	3b01      	subs	r3, #1
 8006d6e:	2b02      	cmp	r3, #2
 8006d70:	d80b      	bhi.n	8006d8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	885b      	ldrh	r3, [r3, #2]
 8006d76:	2b01      	cmp	r3, #1
 8006d78:	d10c      	bne.n	8006d94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f910 	bl	8006fa8 <USBD_CtlSendStatus>
      }
      break;
 8006d88:	e004      	b.n	8006d94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006d8a:	6839      	ldr	r1, [r7, #0]
 8006d8c:	6878      	ldr	r0, [r7, #4]
 8006d8e:	f000 f840 	bl	8006e12 <USBD_CtlError>
      break;
 8006d92:	e000      	b.n	8006d96 <USBD_ClrFeature+0x3c>
      break;
 8006d94:	bf00      	nop
  }
}
 8006d96:	bf00      	nop
 8006d98:	3708      	adds	r7, #8
 8006d9a:	46bd      	mov	sp, r7
 8006d9c:	bd80      	pop	{r7, pc}

08006d9e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006d9e:	b580      	push	{r7, lr}
 8006da0:	b084      	sub	sp, #16
 8006da2:	af00      	add	r7, sp, #0
 8006da4:	6078      	str	r0, [r7, #4]
 8006da6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	781a      	ldrb	r2, [r3, #0]
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3301      	adds	r3, #1
 8006db8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	781a      	ldrb	r2, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006dc8:	68f8      	ldr	r0, [r7, #12]
 8006dca:	f7ff fa41 	bl	8006250 <SWAPBYTE>
 8006dce:	4603      	mov	r3, r0
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	3301      	adds	r3, #1
 8006de0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006de2:	68f8      	ldr	r0, [r7, #12]
 8006de4:	f7ff fa34 	bl	8006250 <SWAPBYTE>
 8006de8:	4603      	mov	r3, r0
 8006dea:	461a      	mov	r2, r3
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	3301      	adds	r3, #1
 8006df4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006dfc:	68f8      	ldr	r0, [r7, #12]
 8006dfe:	f7ff fa27 	bl	8006250 <SWAPBYTE>
 8006e02:	4603      	mov	r3, r0
 8006e04:	461a      	mov	r2, r3
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	80da      	strh	r2, [r3, #6]
}
 8006e0a:	bf00      	nop
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}

08006e12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e12:	b580      	push	{r7, lr}
 8006e14:	b082      	sub	sp, #8
 8006e16:	af00      	add	r7, sp, #0
 8006e18:	6078      	str	r0, [r7, #4]
 8006e1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e1c:	2180      	movs	r1, #128	; 0x80
 8006e1e:	6878      	ldr	r0, [r7, #4]
 8006e20:	f000 fce0 	bl	80077e4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006e24:	2100      	movs	r1, #0
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fcdc 	bl	80077e4 <USBD_LL_StallEP>
}
 8006e2c:	bf00      	nop
 8006e2e:	3708      	adds	r7, #8
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}

08006e34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006e40:	2300      	movs	r3, #0
 8006e42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d036      	beq.n	8006eb8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006e4e:	6938      	ldr	r0, [r7, #16]
 8006e50:	f000 f836 	bl	8006ec0 <USBD_GetLen>
 8006e54:	4603      	mov	r3, r0
 8006e56:	3301      	adds	r3, #1
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	005b      	lsls	r3, r3, #1
 8006e5c:	b29a      	uxth	r2, r3
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006e62:	7dfb      	ldrb	r3, [r7, #23]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	4413      	add	r3, r2
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	7812      	ldrb	r2, [r2, #0]
 8006e6c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
 8006e70:	3301      	adds	r3, #1
 8006e72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006e74:	7dfb      	ldrb	r3, [r7, #23]
 8006e76:	68ba      	ldr	r2, [r7, #8]
 8006e78:	4413      	add	r3, r2
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006e7e:	7dfb      	ldrb	r3, [r7, #23]
 8006e80:	3301      	adds	r3, #1
 8006e82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006e84:	e013      	b.n	8006eae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006e86:	7dfb      	ldrb	r3, [r7, #23]
 8006e88:	68ba      	ldr	r2, [r7, #8]
 8006e8a:	4413      	add	r3, r2
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	7812      	ldrb	r2, [r2, #0]
 8006e90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006e92:	693b      	ldr	r3, [r7, #16]
 8006e94:	3301      	adds	r3, #1
 8006e96:	613b      	str	r3, [r7, #16]
    idx++;
 8006e98:	7dfb      	ldrb	r3, [r7, #23]
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006e9e:	7dfb      	ldrb	r3, [r7, #23]
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	701a      	strb	r2, [r3, #0]
    idx++;
 8006ea8:	7dfb      	ldrb	r3, [r7, #23]
 8006eaa:	3301      	adds	r3, #1
 8006eac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006eae:	693b      	ldr	r3, [r7, #16]
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d1e7      	bne.n	8006e86 <USBD_GetString+0x52>
 8006eb6:	e000      	b.n	8006eba <USBD_GetString+0x86>
    return;
 8006eb8:	bf00      	nop
  }
}
 8006eba:	3718      	adds	r7, #24
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b085      	sub	sp, #20
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006ed0:	e005      	b.n	8006ede <USBD_GetLen+0x1e>
  {
    len++;
 8006ed2:	7bfb      	ldrb	r3, [r7, #15]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	3301      	adds	r3, #1
 8006edc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1f5      	bne.n	8006ed2 <USBD_GetLen+0x12>
  }

  return len;
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	60f8      	str	r0, [r7, #12]
 8006efc:	60b9      	str	r1, [r7, #8]
 8006efe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2202      	movs	r2, #2
 8006f04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	68ba      	ldr	r2, [r7, #8]
 8006f18:	2100      	movs	r1, #0
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 fceb 	bl	80078f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006f20:	2300      	movs	r3, #0
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	3710      	adds	r7, #16
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}

08006f2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006f2a:	b580      	push	{r7, lr}
 8006f2c:	b084      	sub	sp, #16
 8006f2e:	af00      	add	r7, sp, #0
 8006f30:	60f8      	str	r0, [r7, #12]
 8006f32:	60b9      	str	r1, [r7, #8]
 8006f34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	68ba      	ldr	r2, [r7, #8]
 8006f3a:	2100      	movs	r1, #0
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f000 fcda 	bl	80078f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b084      	sub	sp, #16
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	60f8      	str	r0, [r7, #12]
 8006f54:	60b9      	str	r1, [r7, #8]
 8006f56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	2203      	movs	r2, #3
 8006f5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	68ba      	ldr	r2, [r7, #8]
 8006f74:	2100      	movs	r1, #0
 8006f76:	68f8      	ldr	r0, [r7, #12]
 8006f78:	f000 fcde 	bl	8007938 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f7c:	2300      	movs	r3, #0
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b084      	sub	sp, #16
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	60f8      	str	r0, [r7, #12]
 8006f8e:	60b9      	str	r1, [r7, #8]
 8006f90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68ba      	ldr	r2, [r7, #8]
 8006f96:	2100      	movs	r1, #0
 8006f98:	68f8      	ldr	r0, [r7, #12]
 8006f9a:	f000 fccd 	bl	8007938 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006f9e:	2300      	movs	r3, #0
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3710      	adds	r7, #16
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}

08006fa8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b082      	sub	sp, #8
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2204      	movs	r2, #4
 8006fb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006fb8:	2300      	movs	r3, #0
 8006fba:	2200      	movs	r2, #0
 8006fbc:	2100      	movs	r1, #0
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fc99 	bl	80078f6 <USBD_LL_Transmit>

  return USBD_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	3708      	adds	r7, #8
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}

08006fce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006fce:	b580      	push	{r7, lr}
 8006fd0:	b082      	sub	sp, #8
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2205      	movs	r2, #5
 8006fda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006fde:	2300      	movs	r3, #0
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	2100      	movs	r1, #0
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 fca7 	bl	8007938 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006fea:	2300      	movs	r3, #0
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3708      	adds	r7, #8
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	4912      	ldr	r1, [pc, #72]	; (8007044 <MX_USB_DEVICE_Init+0x50>)
 8006ffc:	4812      	ldr	r0, [pc, #72]	; (8007048 <MX_USB_DEVICE_Init+0x54>)
 8006ffe:	f7fe fd07 	bl	8005a10 <USBD_Init>
 8007002:	4603      	mov	r3, r0
 8007004:	2b00      	cmp	r3, #0
 8007006:	d001      	beq.n	800700c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007008:	f7fa f8a0 	bl	800114c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800700c:	490f      	ldr	r1, [pc, #60]	; (800704c <MX_USB_DEVICE_Init+0x58>)
 800700e:	480e      	ldr	r0, [pc, #56]	; (8007048 <MX_USB_DEVICE_Init+0x54>)
 8007010:	f7fe fd2e 	bl	8005a70 <USBD_RegisterClass>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d001      	beq.n	800701e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800701a:	f7fa f897 	bl	800114c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800701e:	490c      	ldr	r1, [pc, #48]	; (8007050 <MX_USB_DEVICE_Init+0x5c>)
 8007020:	4809      	ldr	r0, [pc, #36]	; (8007048 <MX_USB_DEVICE_Init+0x54>)
 8007022:	f7fe fc1f 	bl	8005864 <USBD_CDC_RegisterInterface>
 8007026:	4603      	mov	r3, r0
 8007028:	2b00      	cmp	r3, #0
 800702a:	d001      	beq.n	8007030 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800702c:	f7fa f88e 	bl	800114c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007030:	4805      	ldr	r0, [pc, #20]	; (8007048 <MX_USB_DEVICE_Init+0x54>)
 8007032:	f7fe fd53 	bl	8005adc <USBD_Start>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800703c:	f7fa f886 	bl	800114c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007040:	bf00      	nop
 8007042:	bd80      	pop	{r7, pc}
 8007044:	200000ac 	.word	0x200000ac
 8007048:	200002f8 	.word	0x200002f8
 800704c:	20000018 	.word	0x20000018
 8007050:	20000098 	.word	0x20000098

08007054 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007058:	2200      	movs	r2, #0
 800705a:	4905      	ldr	r1, [pc, #20]	; (8007070 <CDC_Init_FS+0x1c>)
 800705c:	4805      	ldr	r0, [pc, #20]	; (8007074 <CDC_Init_FS+0x20>)
 800705e:	f7fe fc1b 	bl	8005898 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007062:	4905      	ldr	r1, [pc, #20]	; (8007078 <CDC_Init_FS+0x24>)
 8007064:	4803      	ldr	r0, [pc, #12]	; (8007074 <CDC_Init_FS+0x20>)
 8007066:	f7fe fc39 	bl	80058dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800706a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800706c:	4618      	mov	r0, r3
 800706e:	bd80      	pop	{r7, pc}
 8007070:	20000dd4 	.word	0x20000dd4
 8007074:	200002f8 	.word	0x200002f8
 8007078:	200005d4 	.word	0x200005d4

0800707c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800707c:	b480      	push	{r7}
 800707e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007080:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007082:	4618      	mov	r0, r3
 8007084:	46bd      	mov	sp, r7
 8007086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708a:	4770      	bx	lr

0800708c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800708c:	b480      	push	{r7}
 800708e:	b083      	sub	sp, #12
 8007090:	af00      	add	r7, sp, #0
 8007092:	4603      	mov	r3, r0
 8007094:	6039      	str	r1, [r7, #0]
 8007096:	71fb      	strb	r3, [r7, #7]
 8007098:	4613      	mov	r3, r2
 800709a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800709c:	79fb      	ldrb	r3, [r7, #7]
 800709e:	2b23      	cmp	r3, #35	; 0x23
 80070a0:	d84a      	bhi.n	8007138 <CDC_Control_FS+0xac>
 80070a2:	a201      	add	r2, pc, #4	; (adr r2, 80070a8 <CDC_Control_FS+0x1c>)
 80070a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070a8:	08007139 	.word	0x08007139
 80070ac:	08007139 	.word	0x08007139
 80070b0:	08007139 	.word	0x08007139
 80070b4:	08007139 	.word	0x08007139
 80070b8:	08007139 	.word	0x08007139
 80070bc:	08007139 	.word	0x08007139
 80070c0:	08007139 	.word	0x08007139
 80070c4:	08007139 	.word	0x08007139
 80070c8:	08007139 	.word	0x08007139
 80070cc:	08007139 	.word	0x08007139
 80070d0:	08007139 	.word	0x08007139
 80070d4:	08007139 	.word	0x08007139
 80070d8:	08007139 	.word	0x08007139
 80070dc:	08007139 	.word	0x08007139
 80070e0:	08007139 	.word	0x08007139
 80070e4:	08007139 	.word	0x08007139
 80070e8:	08007139 	.word	0x08007139
 80070ec:	08007139 	.word	0x08007139
 80070f0:	08007139 	.word	0x08007139
 80070f4:	08007139 	.word	0x08007139
 80070f8:	08007139 	.word	0x08007139
 80070fc:	08007139 	.word	0x08007139
 8007100:	08007139 	.word	0x08007139
 8007104:	08007139 	.word	0x08007139
 8007108:	08007139 	.word	0x08007139
 800710c:	08007139 	.word	0x08007139
 8007110:	08007139 	.word	0x08007139
 8007114:	08007139 	.word	0x08007139
 8007118:	08007139 	.word	0x08007139
 800711c:	08007139 	.word	0x08007139
 8007120:	08007139 	.word	0x08007139
 8007124:	08007139 	.word	0x08007139
 8007128:	08007139 	.word	0x08007139
 800712c:	08007139 	.word	0x08007139
 8007130:	08007139 	.word	0x08007139
 8007134:	08007139 	.word	0x08007139
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007138:	bf00      	nop
  }

  return (USBD_OK);
 800713a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800713c:	4618      	mov	r0, r3
 800713e:	370c      	adds	r7, #12
 8007140:	46bd      	mov	sp, r7
 8007142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007146:	4770      	bx	lr

08007148 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007152:	6879      	ldr	r1, [r7, #4]
 8007154:	4805      	ldr	r0, [pc, #20]	; (800716c <CDC_Receive_FS+0x24>)
 8007156:	f7fe fbc1 	bl	80058dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800715a:	4804      	ldr	r0, [pc, #16]	; (800716c <CDC_Receive_FS+0x24>)
 800715c:	f7fe fc22 	bl	80059a4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007160:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007162:	4618      	mov	r0, r3
 8007164:	3708      	adds	r7, #8
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop
 800716c:	200002f8 	.word	0x200002f8

08007170 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8007180:	4b0d      	ldr	r3, [pc, #52]	; (80071b8 <CDC_Transmit_FS+0x48>)
 8007182:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007186:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800718e:	2b00      	cmp	r3, #0
 8007190:	d001      	beq.n	8007196 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8007192:	2301      	movs	r3, #1
 8007194:	e00b      	b.n	80071ae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8007196:	887b      	ldrh	r3, [r7, #2]
 8007198:	461a      	mov	r2, r3
 800719a:	6879      	ldr	r1, [r7, #4]
 800719c:	4806      	ldr	r0, [pc, #24]	; (80071b8 <CDC_Transmit_FS+0x48>)
 800719e:	f7fe fb7b 	bl	8005898 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80071a2:	4805      	ldr	r0, [pc, #20]	; (80071b8 <CDC_Transmit_FS+0x48>)
 80071a4:	f7fe fbb8 	bl	8005918 <USBD_CDC_TransmitPacket>
 80071a8:	4603      	mov	r3, r0
 80071aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}
 80071b6:	bf00      	nop
 80071b8:	200002f8 	.word	0x200002f8

080071bc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80071bc:	b480      	push	{r7}
 80071be:	b087      	sub	sp, #28
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	4613      	mov	r3, r2
 80071c8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80071ca:	2300      	movs	r3, #0
 80071cc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80071ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	371c      	adds	r7, #28
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr
	...

080071e0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	6039      	str	r1, [r7, #0]
 80071ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80071ec:	683b      	ldr	r3, [r7, #0]
 80071ee:	2212      	movs	r2, #18
 80071f0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80071f2:	4b03      	ldr	r3, [pc, #12]	; (8007200 <USBD_FS_DeviceDescriptor+0x20>)
}
 80071f4:	4618      	mov	r0, r3
 80071f6:	370c      	adds	r7, #12
 80071f8:	46bd      	mov	sp, r7
 80071fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071fe:	4770      	bx	lr
 8007200:	200000c8 	.word	0x200000c8

08007204 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	4603      	mov	r3, r0
 800720c:	6039      	str	r1, [r7, #0]
 800720e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	2204      	movs	r2, #4
 8007214:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007216:	4b03      	ldr	r3, [pc, #12]	; (8007224 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007218:	4618      	mov	r0, r3
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	200000dc 	.word	0x200000dc

08007228 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	4603      	mov	r3, r0
 8007230:	6039      	str	r1, [r7, #0]
 8007232:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d105      	bne.n	8007246 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800723a:	683a      	ldr	r2, [r7, #0]
 800723c:	4907      	ldr	r1, [pc, #28]	; (800725c <USBD_FS_ProductStrDescriptor+0x34>)
 800723e:	4808      	ldr	r0, [pc, #32]	; (8007260 <USBD_FS_ProductStrDescriptor+0x38>)
 8007240:	f7ff fdf8 	bl	8006e34 <USBD_GetString>
 8007244:	e004      	b.n	8007250 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	4904      	ldr	r1, [pc, #16]	; (800725c <USBD_FS_ProductStrDescriptor+0x34>)
 800724a:	4805      	ldr	r0, [pc, #20]	; (8007260 <USBD_FS_ProductStrDescriptor+0x38>)
 800724c:	f7ff fdf2 	bl	8006e34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007250:	4b02      	ldr	r3, [pc, #8]	; (800725c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}
 800725a:	bf00      	nop
 800725c:	200015d4 	.word	0x200015d4
 8007260:	0800a870 	.word	0x0800a870

08007264 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	4603      	mov	r3, r0
 800726c:	6039      	str	r1, [r7, #0]
 800726e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007270:	683a      	ldr	r2, [r7, #0]
 8007272:	4904      	ldr	r1, [pc, #16]	; (8007284 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007274:	4804      	ldr	r0, [pc, #16]	; (8007288 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007276:	f7ff fddd 	bl	8006e34 <USBD_GetString>
  return USBD_StrDesc;
 800727a:	4b02      	ldr	r3, [pc, #8]	; (8007284 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800727c:	4618      	mov	r0, r3
 800727e:	3708      	adds	r7, #8
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}
 8007284:	200015d4 	.word	0x200015d4
 8007288:	0800a888 	.word	0x0800a888

0800728c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	4603      	mov	r3, r0
 8007294:	6039      	str	r1, [r7, #0]
 8007296:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	221a      	movs	r2, #26
 800729c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800729e:	f000 f843 	bl	8007328 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80072a2:	4b02      	ldr	r3, [pc, #8]	; (80072ac <USBD_FS_SerialStrDescriptor+0x20>)
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3708      	adds	r7, #8
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}
 80072ac:	200000e0 	.word	0x200000e0

080072b0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b082      	sub	sp, #8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	4603      	mov	r3, r0
 80072b8:	6039      	str	r1, [r7, #0]
 80072ba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80072bc:	79fb      	ldrb	r3, [r7, #7]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d105      	bne.n	80072ce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072c2:	683a      	ldr	r2, [r7, #0]
 80072c4:	4907      	ldr	r1, [pc, #28]	; (80072e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072c6:	4808      	ldr	r0, [pc, #32]	; (80072e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80072c8:	f7ff fdb4 	bl	8006e34 <USBD_GetString>
 80072cc:	e004      	b.n	80072d8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80072ce:	683a      	ldr	r2, [r7, #0]
 80072d0:	4904      	ldr	r1, [pc, #16]	; (80072e4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80072d2:	4805      	ldr	r0, [pc, #20]	; (80072e8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80072d4:	f7ff fdae 	bl	8006e34 <USBD_GetString>
  }
  return USBD_StrDesc;
 80072d8:	4b02      	ldr	r3, [pc, #8]	; (80072e4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	200015d4 	.word	0x200015d4
 80072e8:	0800a89c 	.word	0x0800a89c

080072ec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b082      	sub	sp, #8
 80072f0:	af00      	add	r7, sp, #0
 80072f2:	4603      	mov	r3, r0
 80072f4:	6039      	str	r1, [r7, #0]
 80072f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80072f8:	79fb      	ldrb	r3, [r7, #7]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d105      	bne.n	800730a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	4907      	ldr	r1, [pc, #28]	; (8007320 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007302:	4808      	ldr	r0, [pc, #32]	; (8007324 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007304:	f7ff fd96 	bl	8006e34 <USBD_GetString>
 8007308:	e004      	b.n	8007314 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	4904      	ldr	r1, [pc, #16]	; (8007320 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800730e:	4805      	ldr	r0, [pc, #20]	; (8007324 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007310:	f7ff fd90 	bl	8006e34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007314:	4b02      	ldr	r3, [pc, #8]	; (8007320 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007316:	4618      	mov	r0, r3
 8007318:	3708      	adds	r7, #8
 800731a:	46bd      	mov	sp, r7
 800731c:	bd80      	pop	{r7, pc}
 800731e:	bf00      	nop
 8007320:	200015d4 	.word	0x200015d4
 8007324:	0800a8a8 	.word	0x0800a8a8

08007328 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800732e:	4b0f      	ldr	r3, [pc, #60]	; (800736c <Get_SerialNum+0x44>)
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007334:	4b0e      	ldr	r3, [pc, #56]	; (8007370 <Get_SerialNum+0x48>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800733a:	4b0e      	ldr	r3, [pc, #56]	; (8007374 <Get_SerialNum+0x4c>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007340:	68fa      	ldr	r2, [r7, #12]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	4413      	add	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d009      	beq.n	8007362 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800734e:	2208      	movs	r2, #8
 8007350:	4909      	ldr	r1, [pc, #36]	; (8007378 <Get_SerialNum+0x50>)
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f000 f814 	bl	8007380 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007358:	2204      	movs	r2, #4
 800735a:	4908      	ldr	r1, [pc, #32]	; (800737c <Get_SerialNum+0x54>)
 800735c:	68b8      	ldr	r0, [r7, #8]
 800735e:	f000 f80f 	bl	8007380 <IntToUnicode>
  }
}
 8007362:	bf00      	nop
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	1fff7a10 	.word	0x1fff7a10
 8007370:	1fff7a14 	.word	0x1fff7a14
 8007374:	1fff7a18 	.word	0x1fff7a18
 8007378:	200000e2 	.word	0x200000e2
 800737c:	200000f2 	.word	0x200000f2

08007380 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007380:	b480      	push	{r7}
 8007382:	b087      	sub	sp, #28
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	4613      	mov	r3, r2
 800738c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800738e:	2300      	movs	r3, #0
 8007390:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007392:	2300      	movs	r3, #0
 8007394:	75fb      	strb	r3, [r7, #23]
 8007396:	e027      	b.n	80073e8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	0f1b      	lsrs	r3, r3, #28
 800739c:	2b09      	cmp	r3, #9
 800739e:	d80b      	bhi.n	80073b8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	0f1b      	lsrs	r3, r3, #28
 80073a4:	b2da      	uxtb	r2, r3
 80073a6:	7dfb      	ldrb	r3, [r7, #23]
 80073a8:	005b      	lsls	r3, r3, #1
 80073aa:	4619      	mov	r1, r3
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	440b      	add	r3, r1
 80073b0:	3230      	adds	r2, #48	; 0x30
 80073b2:	b2d2      	uxtb	r2, r2
 80073b4:	701a      	strb	r2, [r3, #0]
 80073b6:	e00a      	b.n	80073ce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	0f1b      	lsrs	r3, r3, #28
 80073bc:	b2da      	uxtb	r2, r3
 80073be:	7dfb      	ldrb	r3, [r7, #23]
 80073c0:	005b      	lsls	r3, r3, #1
 80073c2:	4619      	mov	r1, r3
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	440b      	add	r3, r1
 80073c8:	3237      	adds	r2, #55	; 0x37
 80073ca:	b2d2      	uxtb	r2, r2
 80073cc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	011b      	lsls	r3, r3, #4
 80073d2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80073d4:	7dfb      	ldrb	r3, [r7, #23]
 80073d6:	005b      	lsls	r3, r3, #1
 80073d8:	3301      	adds	r3, #1
 80073da:	68ba      	ldr	r2, [r7, #8]
 80073dc:	4413      	add	r3, r2
 80073de:	2200      	movs	r2, #0
 80073e0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80073e2:	7dfb      	ldrb	r3, [r7, #23]
 80073e4:	3301      	adds	r3, #1
 80073e6:	75fb      	strb	r3, [r7, #23]
 80073e8:	7dfa      	ldrb	r2, [r7, #23]
 80073ea:	79fb      	ldrb	r3, [r7, #7]
 80073ec:	429a      	cmp	r2, r3
 80073ee:	d3d3      	bcc.n	8007398 <IntToUnicode+0x18>
  }
}
 80073f0:	bf00      	nop
 80073f2:	bf00      	nop
 80073f4:	371c      	adds	r7, #28
 80073f6:	46bd      	mov	sp, r7
 80073f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fc:	4770      	bx	lr
	...

08007400 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08a      	sub	sp, #40	; 0x28
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007408:	f107 0314 	add.w	r3, r7, #20
 800740c:	2200      	movs	r2, #0
 800740e:	601a      	str	r2, [r3, #0]
 8007410:	605a      	str	r2, [r3, #4]
 8007412:	609a      	str	r2, [r3, #8]
 8007414:	60da      	str	r2, [r3, #12]
 8007416:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007420:	d13a      	bne.n	8007498 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007422:	2300      	movs	r3, #0
 8007424:	613b      	str	r3, [r7, #16]
 8007426:	4b1e      	ldr	r3, [pc, #120]	; (80074a0 <HAL_PCD_MspInit+0xa0>)
 8007428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800742a:	4a1d      	ldr	r2, [pc, #116]	; (80074a0 <HAL_PCD_MspInit+0xa0>)
 800742c:	f043 0301 	orr.w	r3, r3, #1
 8007430:	6313      	str	r3, [r2, #48]	; 0x30
 8007432:	4b1b      	ldr	r3, [pc, #108]	; (80074a0 <HAL_PCD_MspInit+0xa0>)
 8007434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007436:	f003 0301 	and.w	r3, r3, #1
 800743a:	613b      	str	r3, [r7, #16]
 800743c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800743e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007442:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007444:	2302      	movs	r3, #2
 8007446:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007448:	2300      	movs	r3, #0
 800744a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800744c:	2303      	movs	r3, #3
 800744e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007450:	230a      	movs	r3, #10
 8007452:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007454:	f107 0314 	add.w	r3, r7, #20
 8007458:	4619      	mov	r1, r3
 800745a:	4812      	ldr	r0, [pc, #72]	; (80074a4 <HAL_PCD_MspInit+0xa4>)
 800745c:	f7fa f982 	bl	8001764 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007460:	4b0f      	ldr	r3, [pc, #60]	; (80074a0 <HAL_PCD_MspInit+0xa0>)
 8007462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007464:	4a0e      	ldr	r2, [pc, #56]	; (80074a0 <HAL_PCD_MspInit+0xa0>)
 8007466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800746a:	6353      	str	r3, [r2, #52]	; 0x34
 800746c:	2300      	movs	r3, #0
 800746e:	60fb      	str	r3, [r7, #12]
 8007470:	4b0b      	ldr	r3, [pc, #44]	; (80074a0 <HAL_PCD_MspInit+0xa0>)
 8007472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007474:	4a0a      	ldr	r2, [pc, #40]	; (80074a0 <HAL_PCD_MspInit+0xa0>)
 8007476:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800747a:	6453      	str	r3, [r2, #68]	; 0x44
 800747c:	4b08      	ldr	r3, [pc, #32]	; (80074a0 <HAL_PCD_MspInit+0xa0>)
 800747e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007480:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007484:	60fb      	str	r3, [r7, #12]
 8007486:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007488:	2200      	movs	r2, #0
 800748a:	2100      	movs	r1, #0
 800748c:	2043      	movs	r0, #67	; 0x43
 800748e:	f7fa f932 	bl	80016f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007492:	2043      	movs	r0, #67	; 0x43
 8007494:	f7fa f94b 	bl	800172e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007498:	bf00      	nop
 800749a:	3728      	adds	r7, #40	; 0x28
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	40023800 	.word	0x40023800
 80074a4:	40020000 	.word	0x40020000

080074a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80074bc:	4619      	mov	r1, r3
 80074be:	4610      	mov	r0, r2
 80074c0:	f7fe fb59 	bl	8005b76 <USBD_LL_SetupStage>
}
 80074c4:	bf00      	nop
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b082      	sub	sp, #8
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]
 80074d4:	460b      	mov	r3, r1
 80074d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80074de:	78fa      	ldrb	r2, [r7, #3]
 80074e0:	6879      	ldr	r1, [r7, #4]
 80074e2:	4613      	mov	r3, r2
 80074e4:	00db      	lsls	r3, r3, #3
 80074e6:	4413      	add	r3, r2
 80074e8:	009b      	lsls	r3, r3, #2
 80074ea:	440b      	add	r3, r1
 80074ec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	78fb      	ldrb	r3, [r7, #3]
 80074f4:	4619      	mov	r1, r3
 80074f6:	f7fe fb93 	bl	8005c20 <USBD_LL_DataOutStage>
}
 80074fa:	bf00      	nop
 80074fc:	3708      	adds	r7, #8
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}

08007502 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007502:	b580      	push	{r7, lr}
 8007504:	b082      	sub	sp, #8
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	460b      	mov	r3, r1
 800750c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007514:	78fa      	ldrb	r2, [r7, #3]
 8007516:	6879      	ldr	r1, [r7, #4]
 8007518:	4613      	mov	r3, r2
 800751a:	00db      	lsls	r3, r3, #3
 800751c:	4413      	add	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	440b      	add	r3, r1
 8007522:	334c      	adds	r3, #76	; 0x4c
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	78fb      	ldrb	r3, [r7, #3]
 8007528:	4619      	mov	r1, r3
 800752a:	f7fe fc2c 	bl	8005d86 <USBD_LL_DataInStage>
}
 800752e:	bf00      	nop
 8007530:	3708      	adds	r7, #8
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}

08007536 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007536:	b580      	push	{r7, lr}
 8007538:	b082      	sub	sp, #8
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007544:	4618      	mov	r0, r3
 8007546:	f7fe fd60 	bl	800600a <USBD_LL_SOF>
}
 800754a:	bf00      	nop
 800754c:	3708      	adds	r7, #8
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b084      	sub	sp, #16
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800755a:	2301      	movs	r3, #1
 800755c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	68db      	ldr	r3, [r3, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d102      	bne.n	800756c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8007566:	2300      	movs	r3, #0
 8007568:	73fb      	strb	r3, [r7, #15]
 800756a:	e008      	b.n	800757e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	68db      	ldr	r3, [r3, #12]
 8007570:	2b02      	cmp	r3, #2
 8007572:	d102      	bne.n	800757a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8007574:	2301      	movs	r3, #1
 8007576:	73fb      	strb	r3, [r7, #15]
 8007578:	e001      	b.n	800757e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800757a:	f7f9 fde7 	bl	800114c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007584:	7bfa      	ldrb	r2, [r7, #15]
 8007586:	4611      	mov	r1, r2
 8007588:	4618      	mov	r0, r3
 800758a:	f7fe fd00 	bl	8005f8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007594:	4618      	mov	r0, r3
 8007596:	f7fe fca8 	bl	8005eea <USBD_LL_Reset>
}
 800759a:	bf00      	nop
 800759c:	3710      	adds	r7, #16
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
	...

080075a4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7fe fcfb 	bl	8005fae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	6812      	ldr	r2, [r2, #0]
 80075c6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075ca:	f043 0301 	orr.w	r3, r3, #1
 80075ce:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	6a1b      	ldr	r3, [r3, #32]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d005      	beq.n	80075e4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075d8:	4b04      	ldr	r3, [pc, #16]	; (80075ec <HAL_PCD_SuspendCallback+0x48>)
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	4a03      	ldr	r2, [pc, #12]	; (80075ec <HAL_PCD_SuspendCallback+0x48>)
 80075de:	f043 0306 	orr.w	r3, r3, #6
 80075e2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80075e4:	bf00      	nop
 80075e6:	3708      	adds	r7, #8
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	e000ed00 	.word	0xe000ed00

080075f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b082      	sub	sp, #8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fe fceb 	bl	8005fda <USBD_LL_Resume>
}
 8007604:	bf00      	nop
 8007606:	3708      	adds	r7, #8
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b082      	sub	sp, #8
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
 8007614:	460b      	mov	r3, r1
 8007616:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800761e:	78fa      	ldrb	r2, [r7, #3]
 8007620:	4611      	mov	r1, r2
 8007622:	4618      	mov	r0, r3
 8007624:	f7fe fd43 	bl	80060ae <USBD_LL_IsoOUTIncomplete>
}
 8007628:	bf00      	nop
 800762a:	3708      	adds	r7, #8
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007630:	b580      	push	{r7, lr}
 8007632:	b082      	sub	sp, #8
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007642:	78fa      	ldrb	r2, [r7, #3]
 8007644:	4611      	mov	r1, r2
 8007646:	4618      	mov	r0, r3
 8007648:	f7fe fcff 	bl	800604a <USBD_LL_IsoINIncomplete>
}
 800764c:	bf00      	nop
 800764e:	3708      	adds	r7, #8
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b082      	sub	sp, #8
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007662:	4618      	mov	r0, r3
 8007664:	f7fe fd55 	bl	8006112 <USBD_LL_DevConnected>
}
 8007668:	bf00      	nop
 800766a:	3708      	adds	r7, #8
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}

08007670 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b082      	sub	sp, #8
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe fd52 	bl	8006128 <USBD_LL_DevDisconnected>
}
 8007684:	bf00      	nop
 8007686:	3708      	adds	r7, #8
 8007688:	46bd      	mov	sp, r7
 800768a:	bd80      	pop	{r7, pc}

0800768c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	b082      	sub	sp, #8
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d13c      	bne.n	8007716 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800769c:	4a20      	ldr	r2, [pc, #128]	; (8007720 <USBD_LL_Init+0x94>)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	4a1e      	ldr	r2, [pc, #120]	; (8007720 <USBD_LL_Init+0x94>)
 80076a8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80076ac:	4b1c      	ldr	r3, [pc, #112]	; (8007720 <USBD_LL_Init+0x94>)
 80076ae:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80076b2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80076b4:	4b1a      	ldr	r3, [pc, #104]	; (8007720 <USBD_LL_Init+0x94>)
 80076b6:	2204      	movs	r2, #4
 80076b8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80076ba:	4b19      	ldr	r3, [pc, #100]	; (8007720 <USBD_LL_Init+0x94>)
 80076bc:	2202      	movs	r2, #2
 80076be:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80076c0:	4b17      	ldr	r3, [pc, #92]	; (8007720 <USBD_LL_Init+0x94>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80076c6:	4b16      	ldr	r3, [pc, #88]	; (8007720 <USBD_LL_Init+0x94>)
 80076c8:	2202      	movs	r2, #2
 80076ca:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80076cc:	4b14      	ldr	r3, [pc, #80]	; (8007720 <USBD_LL_Init+0x94>)
 80076ce:	2200      	movs	r2, #0
 80076d0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80076d2:	4b13      	ldr	r3, [pc, #76]	; (8007720 <USBD_LL_Init+0x94>)
 80076d4:	2200      	movs	r2, #0
 80076d6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80076d8:	4b11      	ldr	r3, [pc, #68]	; (8007720 <USBD_LL_Init+0x94>)
 80076da:	2200      	movs	r2, #0
 80076dc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80076de:	4b10      	ldr	r3, [pc, #64]	; (8007720 <USBD_LL_Init+0x94>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80076e4:	4b0e      	ldr	r3, [pc, #56]	; (8007720 <USBD_LL_Init+0x94>)
 80076e6:	2200      	movs	r2, #0
 80076e8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80076ea:	480d      	ldr	r0, [pc, #52]	; (8007720 <USBD_LL_Init+0x94>)
 80076ec:	f7fa f9be 	bl	8001a6c <HAL_PCD_Init>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d001      	beq.n	80076fa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80076f6:	f7f9 fd29 	bl	800114c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80076fa:	2180      	movs	r1, #128	; 0x80
 80076fc:	4808      	ldr	r0, [pc, #32]	; (8007720 <USBD_LL_Init+0x94>)
 80076fe:	f7fb fc16 	bl	8002f2e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007702:	2240      	movs	r2, #64	; 0x40
 8007704:	2100      	movs	r1, #0
 8007706:	4806      	ldr	r0, [pc, #24]	; (8007720 <USBD_LL_Init+0x94>)
 8007708:	f7fb fbca 	bl	8002ea0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800770c:	2280      	movs	r2, #128	; 0x80
 800770e:	2101      	movs	r1, #1
 8007710:	4803      	ldr	r0, [pc, #12]	; (8007720 <USBD_LL_Init+0x94>)
 8007712:	f7fb fbc5 	bl	8002ea0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3708      	adds	r7, #8
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}
 8007720:	200017d4 	.word	0x200017d4

08007724 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b084      	sub	sp, #16
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800772c:	2300      	movs	r3, #0
 800772e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007730:	2300      	movs	r3, #0
 8007732:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800773a:	4618      	mov	r0, r3
 800773c:	f7fa fab3 	bl	8001ca6 <HAL_PCD_Start>
 8007740:	4603      	mov	r3, r0
 8007742:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007744:	7bfb      	ldrb	r3, [r7, #15]
 8007746:	4618      	mov	r0, r3
 8007748:	f000 f942 	bl	80079d0 <USBD_Get_USB_Status>
 800774c:	4603      	mov	r3, r0
 800774e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007750:	7bbb      	ldrb	r3, [r7, #14]
}
 8007752:	4618      	mov	r0, r3
 8007754:	3710      	adds	r7, #16
 8007756:	46bd      	mov	sp, r7
 8007758:	bd80      	pop	{r7, pc}

0800775a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800775a:	b580      	push	{r7, lr}
 800775c:	b084      	sub	sp, #16
 800775e:	af00      	add	r7, sp, #0
 8007760:	6078      	str	r0, [r7, #4]
 8007762:	4608      	mov	r0, r1
 8007764:	4611      	mov	r1, r2
 8007766:	461a      	mov	r2, r3
 8007768:	4603      	mov	r3, r0
 800776a:	70fb      	strb	r3, [r7, #3]
 800776c:	460b      	mov	r3, r1
 800776e:	70bb      	strb	r3, [r7, #2]
 8007770:	4613      	mov	r3, r2
 8007772:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007774:	2300      	movs	r3, #0
 8007776:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007778:	2300      	movs	r3, #0
 800777a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007782:	78bb      	ldrb	r3, [r7, #2]
 8007784:	883a      	ldrh	r2, [r7, #0]
 8007786:	78f9      	ldrb	r1, [r7, #3]
 8007788:	f7fa ff84 	bl	8002694 <HAL_PCD_EP_Open>
 800778c:	4603      	mov	r3, r0
 800778e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007790:	7bfb      	ldrb	r3, [r7, #15]
 8007792:	4618      	mov	r0, r3
 8007794:	f000 f91c 	bl	80079d0 <USBD_Get_USB_Status>
 8007798:	4603      	mov	r3, r0
 800779a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800779c:	7bbb      	ldrb	r3, [r7, #14]
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077a6:	b580      	push	{r7, lr}
 80077a8:	b084      	sub	sp, #16
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	460b      	mov	r3, r1
 80077b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077b2:	2300      	movs	r3, #0
 80077b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077b6:	2300      	movs	r3, #0
 80077b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077c0:	78fa      	ldrb	r2, [r7, #3]
 80077c2:	4611      	mov	r1, r2
 80077c4:	4618      	mov	r0, r3
 80077c6:	f7fa ffcd 	bl	8002764 <HAL_PCD_EP_Close>
 80077ca:	4603      	mov	r3, r0
 80077cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077ce:	7bfb      	ldrb	r3, [r7, #15]
 80077d0:	4618      	mov	r0, r3
 80077d2:	f000 f8fd 	bl	80079d0 <USBD_Get_USB_Status>
 80077d6:	4603      	mov	r3, r0
 80077d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077da:	7bbb      	ldrb	r3, [r7, #14]
}
 80077dc:	4618      	mov	r0, r3
 80077de:	3710      	adds	r7, #16
 80077e0:	46bd      	mov	sp, r7
 80077e2:	bd80      	pop	{r7, pc}

080077e4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
 80077ec:	460b      	mov	r3, r1
 80077ee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077f4:	2300      	movs	r3, #0
 80077f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077fe:	78fa      	ldrb	r2, [r7, #3]
 8007800:	4611      	mov	r1, r2
 8007802:	4618      	mov	r0, r3
 8007804:	f7fb f8a5 	bl	8002952 <HAL_PCD_EP_SetStall>
 8007808:	4603      	mov	r3, r0
 800780a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800780c:	7bfb      	ldrb	r3, [r7, #15]
 800780e:	4618      	mov	r0, r3
 8007810:	f000 f8de 	bl	80079d0 <USBD_Get_USB_Status>
 8007814:	4603      	mov	r3, r0
 8007816:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007818:	7bbb      	ldrb	r3, [r7, #14]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b084      	sub	sp, #16
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	460b      	mov	r3, r1
 800782c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800782e:	2300      	movs	r3, #0
 8007830:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007832:	2300      	movs	r3, #0
 8007834:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800783c:	78fa      	ldrb	r2, [r7, #3]
 800783e:	4611      	mov	r1, r2
 8007840:	4618      	mov	r0, r3
 8007842:	f7fb f8ea 	bl	8002a1a <HAL_PCD_EP_ClrStall>
 8007846:	4603      	mov	r3, r0
 8007848:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	4618      	mov	r0, r3
 800784e:	f000 f8bf 	bl	80079d0 <USBD_Get_USB_Status>
 8007852:	4603      	mov	r3, r0
 8007854:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007856:	7bbb      	ldrb	r3, [r7, #14]
}
 8007858:	4618      	mov	r0, r3
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007860:	b480      	push	{r7}
 8007862:	b085      	sub	sp, #20
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
 8007868:	460b      	mov	r3, r1
 800786a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007872:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007874:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007878:	2b00      	cmp	r3, #0
 800787a:	da0b      	bge.n	8007894 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800787c:	78fb      	ldrb	r3, [r7, #3]
 800787e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007882:	68f9      	ldr	r1, [r7, #12]
 8007884:	4613      	mov	r3, r2
 8007886:	00db      	lsls	r3, r3, #3
 8007888:	4413      	add	r3, r2
 800788a:	009b      	lsls	r3, r3, #2
 800788c:	440b      	add	r3, r1
 800788e:	333e      	adds	r3, #62	; 0x3e
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	e00b      	b.n	80078ac <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007894:	78fb      	ldrb	r3, [r7, #3]
 8007896:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800789a:	68f9      	ldr	r1, [r7, #12]
 800789c:	4613      	mov	r3, r2
 800789e:	00db      	lsls	r3, r3, #3
 80078a0:	4413      	add	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	440b      	add	r3, r1
 80078a6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80078aa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	460b      	mov	r3, r1
 80078c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078c8:	2300      	movs	r3, #0
 80078ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80078d2:	78fa      	ldrb	r2, [r7, #3]
 80078d4:	4611      	mov	r1, r2
 80078d6:	4618      	mov	r0, r3
 80078d8:	f7fa feb7 	bl	800264a <HAL_PCD_SetAddress>
 80078dc:	4603      	mov	r3, r0
 80078de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078e0:	7bfb      	ldrb	r3, [r7, #15]
 80078e2:	4618      	mov	r0, r3
 80078e4:	f000 f874 	bl	80079d0 <USBD_Get_USB_Status>
 80078e8:	4603      	mov	r3, r0
 80078ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80078ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b086      	sub	sp, #24
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	607a      	str	r2, [r7, #4]
 8007900:	603b      	str	r3, [r7, #0]
 8007902:	460b      	mov	r3, r1
 8007904:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007914:	7af9      	ldrb	r1, [r7, #11]
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	687a      	ldr	r2, [r7, #4]
 800791a:	f7fa ffd0 	bl	80028be <HAL_PCD_EP_Transmit>
 800791e:	4603      	mov	r3, r0
 8007920:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007922:	7dfb      	ldrb	r3, [r7, #23]
 8007924:	4618      	mov	r0, r3
 8007926:	f000 f853 	bl	80079d0 <USBD_Get_USB_Status>
 800792a:	4603      	mov	r3, r0
 800792c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800792e:	7dbb      	ldrb	r3, [r7, #22]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3718      	adds	r7, #24
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}

08007938 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b086      	sub	sp, #24
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	607a      	str	r2, [r7, #4]
 8007942:	603b      	str	r3, [r7, #0]
 8007944:	460b      	mov	r3, r1
 8007946:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007948:	2300      	movs	r3, #0
 800794a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800794c:	2300      	movs	r3, #0
 800794e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007956:	7af9      	ldrb	r1, [r7, #11]
 8007958:	683b      	ldr	r3, [r7, #0]
 800795a:	687a      	ldr	r2, [r7, #4]
 800795c:	f7fa ff4c 	bl	80027f8 <HAL_PCD_EP_Receive>
 8007960:	4603      	mov	r3, r0
 8007962:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007964:	7dfb      	ldrb	r3, [r7, #23]
 8007966:	4618      	mov	r0, r3
 8007968:	f000 f832 	bl	80079d0 <USBD_Get_USB_Status>
 800796c:	4603      	mov	r3, r0
 800796e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007970:	7dbb      	ldrb	r3, [r7, #22]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3718      	adds	r7, #24
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}

0800797a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800797a:	b580      	push	{r7, lr}
 800797c:	b082      	sub	sp, #8
 800797e:	af00      	add	r7, sp, #0
 8007980:	6078      	str	r0, [r7, #4]
 8007982:	460b      	mov	r3, r1
 8007984:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800798c:	78fa      	ldrb	r2, [r7, #3]
 800798e:	4611      	mov	r1, r2
 8007990:	4618      	mov	r0, r3
 8007992:	f7fa ff7c 	bl	800288e <HAL_PCD_EP_GetRxCount>
 8007996:	4603      	mov	r3, r0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3708      	adds	r7, #8
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80079a0:	b480      	push	{r7}
 80079a2:	b083      	sub	sp, #12
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80079a8:	4b03      	ldr	r3, [pc, #12]	; (80079b8 <USBD_static_malloc+0x18>)
}
 80079aa:	4618      	mov	r0, r3
 80079ac:	370c      	adds	r7, #12
 80079ae:	46bd      	mov	sp, r7
 80079b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b4:	4770      	bx	lr
 80079b6:	bf00      	nop
 80079b8:	20001ce0 	.word	0x20001ce0

080079bc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80079bc:	b480      	push	{r7}
 80079be:	b083      	sub	sp, #12
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]

}
 80079c4:	bf00      	nop
 80079c6:	370c      	adds	r7, #12
 80079c8:	46bd      	mov	sp, r7
 80079ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ce:	4770      	bx	lr

080079d0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	4603      	mov	r3, r0
 80079d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80079da:	2300      	movs	r3, #0
 80079dc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80079de:	79fb      	ldrb	r3, [r7, #7]
 80079e0:	2b03      	cmp	r3, #3
 80079e2:	d817      	bhi.n	8007a14 <USBD_Get_USB_Status+0x44>
 80079e4:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <USBD_Get_USB_Status+0x1c>)
 80079e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ea:	bf00      	nop
 80079ec:	080079fd 	.word	0x080079fd
 80079f0:	08007a03 	.word	0x08007a03
 80079f4:	08007a09 	.word	0x08007a09
 80079f8:	08007a0f 	.word	0x08007a0f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80079fc:	2300      	movs	r3, #0
 80079fe:	73fb      	strb	r3, [r7, #15]
    break;
 8007a00:	e00b      	b.n	8007a1a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007a02:	2303      	movs	r3, #3
 8007a04:	73fb      	strb	r3, [r7, #15]
    break;
 8007a06:	e008      	b.n	8007a1a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	73fb      	strb	r3, [r7, #15]
    break;
 8007a0c:	e005      	b.n	8007a1a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007a0e:	2303      	movs	r3, #3
 8007a10:	73fb      	strb	r3, [r7, #15]
    break;
 8007a12:	e002      	b.n	8007a1a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007a14:	2303      	movs	r3, #3
 8007a16:	73fb      	strb	r3, [r7, #15]
    break;
 8007a18:	bf00      	nop
  }
  return usb_status;
 8007a1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr

08007a28 <__errno>:
 8007a28:	4b01      	ldr	r3, [pc, #4]	; (8007a30 <__errno+0x8>)
 8007a2a:	6818      	ldr	r0, [r3, #0]
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	200000fc 	.word	0x200000fc

08007a34 <__libc_init_array>:
 8007a34:	b570      	push	{r4, r5, r6, lr}
 8007a36:	4d0d      	ldr	r5, [pc, #52]	; (8007a6c <__libc_init_array+0x38>)
 8007a38:	4c0d      	ldr	r4, [pc, #52]	; (8007a70 <__libc_init_array+0x3c>)
 8007a3a:	1b64      	subs	r4, r4, r5
 8007a3c:	10a4      	asrs	r4, r4, #2
 8007a3e:	2600      	movs	r6, #0
 8007a40:	42a6      	cmp	r6, r4
 8007a42:	d109      	bne.n	8007a58 <__libc_init_array+0x24>
 8007a44:	4d0b      	ldr	r5, [pc, #44]	; (8007a74 <__libc_init_array+0x40>)
 8007a46:	4c0c      	ldr	r4, [pc, #48]	; (8007a78 <__libc_init_array+0x44>)
 8007a48:	f002 ff02 	bl	800a850 <_init>
 8007a4c:	1b64      	subs	r4, r4, r5
 8007a4e:	10a4      	asrs	r4, r4, #2
 8007a50:	2600      	movs	r6, #0
 8007a52:	42a6      	cmp	r6, r4
 8007a54:	d105      	bne.n	8007a62 <__libc_init_array+0x2e>
 8007a56:	bd70      	pop	{r4, r5, r6, pc}
 8007a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a5c:	4798      	blx	r3
 8007a5e:	3601      	adds	r6, #1
 8007a60:	e7ee      	b.n	8007a40 <__libc_init_array+0xc>
 8007a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a66:	4798      	blx	r3
 8007a68:	3601      	adds	r6, #1
 8007a6a:	e7f2      	b.n	8007a52 <__libc_init_array+0x1e>
 8007a6c:	0800acac 	.word	0x0800acac
 8007a70:	0800acac 	.word	0x0800acac
 8007a74:	0800acac 	.word	0x0800acac
 8007a78:	0800acb0 	.word	0x0800acb0

08007a7c <memset>:
 8007a7c:	4402      	add	r2, r0
 8007a7e:	4603      	mov	r3, r0
 8007a80:	4293      	cmp	r3, r2
 8007a82:	d100      	bne.n	8007a86 <memset+0xa>
 8007a84:	4770      	bx	lr
 8007a86:	f803 1b01 	strb.w	r1, [r3], #1
 8007a8a:	e7f9      	b.n	8007a80 <memset+0x4>

08007a8c <__cvt>:
 8007a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a90:	ec55 4b10 	vmov	r4, r5, d0
 8007a94:	2d00      	cmp	r5, #0
 8007a96:	460e      	mov	r6, r1
 8007a98:	4619      	mov	r1, r3
 8007a9a:	462b      	mov	r3, r5
 8007a9c:	bfbb      	ittet	lt
 8007a9e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007aa2:	461d      	movlt	r5, r3
 8007aa4:	2300      	movge	r3, #0
 8007aa6:	232d      	movlt	r3, #45	; 0x2d
 8007aa8:	700b      	strb	r3, [r1, #0]
 8007aaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007aac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007ab0:	4691      	mov	r9, r2
 8007ab2:	f023 0820 	bic.w	r8, r3, #32
 8007ab6:	bfbc      	itt	lt
 8007ab8:	4622      	movlt	r2, r4
 8007aba:	4614      	movlt	r4, r2
 8007abc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007ac0:	d005      	beq.n	8007ace <__cvt+0x42>
 8007ac2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007ac6:	d100      	bne.n	8007aca <__cvt+0x3e>
 8007ac8:	3601      	adds	r6, #1
 8007aca:	2102      	movs	r1, #2
 8007acc:	e000      	b.n	8007ad0 <__cvt+0x44>
 8007ace:	2103      	movs	r1, #3
 8007ad0:	ab03      	add	r3, sp, #12
 8007ad2:	9301      	str	r3, [sp, #4]
 8007ad4:	ab02      	add	r3, sp, #8
 8007ad6:	9300      	str	r3, [sp, #0]
 8007ad8:	ec45 4b10 	vmov	d0, r4, r5
 8007adc:	4653      	mov	r3, sl
 8007ade:	4632      	mov	r2, r6
 8007ae0:	f000 fcea 	bl	80084b8 <_dtoa_r>
 8007ae4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007ae8:	4607      	mov	r7, r0
 8007aea:	d102      	bne.n	8007af2 <__cvt+0x66>
 8007aec:	f019 0f01 	tst.w	r9, #1
 8007af0:	d022      	beq.n	8007b38 <__cvt+0xac>
 8007af2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007af6:	eb07 0906 	add.w	r9, r7, r6
 8007afa:	d110      	bne.n	8007b1e <__cvt+0x92>
 8007afc:	783b      	ldrb	r3, [r7, #0]
 8007afe:	2b30      	cmp	r3, #48	; 0x30
 8007b00:	d10a      	bne.n	8007b18 <__cvt+0x8c>
 8007b02:	2200      	movs	r2, #0
 8007b04:	2300      	movs	r3, #0
 8007b06:	4620      	mov	r0, r4
 8007b08:	4629      	mov	r1, r5
 8007b0a:	f7f8 ffe5 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b0e:	b918      	cbnz	r0, 8007b18 <__cvt+0x8c>
 8007b10:	f1c6 0601 	rsb	r6, r6, #1
 8007b14:	f8ca 6000 	str.w	r6, [sl]
 8007b18:	f8da 3000 	ldr.w	r3, [sl]
 8007b1c:	4499      	add	r9, r3
 8007b1e:	2200      	movs	r2, #0
 8007b20:	2300      	movs	r3, #0
 8007b22:	4620      	mov	r0, r4
 8007b24:	4629      	mov	r1, r5
 8007b26:	f7f8 ffd7 	bl	8000ad8 <__aeabi_dcmpeq>
 8007b2a:	b108      	cbz	r0, 8007b30 <__cvt+0xa4>
 8007b2c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007b30:	2230      	movs	r2, #48	; 0x30
 8007b32:	9b03      	ldr	r3, [sp, #12]
 8007b34:	454b      	cmp	r3, r9
 8007b36:	d307      	bcc.n	8007b48 <__cvt+0xbc>
 8007b38:	9b03      	ldr	r3, [sp, #12]
 8007b3a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007b3c:	1bdb      	subs	r3, r3, r7
 8007b3e:	4638      	mov	r0, r7
 8007b40:	6013      	str	r3, [r2, #0]
 8007b42:	b004      	add	sp, #16
 8007b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b48:	1c59      	adds	r1, r3, #1
 8007b4a:	9103      	str	r1, [sp, #12]
 8007b4c:	701a      	strb	r2, [r3, #0]
 8007b4e:	e7f0      	b.n	8007b32 <__cvt+0xa6>

08007b50 <__exponent>:
 8007b50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b52:	4603      	mov	r3, r0
 8007b54:	2900      	cmp	r1, #0
 8007b56:	bfb8      	it	lt
 8007b58:	4249      	neglt	r1, r1
 8007b5a:	f803 2b02 	strb.w	r2, [r3], #2
 8007b5e:	bfb4      	ite	lt
 8007b60:	222d      	movlt	r2, #45	; 0x2d
 8007b62:	222b      	movge	r2, #43	; 0x2b
 8007b64:	2909      	cmp	r1, #9
 8007b66:	7042      	strb	r2, [r0, #1]
 8007b68:	dd2a      	ble.n	8007bc0 <__exponent+0x70>
 8007b6a:	f10d 0407 	add.w	r4, sp, #7
 8007b6e:	46a4      	mov	ip, r4
 8007b70:	270a      	movs	r7, #10
 8007b72:	46a6      	mov	lr, r4
 8007b74:	460a      	mov	r2, r1
 8007b76:	fb91 f6f7 	sdiv	r6, r1, r7
 8007b7a:	fb07 1516 	mls	r5, r7, r6, r1
 8007b7e:	3530      	adds	r5, #48	; 0x30
 8007b80:	2a63      	cmp	r2, #99	; 0x63
 8007b82:	f104 34ff 	add.w	r4, r4, #4294967295
 8007b86:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007b8a:	4631      	mov	r1, r6
 8007b8c:	dcf1      	bgt.n	8007b72 <__exponent+0x22>
 8007b8e:	3130      	adds	r1, #48	; 0x30
 8007b90:	f1ae 0502 	sub.w	r5, lr, #2
 8007b94:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007b98:	1c44      	adds	r4, r0, #1
 8007b9a:	4629      	mov	r1, r5
 8007b9c:	4561      	cmp	r1, ip
 8007b9e:	d30a      	bcc.n	8007bb6 <__exponent+0x66>
 8007ba0:	f10d 0209 	add.w	r2, sp, #9
 8007ba4:	eba2 020e 	sub.w	r2, r2, lr
 8007ba8:	4565      	cmp	r5, ip
 8007baa:	bf88      	it	hi
 8007bac:	2200      	movhi	r2, #0
 8007bae:	4413      	add	r3, r2
 8007bb0:	1a18      	subs	r0, r3, r0
 8007bb2:	b003      	add	sp, #12
 8007bb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bba:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007bbe:	e7ed      	b.n	8007b9c <__exponent+0x4c>
 8007bc0:	2330      	movs	r3, #48	; 0x30
 8007bc2:	3130      	adds	r1, #48	; 0x30
 8007bc4:	7083      	strb	r3, [r0, #2]
 8007bc6:	70c1      	strb	r1, [r0, #3]
 8007bc8:	1d03      	adds	r3, r0, #4
 8007bca:	e7f1      	b.n	8007bb0 <__exponent+0x60>

08007bcc <_printf_float>:
 8007bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bd0:	ed2d 8b02 	vpush	{d8}
 8007bd4:	b08d      	sub	sp, #52	; 0x34
 8007bd6:	460c      	mov	r4, r1
 8007bd8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007bdc:	4616      	mov	r6, r2
 8007bde:	461f      	mov	r7, r3
 8007be0:	4605      	mov	r5, r0
 8007be2:	f001 fa57 	bl	8009094 <_localeconv_r>
 8007be6:	f8d0 a000 	ldr.w	sl, [r0]
 8007bea:	4650      	mov	r0, sl
 8007bec:	f7f8 faf8 	bl	80001e0 <strlen>
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	930a      	str	r3, [sp, #40]	; 0x28
 8007bf4:	6823      	ldr	r3, [r4, #0]
 8007bf6:	9305      	str	r3, [sp, #20]
 8007bf8:	f8d8 3000 	ldr.w	r3, [r8]
 8007bfc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007c00:	3307      	adds	r3, #7
 8007c02:	f023 0307 	bic.w	r3, r3, #7
 8007c06:	f103 0208 	add.w	r2, r3, #8
 8007c0a:	f8c8 2000 	str.w	r2, [r8]
 8007c0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c12:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007c16:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007c1a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007c1e:	9307      	str	r3, [sp, #28]
 8007c20:	f8cd 8018 	str.w	r8, [sp, #24]
 8007c24:	ee08 0a10 	vmov	s16, r0
 8007c28:	4b9f      	ldr	r3, [pc, #636]	; (8007ea8 <_printf_float+0x2dc>)
 8007c2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c2e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c32:	f7f8 ff83 	bl	8000b3c <__aeabi_dcmpun>
 8007c36:	bb88      	cbnz	r0, 8007c9c <_printf_float+0xd0>
 8007c38:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007c3c:	4b9a      	ldr	r3, [pc, #616]	; (8007ea8 <_printf_float+0x2dc>)
 8007c3e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c42:	f7f8 ff5d 	bl	8000b00 <__aeabi_dcmple>
 8007c46:	bb48      	cbnz	r0, 8007c9c <_printf_float+0xd0>
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	4640      	mov	r0, r8
 8007c4e:	4649      	mov	r1, r9
 8007c50:	f7f8 ff4c 	bl	8000aec <__aeabi_dcmplt>
 8007c54:	b110      	cbz	r0, 8007c5c <_printf_float+0x90>
 8007c56:	232d      	movs	r3, #45	; 0x2d
 8007c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c5c:	4b93      	ldr	r3, [pc, #588]	; (8007eac <_printf_float+0x2e0>)
 8007c5e:	4894      	ldr	r0, [pc, #592]	; (8007eb0 <_printf_float+0x2e4>)
 8007c60:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007c64:	bf94      	ite	ls
 8007c66:	4698      	movls	r8, r3
 8007c68:	4680      	movhi	r8, r0
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	6123      	str	r3, [r4, #16]
 8007c6e:	9b05      	ldr	r3, [sp, #20]
 8007c70:	f023 0204 	bic.w	r2, r3, #4
 8007c74:	6022      	str	r2, [r4, #0]
 8007c76:	f04f 0900 	mov.w	r9, #0
 8007c7a:	9700      	str	r7, [sp, #0]
 8007c7c:	4633      	mov	r3, r6
 8007c7e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007c80:	4621      	mov	r1, r4
 8007c82:	4628      	mov	r0, r5
 8007c84:	f000 f9d8 	bl	8008038 <_printf_common>
 8007c88:	3001      	adds	r0, #1
 8007c8a:	f040 8090 	bne.w	8007dae <_printf_float+0x1e2>
 8007c8e:	f04f 30ff 	mov.w	r0, #4294967295
 8007c92:	b00d      	add	sp, #52	; 0x34
 8007c94:	ecbd 8b02 	vpop	{d8}
 8007c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c9c:	4642      	mov	r2, r8
 8007c9e:	464b      	mov	r3, r9
 8007ca0:	4640      	mov	r0, r8
 8007ca2:	4649      	mov	r1, r9
 8007ca4:	f7f8 ff4a 	bl	8000b3c <__aeabi_dcmpun>
 8007ca8:	b140      	cbz	r0, 8007cbc <_printf_float+0xf0>
 8007caa:	464b      	mov	r3, r9
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	bfbc      	itt	lt
 8007cb0:	232d      	movlt	r3, #45	; 0x2d
 8007cb2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007cb6:	487f      	ldr	r0, [pc, #508]	; (8007eb4 <_printf_float+0x2e8>)
 8007cb8:	4b7f      	ldr	r3, [pc, #508]	; (8007eb8 <_printf_float+0x2ec>)
 8007cba:	e7d1      	b.n	8007c60 <_printf_float+0x94>
 8007cbc:	6863      	ldr	r3, [r4, #4]
 8007cbe:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007cc2:	9206      	str	r2, [sp, #24]
 8007cc4:	1c5a      	adds	r2, r3, #1
 8007cc6:	d13f      	bne.n	8007d48 <_printf_float+0x17c>
 8007cc8:	2306      	movs	r3, #6
 8007cca:	6063      	str	r3, [r4, #4]
 8007ccc:	9b05      	ldr	r3, [sp, #20]
 8007cce:	6861      	ldr	r1, [r4, #4]
 8007cd0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	9303      	str	r3, [sp, #12]
 8007cd8:	ab0a      	add	r3, sp, #40	; 0x28
 8007cda:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007cde:	ab09      	add	r3, sp, #36	; 0x24
 8007ce0:	ec49 8b10 	vmov	d0, r8, r9
 8007ce4:	9300      	str	r3, [sp, #0]
 8007ce6:	6022      	str	r2, [r4, #0]
 8007ce8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007cec:	4628      	mov	r0, r5
 8007cee:	f7ff fecd 	bl	8007a8c <__cvt>
 8007cf2:	9b06      	ldr	r3, [sp, #24]
 8007cf4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007cf6:	2b47      	cmp	r3, #71	; 0x47
 8007cf8:	4680      	mov	r8, r0
 8007cfa:	d108      	bne.n	8007d0e <_printf_float+0x142>
 8007cfc:	1cc8      	adds	r0, r1, #3
 8007cfe:	db02      	blt.n	8007d06 <_printf_float+0x13a>
 8007d00:	6863      	ldr	r3, [r4, #4]
 8007d02:	4299      	cmp	r1, r3
 8007d04:	dd41      	ble.n	8007d8a <_printf_float+0x1be>
 8007d06:	f1ab 0b02 	sub.w	fp, fp, #2
 8007d0a:	fa5f fb8b 	uxtb.w	fp, fp
 8007d0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007d12:	d820      	bhi.n	8007d56 <_printf_float+0x18a>
 8007d14:	3901      	subs	r1, #1
 8007d16:	465a      	mov	r2, fp
 8007d18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007d1c:	9109      	str	r1, [sp, #36]	; 0x24
 8007d1e:	f7ff ff17 	bl	8007b50 <__exponent>
 8007d22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007d24:	1813      	adds	r3, r2, r0
 8007d26:	2a01      	cmp	r2, #1
 8007d28:	4681      	mov	r9, r0
 8007d2a:	6123      	str	r3, [r4, #16]
 8007d2c:	dc02      	bgt.n	8007d34 <_printf_float+0x168>
 8007d2e:	6822      	ldr	r2, [r4, #0]
 8007d30:	07d2      	lsls	r2, r2, #31
 8007d32:	d501      	bpl.n	8007d38 <_printf_float+0x16c>
 8007d34:	3301      	adds	r3, #1
 8007d36:	6123      	str	r3, [r4, #16]
 8007d38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d09c      	beq.n	8007c7a <_printf_float+0xae>
 8007d40:	232d      	movs	r3, #45	; 0x2d
 8007d42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007d46:	e798      	b.n	8007c7a <_printf_float+0xae>
 8007d48:	9a06      	ldr	r2, [sp, #24]
 8007d4a:	2a47      	cmp	r2, #71	; 0x47
 8007d4c:	d1be      	bne.n	8007ccc <_printf_float+0x100>
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d1bc      	bne.n	8007ccc <_printf_float+0x100>
 8007d52:	2301      	movs	r3, #1
 8007d54:	e7b9      	b.n	8007cca <_printf_float+0xfe>
 8007d56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007d5a:	d118      	bne.n	8007d8e <_printf_float+0x1c2>
 8007d5c:	2900      	cmp	r1, #0
 8007d5e:	6863      	ldr	r3, [r4, #4]
 8007d60:	dd0b      	ble.n	8007d7a <_printf_float+0x1ae>
 8007d62:	6121      	str	r1, [r4, #16]
 8007d64:	b913      	cbnz	r3, 8007d6c <_printf_float+0x1a0>
 8007d66:	6822      	ldr	r2, [r4, #0]
 8007d68:	07d0      	lsls	r0, r2, #31
 8007d6a:	d502      	bpl.n	8007d72 <_printf_float+0x1a6>
 8007d6c:	3301      	adds	r3, #1
 8007d6e:	440b      	add	r3, r1
 8007d70:	6123      	str	r3, [r4, #16]
 8007d72:	65a1      	str	r1, [r4, #88]	; 0x58
 8007d74:	f04f 0900 	mov.w	r9, #0
 8007d78:	e7de      	b.n	8007d38 <_printf_float+0x16c>
 8007d7a:	b913      	cbnz	r3, 8007d82 <_printf_float+0x1b6>
 8007d7c:	6822      	ldr	r2, [r4, #0]
 8007d7e:	07d2      	lsls	r2, r2, #31
 8007d80:	d501      	bpl.n	8007d86 <_printf_float+0x1ba>
 8007d82:	3302      	adds	r3, #2
 8007d84:	e7f4      	b.n	8007d70 <_printf_float+0x1a4>
 8007d86:	2301      	movs	r3, #1
 8007d88:	e7f2      	b.n	8007d70 <_printf_float+0x1a4>
 8007d8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d90:	4299      	cmp	r1, r3
 8007d92:	db05      	blt.n	8007da0 <_printf_float+0x1d4>
 8007d94:	6823      	ldr	r3, [r4, #0]
 8007d96:	6121      	str	r1, [r4, #16]
 8007d98:	07d8      	lsls	r0, r3, #31
 8007d9a:	d5ea      	bpl.n	8007d72 <_printf_float+0x1a6>
 8007d9c:	1c4b      	adds	r3, r1, #1
 8007d9e:	e7e7      	b.n	8007d70 <_printf_float+0x1a4>
 8007da0:	2900      	cmp	r1, #0
 8007da2:	bfd4      	ite	le
 8007da4:	f1c1 0202 	rsble	r2, r1, #2
 8007da8:	2201      	movgt	r2, #1
 8007daa:	4413      	add	r3, r2
 8007dac:	e7e0      	b.n	8007d70 <_printf_float+0x1a4>
 8007dae:	6823      	ldr	r3, [r4, #0]
 8007db0:	055a      	lsls	r2, r3, #21
 8007db2:	d407      	bmi.n	8007dc4 <_printf_float+0x1f8>
 8007db4:	6923      	ldr	r3, [r4, #16]
 8007db6:	4642      	mov	r2, r8
 8007db8:	4631      	mov	r1, r6
 8007dba:	4628      	mov	r0, r5
 8007dbc:	47b8      	blx	r7
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	d12c      	bne.n	8007e1c <_printf_float+0x250>
 8007dc2:	e764      	b.n	8007c8e <_printf_float+0xc2>
 8007dc4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007dc8:	f240 80e0 	bls.w	8007f8c <_printf_float+0x3c0>
 8007dcc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f7f8 fe80 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d034      	beq.n	8007e46 <_printf_float+0x27a>
 8007ddc:	4a37      	ldr	r2, [pc, #220]	; (8007ebc <_printf_float+0x2f0>)
 8007dde:	2301      	movs	r3, #1
 8007de0:	4631      	mov	r1, r6
 8007de2:	4628      	mov	r0, r5
 8007de4:	47b8      	blx	r7
 8007de6:	3001      	adds	r0, #1
 8007de8:	f43f af51 	beq.w	8007c8e <_printf_float+0xc2>
 8007dec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007df0:	429a      	cmp	r2, r3
 8007df2:	db02      	blt.n	8007dfa <_printf_float+0x22e>
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	07d8      	lsls	r0, r3, #31
 8007df8:	d510      	bpl.n	8007e1c <_printf_float+0x250>
 8007dfa:	ee18 3a10 	vmov	r3, s16
 8007dfe:	4652      	mov	r2, sl
 8007e00:	4631      	mov	r1, r6
 8007e02:	4628      	mov	r0, r5
 8007e04:	47b8      	blx	r7
 8007e06:	3001      	adds	r0, #1
 8007e08:	f43f af41 	beq.w	8007c8e <_printf_float+0xc2>
 8007e0c:	f04f 0800 	mov.w	r8, #0
 8007e10:	f104 091a 	add.w	r9, r4, #26
 8007e14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e16:	3b01      	subs	r3, #1
 8007e18:	4543      	cmp	r3, r8
 8007e1a:	dc09      	bgt.n	8007e30 <_printf_float+0x264>
 8007e1c:	6823      	ldr	r3, [r4, #0]
 8007e1e:	079b      	lsls	r3, r3, #30
 8007e20:	f100 8105 	bmi.w	800802e <_printf_float+0x462>
 8007e24:	68e0      	ldr	r0, [r4, #12]
 8007e26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007e28:	4298      	cmp	r0, r3
 8007e2a:	bfb8      	it	lt
 8007e2c:	4618      	movlt	r0, r3
 8007e2e:	e730      	b.n	8007c92 <_printf_float+0xc6>
 8007e30:	2301      	movs	r3, #1
 8007e32:	464a      	mov	r2, r9
 8007e34:	4631      	mov	r1, r6
 8007e36:	4628      	mov	r0, r5
 8007e38:	47b8      	blx	r7
 8007e3a:	3001      	adds	r0, #1
 8007e3c:	f43f af27 	beq.w	8007c8e <_printf_float+0xc2>
 8007e40:	f108 0801 	add.w	r8, r8, #1
 8007e44:	e7e6      	b.n	8007e14 <_printf_float+0x248>
 8007e46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	dc39      	bgt.n	8007ec0 <_printf_float+0x2f4>
 8007e4c:	4a1b      	ldr	r2, [pc, #108]	; (8007ebc <_printf_float+0x2f0>)
 8007e4e:	2301      	movs	r3, #1
 8007e50:	4631      	mov	r1, r6
 8007e52:	4628      	mov	r0, r5
 8007e54:	47b8      	blx	r7
 8007e56:	3001      	adds	r0, #1
 8007e58:	f43f af19 	beq.w	8007c8e <_printf_float+0xc2>
 8007e5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e60:	4313      	orrs	r3, r2
 8007e62:	d102      	bne.n	8007e6a <_printf_float+0x29e>
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	07d9      	lsls	r1, r3, #31
 8007e68:	d5d8      	bpl.n	8007e1c <_printf_float+0x250>
 8007e6a:	ee18 3a10 	vmov	r3, s16
 8007e6e:	4652      	mov	r2, sl
 8007e70:	4631      	mov	r1, r6
 8007e72:	4628      	mov	r0, r5
 8007e74:	47b8      	blx	r7
 8007e76:	3001      	adds	r0, #1
 8007e78:	f43f af09 	beq.w	8007c8e <_printf_float+0xc2>
 8007e7c:	f04f 0900 	mov.w	r9, #0
 8007e80:	f104 0a1a 	add.w	sl, r4, #26
 8007e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e86:	425b      	negs	r3, r3
 8007e88:	454b      	cmp	r3, r9
 8007e8a:	dc01      	bgt.n	8007e90 <_printf_float+0x2c4>
 8007e8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e8e:	e792      	b.n	8007db6 <_printf_float+0x1ea>
 8007e90:	2301      	movs	r3, #1
 8007e92:	4652      	mov	r2, sl
 8007e94:	4631      	mov	r1, r6
 8007e96:	4628      	mov	r0, r5
 8007e98:	47b8      	blx	r7
 8007e9a:	3001      	adds	r0, #1
 8007e9c:	f43f aef7 	beq.w	8007c8e <_printf_float+0xc2>
 8007ea0:	f109 0901 	add.w	r9, r9, #1
 8007ea4:	e7ee      	b.n	8007e84 <_printf_float+0x2b8>
 8007ea6:	bf00      	nop
 8007ea8:	7fefffff 	.word	0x7fefffff
 8007eac:	0800a8cc 	.word	0x0800a8cc
 8007eb0:	0800a8d0 	.word	0x0800a8d0
 8007eb4:	0800a8d8 	.word	0x0800a8d8
 8007eb8:	0800a8d4 	.word	0x0800a8d4
 8007ebc:	0800a8dc 	.word	0x0800a8dc
 8007ec0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ec2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	bfa8      	it	ge
 8007ec8:	461a      	movge	r2, r3
 8007eca:	2a00      	cmp	r2, #0
 8007ecc:	4691      	mov	r9, r2
 8007ece:	dc37      	bgt.n	8007f40 <_printf_float+0x374>
 8007ed0:	f04f 0b00 	mov.w	fp, #0
 8007ed4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ed8:	f104 021a 	add.w	r2, r4, #26
 8007edc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007ede:	9305      	str	r3, [sp, #20]
 8007ee0:	eba3 0309 	sub.w	r3, r3, r9
 8007ee4:	455b      	cmp	r3, fp
 8007ee6:	dc33      	bgt.n	8007f50 <_printf_float+0x384>
 8007ee8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007eec:	429a      	cmp	r2, r3
 8007eee:	db3b      	blt.n	8007f68 <_printf_float+0x39c>
 8007ef0:	6823      	ldr	r3, [r4, #0]
 8007ef2:	07da      	lsls	r2, r3, #31
 8007ef4:	d438      	bmi.n	8007f68 <_printf_float+0x39c>
 8007ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ef8:	9a05      	ldr	r2, [sp, #20]
 8007efa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007efc:	1a9a      	subs	r2, r3, r2
 8007efe:	eba3 0901 	sub.w	r9, r3, r1
 8007f02:	4591      	cmp	r9, r2
 8007f04:	bfa8      	it	ge
 8007f06:	4691      	movge	r9, r2
 8007f08:	f1b9 0f00 	cmp.w	r9, #0
 8007f0c:	dc35      	bgt.n	8007f7a <_printf_float+0x3ae>
 8007f0e:	f04f 0800 	mov.w	r8, #0
 8007f12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007f16:	f104 0a1a 	add.w	sl, r4, #26
 8007f1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007f1e:	1a9b      	subs	r3, r3, r2
 8007f20:	eba3 0309 	sub.w	r3, r3, r9
 8007f24:	4543      	cmp	r3, r8
 8007f26:	f77f af79 	ble.w	8007e1c <_printf_float+0x250>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	4652      	mov	r2, sl
 8007f2e:	4631      	mov	r1, r6
 8007f30:	4628      	mov	r0, r5
 8007f32:	47b8      	blx	r7
 8007f34:	3001      	adds	r0, #1
 8007f36:	f43f aeaa 	beq.w	8007c8e <_printf_float+0xc2>
 8007f3a:	f108 0801 	add.w	r8, r8, #1
 8007f3e:	e7ec      	b.n	8007f1a <_printf_float+0x34e>
 8007f40:	4613      	mov	r3, r2
 8007f42:	4631      	mov	r1, r6
 8007f44:	4642      	mov	r2, r8
 8007f46:	4628      	mov	r0, r5
 8007f48:	47b8      	blx	r7
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	d1c0      	bne.n	8007ed0 <_printf_float+0x304>
 8007f4e:	e69e      	b.n	8007c8e <_printf_float+0xc2>
 8007f50:	2301      	movs	r3, #1
 8007f52:	4631      	mov	r1, r6
 8007f54:	4628      	mov	r0, r5
 8007f56:	9205      	str	r2, [sp, #20]
 8007f58:	47b8      	blx	r7
 8007f5a:	3001      	adds	r0, #1
 8007f5c:	f43f ae97 	beq.w	8007c8e <_printf_float+0xc2>
 8007f60:	9a05      	ldr	r2, [sp, #20]
 8007f62:	f10b 0b01 	add.w	fp, fp, #1
 8007f66:	e7b9      	b.n	8007edc <_printf_float+0x310>
 8007f68:	ee18 3a10 	vmov	r3, s16
 8007f6c:	4652      	mov	r2, sl
 8007f6e:	4631      	mov	r1, r6
 8007f70:	4628      	mov	r0, r5
 8007f72:	47b8      	blx	r7
 8007f74:	3001      	adds	r0, #1
 8007f76:	d1be      	bne.n	8007ef6 <_printf_float+0x32a>
 8007f78:	e689      	b.n	8007c8e <_printf_float+0xc2>
 8007f7a:	9a05      	ldr	r2, [sp, #20]
 8007f7c:	464b      	mov	r3, r9
 8007f7e:	4442      	add	r2, r8
 8007f80:	4631      	mov	r1, r6
 8007f82:	4628      	mov	r0, r5
 8007f84:	47b8      	blx	r7
 8007f86:	3001      	adds	r0, #1
 8007f88:	d1c1      	bne.n	8007f0e <_printf_float+0x342>
 8007f8a:	e680      	b.n	8007c8e <_printf_float+0xc2>
 8007f8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007f8e:	2a01      	cmp	r2, #1
 8007f90:	dc01      	bgt.n	8007f96 <_printf_float+0x3ca>
 8007f92:	07db      	lsls	r3, r3, #31
 8007f94:	d538      	bpl.n	8008008 <_printf_float+0x43c>
 8007f96:	2301      	movs	r3, #1
 8007f98:	4642      	mov	r2, r8
 8007f9a:	4631      	mov	r1, r6
 8007f9c:	4628      	mov	r0, r5
 8007f9e:	47b8      	blx	r7
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	f43f ae74 	beq.w	8007c8e <_printf_float+0xc2>
 8007fa6:	ee18 3a10 	vmov	r3, s16
 8007faa:	4652      	mov	r2, sl
 8007fac:	4631      	mov	r1, r6
 8007fae:	4628      	mov	r0, r5
 8007fb0:	47b8      	blx	r7
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	f43f ae6b 	beq.w	8007c8e <_printf_float+0xc2>
 8007fb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	f7f8 fd8a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fc4:	b9d8      	cbnz	r0, 8007ffe <_printf_float+0x432>
 8007fc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007fc8:	f108 0201 	add.w	r2, r8, #1
 8007fcc:	3b01      	subs	r3, #1
 8007fce:	4631      	mov	r1, r6
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	47b8      	blx	r7
 8007fd4:	3001      	adds	r0, #1
 8007fd6:	d10e      	bne.n	8007ff6 <_printf_float+0x42a>
 8007fd8:	e659      	b.n	8007c8e <_printf_float+0xc2>
 8007fda:	2301      	movs	r3, #1
 8007fdc:	4652      	mov	r2, sl
 8007fde:	4631      	mov	r1, r6
 8007fe0:	4628      	mov	r0, r5
 8007fe2:	47b8      	blx	r7
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	f43f ae52 	beq.w	8007c8e <_printf_float+0xc2>
 8007fea:	f108 0801 	add.w	r8, r8, #1
 8007fee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	4543      	cmp	r3, r8
 8007ff4:	dcf1      	bgt.n	8007fda <_printf_float+0x40e>
 8007ff6:	464b      	mov	r3, r9
 8007ff8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007ffc:	e6dc      	b.n	8007db8 <_printf_float+0x1ec>
 8007ffe:	f04f 0800 	mov.w	r8, #0
 8008002:	f104 0a1a 	add.w	sl, r4, #26
 8008006:	e7f2      	b.n	8007fee <_printf_float+0x422>
 8008008:	2301      	movs	r3, #1
 800800a:	4642      	mov	r2, r8
 800800c:	e7df      	b.n	8007fce <_printf_float+0x402>
 800800e:	2301      	movs	r3, #1
 8008010:	464a      	mov	r2, r9
 8008012:	4631      	mov	r1, r6
 8008014:	4628      	mov	r0, r5
 8008016:	47b8      	blx	r7
 8008018:	3001      	adds	r0, #1
 800801a:	f43f ae38 	beq.w	8007c8e <_printf_float+0xc2>
 800801e:	f108 0801 	add.w	r8, r8, #1
 8008022:	68e3      	ldr	r3, [r4, #12]
 8008024:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008026:	1a5b      	subs	r3, r3, r1
 8008028:	4543      	cmp	r3, r8
 800802a:	dcf0      	bgt.n	800800e <_printf_float+0x442>
 800802c:	e6fa      	b.n	8007e24 <_printf_float+0x258>
 800802e:	f04f 0800 	mov.w	r8, #0
 8008032:	f104 0919 	add.w	r9, r4, #25
 8008036:	e7f4      	b.n	8008022 <_printf_float+0x456>

08008038 <_printf_common>:
 8008038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800803c:	4616      	mov	r6, r2
 800803e:	4699      	mov	r9, r3
 8008040:	688a      	ldr	r2, [r1, #8]
 8008042:	690b      	ldr	r3, [r1, #16]
 8008044:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008048:	4293      	cmp	r3, r2
 800804a:	bfb8      	it	lt
 800804c:	4613      	movlt	r3, r2
 800804e:	6033      	str	r3, [r6, #0]
 8008050:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008054:	4607      	mov	r7, r0
 8008056:	460c      	mov	r4, r1
 8008058:	b10a      	cbz	r2, 800805e <_printf_common+0x26>
 800805a:	3301      	adds	r3, #1
 800805c:	6033      	str	r3, [r6, #0]
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	0699      	lsls	r1, r3, #26
 8008062:	bf42      	ittt	mi
 8008064:	6833      	ldrmi	r3, [r6, #0]
 8008066:	3302      	addmi	r3, #2
 8008068:	6033      	strmi	r3, [r6, #0]
 800806a:	6825      	ldr	r5, [r4, #0]
 800806c:	f015 0506 	ands.w	r5, r5, #6
 8008070:	d106      	bne.n	8008080 <_printf_common+0x48>
 8008072:	f104 0a19 	add.w	sl, r4, #25
 8008076:	68e3      	ldr	r3, [r4, #12]
 8008078:	6832      	ldr	r2, [r6, #0]
 800807a:	1a9b      	subs	r3, r3, r2
 800807c:	42ab      	cmp	r3, r5
 800807e:	dc26      	bgt.n	80080ce <_printf_common+0x96>
 8008080:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008084:	1e13      	subs	r3, r2, #0
 8008086:	6822      	ldr	r2, [r4, #0]
 8008088:	bf18      	it	ne
 800808a:	2301      	movne	r3, #1
 800808c:	0692      	lsls	r2, r2, #26
 800808e:	d42b      	bmi.n	80080e8 <_printf_common+0xb0>
 8008090:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008094:	4649      	mov	r1, r9
 8008096:	4638      	mov	r0, r7
 8008098:	47c0      	blx	r8
 800809a:	3001      	adds	r0, #1
 800809c:	d01e      	beq.n	80080dc <_printf_common+0xa4>
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	68e5      	ldr	r5, [r4, #12]
 80080a2:	6832      	ldr	r2, [r6, #0]
 80080a4:	f003 0306 	and.w	r3, r3, #6
 80080a8:	2b04      	cmp	r3, #4
 80080aa:	bf08      	it	eq
 80080ac:	1aad      	subeq	r5, r5, r2
 80080ae:	68a3      	ldr	r3, [r4, #8]
 80080b0:	6922      	ldr	r2, [r4, #16]
 80080b2:	bf0c      	ite	eq
 80080b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080b8:	2500      	movne	r5, #0
 80080ba:	4293      	cmp	r3, r2
 80080bc:	bfc4      	itt	gt
 80080be:	1a9b      	subgt	r3, r3, r2
 80080c0:	18ed      	addgt	r5, r5, r3
 80080c2:	2600      	movs	r6, #0
 80080c4:	341a      	adds	r4, #26
 80080c6:	42b5      	cmp	r5, r6
 80080c8:	d11a      	bne.n	8008100 <_printf_common+0xc8>
 80080ca:	2000      	movs	r0, #0
 80080cc:	e008      	b.n	80080e0 <_printf_common+0xa8>
 80080ce:	2301      	movs	r3, #1
 80080d0:	4652      	mov	r2, sl
 80080d2:	4649      	mov	r1, r9
 80080d4:	4638      	mov	r0, r7
 80080d6:	47c0      	blx	r8
 80080d8:	3001      	adds	r0, #1
 80080da:	d103      	bne.n	80080e4 <_printf_common+0xac>
 80080dc:	f04f 30ff 	mov.w	r0, #4294967295
 80080e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e4:	3501      	adds	r5, #1
 80080e6:	e7c6      	b.n	8008076 <_printf_common+0x3e>
 80080e8:	18e1      	adds	r1, r4, r3
 80080ea:	1c5a      	adds	r2, r3, #1
 80080ec:	2030      	movs	r0, #48	; 0x30
 80080ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080f2:	4422      	add	r2, r4
 80080f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080fc:	3302      	adds	r3, #2
 80080fe:	e7c7      	b.n	8008090 <_printf_common+0x58>
 8008100:	2301      	movs	r3, #1
 8008102:	4622      	mov	r2, r4
 8008104:	4649      	mov	r1, r9
 8008106:	4638      	mov	r0, r7
 8008108:	47c0      	blx	r8
 800810a:	3001      	adds	r0, #1
 800810c:	d0e6      	beq.n	80080dc <_printf_common+0xa4>
 800810e:	3601      	adds	r6, #1
 8008110:	e7d9      	b.n	80080c6 <_printf_common+0x8e>
	...

08008114 <_printf_i>:
 8008114:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008118:	7e0f      	ldrb	r7, [r1, #24]
 800811a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800811c:	2f78      	cmp	r7, #120	; 0x78
 800811e:	4691      	mov	r9, r2
 8008120:	4680      	mov	r8, r0
 8008122:	460c      	mov	r4, r1
 8008124:	469a      	mov	sl, r3
 8008126:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800812a:	d807      	bhi.n	800813c <_printf_i+0x28>
 800812c:	2f62      	cmp	r7, #98	; 0x62
 800812e:	d80a      	bhi.n	8008146 <_printf_i+0x32>
 8008130:	2f00      	cmp	r7, #0
 8008132:	f000 80d8 	beq.w	80082e6 <_printf_i+0x1d2>
 8008136:	2f58      	cmp	r7, #88	; 0x58
 8008138:	f000 80a3 	beq.w	8008282 <_printf_i+0x16e>
 800813c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008140:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008144:	e03a      	b.n	80081bc <_printf_i+0xa8>
 8008146:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800814a:	2b15      	cmp	r3, #21
 800814c:	d8f6      	bhi.n	800813c <_printf_i+0x28>
 800814e:	a101      	add	r1, pc, #4	; (adr r1, 8008154 <_printf_i+0x40>)
 8008150:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008154:	080081ad 	.word	0x080081ad
 8008158:	080081c1 	.word	0x080081c1
 800815c:	0800813d 	.word	0x0800813d
 8008160:	0800813d 	.word	0x0800813d
 8008164:	0800813d 	.word	0x0800813d
 8008168:	0800813d 	.word	0x0800813d
 800816c:	080081c1 	.word	0x080081c1
 8008170:	0800813d 	.word	0x0800813d
 8008174:	0800813d 	.word	0x0800813d
 8008178:	0800813d 	.word	0x0800813d
 800817c:	0800813d 	.word	0x0800813d
 8008180:	080082cd 	.word	0x080082cd
 8008184:	080081f1 	.word	0x080081f1
 8008188:	080082af 	.word	0x080082af
 800818c:	0800813d 	.word	0x0800813d
 8008190:	0800813d 	.word	0x0800813d
 8008194:	080082ef 	.word	0x080082ef
 8008198:	0800813d 	.word	0x0800813d
 800819c:	080081f1 	.word	0x080081f1
 80081a0:	0800813d 	.word	0x0800813d
 80081a4:	0800813d 	.word	0x0800813d
 80081a8:	080082b7 	.word	0x080082b7
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	1d1a      	adds	r2, r3, #4
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	602a      	str	r2, [r5, #0]
 80081b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081bc:	2301      	movs	r3, #1
 80081be:	e0a3      	b.n	8008308 <_printf_i+0x1f4>
 80081c0:	6820      	ldr	r0, [r4, #0]
 80081c2:	6829      	ldr	r1, [r5, #0]
 80081c4:	0606      	lsls	r6, r0, #24
 80081c6:	f101 0304 	add.w	r3, r1, #4
 80081ca:	d50a      	bpl.n	80081e2 <_printf_i+0xce>
 80081cc:	680e      	ldr	r6, [r1, #0]
 80081ce:	602b      	str	r3, [r5, #0]
 80081d0:	2e00      	cmp	r6, #0
 80081d2:	da03      	bge.n	80081dc <_printf_i+0xc8>
 80081d4:	232d      	movs	r3, #45	; 0x2d
 80081d6:	4276      	negs	r6, r6
 80081d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081dc:	485e      	ldr	r0, [pc, #376]	; (8008358 <_printf_i+0x244>)
 80081de:	230a      	movs	r3, #10
 80081e0:	e019      	b.n	8008216 <_printf_i+0x102>
 80081e2:	680e      	ldr	r6, [r1, #0]
 80081e4:	602b      	str	r3, [r5, #0]
 80081e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80081ea:	bf18      	it	ne
 80081ec:	b236      	sxthne	r6, r6
 80081ee:	e7ef      	b.n	80081d0 <_printf_i+0xbc>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	6820      	ldr	r0, [r4, #0]
 80081f4:	1d19      	adds	r1, r3, #4
 80081f6:	6029      	str	r1, [r5, #0]
 80081f8:	0601      	lsls	r1, r0, #24
 80081fa:	d501      	bpl.n	8008200 <_printf_i+0xec>
 80081fc:	681e      	ldr	r6, [r3, #0]
 80081fe:	e002      	b.n	8008206 <_printf_i+0xf2>
 8008200:	0646      	lsls	r6, r0, #25
 8008202:	d5fb      	bpl.n	80081fc <_printf_i+0xe8>
 8008204:	881e      	ldrh	r6, [r3, #0]
 8008206:	4854      	ldr	r0, [pc, #336]	; (8008358 <_printf_i+0x244>)
 8008208:	2f6f      	cmp	r7, #111	; 0x6f
 800820a:	bf0c      	ite	eq
 800820c:	2308      	moveq	r3, #8
 800820e:	230a      	movne	r3, #10
 8008210:	2100      	movs	r1, #0
 8008212:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008216:	6865      	ldr	r5, [r4, #4]
 8008218:	60a5      	str	r5, [r4, #8]
 800821a:	2d00      	cmp	r5, #0
 800821c:	bfa2      	ittt	ge
 800821e:	6821      	ldrge	r1, [r4, #0]
 8008220:	f021 0104 	bicge.w	r1, r1, #4
 8008224:	6021      	strge	r1, [r4, #0]
 8008226:	b90e      	cbnz	r6, 800822c <_printf_i+0x118>
 8008228:	2d00      	cmp	r5, #0
 800822a:	d04d      	beq.n	80082c8 <_printf_i+0x1b4>
 800822c:	4615      	mov	r5, r2
 800822e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008232:	fb03 6711 	mls	r7, r3, r1, r6
 8008236:	5dc7      	ldrb	r7, [r0, r7]
 8008238:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800823c:	4637      	mov	r7, r6
 800823e:	42bb      	cmp	r3, r7
 8008240:	460e      	mov	r6, r1
 8008242:	d9f4      	bls.n	800822e <_printf_i+0x11a>
 8008244:	2b08      	cmp	r3, #8
 8008246:	d10b      	bne.n	8008260 <_printf_i+0x14c>
 8008248:	6823      	ldr	r3, [r4, #0]
 800824a:	07de      	lsls	r6, r3, #31
 800824c:	d508      	bpl.n	8008260 <_printf_i+0x14c>
 800824e:	6923      	ldr	r3, [r4, #16]
 8008250:	6861      	ldr	r1, [r4, #4]
 8008252:	4299      	cmp	r1, r3
 8008254:	bfde      	ittt	le
 8008256:	2330      	movle	r3, #48	; 0x30
 8008258:	f805 3c01 	strble.w	r3, [r5, #-1]
 800825c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008260:	1b52      	subs	r2, r2, r5
 8008262:	6122      	str	r2, [r4, #16]
 8008264:	f8cd a000 	str.w	sl, [sp]
 8008268:	464b      	mov	r3, r9
 800826a:	aa03      	add	r2, sp, #12
 800826c:	4621      	mov	r1, r4
 800826e:	4640      	mov	r0, r8
 8008270:	f7ff fee2 	bl	8008038 <_printf_common>
 8008274:	3001      	adds	r0, #1
 8008276:	d14c      	bne.n	8008312 <_printf_i+0x1fe>
 8008278:	f04f 30ff 	mov.w	r0, #4294967295
 800827c:	b004      	add	sp, #16
 800827e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008282:	4835      	ldr	r0, [pc, #212]	; (8008358 <_printf_i+0x244>)
 8008284:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008288:	6829      	ldr	r1, [r5, #0]
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008290:	6029      	str	r1, [r5, #0]
 8008292:	061d      	lsls	r5, r3, #24
 8008294:	d514      	bpl.n	80082c0 <_printf_i+0x1ac>
 8008296:	07df      	lsls	r7, r3, #31
 8008298:	bf44      	itt	mi
 800829a:	f043 0320 	orrmi.w	r3, r3, #32
 800829e:	6023      	strmi	r3, [r4, #0]
 80082a0:	b91e      	cbnz	r6, 80082aa <_printf_i+0x196>
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	f023 0320 	bic.w	r3, r3, #32
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	2310      	movs	r3, #16
 80082ac:	e7b0      	b.n	8008210 <_printf_i+0xfc>
 80082ae:	6823      	ldr	r3, [r4, #0]
 80082b0:	f043 0320 	orr.w	r3, r3, #32
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	2378      	movs	r3, #120	; 0x78
 80082b8:	4828      	ldr	r0, [pc, #160]	; (800835c <_printf_i+0x248>)
 80082ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80082be:	e7e3      	b.n	8008288 <_printf_i+0x174>
 80082c0:	0659      	lsls	r1, r3, #25
 80082c2:	bf48      	it	mi
 80082c4:	b2b6      	uxthmi	r6, r6
 80082c6:	e7e6      	b.n	8008296 <_printf_i+0x182>
 80082c8:	4615      	mov	r5, r2
 80082ca:	e7bb      	b.n	8008244 <_printf_i+0x130>
 80082cc:	682b      	ldr	r3, [r5, #0]
 80082ce:	6826      	ldr	r6, [r4, #0]
 80082d0:	6961      	ldr	r1, [r4, #20]
 80082d2:	1d18      	adds	r0, r3, #4
 80082d4:	6028      	str	r0, [r5, #0]
 80082d6:	0635      	lsls	r5, r6, #24
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	d501      	bpl.n	80082e0 <_printf_i+0x1cc>
 80082dc:	6019      	str	r1, [r3, #0]
 80082de:	e002      	b.n	80082e6 <_printf_i+0x1d2>
 80082e0:	0670      	lsls	r0, r6, #25
 80082e2:	d5fb      	bpl.n	80082dc <_printf_i+0x1c8>
 80082e4:	8019      	strh	r1, [r3, #0]
 80082e6:	2300      	movs	r3, #0
 80082e8:	6123      	str	r3, [r4, #16]
 80082ea:	4615      	mov	r5, r2
 80082ec:	e7ba      	b.n	8008264 <_printf_i+0x150>
 80082ee:	682b      	ldr	r3, [r5, #0]
 80082f0:	1d1a      	adds	r2, r3, #4
 80082f2:	602a      	str	r2, [r5, #0]
 80082f4:	681d      	ldr	r5, [r3, #0]
 80082f6:	6862      	ldr	r2, [r4, #4]
 80082f8:	2100      	movs	r1, #0
 80082fa:	4628      	mov	r0, r5
 80082fc:	f7f7 ff78 	bl	80001f0 <memchr>
 8008300:	b108      	cbz	r0, 8008306 <_printf_i+0x1f2>
 8008302:	1b40      	subs	r0, r0, r5
 8008304:	6060      	str	r0, [r4, #4]
 8008306:	6863      	ldr	r3, [r4, #4]
 8008308:	6123      	str	r3, [r4, #16]
 800830a:	2300      	movs	r3, #0
 800830c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008310:	e7a8      	b.n	8008264 <_printf_i+0x150>
 8008312:	6923      	ldr	r3, [r4, #16]
 8008314:	462a      	mov	r2, r5
 8008316:	4649      	mov	r1, r9
 8008318:	4640      	mov	r0, r8
 800831a:	47d0      	blx	sl
 800831c:	3001      	adds	r0, #1
 800831e:	d0ab      	beq.n	8008278 <_printf_i+0x164>
 8008320:	6823      	ldr	r3, [r4, #0]
 8008322:	079b      	lsls	r3, r3, #30
 8008324:	d413      	bmi.n	800834e <_printf_i+0x23a>
 8008326:	68e0      	ldr	r0, [r4, #12]
 8008328:	9b03      	ldr	r3, [sp, #12]
 800832a:	4298      	cmp	r0, r3
 800832c:	bfb8      	it	lt
 800832e:	4618      	movlt	r0, r3
 8008330:	e7a4      	b.n	800827c <_printf_i+0x168>
 8008332:	2301      	movs	r3, #1
 8008334:	4632      	mov	r2, r6
 8008336:	4649      	mov	r1, r9
 8008338:	4640      	mov	r0, r8
 800833a:	47d0      	blx	sl
 800833c:	3001      	adds	r0, #1
 800833e:	d09b      	beq.n	8008278 <_printf_i+0x164>
 8008340:	3501      	adds	r5, #1
 8008342:	68e3      	ldr	r3, [r4, #12]
 8008344:	9903      	ldr	r1, [sp, #12]
 8008346:	1a5b      	subs	r3, r3, r1
 8008348:	42ab      	cmp	r3, r5
 800834a:	dcf2      	bgt.n	8008332 <_printf_i+0x21e>
 800834c:	e7eb      	b.n	8008326 <_printf_i+0x212>
 800834e:	2500      	movs	r5, #0
 8008350:	f104 0619 	add.w	r6, r4, #25
 8008354:	e7f5      	b.n	8008342 <_printf_i+0x22e>
 8008356:	bf00      	nop
 8008358:	0800a8de 	.word	0x0800a8de
 800835c:	0800a8ef 	.word	0x0800a8ef

08008360 <siprintf>:
 8008360:	b40e      	push	{r1, r2, r3}
 8008362:	b500      	push	{lr}
 8008364:	b09c      	sub	sp, #112	; 0x70
 8008366:	ab1d      	add	r3, sp, #116	; 0x74
 8008368:	9002      	str	r0, [sp, #8]
 800836a:	9006      	str	r0, [sp, #24]
 800836c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008370:	4809      	ldr	r0, [pc, #36]	; (8008398 <siprintf+0x38>)
 8008372:	9107      	str	r1, [sp, #28]
 8008374:	9104      	str	r1, [sp, #16]
 8008376:	4909      	ldr	r1, [pc, #36]	; (800839c <siprintf+0x3c>)
 8008378:	f853 2b04 	ldr.w	r2, [r3], #4
 800837c:	9105      	str	r1, [sp, #20]
 800837e:	6800      	ldr	r0, [r0, #0]
 8008380:	9301      	str	r3, [sp, #4]
 8008382:	a902      	add	r1, sp, #8
 8008384:	f001 fb76 	bl	8009a74 <_svfiprintf_r>
 8008388:	9b02      	ldr	r3, [sp, #8]
 800838a:	2200      	movs	r2, #0
 800838c:	701a      	strb	r2, [r3, #0]
 800838e:	b01c      	add	sp, #112	; 0x70
 8008390:	f85d eb04 	ldr.w	lr, [sp], #4
 8008394:	b003      	add	sp, #12
 8008396:	4770      	bx	lr
 8008398:	200000fc 	.word	0x200000fc
 800839c:	ffff0208 	.word	0xffff0208

080083a0 <quorem>:
 80083a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083a4:	6903      	ldr	r3, [r0, #16]
 80083a6:	690c      	ldr	r4, [r1, #16]
 80083a8:	42a3      	cmp	r3, r4
 80083aa:	4607      	mov	r7, r0
 80083ac:	f2c0 8081 	blt.w	80084b2 <quorem+0x112>
 80083b0:	3c01      	subs	r4, #1
 80083b2:	f101 0814 	add.w	r8, r1, #20
 80083b6:	f100 0514 	add.w	r5, r0, #20
 80083ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80083be:	9301      	str	r3, [sp, #4]
 80083c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80083c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80083c8:	3301      	adds	r3, #1
 80083ca:	429a      	cmp	r2, r3
 80083cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80083d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80083d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80083d8:	d331      	bcc.n	800843e <quorem+0x9e>
 80083da:	f04f 0e00 	mov.w	lr, #0
 80083de:	4640      	mov	r0, r8
 80083e0:	46ac      	mov	ip, r5
 80083e2:	46f2      	mov	sl, lr
 80083e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80083e8:	b293      	uxth	r3, r2
 80083ea:	fb06 e303 	mla	r3, r6, r3, lr
 80083ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	ebaa 0303 	sub.w	r3, sl, r3
 80083f8:	f8dc a000 	ldr.w	sl, [ip]
 80083fc:	0c12      	lsrs	r2, r2, #16
 80083fe:	fa13 f38a 	uxtah	r3, r3, sl
 8008402:	fb06 e202 	mla	r2, r6, r2, lr
 8008406:	9300      	str	r3, [sp, #0]
 8008408:	9b00      	ldr	r3, [sp, #0]
 800840a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800840e:	b292      	uxth	r2, r2
 8008410:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008414:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008418:	f8bd 3000 	ldrh.w	r3, [sp]
 800841c:	4581      	cmp	r9, r0
 800841e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008422:	f84c 3b04 	str.w	r3, [ip], #4
 8008426:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800842a:	d2db      	bcs.n	80083e4 <quorem+0x44>
 800842c:	f855 300b 	ldr.w	r3, [r5, fp]
 8008430:	b92b      	cbnz	r3, 800843e <quorem+0x9e>
 8008432:	9b01      	ldr	r3, [sp, #4]
 8008434:	3b04      	subs	r3, #4
 8008436:	429d      	cmp	r5, r3
 8008438:	461a      	mov	r2, r3
 800843a:	d32e      	bcc.n	800849a <quorem+0xfa>
 800843c:	613c      	str	r4, [r7, #16]
 800843e:	4638      	mov	r0, r7
 8008440:	f001 f8c4 	bl	80095cc <__mcmp>
 8008444:	2800      	cmp	r0, #0
 8008446:	db24      	blt.n	8008492 <quorem+0xf2>
 8008448:	3601      	adds	r6, #1
 800844a:	4628      	mov	r0, r5
 800844c:	f04f 0c00 	mov.w	ip, #0
 8008450:	f858 2b04 	ldr.w	r2, [r8], #4
 8008454:	f8d0 e000 	ldr.w	lr, [r0]
 8008458:	b293      	uxth	r3, r2
 800845a:	ebac 0303 	sub.w	r3, ip, r3
 800845e:	0c12      	lsrs	r2, r2, #16
 8008460:	fa13 f38e 	uxtah	r3, r3, lr
 8008464:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008468:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800846c:	b29b      	uxth	r3, r3
 800846e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008472:	45c1      	cmp	r9, r8
 8008474:	f840 3b04 	str.w	r3, [r0], #4
 8008478:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800847c:	d2e8      	bcs.n	8008450 <quorem+0xb0>
 800847e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008482:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008486:	b922      	cbnz	r2, 8008492 <quorem+0xf2>
 8008488:	3b04      	subs	r3, #4
 800848a:	429d      	cmp	r5, r3
 800848c:	461a      	mov	r2, r3
 800848e:	d30a      	bcc.n	80084a6 <quorem+0x106>
 8008490:	613c      	str	r4, [r7, #16]
 8008492:	4630      	mov	r0, r6
 8008494:	b003      	add	sp, #12
 8008496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800849a:	6812      	ldr	r2, [r2, #0]
 800849c:	3b04      	subs	r3, #4
 800849e:	2a00      	cmp	r2, #0
 80084a0:	d1cc      	bne.n	800843c <quorem+0x9c>
 80084a2:	3c01      	subs	r4, #1
 80084a4:	e7c7      	b.n	8008436 <quorem+0x96>
 80084a6:	6812      	ldr	r2, [r2, #0]
 80084a8:	3b04      	subs	r3, #4
 80084aa:	2a00      	cmp	r2, #0
 80084ac:	d1f0      	bne.n	8008490 <quorem+0xf0>
 80084ae:	3c01      	subs	r4, #1
 80084b0:	e7eb      	b.n	800848a <quorem+0xea>
 80084b2:	2000      	movs	r0, #0
 80084b4:	e7ee      	b.n	8008494 <quorem+0xf4>
	...

080084b8 <_dtoa_r>:
 80084b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084bc:	ed2d 8b04 	vpush	{d8-d9}
 80084c0:	ec57 6b10 	vmov	r6, r7, d0
 80084c4:	b093      	sub	sp, #76	; 0x4c
 80084c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80084c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80084cc:	9106      	str	r1, [sp, #24]
 80084ce:	ee10 aa10 	vmov	sl, s0
 80084d2:	4604      	mov	r4, r0
 80084d4:	9209      	str	r2, [sp, #36]	; 0x24
 80084d6:	930c      	str	r3, [sp, #48]	; 0x30
 80084d8:	46bb      	mov	fp, r7
 80084da:	b975      	cbnz	r5, 80084fa <_dtoa_r+0x42>
 80084dc:	2010      	movs	r0, #16
 80084de:	f000 fddd 	bl	800909c <malloc>
 80084e2:	4602      	mov	r2, r0
 80084e4:	6260      	str	r0, [r4, #36]	; 0x24
 80084e6:	b920      	cbnz	r0, 80084f2 <_dtoa_r+0x3a>
 80084e8:	4ba7      	ldr	r3, [pc, #668]	; (8008788 <_dtoa_r+0x2d0>)
 80084ea:	21ea      	movs	r1, #234	; 0xea
 80084ec:	48a7      	ldr	r0, [pc, #668]	; (800878c <_dtoa_r+0x2d4>)
 80084ee:	f001 fbd1 	bl	8009c94 <__assert_func>
 80084f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80084f6:	6005      	str	r5, [r0, #0]
 80084f8:	60c5      	str	r5, [r0, #12]
 80084fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80084fc:	6819      	ldr	r1, [r3, #0]
 80084fe:	b151      	cbz	r1, 8008516 <_dtoa_r+0x5e>
 8008500:	685a      	ldr	r2, [r3, #4]
 8008502:	604a      	str	r2, [r1, #4]
 8008504:	2301      	movs	r3, #1
 8008506:	4093      	lsls	r3, r2
 8008508:	608b      	str	r3, [r1, #8]
 800850a:	4620      	mov	r0, r4
 800850c:	f000 fe1c 	bl	8009148 <_Bfree>
 8008510:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008512:	2200      	movs	r2, #0
 8008514:	601a      	str	r2, [r3, #0]
 8008516:	1e3b      	subs	r3, r7, #0
 8008518:	bfaa      	itet	ge
 800851a:	2300      	movge	r3, #0
 800851c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8008520:	f8c8 3000 	strge.w	r3, [r8]
 8008524:	4b9a      	ldr	r3, [pc, #616]	; (8008790 <_dtoa_r+0x2d8>)
 8008526:	bfbc      	itt	lt
 8008528:	2201      	movlt	r2, #1
 800852a:	f8c8 2000 	strlt.w	r2, [r8]
 800852e:	ea33 030b 	bics.w	r3, r3, fp
 8008532:	d11b      	bne.n	800856c <_dtoa_r+0xb4>
 8008534:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008536:	f242 730f 	movw	r3, #9999	; 0x270f
 800853a:	6013      	str	r3, [r2, #0]
 800853c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008540:	4333      	orrs	r3, r6
 8008542:	f000 8592 	beq.w	800906a <_dtoa_r+0xbb2>
 8008546:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008548:	b963      	cbnz	r3, 8008564 <_dtoa_r+0xac>
 800854a:	4b92      	ldr	r3, [pc, #584]	; (8008794 <_dtoa_r+0x2dc>)
 800854c:	e022      	b.n	8008594 <_dtoa_r+0xdc>
 800854e:	4b92      	ldr	r3, [pc, #584]	; (8008798 <_dtoa_r+0x2e0>)
 8008550:	9301      	str	r3, [sp, #4]
 8008552:	3308      	adds	r3, #8
 8008554:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008556:	6013      	str	r3, [r2, #0]
 8008558:	9801      	ldr	r0, [sp, #4]
 800855a:	b013      	add	sp, #76	; 0x4c
 800855c:	ecbd 8b04 	vpop	{d8-d9}
 8008560:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008564:	4b8b      	ldr	r3, [pc, #556]	; (8008794 <_dtoa_r+0x2dc>)
 8008566:	9301      	str	r3, [sp, #4]
 8008568:	3303      	adds	r3, #3
 800856a:	e7f3      	b.n	8008554 <_dtoa_r+0x9c>
 800856c:	2200      	movs	r2, #0
 800856e:	2300      	movs	r3, #0
 8008570:	4650      	mov	r0, sl
 8008572:	4659      	mov	r1, fp
 8008574:	f7f8 fab0 	bl	8000ad8 <__aeabi_dcmpeq>
 8008578:	ec4b ab19 	vmov	d9, sl, fp
 800857c:	4680      	mov	r8, r0
 800857e:	b158      	cbz	r0, 8008598 <_dtoa_r+0xe0>
 8008580:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008582:	2301      	movs	r3, #1
 8008584:	6013      	str	r3, [r2, #0]
 8008586:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008588:	2b00      	cmp	r3, #0
 800858a:	f000 856b 	beq.w	8009064 <_dtoa_r+0xbac>
 800858e:	4883      	ldr	r0, [pc, #524]	; (800879c <_dtoa_r+0x2e4>)
 8008590:	6018      	str	r0, [r3, #0]
 8008592:	1e43      	subs	r3, r0, #1
 8008594:	9301      	str	r3, [sp, #4]
 8008596:	e7df      	b.n	8008558 <_dtoa_r+0xa0>
 8008598:	ec4b ab10 	vmov	d0, sl, fp
 800859c:	aa10      	add	r2, sp, #64	; 0x40
 800859e:	a911      	add	r1, sp, #68	; 0x44
 80085a0:	4620      	mov	r0, r4
 80085a2:	f001 f8b9 	bl	8009718 <__d2b>
 80085a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80085aa:	ee08 0a10 	vmov	s16, r0
 80085ae:	2d00      	cmp	r5, #0
 80085b0:	f000 8084 	beq.w	80086bc <_dtoa_r+0x204>
 80085b4:	ee19 3a90 	vmov	r3, s19
 80085b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80085c0:	4656      	mov	r6, sl
 80085c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80085c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80085ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80085ce:	4b74      	ldr	r3, [pc, #464]	; (80087a0 <_dtoa_r+0x2e8>)
 80085d0:	2200      	movs	r2, #0
 80085d2:	4630      	mov	r0, r6
 80085d4:	4639      	mov	r1, r7
 80085d6:	f7f7 fe5f 	bl	8000298 <__aeabi_dsub>
 80085da:	a365      	add	r3, pc, #404	; (adr r3, 8008770 <_dtoa_r+0x2b8>)
 80085dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085e0:	f7f8 f812 	bl	8000608 <__aeabi_dmul>
 80085e4:	a364      	add	r3, pc, #400	; (adr r3, 8008778 <_dtoa_r+0x2c0>)
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	f7f7 fe57 	bl	800029c <__adddf3>
 80085ee:	4606      	mov	r6, r0
 80085f0:	4628      	mov	r0, r5
 80085f2:	460f      	mov	r7, r1
 80085f4:	f7f7 ff9e 	bl	8000534 <__aeabi_i2d>
 80085f8:	a361      	add	r3, pc, #388	; (adr r3, 8008780 <_dtoa_r+0x2c8>)
 80085fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fe:	f7f8 f803 	bl	8000608 <__aeabi_dmul>
 8008602:	4602      	mov	r2, r0
 8008604:	460b      	mov	r3, r1
 8008606:	4630      	mov	r0, r6
 8008608:	4639      	mov	r1, r7
 800860a:	f7f7 fe47 	bl	800029c <__adddf3>
 800860e:	4606      	mov	r6, r0
 8008610:	460f      	mov	r7, r1
 8008612:	f7f8 faa9 	bl	8000b68 <__aeabi_d2iz>
 8008616:	2200      	movs	r2, #0
 8008618:	9000      	str	r0, [sp, #0]
 800861a:	2300      	movs	r3, #0
 800861c:	4630      	mov	r0, r6
 800861e:	4639      	mov	r1, r7
 8008620:	f7f8 fa64 	bl	8000aec <__aeabi_dcmplt>
 8008624:	b150      	cbz	r0, 800863c <_dtoa_r+0x184>
 8008626:	9800      	ldr	r0, [sp, #0]
 8008628:	f7f7 ff84 	bl	8000534 <__aeabi_i2d>
 800862c:	4632      	mov	r2, r6
 800862e:	463b      	mov	r3, r7
 8008630:	f7f8 fa52 	bl	8000ad8 <__aeabi_dcmpeq>
 8008634:	b910      	cbnz	r0, 800863c <_dtoa_r+0x184>
 8008636:	9b00      	ldr	r3, [sp, #0]
 8008638:	3b01      	subs	r3, #1
 800863a:	9300      	str	r3, [sp, #0]
 800863c:	9b00      	ldr	r3, [sp, #0]
 800863e:	2b16      	cmp	r3, #22
 8008640:	d85a      	bhi.n	80086f8 <_dtoa_r+0x240>
 8008642:	9a00      	ldr	r2, [sp, #0]
 8008644:	4b57      	ldr	r3, [pc, #348]	; (80087a4 <_dtoa_r+0x2ec>)
 8008646:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800864a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800864e:	ec51 0b19 	vmov	r0, r1, d9
 8008652:	f7f8 fa4b 	bl	8000aec <__aeabi_dcmplt>
 8008656:	2800      	cmp	r0, #0
 8008658:	d050      	beq.n	80086fc <_dtoa_r+0x244>
 800865a:	9b00      	ldr	r3, [sp, #0]
 800865c:	3b01      	subs	r3, #1
 800865e:	9300      	str	r3, [sp, #0]
 8008660:	2300      	movs	r3, #0
 8008662:	930b      	str	r3, [sp, #44]	; 0x2c
 8008664:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008666:	1b5d      	subs	r5, r3, r5
 8008668:	1e6b      	subs	r3, r5, #1
 800866a:	9305      	str	r3, [sp, #20]
 800866c:	bf45      	ittet	mi
 800866e:	f1c5 0301 	rsbmi	r3, r5, #1
 8008672:	9304      	strmi	r3, [sp, #16]
 8008674:	2300      	movpl	r3, #0
 8008676:	2300      	movmi	r3, #0
 8008678:	bf4c      	ite	mi
 800867a:	9305      	strmi	r3, [sp, #20]
 800867c:	9304      	strpl	r3, [sp, #16]
 800867e:	9b00      	ldr	r3, [sp, #0]
 8008680:	2b00      	cmp	r3, #0
 8008682:	db3d      	blt.n	8008700 <_dtoa_r+0x248>
 8008684:	9b05      	ldr	r3, [sp, #20]
 8008686:	9a00      	ldr	r2, [sp, #0]
 8008688:	920a      	str	r2, [sp, #40]	; 0x28
 800868a:	4413      	add	r3, r2
 800868c:	9305      	str	r3, [sp, #20]
 800868e:	2300      	movs	r3, #0
 8008690:	9307      	str	r3, [sp, #28]
 8008692:	9b06      	ldr	r3, [sp, #24]
 8008694:	2b09      	cmp	r3, #9
 8008696:	f200 8089 	bhi.w	80087ac <_dtoa_r+0x2f4>
 800869a:	2b05      	cmp	r3, #5
 800869c:	bfc4      	itt	gt
 800869e:	3b04      	subgt	r3, #4
 80086a0:	9306      	strgt	r3, [sp, #24]
 80086a2:	9b06      	ldr	r3, [sp, #24]
 80086a4:	f1a3 0302 	sub.w	r3, r3, #2
 80086a8:	bfcc      	ite	gt
 80086aa:	2500      	movgt	r5, #0
 80086ac:	2501      	movle	r5, #1
 80086ae:	2b03      	cmp	r3, #3
 80086b0:	f200 8087 	bhi.w	80087c2 <_dtoa_r+0x30a>
 80086b4:	e8df f003 	tbb	[pc, r3]
 80086b8:	59383a2d 	.word	0x59383a2d
 80086bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80086c0:	441d      	add	r5, r3
 80086c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80086c6:	2b20      	cmp	r3, #32
 80086c8:	bfc1      	itttt	gt
 80086ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80086ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80086d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80086d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80086da:	bfda      	itte	le
 80086dc:	f1c3 0320 	rsble	r3, r3, #32
 80086e0:	fa06 f003 	lslle.w	r0, r6, r3
 80086e4:	4318      	orrgt	r0, r3
 80086e6:	f7f7 ff15 	bl	8000514 <__aeabi_ui2d>
 80086ea:	2301      	movs	r3, #1
 80086ec:	4606      	mov	r6, r0
 80086ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80086f2:	3d01      	subs	r5, #1
 80086f4:	930e      	str	r3, [sp, #56]	; 0x38
 80086f6:	e76a      	b.n	80085ce <_dtoa_r+0x116>
 80086f8:	2301      	movs	r3, #1
 80086fa:	e7b2      	b.n	8008662 <_dtoa_r+0x1aa>
 80086fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80086fe:	e7b1      	b.n	8008664 <_dtoa_r+0x1ac>
 8008700:	9b04      	ldr	r3, [sp, #16]
 8008702:	9a00      	ldr	r2, [sp, #0]
 8008704:	1a9b      	subs	r3, r3, r2
 8008706:	9304      	str	r3, [sp, #16]
 8008708:	4253      	negs	r3, r2
 800870a:	9307      	str	r3, [sp, #28]
 800870c:	2300      	movs	r3, #0
 800870e:	930a      	str	r3, [sp, #40]	; 0x28
 8008710:	e7bf      	b.n	8008692 <_dtoa_r+0x1da>
 8008712:	2300      	movs	r3, #0
 8008714:	9308      	str	r3, [sp, #32]
 8008716:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008718:	2b00      	cmp	r3, #0
 800871a:	dc55      	bgt.n	80087c8 <_dtoa_r+0x310>
 800871c:	2301      	movs	r3, #1
 800871e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008722:	461a      	mov	r2, r3
 8008724:	9209      	str	r2, [sp, #36]	; 0x24
 8008726:	e00c      	b.n	8008742 <_dtoa_r+0x28a>
 8008728:	2301      	movs	r3, #1
 800872a:	e7f3      	b.n	8008714 <_dtoa_r+0x25c>
 800872c:	2300      	movs	r3, #0
 800872e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008730:	9308      	str	r3, [sp, #32]
 8008732:	9b00      	ldr	r3, [sp, #0]
 8008734:	4413      	add	r3, r2
 8008736:	9302      	str	r3, [sp, #8]
 8008738:	3301      	adds	r3, #1
 800873a:	2b01      	cmp	r3, #1
 800873c:	9303      	str	r3, [sp, #12]
 800873e:	bfb8      	it	lt
 8008740:	2301      	movlt	r3, #1
 8008742:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8008744:	2200      	movs	r2, #0
 8008746:	6042      	str	r2, [r0, #4]
 8008748:	2204      	movs	r2, #4
 800874a:	f102 0614 	add.w	r6, r2, #20
 800874e:	429e      	cmp	r6, r3
 8008750:	6841      	ldr	r1, [r0, #4]
 8008752:	d93d      	bls.n	80087d0 <_dtoa_r+0x318>
 8008754:	4620      	mov	r0, r4
 8008756:	f000 fcb7 	bl	80090c8 <_Balloc>
 800875a:	9001      	str	r0, [sp, #4]
 800875c:	2800      	cmp	r0, #0
 800875e:	d13b      	bne.n	80087d8 <_dtoa_r+0x320>
 8008760:	4b11      	ldr	r3, [pc, #68]	; (80087a8 <_dtoa_r+0x2f0>)
 8008762:	4602      	mov	r2, r0
 8008764:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008768:	e6c0      	b.n	80084ec <_dtoa_r+0x34>
 800876a:	2301      	movs	r3, #1
 800876c:	e7df      	b.n	800872e <_dtoa_r+0x276>
 800876e:	bf00      	nop
 8008770:	636f4361 	.word	0x636f4361
 8008774:	3fd287a7 	.word	0x3fd287a7
 8008778:	8b60c8b3 	.word	0x8b60c8b3
 800877c:	3fc68a28 	.word	0x3fc68a28
 8008780:	509f79fb 	.word	0x509f79fb
 8008784:	3fd34413 	.word	0x3fd34413
 8008788:	0800a90d 	.word	0x0800a90d
 800878c:	0800a924 	.word	0x0800a924
 8008790:	7ff00000 	.word	0x7ff00000
 8008794:	0800a909 	.word	0x0800a909
 8008798:	0800a900 	.word	0x0800a900
 800879c:	0800a8dd 	.word	0x0800a8dd
 80087a0:	3ff80000 	.word	0x3ff80000
 80087a4:	0800aa18 	.word	0x0800aa18
 80087a8:	0800a97f 	.word	0x0800a97f
 80087ac:	2501      	movs	r5, #1
 80087ae:	2300      	movs	r3, #0
 80087b0:	9306      	str	r3, [sp, #24]
 80087b2:	9508      	str	r5, [sp, #32]
 80087b4:	f04f 33ff 	mov.w	r3, #4294967295
 80087b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087bc:	2200      	movs	r2, #0
 80087be:	2312      	movs	r3, #18
 80087c0:	e7b0      	b.n	8008724 <_dtoa_r+0x26c>
 80087c2:	2301      	movs	r3, #1
 80087c4:	9308      	str	r3, [sp, #32]
 80087c6:	e7f5      	b.n	80087b4 <_dtoa_r+0x2fc>
 80087c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80087ce:	e7b8      	b.n	8008742 <_dtoa_r+0x28a>
 80087d0:	3101      	adds	r1, #1
 80087d2:	6041      	str	r1, [r0, #4]
 80087d4:	0052      	lsls	r2, r2, #1
 80087d6:	e7b8      	b.n	800874a <_dtoa_r+0x292>
 80087d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80087da:	9a01      	ldr	r2, [sp, #4]
 80087dc:	601a      	str	r2, [r3, #0]
 80087de:	9b03      	ldr	r3, [sp, #12]
 80087e0:	2b0e      	cmp	r3, #14
 80087e2:	f200 809d 	bhi.w	8008920 <_dtoa_r+0x468>
 80087e6:	2d00      	cmp	r5, #0
 80087e8:	f000 809a 	beq.w	8008920 <_dtoa_r+0x468>
 80087ec:	9b00      	ldr	r3, [sp, #0]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	dd32      	ble.n	8008858 <_dtoa_r+0x3a0>
 80087f2:	4ab7      	ldr	r2, [pc, #732]	; (8008ad0 <_dtoa_r+0x618>)
 80087f4:	f003 030f 	and.w	r3, r3, #15
 80087f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80087fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008800:	9b00      	ldr	r3, [sp, #0]
 8008802:	05d8      	lsls	r0, r3, #23
 8008804:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008808:	d516      	bpl.n	8008838 <_dtoa_r+0x380>
 800880a:	4bb2      	ldr	r3, [pc, #712]	; (8008ad4 <_dtoa_r+0x61c>)
 800880c:	ec51 0b19 	vmov	r0, r1, d9
 8008810:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008814:	f7f8 f822 	bl	800085c <__aeabi_ddiv>
 8008818:	f007 070f 	and.w	r7, r7, #15
 800881c:	4682      	mov	sl, r0
 800881e:	468b      	mov	fp, r1
 8008820:	2503      	movs	r5, #3
 8008822:	4eac      	ldr	r6, [pc, #688]	; (8008ad4 <_dtoa_r+0x61c>)
 8008824:	b957      	cbnz	r7, 800883c <_dtoa_r+0x384>
 8008826:	4642      	mov	r2, r8
 8008828:	464b      	mov	r3, r9
 800882a:	4650      	mov	r0, sl
 800882c:	4659      	mov	r1, fp
 800882e:	f7f8 f815 	bl	800085c <__aeabi_ddiv>
 8008832:	4682      	mov	sl, r0
 8008834:	468b      	mov	fp, r1
 8008836:	e028      	b.n	800888a <_dtoa_r+0x3d2>
 8008838:	2502      	movs	r5, #2
 800883a:	e7f2      	b.n	8008822 <_dtoa_r+0x36a>
 800883c:	07f9      	lsls	r1, r7, #31
 800883e:	d508      	bpl.n	8008852 <_dtoa_r+0x39a>
 8008840:	4640      	mov	r0, r8
 8008842:	4649      	mov	r1, r9
 8008844:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008848:	f7f7 fede 	bl	8000608 <__aeabi_dmul>
 800884c:	3501      	adds	r5, #1
 800884e:	4680      	mov	r8, r0
 8008850:	4689      	mov	r9, r1
 8008852:	107f      	asrs	r7, r7, #1
 8008854:	3608      	adds	r6, #8
 8008856:	e7e5      	b.n	8008824 <_dtoa_r+0x36c>
 8008858:	f000 809b 	beq.w	8008992 <_dtoa_r+0x4da>
 800885c:	9b00      	ldr	r3, [sp, #0]
 800885e:	4f9d      	ldr	r7, [pc, #628]	; (8008ad4 <_dtoa_r+0x61c>)
 8008860:	425e      	negs	r6, r3
 8008862:	4b9b      	ldr	r3, [pc, #620]	; (8008ad0 <_dtoa_r+0x618>)
 8008864:	f006 020f 	and.w	r2, r6, #15
 8008868:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800886c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008870:	ec51 0b19 	vmov	r0, r1, d9
 8008874:	f7f7 fec8 	bl	8000608 <__aeabi_dmul>
 8008878:	1136      	asrs	r6, r6, #4
 800887a:	4682      	mov	sl, r0
 800887c:	468b      	mov	fp, r1
 800887e:	2300      	movs	r3, #0
 8008880:	2502      	movs	r5, #2
 8008882:	2e00      	cmp	r6, #0
 8008884:	d17a      	bne.n	800897c <_dtoa_r+0x4c4>
 8008886:	2b00      	cmp	r3, #0
 8008888:	d1d3      	bne.n	8008832 <_dtoa_r+0x37a>
 800888a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800888c:	2b00      	cmp	r3, #0
 800888e:	f000 8082 	beq.w	8008996 <_dtoa_r+0x4de>
 8008892:	4b91      	ldr	r3, [pc, #580]	; (8008ad8 <_dtoa_r+0x620>)
 8008894:	2200      	movs	r2, #0
 8008896:	4650      	mov	r0, sl
 8008898:	4659      	mov	r1, fp
 800889a:	f7f8 f927 	bl	8000aec <__aeabi_dcmplt>
 800889e:	2800      	cmp	r0, #0
 80088a0:	d079      	beq.n	8008996 <_dtoa_r+0x4de>
 80088a2:	9b03      	ldr	r3, [sp, #12]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d076      	beq.n	8008996 <_dtoa_r+0x4de>
 80088a8:	9b02      	ldr	r3, [sp, #8]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	dd36      	ble.n	800891c <_dtoa_r+0x464>
 80088ae:	9b00      	ldr	r3, [sp, #0]
 80088b0:	4650      	mov	r0, sl
 80088b2:	4659      	mov	r1, fp
 80088b4:	1e5f      	subs	r7, r3, #1
 80088b6:	2200      	movs	r2, #0
 80088b8:	4b88      	ldr	r3, [pc, #544]	; (8008adc <_dtoa_r+0x624>)
 80088ba:	f7f7 fea5 	bl	8000608 <__aeabi_dmul>
 80088be:	9e02      	ldr	r6, [sp, #8]
 80088c0:	4682      	mov	sl, r0
 80088c2:	468b      	mov	fp, r1
 80088c4:	3501      	adds	r5, #1
 80088c6:	4628      	mov	r0, r5
 80088c8:	f7f7 fe34 	bl	8000534 <__aeabi_i2d>
 80088cc:	4652      	mov	r2, sl
 80088ce:	465b      	mov	r3, fp
 80088d0:	f7f7 fe9a 	bl	8000608 <__aeabi_dmul>
 80088d4:	4b82      	ldr	r3, [pc, #520]	; (8008ae0 <_dtoa_r+0x628>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	f7f7 fce0 	bl	800029c <__adddf3>
 80088dc:	46d0      	mov	r8, sl
 80088de:	46d9      	mov	r9, fp
 80088e0:	4682      	mov	sl, r0
 80088e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80088e6:	2e00      	cmp	r6, #0
 80088e8:	d158      	bne.n	800899c <_dtoa_r+0x4e4>
 80088ea:	4b7e      	ldr	r3, [pc, #504]	; (8008ae4 <_dtoa_r+0x62c>)
 80088ec:	2200      	movs	r2, #0
 80088ee:	4640      	mov	r0, r8
 80088f0:	4649      	mov	r1, r9
 80088f2:	f7f7 fcd1 	bl	8000298 <__aeabi_dsub>
 80088f6:	4652      	mov	r2, sl
 80088f8:	465b      	mov	r3, fp
 80088fa:	4680      	mov	r8, r0
 80088fc:	4689      	mov	r9, r1
 80088fe:	f7f8 f913 	bl	8000b28 <__aeabi_dcmpgt>
 8008902:	2800      	cmp	r0, #0
 8008904:	f040 8295 	bne.w	8008e32 <_dtoa_r+0x97a>
 8008908:	4652      	mov	r2, sl
 800890a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800890e:	4640      	mov	r0, r8
 8008910:	4649      	mov	r1, r9
 8008912:	f7f8 f8eb 	bl	8000aec <__aeabi_dcmplt>
 8008916:	2800      	cmp	r0, #0
 8008918:	f040 8289 	bne.w	8008e2e <_dtoa_r+0x976>
 800891c:	ec5b ab19 	vmov	sl, fp, d9
 8008920:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008922:	2b00      	cmp	r3, #0
 8008924:	f2c0 8148 	blt.w	8008bb8 <_dtoa_r+0x700>
 8008928:	9a00      	ldr	r2, [sp, #0]
 800892a:	2a0e      	cmp	r2, #14
 800892c:	f300 8144 	bgt.w	8008bb8 <_dtoa_r+0x700>
 8008930:	4b67      	ldr	r3, [pc, #412]	; (8008ad0 <_dtoa_r+0x618>)
 8008932:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008936:	e9d3 8900 	ldrd	r8, r9, [r3]
 800893a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800893c:	2b00      	cmp	r3, #0
 800893e:	f280 80d5 	bge.w	8008aec <_dtoa_r+0x634>
 8008942:	9b03      	ldr	r3, [sp, #12]
 8008944:	2b00      	cmp	r3, #0
 8008946:	f300 80d1 	bgt.w	8008aec <_dtoa_r+0x634>
 800894a:	f040 826f 	bne.w	8008e2c <_dtoa_r+0x974>
 800894e:	4b65      	ldr	r3, [pc, #404]	; (8008ae4 <_dtoa_r+0x62c>)
 8008950:	2200      	movs	r2, #0
 8008952:	4640      	mov	r0, r8
 8008954:	4649      	mov	r1, r9
 8008956:	f7f7 fe57 	bl	8000608 <__aeabi_dmul>
 800895a:	4652      	mov	r2, sl
 800895c:	465b      	mov	r3, fp
 800895e:	f7f8 f8d9 	bl	8000b14 <__aeabi_dcmpge>
 8008962:	9e03      	ldr	r6, [sp, #12]
 8008964:	4637      	mov	r7, r6
 8008966:	2800      	cmp	r0, #0
 8008968:	f040 8245 	bne.w	8008df6 <_dtoa_r+0x93e>
 800896c:	9d01      	ldr	r5, [sp, #4]
 800896e:	2331      	movs	r3, #49	; 0x31
 8008970:	f805 3b01 	strb.w	r3, [r5], #1
 8008974:	9b00      	ldr	r3, [sp, #0]
 8008976:	3301      	adds	r3, #1
 8008978:	9300      	str	r3, [sp, #0]
 800897a:	e240      	b.n	8008dfe <_dtoa_r+0x946>
 800897c:	07f2      	lsls	r2, r6, #31
 800897e:	d505      	bpl.n	800898c <_dtoa_r+0x4d4>
 8008980:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008984:	f7f7 fe40 	bl	8000608 <__aeabi_dmul>
 8008988:	3501      	adds	r5, #1
 800898a:	2301      	movs	r3, #1
 800898c:	1076      	asrs	r6, r6, #1
 800898e:	3708      	adds	r7, #8
 8008990:	e777      	b.n	8008882 <_dtoa_r+0x3ca>
 8008992:	2502      	movs	r5, #2
 8008994:	e779      	b.n	800888a <_dtoa_r+0x3d2>
 8008996:	9f00      	ldr	r7, [sp, #0]
 8008998:	9e03      	ldr	r6, [sp, #12]
 800899a:	e794      	b.n	80088c6 <_dtoa_r+0x40e>
 800899c:	9901      	ldr	r1, [sp, #4]
 800899e:	4b4c      	ldr	r3, [pc, #304]	; (8008ad0 <_dtoa_r+0x618>)
 80089a0:	4431      	add	r1, r6
 80089a2:	910d      	str	r1, [sp, #52]	; 0x34
 80089a4:	9908      	ldr	r1, [sp, #32]
 80089a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80089aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80089ae:	2900      	cmp	r1, #0
 80089b0:	d043      	beq.n	8008a3a <_dtoa_r+0x582>
 80089b2:	494d      	ldr	r1, [pc, #308]	; (8008ae8 <_dtoa_r+0x630>)
 80089b4:	2000      	movs	r0, #0
 80089b6:	f7f7 ff51 	bl	800085c <__aeabi_ddiv>
 80089ba:	4652      	mov	r2, sl
 80089bc:	465b      	mov	r3, fp
 80089be:	f7f7 fc6b 	bl	8000298 <__aeabi_dsub>
 80089c2:	9d01      	ldr	r5, [sp, #4]
 80089c4:	4682      	mov	sl, r0
 80089c6:	468b      	mov	fp, r1
 80089c8:	4649      	mov	r1, r9
 80089ca:	4640      	mov	r0, r8
 80089cc:	f7f8 f8cc 	bl	8000b68 <__aeabi_d2iz>
 80089d0:	4606      	mov	r6, r0
 80089d2:	f7f7 fdaf 	bl	8000534 <__aeabi_i2d>
 80089d6:	4602      	mov	r2, r0
 80089d8:	460b      	mov	r3, r1
 80089da:	4640      	mov	r0, r8
 80089dc:	4649      	mov	r1, r9
 80089de:	f7f7 fc5b 	bl	8000298 <__aeabi_dsub>
 80089e2:	3630      	adds	r6, #48	; 0x30
 80089e4:	f805 6b01 	strb.w	r6, [r5], #1
 80089e8:	4652      	mov	r2, sl
 80089ea:	465b      	mov	r3, fp
 80089ec:	4680      	mov	r8, r0
 80089ee:	4689      	mov	r9, r1
 80089f0:	f7f8 f87c 	bl	8000aec <__aeabi_dcmplt>
 80089f4:	2800      	cmp	r0, #0
 80089f6:	d163      	bne.n	8008ac0 <_dtoa_r+0x608>
 80089f8:	4642      	mov	r2, r8
 80089fa:	464b      	mov	r3, r9
 80089fc:	4936      	ldr	r1, [pc, #216]	; (8008ad8 <_dtoa_r+0x620>)
 80089fe:	2000      	movs	r0, #0
 8008a00:	f7f7 fc4a 	bl	8000298 <__aeabi_dsub>
 8008a04:	4652      	mov	r2, sl
 8008a06:	465b      	mov	r3, fp
 8008a08:	f7f8 f870 	bl	8000aec <__aeabi_dcmplt>
 8008a0c:	2800      	cmp	r0, #0
 8008a0e:	f040 80b5 	bne.w	8008b7c <_dtoa_r+0x6c4>
 8008a12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a14:	429d      	cmp	r5, r3
 8008a16:	d081      	beq.n	800891c <_dtoa_r+0x464>
 8008a18:	4b30      	ldr	r3, [pc, #192]	; (8008adc <_dtoa_r+0x624>)
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	4650      	mov	r0, sl
 8008a1e:	4659      	mov	r1, fp
 8008a20:	f7f7 fdf2 	bl	8000608 <__aeabi_dmul>
 8008a24:	4b2d      	ldr	r3, [pc, #180]	; (8008adc <_dtoa_r+0x624>)
 8008a26:	4682      	mov	sl, r0
 8008a28:	468b      	mov	fp, r1
 8008a2a:	4640      	mov	r0, r8
 8008a2c:	4649      	mov	r1, r9
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f7f7 fdea 	bl	8000608 <__aeabi_dmul>
 8008a34:	4680      	mov	r8, r0
 8008a36:	4689      	mov	r9, r1
 8008a38:	e7c6      	b.n	80089c8 <_dtoa_r+0x510>
 8008a3a:	4650      	mov	r0, sl
 8008a3c:	4659      	mov	r1, fp
 8008a3e:	f7f7 fde3 	bl	8000608 <__aeabi_dmul>
 8008a42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a44:	9d01      	ldr	r5, [sp, #4]
 8008a46:	930f      	str	r3, [sp, #60]	; 0x3c
 8008a48:	4682      	mov	sl, r0
 8008a4a:	468b      	mov	fp, r1
 8008a4c:	4649      	mov	r1, r9
 8008a4e:	4640      	mov	r0, r8
 8008a50:	f7f8 f88a 	bl	8000b68 <__aeabi_d2iz>
 8008a54:	4606      	mov	r6, r0
 8008a56:	f7f7 fd6d 	bl	8000534 <__aeabi_i2d>
 8008a5a:	3630      	adds	r6, #48	; 0x30
 8008a5c:	4602      	mov	r2, r0
 8008a5e:	460b      	mov	r3, r1
 8008a60:	4640      	mov	r0, r8
 8008a62:	4649      	mov	r1, r9
 8008a64:	f7f7 fc18 	bl	8000298 <__aeabi_dsub>
 8008a68:	f805 6b01 	strb.w	r6, [r5], #1
 8008a6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a6e:	429d      	cmp	r5, r3
 8008a70:	4680      	mov	r8, r0
 8008a72:	4689      	mov	r9, r1
 8008a74:	f04f 0200 	mov.w	r2, #0
 8008a78:	d124      	bne.n	8008ac4 <_dtoa_r+0x60c>
 8008a7a:	4b1b      	ldr	r3, [pc, #108]	; (8008ae8 <_dtoa_r+0x630>)
 8008a7c:	4650      	mov	r0, sl
 8008a7e:	4659      	mov	r1, fp
 8008a80:	f7f7 fc0c 	bl	800029c <__adddf3>
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	4640      	mov	r0, r8
 8008a8a:	4649      	mov	r1, r9
 8008a8c:	f7f8 f84c 	bl	8000b28 <__aeabi_dcmpgt>
 8008a90:	2800      	cmp	r0, #0
 8008a92:	d173      	bne.n	8008b7c <_dtoa_r+0x6c4>
 8008a94:	4652      	mov	r2, sl
 8008a96:	465b      	mov	r3, fp
 8008a98:	4913      	ldr	r1, [pc, #76]	; (8008ae8 <_dtoa_r+0x630>)
 8008a9a:	2000      	movs	r0, #0
 8008a9c:	f7f7 fbfc 	bl	8000298 <__aeabi_dsub>
 8008aa0:	4602      	mov	r2, r0
 8008aa2:	460b      	mov	r3, r1
 8008aa4:	4640      	mov	r0, r8
 8008aa6:	4649      	mov	r1, r9
 8008aa8:	f7f8 f820 	bl	8000aec <__aeabi_dcmplt>
 8008aac:	2800      	cmp	r0, #0
 8008aae:	f43f af35 	beq.w	800891c <_dtoa_r+0x464>
 8008ab2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8008ab4:	1e6b      	subs	r3, r5, #1
 8008ab6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008ab8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008abc:	2b30      	cmp	r3, #48	; 0x30
 8008abe:	d0f8      	beq.n	8008ab2 <_dtoa_r+0x5fa>
 8008ac0:	9700      	str	r7, [sp, #0]
 8008ac2:	e049      	b.n	8008b58 <_dtoa_r+0x6a0>
 8008ac4:	4b05      	ldr	r3, [pc, #20]	; (8008adc <_dtoa_r+0x624>)
 8008ac6:	f7f7 fd9f 	bl	8000608 <__aeabi_dmul>
 8008aca:	4680      	mov	r8, r0
 8008acc:	4689      	mov	r9, r1
 8008ace:	e7bd      	b.n	8008a4c <_dtoa_r+0x594>
 8008ad0:	0800aa18 	.word	0x0800aa18
 8008ad4:	0800a9f0 	.word	0x0800a9f0
 8008ad8:	3ff00000 	.word	0x3ff00000
 8008adc:	40240000 	.word	0x40240000
 8008ae0:	401c0000 	.word	0x401c0000
 8008ae4:	40140000 	.word	0x40140000
 8008ae8:	3fe00000 	.word	0x3fe00000
 8008aec:	9d01      	ldr	r5, [sp, #4]
 8008aee:	4656      	mov	r6, sl
 8008af0:	465f      	mov	r7, fp
 8008af2:	4642      	mov	r2, r8
 8008af4:	464b      	mov	r3, r9
 8008af6:	4630      	mov	r0, r6
 8008af8:	4639      	mov	r1, r7
 8008afa:	f7f7 feaf 	bl	800085c <__aeabi_ddiv>
 8008afe:	f7f8 f833 	bl	8000b68 <__aeabi_d2iz>
 8008b02:	4682      	mov	sl, r0
 8008b04:	f7f7 fd16 	bl	8000534 <__aeabi_i2d>
 8008b08:	4642      	mov	r2, r8
 8008b0a:	464b      	mov	r3, r9
 8008b0c:	f7f7 fd7c 	bl	8000608 <__aeabi_dmul>
 8008b10:	4602      	mov	r2, r0
 8008b12:	460b      	mov	r3, r1
 8008b14:	4630      	mov	r0, r6
 8008b16:	4639      	mov	r1, r7
 8008b18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008b1c:	f7f7 fbbc 	bl	8000298 <__aeabi_dsub>
 8008b20:	f805 6b01 	strb.w	r6, [r5], #1
 8008b24:	9e01      	ldr	r6, [sp, #4]
 8008b26:	9f03      	ldr	r7, [sp, #12]
 8008b28:	1bae      	subs	r6, r5, r6
 8008b2a:	42b7      	cmp	r7, r6
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	460b      	mov	r3, r1
 8008b30:	d135      	bne.n	8008b9e <_dtoa_r+0x6e6>
 8008b32:	f7f7 fbb3 	bl	800029c <__adddf3>
 8008b36:	4642      	mov	r2, r8
 8008b38:	464b      	mov	r3, r9
 8008b3a:	4606      	mov	r6, r0
 8008b3c:	460f      	mov	r7, r1
 8008b3e:	f7f7 fff3 	bl	8000b28 <__aeabi_dcmpgt>
 8008b42:	b9d0      	cbnz	r0, 8008b7a <_dtoa_r+0x6c2>
 8008b44:	4642      	mov	r2, r8
 8008b46:	464b      	mov	r3, r9
 8008b48:	4630      	mov	r0, r6
 8008b4a:	4639      	mov	r1, r7
 8008b4c:	f7f7 ffc4 	bl	8000ad8 <__aeabi_dcmpeq>
 8008b50:	b110      	cbz	r0, 8008b58 <_dtoa_r+0x6a0>
 8008b52:	f01a 0f01 	tst.w	sl, #1
 8008b56:	d110      	bne.n	8008b7a <_dtoa_r+0x6c2>
 8008b58:	4620      	mov	r0, r4
 8008b5a:	ee18 1a10 	vmov	r1, s16
 8008b5e:	f000 faf3 	bl	8009148 <_Bfree>
 8008b62:	2300      	movs	r3, #0
 8008b64:	9800      	ldr	r0, [sp, #0]
 8008b66:	702b      	strb	r3, [r5, #0]
 8008b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	6018      	str	r0, [r3, #0]
 8008b6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	f43f acf1 	beq.w	8008558 <_dtoa_r+0xa0>
 8008b76:	601d      	str	r5, [r3, #0]
 8008b78:	e4ee      	b.n	8008558 <_dtoa_r+0xa0>
 8008b7a:	9f00      	ldr	r7, [sp, #0]
 8008b7c:	462b      	mov	r3, r5
 8008b7e:	461d      	mov	r5, r3
 8008b80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b84:	2a39      	cmp	r2, #57	; 0x39
 8008b86:	d106      	bne.n	8008b96 <_dtoa_r+0x6de>
 8008b88:	9a01      	ldr	r2, [sp, #4]
 8008b8a:	429a      	cmp	r2, r3
 8008b8c:	d1f7      	bne.n	8008b7e <_dtoa_r+0x6c6>
 8008b8e:	9901      	ldr	r1, [sp, #4]
 8008b90:	2230      	movs	r2, #48	; 0x30
 8008b92:	3701      	adds	r7, #1
 8008b94:	700a      	strb	r2, [r1, #0]
 8008b96:	781a      	ldrb	r2, [r3, #0]
 8008b98:	3201      	adds	r2, #1
 8008b9a:	701a      	strb	r2, [r3, #0]
 8008b9c:	e790      	b.n	8008ac0 <_dtoa_r+0x608>
 8008b9e:	4ba6      	ldr	r3, [pc, #664]	; (8008e38 <_dtoa_r+0x980>)
 8008ba0:	2200      	movs	r2, #0
 8008ba2:	f7f7 fd31 	bl	8000608 <__aeabi_dmul>
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	2300      	movs	r3, #0
 8008baa:	4606      	mov	r6, r0
 8008bac:	460f      	mov	r7, r1
 8008bae:	f7f7 ff93 	bl	8000ad8 <__aeabi_dcmpeq>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d09d      	beq.n	8008af2 <_dtoa_r+0x63a>
 8008bb6:	e7cf      	b.n	8008b58 <_dtoa_r+0x6a0>
 8008bb8:	9a08      	ldr	r2, [sp, #32]
 8008bba:	2a00      	cmp	r2, #0
 8008bbc:	f000 80d7 	beq.w	8008d6e <_dtoa_r+0x8b6>
 8008bc0:	9a06      	ldr	r2, [sp, #24]
 8008bc2:	2a01      	cmp	r2, #1
 8008bc4:	f300 80ba 	bgt.w	8008d3c <_dtoa_r+0x884>
 8008bc8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bca:	2a00      	cmp	r2, #0
 8008bcc:	f000 80b2 	beq.w	8008d34 <_dtoa_r+0x87c>
 8008bd0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8008bd4:	9e07      	ldr	r6, [sp, #28]
 8008bd6:	9d04      	ldr	r5, [sp, #16]
 8008bd8:	9a04      	ldr	r2, [sp, #16]
 8008bda:	441a      	add	r2, r3
 8008bdc:	9204      	str	r2, [sp, #16]
 8008bde:	9a05      	ldr	r2, [sp, #20]
 8008be0:	2101      	movs	r1, #1
 8008be2:	441a      	add	r2, r3
 8008be4:	4620      	mov	r0, r4
 8008be6:	9205      	str	r2, [sp, #20]
 8008be8:	f000 fb66 	bl	80092b8 <__i2b>
 8008bec:	4607      	mov	r7, r0
 8008bee:	2d00      	cmp	r5, #0
 8008bf0:	dd0c      	ble.n	8008c0c <_dtoa_r+0x754>
 8008bf2:	9b05      	ldr	r3, [sp, #20]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	dd09      	ble.n	8008c0c <_dtoa_r+0x754>
 8008bf8:	42ab      	cmp	r3, r5
 8008bfa:	9a04      	ldr	r2, [sp, #16]
 8008bfc:	bfa8      	it	ge
 8008bfe:	462b      	movge	r3, r5
 8008c00:	1ad2      	subs	r2, r2, r3
 8008c02:	9204      	str	r2, [sp, #16]
 8008c04:	9a05      	ldr	r2, [sp, #20]
 8008c06:	1aed      	subs	r5, r5, r3
 8008c08:	1ad3      	subs	r3, r2, r3
 8008c0a:	9305      	str	r3, [sp, #20]
 8008c0c:	9b07      	ldr	r3, [sp, #28]
 8008c0e:	b31b      	cbz	r3, 8008c58 <_dtoa_r+0x7a0>
 8008c10:	9b08      	ldr	r3, [sp, #32]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f000 80af 	beq.w	8008d76 <_dtoa_r+0x8be>
 8008c18:	2e00      	cmp	r6, #0
 8008c1a:	dd13      	ble.n	8008c44 <_dtoa_r+0x78c>
 8008c1c:	4639      	mov	r1, r7
 8008c1e:	4632      	mov	r2, r6
 8008c20:	4620      	mov	r0, r4
 8008c22:	f000 fc09 	bl	8009438 <__pow5mult>
 8008c26:	ee18 2a10 	vmov	r2, s16
 8008c2a:	4601      	mov	r1, r0
 8008c2c:	4607      	mov	r7, r0
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f000 fb58 	bl	80092e4 <__multiply>
 8008c34:	ee18 1a10 	vmov	r1, s16
 8008c38:	4680      	mov	r8, r0
 8008c3a:	4620      	mov	r0, r4
 8008c3c:	f000 fa84 	bl	8009148 <_Bfree>
 8008c40:	ee08 8a10 	vmov	s16, r8
 8008c44:	9b07      	ldr	r3, [sp, #28]
 8008c46:	1b9a      	subs	r2, r3, r6
 8008c48:	d006      	beq.n	8008c58 <_dtoa_r+0x7a0>
 8008c4a:	ee18 1a10 	vmov	r1, s16
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f000 fbf2 	bl	8009438 <__pow5mult>
 8008c54:	ee08 0a10 	vmov	s16, r0
 8008c58:	2101      	movs	r1, #1
 8008c5a:	4620      	mov	r0, r4
 8008c5c:	f000 fb2c 	bl	80092b8 <__i2b>
 8008c60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	4606      	mov	r6, r0
 8008c66:	f340 8088 	ble.w	8008d7a <_dtoa_r+0x8c2>
 8008c6a:	461a      	mov	r2, r3
 8008c6c:	4601      	mov	r1, r0
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f000 fbe2 	bl	8009438 <__pow5mult>
 8008c74:	9b06      	ldr	r3, [sp, #24]
 8008c76:	2b01      	cmp	r3, #1
 8008c78:	4606      	mov	r6, r0
 8008c7a:	f340 8081 	ble.w	8008d80 <_dtoa_r+0x8c8>
 8008c7e:	f04f 0800 	mov.w	r8, #0
 8008c82:	6933      	ldr	r3, [r6, #16]
 8008c84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008c88:	6918      	ldr	r0, [r3, #16]
 8008c8a:	f000 fac5 	bl	8009218 <__hi0bits>
 8008c8e:	f1c0 0020 	rsb	r0, r0, #32
 8008c92:	9b05      	ldr	r3, [sp, #20]
 8008c94:	4418      	add	r0, r3
 8008c96:	f010 001f 	ands.w	r0, r0, #31
 8008c9a:	f000 8092 	beq.w	8008dc2 <_dtoa_r+0x90a>
 8008c9e:	f1c0 0320 	rsb	r3, r0, #32
 8008ca2:	2b04      	cmp	r3, #4
 8008ca4:	f340 808a 	ble.w	8008dbc <_dtoa_r+0x904>
 8008ca8:	f1c0 001c 	rsb	r0, r0, #28
 8008cac:	9b04      	ldr	r3, [sp, #16]
 8008cae:	4403      	add	r3, r0
 8008cb0:	9304      	str	r3, [sp, #16]
 8008cb2:	9b05      	ldr	r3, [sp, #20]
 8008cb4:	4403      	add	r3, r0
 8008cb6:	4405      	add	r5, r0
 8008cb8:	9305      	str	r3, [sp, #20]
 8008cba:	9b04      	ldr	r3, [sp, #16]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	dd07      	ble.n	8008cd0 <_dtoa_r+0x818>
 8008cc0:	ee18 1a10 	vmov	r1, s16
 8008cc4:	461a      	mov	r2, r3
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	f000 fc10 	bl	80094ec <__lshift>
 8008ccc:	ee08 0a10 	vmov	s16, r0
 8008cd0:	9b05      	ldr	r3, [sp, #20]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	dd05      	ble.n	8008ce2 <_dtoa_r+0x82a>
 8008cd6:	4631      	mov	r1, r6
 8008cd8:	461a      	mov	r2, r3
 8008cda:	4620      	mov	r0, r4
 8008cdc:	f000 fc06 	bl	80094ec <__lshift>
 8008ce0:	4606      	mov	r6, r0
 8008ce2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d06e      	beq.n	8008dc6 <_dtoa_r+0x90e>
 8008ce8:	ee18 0a10 	vmov	r0, s16
 8008cec:	4631      	mov	r1, r6
 8008cee:	f000 fc6d 	bl	80095cc <__mcmp>
 8008cf2:	2800      	cmp	r0, #0
 8008cf4:	da67      	bge.n	8008dc6 <_dtoa_r+0x90e>
 8008cf6:	9b00      	ldr	r3, [sp, #0]
 8008cf8:	3b01      	subs	r3, #1
 8008cfa:	ee18 1a10 	vmov	r1, s16
 8008cfe:	9300      	str	r3, [sp, #0]
 8008d00:	220a      	movs	r2, #10
 8008d02:	2300      	movs	r3, #0
 8008d04:	4620      	mov	r0, r4
 8008d06:	f000 fa41 	bl	800918c <__multadd>
 8008d0a:	9b08      	ldr	r3, [sp, #32]
 8008d0c:	ee08 0a10 	vmov	s16, r0
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	f000 81b1 	beq.w	8009078 <_dtoa_r+0xbc0>
 8008d16:	2300      	movs	r3, #0
 8008d18:	4639      	mov	r1, r7
 8008d1a:	220a      	movs	r2, #10
 8008d1c:	4620      	mov	r0, r4
 8008d1e:	f000 fa35 	bl	800918c <__multadd>
 8008d22:	9b02      	ldr	r3, [sp, #8]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	4607      	mov	r7, r0
 8008d28:	f300 808e 	bgt.w	8008e48 <_dtoa_r+0x990>
 8008d2c:	9b06      	ldr	r3, [sp, #24]
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	dc51      	bgt.n	8008dd6 <_dtoa_r+0x91e>
 8008d32:	e089      	b.n	8008e48 <_dtoa_r+0x990>
 8008d34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008d3a:	e74b      	b.n	8008bd4 <_dtoa_r+0x71c>
 8008d3c:	9b03      	ldr	r3, [sp, #12]
 8008d3e:	1e5e      	subs	r6, r3, #1
 8008d40:	9b07      	ldr	r3, [sp, #28]
 8008d42:	42b3      	cmp	r3, r6
 8008d44:	bfbf      	itttt	lt
 8008d46:	9b07      	ldrlt	r3, [sp, #28]
 8008d48:	9607      	strlt	r6, [sp, #28]
 8008d4a:	1af2      	sublt	r2, r6, r3
 8008d4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008d4e:	bfb6      	itet	lt
 8008d50:	189b      	addlt	r3, r3, r2
 8008d52:	1b9e      	subge	r6, r3, r6
 8008d54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008d56:	9b03      	ldr	r3, [sp, #12]
 8008d58:	bfb8      	it	lt
 8008d5a:	2600      	movlt	r6, #0
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	bfb7      	itett	lt
 8008d60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008d64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008d68:	1a9d      	sublt	r5, r3, r2
 8008d6a:	2300      	movlt	r3, #0
 8008d6c:	e734      	b.n	8008bd8 <_dtoa_r+0x720>
 8008d6e:	9e07      	ldr	r6, [sp, #28]
 8008d70:	9d04      	ldr	r5, [sp, #16]
 8008d72:	9f08      	ldr	r7, [sp, #32]
 8008d74:	e73b      	b.n	8008bee <_dtoa_r+0x736>
 8008d76:	9a07      	ldr	r2, [sp, #28]
 8008d78:	e767      	b.n	8008c4a <_dtoa_r+0x792>
 8008d7a:	9b06      	ldr	r3, [sp, #24]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	dc18      	bgt.n	8008db2 <_dtoa_r+0x8fa>
 8008d80:	f1ba 0f00 	cmp.w	sl, #0
 8008d84:	d115      	bne.n	8008db2 <_dtoa_r+0x8fa>
 8008d86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008d8a:	b993      	cbnz	r3, 8008db2 <_dtoa_r+0x8fa>
 8008d8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008d90:	0d1b      	lsrs	r3, r3, #20
 8008d92:	051b      	lsls	r3, r3, #20
 8008d94:	b183      	cbz	r3, 8008db8 <_dtoa_r+0x900>
 8008d96:	9b04      	ldr	r3, [sp, #16]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	9304      	str	r3, [sp, #16]
 8008d9c:	9b05      	ldr	r3, [sp, #20]
 8008d9e:	3301      	adds	r3, #1
 8008da0:	9305      	str	r3, [sp, #20]
 8008da2:	f04f 0801 	mov.w	r8, #1
 8008da6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	f47f af6a 	bne.w	8008c82 <_dtoa_r+0x7ca>
 8008dae:	2001      	movs	r0, #1
 8008db0:	e76f      	b.n	8008c92 <_dtoa_r+0x7da>
 8008db2:	f04f 0800 	mov.w	r8, #0
 8008db6:	e7f6      	b.n	8008da6 <_dtoa_r+0x8ee>
 8008db8:	4698      	mov	r8, r3
 8008dba:	e7f4      	b.n	8008da6 <_dtoa_r+0x8ee>
 8008dbc:	f43f af7d 	beq.w	8008cba <_dtoa_r+0x802>
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	301c      	adds	r0, #28
 8008dc4:	e772      	b.n	8008cac <_dtoa_r+0x7f4>
 8008dc6:	9b03      	ldr	r3, [sp, #12]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	dc37      	bgt.n	8008e3c <_dtoa_r+0x984>
 8008dcc:	9b06      	ldr	r3, [sp, #24]
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	dd34      	ble.n	8008e3c <_dtoa_r+0x984>
 8008dd2:	9b03      	ldr	r3, [sp, #12]
 8008dd4:	9302      	str	r3, [sp, #8]
 8008dd6:	9b02      	ldr	r3, [sp, #8]
 8008dd8:	b96b      	cbnz	r3, 8008df6 <_dtoa_r+0x93e>
 8008dda:	4631      	mov	r1, r6
 8008ddc:	2205      	movs	r2, #5
 8008dde:	4620      	mov	r0, r4
 8008de0:	f000 f9d4 	bl	800918c <__multadd>
 8008de4:	4601      	mov	r1, r0
 8008de6:	4606      	mov	r6, r0
 8008de8:	ee18 0a10 	vmov	r0, s16
 8008dec:	f000 fbee 	bl	80095cc <__mcmp>
 8008df0:	2800      	cmp	r0, #0
 8008df2:	f73f adbb 	bgt.w	800896c <_dtoa_r+0x4b4>
 8008df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df8:	9d01      	ldr	r5, [sp, #4]
 8008dfa:	43db      	mvns	r3, r3
 8008dfc:	9300      	str	r3, [sp, #0]
 8008dfe:	f04f 0800 	mov.w	r8, #0
 8008e02:	4631      	mov	r1, r6
 8008e04:	4620      	mov	r0, r4
 8008e06:	f000 f99f 	bl	8009148 <_Bfree>
 8008e0a:	2f00      	cmp	r7, #0
 8008e0c:	f43f aea4 	beq.w	8008b58 <_dtoa_r+0x6a0>
 8008e10:	f1b8 0f00 	cmp.w	r8, #0
 8008e14:	d005      	beq.n	8008e22 <_dtoa_r+0x96a>
 8008e16:	45b8      	cmp	r8, r7
 8008e18:	d003      	beq.n	8008e22 <_dtoa_r+0x96a>
 8008e1a:	4641      	mov	r1, r8
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f000 f993 	bl	8009148 <_Bfree>
 8008e22:	4639      	mov	r1, r7
 8008e24:	4620      	mov	r0, r4
 8008e26:	f000 f98f 	bl	8009148 <_Bfree>
 8008e2a:	e695      	b.n	8008b58 <_dtoa_r+0x6a0>
 8008e2c:	2600      	movs	r6, #0
 8008e2e:	4637      	mov	r7, r6
 8008e30:	e7e1      	b.n	8008df6 <_dtoa_r+0x93e>
 8008e32:	9700      	str	r7, [sp, #0]
 8008e34:	4637      	mov	r7, r6
 8008e36:	e599      	b.n	800896c <_dtoa_r+0x4b4>
 8008e38:	40240000 	.word	0x40240000
 8008e3c:	9b08      	ldr	r3, [sp, #32]
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	f000 80ca 	beq.w	8008fd8 <_dtoa_r+0xb20>
 8008e44:	9b03      	ldr	r3, [sp, #12]
 8008e46:	9302      	str	r3, [sp, #8]
 8008e48:	2d00      	cmp	r5, #0
 8008e4a:	dd05      	ble.n	8008e58 <_dtoa_r+0x9a0>
 8008e4c:	4639      	mov	r1, r7
 8008e4e:	462a      	mov	r2, r5
 8008e50:	4620      	mov	r0, r4
 8008e52:	f000 fb4b 	bl	80094ec <__lshift>
 8008e56:	4607      	mov	r7, r0
 8008e58:	f1b8 0f00 	cmp.w	r8, #0
 8008e5c:	d05b      	beq.n	8008f16 <_dtoa_r+0xa5e>
 8008e5e:	6879      	ldr	r1, [r7, #4]
 8008e60:	4620      	mov	r0, r4
 8008e62:	f000 f931 	bl	80090c8 <_Balloc>
 8008e66:	4605      	mov	r5, r0
 8008e68:	b928      	cbnz	r0, 8008e76 <_dtoa_r+0x9be>
 8008e6a:	4b87      	ldr	r3, [pc, #540]	; (8009088 <_dtoa_r+0xbd0>)
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008e72:	f7ff bb3b 	b.w	80084ec <_dtoa_r+0x34>
 8008e76:	693a      	ldr	r2, [r7, #16]
 8008e78:	3202      	adds	r2, #2
 8008e7a:	0092      	lsls	r2, r2, #2
 8008e7c:	f107 010c 	add.w	r1, r7, #12
 8008e80:	300c      	adds	r0, #12
 8008e82:	f000 f913 	bl	80090ac <memcpy>
 8008e86:	2201      	movs	r2, #1
 8008e88:	4629      	mov	r1, r5
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	f000 fb2e 	bl	80094ec <__lshift>
 8008e90:	9b01      	ldr	r3, [sp, #4]
 8008e92:	f103 0901 	add.w	r9, r3, #1
 8008e96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	9305      	str	r3, [sp, #20]
 8008e9e:	f00a 0301 	and.w	r3, sl, #1
 8008ea2:	46b8      	mov	r8, r7
 8008ea4:	9304      	str	r3, [sp, #16]
 8008ea6:	4607      	mov	r7, r0
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	ee18 0a10 	vmov	r0, s16
 8008eae:	f7ff fa77 	bl	80083a0 <quorem>
 8008eb2:	4641      	mov	r1, r8
 8008eb4:	9002      	str	r0, [sp, #8]
 8008eb6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008eba:	ee18 0a10 	vmov	r0, s16
 8008ebe:	f000 fb85 	bl	80095cc <__mcmp>
 8008ec2:	463a      	mov	r2, r7
 8008ec4:	9003      	str	r0, [sp, #12]
 8008ec6:	4631      	mov	r1, r6
 8008ec8:	4620      	mov	r0, r4
 8008eca:	f000 fb9b 	bl	8009604 <__mdiff>
 8008ece:	68c2      	ldr	r2, [r0, #12]
 8008ed0:	f109 3bff 	add.w	fp, r9, #4294967295
 8008ed4:	4605      	mov	r5, r0
 8008ed6:	bb02      	cbnz	r2, 8008f1a <_dtoa_r+0xa62>
 8008ed8:	4601      	mov	r1, r0
 8008eda:	ee18 0a10 	vmov	r0, s16
 8008ede:	f000 fb75 	bl	80095cc <__mcmp>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	4629      	mov	r1, r5
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	9207      	str	r2, [sp, #28]
 8008eea:	f000 f92d 	bl	8009148 <_Bfree>
 8008eee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008ef2:	ea43 0102 	orr.w	r1, r3, r2
 8008ef6:	9b04      	ldr	r3, [sp, #16]
 8008ef8:	430b      	orrs	r3, r1
 8008efa:	464d      	mov	r5, r9
 8008efc:	d10f      	bne.n	8008f1e <_dtoa_r+0xa66>
 8008efe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f02:	d02a      	beq.n	8008f5a <_dtoa_r+0xaa2>
 8008f04:	9b03      	ldr	r3, [sp, #12]
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	dd02      	ble.n	8008f10 <_dtoa_r+0xa58>
 8008f0a:	9b02      	ldr	r3, [sp, #8]
 8008f0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008f10:	f88b a000 	strb.w	sl, [fp]
 8008f14:	e775      	b.n	8008e02 <_dtoa_r+0x94a>
 8008f16:	4638      	mov	r0, r7
 8008f18:	e7ba      	b.n	8008e90 <_dtoa_r+0x9d8>
 8008f1a:	2201      	movs	r2, #1
 8008f1c:	e7e2      	b.n	8008ee4 <_dtoa_r+0xa2c>
 8008f1e:	9b03      	ldr	r3, [sp, #12]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	db04      	blt.n	8008f2e <_dtoa_r+0xa76>
 8008f24:	9906      	ldr	r1, [sp, #24]
 8008f26:	430b      	orrs	r3, r1
 8008f28:	9904      	ldr	r1, [sp, #16]
 8008f2a:	430b      	orrs	r3, r1
 8008f2c:	d122      	bne.n	8008f74 <_dtoa_r+0xabc>
 8008f2e:	2a00      	cmp	r2, #0
 8008f30:	ddee      	ble.n	8008f10 <_dtoa_r+0xa58>
 8008f32:	ee18 1a10 	vmov	r1, s16
 8008f36:	2201      	movs	r2, #1
 8008f38:	4620      	mov	r0, r4
 8008f3a:	f000 fad7 	bl	80094ec <__lshift>
 8008f3e:	4631      	mov	r1, r6
 8008f40:	ee08 0a10 	vmov	s16, r0
 8008f44:	f000 fb42 	bl	80095cc <__mcmp>
 8008f48:	2800      	cmp	r0, #0
 8008f4a:	dc03      	bgt.n	8008f54 <_dtoa_r+0xa9c>
 8008f4c:	d1e0      	bne.n	8008f10 <_dtoa_r+0xa58>
 8008f4e:	f01a 0f01 	tst.w	sl, #1
 8008f52:	d0dd      	beq.n	8008f10 <_dtoa_r+0xa58>
 8008f54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f58:	d1d7      	bne.n	8008f0a <_dtoa_r+0xa52>
 8008f5a:	2339      	movs	r3, #57	; 0x39
 8008f5c:	f88b 3000 	strb.w	r3, [fp]
 8008f60:	462b      	mov	r3, r5
 8008f62:	461d      	mov	r5, r3
 8008f64:	3b01      	subs	r3, #1
 8008f66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008f6a:	2a39      	cmp	r2, #57	; 0x39
 8008f6c:	d071      	beq.n	8009052 <_dtoa_r+0xb9a>
 8008f6e:	3201      	adds	r2, #1
 8008f70:	701a      	strb	r2, [r3, #0]
 8008f72:	e746      	b.n	8008e02 <_dtoa_r+0x94a>
 8008f74:	2a00      	cmp	r2, #0
 8008f76:	dd07      	ble.n	8008f88 <_dtoa_r+0xad0>
 8008f78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008f7c:	d0ed      	beq.n	8008f5a <_dtoa_r+0xaa2>
 8008f7e:	f10a 0301 	add.w	r3, sl, #1
 8008f82:	f88b 3000 	strb.w	r3, [fp]
 8008f86:	e73c      	b.n	8008e02 <_dtoa_r+0x94a>
 8008f88:	9b05      	ldr	r3, [sp, #20]
 8008f8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008f8e:	4599      	cmp	r9, r3
 8008f90:	d047      	beq.n	8009022 <_dtoa_r+0xb6a>
 8008f92:	ee18 1a10 	vmov	r1, s16
 8008f96:	2300      	movs	r3, #0
 8008f98:	220a      	movs	r2, #10
 8008f9a:	4620      	mov	r0, r4
 8008f9c:	f000 f8f6 	bl	800918c <__multadd>
 8008fa0:	45b8      	cmp	r8, r7
 8008fa2:	ee08 0a10 	vmov	s16, r0
 8008fa6:	f04f 0300 	mov.w	r3, #0
 8008faa:	f04f 020a 	mov.w	r2, #10
 8008fae:	4641      	mov	r1, r8
 8008fb0:	4620      	mov	r0, r4
 8008fb2:	d106      	bne.n	8008fc2 <_dtoa_r+0xb0a>
 8008fb4:	f000 f8ea 	bl	800918c <__multadd>
 8008fb8:	4680      	mov	r8, r0
 8008fba:	4607      	mov	r7, r0
 8008fbc:	f109 0901 	add.w	r9, r9, #1
 8008fc0:	e772      	b.n	8008ea8 <_dtoa_r+0x9f0>
 8008fc2:	f000 f8e3 	bl	800918c <__multadd>
 8008fc6:	4639      	mov	r1, r7
 8008fc8:	4680      	mov	r8, r0
 8008fca:	2300      	movs	r3, #0
 8008fcc:	220a      	movs	r2, #10
 8008fce:	4620      	mov	r0, r4
 8008fd0:	f000 f8dc 	bl	800918c <__multadd>
 8008fd4:	4607      	mov	r7, r0
 8008fd6:	e7f1      	b.n	8008fbc <_dtoa_r+0xb04>
 8008fd8:	9b03      	ldr	r3, [sp, #12]
 8008fda:	9302      	str	r3, [sp, #8]
 8008fdc:	9d01      	ldr	r5, [sp, #4]
 8008fde:	ee18 0a10 	vmov	r0, s16
 8008fe2:	4631      	mov	r1, r6
 8008fe4:	f7ff f9dc 	bl	80083a0 <quorem>
 8008fe8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008fec:	9b01      	ldr	r3, [sp, #4]
 8008fee:	f805 ab01 	strb.w	sl, [r5], #1
 8008ff2:	1aea      	subs	r2, r5, r3
 8008ff4:	9b02      	ldr	r3, [sp, #8]
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	dd09      	ble.n	800900e <_dtoa_r+0xb56>
 8008ffa:	ee18 1a10 	vmov	r1, s16
 8008ffe:	2300      	movs	r3, #0
 8009000:	220a      	movs	r2, #10
 8009002:	4620      	mov	r0, r4
 8009004:	f000 f8c2 	bl	800918c <__multadd>
 8009008:	ee08 0a10 	vmov	s16, r0
 800900c:	e7e7      	b.n	8008fde <_dtoa_r+0xb26>
 800900e:	9b02      	ldr	r3, [sp, #8]
 8009010:	2b00      	cmp	r3, #0
 8009012:	bfc8      	it	gt
 8009014:	461d      	movgt	r5, r3
 8009016:	9b01      	ldr	r3, [sp, #4]
 8009018:	bfd8      	it	le
 800901a:	2501      	movle	r5, #1
 800901c:	441d      	add	r5, r3
 800901e:	f04f 0800 	mov.w	r8, #0
 8009022:	ee18 1a10 	vmov	r1, s16
 8009026:	2201      	movs	r2, #1
 8009028:	4620      	mov	r0, r4
 800902a:	f000 fa5f 	bl	80094ec <__lshift>
 800902e:	4631      	mov	r1, r6
 8009030:	ee08 0a10 	vmov	s16, r0
 8009034:	f000 faca 	bl	80095cc <__mcmp>
 8009038:	2800      	cmp	r0, #0
 800903a:	dc91      	bgt.n	8008f60 <_dtoa_r+0xaa8>
 800903c:	d102      	bne.n	8009044 <_dtoa_r+0xb8c>
 800903e:	f01a 0f01 	tst.w	sl, #1
 8009042:	d18d      	bne.n	8008f60 <_dtoa_r+0xaa8>
 8009044:	462b      	mov	r3, r5
 8009046:	461d      	mov	r5, r3
 8009048:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800904c:	2a30      	cmp	r2, #48	; 0x30
 800904e:	d0fa      	beq.n	8009046 <_dtoa_r+0xb8e>
 8009050:	e6d7      	b.n	8008e02 <_dtoa_r+0x94a>
 8009052:	9a01      	ldr	r2, [sp, #4]
 8009054:	429a      	cmp	r2, r3
 8009056:	d184      	bne.n	8008f62 <_dtoa_r+0xaaa>
 8009058:	9b00      	ldr	r3, [sp, #0]
 800905a:	3301      	adds	r3, #1
 800905c:	9300      	str	r3, [sp, #0]
 800905e:	2331      	movs	r3, #49	; 0x31
 8009060:	7013      	strb	r3, [r2, #0]
 8009062:	e6ce      	b.n	8008e02 <_dtoa_r+0x94a>
 8009064:	4b09      	ldr	r3, [pc, #36]	; (800908c <_dtoa_r+0xbd4>)
 8009066:	f7ff ba95 	b.w	8008594 <_dtoa_r+0xdc>
 800906a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800906c:	2b00      	cmp	r3, #0
 800906e:	f47f aa6e 	bne.w	800854e <_dtoa_r+0x96>
 8009072:	4b07      	ldr	r3, [pc, #28]	; (8009090 <_dtoa_r+0xbd8>)
 8009074:	f7ff ba8e 	b.w	8008594 <_dtoa_r+0xdc>
 8009078:	9b02      	ldr	r3, [sp, #8]
 800907a:	2b00      	cmp	r3, #0
 800907c:	dcae      	bgt.n	8008fdc <_dtoa_r+0xb24>
 800907e:	9b06      	ldr	r3, [sp, #24]
 8009080:	2b02      	cmp	r3, #2
 8009082:	f73f aea8 	bgt.w	8008dd6 <_dtoa_r+0x91e>
 8009086:	e7a9      	b.n	8008fdc <_dtoa_r+0xb24>
 8009088:	0800a97f 	.word	0x0800a97f
 800908c:	0800a8dc 	.word	0x0800a8dc
 8009090:	0800a900 	.word	0x0800a900

08009094 <_localeconv_r>:
 8009094:	4800      	ldr	r0, [pc, #0]	; (8009098 <_localeconv_r+0x4>)
 8009096:	4770      	bx	lr
 8009098:	20000250 	.word	0x20000250

0800909c <malloc>:
 800909c:	4b02      	ldr	r3, [pc, #8]	; (80090a8 <malloc+0xc>)
 800909e:	4601      	mov	r1, r0
 80090a0:	6818      	ldr	r0, [r3, #0]
 80090a2:	f000 bc17 	b.w	80098d4 <_malloc_r>
 80090a6:	bf00      	nop
 80090a8:	200000fc 	.word	0x200000fc

080090ac <memcpy>:
 80090ac:	440a      	add	r2, r1
 80090ae:	4291      	cmp	r1, r2
 80090b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80090b4:	d100      	bne.n	80090b8 <memcpy+0xc>
 80090b6:	4770      	bx	lr
 80090b8:	b510      	push	{r4, lr}
 80090ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090c2:	4291      	cmp	r1, r2
 80090c4:	d1f9      	bne.n	80090ba <memcpy+0xe>
 80090c6:	bd10      	pop	{r4, pc}

080090c8 <_Balloc>:
 80090c8:	b570      	push	{r4, r5, r6, lr}
 80090ca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090cc:	4604      	mov	r4, r0
 80090ce:	460d      	mov	r5, r1
 80090d0:	b976      	cbnz	r6, 80090f0 <_Balloc+0x28>
 80090d2:	2010      	movs	r0, #16
 80090d4:	f7ff ffe2 	bl	800909c <malloc>
 80090d8:	4602      	mov	r2, r0
 80090da:	6260      	str	r0, [r4, #36]	; 0x24
 80090dc:	b920      	cbnz	r0, 80090e8 <_Balloc+0x20>
 80090de:	4b18      	ldr	r3, [pc, #96]	; (8009140 <_Balloc+0x78>)
 80090e0:	4818      	ldr	r0, [pc, #96]	; (8009144 <_Balloc+0x7c>)
 80090e2:	2166      	movs	r1, #102	; 0x66
 80090e4:	f000 fdd6 	bl	8009c94 <__assert_func>
 80090e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090ec:	6006      	str	r6, [r0, #0]
 80090ee:	60c6      	str	r6, [r0, #12]
 80090f0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090f2:	68f3      	ldr	r3, [r6, #12]
 80090f4:	b183      	cbz	r3, 8009118 <_Balloc+0x50>
 80090f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090fe:	b9b8      	cbnz	r0, 8009130 <_Balloc+0x68>
 8009100:	2101      	movs	r1, #1
 8009102:	fa01 f605 	lsl.w	r6, r1, r5
 8009106:	1d72      	adds	r2, r6, #5
 8009108:	0092      	lsls	r2, r2, #2
 800910a:	4620      	mov	r0, r4
 800910c:	f000 fb60 	bl	80097d0 <_calloc_r>
 8009110:	b160      	cbz	r0, 800912c <_Balloc+0x64>
 8009112:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009116:	e00e      	b.n	8009136 <_Balloc+0x6e>
 8009118:	2221      	movs	r2, #33	; 0x21
 800911a:	2104      	movs	r1, #4
 800911c:	4620      	mov	r0, r4
 800911e:	f000 fb57 	bl	80097d0 <_calloc_r>
 8009122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009124:	60f0      	str	r0, [r6, #12]
 8009126:	68db      	ldr	r3, [r3, #12]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d1e4      	bne.n	80090f6 <_Balloc+0x2e>
 800912c:	2000      	movs	r0, #0
 800912e:	bd70      	pop	{r4, r5, r6, pc}
 8009130:	6802      	ldr	r2, [r0, #0]
 8009132:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009136:	2300      	movs	r3, #0
 8009138:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800913c:	e7f7      	b.n	800912e <_Balloc+0x66>
 800913e:	bf00      	nop
 8009140:	0800a90d 	.word	0x0800a90d
 8009144:	0800a990 	.word	0x0800a990

08009148 <_Bfree>:
 8009148:	b570      	push	{r4, r5, r6, lr}
 800914a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800914c:	4605      	mov	r5, r0
 800914e:	460c      	mov	r4, r1
 8009150:	b976      	cbnz	r6, 8009170 <_Bfree+0x28>
 8009152:	2010      	movs	r0, #16
 8009154:	f7ff ffa2 	bl	800909c <malloc>
 8009158:	4602      	mov	r2, r0
 800915a:	6268      	str	r0, [r5, #36]	; 0x24
 800915c:	b920      	cbnz	r0, 8009168 <_Bfree+0x20>
 800915e:	4b09      	ldr	r3, [pc, #36]	; (8009184 <_Bfree+0x3c>)
 8009160:	4809      	ldr	r0, [pc, #36]	; (8009188 <_Bfree+0x40>)
 8009162:	218a      	movs	r1, #138	; 0x8a
 8009164:	f000 fd96 	bl	8009c94 <__assert_func>
 8009168:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800916c:	6006      	str	r6, [r0, #0]
 800916e:	60c6      	str	r6, [r0, #12]
 8009170:	b13c      	cbz	r4, 8009182 <_Bfree+0x3a>
 8009172:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009174:	6862      	ldr	r2, [r4, #4]
 8009176:	68db      	ldr	r3, [r3, #12]
 8009178:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800917c:	6021      	str	r1, [r4, #0]
 800917e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009182:	bd70      	pop	{r4, r5, r6, pc}
 8009184:	0800a90d 	.word	0x0800a90d
 8009188:	0800a990 	.word	0x0800a990

0800918c <__multadd>:
 800918c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009190:	690d      	ldr	r5, [r1, #16]
 8009192:	4607      	mov	r7, r0
 8009194:	460c      	mov	r4, r1
 8009196:	461e      	mov	r6, r3
 8009198:	f101 0c14 	add.w	ip, r1, #20
 800919c:	2000      	movs	r0, #0
 800919e:	f8dc 3000 	ldr.w	r3, [ip]
 80091a2:	b299      	uxth	r1, r3
 80091a4:	fb02 6101 	mla	r1, r2, r1, r6
 80091a8:	0c1e      	lsrs	r6, r3, #16
 80091aa:	0c0b      	lsrs	r3, r1, #16
 80091ac:	fb02 3306 	mla	r3, r2, r6, r3
 80091b0:	b289      	uxth	r1, r1
 80091b2:	3001      	adds	r0, #1
 80091b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091b8:	4285      	cmp	r5, r0
 80091ba:	f84c 1b04 	str.w	r1, [ip], #4
 80091be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091c2:	dcec      	bgt.n	800919e <__multadd+0x12>
 80091c4:	b30e      	cbz	r6, 800920a <__multadd+0x7e>
 80091c6:	68a3      	ldr	r3, [r4, #8]
 80091c8:	42ab      	cmp	r3, r5
 80091ca:	dc19      	bgt.n	8009200 <__multadd+0x74>
 80091cc:	6861      	ldr	r1, [r4, #4]
 80091ce:	4638      	mov	r0, r7
 80091d0:	3101      	adds	r1, #1
 80091d2:	f7ff ff79 	bl	80090c8 <_Balloc>
 80091d6:	4680      	mov	r8, r0
 80091d8:	b928      	cbnz	r0, 80091e6 <__multadd+0x5a>
 80091da:	4602      	mov	r2, r0
 80091dc:	4b0c      	ldr	r3, [pc, #48]	; (8009210 <__multadd+0x84>)
 80091de:	480d      	ldr	r0, [pc, #52]	; (8009214 <__multadd+0x88>)
 80091e0:	21b5      	movs	r1, #181	; 0xb5
 80091e2:	f000 fd57 	bl	8009c94 <__assert_func>
 80091e6:	6922      	ldr	r2, [r4, #16]
 80091e8:	3202      	adds	r2, #2
 80091ea:	f104 010c 	add.w	r1, r4, #12
 80091ee:	0092      	lsls	r2, r2, #2
 80091f0:	300c      	adds	r0, #12
 80091f2:	f7ff ff5b 	bl	80090ac <memcpy>
 80091f6:	4621      	mov	r1, r4
 80091f8:	4638      	mov	r0, r7
 80091fa:	f7ff ffa5 	bl	8009148 <_Bfree>
 80091fe:	4644      	mov	r4, r8
 8009200:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009204:	3501      	adds	r5, #1
 8009206:	615e      	str	r6, [r3, #20]
 8009208:	6125      	str	r5, [r4, #16]
 800920a:	4620      	mov	r0, r4
 800920c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009210:	0800a97f 	.word	0x0800a97f
 8009214:	0800a990 	.word	0x0800a990

08009218 <__hi0bits>:
 8009218:	0c03      	lsrs	r3, r0, #16
 800921a:	041b      	lsls	r3, r3, #16
 800921c:	b9d3      	cbnz	r3, 8009254 <__hi0bits+0x3c>
 800921e:	0400      	lsls	r0, r0, #16
 8009220:	2310      	movs	r3, #16
 8009222:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8009226:	bf04      	itt	eq
 8009228:	0200      	lsleq	r0, r0, #8
 800922a:	3308      	addeq	r3, #8
 800922c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009230:	bf04      	itt	eq
 8009232:	0100      	lsleq	r0, r0, #4
 8009234:	3304      	addeq	r3, #4
 8009236:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800923a:	bf04      	itt	eq
 800923c:	0080      	lsleq	r0, r0, #2
 800923e:	3302      	addeq	r3, #2
 8009240:	2800      	cmp	r0, #0
 8009242:	db05      	blt.n	8009250 <__hi0bits+0x38>
 8009244:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009248:	f103 0301 	add.w	r3, r3, #1
 800924c:	bf08      	it	eq
 800924e:	2320      	moveq	r3, #32
 8009250:	4618      	mov	r0, r3
 8009252:	4770      	bx	lr
 8009254:	2300      	movs	r3, #0
 8009256:	e7e4      	b.n	8009222 <__hi0bits+0xa>

08009258 <__lo0bits>:
 8009258:	6803      	ldr	r3, [r0, #0]
 800925a:	f013 0207 	ands.w	r2, r3, #7
 800925e:	4601      	mov	r1, r0
 8009260:	d00b      	beq.n	800927a <__lo0bits+0x22>
 8009262:	07da      	lsls	r2, r3, #31
 8009264:	d423      	bmi.n	80092ae <__lo0bits+0x56>
 8009266:	0798      	lsls	r0, r3, #30
 8009268:	bf49      	itett	mi
 800926a:	085b      	lsrmi	r3, r3, #1
 800926c:	089b      	lsrpl	r3, r3, #2
 800926e:	2001      	movmi	r0, #1
 8009270:	600b      	strmi	r3, [r1, #0]
 8009272:	bf5c      	itt	pl
 8009274:	600b      	strpl	r3, [r1, #0]
 8009276:	2002      	movpl	r0, #2
 8009278:	4770      	bx	lr
 800927a:	b298      	uxth	r0, r3
 800927c:	b9a8      	cbnz	r0, 80092aa <__lo0bits+0x52>
 800927e:	0c1b      	lsrs	r3, r3, #16
 8009280:	2010      	movs	r0, #16
 8009282:	b2da      	uxtb	r2, r3
 8009284:	b90a      	cbnz	r2, 800928a <__lo0bits+0x32>
 8009286:	3008      	adds	r0, #8
 8009288:	0a1b      	lsrs	r3, r3, #8
 800928a:	071a      	lsls	r2, r3, #28
 800928c:	bf04      	itt	eq
 800928e:	091b      	lsreq	r3, r3, #4
 8009290:	3004      	addeq	r0, #4
 8009292:	079a      	lsls	r2, r3, #30
 8009294:	bf04      	itt	eq
 8009296:	089b      	lsreq	r3, r3, #2
 8009298:	3002      	addeq	r0, #2
 800929a:	07da      	lsls	r2, r3, #31
 800929c:	d403      	bmi.n	80092a6 <__lo0bits+0x4e>
 800929e:	085b      	lsrs	r3, r3, #1
 80092a0:	f100 0001 	add.w	r0, r0, #1
 80092a4:	d005      	beq.n	80092b2 <__lo0bits+0x5a>
 80092a6:	600b      	str	r3, [r1, #0]
 80092a8:	4770      	bx	lr
 80092aa:	4610      	mov	r0, r2
 80092ac:	e7e9      	b.n	8009282 <__lo0bits+0x2a>
 80092ae:	2000      	movs	r0, #0
 80092b0:	4770      	bx	lr
 80092b2:	2020      	movs	r0, #32
 80092b4:	4770      	bx	lr
	...

080092b8 <__i2b>:
 80092b8:	b510      	push	{r4, lr}
 80092ba:	460c      	mov	r4, r1
 80092bc:	2101      	movs	r1, #1
 80092be:	f7ff ff03 	bl	80090c8 <_Balloc>
 80092c2:	4602      	mov	r2, r0
 80092c4:	b928      	cbnz	r0, 80092d2 <__i2b+0x1a>
 80092c6:	4b05      	ldr	r3, [pc, #20]	; (80092dc <__i2b+0x24>)
 80092c8:	4805      	ldr	r0, [pc, #20]	; (80092e0 <__i2b+0x28>)
 80092ca:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80092ce:	f000 fce1 	bl	8009c94 <__assert_func>
 80092d2:	2301      	movs	r3, #1
 80092d4:	6144      	str	r4, [r0, #20]
 80092d6:	6103      	str	r3, [r0, #16]
 80092d8:	bd10      	pop	{r4, pc}
 80092da:	bf00      	nop
 80092dc:	0800a97f 	.word	0x0800a97f
 80092e0:	0800a990 	.word	0x0800a990

080092e4 <__multiply>:
 80092e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e8:	4691      	mov	r9, r2
 80092ea:	690a      	ldr	r2, [r1, #16]
 80092ec:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092f0:	429a      	cmp	r2, r3
 80092f2:	bfb8      	it	lt
 80092f4:	460b      	movlt	r3, r1
 80092f6:	460c      	mov	r4, r1
 80092f8:	bfbc      	itt	lt
 80092fa:	464c      	movlt	r4, r9
 80092fc:	4699      	movlt	r9, r3
 80092fe:	6927      	ldr	r7, [r4, #16]
 8009300:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009304:	68a3      	ldr	r3, [r4, #8]
 8009306:	6861      	ldr	r1, [r4, #4]
 8009308:	eb07 060a 	add.w	r6, r7, sl
 800930c:	42b3      	cmp	r3, r6
 800930e:	b085      	sub	sp, #20
 8009310:	bfb8      	it	lt
 8009312:	3101      	addlt	r1, #1
 8009314:	f7ff fed8 	bl	80090c8 <_Balloc>
 8009318:	b930      	cbnz	r0, 8009328 <__multiply+0x44>
 800931a:	4602      	mov	r2, r0
 800931c:	4b44      	ldr	r3, [pc, #272]	; (8009430 <__multiply+0x14c>)
 800931e:	4845      	ldr	r0, [pc, #276]	; (8009434 <__multiply+0x150>)
 8009320:	f240 115d 	movw	r1, #349	; 0x15d
 8009324:	f000 fcb6 	bl	8009c94 <__assert_func>
 8009328:	f100 0514 	add.w	r5, r0, #20
 800932c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009330:	462b      	mov	r3, r5
 8009332:	2200      	movs	r2, #0
 8009334:	4543      	cmp	r3, r8
 8009336:	d321      	bcc.n	800937c <__multiply+0x98>
 8009338:	f104 0314 	add.w	r3, r4, #20
 800933c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009340:	f109 0314 	add.w	r3, r9, #20
 8009344:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009348:	9202      	str	r2, [sp, #8]
 800934a:	1b3a      	subs	r2, r7, r4
 800934c:	3a15      	subs	r2, #21
 800934e:	f022 0203 	bic.w	r2, r2, #3
 8009352:	3204      	adds	r2, #4
 8009354:	f104 0115 	add.w	r1, r4, #21
 8009358:	428f      	cmp	r7, r1
 800935a:	bf38      	it	cc
 800935c:	2204      	movcc	r2, #4
 800935e:	9201      	str	r2, [sp, #4]
 8009360:	9a02      	ldr	r2, [sp, #8]
 8009362:	9303      	str	r3, [sp, #12]
 8009364:	429a      	cmp	r2, r3
 8009366:	d80c      	bhi.n	8009382 <__multiply+0x9e>
 8009368:	2e00      	cmp	r6, #0
 800936a:	dd03      	ble.n	8009374 <__multiply+0x90>
 800936c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009370:	2b00      	cmp	r3, #0
 8009372:	d05a      	beq.n	800942a <__multiply+0x146>
 8009374:	6106      	str	r6, [r0, #16]
 8009376:	b005      	add	sp, #20
 8009378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800937c:	f843 2b04 	str.w	r2, [r3], #4
 8009380:	e7d8      	b.n	8009334 <__multiply+0x50>
 8009382:	f8b3 a000 	ldrh.w	sl, [r3]
 8009386:	f1ba 0f00 	cmp.w	sl, #0
 800938a:	d024      	beq.n	80093d6 <__multiply+0xf2>
 800938c:	f104 0e14 	add.w	lr, r4, #20
 8009390:	46a9      	mov	r9, r5
 8009392:	f04f 0c00 	mov.w	ip, #0
 8009396:	f85e 2b04 	ldr.w	r2, [lr], #4
 800939a:	f8d9 1000 	ldr.w	r1, [r9]
 800939e:	fa1f fb82 	uxth.w	fp, r2
 80093a2:	b289      	uxth	r1, r1
 80093a4:	fb0a 110b 	mla	r1, sl, fp, r1
 80093a8:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80093ac:	f8d9 2000 	ldr.w	r2, [r9]
 80093b0:	4461      	add	r1, ip
 80093b2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093b6:	fb0a c20b 	mla	r2, sl, fp, ip
 80093ba:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80093be:	b289      	uxth	r1, r1
 80093c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093c4:	4577      	cmp	r7, lr
 80093c6:	f849 1b04 	str.w	r1, [r9], #4
 80093ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093ce:	d8e2      	bhi.n	8009396 <__multiply+0xb2>
 80093d0:	9a01      	ldr	r2, [sp, #4]
 80093d2:	f845 c002 	str.w	ip, [r5, r2]
 80093d6:	9a03      	ldr	r2, [sp, #12]
 80093d8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093dc:	3304      	adds	r3, #4
 80093de:	f1b9 0f00 	cmp.w	r9, #0
 80093e2:	d020      	beq.n	8009426 <__multiply+0x142>
 80093e4:	6829      	ldr	r1, [r5, #0]
 80093e6:	f104 0c14 	add.w	ip, r4, #20
 80093ea:	46ae      	mov	lr, r5
 80093ec:	f04f 0a00 	mov.w	sl, #0
 80093f0:	f8bc b000 	ldrh.w	fp, [ip]
 80093f4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80093f8:	fb09 220b 	mla	r2, r9, fp, r2
 80093fc:	4492      	add	sl, r2
 80093fe:	b289      	uxth	r1, r1
 8009400:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009404:	f84e 1b04 	str.w	r1, [lr], #4
 8009408:	f85c 2b04 	ldr.w	r2, [ip], #4
 800940c:	f8be 1000 	ldrh.w	r1, [lr]
 8009410:	0c12      	lsrs	r2, r2, #16
 8009412:	fb09 1102 	mla	r1, r9, r2, r1
 8009416:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800941a:	4567      	cmp	r7, ip
 800941c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009420:	d8e6      	bhi.n	80093f0 <__multiply+0x10c>
 8009422:	9a01      	ldr	r2, [sp, #4]
 8009424:	50a9      	str	r1, [r5, r2]
 8009426:	3504      	adds	r5, #4
 8009428:	e79a      	b.n	8009360 <__multiply+0x7c>
 800942a:	3e01      	subs	r6, #1
 800942c:	e79c      	b.n	8009368 <__multiply+0x84>
 800942e:	bf00      	nop
 8009430:	0800a97f 	.word	0x0800a97f
 8009434:	0800a990 	.word	0x0800a990

08009438 <__pow5mult>:
 8009438:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800943c:	4615      	mov	r5, r2
 800943e:	f012 0203 	ands.w	r2, r2, #3
 8009442:	4606      	mov	r6, r0
 8009444:	460f      	mov	r7, r1
 8009446:	d007      	beq.n	8009458 <__pow5mult+0x20>
 8009448:	4c25      	ldr	r4, [pc, #148]	; (80094e0 <__pow5mult+0xa8>)
 800944a:	3a01      	subs	r2, #1
 800944c:	2300      	movs	r3, #0
 800944e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009452:	f7ff fe9b 	bl	800918c <__multadd>
 8009456:	4607      	mov	r7, r0
 8009458:	10ad      	asrs	r5, r5, #2
 800945a:	d03d      	beq.n	80094d8 <__pow5mult+0xa0>
 800945c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800945e:	b97c      	cbnz	r4, 8009480 <__pow5mult+0x48>
 8009460:	2010      	movs	r0, #16
 8009462:	f7ff fe1b 	bl	800909c <malloc>
 8009466:	4602      	mov	r2, r0
 8009468:	6270      	str	r0, [r6, #36]	; 0x24
 800946a:	b928      	cbnz	r0, 8009478 <__pow5mult+0x40>
 800946c:	4b1d      	ldr	r3, [pc, #116]	; (80094e4 <__pow5mult+0xac>)
 800946e:	481e      	ldr	r0, [pc, #120]	; (80094e8 <__pow5mult+0xb0>)
 8009470:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009474:	f000 fc0e 	bl	8009c94 <__assert_func>
 8009478:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800947c:	6004      	str	r4, [r0, #0]
 800947e:	60c4      	str	r4, [r0, #12]
 8009480:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009484:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009488:	b94c      	cbnz	r4, 800949e <__pow5mult+0x66>
 800948a:	f240 2171 	movw	r1, #625	; 0x271
 800948e:	4630      	mov	r0, r6
 8009490:	f7ff ff12 	bl	80092b8 <__i2b>
 8009494:	2300      	movs	r3, #0
 8009496:	f8c8 0008 	str.w	r0, [r8, #8]
 800949a:	4604      	mov	r4, r0
 800949c:	6003      	str	r3, [r0, #0]
 800949e:	f04f 0900 	mov.w	r9, #0
 80094a2:	07eb      	lsls	r3, r5, #31
 80094a4:	d50a      	bpl.n	80094bc <__pow5mult+0x84>
 80094a6:	4639      	mov	r1, r7
 80094a8:	4622      	mov	r2, r4
 80094aa:	4630      	mov	r0, r6
 80094ac:	f7ff ff1a 	bl	80092e4 <__multiply>
 80094b0:	4639      	mov	r1, r7
 80094b2:	4680      	mov	r8, r0
 80094b4:	4630      	mov	r0, r6
 80094b6:	f7ff fe47 	bl	8009148 <_Bfree>
 80094ba:	4647      	mov	r7, r8
 80094bc:	106d      	asrs	r5, r5, #1
 80094be:	d00b      	beq.n	80094d8 <__pow5mult+0xa0>
 80094c0:	6820      	ldr	r0, [r4, #0]
 80094c2:	b938      	cbnz	r0, 80094d4 <__pow5mult+0x9c>
 80094c4:	4622      	mov	r2, r4
 80094c6:	4621      	mov	r1, r4
 80094c8:	4630      	mov	r0, r6
 80094ca:	f7ff ff0b 	bl	80092e4 <__multiply>
 80094ce:	6020      	str	r0, [r4, #0]
 80094d0:	f8c0 9000 	str.w	r9, [r0]
 80094d4:	4604      	mov	r4, r0
 80094d6:	e7e4      	b.n	80094a2 <__pow5mult+0x6a>
 80094d8:	4638      	mov	r0, r7
 80094da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094de:	bf00      	nop
 80094e0:	0800aae0 	.word	0x0800aae0
 80094e4:	0800a90d 	.word	0x0800a90d
 80094e8:	0800a990 	.word	0x0800a990

080094ec <__lshift>:
 80094ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094f0:	460c      	mov	r4, r1
 80094f2:	6849      	ldr	r1, [r1, #4]
 80094f4:	6923      	ldr	r3, [r4, #16]
 80094f6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094fa:	68a3      	ldr	r3, [r4, #8]
 80094fc:	4607      	mov	r7, r0
 80094fe:	4691      	mov	r9, r2
 8009500:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009504:	f108 0601 	add.w	r6, r8, #1
 8009508:	42b3      	cmp	r3, r6
 800950a:	db0b      	blt.n	8009524 <__lshift+0x38>
 800950c:	4638      	mov	r0, r7
 800950e:	f7ff fddb 	bl	80090c8 <_Balloc>
 8009512:	4605      	mov	r5, r0
 8009514:	b948      	cbnz	r0, 800952a <__lshift+0x3e>
 8009516:	4602      	mov	r2, r0
 8009518:	4b2a      	ldr	r3, [pc, #168]	; (80095c4 <__lshift+0xd8>)
 800951a:	482b      	ldr	r0, [pc, #172]	; (80095c8 <__lshift+0xdc>)
 800951c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009520:	f000 fbb8 	bl	8009c94 <__assert_func>
 8009524:	3101      	adds	r1, #1
 8009526:	005b      	lsls	r3, r3, #1
 8009528:	e7ee      	b.n	8009508 <__lshift+0x1c>
 800952a:	2300      	movs	r3, #0
 800952c:	f100 0114 	add.w	r1, r0, #20
 8009530:	f100 0210 	add.w	r2, r0, #16
 8009534:	4618      	mov	r0, r3
 8009536:	4553      	cmp	r3, sl
 8009538:	db37      	blt.n	80095aa <__lshift+0xbe>
 800953a:	6920      	ldr	r0, [r4, #16]
 800953c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009540:	f104 0314 	add.w	r3, r4, #20
 8009544:	f019 091f 	ands.w	r9, r9, #31
 8009548:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800954c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009550:	d02f      	beq.n	80095b2 <__lshift+0xc6>
 8009552:	f1c9 0e20 	rsb	lr, r9, #32
 8009556:	468a      	mov	sl, r1
 8009558:	f04f 0c00 	mov.w	ip, #0
 800955c:	681a      	ldr	r2, [r3, #0]
 800955e:	fa02 f209 	lsl.w	r2, r2, r9
 8009562:	ea42 020c 	orr.w	r2, r2, ip
 8009566:	f84a 2b04 	str.w	r2, [sl], #4
 800956a:	f853 2b04 	ldr.w	r2, [r3], #4
 800956e:	4298      	cmp	r0, r3
 8009570:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009574:	d8f2      	bhi.n	800955c <__lshift+0x70>
 8009576:	1b03      	subs	r3, r0, r4
 8009578:	3b15      	subs	r3, #21
 800957a:	f023 0303 	bic.w	r3, r3, #3
 800957e:	3304      	adds	r3, #4
 8009580:	f104 0215 	add.w	r2, r4, #21
 8009584:	4290      	cmp	r0, r2
 8009586:	bf38      	it	cc
 8009588:	2304      	movcc	r3, #4
 800958a:	f841 c003 	str.w	ip, [r1, r3]
 800958e:	f1bc 0f00 	cmp.w	ip, #0
 8009592:	d001      	beq.n	8009598 <__lshift+0xac>
 8009594:	f108 0602 	add.w	r6, r8, #2
 8009598:	3e01      	subs	r6, #1
 800959a:	4638      	mov	r0, r7
 800959c:	612e      	str	r6, [r5, #16]
 800959e:	4621      	mov	r1, r4
 80095a0:	f7ff fdd2 	bl	8009148 <_Bfree>
 80095a4:	4628      	mov	r0, r5
 80095a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80095ae:	3301      	adds	r3, #1
 80095b0:	e7c1      	b.n	8009536 <__lshift+0x4a>
 80095b2:	3904      	subs	r1, #4
 80095b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80095b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80095bc:	4298      	cmp	r0, r3
 80095be:	d8f9      	bhi.n	80095b4 <__lshift+0xc8>
 80095c0:	e7ea      	b.n	8009598 <__lshift+0xac>
 80095c2:	bf00      	nop
 80095c4:	0800a97f 	.word	0x0800a97f
 80095c8:	0800a990 	.word	0x0800a990

080095cc <__mcmp>:
 80095cc:	b530      	push	{r4, r5, lr}
 80095ce:	6902      	ldr	r2, [r0, #16]
 80095d0:	690c      	ldr	r4, [r1, #16]
 80095d2:	1b12      	subs	r2, r2, r4
 80095d4:	d10e      	bne.n	80095f4 <__mcmp+0x28>
 80095d6:	f100 0314 	add.w	r3, r0, #20
 80095da:	3114      	adds	r1, #20
 80095dc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80095e0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80095e4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80095e8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095ec:	42a5      	cmp	r5, r4
 80095ee:	d003      	beq.n	80095f8 <__mcmp+0x2c>
 80095f0:	d305      	bcc.n	80095fe <__mcmp+0x32>
 80095f2:	2201      	movs	r2, #1
 80095f4:	4610      	mov	r0, r2
 80095f6:	bd30      	pop	{r4, r5, pc}
 80095f8:	4283      	cmp	r3, r0
 80095fa:	d3f3      	bcc.n	80095e4 <__mcmp+0x18>
 80095fc:	e7fa      	b.n	80095f4 <__mcmp+0x28>
 80095fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009602:	e7f7      	b.n	80095f4 <__mcmp+0x28>

08009604 <__mdiff>:
 8009604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009608:	460c      	mov	r4, r1
 800960a:	4606      	mov	r6, r0
 800960c:	4611      	mov	r1, r2
 800960e:	4620      	mov	r0, r4
 8009610:	4690      	mov	r8, r2
 8009612:	f7ff ffdb 	bl	80095cc <__mcmp>
 8009616:	1e05      	subs	r5, r0, #0
 8009618:	d110      	bne.n	800963c <__mdiff+0x38>
 800961a:	4629      	mov	r1, r5
 800961c:	4630      	mov	r0, r6
 800961e:	f7ff fd53 	bl	80090c8 <_Balloc>
 8009622:	b930      	cbnz	r0, 8009632 <__mdiff+0x2e>
 8009624:	4b3a      	ldr	r3, [pc, #232]	; (8009710 <__mdiff+0x10c>)
 8009626:	4602      	mov	r2, r0
 8009628:	f240 2132 	movw	r1, #562	; 0x232
 800962c:	4839      	ldr	r0, [pc, #228]	; (8009714 <__mdiff+0x110>)
 800962e:	f000 fb31 	bl	8009c94 <__assert_func>
 8009632:	2301      	movs	r3, #1
 8009634:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009638:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800963c:	bfa4      	itt	ge
 800963e:	4643      	movge	r3, r8
 8009640:	46a0      	movge	r8, r4
 8009642:	4630      	mov	r0, r6
 8009644:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009648:	bfa6      	itte	ge
 800964a:	461c      	movge	r4, r3
 800964c:	2500      	movge	r5, #0
 800964e:	2501      	movlt	r5, #1
 8009650:	f7ff fd3a 	bl	80090c8 <_Balloc>
 8009654:	b920      	cbnz	r0, 8009660 <__mdiff+0x5c>
 8009656:	4b2e      	ldr	r3, [pc, #184]	; (8009710 <__mdiff+0x10c>)
 8009658:	4602      	mov	r2, r0
 800965a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800965e:	e7e5      	b.n	800962c <__mdiff+0x28>
 8009660:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8009664:	6926      	ldr	r6, [r4, #16]
 8009666:	60c5      	str	r5, [r0, #12]
 8009668:	f104 0914 	add.w	r9, r4, #20
 800966c:	f108 0514 	add.w	r5, r8, #20
 8009670:	f100 0e14 	add.w	lr, r0, #20
 8009674:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009678:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800967c:	f108 0210 	add.w	r2, r8, #16
 8009680:	46f2      	mov	sl, lr
 8009682:	2100      	movs	r1, #0
 8009684:	f859 3b04 	ldr.w	r3, [r9], #4
 8009688:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800968c:	fa1f f883 	uxth.w	r8, r3
 8009690:	fa11 f18b 	uxtah	r1, r1, fp
 8009694:	0c1b      	lsrs	r3, r3, #16
 8009696:	eba1 0808 	sub.w	r8, r1, r8
 800969a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800969e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80096a2:	fa1f f888 	uxth.w	r8, r8
 80096a6:	1419      	asrs	r1, r3, #16
 80096a8:	454e      	cmp	r6, r9
 80096aa:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80096ae:	f84a 3b04 	str.w	r3, [sl], #4
 80096b2:	d8e7      	bhi.n	8009684 <__mdiff+0x80>
 80096b4:	1b33      	subs	r3, r6, r4
 80096b6:	3b15      	subs	r3, #21
 80096b8:	f023 0303 	bic.w	r3, r3, #3
 80096bc:	3304      	adds	r3, #4
 80096be:	3415      	adds	r4, #21
 80096c0:	42a6      	cmp	r6, r4
 80096c2:	bf38      	it	cc
 80096c4:	2304      	movcc	r3, #4
 80096c6:	441d      	add	r5, r3
 80096c8:	4473      	add	r3, lr
 80096ca:	469e      	mov	lr, r3
 80096cc:	462e      	mov	r6, r5
 80096ce:	4566      	cmp	r6, ip
 80096d0:	d30e      	bcc.n	80096f0 <__mdiff+0xec>
 80096d2:	f10c 0203 	add.w	r2, ip, #3
 80096d6:	1b52      	subs	r2, r2, r5
 80096d8:	f022 0203 	bic.w	r2, r2, #3
 80096dc:	3d03      	subs	r5, #3
 80096de:	45ac      	cmp	ip, r5
 80096e0:	bf38      	it	cc
 80096e2:	2200      	movcc	r2, #0
 80096e4:	441a      	add	r2, r3
 80096e6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80096ea:	b17b      	cbz	r3, 800970c <__mdiff+0x108>
 80096ec:	6107      	str	r7, [r0, #16]
 80096ee:	e7a3      	b.n	8009638 <__mdiff+0x34>
 80096f0:	f856 8b04 	ldr.w	r8, [r6], #4
 80096f4:	fa11 f288 	uxtah	r2, r1, r8
 80096f8:	1414      	asrs	r4, r2, #16
 80096fa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80096fe:	b292      	uxth	r2, r2
 8009700:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009704:	f84e 2b04 	str.w	r2, [lr], #4
 8009708:	1421      	asrs	r1, r4, #16
 800970a:	e7e0      	b.n	80096ce <__mdiff+0xca>
 800970c:	3f01      	subs	r7, #1
 800970e:	e7ea      	b.n	80096e6 <__mdiff+0xe2>
 8009710:	0800a97f 	.word	0x0800a97f
 8009714:	0800a990 	.word	0x0800a990

08009718 <__d2b>:
 8009718:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800971c:	4689      	mov	r9, r1
 800971e:	2101      	movs	r1, #1
 8009720:	ec57 6b10 	vmov	r6, r7, d0
 8009724:	4690      	mov	r8, r2
 8009726:	f7ff fccf 	bl	80090c8 <_Balloc>
 800972a:	4604      	mov	r4, r0
 800972c:	b930      	cbnz	r0, 800973c <__d2b+0x24>
 800972e:	4602      	mov	r2, r0
 8009730:	4b25      	ldr	r3, [pc, #148]	; (80097c8 <__d2b+0xb0>)
 8009732:	4826      	ldr	r0, [pc, #152]	; (80097cc <__d2b+0xb4>)
 8009734:	f240 310a 	movw	r1, #778	; 0x30a
 8009738:	f000 faac 	bl	8009c94 <__assert_func>
 800973c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009740:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009744:	bb35      	cbnz	r5, 8009794 <__d2b+0x7c>
 8009746:	2e00      	cmp	r6, #0
 8009748:	9301      	str	r3, [sp, #4]
 800974a:	d028      	beq.n	800979e <__d2b+0x86>
 800974c:	4668      	mov	r0, sp
 800974e:	9600      	str	r6, [sp, #0]
 8009750:	f7ff fd82 	bl	8009258 <__lo0bits>
 8009754:	9900      	ldr	r1, [sp, #0]
 8009756:	b300      	cbz	r0, 800979a <__d2b+0x82>
 8009758:	9a01      	ldr	r2, [sp, #4]
 800975a:	f1c0 0320 	rsb	r3, r0, #32
 800975e:	fa02 f303 	lsl.w	r3, r2, r3
 8009762:	430b      	orrs	r3, r1
 8009764:	40c2      	lsrs	r2, r0
 8009766:	6163      	str	r3, [r4, #20]
 8009768:	9201      	str	r2, [sp, #4]
 800976a:	9b01      	ldr	r3, [sp, #4]
 800976c:	61a3      	str	r3, [r4, #24]
 800976e:	2b00      	cmp	r3, #0
 8009770:	bf14      	ite	ne
 8009772:	2202      	movne	r2, #2
 8009774:	2201      	moveq	r2, #1
 8009776:	6122      	str	r2, [r4, #16]
 8009778:	b1d5      	cbz	r5, 80097b0 <__d2b+0x98>
 800977a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800977e:	4405      	add	r5, r0
 8009780:	f8c9 5000 	str.w	r5, [r9]
 8009784:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009788:	f8c8 0000 	str.w	r0, [r8]
 800978c:	4620      	mov	r0, r4
 800978e:	b003      	add	sp, #12
 8009790:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009794:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009798:	e7d5      	b.n	8009746 <__d2b+0x2e>
 800979a:	6161      	str	r1, [r4, #20]
 800979c:	e7e5      	b.n	800976a <__d2b+0x52>
 800979e:	a801      	add	r0, sp, #4
 80097a0:	f7ff fd5a 	bl	8009258 <__lo0bits>
 80097a4:	9b01      	ldr	r3, [sp, #4]
 80097a6:	6163      	str	r3, [r4, #20]
 80097a8:	2201      	movs	r2, #1
 80097aa:	6122      	str	r2, [r4, #16]
 80097ac:	3020      	adds	r0, #32
 80097ae:	e7e3      	b.n	8009778 <__d2b+0x60>
 80097b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80097b8:	f8c9 0000 	str.w	r0, [r9]
 80097bc:	6918      	ldr	r0, [r3, #16]
 80097be:	f7ff fd2b 	bl	8009218 <__hi0bits>
 80097c2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097c6:	e7df      	b.n	8009788 <__d2b+0x70>
 80097c8:	0800a97f 	.word	0x0800a97f
 80097cc:	0800a990 	.word	0x0800a990

080097d0 <_calloc_r>:
 80097d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097d2:	fba1 2402 	umull	r2, r4, r1, r2
 80097d6:	b94c      	cbnz	r4, 80097ec <_calloc_r+0x1c>
 80097d8:	4611      	mov	r1, r2
 80097da:	9201      	str	r2, [sp, #4]
 80097dc:	f000 f87a 	bl	80098d4 <_malloc_r>
 80097e0:	9a01      	ldr	r2, [sp, #4]
 80097e2:	4605      	mov	r5, r0
 80097e4:	b930      	cbnz	r0, 80097f4 <_calloc_r+0x24>
 80097e6:	4628      	mov	r0, r5
 80097e8:	b003      	add	sp, #12
 80097ea:	bd30      	pop	{r4, r5, pc}
 80097ec:	220c      	movs	r2, #12
 80097ee:	6002      	str	r2, [r0, #0]
 80097f0:	2500      	movs	r5, #0
 80097f2:	e7f8      	b.n	80097e6 <_calloc_r+0x16>
 80097f4:	4621      	mov	r1, r4
 80097f6:	f7fe f941 	bl	8007a7c <memset>
 80097fa:	e7f4      	b.n	80097e6 <_calloc_r+0x16>

080097fc <_free_r>:
 80097fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097fe:	2900      	cmp	r1, #0
 8009800:	d044      	beq.n	800988c <_free_r+0x90>
 8009802:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009806:	9001      	str	r0, [sp, #4]
 8009808:	2b00      	cmp	r3, #0
 800980a:	f1a1 0404 	sub.w	r4, r1, #4
 800980e:	bfb8      	it	lt
 8009810:	18e4      	addlt	r4, r4, r3
 8009812:	f000 fa9b 	bl	8009d4c <__malloc_lock>
 8009816:	4a1e      	ldr	r2, [pc, #120]	; (8009890 <_free_r+0x94>)
 8009818:	9801      	ldr	r0, [sp, #4]
 800981a:	6813      	ldr	r3, [r2, #0]
 800981c:	b933      	cbnz	r3, 800982c <_free_r+0x30>
 800981e:	6063      	str	r3, [r4, #4]
 8009820:	6014      	str	r4, [r2, #0]
 8009822:	b003      	add	sp, #12
 8009824:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009828:	f000 ba96 	b.w	8009d58 <__malloc_unlock>
 800982c:	42a3      	cmp	r3, r4
 800982e:	d908      	bls.n	8009842 <_free_r+0x46>
 8009830:	6825      	ldr	r5, [r4, #0]
 8009832:	1961      	adds	r1, r4, r5
 8009834:	428b      	cmp	r3, r1
 8009836:	bf01      	itttt	eq
 8009838:	6819      	ldreq	r1, [r3, #0]
 800983a:	685b      	ldreq	r3, [r3, #4]
 800983c:	1949      	addeq	r1, r1, r5
 800983e:	6021      	streq	r1, [r4, #0]
 8009840:	e7ed      	b.n	800981e <_free_r+0x22>
 8009842:	461a      	mov	r2, r3
 8009844:	685b      	ldr	r3, [r3, #4]
 8009846:	b10b      	cbz	r3, 800984c <_free_r+0x50>
 8009848:	42a3      	cmp	r3, r4
 800984a:	d9fa      	bls.n	8009842 <_free_r+0x46>
 800984c:	6811      	ldr	r1, [r2, #0]
 800984e:	1855      	adds	r5, r2, r1
 8009850:	42a5      	cmp	r5, r4
 8009852:	d10b      	bne.n	800986c <_free_r+0x70>
 8009854:	6824      	ldr	r4, [r4, #0]
 8009856:	4421      	add	r1, r4
 8009858:	1854      	adds	r4, r2, r1
 800985a:	42a3      	cmp	r3, r4
 800985c:	6011      	str	r1, [r2, #0]
 800985e:	d1e0      	bne.n	8009822 <_free_r+0x26>
 8009860:	681c      	ldr	r4, [r3, #0]
 8009862:	685b      	ldr	r3, [r3, #4]
 8009864:	6053      	str	r3, [r2, #4]
 8009866:	4421      	add	r1, r4
 8009868:	6011      	str	r1, [r2, #0]
 800986a:	e7da      	b.n	8009822 <_free_r+0x26>
 800986c:	d902      	bls.n	8009874 <_free_r+0x78>
 800986e:	230c      	movs	r3, #12
 8009870:	6003      	str	r3, [r0, #0]
 8009872:	e7d6      	b.n	8009822 <_free_r+0x26>
 8009874:	6825      	ldr	r5, [r4, #0]
 8009876:	1961      	adds	r1, r4, r5
 8009878:	428b      	cmp	r3, r1
 800987a:	bf04      	itt	eq
 800987c:	6819      	ldreq	r1, [r3, #0]
 800987e:	685b      	ldreq	r3, [r3, #4]
 8009880:	6063      	str	r3, [r4, #4]
 8009882:	bf04      	itt	eq
 8009884:	1949      	addeq	r1, r1, r5
 8009886:	6021      	streq	r1, [r4, #0]
 8009888:	6054      	str	r4, [r2, #4]
 800988a:	e7ca      	b.n	8009822 <_free_r+0x26>
 800988c:	b003      	add	sp, #12
 800988e:	bd30      	pop	{r4, r5, pc}
 8009890:	20001f00 	.word	0x20001f00

08009894 <sbrk_aligned>:
 8009894:	b570      	push	{r4, r5, r6, lr}
 8009896:	4e0e      	ldr	r6, [pc, #56]	; (80098d0 <sbrk_aligned+0x3c>)
 8009898:	460c      	mov	r4, r1
 800989a:	6831      	ldr	r1, [r6, #0]
 800989c:	4605      	mov	r5, r0
 800989e:	b911      	cbnz	r1, 80098a6 <sbrk_aligned+0x12>
 80098a0:	f000 f9e8 	bl	8009c74 <_sbrk_r>
 80098a4:	6030      	str	r0, [r6, #0]
 80098a6:	4621      	mov	r1, r4
 80098a8:	4628      	mov	r0, r5
 80098aa:	f000 f9e3 	bl	8009c74 <_sbrk_r>
 80098ae:	1c43      	adds	r3, r0, #1
 80098b0:	d00a      	beq.n	80098c8 <sbrk_aligned+0x34>
 80098b2:	1cc4      	adds	r4, r0, #3
 80098b4:	f024 0403 	bic.w	r4, r4, #3
 80098b8:	42a0      	cmp	r0, r4
 80098ba:	d007      	beq.n	80098cc <sbrk_aligned+0x38>
 80098bc:	1a21      	subs	r1, r4, r0
 80098be:	4628      	mov	r0, r5
 80098c0:	f000 f9d8 	bl	8009c74 <_sbrk_r>
 80098c4:	3001      	adds	r0, #1
 80098c6:	d101      	bne.n	80098cc <sbrk_aligned+0x38>
 80098c8:	f04f 34ff 	mov.w	r4, #4294967295
 80098cc:	4620      	mov	r0, r4
 80098ce:	bd70      	pop	{r4, r5, r6, pc}
 80098d0:	20001f04 	.word	0x20001f04

080098d4 <_malloc_r>:
 80098d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098d8:	1ccd      	adds	r5, r1, #3
 80098da:	f025 0503 	bic.w	r5, r5, #3
 80098de:	3508      	adds	r5, #8
 80098e0:	2d0c      	cmp	r5, #12
 80098e2:	bf38      	it	cc
 80098e4:	250c      	movcc	r5, #12
 80098e6:	2d00      	cmp	r5, #0
 80098e8:	4607      	mov	r7, r0
 80098ea:	db01      	blt.n	80098f0 <_malloc_r+0x1c>
 80098ec:	42a9      	cmp	r1, r5
 80098ee:	d905      	bls.n	80098fc <_malloc_r+0x28>
 80098f0:	230c      	movs	r3, #12
 80098f2:	603b      	str	r3, [r7, #0]
 80098f4:	2600      	movs	r6, #0
 80098f6:	4630      	mov	r0, r6
 80098f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098fc:	4e2e      	ldr	r6, [pc, #184]	; (80099b8 <_malloc_r+0xe4>)
 80098fe:	f000 fa25 	bl	8009d4c <__malloc_lock>
 8009902:	6833      	ldr	r3, [r6, #0]
 8009904:	461c      	mov	r4, r3
 8009906:	bb34      	cbnz	r4, 8009956 <_malloc_r+0x82>
 8009908:	4629      	mov	r1, r5
 800990a:	4638      	mov	r0, r7
 800990c:	f7ff ffc2 	bl	8009894 <sbrk_aligned>
 8009910:	1c43      	adds	r3, r0, #1
 8009912:	4604      	mov	r4, r0
 8009914:	d14d      	bne.n	80099b2 <_malloc_r+0xde>
 8009916:	6834      	ldr	r4, [r6, #0]
 8009918:	4626      	mov	r6, r4
 800991a:	2e00      	cmp	r6, #0
 800991c:	d140      	bne.n	80099a0 <_malloc_r+0xcc>
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	4631      	mov	r1, r6
 8009922:	4638      	mov	r0, r7
 8009924:	eb04 0803 	add.w	r8, r4, r3
 8009928:	f000 f9a4 	bl	8009c74 <_sbrk_r>
 800992c:	4580      	cmp	r8, r0
 800992e:	d13a      	bne.n	80099a6 <_malloc_r+0xd2>
 8009930:	6821      	ldr	r1, [r4, #0]
 8009932:	3503      	adds	r5, #3
 8009934:	1a6d      	subs	r5, r5, r1
 8009936:	f025 0503 	bic.w	r5, r5, #3
 800993a:	3508      	adds	r5, #8
 800993c:	2d0c      	cmp	r5, #12
 800993e:	bf38      	it	cc
 8009940:	250c      	movcc	r5, #12
 8009942:	4629      	mov	r1, r5
 8009944:	4638      	mov	r0, r7
 8009946:	f7ff ffa5 	bl	8009894 <sbrk_aligned>
 800994a:	3001      	adds	r0, #1
 800994c:	d02b      	beq.n	80099a6 <_malloc_r+0xd2>
 800994e:	6823      	ldr	r3, [r4, #0]
 8009950:	442b      	add	r3, r5
 8009952:	6023      	str	r3, [r4, #0]
 8009954:	e00e      	b.n	8009974 <_malloc_r+0xa0>
 8009956:	6822      	ldr	r2, [r4, #0]
 8009958:	1b52      	subs	r2, r2, r5
 800995a:	d41e      	bmi.n	800999a <_malloc_r+0xc6>
 800995c:	2a0b      	cmp	r2, #11
 800995e:	d916      	bls.n	800998e <_malloc_r+0xba>
 8009960:	1961      	adds	r1, r4, r5
 8009962:	42a3      	cmp	r3, r4
 8009964:	6025      	str	r5, [r4, #0]
 8009966:	bf18      	it	ne
 8009968:	6059      	strne	r1, [r3, #4]
 800996a:	6863      	ldr	r3, [r4, #4]
 800996c:	bf08      	it	eq
 800996e:	6031      	streq	r1, [r6, #0]
 8009970:	5162      	str	r2, [r4, r5]
 8009972:	604b      	str	r3, [r1, #4]
 8009974:	4638      	mov	r0, r7
 8009976:	f104 060b 	add.w	r6, r4, #11
 800997a:	f000 f9ed 	bl	8009d58 <__malloc_unlock>
 800997e:	f026 0607 	bic.w	r6, r6, #7
 8009982:	1d23      	adds	r3, r4, #4
 8009984:	1af2      	subs	r2, r6, r3
 8009986:	d0b6      	beq.n	80098f6 <_malloc_r+0x22>
 8009988:	1b9b      	subs	r3, r3, r6
 800998a:	50a3      	str	r3, [r4, r2]
 800998c:	e7b3      	b.n	80098f6 <_malloc_r+0x22>
 800998e:	6862      	ldr	r2, [r4, #4]
 8009990:	42a3      	cmp	r3, r4
 8009992:	bf0c      	ite	eq
 8009994:	6032      	streq	r2, [r6, #0]
 8009996:	605a      	strne	r2, [r3, #4]
 8009998:	e7ec      	b.n	8009974 <_malloc_r+0xa0>
 800999a:	4623      	mov	r3, r4
 800999c:	6864      	ldr	r4, [r4, #4]
 800999e:	e7b2      	b.n	8009906 <_malloc_r+0x32>
 80099a0:	4634      	mov	r4, r6
 80099a2:	6876      	ldr	r6, [r6, #4]
 80099a4:	e7b9      	b.n	800991a <_malloc_r+0x46>
 80099a6:	230c      	movs	r3, #12
 80099a8:	603b      	str	r3, [r7, #0]
 80099aa:	4638      	mov	r0, r7
 80099ac:	f000 f9d4 	bl	8009d58 <__malloc_unlock>
 80099b0:	e7a1      	b.n	80098f6 <_malloc_r+0x22>
 80099b2:	6025      	str	r5, [r4, #0]
 80099b4:	e7de      	b.n	8009974 <_malloc_r+0xa0>
 80099b6:	bf00      	nop
 80099b8:	20001f00 	.word	0x20001f00

080099bc <__ssputs_r>:
 80099bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099c0:	688e      	ldr	r6, [r1, #8]
 80099c2:	429e      	cmp	r6, r3
 80099c4:	4682      	mov	sl, r0
 80099c6:	460c      	mov	r4, r1
 80099c8:	4690      	mov	r8, r2
 80099ca:	461f      	mov	r7, r3
 80099cc:	d838      	bhi.n	8009a40 <__ssputs_r+0x84>
 80099ce:	898a      	ldrh	r2, [r1, #12]
 80099d0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099d4:	d032      	beq.n	8009a3c <__ssputs_r+0x80>
 80099d6:	6825      	ldr	r5, [r4, #0]
 80099d8:	6909      	ldr	r1, [r1, #16]
 80099da:	eba5 0901 	sub.w	r9, r5, r1
 80099de:	6965      	ldr	r5, [r4, #20]
 80099e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099e4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099e8:	3301      	adds	r3, #1
 80099ea:	444b      	add	r3, r9
 80099ec:	106d      	asrs	r5, r5, #1
 80099ee:	429d      	cmp	r5, r3
 80099f0:	bf38      	it	cc
 80099f2:	461d      	movcc	r5, r3
 80099f4:	0553      	lsls	r3, r2, #21
 80099f6:	d531      	bpl.n	8009a5c <__ssputs_r+0xa0>
 80099f8:	4629      	mov	r1, r5
 80099fa:	f7ff ff6b 	bl	80098d4 <_malloc_r>
 80099fe:	4606      	mov	r6, r0
 8009a00:	b950      	cbnz	r0, 8009a18 <__ssputs_r+0x5c>
 8009a02:	230c      	movs	r3, #12
 8009a04:	f8ca 3000 	str.w	r3, [sl]
 8009a08:	89a3      	ldrh	r3, [r4, #12]
 8009a0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a0e:	81a3      	strh	r3, [r4, #12]
 8009a10:	f04f 30ff 	mov.w	r0, #4294967295
 8009a14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a18:	6921      	ldr	r1, [r4, #16]
 8009a1a:	464a      	mov	r2, r9
 8009a1c:	f7ff fb46 	bl	80090ac <memcpy>
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a2a:	81a3      	strh	r3, [r4, #12]
 8009a2c:	6126      	str	r6, [r4, #16]
 8009a2e:	6165      	str	r5, [r4, #20]
 8009a30:	444e      	add	r6, r9
 8009a32:	eba5 0509 	sub.w	r5, r5, r9
 8009a36:	6026      	str	r6, [r4, #0]
 8009a38:	60a5      	str	r5, [r4, #8]
 8009a3a:	463e      	mov	r6, r7
 8009a3c:	42be      	cmp	r6, r7
 8009a3e:	d900      	bls.n	8009a42 <__ssputs_r+0x86>
 8009a40:	463e      	mov	r6, r7
 8009a42:	6820      	ldr	r0, [r4, #0]
 8009a44:	4632      	mov	r2, r6
 8009a46:	4641      	mov	r1, r8
 8009a48:	f000 f966 	bl	8009d18 <memmove>
 8009a4c:	68a3      	ldr	r3, [r4, #8]
 8009a4e:	1b9b      	subs	r3, r3, r6
 8009a50:	60a3      	str	r3, [r4, #8]
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	4433      	add	r3, r6
 8009a56:	6023      	str	r3, [r4, #0]
 8009a58:	2000      	movs	r0, #0
 8009a5a:	e7db      	b.n	8009a14 <__ssputs_r+0x58>
 8009a5c:	462a      	mov	r2, r5
 8009a5e:	f000 f981 	bl	8009d64 <_realloc_r>
 8009a62:	4606      	mov	r6, r0
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d1e1      	bne.n	8009a2c <__ssputs_r+0x70>
 8009a68:	6921      	ldr	r1, [r4, #16]
 8009a6a:	4650      	mov	r0, sl
 8009a6c:	f7ff fec6 	bl	80097fc <_free_r>
 8009a70:	e7c7      	b.n	8009a02 <__ssputs_r+0x46>
	...

08009a74 <_svfiprintf_r>:
 8009a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a78:	4698      	mov	r8, r3
 8009a7a:	898b      	ldrh	r3, [r1, #12]
 8009a7c:	061b      	lsls	r3, r3, #24
 8009a7e:	b09d      	sub	sp, #116	; 0x74
 8009a80:	4607      	mov	r7, r0
 8009a82:	460d      	mov	r5, r1
 8009a84:	4614      	mov	r4, r2
 8009a86:	d50e      	bpl.n	8009aa6 <_svfiprintf_r+0x32>
 8009a88:	690b      	ldr	r3, [r1, #16]
 8009a8a:	b963      	cbnz	r3, 8009aa6 <_svfiprintf_r+0x32>
 8009a8c:	2140      	movs	r1, #64	; 0x40
 8009a8e:	f7ff ff21 	bl	80098d4 <_malloc_r>
 8009a92:	6028      	str	r0, [r5, #0]
 8009a94:	6128      	str	r0, [r5, #16]
 8009a96:	b920      	cbnz	r0, 8009aa2 <_svfiprintf_r+0x2e>
 8009a98:	230c      	movs	r3, #12
 8009a9a:	603b      	str	r3, [r7, #0]
 8009a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009aa0:	e0d1      	b.n	8009c46 <_svfiprintf_r+0x1d2>
 8009aa2:	2340      	movs	r3, #64	; 0x40
 8009aa4:	616b      	str	r3, [r5, #20]
 8009aa6:	2300      	movs	r3, #0
 8009aa8:	9309      	str	r3, [sp, #36]	; 0x24
 8009aaa:	2320      	movs	r3, #32
 8009aac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ab0:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ab4:	2330      	movs	r3, #48	; 0x30
 8009ab6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009c60 <_svfiprintf_r+0x1ec>
 8009aba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009abe:	f04f 0901 	mov.w	r9, #1
 8009ac2:	4623      	mov	r3, r4
 8009ac4:	469a      	mov	sl, r3
 8009ac6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009aca:	b10a      	cbz	r2, 8009ad0 <_svfiprintf_r+0x5c>
 8009acc:	2a25      	cmp	r2, #37	; 0x25
 8009ace:	d1f9      	bne.n	8009ac4 <_svfiprintf_r+0x50>
 8009ad0:	ebba 0b04 	subs.w	fp, sl, r4
 8009ad4:	d00b      	beq.n	8009aee <_svfiprintf_r+0x7a>
 8009ad6:	465b      	mov	r3, fp
 8009ad8:	4622      	mov	r2, r4
 8009ada:	4629      	mov	r1, r5
 8009adc:	4638      	mov	r0, r7
 8009ade:	f7ff ff6d 	bl	80099bc <__ssputs_r>
 8009ae2:	3001      	adds	r0, #1
 8009ae4:	f000 80aa 	beq.w	8009c3c <_svfiprintf_r+0x1c8>
 8009ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009aea:	445a      	add	r2, fp
 8009aec:	9209      	str	r2, [sp, #36]	; 0x24
 8009aee:	f89a 3000 	ldrb.w	r3, [sl]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	f000 80a2 	beq.w	8009c3c <_svfiprintf_r+0x1c8>
 8009af8:	2300      	movs	r3, #0
 8009afa:	f04f 32ff 	mov.w	r2, #4294967295
 8009afe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b02:	f10a 0a01 	add.w	sl, sl, #1
 8009b06:	9304      	str	r3, [sp, #16]
 8009b08:	9307      	str	r3, [sp, #28]
 8009b0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b0e:	931a      	str	r3, [sp, #104]	; 0x68
 8009b10:	4654      	mov	r4, sl
 8009b12:	2205      	movs	r2, #5
 8009b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b18:	4851      	ldr	r0, [pc, #324]	; (8009c60 <_svfiprintf_r+0x1ec>)
 8009b1a:	f7f6 fb69 	bl	80001f0 <memchr>
 8009b1e:	9a04      	ldr	r2, [sp, #16]
 8009b20:	b9d8      	cbnz	r0, 8009b5a <_svfiprintf_r+0xe6>
 8009b22:	06d0      	lsls	r0, r2, #27
 8009b24:	bf44      	itt	mi
 8009b26:	2320      	movmi	r3, #32
 8009b28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b2c:	0711      	lsls	r1, r2, #28
 8009b2e:	bf44      	itt	mi
 8009b30:	232b      	movmi	r3, #43	; 0x2b
 8009b32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009b36:	f89a 3000 	ldrb.w	r3, [sl]
 8009b3a:	2b2a      	cmp	r3, #42	; 0x2a
 8009b3c:	d015      	beq.n	8009b6a <_svfiprintf_r+0xf6>
 8009b3e:	9a07      	ldr	r2, [sp, #28]
 8009b40:	4654      	mov	r4, sl
 8009b42:	2000      	movs	r0, #0
 8009b44:	f04f 0c0a 	mov.w	ip, #10
 8009b48:	4621      	mov	r1, r4
 8009b4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b4e:	3b30      	subs	r3, #48	; 0x30
 8009b50:	2b09      	cmp	r3, #9
 8009b52:	d94e      	bls.n	8009bf2 <_svfiprintf_r+0x17e>
 8009b54:	b1b0      	cbz	r0, 8009b84 <_svfiprintf_r+0x110>
 8009b56:	9207      	str	r2, [sp, #28]
 8009b58:	e014      	b.n	8009b84 <_svfiprintf_r+0x110>
 8009b5a:	eba0 0308 	sub.w	r3, r0, r8
 8009b5e:	fa09 f303 	lsl.w	r3, r9, r3
 8009b62:	4313      	orrs	r3, r2
 8009b64:	9304      	str	r3, [sp, #16]
 8009b66:	46a2      	mov	sl, r4
 8009b68:	e7d2      	b.n	8009b10 <_svfiprintf_r+0x9c>
 8009b6a:	9b03      	ldr	r3, [sp, #12]
 8009b6c:	1d19      	adds	r1, r3, #4
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	9103      	str	r1, [sp, #12]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	bfbb      	ittet	lt
 8009b76:	425b      	neglt	r3, r3
 8009b78:	f042 0202 	orrlt.w	r2, r2, #2
 8009b7c:	9307      	strge	r3, [sp, #28]
 8009b7e:	9307      	strlt	r3, [sp, #28]
 8009b80:	bfb8      	it	lt
 8009b82:	9204      	strlt	r2, [sp, #16]
 8009b84:	7823      	ldrb	r3, [r4, #0]
 8009b86:	2b2e      	cmp	r3, #46	; 0x2e
 8009b88:	d10c      	bne.n	8009ba4 <_svfiprintf_r+0x130>
 8009b8a:	7863      	ldrb	r3, [r4, #1]
 8009b8c:	2b2a      	cmp	r3, #42	; 0x2a
 8009b8e:	d135      	bne.n	8009bfc <_svfiprintf_r+0x188>
 8009b90:	9b03      	ldr	r3, [sp, #12]
 8009b92:	1d1a      	adds	r2, r3, #4
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	9203      	str	r2, [sp, #12]
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	bfb8      	it	lt
 8009b9c:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ba0:	3402      	adds	r4, #2
 8009ba2:	9305      	str	r3, [sp, #20]
 8009ba4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009c70 <_svfiprintf_r+0x1fc>
 8009ba8:	7821      	ldrb	r1, [r4, #0]
 8009baa:	2203      	movs	r2, #3
 8009bac:	4650      	mov	r0, sl
 8009bae:	f7f6 fb1f 	bl	80001f0 <memchr>
 8009bb2:	b140      	cbz	r0, 8009bc6 <_svfiprintf_r+0x152>
 8009bb4:	2340      	movs	r3, #64	; 0x40
 8009bb6:	eba0 000a 	sub.w	r0, r0, sl
 8009bba:	fa03 f000 	lsl.w	r0, r3, r0
 8009bbe:	9b04      	ldr	r3, [sp, #16]
 8009bc0:	4303      	orrs	r3, r0
 8009bc2:	3401      	adds	r4, #1
 8009bc4:	9304      	str	r3, [sp, #16]
 8009bc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bca:	4826      	ldr	r0, [pc, #152]	; (8009c64 <_svfiprintf_r+0x1f0>)
 8009bcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bd0:	2206      	movs	r2, #6
 8009bd2:	f7f6 fb0d 	bl	80001f0 <memchr>
 8009bd6:	2800      	cmp	r0, #0
 8009bd8:	d038      	beq.n	8009c4c <_svfiprintf_r+0x1d8>
 8009bda:	4b23      	ldr	r3, [pc, #140]	; (8009c68 <_svfiprintf_r+0x1f4>)
 8009bdc:	bb1b      	cbnz	r3, 8009c26 <_svfiprintf_r+0x1b2>
 8009bde:	9b03      	ldr	r3, [sp, #12]
 8009be0:	3307      	adds	r3, #7
 8009be2:	f023 0307 	bic.w	r3, r3, #7
 8009be6:	3308      	adds	r3, #8
 8009be8:	9303      	str	r3, [sp, #12]
 8009bea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bec:	4433      	add	r3, r6
 8009bee:	9309      	str	r3, [sp, #36]	; 0x24
 8009bf0:	e767      	b.n	8009ac2 <_svfiprintf_r+0x4e>
 8009bf2:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bf6:	460c      	mov	r4, r1
 8009bf8:	2001      	movs	r0, #1
 8009bfa:	e7a5      	b.n	8009b48 <_svfiprintf_r+0xd4>
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	3401      	adds	r4, #1
 8009c00:	9305      	str	r3, [sp, #20]
 8009c02:	4619      	mov	r1, r3
 8009c04:	f04f 0c0a 	mov.w	ip, #10
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c0e:	3a30      	subs	r2, #48	; 0x30
 8009c10:	2a09      	cmp	r2, #9
 8009c12:	d903      	bls.n	8009c1c <_svfiprintf_r+0x1a8>
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d0c5      	beq.n	8009ba4 <_svfiprintf_r+0x130>
 8009c18:	9105      	str	r1, [sp, #20]
 8009c1a:	e7c3      	b.n	8009ba4 <_svfiprintf_r+0x130>
 8009c1c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c20:	4604      	mov	r4, r0
 8009c22:	2301      	movs	r3, #1
 8009c24:	e7f0      	b.n	8009c08 <_svfiprintf_r+0x194>
 8009c26:	ab03      	add	r3, sp, #12
 8009c28:	9300      	str	r3, [sp, #0]
 8009c2a:	462a      	mov	r2, r5
 8009c2c:	4b0f      	ldr	r3, [pc, #60]	; (8009c6c <_svfiprintf_r+0x1f8>)
 8009c2e:	a904      	add	r1, sp, #16
 8009c30:	4638      	mov	r0, r7
 8009c32:	f7fd ffcb 	bl	8007bcc <_printf_float>
 8009c36:	1c42      	adds	r2, r0, #1
 8009c38:	4606      	mov	r6, r0
 8009c3a:	d1d6      	bne.n	8009bea <_svfiprintf_r+0x176>
 8009c3c:	89ab      	ldrh	r3, [r5, #12]
 8009c3e:	065b      	lsls	r3, r3, #25
 8009c40:	f53f af2c 	bmi.w	8009a9c <_svfiprintf_r+0x28>
 8009c44:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c46:	b01d      	add	sp, #116	; 0x74
 8009c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c4c:	ab03      	add	r3, sp, #12
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	462a      	mov	r2, r5
 8009c52:	4b06      	ldr	r3, [pc, #24]	; (8009c6c <_svfiprintf_r+0x1f8>)
 8009c54:	a904      	add	r1, sp, #16
 8009c56:	4638      	mov	r0, r7
 8009c58:	f7fe fa5c 	bl	8008114 <_printf_i>
 8009c5c:	e7eb      	b.n	8009c36 <_svfiprintf_r+0x1c2>
 8009c5e:	bf00      	nop
 8009c60:	0800aaec 	.word	0x0800aaec
 8009c64:	0800aaf6 	.word	0x0800aaf6
 8009c68:	08007bcd 	.word	0x08007bcd
 8009c6c:	080099bd 	.word	0x080099bd
 8009c70:	0800aaf2 	.word	0x0800aaf2

08009c74 <_sbrk_r>:
 8009c74:	b538      	push	{r3, r4, r5, lr}
 8009c76:	4d06      	ldr	r5, [pc, #24]	; (8009c90 <_sbrk_r+0x1c>)
 8009c78:	2300      	movs	r3, #0
 8009c7a:	4604      	mov	r4, r0
 8009c7c:	4608      	mov	r0, r1
 8009c7e:	602b      	str	r3, [r5, #0]
 8009c80:	f7f7 fb56 	bl	8001330 <_sbrk>
 8009c84:	1c43      	adds	r3, r0, #1
 8009c86:	d102      	bne.n	8009c8e <_sbrk_r+0x1a>
 8009c88:	682b      	ldr	r3, [r5, #0]
 8009c8a:	b103      	cbz	r3, 8009c8e <_sbrk_r+0x1a>
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	bd38      	pop	{r3, r4, r5, pc}
 8009c90:	20001f08 	.word	0x20001f08

08009c94 <__assert_func>:
 8009c94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009c96:	4614      	mov	r4, r2
 8009c98:	461a      	mov	r2, r3
 8009c9a:	4b09      	ldr	r3, [pc, #36]	; (8009cc0 <__assert_func+0x2c>)
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	68d8      	ldr	r0, [r3, #12]
 8009ca2:	b14c      	cbz	r4, 8009cb8 <__assert_func+0x24>
 8009ca4:	4b07      	ldr	r3, [pc, #28]	; (8009cc4 <__assert_func+0x30>)
 8009ca6:	9100      	str	r1, [sp, #0]
 8009ca8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009cac:	4906      	ldr	r1, [pc, #24]	; (8009cc8 <__assert_func+0x34>)
 8009cae:	462b      	mov	r3, r5
 8009cb0:	f000 f80e 	bl	8009cd0 <fiprintf>
 8009cb4:	f000 faac 	bl	800a210 <abort>
 8009cb8:	4b04      	ldr	r3, [pc, #16]	; (8009ccc <__assert_func+0x38>)
 8009cba:	461c      	mov	r4, r3
 8009cbc:	e7f3      	b.n	8009ca6 <__assert_func+0x12>
 8009cbe:	bf00      	nop
 8009cc0:	200000fc 	.word	0x200000fc
 8009cc4:	0800aafd 	.word	0x0800aafd
 8009cc8:	0800ab0a 	.word	0x0800ab0a
 8009ccc:	0800ab38 	.word	0x0800ab38

08009cd0 <fiprintf>:
 8009cd0:	b40e      	push	{r1, r2, r3}
 8009cd2:	b503      	push	{r0, r1, lr}
 8009cd4:	4601      	mov	r1, r0
 8009cd6:	ab03      	add	r3, sp, #12
 8009cd8:	4805      	ldr	r0, [pc, #20]	; (8009cf0 <fiprintf+0x20>)
 8009cda:	f853 2b04 	ldr.w	r2, [r3], #4
 8009cde:	6800      	ldr	r0, [r0, #0]
 8009ce0:	9301      	str	r3, [sp, #4]
 8009ce2:	f000 f897 	bl	8009e14 <_vfiprintf_r>
 8009ce6:	b002      	add	sp, #8
 8009ce8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009cec:	b003      	add	sp, #12
 8009cee:	4770      	bx	lr
 8009cf0:	200000fc 	.word	0x200000fc

08009cf4 <__ascii_mbtowc>:
 8009cf4:	b082      	sub	sp, #8
 8009cf6:	b901      	cbnz	r1, 8009cfa <__ascii_mbtowc+0x6>
 8009cf8:	a901      	add	r1, sp, #4
 8009cfa:	b142      	cbz	r2, 8009d0e <__ascii_mbtowc+0x1a>
 8009cfc:	b14b      	cbz	r3, 8009d12 <__ascii_mbtowc+0x1e>
 8009cfe:	7813      	ldrb	r3, [r2, #0]
 8009d00:	600b      	str	r3, [r1, #0]
 8009d02:	7812      	ldrb	r2, [r2, #0]
 8009d04:	1e10      	subs	r0, r2, #0
 8009d06:	bf18      	it	ne
 8009d08:	2001      	movne	r0, #1
 8009d0a:	b002      	add	sp, #8
 8009d0c:	4770      	bx	lr
 8009d0e:	4610      	mov	r0, r2
 8009d10:	e7fb      	b.n	8009d0a <__ascii_mbtowc+0x16>
 8009d12:	f06f 0001 	mvn.w	r0, #1
 8009d16:	e7f8      	b.n	8009d0a <__ascii_mbtowc+0x16>

08009d18 <memmove>:
 8009d18:	4288      	cmp	r0, r1
 8009d1a:	b510      	push	{r4, lr}
 8009d1c:	eb01 0402 	add.w	r4, r1, r2
 8009d20:	d902      	bls.n	8009d28 <memmove+0x10>
 8009d22:	4284      	cmp	r4, r0
 8009d24:	4623      	mov	r3, r4
 8009d26:	d807      	bhi.n	8009d38 <memmove+0x20>
 8009d28:	1e43      	subs	r3, r0, #1
 8009d2a:	42a1      	cmp	r1, r4
 8009d2c:	d008      	beq.n	8009d40 <memmove+0x28>
 8009d2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d32:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d36:	e7f8      	b.n	8009d2a <memmove+0x12>
 8009d38:	4402      	add	r2, r0
 8009d3a:	4601      	mov	r1, r0
 8009d3c:	428a      	cmp	r2, r1
 8009d3e:	d100      	bne.n	8009d42 <memmove+0x2a>
 8009d40:	bd10      	pop	{r4, pc}
 8009d42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d4a:	e7f7      	b.n	8009d3c <memmove+0x24>

08009d4c <__malloc_lock>:
 8009d4c:	4801      	ldr	r0, [pc, #4]	; (8009d54 <__malloc_lock+0x8>)
 8009d4e:	f000 bc1f 	b.w	800a590 <__retarget_lock_acquire_recursive>
 8009d52:	bf00      	nop
 8009d54:	20001f0c 	.word	0x20001f0c

08009d58 <__malloc_unlock>:
 8009d58:	4801      	ldr	r0, [pc, #4]	; (8009d60 <__malloc_unlock+0x8>)
 8009d5a:	f000 bc1a 	b.w	800a592 <__retarget_lock_release_recursive>
 8009d5e:	bf00      	nop
 8009d60:	20001f0c 	.word	0x20001f0c

08009d64 <_realloc_r>:
 8009d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d68:	4680      	mov	r8, r0
 8009d6a:	4614      	mov	r4, r2
 8009d6c:	460e      	mov	r6, r1
 8009d6e:	b921      	cbnz	r1, 8009d7a <_realloc_r+0x16>
 8009d70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d74:	4611      	mov	r1, r2
 8009d76:	f7ff bdad 	b.w	80098d4 <_malloc_r>
 8009d7a:	b92a      	cbnz	r2, 8009d88 <_realloc_r+0x24>
 8009d7c:	f7ff fd3e 	bl	80097fc <_free_r>
 8009d80:	4625      	mov	r5, r4
 8009d82:	4628      	mov	r0, r5
 8009d84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009d88:	f000 fc6a 	bl	800a660 <_malloc_usable_size_r>
 8009d8c:	4284      	cmp	r4, r0
 8009d8e:	4607      	mov	r7, r0
 8009d90:	d802      	bhi.n	8009d98 <_realloc_r+0x34>
 8009d92:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009d96:	d812      	bhi.n	8009dbe <_realloc_r+0x5a>
 8009d98:	4621      	mov	r1, r4
 8009d9a:	4640      	mov	r0, r8
 8009d9c:	f7ff fd9a 	bl	80098d4 <_malloc_r>
 8009da0:	4605      	mov	r5, r0
 8009da2:	2800      	cmp	r0, #0
 8009da4:	d0ed      	beq.n	8009d82 <_realloc_r+0x1e>
 8009da6:	42bc      	cmp	r4, r7
 8009da8:	4622      	mov	r2, r4
 8009daa:	4631      	mov	r1, r6
 8009dac:	bf28      	it	cs
 8009dae:	463a      	movcs	r2, r7
 8009db0:	f7ff f97c 	bl	80090ac <memcpy>
 8009db4:	4631      	mov	r1, r6
 8009db6:	4640      	mov	r0, r8
 8009db8:	f7ff fd20 	bl	80097fc <_free_r>
 8009dbc:	e7e1      	b.n	8009d82 <_realloc_r+0x1e>
 8009dbe:	4635      	mov	r5, r6
 8009dc0:	e7df      	b.n	8009d82 <_realloc_r+0x1e>

08009dc2 <__sfputc_r>:
 8009dc2:	6893      	ldr	r3, [r2, #8]
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	b410      	push	{r4}
 8009dca:	6093      	str	r3, [r2, #8]
 8009dcc:	da08      	bge.n	8009de0 <__sfputc_r+0x1e>
 8009dce:	6994      	ldr	r4, [r2, #24]
 8009dd0:	42a3      	cmp	r3, r4
 8009dd2:	db01      	blt.n	8009dd8 <__sfputc_r+0x16>
 8009dd4:	290a      	cmp	r1, #10
 8009dd6:	d103      	bne.n	8009de0 <__sfputc_r+0x1e>
 8009dd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ddc:	f000 b94a 	b.w	800a074 <__swbuf_r>
 8009de0:	6813      	ldr	r3, [r2, #0]
 8009de2:	1c58      	adds	r0, r3, #1
 8009de4:	6010      	str	r0, [r2, #0]
 8009de6:	7019      	strb	r1, [r3, #0]
 8009de8:	4608      	mov	r0, r1
 8009dea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009dee:	4770      	bx	lr

08009df0 <__sfputs_r>:
 8009df0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009df2:	4606      	mov	r6, r0
 8009df4:	460f      	mov	r7, r1
 8009df6:	4614      	mov	r4, r2
 8009df8:	18d5      	adds	r5, r2, r3
 8009dfa:	42ac      	cmp	r4, r5
 8009dfc:	d101      	bne.n	8009e02 <__sfputs_r+0x12>
 8009dfe:	2000      	movs	r0, #0
 8009e00:	e007      	b.n	8009e12 <__sfputs_r+0x22>
 8009e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e06:	463a      	mov	r2, r7
 8009e08:	4630      	mov	r0, r6
 8009e0a:	f7ff ffda 	bl	8009dc2 <__sfputc_r>
 8009e0e:	1c43      	adds	r3, r0, #1
 8009e10:	d1f3      	bne.n	8009dfa <__sfputs_r+0xa>
 8009e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009e14 <_vfiprintf_r>:
 8009e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e18:	460d      	mov	r5, r1
 8009e1a:	b09d      	sub	sp, #116	; 0x74
 8009e1c:	4614      	mov	r4, r2
 8009e1e:	4698      	mov	r8, r3
 8009e20:	4606      	mov	r6, r0
 8009e22:	b118      	cbz	r0, 8009e2c <_vfiprintf_r+0x18>
 8009e24:	6983      	ldr	r3, [r0, #24]
 8009e26:	b90b      	cbnz	r3, 8009e2c <_vfiprintf_r+0x18>
 8009e28:	f000 fb14 	bl	800a454 <__sinit>
 8009e2c:	4b89      	ldr	r3, [pc, #548]	; (800a054 <_vfiprintf_r+0x240>)
 8009e2e:	429d      	cmp	r5, r3
 8009e30:	d11b      	bne.n	8009e6a <_vfiprintf_r+0x56>
 8009e32:	6875      	ldr	r5, [r6, #4]
 8009e34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e36:	07d9      	lsls	r1, r3, #31
 8009e38:	d405      	bmi.n	8009e46 <_vfiprintf_r+0x32>
 8009e3a:	89ab      	ldrh	r3, [r5, #12]
 8009e3c:	059a      	lsls	r2, r3, #22
 8009e3e:	d402      	bmi.n	8009e46 <_vfiprintf_r+0x32>
 8009e40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e42:	f000 fba5 	bl	800a590 <__retarget_lock_acquire_recursive>
 8009e46:	89ab      	ldrh	r3, [r5, #12]
 8009e48:	071b      	lsls	r3, r3, #28
 8009e4a:	d501      	bpl.n	8009e50 <_vfiprintf_r+0x3c>
 8009e4c:	692b      	ldr	r3, [r5, #16]
 8009e4e:	b9eb      	cbnz	r3, 8009e8c <_vfiprintf_r+0x78>
 8009e50:	4629      	mov	r1, r5
 8009e52:	4630      	mov	r0, r6
 8009e54:	f000 f96e 	bl	800a134 <__swsetup_r>
 8009e58:	b1c0      	cbz	r0, 8009e8c <_vfiprintf_r+0x78>
 8009e5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009e5c:	07dc      	lsls	r4, r3, #31
 8009e5e:	d50e      	bpl.n	8009e7e <_vfiprintf_r+0x6a>
 8009e60:	f04f 30ff 	mov.w	r0, #4294967295
 8009e64:	b01d      	add	sp, #116	; 0x74
 8009e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e6a:	4b7b      	ldr	r3, [pc, #492]	; (800a058 <_vfiprintf_r+0x244>)
 8009e6c:	429d      	cmp	r5, r3
 8009e6e:	d101      	bne.n	8009e74 <_vfiprintf_r+0x60>
 8009e70:	68b5      	ldr	r5, [r6, #8]
 8009e72:	e7df      	b.n	8009e34 <_vfiprintf_r+0x20>
 8009e74:	4b79      	ldr	r3, [pc, #484]	; (800a05c <_vfiprintf_r+0x248>)
 8009e76:	429d      	cmp	r5, r3
 8009e78:	bf08      	it	eq
 8009e7a:	68f5      	ldreq	r5, [r6, #12]
 8009e7c:	e7da      	b.n	8009e34 <_vfiprintf_r+0x20>
 8009e7e:	89ab      	ldrh	r3, [r5, #12]
 8009e80:	0598      	lsls	r0, r3, #22
 8009e82:	d4ed      	bmi.n	8009e60 <_vfiprintf_r+0x4c>
 8009e84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009e86:	f000 fb84 	bl	800a592 <__retarget_lock_release_recursive>
 8009e8a:	e7e9      	b.n	8009e60 <_vfiprintf_r+0x4c>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009e90:	2320      	movs	r3, #32
 8009e92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009e96:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e9a:	2330      	movs	r3, #48	; 0x30
 8009e9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a060 <_vfiprintf_r+0x24c>
 8009ea0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ea4:	f04f 0901 	mov.w	r9, #1
 8009ea8:	4623      	mov	r3, r4
 8009eaa:	469a      	mov	sl, r3
 8009eac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009eb0:	b10a      	cbz	r2, 8009eb6 <_vfiprintf_r+0xa2>
 8009eb2:	2a25      	cmp	r2, #37	; 0x25
 8009eb4:	d1f9      	bne.n	8009eaa <_vfiprintf_r+0x96>
 8009eb6:	ebba 0b04 	subs.w	fp, sl, r4
 8009eba:	d00b      	beq.n	8009ed4 <_vfiprintf_r+0xc0>
 8009ebc:	465b      	mov	r3, fp
 8009ebe:	4622      	mov	r2, r4
 8009ec0:	4629      	mov	r1, r5
 8009ec2:	4630      	mov	r0, r6
 8009ec4:	f7ff ff94 	bl	8009df0 <__sfputs_r>
 8009ec8:	3001      	adds	r0, #1
 8009eca:	f000 80aa 	beq.w	800a022 <_vfiprintf_r+0x20e>
 8009ece:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009ed0:	445a      	add	r2, fp
 8009ed2:	9209      	str	r2, [sp, #36]	; 0x24
 8009ed4:	f89a 3000 	ldrb.w	r3, [sl]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f000 80a2 	beq.w	800a022 <_vfiprintf_r+0x20e>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	f04f 32ff 	mov.w	r2, #4294967295
 8009ee4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ee8:	f10a 0a01 	add.w	sl, sl, #1
 8009eec:	9304      	str	r3, [sp, #16]
 8009eee:	9307      	str	r3, [sp, #28]
 8009ef0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009ef4:	931a      	str	r3, [sp, #104]	; 0x68
 8009ef6:	4654      	mov	r4, sl
 8009ef8:	2205      	movs	r2, #5
 8009efa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009efe:	4858      	ldr	r0, [pc, #352]	; (800a060 <_vfiprintf_r+0x24c>)
 8009f00:	f7f6 f976 	bl	80001f0 <memchr>
 8009f04:	9a04      	ldr	r2, [sp, #16]
 8009f06:	b9d8      	cbnz	r0, 8009f40 <_vfiprintf_r+0x12c>
 8009f08:	06d1      	lsls	r1, r2, #27
 8009f0a:	bf44      	itt	mi
 8009f0c:	2320      	movmi	r3, #32
 8009f0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f12:	0713      	lsls	r3, r2, #28
 8009f14:	bf44      	itt	mi
 8009f16:	232b      	movmi	r3, #43	; 0x2b
 8009f18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009f1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009f20:	2b2a      	cmp	r3, #42	; 0x2a
 8009f22:	d015      	beq.n	8009f50 <_vfiprintf_r+0x13c>
 8009f24:	9a07      	ldr	r2, [sp, #28]
 8009f26:	4654      	mov	r4, sl
 8009f28:	2000      	movs	r0, #0
 8009f2a:	f04f 0c0a 	mov.w	ip, #10
 8009f2e:	4621      	mov	r1, r4
 8009f30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f34:	3b30      	subs	r3, #48	; 0x30
 8009f36:	2b09      	cmp	r3, #9
 8009f38:	d94e      	bls.n	8009fd8 <_vfiprintf_r+0x1c4>
 8009f3a:	b1b0      	cbz	r0, 8009f6a <_vfiprintf_r+0x156>
 8009f3c:	9207      	str	r2, [sp, #28]
 8009f3e:	e014      	b.n	8009f6a <_vfiprintf_r+0x156>
 8009f40:	eba0 0308 	sub.w	r3, r0, r8
 8009f44:	fa09 f303 	lsl.w	r3, r9, r3
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	9304      	str	r3, [sp, #16]
 8009f4c:	46a2      	mov	sl, r4
 8009f4e:	e7d2      	b.n	8009ef6 <_vfiprintf_r+0xe2>
 8009f50:	9b03      	ldr	r3, [sp, #12]
 8009f52:	1d19      	adds	r1, r3, #4
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	9103      	str	r1, [sp, #12]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	bfbb      	ittet	lt
 8009f5c:	425b      	neglt	r3, r3
 8009f5e:	f042 0202 	orrlt.w	r2, r2, #2
 8009f62:	9307      	strge	r3, [sp, #28]
 8009f64:	9307      	strlt	r3, [sp, #28]
 8009f66:	bfb8      	it	lt
 8009f68:	9204      	strlt	r2, [sp, #16]
 8009f6a:	7823      	ldrb	r3, [r4, #0]
 8009f6c:	2b2e      	cmp	r3, #46	; 0x2e
 8009f6e:	d10c      	bne.n	8009f8a <_vfiprintf_r+0x176>
 8009f70:	7863      	ldrb	r3, [r4, #1]
 8009f72:	2b2a      	cmp	r3, #42	; 0x2a
 8009f74:	d135      	bne.n	8009fe2 <_vfiprintf_r+0x1ce>
 8009f76:	9b03      	ldr	r3, [sp, #12]
 8009f78:	1d1a      	adds	r2, r3, #4
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	9203      	str	r2, [sp, #12]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	bfb8      	it	lt
 8009f82:	f04f 33ff 	movlt.w	r3, #4294967295
 8009f86:	3402      	adds	r4, #2
 8009f88:	9305      	str	r3, [sp, #20]
 8009f8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a070 <_vfiprintf_r+0x25c>
 8009f8e:	7821      	ldrb	r1, [r4, #0]
 8009f90:	2203      	movs	r2, #3
 8009f92:	4650      	mov	r0, sl
 8009f94:	f7f6 f92c 	bl	80001f0 <memchr>
 8009f98:	b140      	cbz	r0, 8009fac <_vfiprintf_r+0x198>
 8009f9a:	2340      	movs	r3, #64	; 0x40
 8009f9c:	eba0 000a 	sub.w	r0, r0, sl
 8009fa0:	fa03 f000 	lsl.w	r0, r3, r0
 8009fa4:	9b04      	ldr	r3, [sp, #16]
 8009fa6:	4303      	orrs	r3, r0
 8009fa8:	3401      	adds	r4, #1
 8009faa:	9304      	str	r3, [sp, #16]
 8009fac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb0:	482c      	ldr	r0, [pc, #176]	; (800a064 <_vfiprintf_r+0x250>)
 8009fb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009fb6:	2206      	movs	r2, #6
 8009fb8:	f7f6 f91a 	bl	80001f0 <memchr>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d03f      	beq.n	800a040 <_vfiprintf_r+0x22c>
 8009fc0:	4b29      	ldr	r3, [pc, #164]	; (800a068 <_vfiprintf_r+0x254>)
 8009fc2:	bb1b      	cbnz	r3, 800a00c <_vfiprintf_r+0x1f8>
 8009fc4:	9b03      	ldr	r3, [sp, #12]
 8009fc6:	3307      	adds	r3, #7
 8009fc8:	f023 0307 	bic.w	r3, r3, #7
 8009fcc:	3308      	adds	r3, #8
 8009fce:	9303      	str	r3, [sp, #12]
 8009fd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fd2:	443b      	add	r3, r7
 8009fd4:	9309      	str	r3, [sp, #36]	; 0x24
 8009fd6:	e767      	b.n	8009ea8 <_vfiprintf_r+0x94>
 8009fd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009fdc:	460c      	mov	r4, r1
 8009fde:	2001      	movs	r0, #1
 8009fe0:	e7a5      	b.n	8009f2e <_vfiprintf_r+0x11a>
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	3401      	adds	r4, #1
 8009fe6:	9305      	str	r3, [sp, #20]
 8009fe8:	4619      	mov	r1, r3
 8009fea:	f04f 0c0a 	mov.w	ip, #10
 8009fee:	4620      	mov	r0, r4
 8009ff0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ff4:	3a30      	subs	r2, #48	; 0x30
 8009ff6:	2a09      	cmp	r2, #9
 8009ff8:	d903      	bls.n	800a002 <_vfiprintf_r+0x1ee>
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d0c5      	beq.n	8009f8a <_vfiprintf_r+0x176>
 8009ffe:	9105      	str	r1, [sp, #20]
 800a000:	e7c3      	b.n	8009f8a <_vfiprintf_r+0x176>
 800a002:	fb0c 2101 	mla	r1, ip, r1, r2
 800a006:	4604      	mov	r4, r0
 800a008:	2301      	movs	r3, #1
 800a00a:	e7f0      	b.n	8009fee <_vfiprintf_r+0x1da>
 800a00c:	ab03      	add	r3, sp, #12
 800a00e:	9300      	str	r3, [sp, #0]
 800a010:	462a      	mov	r2, r5
 800a012:	4b16      	ldr	r3, [pc, #88]	; (800a06c <_vfiprintf_r+0x258>)
 800a014:	a904      	add	r1, sp, #16
 800a016:	4630      	mov	r0, r6
 800a018:	f7fd fdd8 	bl	8007bcc <_printf_float>
 800a01c:	4607      	mov	r7, r0
 800a01e:	1c78      	adds	r0, r7, #1
 800a020:	d1d6      	bne.n	8009fd0 <_vfiprintf_r+0x1bc>
 800a022:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a024:	07d9      	lsls	r1, r3, #31
 800a026:	d405      	bmi.n	800a034 <_vfiprintf_r+0x220>
 800a028:	89ab      	ldrh	r3, [r5, #12]
 800a02a:	059a      	lsls	r2, r3, #22
 800a02c:	d402      	bmi.n	800a034 <_vfiprintf_r+0x220>
 800a02e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a030:	f000 faaf 	bl	800a592 <__retarget_lock_release_recursive>
 800a034:	89ab      	ldrh	r3, [r5, #12]
 800a036:	065b      	lsls	r3, r3, #25
 800a038:	f53f af12 	bmi.w	8009e60 <_vfiprintf_r+0x4c>
 800a03c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a03e:	e711      	b.n	8009e64 <_vfiprintf_r+0x50>
 800a040:	ab03      	add	r3, sp, #12
 800a042:	9300      	str	r3, [sp, #0]
 800a044:	462a      	mov	r2, r5
 800a046:	4b09      	ldr	r3, [pc, #36]	; (800a06c <_vfiprintf_r+0x258>)
 800a048:	a904      	add	r1, sp, #16
 800a04a:	4630      	mov	r0, r6
 800a04c:	f7fe f862 	bl	8008114 <_printf_i>
 800a050:	e7e4      	b.n	800a01c <_vfiprintf_r+0x208>
 800a052:	bf00      	nop
 800a054:	0800ac64 	.word	0x0800ac64
 800a058:	0800ac84 	.word	0x0800ac84
 800a05c:	0800ac44 	.word	0x0800ac44
 800a060:	0800aaec 	.word	0x0800aaec
 800a064:	0800aaf6 	.word	0x0800aaf6
 800a068:	08007bcd 	.word	0x08007bcd
 800a06c:	08009df1 	.word	0x08009df1
 800a070:	0800aaf2 	.word	0x0800aaf2

0800a074 <__swbuf_r>:
 800a074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a076:	460e      	mov	r6, r1
 800a078:	4614      	mov	r4, r2
 800a07a:	4605      	mov	r5, r0
 800a07c:	b118      	cbz	r0, 800a086 <__swbuf_r+0x12>
 800a07e:	6983      	ldr	r3, [r0, #24]
 800a080:	b90b      	cbnz	r3, 800a086 <__swbuf_r+0x12>
 800a082:	f000 f9e7 	bl	800a454 <__sinit>
 800a086:	4b21      	ldr	r3, [pc, #132]	; (800a10c <__swbuf_r+0x98>)
 800a088:	429c      	cmp	r4, r3
 800a08a:	d12b      	bne.n	800a0e4 <__swbuf_r+0x70>
 800a08c:	686c      	ldr	r4, [r5, #4]
 800a08e:	69a3      	ldr	r3, [r4, #24]
 800a090:	60a3      	str	r3, [r4, #8]
 800a092:	89a3      	ldrh	r3, [r4, #12]
 800a094:	071a      	lsls	r2, r3, #28
 800a096:	d52f      	bpl.n	800a0f8 <__swbuf_r+0x84>
 800a098:	6923      	ldr	r3, [r4, #16]
 800a09a:	b36b      	cbz	r3, 800a0f8 <__swbuf_r+0x84>
 800a09c:	6923      	ldr	r3, [r4, #16]
 800a09e:	6820      	ldr	r0, [r4, #0]
 800a0a0:	1ac0      	subs	r0, r0, r3
 800a0a2:	6963      	ldr	r3, [r4, #20]
 800a0a4:	b2f6      	uxtb	r6, r6
 800a0a6:	4283      	cmp	r3, r0
 800a0a8:	4637      	mov	r7, r6
 800a0aa:	dc04      	bgt.n	800a0b6 <__swbuf_r+0x42>
 800a0ac:	4621      	mov	r1, r4
 800a0ae:	4628      	mov	r0, r5
 800a0b0:	f000 f93c 	bl	800a32c <_fflush_r>
 800a0b4:	bb30      	cbnz	r0, 800a104 <__swbuf_r+0x90>
 800a0b6:	68a3      	ldr	r3, [r4, #8]
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	60a3      	str	r3, [r4, #8]
 800a0bc:	6823      	ldr	r3, [r4, #0]
 800a0be:	1c5a      	adds	r2, r3, #1
 800a0c0:	6022      	str	r2, [r4, #0]
 800a0c2:	701e      	strb	r6, [r3, #0]
 800a0c4:	6963      	ldr	r3, [r4, #20]
 800a0c6:	3001      	adds	r0, #1
 800a0c8:	4283      	cmp	r3, r0
 800a0ca:	d004      	beq.n	800a0d6 <__swbuf_r+0x62>
 800a0cc:	89a3      	ldrh	r3, [r4, #12]
 800a0ce:	07db      	lsls	r3, r3, #31
 800a0d0:	d506      	bpl.n	800a0e0 <__swbuf_r+0x6c>
 800a0d2:	2e0a      	cmp	r6, #10
 800a0d4:	d104      	bne.n	800a0e0 <__swbuf_r+0x6c>
 800a0d6:	4621      	mov	r1, r4
 800a0d8:	4628      	mov	r0, r5
 800a0da:	f000 f927 	bl	800a32c <_fflush_r>
 800a0de:	b988      	cbnz	r0, 800a104 <__swbuf_r+0x90>
 800a0e0:	4638      	mov	r0, r7
 800a0e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0e4:	4b0a      	ldr	r3, [pc, #40]	; (800a110 <__swbuf_r+0x9c>)
 800a0e6:	429c      	cmp	r4, r3
 800a0e8:	d101      	bne.n	800a0ee <__swbuf_r+0x7a>
 800a0ea:	68ac      	ldr	r4, [r5, #8]
 800a0ec:	e7cf      	b.n	800a08e <__swbuf_r+0x1a>
 800a0ee:	4b09      	ldr	r3, [pc, #36]	; (800a114 <__swbuf_r+0xa0>)
 800a0f0:	429c      	cmp	r4, r3
 800a0f2:	bf08      	it	eq
 800a0f4:	68ec      	ldreq	r4, [r5, #12]
 800a0f6:	e7ca      	b.n	800a08e <__swbuf_r+0x1a>
 800a0f8:	4621      	mov	r1, r4
 800a0fa:	4628      	mov	r0, r5
 800a0fc:	f000 f81a 	bl	800a134 <__swsetup_r>
 800a100:	2800      	cmp	r0, #0
 800a102:	d0cb      	beq.n	800a09c <__swbuf_r+0x28>
 800a104:	f04f 37ff 	mov.w	r7, #4294967295
 800a108:	e7ea      	b.n	800a0e0 <__swbuf_r+0x6c>
 800a10a:	bf00      	nop
 800a10c:	0800ac64 	.word	0x0800ac64
 800a110:	0800ac84 	.word	0x0800ac84
 800a114:	0800ac44 	.word	0x0800ac44

0800a118 <__ascii_wctomb>:
 800a118:	b149      	cbz	r1, 800a12e <__ascii_wctomb+0x16>
 800a11a:	2aff      	cmp	r2, #255	; 0xff
 800a11c:	bf85      	ittet	hi
 800a11e:	238a      	movhi	r3, #138	; 0x8a
 800a120:	6003      	strhi	r3, [r0, #0]
 800a122:	700a      	strbls	r2, [r1, #0]
 800a124:	f04f 30ff 	movhi.w	r0, #4294967295
 800a128:	bf98      	it	ls
 800a12a:	2001      	movls	r0, #1
 800a12c:	4770      	bx	lr
 800a12e:	4608      	mov	r0, r1
 800a130:	4770      	bx	lr
	...

0800a134 <__swsetup_r>:
 800a134:	4b32      	ldr	r3, [pc, #200]	; (800a200 <__swsetup_r+0xcc>)
 800a136:	b570      	push	{r4, r5, r6, lr}
 800a138:	681d      	ldr	r5, [r3, #0]
 800a13a:	4606      	mov	r6, r0
 800a13c:	460c      	mov	r4, r1
 800a13e:	b125      	cbz	r5, 800a14a <__swsetup_r+0x16>
 800a140:	69ab      	ldr	r3, [r5, #24]
 800a142:	b913      	cbnz	r3, 800a14a <__swsetup_r+0x16>
 800a144:	4628      	mov	r0, r5
 800a146:	f000 f985 	bl	800a454 <__sinit>
 800a14a:	4b2e      	ldr	r3, [pc, #184]	; (800a204 <__swsetup_r+0xd0>)
 800a14c:	429c      	cmp	r4, r3
 800a14e:	d10f      	bne.n	800a170 <__swsetup_r+0x3c>
 800a150:	686c      	ldr	r4, [r5, #4]
 800a152:	89a3      	ldrh	r3, [r4, #12]
 800a154:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a158:	0719      	lsls	r1, r3, #28
 800a15a:	d42c      	bmi.n	800a1b6 <__swsetup_r+0x82>
 800a15c:	06dd      	lsls	r5, r3, #27
 800a15e:	d411      	bmi.n	800a184 <__swsetup_r+0x50>
 800a160:	2309      	movs	r3, #9
 800a162:	6033      	str	r3, [r6, #0]
 800a164:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a168:	81a3      	strh	r3, [r4, #12]
 800a16a:	f04f 30ff 	mov.w	r0, #4294967295
 800a16e:	e03e      	b.n	800a1ee <__swsetup_r+0xba>
 800a170:	4b25      	ldr	r3, [pc, #148]	; (800a208 <__swsetup_r+0xd4>)
 800a172:	429c      	cmp	r4, r3
 800a174:	d101      	bne.n	800a17a <__swsetup_r+0x46>
 800a176:	68ac      	ldr	r4, [r5, #8]
 800a178:	e7eb      	b.n	800a152 <__swsetup_r+0x1e>
 800a17a:	4b24      	ldr	r3, [pc, #144]	; (800a20c <__swsetup_r+0xd8>)
 800a17c:	429c      	cmp	r4, r3
 800a17e:	bf08      	it	eq
 800a180:	68ec      	ldreq	r4, [r5, #12]
 800a182:	e7e6      	b.n	800a152 <__swsetup_r+0x1e>
 800a184:	0758      	lsls	r0, r3, #29
 800a186:	d512      	bpl.n	800a1ae <__swsetup_r+0x7a>
 800a188:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a18a:	b141      	cbz	r1, 800a19e <__swsetup_r+0x6a>
 800a18c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a190:	4299      	cmp	r1, r3
 800a192:	d002      	beq.n	800a19a <__swsetup_r+0x66>
 800a194:	4630      	mov	r0, r6
 800a196:	f7ff fb31 	bl	80097fc <_free_r>
 800a19a:	2300      	movs	r3, #0
 800a19c:	6363      	str	r3, [r4, #52]	; 0x34
 800a19e:	89a3      	ldrh	r3, [r4, #12]
 800a1a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a1a4:	81a3      	strh	r3, [r4, #12]
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	6063      	str	r3, [r4, #4]
 800a1aa:	6923      	ldr	r3, [r4, #16]
 800a1ac:	6023      	str	r3, [r4, #0]
 800a1ae:	89a3      	ldrh	r3, [r4, #12]
 800a1b0:	f043 0308 	orr.w	r3, r3, #8
 800a1b4:	81a3      	strh	r3, [r4, #12]
 800a1b6:	6923      	ldr	r3, [r4, #16]
 800a1b8:	b94b      	cbnz	r3, 800a1ce <__swsetup_r+0x9a>
 800a1ba:	89a3      	ldrh	r3, [r4, #12]
 800a1bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a1c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1c4:	d003      	beq.n	800a1ce <__swsetup_r+0x9a>
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	f000 fa09 	bl	800a5e0 <__smakebuf_r>
 800a1ce:	89a0      	ldrh	r0, [r4, #12]
 800a1d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a1d4:	f010 0301 	ands.w	r3, r0, #1
 800a1d8:	d00a      	beq.n	800a1f0 <__swsetup_r+0xbc>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	60a3      	str	r3, [r4, #8]
 800a1de:	6963      	ldr	r3, [r4, #20]
 800a1e0:	425b      	negs	r3, r3
 800a1e2:	61a3      	str	r3, [r4, #24]
 800a1e4:	6923      	ldr	r3, [r4, #16]
 800a1e6:	b943      	cbnz	r3, 800a1fa <__swsetup_r+0xc6>
 800a1e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a1ec:	d1ba      	bne.n	800a164 <__swsetup_r+0x30>
 800a1ee:	bd70      	pop	{r4, r5, r6, pc}
 800a1f0:	0781      	lsls	r1, r0, #30
 800a1f2:	bf58      	it	pl
 800a1f4:	6963      	ldrpl	r3, [r4, #20]
 800a1f6:	60a3      	str	r3, [r4, #8]
 800a1f8:	e7f4      	b.n	800a1e4 <__swsetup_r+0xb0>
 800a1fa:	2000      	movs	r0, #0
 800a1fc:	e7f7      	b.n	800a1ee <__swsetup_r+0xba>
 800a1fe:	bf00      	nop
 800a200:	200000fc 	.word	0x200000fc
 800a204:	0800ac64 	.word	0x0800ac64
 800a208:	0800ac84 	.word	0x0800ac84
 800a20c:	0800ac44 	.word	0x0800ac44

0800a210 <abort>:
 800a210:	b508      	push	{r3, lr}
 800a212:	2006      	movs	r0, #6
 800a214:	f000 fa54 	bl	800a6c0 <raise>
 800a218:	2001      	movs	r0, #1
 800a21a:	f7f7 f811 	bl	8001240 <_exit>
	...

0800a220 <__sflush_r>:
 800a220:	898a      	ldrh	r2, [r1, #12]
 800a222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a226:	4605      	mov	r5, r0
 800a228:	0710      	lsls	r0, r2, #28
 800a22a:	460c      	mov	r4, r1
 800a22c:	d458      	bmi.n	800a2e0 <__sflush_r+0xc0>
 800a22e:	684b      	ldr	r3, [r1, #4]
 800a230:	2b00      	cmp	r3, #0
 800a232:	dc05      	bgt.n	800a240 <__sflush_r+0x20>
 800a234:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a236:	2b00      	cmp	r3, #0
 800a238:	dc02      	bgt.n	800a240 <__sflush_r+0x20>
 800a23a:	2000      	movs	r0, #0
 800a23c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a240:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a242:	2e00      	cmp	r6, #0
 800a244:	d0f9      	beq.n	800a23a <__sflush_r+0x1a>
 800a246:	2300      	movs	r3, #0
 800a248:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a24c:	682f      	ldr	r7, [r5, #0]
 800a24e:	602b      	str	r3, [r5, #0]
 800a250:	d032      	beq.n	800a2b8 <__sflush_r+0x98>
 800a252:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a254:	89a3      	ldrh	r3, [r4, #12]
 800a256:	075a      	lsls	r2, r3, #29
 800a258:	d505      	bpl.n	800a266 <__sflush_r+0x46>
 800a25a:	6863      	ldr	r3, [r4, #4]
 800a25c:	1ac0      	subs	r0, r0, r3
 800a25e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a260:	b10b      	cbz	r3, 800a266 <__sflush_r+0x46>
 800a262:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a264:	1ac0      	subs	r0, r0, r3
 800a266:	2300      	movs	r3, #0
 800a268:	4602      	mov	r2, r0
 800a26a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a26c:	6a21      	ldr	r1, [r4, #32]
 800a26e:	4628      	mov	r0, r5
 800a270:	47b0      	blx	r6
 800a272:	1c43      	adds	r3, r0, #1
 800a274:	89a3      	ldrh	r3, [r4, #12]
 800a276:	d106      	bne.n	800a286 <__sflush_r+0x66>
 800a278:	6829      	ldr	r1, [r5, #0]
 800a27a:	291d      	cmp	r1, #29
 800a27c:	d82c      	bhi.n	800a2d8 <__sflush_r+0xb8>
 800a27e:	4a2a      	ldr	r2, [pc, #168]	; (800a328 <__sflush_r+0x108>)
 800a280:	40ca      	lsrs	r2, r1
 800a282:	07d6      	lsls	r6, r2, #31
 800a284:	d528      	bpl.n	800a2d8 <__sflush_r+0xb8>
 800a286:	2200      	movs	r2, #0
 800a288:	6062      	str	r2, [r4, #4]
 800a28a:	04d9      	lsls	r1, r3, #19
 800a28c:	6922      	ldr	r2, [r4, #16]
 800a28e:	6022      	str	r2, [r4, #0]
 800a290:	d504      	bpl.n	800a29c <__sflush_r+0x7c>
 800a292:	1c42      	adds	r2, r0, #1
 800a294:	d101      	bne.n	800a29a <__sflush_r+0x7a>
 800a296:	682b      	ldr	r3, [r5, #0]
 800a298:	b903      	cbnz	r3, 800a29c <__sflush_r+0x7c>
 800a29a:	6560      	str	r0, [r4, #84]	; 0x54
 800a29c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a29e:	602f      	str	r7, [r5, #0]
 800a2a0:	2900      	cmp	r1, #0
 800a2a2:	d0ca      	beq.n	800a23a <__sflush_r+0x1a>
 800a2a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a2a8:	4299      	cmp	r1, r3
 800a2aa:	d002      	beq.n	800a2b2 <__sflush_r+0x92>
 800a2ac:	4628      	mov	r0, r5
 800a2ae:	f7ff faa5 	bl	80097fc <_free_r>
 800a2b2:	2000      	movs	r0, #0
 800a2b4:	6360      	str	r0, [r4, #52]	; 0x34
 800a2b6:	e7c1      	b.n	800a23c <__sflush_r+0x1c>
 800a2b8:	6a21      	ldr	r1, [r4, #32]
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	4628      	mov	r0, r5
 800a2be:	47b0      	blx	r6
 800a2c0:	1c41      	adds	r1, r0, #1
 800a2c2:	d1c7      	bne.n	800a254 <__sflush_r+0x34>
 800a2c4:	682b      	ldr	r3, [r5, #0]
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d0c4      	beq.n	800a254 <__sflush_r+0x34>
 800a2ca:	2b1d      	cmp	r3, #29
 800a2cc:	d001      	beq.n	800a2d2 <__sflush_r+0xb2>
 800a2ce:	2b16      	cmp	r3, #22
 800a2d0:	d101      	bne.n	800a2d6 <__sflush_r+0xb6>
 800a2d2:	602f      	str	r7, [r5, #0]
 800a2d4:	e7b1      	b.n	800a23a <__sflush_r+0x1a>
 800a2d6:	89a3      	ldrh	r3, [r4, #12]
 800a2d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a2dc:	81a3      	strh	r3, [r4, #12]
 800a2de:	e7ad      	b.n	800a23c <__sflush_r+0x1c>
 800a2e0:	690f      	ldr	r7, [r1, #16]
 800a2e2:	2f00      	cmp	r7, #0
 800a2e4:	d0a9      	beq.n	800a23a <__sflush_r+0x1a>
 800a2e6:	0793      	lsls	r3, r2, #30
 800a2e8:	680e      	ldr	r6, [r1, #0]
 800a2ea:	bf08      	it	eq
 800a2ec:	694b      	ldreq	r3, [r1, #20]
 800a2ee:	600f      	str	r7, [r1, #0]
 800a2f0:	bf18      	it	ne
 800a2f2:	2300      	movne	r3, #0
 800a2f4:	eba6 0807 	sub.w	r8, r6, r7
 800a2f8:	608b      	str	r3, [r1, #8]
 800a2fa:	f1b8 0f00 	cmp.w	r8, #0
 800a2fe:	dd9c      	ble.n	800a23a <__sflush_r+0x1a>
 800a300:	6a21      	ldr	r1, [r4, #32]
 800a302:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a304:	4643      	mov	r3, r8
 800a306:	463a      	mov	r2, r7
 800a308:	4628      	mov	r0, r5
 800a30a:	47b0      	blx	r6
 800a30c:	2800      	cmp	r0, #0
 800a30e:	dc06      	bgt.n	800a31e <__sflush_r+0xfe>
 800a310:	89a3      	ldrh	r3, [r4, #12]
 800a312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a316:	81a3      	strh	r3, [r4, #12]
 800a318:	f04f 30ff 	mov.w	r0, #4294967295
 800a31c:	e78e      	b.n	800a23c <__sflush_r+0x1c>
 800a31e:	4407      	add	r7, r0
 800a320:	eba8 0800 	sub.w	r8, r8, r0
 800a324:	e7e9      	b.n	800a2fa <__sflush_r+0xda>
 800a326:	bf00      	nop
 800a328:	20400001 	.word	0x20400001

0800a32c <_fflush_r>:
 800a32c:	b538      	push	{r3, r4, r5, lr}
 800a32e:	690b      	ldr	r3, [r1, #16]
 800a330:	4605      	mov	r5, r0
 800a332:	460c      	mov	r4, r1
 800a334:	b913      	cbnz	r3, 800a33c <_fflush_r+0x10>
 800a336:	2500      	movs	r5, #0
 800a338:	4628      	mov	r0, r5
 800a33a:	bd38      	pop	{r3, r4, r5, pc}
 800a33c:	b118      	cbz	r0, 800a346 <_fflush_r+0x1a>
 800a33e:	6983      	ldr	r3, [r0, #24]
 800a340:	b90b      	cbnz	r3, 800a346 <_fflush_r+0x1a>
 800a342:	f000 f887 	bl	800a454 <__sinit>
 800a346:	4b14      	ldr	r3, [pc, #80]	; (800a398 <_fflush_r+0x6c>)
 800a348:	429c      	cmp	r4, r3
 800a34a:	d11b      	bne.n	800a384 <_fflush_r+0x58>
 800a34c:	686c      	ldr	r4, [r5, #4]
 800a34e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a352:	2b00      	cmp	r3, #0
 800a354:	d0ef      	beq.n	800a336 <_fflush_r+0xa>
 800a356:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a358:	07d0      	lsls	r0, r2, #31
 800a35a:	d404      	bmi.n	800a366 <_fflush_r+0x3a>
 800a35c:	0599      	lsls	r1, r3, #22
 800a35e:	d402      	bmi.n	800a366 <_fflush_r+0x3a>
 800a360:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a362:	f000 f915 	bl	800a590 <__retarget_lock_acquire_recursive>
 800a366:	4628      	mov	r0, r5
 800a368:	4621      	mov	r1, r4
 800a36a:	f7ff ff59 	bl	800a220 <__sflush_r>
 800a36e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a370:	07da      	lsls	r2, r3, #31
 800a372:	4605      	mov	r5, r0
 800a374:	d4e0      	bmi.n	800a338 <_fflush_r+0xc>
 800a376:	89a3      	ldrh	r3, [r4, #12]
 800a378:	059b      	lsls	r3, r3, #22
 800a37a:	d4dd      	bmi.n	800a338 <_fflush_r+0xc>
 800a37c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a37e:	f000 f908 	bl	800a592 <__retarget_lock_release_recursive>
 800a382:	e7d9      	b.n	800a338 <_fflush_r+0xc>
 800a384:	4b05      	ldr	r3, [pc, #20]	; (800a39c <_fflush_r+0x70>)
 800a386:	429c      	cmp	r4, r3
 800a388:	d101      	bne.n	800a38e <_fflush_r+0x62>
 800a38a:	68ac      	ldr	r4, [r5, #8]
 800a38c:	e7df      	b.n	800a34e <_fflush_r+0x22>
 800a38e:	4b04      	ldr	r3, [pc, #16]	; (800a3a0 <_fflush_r+0x74>)
 800a390:	429c      	cmp	r4, r3
 800a392:	bf08      	it	eq
 800a394:	68ec      	ldreq	r4, [r5, #12]
 800a396:	e7da      	b.n	800a34e <_fflush_r+0x22>
 800a398:	0800ac64 	.word	0x0800ac64
 800a39c:	0800ac84 	.word	0x0800ac84
 800a3a0:	0800ac44 	.word	0x0800ac44

0800a3a4 <std>:
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	b510      	push	{r4, lr}
 800a3a8:	4604      	mov	r4, r0
 800a3aa:	e9c0 3300 	strd	r3, r3, [r0]
 800a3ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a3b2:	6083      	str	r3, [r0, #8]
 800a3b4:	8181      	strh	r1, [r0, #12]
 800a3b6:	6643      	str	r3, [r0, #100]	; 0x64
 800a3b8:	81c2      	strh	r2, [r0, #14]
 800a3ba:	6183      	str	r3, [r0, #24]
 800a3bc:	4619      	mov	r1, r3
 800a3be:	2208      	movs	r2, #8
 800a3c0:	305c      	adds	r0, #92	; 0x5c
 800a3c2:	f7fd fb5b 	bl	8007a7c <memset>
 800a3c6:	4b05      	ldr	r3, [pc, #20]	; (800a3dc <std+0x38>)
 800a3c8:	6263      	str	r3, [r4, #36]	; 0x24
 800a3ca:	4b05      	ldr	r3, [pc, #20]	; (800a3e0 <std+0x3c>)
 800a3cc:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3ce:	4b05      	ldr	r3, [pc, #20]	; (800a3e4 <std+0x40>)
 800a3d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3d2:	4b05      	ldr	r3, [pc, #20]	; (800a3e8 <std+0x44>)
 800a3d4:	6224      	str	r4, [r4, #32]
 800a3d6:	6323      	str	r3, [r4, #48]	; 0x30
 800a3d8:	bd10      	pop	{r4, pc}
 800a3da:	bf00      	nop
 800a3dc:	0800a6f9 	.word	0x0800a6f9
 800a3e0:	0800a71b 	.word	0x0800a71b
 800a3e4:	0800a753 	.word	0x0800a753
 800a3e8:	0800a777 	.word	0x0800a777

0800a3ec <_cleanup_r>:
 800a3ec:	4901      	ldr	r1, [pc, #4]	; (800a3f4 <_cleanup_r+0x8>)
 800a3ee:	f000 b8af 	b.w	800a550 <_fwalk_reent>
 800a3f2:	bf00      	nop
 800a3f4:	0800a32d 	.word	0x0800a32d

0800a3f8 <__sfmoreglue>:
 800a3f8:	b570      	push	{r4, r5, r6, lr}
 800a3fa:	2268      	movs	r2, #104	; 0x68
 800a3fc:	1e4d      	subs	r5, r1, #1
 800a3fe:	4355      	muls	r5, r2
 800a400:	460e      	mov	r6, r1
 800a402:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a406:	f7ff fa65 	bl	80098d4 <_malloc_r>
 800a40a:	4604      	mov	r4, r0
 800a40c:	b140      	cbz	r0, 800a420 <__sfmoreglue+0x28>
 800a40e:	2100      	movs	r1, #0
 800a410:	e9c0 1600 	strd	r1, r6, [r0]
 800a414:	300c      	adds	r0, #12
 800a416:	60a0      	str	r0, [r4, #8]
 800a418:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a41c:	f7fd fb2e 	bl	8007a7c <memset>
 800a420:	4620      	mov	r0, r4
 800a422:	bd70      	pop	{r4, r5, r6, pc}

0800a424 <__sfp_lock_acquire>:
 800a424:	4801      	ldr	r0, [pc, #4]	; (800a42c <__sfp_lock_acquire+0x8>)
 800a426:	f000 b8b3 	b.w	800a590 <__retarget_lock_acquire_recursive>
 800a42a:	bf00      	nop
 800a42c:	20001f0d 	.word	0x20001f0d

0800a430 <__sfp_lock_release>:
 800a430:	4801      	ldr	r0, [pc, #4]	; (800a438 <__sfp_lock_release+0x8>)
 800a432:	f000 b8ae 	b.w	800a592 <__retarget_lock_release_recursive>
 800a436:	bf00      	nop
 800a438:	20001f0d 	.word	0x20001f0d

0800a43c <__sinit_lock_acquire>:
 800a43c:	4801      	ldr	r0, [pc, #4]	; (800a444 <__sinit_lock_acquire+0x8>)
 800a43e:	f000 b8a7 	b.w	800a590 <__retarget_lock_acquire_recursive>
 800a442:	bf00      	nop
 800a444:	20001f0e 	.word	0x20001f0e

0800a448 <__sinit_lock_release>:
 800a448:	4801      	ldr	r0, [pc, #4]	; (800a450 <__sinit_lock_release+0x8>)
 800a44a:	f000 b8a2 	b.w	800a592 <__retarget_lock_release_recursive>
 800a44e:	bf00      	nop
 800a450:	20001f0e 	.word	0x20001f0e

0800a454 <__sinit>:
 800a454:	b510      	push	{r4, lr}
 800a456:	4604      	mov	r4, r0
 800a458:	f7ff fff0 	bl	800a43c <__sinit_lock_acquire>
 800a45c:	69a3      	ldr	r3, [r4, #24]
 800a45e:	b11b      	cbz	r3, 800a468 <__sinit+0x14>
 800a460:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a464:	f7ff bff0 	b.w	800a448 <__sinit_lock_release>
 800a468:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a46c:	6523      	str	r3, [r4, #80]	; 0x50
 800a46e:	4b13      	ldr	r3, [pc, #76]	; (800a4bc <__sinit+0x68>)
 800a470:	4a13      	ldr	r2, [pc, #76]	; (800a4c0 <__sinit+0x6c>)
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	62a2      	str	r2, [r4, #40]	; 0x28
 800a476:	42a3      	cmp	r3, r4
 800a478:	bf04      	itt	eq
 800a47a:	2301      	moveq	r3, #1
 800a47c:	61a3      	streq	r3, [r4, #24]
 800a47e:	4620      	mov	r0, r4
 800a480:	f000 f820 	bl	800a4c4 <__sfp>
 800a484:	6060      	str	r0, [r4, #4]
 800a486:	4620      	mov	r0, r4
 800a488:	f000 f81c 	bl	800a4c4 <__sfp>
 800a48c:	60a0      	str	r0, [r4, #8]
 800a48e:	4620      	mov	r0, r4
 800a490:	f000 f818 	bl	800a4c4 <__sfp>
 800a494:	2200      	movs	r2, #0
 800a496:	60e0      	str	r0, [r4, #12]
 800a498:	2104      	movs	r1, #4
 800a49a:	6860      	ldr	r0, [r4, #4]
 800a49c:	f7ff ff82 	bl	800a3a4 <std>
 800a4a0:	68a0      	ldr	r0, [r4, #8]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	2109      	movs	r1, #9
 800a4a6:	f7ff ff7d 	bl	800a3a4 <std>
 800a4aa:	68e0      	ldr	r0, [r4, #12]
 800a4ac:	2202      	movs	r2, #2
 800a4ae:	2112      	movs	r1, #18
 800a4b0:	f7ff ff78 	bl	800a3a4 <std>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	61a3      	str	r3, [r4, #24]
 800a4b8:	e7d2      	b.n	800a460 <__sinit+0xc>
 800a4ba:	bf00      	nop
 800a4bc:	0800a8c8 	.word	0x0800a8c8
 800a4c0:	0800a3ed 	.word	0x0800a3ed

0800a4c4 <__sfp>:
 800a4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4c6:	4607      	mov	r7, r0
 800a4c8:	f7ff ffac 	bl	800a424 <__sfp_lock_acquire>
 800a4cc:	4b1e      	ldr	r3, [pc, #120]	; (800a548 <__sfp+0x84>)
 800a4ce:	681e      	ldr	r6, [r3, #0]
 800a4d0:	69b3      	ldr	r3, [r6, #24]
 800a4d2:	b913      	cbnz	r3, 800a4da <__sfp+0x16>
 800a4d4:	4630      	mov	r0, r6
 800a4d6:	f7ff ffbd 	bl	800a454 <__sinit>
 800a4da:	3648      	adds	r6, #72	; 0x48
 800a4dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a4e0:	3b01      	subs	r3, #1
 800a4e2:	d503      	bpl.n	800a4ec <__sfp+0x28>
 800a4e4:	6833      	ldr	r3, [r6, #0]
 800a4e6:	b30b      	cbz	r3, 800a52c <__sfp+0x68>
 800a4e8:	6836      	ldr	r6, [r6, #0]
 800a4ea:	e7f7      	b.n	800a4dc <__sfp+0x18>
 800a4ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a4f0:	b9d5      	cbnz	r5, 800a528 <__sfp+0x64>
 800a4f2:	4b16      	ldr	r3, [pc, #88]	; (800a54c <__sfp+0x88>)
 800a4f4:	60e3      	str	r3, [r4, #12]
 800a4f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a4fa:	6665      	str	r5, [r4, #100]	; 0x64
 800a4fc:	f000 f847 	bl	800a58e <__retarget_lock_init_recursive>
 800a500:	f7ff ff96 	bl	800a430 <__sfp_lock_release>
 800a504:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a508:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a50c:	6025      	str	r5, [r4, #0]
 800a50e:	61a5      	str	r5, [r4, #24]
 800a510:	2208      	movs	r2, #8
 800a512:	4629      	mov	r1, r5
 800a514:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a518:	f7fd fab0 	bl	8007a7c <memset>
 800a51c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a520:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a524:	4620      	mov	r0, r4
 800a526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a528:	3468      	adds	r4, #104	; 0x68
 800a52a:	e7d9      	b.n	800a4e0 <__sfp+0x1c>
 800a52c:	2104      	movs	r1, #4
 800a52e:	4638      	mov	r0, r7
 800a530:	f7ff ff62 	bl	800a3f8 <__sfmoreglue>
 800a534:	4604      	mov	r4, r0
 800a536:	6030      	str	r0, [r6, #0]
 800a538:	2800      	cmp	r0, #0
 800a53a:	d1d5      	bne.n	800a4e8 <__sfp+0x24>
 800a53c:	f7ff ff78 	bl	800a430 <__sfp_lock_release>
 800a540:	230c      	movs	r3, #12
 800a542:	603b      	str	r3, [r7, #0]
 800a544:	e7ee      	b.n	800a524 <__sfp+0x60>
 800a546:	bf00      	nop
 800a548:	0800a8c8 	.word	0x0800a8c8
 800a54c:	ffff0001 	.word	0xffff0001

0800a550 <_fwalk_reent>:
 800a550:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a554:	4606      	mov	r6, r0
 800a556:	4688      	mov	r8, r1
 800a558:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a55c:	2700      	movs	r7, #0
 800a55e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a562:	f1b9 0901 	subs.w	r9, r9, #1
 800a566:	d505      	bpl.n	800a574 <_fwalk_reent+0x24>
 800a568:	6824      	ldr	r4, [r4, #0]
 800a56a:	2c00      	cmp	r4, #0
 800a56c:	d1f7      	bne.n	800a55e <_fwalk_reent+0xe>
 800a56e:	4638      	mov	r0, r7
 800a570:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a574:	89ab      	ldrh	r3, [r5, #12]
 800a576:	2b01      	cmp	r3, #1
 800a578:	d907      	bls.n	800a58a <_fwalk_reent+0x3a>
 800a57a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a57e:	3301      	adds	r3, #1
 800a580:	d003      	beq.n	800a58a <_fwalk_reent+0x3a>
 800a582:	4629      	mov	r1, r5
 800a584:	4630      	mov	r0, r6
 800a586:	47c0      	blx	r8
 800a588:	4307      	orrs	r7, r0
 800a58a:	3568      	adds	r5, #104	; 0x68
 800a58c:	e7e9      	b.n	800a562 <_fwalk_reent+0x12>

0800a58e <__retarget_lock_init_recursive>:
 800a58e:	4770      	bx	lr

0800a590 <__retarget_lock_acquire_recursive>:
 800a590:	4770      	bx	lr

0800a592 <__retarget_lock_release_recursive>:
 800a592:	4770      	bx	lr

0800a594 <__swhatbuf_r>:
 800a594:	b570      	push	{r4, r5, r6, lr}
 800a596:	460e      	mov	r6, r1
 800a598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a59c:	2900      	cmp	r1, #0
 800a59e:	b096      	sub	sp, #88	; 0x58
 800a5a0:	4614      	mov	r4, r2
 800a5a2:	461d      	mov	r5, r3
 800a5a4:	da08      	bge.n	800a5b8 <__swhatbuf_r+0x24>
 800a5a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a5aa:	2200      	movs	r2, #0
 800a5ac:	602a      	str	r2, [r5, #0]
 800a5ae:	061a      	lsls	r2, r3, #24
 800a5b0:	d410      	bmi.n	800a5d4 <__swhatbuf_r+0x40>
 800a5b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5b6:	e00e      	b.n	800a5d6 <__swhatbuf_r+0x42>
 800a5b8:	466a      	mov	r2, sp
 800a5ba:	f000 f903 	bl	800a7c4 <_fstat_r>
 800a5be:	2800      	cmp	r0, #0
 800a5c0:	dbf1      	blt.n	800a5a6 <__swhatbuf_r+0x12>
 800a5c2:	9a01      	ldr	r2, [sp, #4]
 800a5c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a5c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a5cc:	425a      	negs	r2, r3
 800a5ce:	415a      	adcs	r2, r3
 800a5d0:	602a      	str	r2, [r5, #0]
 800a5d2:	e7ee      	b.n	800a5b2 <__swhatbuf_r+0x1e>
 800a5d4:	2340      	movs	r3, #64	; 0x40
 800a5d6:	2000      	movs	r0, #0
 800a5d8:	6023      	str	r3, [r4, #0]
 800a5da:	b016      	add	sp, #88	; 0x58
 800a5dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a5e0 <__smakebuf_r>:
 800a5e0:	898b      	ldrh	r3, [r1, #12]
 800a5e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a5e4:	079d      	lsls	r5, r3, #30
 800a5e6:	4606      	mov	r6, r0
 800a5e8:	460c      	mov	r4, r1
 800a5ea:	d507      	bpl.n	800a5fc <__smakebuf_r+0x1c>
 800a5ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a5f0:	6023      	str	r3, [r4, #0]
 800a5f2:	6123      	str	r3, [r4, #16]
 800a5f4:	2301      	movs	r3, #1
 800a5f6:	6163      	str	r3, [r4, #20]
 800a5f8:	b002      	add	sp, #8
 800a5fa:	bd70      	pop	{r4, r5, r6, pc}
 800a5fc:	ab01      	add	r3, sp, #4
 800a5fe:	466a      	mov	r2, sp
 800a600:	f7ff ffc8 	bl	800a594 <__swhatbuf_r>
 800a604:	9900      	ldr	r1, [sp, #0]
 800a606:	4605      	mov	r5, r0
 800a608:	4630      	mov	r0, r6
 800a60a:	f7ff f963 	bl	80098d4 <_malloc_r>
 800a60e:	b948      	cbnz	r0, 800a624 <__smakebuf_r+0x44>
 800a610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a614:	059a      	lsls	r2, r3, #22
 800a616:	d4ef      	bmi.n	800a5f8 <__smakebuf_r+0x18>
 800a618:	f023 0303 	bic.w	r3, r3, #3
 800a61c:	f043 0302 	orr.w	r3, r3, #2
 800a620:	81a3      	strh	r3, [r4, #12]
 800a622:	e7e3      	b.n	800a5ec <__smakebuf_r+0xc>
 800a624:	4b0d      	ldr	r3, [pc, #52]	; (800a65c <__smakebuf_r+0x7c>)
 800a626:	62b3      	str	r3, [r6, #40]	; 0x28
 800a628:	89a3      	ldrh	r3, [r4, #12]
 800a62a:	6020      	str	r0, [r4, #0]
 800a62c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a630:	81a3      	strh	r3, [r4, #12]
 800a632:	9b00      	ldr	r3, [sp, #0]
 800a634:	6163      	str	r3, [r4, #20]
 800a636:	9b01      	ldr	r3, [sp, #4]
 800a638:	6120      	str	r0, [r4, #16]
 800a63a:	b15b      	cbz	r3, 800a654 <__smakebuf_r+0x74>
 800a63c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a640:	4630      	mov	r0, r6
 800a642:	f000 f8d1 	bl	800a7e8 <_isatty_r>
 800a646:	b128      	cbz	r0, 800a654 <__smakebuf_r+0x74>
 800a648:	89a3      	ldrh	r3, [r4, #12]
 800a64a:	f023 0303 	bic.w	r3, r3, #3
 800a64e:	f043 0301 	orr.w	r3, r3, #1
 800a652:	81a3      	strh	r3, [r4, #12]
 800a654:	89a0      	ldrh	r0, [r4, #12]
 800a656:	4305      	orrs	r5, r0
 800a658:	81a5      	strh	r5, [r4, #12]
 800a65a:	e7cd      	b.n	800a5f8 <__smakebuf_r+0x18>
 800a65c:	0800a3ed 	.word	0x0800a3ed

0800a660 <_malloc_usable_size_r>:
 800a660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a664:	1f18      	subs	r0, r3, #4
 800a666:	2b00      	cmp	r3, #0
 800a668:	bfbc      	itt	lt
 800a66a:	580b      	ldrlt	r3, [r1, r0]
 800a66c:	18c0      	addlt	r0, r0, r3
 800a66e:	4770      	bx	lr

0800a670 <_raise_r>:
 800a670:	291f      	cmp	r1, #31
 800a672:	b538      	push	{r3, r4, r5, lr}
 800a674:	4604      	mov	r4, r0
 800a676:	460d      	mov	r5, r1
 800a678:	d904      	bls.n	800a684 <_raise_r+0x14>
 800a67a:	2316      	movs	r3, #22
 800a67c:	6003      	str	r3, [r0, #0]
 800a67e:	f04f 30ff 	mov.w	r0, #4294967295
 800a682:	bd38      	pop	{r3, r4, r5, pc}
 800a684:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a686:	b112      	cbz	r2, 800a68e <_raise_r+0x1e>
 800a688:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a68c:	b94b      	cbnz	r3, 800a6a2 <_raise_r+0x32>
 800a68e:	4620      	mov	r0, r4
 800a690:	f000 f830 	bl	800a6f4 <_getpid_r>
 800a694:	462a      	mov	r2, r5
 800a696:	4601      	mov	r1, r0
 800a698:	4620      	mov	r0, r4
 800a69a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a69e:	f000 b817 	b.w	800a6d0 <_kill_r>
 800a6a2:	2b01      	cmp	r3, #1
 800a6a4:	d00a      	beq.n	800a6bc <_raise_r+0x4c>
 800a6a6:	1c59      	adds	r1, r3, #1
 800a6a8:	d103      	bne.n	800a6b2 <_raise_r+0x42>
 800a6aa:	2316      	movs	r3, #22
 800a6ac:	6003      	str	r3, [r0, #0]
 800a6ae:	2001      	movs	r0, #1
 800a6b0:	e7e7      	b.n	800a682 <_raise_r+0x12>
 800a6b2:	2400      	movs	r4, #0
 800a6b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a6b8:	4628      	mov	r0, r5
 800a6ba:	4798      	blx	r3
 800a6bc:	2000      	movs	r0, #0
 800a6be:	e7e0      	b.n	800a682 <_raise_r+0x12>

0800a6c0 <raise>:
 800a6c0:	4b02      	ldr	r3, [pc, #8]	; (800a6cc <raise+0xc>)
 800a6c2:	4601      	mov	r1, r0
 800a6c4:	6818      	ldr	r0, [r3, #0]
 800a6c6:	f7ff bfd3 	b.w	800a670 <_raise_r>
 800a6ca:	bf00      	nop
 800a6cc:	200000fc 	.word	0x200000fc

0800a6d0 <_kill_r>:
 800a6d0:	b538      	push	{r3, r4, r5, lr}
 800a6d2:	4d07      	ldr	r5, [pc, #28]	; (800a6f0 <_kill_r+0x20>)
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	4604      	mov	r4, r0
 800a6d8:	4608      	mov	r0, r1
 800a6da:	4611      	mov	r1, r2
 800a6dc:	602b      	str	r3, [r5, #0]
 800a6de:	f7f6 fd9f 	bl	8001220 <_kill>
 800a6e2:	1c43      	adds	r3, r0, #1
 800a6e4:	d102      	bne.n	800a6ec <_kill_r+0x1c>
 800a6e6:	682b      	ldr	r3, [r5, #0]
 800a6e8:	b103      	cbz	r3, 800a6ec <_kill_r+0x1c>
 800a6ea:	6023      	str	r3, [r4, #0]
 800a6ec:	bd38      	pop	{r3, r4, r5, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20001f08 	.word	0x20001f08

0800a6f4 <_getpid_r>:
 800a6f4:	f7f6 bd8c 	b.w	8001210 <_getpid>

0800a6f8 <__sread>:
 800a6f8:	b510      	push	{r4, lr}
 800a6fa:	460c      	mov	r4, r1
 800a6fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a700:	f000 f894 	bl	800a82c <_read_r>
 800a704:	2800      	cmp	r0, #0
 800a706:	bfab      	itete	ge
 800a708:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a70a:	89a3      	ldrhlt	r3, [r4, #12]
 800a70c:	181b      	addge	r3, r3, r0
 800a70e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a712:	bfac      	ite	ge
 800a714:	6563      	strge	r3, [r4, #84]	; 0x54
 800a716:	81a3      	strhlt	r3, [r4, #12]
 800a718:	bd10      	pop	{r4, pc}

0800a71a <__swrite>:
 800a71a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a71e:	461f      	mov	r7, r3
 800a720:	898b      	ldrh	r3, [r1, #12]
 800a722:	05db      	lsls	r3, r3, #23
 800a724:	4605      	mov	r5, r0
 800a726:	460c      	mov	r4, r1
 800a728:	4616      	mov	r6, r2
 800a72a:	d505      	bpl.n	800a738 <__swrite+0x1e>
 800a72c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a730:	2302      	movs	r3, #2
 800a732:	2200      	movs	r2, #0
 800a734:	f000 f868 	bl	800a808 <_lseek_r>
 800a738:	89a3      	ldrh	r3, [r4, #12]
 800a73a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a73e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a742:	81a3      	strh	r3, [r4, #12]
 800a744:	4632      	mov	r2, r6
 800a746:	463b      	mov	r3, r7
 800a748:	4628      	mov	r0, r5
 800a74a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a74e:	f000 b817 	b.w	800a780 <_write_r>

0800a752 <__sseek>:
 800a752:	b510      	push	{r4, lr}
 800a754:	460c      	mov	r4, r1
 800a756:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a75a:	f000 f855 	bl	800a808 <_lseek_r>
 800a75e:	1c43      	adds	r3, r0, #1
 800a760:	89a3      	ldrh	r3, [r4, #12]
 800a762:	bf15      	itete	ne
 800a764:	6560      	strne	r0, [r4, #84]	; 0x54
 800a766:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a76a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a76e:	81a3      	strheq	r3, [r4, #12]
 800a770:	bf18      	it	ne
 800a772:	81a3      	strhne	r3, [r4, #12]
 800a774:	bd10      	pop	{r4, pc}

0800a776 <__sclose>:
 800a776:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a77a:	f000 b813 	b.w	800a7a4 <_close_r>
	...

0800a780 <_write_r>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	4d07      	ldr	r5, [pc, #28]	; (800a7a0 <_write_r+0x20>)
 800a784:	4604      	mov	r4, r0
 800a786:	4608      	mov	r0, r1
 800a788:	4611      	mov	r1, r2
 800a78a:	2200      	movs	r2, #0
 800a78c:	602a      	str	r2, [r5, #0]
 800a78e:	461a      	mov	r2, r3
 800a790:	f7f6 fd7d 	bl	800128e <_write>
 800a794:	1c43      	adds	r3, r0, #1
 800a796:	d102      	bne.n	800a79e <_write_r+0x1e>
 800a798:	682b      	ldr	r3, [r5, #0]
 800a79a:	b103      	cbz	r3, 800a79e <_write_r+0x1e>
 800a79c:	6023      	str	r3, [r4, #0]
 800a79e:	bd38      	pop	{r3, r4, r5, pc}
 800a7a0:	20001f08 	.word	0x20001f08

0800a7a4 <_close_r>:
 800a7a4:	b538      	push	{r3, r4, r5, lr}
 800a7a6:	4d06      	ldr	r5, [pc, #24]	; (800a7c0 <_close_r+0x1c>)
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	4604      	mov	r4, r0
 800a7ac:	4608      	mov	r0, r1
 800a7ae:	602b      	str	r3, [r5, #0]
 800a7b0:	f7f6 fd89 	bl	80012c6 <_close>
 800a7b4:	1c43      	adds	r3, r0, #1
 800a7b6:	d102      	bne.n	800a7be <_close_r+0x1a>
 800a7b8:	682b      	ldr	r3, [r5, #0]
 800a7ba:	b103      	cbz	r3, 800a7be <_close_r+0x1a>
 800a7bc:	6023      	str	r3, [r4, #0]
 800a7be:	bd38      	pop	{r3, r4, r5, pc}
 800a7c0:	20001f08 	.word	0x20001f08

0800a7c4 <_fstat_r>:
 800a7c4:	b538      	push	{r3, r4, r5, lr}
 800a7c6:	4d07      	ldr	r5, [pc, #28]	; (800a7e4 <_fstat_r+0x20>)
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	4604      	mov	r4, r0
 800a7cc:	4608      	mov	r0, r1
 800a7ce:	4611      	mov	r1, r2
 800a7d0:	602b      	str	r3, [r5, #0]
 800a7d2:	f7f6 fd84 	bl	80012de <_fstat>
 800a7d6:	1c43      	adds	r3, r0, #1
 800a7d8:	d102      	bne.n	800a7e0 <_fstat_r+0x1c>
 800a7da:	682b      	ldr	r3, [r5, #0]
 800a7dc:	b103      	cbz	r3, 800a7e0 <_fstat_r+0x1c>
 800a7de:	6023      	str	r3, [r4, #0]
 800a7e0:	bd38      	pop	{r3, r4, r5, pc}
 800a7e2:	bf00      	nop
 800a7e4:	20001f08 	.word	0x20001f08

0800a7e8 <_isatty_r>:
 800a7e8:	b538      	push	{r3, r4, r5, lr}
 800a7ea:	4d06      	ldr	r5, [pc, #24]	; (800a804 <_isatty_r+0x1c>)
 800a7ec:	2300      	movs	r3, #0
 800a7ee:	4604      	mov	r4, r0
 800a7f0:	4608      	mov	r0, r1
 800a7f2:	602b      	str	r3, [r5, #0]
 800a7f4:	f7f6 fd83 	bl	80012fe <_isatty>
 800a7f8:	1c43      	adds	r3, r0, #1
 800a7fa:	d102      	bne.n	800a802 <_isatty_r+0x1a>
 800a7fc:	682b      	ldr	r3, [r5, #0]
 800a7fe:	b103      	cbz	r3, 800a802 <_isatty_r+0x1a>
 800a800:	6023      	str	r3, [r4, #0]
 800a802:	bd38      	pop	{r3, r4, r5, pc}
 800a804:	20001f08 	.word	0x20001f08

0800a808 <_lseek_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	4d07      	ldr	r5, [pc, #28]	; (800a828 <_lseek_r+0x20>)
 800a80c:	4604      	mov	r4, r0
 800a80e:	4608      	mov	r0, r1
 800a810:	4611      	mov	r1, r2
 800a812:	2200      	movs	r2, #0
 800a814:	602a      	str	r2, [r5, #0]
 800a816:	461a      	mov	r2, r3
 800a818:	f7f6 fd7c 	bl	8001314 <_lseek>
 800a81c:	1c43      	adds	r3, r0, #1
 800a81e:	d102      	bne.n	800a826 <_lseek_r+0x1e>
 800a820:	682b      	ldr	r3, [r5, #0]
 800a822:	b103      	cbz	r3, 800a826 <_lseek_r+0x1e>
 800a824:	6023      	str	r3, [r4, #0]
 800a826:	bd38      	pop	{r3, r4, r5, pc}
 800a828:	20001f08 	.word	0x20001f08

0800a82c <_read_r>:
 800a82c:	b538      	push	{r3, r4, r5, lr}
 800a82e:	4d07      	ldr	r5, [pc, #28]	; (800a84c <_read_r+0x20>)
 800a830:	4604      	mov	r4, r0
 800a832:	4608      	mov	r0, r1
 800a834:	4611      	mov	r1, r2
 800a836:	2200      	movs	r2, #0
 800a838:	602a      	str	r2, [r5, #0]
 800a83a:	461a      	mov	r2, r3
 800a83c:	f7f6 fd0a 	bl	8001254 <_read>
 800a840:	1c43      	adds	r3, r0, #1
 800a842:	d102      	bne.n	800a84a <_read_r+0x1e>
 800a844:	682b      	ldr	r3, [r5, #0]
 800a846:	b103      	cbz	r3, 800a84a <_read_r+0x1e>
 800a848:	6023      	str	r3, [r4, #0]
 800a84a:	bd38      	pop	{r3, r4, r5, pc}
 800a84c:	20001f08 	.word	0x20001f08

0800a850 <_init>:
 800a850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a852:	bf00      	nop
 800a854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a856:	bc08      	pop	{r3}
 800a858:	469e      	mov	lr, r3
 800a85a:	4770      	bx	lr

0800a85c <_fini>:
 800a85c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a85e:	bf00      	nop
 800a860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a862:	bc08      	pop	{r3}
 800a864:	469e      	mov	lr, r3
 800a866:	4770      	bx	lr
